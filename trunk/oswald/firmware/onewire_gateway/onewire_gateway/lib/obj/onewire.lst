

HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Fri Feb 06 16:23:19 2009


     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7D3C                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7D3C                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7D3C                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7D3C                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7D3C                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7D3C                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7D3C                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7D3C                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7D3C                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7D3C                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7D3C                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7D3C                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7D3C                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7D3C                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7D3C                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7D3C                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7D3C                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7D3C                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7D3C                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7D3C                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7D3C                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7D3C                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7D3C                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7D3C                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7D3C                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7D3C                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7D3C                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7D3C                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7D3C                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7D3C                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7D3C                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7D3C                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7D3C                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7D3C                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.inc
     4                          ;;  Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the OneWire user module interface
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          
    13                          ;;*****************************************************************************
    14                          
    15                          ;--------------------------------
    16                          ;  Interrupt registers and masks
    17                          ;--------------------------------
    18  0040                    OneWire_BIT_INT_MASK:                   equ 0x40
    19  00DF                    OneWire_BIT_INT_REG:                    equ 0x0df
    20                          
    21                          IF (OneWire_BIT_INT_REG - INT_MSK1)
    22  00DC                    OneWire_BIT_INT_CLR:                    equ INT_CLR2
    23                          ELSE
    24                          OneWire_BIT_INT_CLR:                    equ INT_CLR1
    25                          ENDIF
    26                          
    27                          ;--------------------------------
    28                          ;  Parasite Power Pin selected
    29                          ;--------------------------------
    30  0001                    OneWire_OUT_PORT_DM1:                   equ PRT0DM1
    31  0001                    OneWire_OUT_PORT_MASK:                  equ 0x1
    32                          
    33                          ;---------------------------
    34                          ; One Wire constants and masks
    35                          ;---------------------------
    36  0000                    OneWire_CRC16_ENABLE:                   equ   0
    37  0001                    OneWire_SEARCH_ENABLE:                  equ   1
    38  0000                    OneWire_OVERDRIVE_ENABLE:               equ   0
    39  0000                    OneWire_PARASITE_ENABLE:                equ   0
    40                          
    41                          ;-----------------------------------------------
    42                          ;  Registers used by OneWire
    43                          ;-----------------------------------------------
    44  0054                    OneWire_BITCLK_FUNC_REG:    equ 54h              ;Function register
    45  0055                    OneWire_BITCLK_INPUT_REG:   equ 55h              ;Input register
    46  0056                    OneWire_BITCLK_OUTPUT_REG:  equ 56h              ;Output register
    47  0057                    OneWire_BITCLK_CONTROL_REG: equ 57h              ;Control register
    48  0054                    OneWire_BITCLK_COUNTER_REG: equ 54h              ;Counter register
    49  0055                    OneWire_BITCLK_PERIOD_REG:  equ 55h              ;Period register
    50  0056                    OneWire_BITCLK_COMPARE_REG: equ 56h              ;Compare register
    51  0058                    OneWire_XCVR_FUNC_REG:  equ 58h                  ;Function register
    52  0059                    OneWire_XCVR_INPUT_REG: equ 59h                  ;Input register
    53  005A                    OneWire_XCVR_OUTPUT_REG:    equ 5ah              ;Output register
    54  005B                    OneWire_XCVR_CONTROL_REG:   equ 5bh              ;Control register
    55  0058                    OneWire_XCVR_SHIFT_REG: equ 58h                  ;Counter register
    56  0059                    OneWire_XCVR_TX_BUFFER_REG: equ 59h              ;Period register
    57  005A                    OneWire_XCVR_RX_BUFFER_REG: equ 5ah              ;Compare register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.asm
     4                          ;;   Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: OneWire User Module software implementation file
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API function
    14                          ;;        returns. For Large Memory Model devices it is also the caller's
    15                          ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;   Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "OneWire.inc"
    26                          
    27                          export  OneWire_Start
    28                          export _OneWire_Start
    29                          export  OneWire_Stop
    30                          export _OneWire_Stop
    31                          
    32                          export  OneWire_fReset
    33                          export _OneWire_fReset
    34                          export  OneWire_WriteBit
    35                          export _OneWire_WriteBit
    36                          export  OneWire_bReadBit
    37                          export _OneWire_bReadBit
    38                          export  OneWire_WriteByte
    39                          export _OneWire_WriteByte
    40                          export  OneWire_bReadByte
    41                          export _OneWire_bReadByte
    42                          export  OneWire_ClearCRC8
    43                          export _OneWire_ClearCRC8
    44                          export  OneWire_bCRC8
    45                          export _OneWire_bCRC8
    46                          
    47                          export  OneWire_bCRC8Value
    48                          export _OneWire_bCRC8Value
    49                          IF (OneWire_CRC16_ENABLE)
    50                          export  OneWire_ClearCRC16
    51                          export _OneWire_ClearCRC16
    52                          export  OneWire_wCRC16
    53                          export _OneWire_wCRC16
    54                          export  OneWire_wCRC16Value
    55                          export _OneWire_wCRC16Value
    56                          ENDIF
    57                          
    58                          IF (OneWire_SEARCH_ENABLE)
    59                          export   OneWire_GetROM
    60                          export  _OneWire_GetROM
    61                          export   OneWire_SetROM
    62                          export  _OneWire_SetROM
    63                          export   OneWire_fFindFirst
    64                          export  _OneWire_fFindFirst
    65                          export   OneWire_fFindNext
    66                          export  _OneWire_fFindNext
    67                          export   OneWire_fVerify
    68                          export  _OneWire_fVerify
    69                          export   OneWire_FamilyTargetSetup
    70                          export  _OneWire_FamilyTargetSetup
    71                          export   OneWire_FamilySkipSetup
    72                          export  _OneWire_FamilySkipSetup
    73                          ENDIF
    74                          
    75                          IF (OneWire_OVERDRIVE_ENABLE)
    76                          export  OneWire_SetOverdrive
    77                          export _OneWire_SetOverdrive
    78                          export  OneWire_ClearOverdrive
    79                          export _OneWire_ClearOverdrive
    80                          ENDIF
    81                          
    82                          IF (OneWire_PARASITE_ENABLE)
    83                          export  OneWire_WriteByteStrong
    84                          export _OneWire_WriteByteStrong
    85                          export  OneWire_SetResistive
    86                          export _OneWire_SetResistive
    87                          ENDIF
    88                          
    89                          AREA bss
    90                          
    91  0053                    _OneWire_bCRC8Value:
    92  0053                     OneWire_bCRC8Value:                             blk   1
    93                          
    94                          IF (OneWire_CRC16_ENABLE)
    95                          _OneWire_wCRC16Value:
    96                           OneWire_wCRC16Value:                            blk   2
    97                          ENDIF
    98                          
    99                          IF (OneWire_SEARCH_ENABLE)
   100  0054                    OneWire_ROM:                                     blk   8
   101  005C                    OneWire_LastDiscrepancy:                         blk   1
   102  005D                    OneWire_LastFamilyDiscrepancy:                   blk   1
   103  005E                    OneWire_LastDeviceFlag:                          blk   1
   104                          ENDIF
   105                          
   106                          IF (OneWire_OVERDRIVE_ENABLE )
   107                          OneWire_bMode:                                   blk   1
   108                          ENDIF
   109                          
   110                          AREA UserModules (ROM, REL)
   111                          
   112  00F1                    RESET_PATTERN:                          equ   F1h
   113  0001                    ZERO_PATTERN:                           equ   01h
   114  00FD                    ONE_PATTERN:                            equ   FDh
   115  000F                    INIT_PERIOD:                            equ   0Fh
   116  00F9                    RESET_PERIOD:                           equ   F9h      ;Divide by 250 (249+1)
   117  000D                    BIT_PERIOD:                             equ   0Dh      ;Divide by 14 (13+1)
   118  0019                    OD_RESET_PERIOD:                        equ   19h      ;Divide by 26 (25+1)
   119  0001                    OD_BIT_PERIOD:                          equ   01h      ;Divide by 2 (1+1)
   120                          
   121  0020                    SPIM_SPI_COMPLETE:              equ 0x20    ;SPI Tx/Rx cycle has completed
   122  0000                    SPIM_MODE_0:                   equ 0x00    ; MODE 0 - Leading edge latches data - pos clock
   123  0080                    SPIM_LSB_FIRST:                equ 0x80    ; LSB bit transmitted/received first
   124  0001                    CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
   125  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
   126  000F                    INPUT_REG_CLOCK_MASK:          equ 0x0F    ; Input register clock mask
   127  0001                    OD_MODE:                       equ 0x01    ;OverDrive
   128                          
   129                          .SECTION
   130                          ;-----------------------------------------------------------------------------
   131                          ;  FUNCTION NAME: OneWire_Start
   132                          ;
   133                          ;  DESCRIPTION:
   134                          ;     Enables the clock divider and tranceiver blocks.  Initializes the
   135                          ;     OneWireOut pin to high.  Sets the clock divider period.
   136                          ;-----------------------------------------------------------------------------
   137                          ;  ARGUMENTS:
   138                          ;     none.
   139                          ;
   140                          ;  RETURNS:
   141                          ;     none.
   142                          ;
   143                          ;  SIDE EFFECTS:
   144                          ;    The A and X registers may be modified by this or future implementations
   145                          ;    of this function.  The same is true for all RAM page pointer registers in
   146                          ;    the Large Memory Model.  When necessary, it is the calling function's
   147                          ;    responsibility to perserve their values across calls to fastcall16
   148                          ;    functions.   Currently only the page pointer registers listed below are modified:
   149                          ;       CUR_PP
   150                          ;
   151                          ;  THEORY of OPERATION:
   152                          ;     Set the start bit in the Control register.
   153                          ;-----------------------------------------------------------------------------
   154  756A                     OneWire_Start:
   155  756A                    _OneWire_Start:
   156                             RAM_PROLOGUE RAM_USE_CLASS_4
   157                          
   158                          IF (OneWire_OVERDRIVE_ENABLE | OneWire_PARASITE_ENABLE)
   159                              RAM_SETPAGE_CUR >OneWire_bMode
   160                              mov   [OneWire_bMode], 00h
   161                          ENDIF
   162  756A  62 55 0F              mov   reg[OneWire_BITCLK_PERIOD_REG], INIT_PERIOD        ; Set divider period to initialize OneW
                                ireOut
   163  756D  43 57 01              or    reg[OneWire_BITCLK_CONTROL_REG], CONTROL_REG_START_BIT  ; Start the clock divider
   164  7570  62 5B 81              mov   reg[OneWire_XCVR_CONTROL_REG], SPIM_MODE_0|SPIM_LSB_FIRST|CONTROL_REG_START_BIT
   165  7573  50 FF                 mov   A, FFh                                 ; Initialize OneWireOut to high
   166  7575  92EF                  call  OneWire_SendTxDataWait
   167  7577  62 55 0D              mov   reg[OneWire_BITCLK_PERIOD_REG], BIT_PERIOD
   168                          
   169                              RAM_EPILOGUE RAM_USE_CLASS_4
   170  757A  7F                    ret
   171                          .ENDSECTION
   172                          
   173                          .SECTION
   174                          ;-----------------------------------------------------------------------------
   175                          ;  FUNCTION NAME: OneWire_Stop
   176                          ;
   177                          ;  DESCRIPTION:
   178                          ;     Disables BitClk and XCVR operation.
   179                          ;-----------------------------------------------------------------------------
   180                          ;  ARGUMENTS:
   181                          ;     none.
   182                          ;
   183                          ;  RETURNS:
   184                          ;     none.
   185                          ;
   186                          ;  SIDE EFFECTS:
   187                          ;    The A and X registers may be modified by this or future implementations
   188                          ;    of this function.  The same is true for all RAM page pointer registers in
   189                          ;    the Large Memory Model.  When necessary, it is the calling function's
   190                          ;    responsibility to preserve their values across calls to fastcall16
   191                          ;    functions.
   192                          ;
   193                          ;  THEORY of OPERATION:
   194                          ;     Clear the start bits in the Control registers.
   195                          ;-----------------------------------------------------------------------------
   196  757B                     OneWire_Stop:
   197  757B                    _OneWire_Stop:
   198                              RAM_PROLOGUE RAM_USE_CLASS_1
   199                          
   200  757B  41 57 FE              and   reg[OneWire_BITCLK_CONTROL_REG], ~CONTROL_REG_START_BIT
   201  757E  41 5B FE              and   reg[OneWire_XCVR_CONTROL_REG], ~CONTROL_REG_START_BIT
   202                          
   203                              RAM_EPILOGUE RAM_USE_CLASS_1
   204  7581  7F                    ret
   205                          .ENDSECTION
   206                          
   207                          .SECTION
   208                          ;-----------------------------------------------------------------------------
   209                          ;  FUNCTION NAME: OneWire_fReset
   210                          ;
   211                          ;  DESCRIPTION:
   212                          ;     Reset the OneWireOut pin
   213                          ;-----------------------------------------------------------------------------
   214                          ;
   215                          ;  ARGUMENTS:
   216                          ;     none.
   217                          ;
   218                          ;  RETURNS:
   219                          ;     A = 01h if one or more devices responded.
   220                          ;
   221                          ;  SIDE EFFECTS:
   222                          ;    The A and X registers may be modified by this or future implementations
   223                          ;    of this function.  The same is true for all RAM page pointer registers in
   224                          ;    the Large Memory Model.  When necessary, it is the calling function's
   225                          ;    responsibility to preserve their values across calls to fastcall16
   226                          ;    functions. Currently only the page pointer registers listed below
   227                          ;    are modified: CUR_PP
   228                          ;
   229                          ;-----------------------------------------------------------------------------
   230  7582                     OneWire_fReset:
   231  7582                    _OneWire_fReset:
   232                              RAM_PROLOGUE RAM_USE_CLASS_4
   233                          
   234                          IF (OneWire_OVERDRIVE_ENABLE)
   235                              RAM_SETPAGE_CUR >OneWire_bMode
   236                          ENDIF
   237  7582  50 F9                 mov   A, RESET_PERIOD                        ; Reset period
   238                          IF (OneWire_OVERDRIVE_ENABLE)
   239                              tst   [OneWire_bMode],OD_MODE                ; Test for OverDrive mode
   240                              jz    .Reset_Normal
   241                              mov   reg[OneWire_BITCLK_PERIOD_REG], OD_RESET_PERIOD  ; OverDrive Reset period
   242                              mov   A, RESET_PATTERN                       ; Reset bit pattern
   243                              call  OneWire_SendTxDataWait
   244                              mov   A, OD_BIT_PERIOD                       ; OverDrive Bit period
   245                              jmp   .Reset_WriteBitPeriod
   246                          ENDIF
   247  7584                    .Reset_Normal:
   248  7584  60 55                 mov   reg[OneWire_BITCLK_PERIOD_REG], A
   249  7586  50 F1                 mov   A, RESET_PATTERN                       ; Reset bit pattern
   250  7588  92DC                  call  OneWire_SendTxDataWait
   251  758A  50 0D                 mov   A, BIT_PERIOD                          ; Bit period
   252  758C                    .Reset_WriteBitPeriod:
   253  758C  60 55                 mov   reg[OneWire_BITCLK_PERIOD_REG], A
   254  758E  5D 5A                 mov   A, reg[OneWire_XCVR_RX_BUFFER_REG]
   255  7590  39 F1                 cmp   A, RESET_PATTERN
   256  7592  D005                  jnc   .Reset_NoResponse
   257  7594  50 01                 mov   A,01h
   258  7596  8003                  jmp   .Reset_done
   259  7598                    .Reset_NoResponse:
   260  7598  50 00                 mov   A,00h
   261  759A                    .Reset_done:
   262                          
   263                              RAM_EPILOGUE RAM_USE_CLASS_4
   264  759A  7F                    ret
   265                          .ENDSECTION
   266                          
   267                          .SECTION
   268                          ;-----------------------------------------------------------------------------
   269                          ;  FUNCTION NAME: OneWire_WriteBit
   270                          ;
   271                          ;  DESCRIPTION:
   272                          ;     Write a bit to the OneWireOut pin.
   273                          ;-----------------------------------------------------------------------------
   274                          ;  ARGUMENTS:
   275                          ;     A  => less significant bit is output to OneWireOut pin
   276                          ;
   277                          ;  RETURNS:
   278                          ;     none.
   279                          ;
   280                          ;  SIDE EFFECTS:
   281                          ;    The A and X registers may be modified by this or future implementations
   282                          ;    of this function.  The same is true for all RAM page pointer registers in
   283                          ;    the Large Memory Model.  When necessary, it is the calling function's
   284                          ;    responsibility to preserve their values across calls to fastcall16
   285                          ;    functions.
   286                          ;
   287                          ;-----------------------------------------------------------------------------
   288  759B                     OneWire_WriteBit:
   289  759B                    _OneWire_WriteBit:
   290                              RAM_PROLOGUE RAM_USE_CLASS_1
   291                          
   292  759B  6D                    rrc   A                                      ; Rotate LSB into CF to test
   293  759C  C005                  jc    .WriteBit_1                            ; LSB is 1
   294  759E  50 01                 mov   A, ZERO_PATTERN                        ; "0" bit pattern
   295  75A0  8003                  jmp   .WriteBit_Send
   296  75A2                    .WriteBit_1:
   297  75A2  50 FD                 mov   A, ONE_PATTERN                         ; "1" bit pattern
   298  75A4                    .WriteBit_Send:
   299  75A4  92C0                  call  OneWire_SendTxDataWait
   300                          
   301                              RAM_EPILOGUE RAM_USE_CLASS_1
   302  75A6  7F                    ret
   303                          .ENDSECTION
   304                          
   305                          
   306                          .SECTION
   307                          ;-----------------------------------------------------------------------------
   308                          ;  FUNCTION NAME: OneWire_bReadBit
   309                          ;
   310                          ;  DESCRIPTION:
   311                          ;     Read the OneWireIn pin
   312                          ;-----------------------------------------------------------------------------
   313                          ;
   314                          ;  ARGUMENTS:
   315                          ;     none.
   316                          ;
   317                          ;  RETURNS:
   318                          ;     the less significant bit of A returns value read from OneWire pin.
   319                          ;
   320                          ;  SIDE EFFECTS:
   321                          ;    The A and X registers may be modified by this or future implementations
   322                          ;    of this function.  The same is true for all RAM page pointer registers in
   323                          ;    the Large Memory Model.  When necessary, it is the calling function's
   324                          ;    responsibility to preserve their values across calls to fastcall16
   325                          ;    functions.
   326                          ;
   327                          ;-----------------------------------------------------------------------------
   328  75A7                     OneWire_bReadBit:
   329  75A7                    _OneWire_bReadBit:
   330                              RAM_PROLOGUE RAM_USE_CLASS_1
   331                          
   332  75A7  50 FD                 mov    A, ONE_PATTERN
   333  75A9  92BB                  call   OneWire_SendTxDataWait
   334  75AB  5D 5A                 mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
   335  75AD  39 FD                 cmp    A, ONE_PATTERN
   336  75AF  D005                  jnc    .ReadBit_One
   337  75B1  50 00                 mov    A, 00h
   338  75B3  8003                  jmp    .Done
   339  75B5                    .ReadBit_One:
   340  75B5  50 01                 mov    A, 01h
   341  75B7                    .Done:
   342                          
   343                              RAM_EPILOGUE RAM_USE_CLASS_1
   344  75B7  7F                    ret
   345                          .ENDSECTION
   346                          
   347                          .SECTION
   348                          ;-----------------------------------------------------------------------------
   349                          ;  FUNCTION NAME: OneWire_WriteByte
   350                          ;
   351                          ;  DESCRIPTION:
   352                          ;     Write a byte to the OneWireOut pin
   353                          ;-----------------------------------------------------------------------------
   354                          ;
   355                          ;  ARGUMENTS:
   356                          ;     A => byte output to the OneWireOut pin
   357                          ;
   358                          ;  RETURNS:
   359                          ;     none.
   360                          ;
   361                          ;  SIDE EFFECTS:
   362                          ;    The A and X registers may be modified by this or future implementations
   363                          ;    of this function.  The same is true for all RAM page pointer registers in
   364                          ;    the Large Memory Model.  When necessary, it is the calling function's
   365                          ;    responsibility to preserve their values across calls to fastcall16
   366                          ;    functions.
   367                          ;
   368                          ;-----------------------------------------------------------------------------
   369  75B8                     OneWire_WriteByte:
   370  75B8                    _OneWire_WriteByte:
   371                              RAM_PROLOGUE RAM_USE_CLASS_1
   372                              
   373  75B8  08                    push   A
   374  75B9  57 08                 mov    X, 08h
   375  75BB                    .ByteLoop:
   376  75BB  18                    pop    A
   377  75BC  6D                    rrc    A
   378  75BD  08                    push   A
   379  75BE  C005                  jc     .LoadPattern_1
   380  75C0  50 01                 mov    A, ZERO_PATTERN
   381  75C2  8003                  jmp    .SendPattern
   382  75C4                    .LoadPattern_1:
   383  75C4  50 FD                 mov    A, ONE_PATTERN
   384  75C6                    .SendPattern:
   385  75C6  60 59             	mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
   386  75C8                    .WaitForEmptyBuf:
   387  75C8  5D 5B                 mov    A, reg[OneWire_XCVR_CONTROL_REG]
   388  75CA  21 20                 and    A, SPIM_SPI_COMPLETE
   389  75CC  AFFB                  jz     .WaitForEmptyBuf
   390  75CE  79                    dec    X
   391  75CF  BFEB                  jnz    .ByteLoop
   392  75D1  18                    pop    A
   393                          
   394                              RAM_EPILOGUE RAM_USE_CLASS_1
   395  75D2  7F                    ret
   396                          .ENDSECTION
   397                          
   398                          .SECTION
   399                          ;-----------------------------------------------------------------------------
   400                          ;  FUNCTION NAME: OneWire_bReadByte
   401                          ;
   402                          ;  DESCRIPTION:
   403                          ;     Read a byte from the OneWireIn pin
   404                          ;-----------------------------------------------------------------------------
   405                          ;
   406                          ;  ARGUMENTS:
   407                          ;     none.
   408                          ;
   409                          ;  RETURNS:
   410                          ;     A returns byte read from OneWireIn pin.
   411                          ;
   412                          ;  SIDE EFFECTS:
   413                          ;    The A and X registers may be modified by this or future implementations
   414                          ;    of this function.  The same is true for all RAM page pointer registers in
   415                          ;    the Large Memory Model.  When necessary, it is the calling function's
   416                          ;    responsibility to perserve their values across calls to fastcall16
   417                          ;    functions.
   418                          ;
   419                          ;-----------------------------------------------------------------------------
   420  75D3                     OneWire_bReadByte:
   421  75D3                    _OneWire_bReadByte:
   422                              RAM_PROLOGUE RAM_USE_CLASS_1
   423                              
   424  75D3  08                    push   A
   425  75D4  57 08                 mov    X,08h
   426  75D6                    .ByteLoop:
   427  75D6  50 FD                 mov    A, ONE_PATTERN
   428  75D8  928C                  call   OneWire_SendTxDataWait
   429  75DA  5D 5A                 mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
   430  75DC  39 FD                 cmp    A, ONE_PATTERN
   431  75DE  18                    pop    A
   432  75DF  6D                    rrc    A
   433  75E0  08                    push   A
   434  75E1  79                    dec    X
   435  75E2  BFF3                  jnz    .ByteLoop
   436  75E4  18                    pop    A
   437  75E5  73                	cpl    A
   438                              RAM_EPILOGUE RAM_USE_CLASS_1
   439                              
   440  75E6  7F                    ret
   441                          .ENDSECTION
   442                          
   443                          .SECTION
   444                          ;-----------------------------------------------------------------------------
   445                          ;  FUNCTION NAME: OneWire_ClearCRC8
   446                          ;
   447                          ;  DESCRIPTION:
   448                          ;     Clear the CRC8 RAM location
   449                          ;-----------------------------------------------------------------------------
   450                          ;
   451                          ;  ARGUMENTS:
   452                          ;     none.
   453                          ;
   454                          ;  RETURNS:
   455                          ;     none.
   456                          ;
   457                          ;  SIDE EFFECTS:
   458                          ;    The A and X registers may be modified by this or future implementations
   459                          ;    of this function.  The same is true for all RAM page pointer registers in
   460                          ;    the Large Memory Model.  When necessary, it is the calling function's
   461                          ;    responsibility to preserve their values across calls to fastcall16
   462                          ;    functions.   Currently only the page pointer registers listed below are modified:
   463                          ;    CUR_PP
   464                          ;
   465                          ;-----------------------------------------------------------------------------
   466  75E7                     OneWire_ClearCRC8:
   467  75E7                    _OneWire_ClearCRC8:
   468                              RAM_PROLOGUE RAM_USE_CLASS_4
   469  75E7  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   470                              
   471  75EA  55 53  00             mov   [OneWire_bCRC8Value], 00h
   472                              
   473                              RAM_EPILOGUE RAM_USE_CLASS_4
   474  75ED  7F                    ret
   475                          .ENDSECTION
   476                          
   477                          .SECTION
   478                          ;-----------------------------------------------------------------------------
   479                          ;  FUNCTION NAME: OneWire_bCRC8
   480                          ;
   481                          ;  DESCRIPTION:
   482                          ;     CRC for One Wire
   483                          ;-----------------------------------------------------------------------------
   484                          ;
   485                          ;  ARGUMENTS:
   486                          ;     A contains the byte to CRC.
   487                          ;
   488                          ;  RETURNS:
   489                          ;     A contains current CRC value.
   490                          ;
   491                          ;  SIDE EFFECTS:
   492                          ;    The A and X registers may be modified by this or future implementations
   493                          ;    of this function.  The same is true for all RAM page pointer registers in
   494                          ;    the Large Memory Model.  When necessary, it is the calling function's
   495                          ;    responsibility to preserve their values across calls to fastcall16
   496                          ;    functions. Currently only the page pointer registers listed below are modified:
   497                          ;     CUR_PP
   498                          ;-----------------------------------------------------------------------------
   499  75EE                     OneWire_bCRC8:
   500  75EE                    _OneWire_bCRC8:
   501                              RAM_PROLOGUE RAM_USE_CLASS_4
   502  75EE  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   503                              
   504  75F1  08                    push  A                                      ; Save the bits to shift
   505  75F2  57 08                 mov   X, 08h                                 ; Set up to shift one byte
   506  75F4                    .OW_crc8_loop:
   507  75F4  32 53                 xor   A, [OneWire_bCRC8Value]                ; Determine feedback
   508  75F6  6D                    rrc   A                                      ; Move it into CF
   509  75F7  D004                  jnc   .OW_crc8_FB_zero                       ; If feedback is 0, no XOR of the byte needed
   510  75F9  36 53  18             xor   [OneWire_bCRC8Value],18h               ; XOR the CRC byte
   511  75FC                    .OW_crc8_FB_zero:
   512  75FC  6E 53                 rrc   [OneWire_bCRC8Value]                   ; Rotate CF into the CRC byte
   513  75FE  18                    pop   A                                      ; Restore the remaining bits
   514  75FF  6D                    rrc   A                                      ; Rotate for the next bit
   515  7600  08                    push  A                                      ; Save the remaining bits
   516  7601  79                    dec   X                                      
   517  7602  BFF1                  jnz   .OW_crc8_loop                          ; Loop until whole input byte is shifted
   518  7604  18                    pop   A                                      ; Clean up stack
   519  7605  51 53                 mov   A, [OneWire_bCRC8Value]                ; Load computed CRC byte into A
   520                              
   521                              RAM_EPILOGUE RAM_USE_CLASS_4
   522  7607  7F                    ret
   523                          .ENDSECTION
   524                          
   525                          IF (OneWire_CRC16_ENABLE)
   526                          .SECTION
   527                          ;-----------------------------------------------------------------------------
   528                          ;  FUNCTION NAME: OneWire_ClearCRC16
   529                          ;
   530                          ;  DESCRIPTION:
   531                          ;     Clear the CRC16 RAM locations
   532                          ;-----------------------------------------------------------------------------
   533                          ;  ARGUMENTS:
   534                          ;     none.
   535                          ;
   536                          ;  RETURNS:
   537                          ;     none.
   538                          ;
   539                          ;  SIDE EFFECTS:
   540                          ;    The A and X registers may be modified by this or future implementations
   541                          ;    of this function.  The same is true for all RAM page pointer registers in
   542                          ;    the Large Memory Model.  When necessary, it is the calling function's
   543                          ;    responsibility to preserve their values across calls to fastcall16
   544                          ;    functions. Currently only the page pointer registers listed below are modified:
   545                          ;     CUR_PP
   546                          ;
   547                          ;-----------------------------------------------------------------------------
   548                           OneWire_ClearCRC16:
   549                          _OneWire_ClearCRC16:
   550                              RAM_PROLOGUE RAM_USE_CLASS_4
   551                              RAM_SETPAGE_CUR >OneWire_wCRC16Value
   552                              
   553                              mov   [OneWire_wCRC16Value+0],00h
   554                              mov   [OneWire_wCRC16Value+1],00h
   555                                  
   556                              RAM_EPILOGUE RAM_USE_CLASS_4
   557                              ret
   558                          .ENDSECTION
   559                          
   560                          .SECTION
   561                          ;-----------------------------------------------------------------------------
   562                          ;  FUNCTION NAME: OneWire_wCRC16
   563                          ;
   564                          ;  DESCRIPTION:
   565                          ;     CRC-16 for One Wire
   566                          ;-----------------------------------------------------------------------------
   567                          ;  ARGUMENTS:
   568                          ;     A contains the byte to CRC.
   569                          ;
   570                          ;  RETURNS:
   571                          ;     A contains current CRC LO byte value.
   572                          ;     X contains current CRC HI byte value.
   573                          ;     This returns as an unsigned integer in C.
   574                          ;
   575                          ;  SIDE EFFECTS:
   576                          ;    The A and X registers may be modified by this or future implementations
   577                          ;    of this function.  The same is true for all RAM page pointer registers in
   578                          ;    the Large Memory Model.  When necessary, it is the calling function's
   579                          ;    responsibility to preserve their values across calls to fastcall16
   580                          ;    functions.  Currently only the page pointer registers listed below are modified:
   581                          ;     CUR_PP
   582                          ;
   583                          ;-----------------------------------------------------------------------------
   584                           OneWire_wCRC16:
   585                          _OneWire_wCRC16:
   586                              RAM_PROLOGUE RAM_USE_CLASS_4
   587                              RAM_SETPAGE_CUR >OneWire_wCRC16Value
   588                              
   589                              push  A                                      ; Save the bits to shift
   590                              mov   X,08h                                  ; Set up to shift one byte
   591                          .CRC16_loop:
   592                              xor   A,[OneWire_wCRC16Value+1]              ; Determine feedback
   593                              rrc   A                                      ; Move it into CF
   594                              jnc   .CRC16_FB_zero                         ; If feedback is 0, no XOR of the byte needed
   595                              xor   [OneWire_wCRC16Value+0],40h            ; XOR the CRC HI byte
   596                              xor   [OneWire_wCRC16Value+1],02h            ; XOR the CRC LO byte
   597                          .CRC16_FB_zero:
   598                              rrc   [OneWire_wCRC16Value+0]                ; Rotate CF into the CRC HI byte
   599                              rrc   [OneWire_wCRC16Value+1]                ; Rotate CF into the CRC LO byte
   600                              pop   A                                      ; Restore the remaining bits
   601                              rrc   A                                      ; Rotate for the next bit
   602                              push  A                                      ; Save the remaining bits
   603                              dec   X
   604                              jnz   .CRC16_loop                            ; Loop until whole input byte is shifted
   605                              pop   A                                      ; Clean up stack
   606                              mov   X,[OneWire_wCRC16Value+0]              ; Load computed CRC HI byte into X
   607                              mov   A,[OneWire_wCRC16Value+1]              ; Load computed CRC LO byte into A
   608                          
   609                              RAM_EPILOGUE RAM_USE_CLASS_4
   610                              ret
   611                          .ENDSECTION
   612                          ENDIF
   613                          
   614                          IF (OneWire_SEARCH_ENABLE)
   615                          .SECTION
   616                          ;-----------------------------------------------------------------------------
   617                          ;  FUNCTION NAME: OneWire_GetROM
   618                          ;
   619                          ;  DESCRIPTION:
   620                          ;     Takes the RAM defined for holding a 64-bit 1-Wire ROM number and
   621                          ;     passes it via a pointer in A and X.
   622                          ;-----------------------------------------------------------------------------
   623                          ;
   624                          ;  ARGUMENTS:
   625                          ;     A:X - contains pointer
   626                          ;       X - contains LSB of the pointer to the RAM buffer
   627                          ;       A - contains MSB or page of the pointer to the RAM buffer
   628                          ;
   629                          ;  RAM BUFFER CONTENTS:
   630                          ;     OneWire_ROM = ROM number of 1-Wire device
   631                          ;
   632                          ;  RETURNS:
   633                          ;     none.
   634                          ;
   635                          ;  SIDE EFFECTS:
   636                          ;    The A and X registers may be modified by this or future implementations
   637                          ;    of this function.  The same is true for all RAM page pointer registers in
   638                          ;    the Large Memory Model.  When necessary, it is the calling function's
   639                          ;    responsibility to perserve their values across calls to fastcall16
   640                          ;    functions.  Currently only the page pointer registers listed below are modified:
   641                          ;     CUR_PP
   642                          ;     IDX_PP
   643                          ;-----------------------------------------------------------------------------
   644  7608                     OneWire_GetROM:
   645  7608                    _OneWire_GetROM:
   646                              RAM_PROLOGUE RAM_USE_CLASS_4
   647                              RAM_PROLOGUE RAM_USE_CLASS_3
   648  7608  60 D3                 RAM_SETPAGE_IDX A
   649  760A  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   650                              
   651  760D  51 54                 mov    A,[OneWire_ROM+0]
   652  760F  54 00                 mov    [X+0],A
   653  7611  51 55                 mov    A,[OneWire_ROM+1]
   654  7613  54 01                 mov    [X+1],A
   655  7615  51 56                 mov    A,[OneWire_ROM+2]
   656  7617  54 02                 mov    [X+2],A
   657  7619  51 57                 mov    A,[OneWire_ROM+3]
   658  761B  54 03                 mov    [X+3],A
   659  761D  51 58                 mov    A,[OneWire_ROM+4]
   660  761F  54 04                 mov    [X+4],A
   661  7621  51 59                 mov    A,[OneWire_ROM+5]
   662  7623  54 05                 mov    [X+5],A
   663  7625  51 5A                 mov    A,[OneWire_ROM+6]
   664  7627  54 06                 mov    [X+6],A
   665  7629  51 5B                 mov    A,[OneWire_ROM+7]
   666  762B  54 07                 mov    [X+7],A
   667                              
   668  762D  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   669                              RAM_EPILOGUE RAM_USE_CLASS_4
   670  7631  7F                    ret
   671                          .ENDSECTION
   672                          
   673                          
   674                          .SECTION
   675                          ;-----------------------------------------------------------------------------
   676                          ;  FUNCTION NAME: OneWire_SetROM
   677                          ;
   678                          ;  DESCRIPTION:
   679                          ;     Takes the array passed via a pointer in A and X and puts it
   680                          ;     into the RAM defined for holding a 64-bit 1-Wire ROM number.
   681                          ;-----------------------------------------------------------------------------
   682                          ;  ARGUMENTS:
   683                          ;     A:X - contains pointer
   684                          ;       X - contains LSB of the pointer to the RAM buffer
   685                          ;       A - contains MSB or page of the pointer to the RAM buffer
   686                          ;
   687                          ;  RAM BUFFER CONTENTS:
   688                          ;     OneWire_ROM = ROM number of 1-Wire device
   689                          ;
   690                          ;  RETURNS:
   691                          ;     none.
   692                          ;
   693                          ;  SIDE EFFECTS:
   694                          ;    The A and X registers may be modified by this or future implementations
   695                          ;    of this function.  The same is true for all RAM page pointer registers in
   696                          ;    the Large Memory Model.  When necessary, it is the calling function's
   697                          ;    responsibility to preserve their values across calls to fastcall16
   698                          ;    functions.  Currently only the page pointer registers listed below are modified:
   699                          ;     CUR_PP
   700                          ;     IDX_PP
   701                          ;-----------------------------------------------------------------------------
   702  7632                     OneWire_SetROM:
   703  7632                    _OneWire_SetROM:
   704                              RAM_PROLOGUE RAM_USE_CLASS_4
   705                              RAM_PROLOGUE RAM_USE_CLASS_3
   706  7632  60 D3                 RAM_SETPAGE_IDX A
   707  7634  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   708                              
   709  7637  52 00                 mov    A,[X+0]
   710  7639  53 54                 mov    [OneWire_ROM+0], A
   711  763B  52 01                 mov    A,[X+1]
   712  763D  53 55                 mov    [OneWire_ROM+1], A
   713  763F  52 02                 mov    A,[X+2]
   714  7641  53 56                 mov    [OneWire_ROM+2], A
   715  7643  52 03                 mov    A,[X+3]
   716  7645  53 57                 mov    [OneWire_ROM+3], A
   717  7647  52 04                 mov    A,[X+4]
   718  7649  53 58                 mov    [OneWire_ROM+4], A
   719  764B  52 05                 mov    A,[X+5]
   720  764D  53 59                 mov    [OneWire_ROM+5], A
   721  764F  52 06                 mov    A,[X+6]
   722  7651  53 5A                 mov    [OneWire_ROM+6], A
   723  7653  52 07                 mov    A,[X+7]
   724  7655  53 5B                 mov    [OneWire_ROM+7], A
   725                              
   726  7657  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   727                              RAM_EPILOGUE RAM_USE_CLASS_4
   728  765B  7F                    ret
   729                          .ENDSECTION
   730                          
   731                          .SECTION
   732                          ;-----------------------------------------------------------------------------
   733                          ;  FUNCTION NAME: OneWire_fFindFirst
   734                          ;
   735                          ;  DESCRIPTION:
   736                          ;     Find the first device on the 1-Wire bus.
   737                          ;-----------------------------------------------------------------------------
   738                          ;  ARGUMENTS:
   739                          ;     none.
   740                          ;
   741                          ;  RAM BUFFER CONTENTS:
   742                          ;     OneWire_ROM = ROM number of 1-Wire device
   743                          ;
   744                          ;  RETURNS:
   745                          ;     A = 01h if device found
   746                          ;     A = 00h if device not found
   747                          ;
   748                          ;  SIDE EFFECTS:
   749                          ;    The A and X registers may be modified by this or future implementations
   750                          ;    of this function.  The same is true for all RAM page pointer registers in
   751                          ;    the Large Memory Model.  When necessary, it is the calling function's
   752                          ;    responsibility to preserve their values across calls to fastcall16
   753                          ;    functions.  Currently only the page pointer registers listed below are modified:
   754                          ;    CUR_PP
   755                          ;    IDX_PP
   756                          ;-----------------------------------------------------------------------------
   757  765C                     OneWire_fFindFirst:
   758  765C                    _OneWire_fFindFirst:
   759                              RAM_PROLOGUE RAM_USE_CLASS_4
   760                              
   761  765C  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   762  765F  55 5C  00             mov   [OneWire_LastDiscrepancy], 00h
   763  7662  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   764  7665  55 5E  00             mov   [OneWire_LastDeviceFlag], 00h
   765  7668  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   766  766B  55 5D  00             mov   [OneWire_LastFamilyDiscrepancy], 00h
   767  766E  9004                  call  OneWire_Search
   768                          
   769                              RAM_EPILOGUE RAM_USE_CLASS_4
   770  7670  7F                    ret
   771                          .ENDSECTION
   772                          
   773                          .SECTION
   774                          ;-----------------------------------------------------------------------------
   775                          ;  FUNCTION NAME: OneWire_fFindNext
   776                          ;
   777                          ;  DESCRIPTION:
   778                          ;     Find the first device on the 1-Wire bus.
   779                          ;-----------------------------------------------------------------------------
   780                          ;
   781                          ;  ARGUMENTS:
   782                          ;     none.
   783                          ;
   784                          ;  RAM BUFFER CONTENTS:
   785                          ;     OneWire_ROM = ROM number of 1-Wire device
   786                          ;
   787                          ;  RETURNS:
   788                          ;     A = 01h if device found
   789                          ;     A = 00h if device not found, end of search
   790                          ;
   791                          ;  SIDE EFFECTS:
   792                          ;    The A and X registers may be modified by this or future implementations
   793                          ;    of this function.  The same is true for all RAM page pointer registers in
   794                          ;    the Large Memory Model.  When necessary, it is the calling function's
   795                          ;    responsibility to preserve their values across calls to fastcall16
   796                          ;    functions.  Currently only the page pointer registers listed below are modified:
   797                          ;    CUR_PP
   798                          ;    IDX_PP
   799                          ;-----------------------------------------------------------------------------
   800  7671                     OneWire_fFindNext:
   801  7671                    _OneWire_fFindNext:
   802                              RAM_PROLOGUE RAM_USE_CLASS_4
   803                              
   804  7671  9001                  call  OneWire_Search
   805                              
   806                              RAM_EPILOGUE RAM_USE_CLASS_4
   807  7673  7F                    ret
   808                          .ENDSECTION
   809                          
   810                          .SECTION
   811                          ;-----------------------------------------------------------------------------
   812                          ;  FUNCTION NAME: OneWire_Search
   813                          ;
   814                          ;  DESCRIPTION:
   815                          ;     Perform the 1-Wire search algorithm with the current search state.
   816                          ;-----------------------------------------------------------------------------
   817                          ;  ARGUMENTS:
   818                          ;     none.
   819                          ;
   820                          ;  RAM BUFFER CONTENTS:
   821                          ;     OneWire_ROM = ROM number of 1-Wire device
   822                          ;
   823                          ;  RETURNS:
   824                          ;     A = 01h if device found
   825                          ;     A = 00h if device not found, end of search
   826                          ;
   827                          ;  SIDE EFFECTS:
   828                          ;    The A and X registers may be modified by this or future implementations
   829                          ;    of this function.  The same is true for all RAM page pointer registers in
   830                          ;    the Large Memory Model.  When necessary, it is the calling function's
   831                          ;    responsibility to perserve their values across calls to fastcall16
   832                          ;    functions. Currently only the page pointer registers listed below are modified:
   833                          ;    CUR_PP
   834                          ;    IDX_PP
   835                          ;-----------------------------------------------------------------------------
   836  0000                    ID_BIT_NUMBER:              equ   0
   837  0001                    LAST_ZERO:                  equ   1
   838  0002                    ROM_BYTE_NUMBER:            equ   2
   839  0003                    SEARCH_RESULT:              equ   3
   840  0004                    ID_BIT:                     equ   4
   841  0005                    CMP_ID_BIT:                 equ   5
   842  0006                    ROM_BYTE_MASK:              equ   6
   843  0007                    SEARCH_DIRECTION:           equ   7
   844                          
   845  7674                     OneWire_Search:
   846  7674                    _OneWire_Search:
   847                              RAM_PROLOGUE RAM_USE_CLASS_4
   848                              RAM_PROLOGUE RAM_USE_CLASS_3
   849                              
   850  7674  4F                    mov   X,SP                                   ; Get location of stack
   851  7675  38 08                 add   SP,08h                                 ; Make locations for local variables
   852  7677  62 D3 07              RAM_SETPAGE_IDX2STK
   853  767A  56 00 01              mov   [X+ID_BIT_NUMBER],01h                  ; Initialize for search
   854  767D  56 01 00              mov   [X+LAST_ZERO],00h
   855  7680  56 02 00              mov   [X+ROM_BYTE_NUMBER],00h
   856  7683  56 06 01              mov   [X+ROM_BYTE_MASK],01h
   857  7686  56 03 00              mov   [X+SEARCH_RESULT],00h
   858  7689  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   859  768C  55 53  00             mov   [OneWire_bCRC8Value],00h
   860  768F  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   861  7692  51 5E                 mov   A,[OneWire_LastDeviceFlag]
   862  7694  B0D4                  jnz   .check_result
   863  7696  9EEA                  call  OneWire_fReset
   864  7698  A0DF                  jz    .search_return_false
   865                          
   866  769A  50 F0                 mov   A,F0h                                  ; Search command
   867  769C  10                    push  X
   868  769D  9F19                  call  OneWire_WriteByte
   869  769F  20                    pop   X
   870  76A0                    .search_loop:
   871  76A0  9F05                  call  OneWire_bReadBit
   872  76A2  54 04                 mov   [X+ID_BIT],A
   873  76A4  9F01                  call  OneWire_bReadBit
   874  76A6  54 05                 mov   [X+CMP_ID_BIT],A
   875  76A8  21 01                 and   A,01h
   876  76AA  23 04                 and   A,[X+ID_BIT]
   877  76AC  B09D                  jnz   .check_search
   878                          
   879  76AE                    .search_else_1:
   880  76AE  52 04                 mov   A,[X+ID_BIT]                           ; If ID_BIT != CMP_ID_BIT
   881  76B0  3B 05                 cmp   A,[X+CMP_ID_BIT]
   882  76B2  A007                  jz    .search_else_2
   883  76B4  52 04                 mov   A,[X+ID_BIT]
   884  76B6  54 07                 mov   [X+SEARCH_DIRECTION],A
   885  76B8  8048                  jmp   .search_set_or_clear
   886  76BA                    .search_else_2:
   887  76BA  52 00                 mov   A,[X+ID_BIT_NUMBER]
   888  76BC  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   889  76BF  3A 5C                 cmp   A,[OneWire_LastDiscrepancy]
   890  76C1  D01B                  jnc   .search_else_3
   891  76C3  10                    push  X
   892  76C4  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   893  76C6  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   894  76C9  52 54                 mov   A,[X+OneWire_ROM]
   895  76CB  62 D3 07              RAM_SETPAGE_IDX2STK
   896  76CE  20                    pop   X
   897  76CF  23 06                 and   A,[X+ROM_BYTE_MASK]
   898  76D1  B006                  jnz   .search_dir_1
   899  76D3  56 07 00              mov   [X+SEARCH_DIRECTION],00h
   900  76D6  8017                  jmp   .search_is_dir_0
   901  76D8                    .search_dir_1:
   902  76D8  56 07 01              mov   [X+SEARCH_DIRECTION],01h
   903  76DB  8012                  jmp   .search_is_dir_0
   904  76DD                    .search_else_3:
   905  76DD  52 00                 mov   A,[X+ID_BIT_NUMBER]
   906  76DF  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   907  76E2  3A 5C                 cmp   A,[OneWire_LastDiscrepancy]            ;SEARCH_DIRECTION = (ID_BIT_NUMBER == LastDiscrepan
                                cy search_direction)
   908  76E4  B006                  jnz   .search_dir_1_2
   909  76E6  56 07 01              mov   [X+SEARCH_DIRECTION],01h
   910  76E9  8004                  jmp   .search_is_dir_0
   911  76EB                    .search_dir_1_2:
   912  76EB  56 07 00              mov   [X+SEARCH_DIRECTION],00h
   913  76EE                    .search_is_dir_0:
   914  76EE  52 07                 mov   A,[X+SEARCH_DIRECTION]
   915  76F0  B010                  jnz   .search_set_or_clear
   916  76F2  52 00                 mov   A,[X+ID_BIT_NUMBER]
   917  76F4  54 01                 mov   [X+LAST_ZERO],A
   918  76F6  39 09                 cmp   A,09h
   919  76F8  D008                  jnc   .search_set_or_clear
   920  76FA  52 01                 mov   A,[X+LAST_ZERO]
   921  76FC  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   922  76FF  53 5D                 mov   [OneWire_LastFamilyDiscrepancy],A
   923  7701                    .search_set_or_clear:
   924  7701  3D 07 01              cmp   [X+SEARCH_DIRECTION],01h
   925  7704  B011                  jnz   .search_else_4
   926  7706  52 06                 mov   A,[X+ROM_BYTE_MASK]
   927  7708  10                    push  X
   928  7709  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   929  770B  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   930  770E  2D 54                 or    [X+OneWire_ROM],A
   931  7710  62 D3 07              RAM_SETPAGE_IDX2STK
   932  7713  20                    pop   X
   933  7714  8010                  jmp   .search_write_direction
   934  7716                    .search_else_4:
   935  7716  52 06                 mov   A,[X+ROM_BYTE_MASK]
   936  7718  10                    push  X
   937  7719  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   938  771B  73                    cpl   A
   939  771C  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   940  771F  25 54                 and   [X+OneWire_ROM],A
   941  7721  62 D3 07              RAM_SETPAGE_IDX2STK
   942  7724  20                    pop   X
   943  7725                    .search_write_direction:
   944  7725  52 07                 mov   A,[X+SEARCH_DIRECTION]
   945  7727  9E72                  call  OneWire_WriteBit
   946  7729  77 00                 inc   [X+ID_BIT_NUMBER]
   947  772B  66 06                 asl   [X+ROM_BYTE_MASK]
   948  772D  3D 06 00              cmp   [X+ROM_BYTE_MASK],00h
   949  7730  B014                  jnz   .check_if_loop
   950  7732  10                    push  X
   951  7733  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   952  7735  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   953  7738  52 54                 mov   A,[X+OneWire_ROM]
   954  773A  62 D3 07              RAM_SETPAGE_IDX2STK
   955  773D  9EAF                  call  OneWire_bCRC8
   956                              RAM_PROLOGUE RAM_USE_CLASS_4
   957  773F  20                    pop   X
   958  7740  77 02                 inc   [X+ROM_BYTE_NUMBER]
   959  7742  56 06 01              mov   [X+ROM_BYTE_MASK],01h
   960  7745                    .check_if_loop:
   961  7745  3D 02 08              cmp   [X+ROM_BYTE_NUMBER],08h
   962  7748  CF57                  jc    .search_loop
   963  774A                    .check_search:
   964  774A  3D 00 41              cmp   [X+ID_BIT_NUMBER],41h
   965  774D  C01B                  jc    .check_result
   966  774F  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   967  7752  3C 53  00             cmp   [OneWire_bCRC8Value],00h
   968  7755  B013                  jnz   .check_result
   969  7757  52 01                 mov   A,[X+LAST_ZERO]
   970  7759  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   971  775C  53 5C                 mov   [OneWire_LastDiscrepancy],A
   972  775E  B007                  jnz   .search_not_last
   973  7760  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   974  7763  55 5E  01             mov   [OneWire_LastDeviceFlag],01h
   975  7766                    .search_not_last:
   976  7766  56 03 01              mov   [X+SEARCH_RESULT],01h
   977                          ; If no device found then reset counter so next search will be like a first
   978  7769                    .check_result:
   979  7769  52 03                 mov   A,[X+SEARCH_RESULT]
   980  776B  A00C                  jz    .search_return_false
   981  776D  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   982  7770  51 54                 mov   A,[OneWire_ROM+0]
   983  7772  A005                  jz    .search_return_false
   984  7774                    .search_return_true:
   985  7774  50 01                 mov   A,01h
   986  7776  8015                  jmp   .search_clean_up
   987  7778                    .search_return_false:
   988  7778  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   989  777B  55 5C  00             mov   [OneWire_LastDiscrepancy],00h
   990  777E  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   991  7781  55 5E  00             mov   [OneWire_LastDeviceFlag],00h
   992  7784  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   993  7787  55 5D  00             mov   [OneWire_LastFamilyDiscrepancy],00h
   994  778A  50 00                 mov   A,00h
   995  778C                    .search_clean_up:
   996  778C  38 F8                 add   SP,-08h                                ; Restore SP
   997                          
   998  778E  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   999                              RAM_EPILOGUE RAM_USE_CLASS_4
  1000  7792  7F                    ret
  1001                          .ENDSECTION
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: OneWire_fVerify
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Verify the device with the ROM number in OneWire_ROM is present.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;  ARGUMENTS:
  1011                          ;     none.
  1012                          ;
  1013                          ;  RAM BUFFER CONTENTS:
  1014                          ;     OneWire_ROM = ROM number of 1-Wire device
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     A = 01h if device found
  1018                          ;     A = 00h if device not found
  1019                          ;
  1020                          ;  SIDE EFFECTS:
  1021                          ;    The A and X registers may be modified by this or future implementations
  1022                          ;    of this function.  The same is true for all RAM page pointer registers in
  1023                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1024                          ;    responsibility to perserve their values across calls to fastcall16
  1025                          ;    functions. Currently only the page pointer registers listed below are modified:
  1026                          ;    CUR_PP, IDX_PP
  1027                          ;-----------------------------------------------------------------------------
  1028  0000                    ROM_BACKUP:                 equ   0
  1029  0008                    LD_BACKUP:                  equ   8
  1030  0009                    LDF_BACKUP:                 equ   9
  1031  000A                    LFD_BACKUP:                 equ   0x0A
  1032                          
  1033  7793                     OneWire_fVerify:
  1034  7793                    _OneWire_fVerify:
  1035                              RAM_PROLOGUE RAM_USE_CLASS_4
  1036                              RAM_PROLOGUE RAM_USE_CLASS_3
  1037                              
  1038  7793  4F                    mov   X, SP                                  ; Get location of stack
  1039  7794  38 0B                 add   SP, 0Bh                                ; Make locations for local variables
  1040                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
  1041  7796  5D D1                 mov   A, reg[STK_PP]                         ; Set A to right page to back up ROM to stack
  1042                          ELSE
  1043                              mov   A, 00h
  1044                          ENDIF
  1045  7798  9E6E                  call  OneWire_GetROM
  1046                              RAM_PROLOGUE RAM_USE_CLASS_4
  1047                              RAM_PROLOGUE RAM_USE_CLASS_3
  1048  779A  62 D3 07              RAM_SETPAGE_IDX2STK
  1049  779D  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1050  77A0  51 5C                 mov   A,[OneWire_LastDiscrepancy]
  1051  77A2  54 08                 mov   [X+LD_BACKUP],A
  1052  77A4  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1053  77A7  51 5E                 mov   A,[OneWire_LastDeviceFlag]
  1054  77A9  54 09                 mov   [X+LDF_BACKUP],A
  1055  77AB  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1056  77AE  51 5D                 mov   A,[OneWire_LastFamilyDiscrepancy]
  1057  77B0  54 0A                 mov   [X+LFD_BACKUP],A
  1058  77B2  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1059  77B5  55 5C  40             mov   [OneWire_LastDiscrepancy],40h
  1060  77B8  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1061  77BB  55 5E  00             mov   [OneWire_LastDeviceFlag],00h
  1062  77BE  10                    push  X                                      ; Search does not preserve X
  1063  77BF  9EB3                  call  OneWire_Search
  1064  77C1  20                    pop   X
  1065  77C2  08                    push  A                                      ; Save result
  1066  77C3  70 BF                 RAM_X_POINTS_TO_INDEXPAGE
  1067  77C5  A03B                  jz    .Verify_End
  1068  77C7  62 D3 07              RAM_SETPAGE_IDX2STK
  1069  77CA  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
  1070  77CD  51 54                 mov   A,[OneWire_ROM+0]
  1071  77CF  3B 00                 cmp   A,[X+ROM_BACKUP]
  1072  77D1  B02B                  jnz   .Verify_Fail
  1073  77D3  51 55                 mov   A,[OneWire_ROM+1]
  1074  77D5  3B 01                 cmp   A,[X+ROM_BACKUP+1]
  1075  77D7  B025                  jnz   .Verify_Fail
  1076  77D9  51 56                 mov   A,[OneWire_ROM+2]
  1077  77DB  3B 02                 cmp   A,[X+ROM_BACKUP+2]
  1078  77DD  B01F                  jnz   .Verify_Fail
  1079  77DF  51 57                 mov   A,[OneWire_ROM+3]
  1080  77E1  3B 03                 cmp   A,[X+ROM_BACKUP+3]
  1081  77E3  B019                  jnz   .Verify_Fail
  1082  77E5  51 58                 mov   A,[OneWire_ROM+4]
  1083  77E7  3B 04                 cmp   A,[X+ROM_BACKUP+4]
  1084  77E9  B013                  jnz   .Verify_Fail
  1085  77EB  51 59                 mov   A,[OneWire_ROM+5]
  1086  77ED  3B 05                 cmp   A,[X+ROM_BACKUP+5]
  1087  77EF  B00D                  jnz   .Verify_Fail
  1088  77F1  51 5A                 mov   A,[OneWire_ROM+6]
  1089  77F3  3B 06                 cmp   A,[X+ROM_BACKUP+6]
  1090  77F5  B007                  jnz   .Verify_Fail
  1091  77F7  51 5B                 mov   A,[OneWire_ROM+7]
  1092  77F9  3B 07                 cmp   A,[X+ROM_BACKUP+7]
  1093  77FB  A005                  jz    .Verify_End
  1094  77FD                    .Verify_Fail:
  1095  77FD  18                    pop   A                                      ; Replace result
  1096  77FE  50 00                 mov   A,00h
  1097  7800  08                    push  A
  1098  7801                    .Verify_End:
  1099                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
  1100  7801  5D D1                 mov   A, reg[STK_PP]                         ; Set A to right page to recover ROM from stack
  1101                          ELSE
  1102                              mov   A, 00h
  1103                          ENDIF
  1104  7803  9E2D                  call  OneWire_SetROM
  1105  7805  70 BF                 RAM_X_POINTS_TO_INDEXPAGE
  1106  7807  62 D3 07              RAM_SETPAGE_IDX2STK
  1107  780A  52 08                 mov   A, [X+LD_BACKUP]
  1108  780C  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1109  780F  53 5C                 mov   [OneWire_LastDiscrepancy], A
  1110  7811  52 09                 mov   A, [X+LDF_BACKUP]
  1111  7813  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1112  7816  53 5E                 mov   [OneWire_LastDeviceFlag], A
  1113  7818  52 0A                 mov   A, [X+LFD_BACKUP]
  1114  781A  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1115  781D  53 5D                 mov   [OneWire_LastFamilyDiscrepancy], A
  1116  781F  18                    pop   A                                      ; Restore result
  1117  7820  38 F5                 add   SP, -0Bh                               ; Restore SP
  1118                          
  1119  7822  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
  1120                              RAM_EPILOGUE RAM_USE_CLASS_4
  1121  7826  7F                    ret
  1122                          .ENDSECTION
  1123                          
  1124                          .SECTION
  1125                          ;-----------------------------------------------------------------------------
  1126                          ;  FUNCTION NAME: OneWire_FamilyTargetSetup
  1127                          ;
  1128                          ;  DESCRIPTION:
  1129                          ;     Setup the search to find the device type family code on the next call
  1130                          ;     to OneWire_Next().
  1131                          ;-----------------------------------------------------------------------------
  1132                          ;  ARGUMENTS:
  1133                          ;     A contains family code.
  1134                          ;
  1135                          ;  RAM BUFFER CONTENTS:
  1136                          ;     OneWire_ROM = ROM number of 1-Wire device
  1137                          ;
  1138                          ;  RETURNS:
  1139                          ;     none.
  1140                          ;
  1141                          ;  SIDE EFFECTS:
  1142                          ;    The A and X registers may be modified by this or future implementations
  1143                          ;    of this function.  The same is true for all RAM page pointer registers in
  1144                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1145                          ;    responsibility to preserve their values across calls to fastcall16
  1146                          ;    functions.  Currently only the page pointer registers listed below are modified:
  1147                          ;    CUR_PP
  1148                          ;    IDX_PP
  1149                          ;-----------------------------------------------------------------------------
  1150  7827                     OneWire_FamilyTargetSetup:
  1151  7827                    _OneWire_FamilyTargetSetup:
  1152                              RAM_PROLOGUE RAM_USE_CLASS_4
  1153                              RAM_PROLOGUE RAM_USE_CLASS_3
  1154  7827  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
  1155  782A  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
  1156                              
  1157  782D  53 54                 mov   [OneWire_ROM+0], A
  1158  782F  10                    push  X
  1159  7830  57 07                 mov   X, 07h
  1160  7832                    .loop:
  1161  7832  56 54  00             mov   [X+OneWire_ROM], 00h
  1162  7835  79                    dec   X
  1163  7836  BFFB                  jnz   .loop
  1164  7838  20                    pop   X
  1165  7839  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1166  783C  55 5C  40             mov   [OneWire_LastDiscrepancy], 40h
  1167  783F  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1168  7842  55 5D  00             mov   [OneWire_LastFamilyDiscrepancy], 00h
  1169  7845  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1170  7848  55 5E  00             mov   [OneWire_LastDeviceFlag], 00h
  1171                              
  1172  784B  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
  1173                              RAM_EPILOGUE RAM_USE_CLASS_4
  1174  784F  7F                    ret
  1175                          .ENDSECTION
  1176                          
  1177                          .SECTION
  1178                          ;-----------------------------------------------------------------------------
  1179                          ;  FUNCTION NAME: OneWire_FamilySkipSetup
  1180                          ;
  1181                          ;  DESCRIPTION:
  1182                          ;     Setup the search to skip the current device type on the next call
  1183                          ;     to OneWire_fFindNext().
  1184                          ;-----------------------------------------------------------------------------
  1185                          ;  ARGUMENTS:
  1186                          ;     None.
  1187                          ;
  1188                          ;  RAM BUFFER CONTENTS:
  1189                          ;     OneWire_ROM = ROM number of 1-Wire device
  1190                          ;
  1191                          ;  RETURNS:
  1192                          ;     none.
  1193                          ;
  1194                          ;  SIDE EFFECTS:
  1195                          ;    The A and X registers may be modified by this or future implementations
  1196                          ;    of this function.  The same is true for all RAM page pointer registers in
  1197                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1198                          ;    responsibility to preserve their values across calls to fastcall16
  1199                          ;    functions.  Currently only the page pointer registers listed below are modified:
  1200                          ;     CUR_PP
  1201                          ;-----------------------------------------------------------------------------
  1202  7850                     OneWire_FamilySkipSetup:
  1203  7850                    _OneWire_FamilySkipSetup:
  1204                              RAM_PROLOGUE RAM_USE_CLASS_4
  1205                              
  1206  7850  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1207  7853  51 5D                 mov   A,[OneWire_LastFamilyDiscrepancy]
  1208  7855  55 5D  00             mov   [OneWire_LastFamilyDiscrepancy],00h
  1209  7858  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1210  785B  53 5C                 mov   [OneWire_LastDiscrepancy],A
  1211  785D  B007                  jnz   .EndOfList
  1212  785F  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1213  7862  55 5E  01             mov   [OneWire_LastDeviceFlag],01h
  1214  7865                    .EndOfList:
  1215                          
  1216                              RAM_EPILOGUE RAM_USE_CLASS_4
  1217  7865  7F                    ret
  1218                          .ENDSECTION
  1219                          ENDIF
  1220                          
  1221                          .SECTION
  1222                          ;-----------------------------------------------------------------------------
  1223                          ;  FUNCTION NAME: OneWire_SendTxDataWait
  1224                          ;
  1225                          ;  DESCRIPTION:
  1226                          ;     Initiates an XCVR data transfer and waits for it to complete.
  1227                          ;
  1228                          ;-----------------------------------------------------------------------------
  1229                          ;  ARGUMENTS:
  1230                          ;     BYTE  bTxData - data to transmit.
  1231                          ;        Passed in Accumulator.
  1232                          ;
  1233                          ;  RETURNS:
  1234                          ;     none.
  1235                          ;
  1236                          ;  SIDE EFFECTS:
  1237                          ;    The A and X registers may be modified by this or future implementations
  1238                          ;    of this function.  The same is true for all RAM page pointer registers in
  1239                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1240                          ;    responsibility to preserve their values across calls to fastcall16
  1241                          ;    functions.
  1242                          ;
  1243                          ;  THEORY of OPERATION:
  1244                          ;     Writes data to the TX buffer register.
  1245                          ;-----------------------------------------------------------------------------
  1246  7866                     OneWire_SendTxDataWait:
  1247  7866                    _OneWire_SendTxDataWait:
  1248                              RAM_PROLOGUE RAM_USE_CLASS_1
  1249                          
  1250  7866  60 59                 mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
  1251  7868                    .WaitForTxComplete:
  1252  7868  5D 5B                 mov    A,  reg[OneWire_XCVR_CONTROL_REG]
  1253  786A  21 20                 and    A, SPIM_SPI_COMPLETE
  1254  786C  AFFB                  jz     .WaitForTxComplete
  1255                          
  1256                              RAM_EPILOGUE RAM_USE_CLASS_1
  1257  786E  7F                    ret


HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Fri Feb 06 16:23:19 2009

   OneWire_XCVR_RX_BUFFER_REG 005A              SPIM_SPI_COMPLETE 0020                    ONE_PATTERN 00FD  
                 RESET_PERIOD 00F9                  RESET_PATTERN 00F1      OneWire_BITCLK_PERIOD_REG 0055  
              _OneWire_GetROM 7608             _OneWire_WriteByte 75B8                _OneWire_SetROM 7632  
              _OneWire_Search 7674                  ID_BIT_NUMBER 0000                _OneWire_fReset 7582  
                     MAC0_CL0 00EE                       MAC0_CL1 00EF                       MAC1_CL0 00AE  
                     MAC1_CL1 00AF                          MAC_X 00EC         OneWire_SendTxDataWait 7866  
                        MAC_Y 00ED                     ROM_BACKUP 0000          CONTROL_REG_START_BIT 0001  
                 ZERO_PATTERN 0001        OneWire_FamilySkipSetup 7850                  SEARCH_RESULT 0003  
                     INT_CLR2 00DC                       INT_MSK1 00E1        _OneWire_SendTxDataWait 7866  
             _OneWire_fVerify 7793                         MAC0_X 00EC                         MAC0_Y 00ED  
                       MAC1_X 00AC                         MAC1_Y 00AD                         HITECH 0002  
                       ID_BIT 0004                FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080  
                       IDX_PP 00D3                         CUR_PP 00D0            OneWire_BIT_INT_REG 00DF  
                       STK_PP 00D1            _OneWire_bCRC8Value 0053                    SPIM_MODE_0 0000  
        OneWire_SEARCH_ENABLE 0001               OneWire_bReadBit 75A7               SEARCH_DIRECTION 0007  
                    LD_BACKUP 0008                      LAST_ZERO 0001        OneWire_PARASITE_ENABLE 0000  
     _OneWire_FamilySkipSetup 7850               OneWire_WriteBit 759B                   OneWire_Stop 757B  
     OneWire_OVERDRIVE_ENABLE 0000              _OneWire_bReadBit 75A7              OneWire_ClearCRC8 75E7  
                ROM_BYTE_MASK 0006      SYSTEM_LARGE_MEMORY_MODEL 0001     OneWire_XCVR_TX_BUFFER_REG 0059  
               _OneWire_bCRC8 75EE         SYSTEM_MULTIPAGE_STACK 0000              _OneWire_WriteBit 759B  
           OneWire_fFindFirst 765C                 _OneWire_Start 756A                        MAC_CL0 00EE  
                      MAC_CL1 00EF               FLAG_PGMODE_MASK 00C0                        PRT0DM1 0001  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008                     BIT_PERIOD 000D             _OneWire_ClearCRC8 75E7  
    OneWire_FamilyTargetSetup 7827                     CMP_ID_BIT 0005                    INIT_PERIOD 000F  
OneWire_LastFamilyDiscrepancy 005D        OneWire_LastDiscrepancy 005C                    OneWire_ROM 0054  
                   LDF_BACKUP 0009                OneWire_fVerify 7793                     LFD_BACKUP 000A  
               SPIM_LSB_FIRST 0080              OneWire_bReadByte 75D3                  _OneWire_Stop 757B  
       OneWire_LastDeviceFlag 005E              OneWire_fFindNext 7671                 OneWire_GetROM 7608  
     OneWire_XCVR_CONTROL_REG 005B                 OneWire_SetROM 7632                 OneWire_Search 7674  
               OneWire_fReset 7582                  OneWire_bCRC8 75EE              SYSTEM_STACK_PAGE 0007  
            OneWire_WriteByte 75B8                  OneWire_Start 756A     SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
         OneWire_CRC16_ENABLE 0000                ROM_BYTE_NUMBER 0002            _OneWire_fFindFirst 765C  
           OneWire_bCRC8Value 0053             _OneWire_bReadByte 75D3     SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           _OneWire_fFindNext 7671     _OneWire_FamilyTargetSetup 7827     OneWire_BITCLK_CONTROL_REG 0057  
