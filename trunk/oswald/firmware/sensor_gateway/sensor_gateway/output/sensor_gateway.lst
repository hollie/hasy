

HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:50 2009


     1                          	processor	CY8C29566
     2                          opt	jumpopt
     3                          opt	noundef
     4                          setz	macro
     5                          	or	f,2
     6  3D41                    	endm
     7                          clrz	macro
     8                          	and	f,not 2
     9  3D41                    	endm
    10                          setc	macro
    11                          	or	f,4
    12  3D41                    	endm
    13                          clrc	macro
    14                          	and	f,not 4
    15  3D41                    	endm
    16                          cplc	macro
    17                          	xor	f,4
    18  3D41                    	endm
    19                          nand	macro nand_arg1,nand_arg2
    20                          	and	nand_arg1,not (nand_arg2)
    21  3D41                    	endm
    22  006C                    TMP_DR0	equ	108
    23  006D                    TMP_DR1	equ	109
    24  006E                    TMP_DR2	equ	110
    25  006F                    TMP_DR3	equ	111
    26  00D0                    CUR_PP	equ	208
    27  00D1                    STK_PP	equ	209
    28  00D3                    IDX_PP	equ	211
    29  00D4                    MVR_PP	equ	212
    30  00D5                    MVW_PP	equ	213
    31  00E8                    MUL0_X	equ	232
    32  00E9                    MUL0_Y	equ	233
    33  00EA                    MUL0_DH	equ	234
    34  00EB                    MUL0_DL	equ	235
    35  00A8                    MUL1_X	equ	168
    36  00A9                    MUL1_Y	equ	169
    37  00AA                    MUL1_DH	equ	170
    38  00AB                    MUL1_DL	equ	171
    39                          ;stack_size is 140 bss 21
    40                          
    41                          ; Stacksize: 140; Bank 0 TOTAL: 140 (0x8C); Other banks TOTAL: 277 (0x115)
    42                          ;stack_size is 140 bss 21
    43                          
    44                          ; Stacksize: 140; Bank 0 TOTAL: -137 (0xFFFFFF77); Other banks TOTAL: 277 (0x115)
    45  0001                    main@UART_bfr	equ	??_main+0
    46                          	global	main@UART_bfr
    47  0009                    strcmp@r	equ	??_strcmp+0
    48                          	global	strcmp@r
    49  0005                    strcmp@s1	equ	?_strcmp+0
    50                          	global	strcmp@s1
    51  0007                    strcmp@s2	equ	?_strcmp+2
    52                          	global	strcmp@s2
    53  0005                    oo_report@data	equ	??_oo_report+0
    54                          	global	oo_report@data
    55  0005                    s_do_measure@temp_val	equ	??_s_do_measure+0
    56                          	global	s_do_measure@temp_val
    57  0009                    s_do_measure@humi_val	equ	??_s_do_measure+4
    58                          	global	s_do_measure@humi_val
    59  000D                    s_do_measure@dew_point	equ	??_s_do_measure+8
    60                          	global	s_do_measure@dew_point
    61  0011                    s_do_measure@error	equ	??_s_do_measure+12
    62                          	global	s_do_measure@error
    63  0012                    s_do_measure@checksum	equ	??_s_do_measure+13
    64                          	global	s_do_measure@checksum
    65  0022                    oo_read_device@data	equ	??_oo_read_device+0
    66                          	global	oo_read_device@data
    67  002F                    oo_read_device@crc	equ	??_oo_read_device+13
    68                          	global	oo_read_device@crc
    69  0015                    oo_wait_for_completion@counter	equ	??_oo_wait_for_completion+0
    70                          	global	oo_wait_for_completion@counter
    71  0022                    oo_print_data@cntr	equ	??_oo_print_data+0
    72                          	global	oo_print_data@cntr
    73  0015                    oo_print_data@data	equ	?_oo_print_data+0
    74                          	global	oo_print_data@data
    75  0019                    calc_sth11@rh_true	equ	??_calc_sth11+0
    76                          	global	calc_sth11@rh_true
    77  001D                    calc_sth11@rh	equ	??_calc_sth11+4
    78                          	global	calc_sth11@rh
    79  0021                    calc_sth11@t_C	equ	??_calc_sth11+8
    80                          	global	calc_sth11@t_C
    81  0025                    calc_sth11@rh_lin	equ	??_calc_sth11+12
    82                          	global	calc_sth11@rh_lin
    83  0029                    calc_sth11@t	equ	??_calc_sth11+16
    84                          	global	calc_sth11@t
    85  002D                    _calc_sth11$3259	equ	??_calc_sth11+20
    86                          	global	_calc_sth11$3259
    87  0031                    _calc_sth11$3252	equ	??_calc_sth11+24
    88                          	global	_calc_sth11$3252
    89  0035                    _calc_sth11$3253	equ	??_calc_sth11+28
    90                          	global	_calc_sth11$3253
    91  0015                    calc_sth11@p_humidity	equ	?_calc_sth11+0
    92                          	global	calc_sth11@p_humidity
    93  0017                    calc_sth11@p_temperature	equ	?_calc_sth11+2
    94                          	global	calc_sth11@p_temperature
    95  001D                    calc_dewpoint@logEx	equ	??_calc_dewpoint+0
    96                          	global	calc_dewpoint@logEx
    97  0021                    calc_dewpoint@dew_point	equ	??_calc_dewpoint+4
    98                          	global	calc_dewpoint@dew_point
    99  0025                    _calc_dewpoint$3274	equ	??_calc_dewpoint+8
   100                          	global	_calc_dewpoint$3274
   101  0029                    _calc_dewpoint$3273	equ	??_calc_dewpoint+12
   102                          	global	_calc_dewpoint$3273
   103  002D                    _calc_dewpoint$3268	equ	??_calc_dewpoint+16
   104                          	global	_calc_dewpoint$3268
   105  0031                    _calc_dewpoint$3267	equ	??_calc_dewpoint+20
   106                          	global	_calc_dewpoint$3267
   107  0015                    calc_dewpoint@h	equ	?_calc_dewpoint+0
   108                          	global	calc_dewpoint@h
   109  0019                    calc_dewpoint@t	equ	?_calc_dewpoint+4
   110                          	global	calc_dewpoint@t
   111  0005                    orcon_delay@i	equ	??_orcon_delay+0
   112                          	global	orcon_delay@i
   113  0019                    ___lwtofl@f1	equ	??___lwtofl+0
   114                          	global	___lwtofl@f1
   115  0015                    ___lwtofl@c	equ	?___lwtofl+0
   116                          	global	___lwtofl@c
   117  0015                    s_connectionreset@i	equ	??_s_connectionreset+0
   118                          	global	s_connectionreset@i
   119  001A                    s_measure@error	equ	??_s_measure+0
   120                          	global	s_measure@error
   121  001C                    s_measure@i	equ	??_s_measure+2
   122                          	global	s_measure@i
   123  0015                    s_measure@p_value	equ	?_s_measure+0
   124                          	global	s_measure@p_value
   125  0017                    s_measure@p_checksum	equ	?_s_measure+2
   126                          	global	s_measure@p_checksum
   127  0019                    s_measure@mode	equ	?_s_measure+4
   128                          	global	s_measure@mode
   129  0023                    printf@fval	equ	??_printf+0
   130                          	global	printf@fval
   131  0027                    printf@_val	equ	??_printf+4
   132                          	global	printf@_val
   133  002B                    printf@integ	equ	??_printf+8
   134                          	global	printf@integ
   135  002F                    printf@prec	equ	??_printf+12
   136                          	global	printf@prec
   137  0031                    printf@exp	equ	??_printf+14
   138                          	global	printf@exp
   139  0033                    printf@width	equ	??_printf+16
   140                          	global	printf@width
   141  0035                    printf@flag	equ	??_printf+18
   142                          	global	printf@flag
   143  0037                    printf@ap	equ	??_printf+20
   144                          	global	printf@ap
   145  0039                    printf@c	equ	??_printf+22
   146                          	global	printf@c
   147  0015                    printf@f	equ	?_printf+0
   148                          	global	printf@f
   149  0033                    oo_read_scratchpad@counter	equ	??_oo_read_scratchpad+0
   150                          	global	oo_read_scratchpad@counter
   151  0041                    putch@c	equ	?_putch+0
   152                          	global	putch@c
   153  0035                    log10@x	equ	?_log10+0
   154                          	global	log10@x
   155  0023                    s_write_byte@i	equ	??_s_write_byte+0
   156                          	global	s_write_byte@i
   157  0024                    s_write_byte@error	equ	??_s_write_byte+1
   158                          	global	s_write_byte@error
   159  0022                    s_write_byte@value	equ	?_s_write_byte+0
   160                          	global	s_write_byte@value
   161  0023                    s_read_byte@i	equ	??_s_read_byte+0
   162                          	global	s_read_byte@i
   163  0024                    s_read_byte@val	equ	??_s_read_byte+1
   164                          	global	s_read_byte@val
   165  0022                    s_read_byte@ack	equ	?_s_read_byte+0
   166                          	global	s_read_byte@ack
   167  003D                    ___fldiv@f3	equ	??___fldiv+0
   168                          	global	___fldiv@f3
   169  0041                    ___fldiv@sign2	equ	??___fldiv+4
   170                          	global	___fldiv@sign2
   171  0042                    ___fldiv@exp1	equ	??___fldiv+5
   172                          	global	___fldiv@exp1
   173  0043                    ___fldiv@sign1	equ	??___fldiv+6
   174                          	global	___fldiv@sign1
   175  0044                    ___fldiv@exp2	equ	??___fldiv+7
   176                          	global	___fldiv@exp2
   177  0035                    ___fldiv@f1	equ	?___fldiv+0
   178                          	global	___fldiv@f1
   179  0039                    ___fldiv@f2	equ	?___fldiv+4
   180                          	global	___fldiv@f2
   181  0049                    ___lldiv@quotient	equ	??___lldiv+0
   182                          	global	___lldiv@quotient
   183  004D                    ___lldiv@counter	equ	??___lldiv+4
   184                          	global	___lldiv@counter
   185  0041                    ___lldiv@dividend	equ	?___lldiv+0
   186                          	global	___lldiv@dividend
   187  0045                    ___lldiv@divisor	equ	?___lldiv+4
   188                          	global	___lldiv@divisor
   189  0041                    ___flsub@f1	equ	?___flsub+0
   190                          	global	___flsub@f1
   191  0045                    ___flsub@f2	equ	?___flsub+4
   192                          	global	___flsub@f2
   193  0045                    ___wmul@product	equ	??___wmul+0
   194                          	global	___wmul@product
   195  0041                    ___wmul@multiplier	equ	?___wmul+0
   196                          	global	___wmul@multiplier
   197  0043                    ___wmul@multiplicand	equ	?___wmul+2
   198                          	global	___wmul@multiplicand
   199  0049                    ___llmod@counter	equ	??___llmod+0
   200                          	global	___llmod@counter
   201  0041                    ___llmod@dividend	equ	?___llmod+0
   202                          	global	___llmod@dividend
   203  0045                    ___llmod@divisor	equ	?___llmod+4
   204                          	global	___llmod@divisor
   205  0045                    ___lltofl@f1	equ	??___lltofl+0
   206                          	global	___lltofl@f1
   207  0049                    ___lltofl@exp	equ	??___lltofl+4
   208                          	global	___lltofl@exp
   209  0041                    ___lltofl@c	equ	?___lltofl+0
   210                          	global	___lltofl@c
   211  0045                    _fround$3292	equ	??_fround+0
   212                          	global	_fround$3292
   213  0047                    _fround$3287	equ	??_fround+2
   214                          	global	_fround$3287
   215  004B                    _fround$3285	equ	??_fround+6
   216                          	global	_fround$3285
   217  004D                    _fround$3284	equ	??_fround+8
   218                          	global	_fround$3284
   219  004F                    _fround$3286	equ	??_fround+10
   220                          	global	_fround$3286
   221  0041                    fround@prec	equ	?_fround+0
   222                          	global	fround@prec
   223  0045                    _scale$3321	equ	??_scale+0
   224                          	global	_scale$3321
   225  0047                    _scale$3317	equ	??_scale+2
   226                          	global	_scale$3317
   227  004B                    _scale$3316	equ	??_scale+6
   228                          	global	_scale$3316
   229  004D                    _scale$3315	equ	??_scale+8
   230                          	global	_scale$3315
   231  004F                    _scale$3314	equ	??_scale+10
   232                          	global	_scale$3314
   233  0051                    _scale$3307	equ	??_scale+12
   234                          	global	_scale$3307
   235  0053                    _scale$3303	equ	??_scale+14
   236                          	global	_scale$3303
   237  0057                    _scale$3302	equ	??_scale+18
   238                          	global	_scale$3302
   239  0059                    _scale$3301	equ	??_scale+20
   240                          	global	_scale$3301
   241  005B                    _scale$3300	equ	??_scale+22
   242                          	global	_scale$3300
   243  0041                    scale@scl	equ	?_scale+0
   244                          	global	scale@scl
   245  0049                    __div_to_l_@quot	equ	??__div_to_l_+0
   246                          	global	__div_to_l_@quot
   247  004D                    __div_to_l_@exp1	equ	??__div_to_l_+4
   248                          	global	__div_to_l_@exp1
   249  004E                    __div_to_l_@cntr	equ	??__div_to_l_+5
   250                          	global	__div_to_l_@cntr
   251  0041                    __div_to_l_@f1	equ	?__div_to_l_+0
   252                          	global	__div_to_l_@f1
   253  0045                    __div_to_l_@f2	equ	?__div_to_l_+4
   254                          	global	__div_to_l_@f2
   255  0045                    ___fltol@lval	equ	??___fltol+0
   256                          	global	___fltol@lval
   257  0049                    ___fltol@exp1	equ	??___fltol+4
   258                          	global	___fltol@exp1
   259  004A                    ___fltol@sign1	equ	??___fltol+5
   260                          	global	___fltol@sign1
   261  0041                    ___fltol@f1	equ	?___fltol+0
   262                          	global	___fltol@f1
   263  0041                    isdigit@c	equ	?_isdigit+0
   264                          	global	isdigit@c
   265  0016                    delay_10ms@counter	equ	??_delay_10ms+0
   266                          	global	delay_10ms@counter
   267  0034                    oo_tx_byte@data	equ	?_oo_tx_byte+0
   268                          	global	oo_tx_byte@data
   269  0034                    oo_rx_byte@data	equ	??_oo_rx_byte+0
   270                          	global	oo_rx_byte@data
   271  0062                    ___awmod@sign	equ	??___awmod+0
   272                          	global	___awmod@sign
   273  0063                    ___awmod@counter	equ	??___awmod+1
   274                          	global	___awmod@counter
   275  005E                    ___awmod@dividend	equ	?___awmod+0
   276                          	global	___awmod@dividend
   277  0060                    ___awmod@divisor	equ	?___awmod+2
   278                          	global	___awmod@divisor
   279  003D                    log@exp	equ	??_log+0
   280                          	global	log@exp
   281  0039                    log@x	equ	?_log+0
   282                          	global	log@x
   283  0062                    ___awdiv@quotient	equ	??___awdiv+0
   284                          	global	___awdiv@quotient
   285  0064                    ___awdiv@sign	equ	??___awdiv+2
   286                          	global	___awdiv@sign
   287  0065                    ___awdiv@counter	equ	??___awdiv+3
   288                          	global	___awdiv@counter
   289  005E                    ___awdiv@dividend	equ	?___awdiv+0
   290                          	global	___awdiv@dividend
   291  0060                    ___awdiv@divisor	equ	?___awdiv+2
   292                          	global	___awdiv@divisor
   293  0044                    ___awtofl@f1	equ	??___awtofl+0
   294                          	global	___awtofl@f1
   295  0040                    ___awtofl@c	equ	?___awtofl+0
   296                          	global	___awtofl@c
   297  0041                    ___flge@ff1	equ	?___flge+0
   298                          	global	___flge@ff1
   299  0045                    ___flge@ff2	equ	?___flge+4
   300                          	global	___flge@ff2
   301  0048                    eval_poly@res	equ	??_eval_poly+0
   302                          	global	eval_poly@res
   303  0040                    eval_poly@x	equ	?_eval_poly+0
   304                          	global	eval_poly@x
   305  0044                    eval_poly@d	equ	?_eval_poly+4
   306                          	global	eval_poly@d
   307  0046                    eval_poly@n	equ	?_eval_poly+6
   308                          	global	eval_poly@n
   309  0035                    oo_crc_shuffle_byte@input	equ	?_oo_crc_shuffle_byte+0
   310                          	global	oo_crc_shuffle_byte@input
   311  0040                    frexp@value	equ	?_frexp+0
   312                          	global	frexp@value
   313  0044                    frexp@eptr	equ	?_frexp+4
   314                          	global	frexp@eptr
   315  0066                    ___flmul@f3	equ	??___flmul+0
   316                          	global	___flmul@f3
   317  006A                    ___flmul@cntr	equ	??___flmul+4
   318                          	global	___flmul@cntr
   319  006B                    ___flmul@exp1	equ	??___flmul+5
   320                          	global	___flmul@exp1
   321  006C                    ___flmul@sign1	equ	??___flmul+6
   322                          	global	___flmul@sign1
   323  005E                    ___flmul@f1	equ	?___flmul+0
   324                          	global	___flmul@f1
   325  0062                    ___flmul@f2	equ	?___flmul+4
   326                          	global	___flmul@f2
   327  0055                    ___fladd@exp1	equ	??___fladd+0
   328                          	global	___fladd@exp1
   329  0056                    ___fladd@exp2	equ	??___fladd+1
   330                          	global	___fladd@exp2
   331  0057                    ___fladd@sign1	equ	??___fladd+2
   332                          	global	___fladd@sign1
   333  0058                    ___fladd@cntr	equ	??___fladd+3
   334                          	global	___fladd@cntr
   335  0059                    ___fladd@sign2	equ	??___fladd+4
   336                          	global	___fladd@sign2
   337  004D                    ___fladd@f1	equ	?___fladd+0
   338                          	global	___fladd@f1
   339  0051                    ___fladd@f2	equ	?___fladd+4
   340                          	global	___fladd@f2
   341  004C                    ___flneg@f1	equ	?___flneg+0
   342                          	global	___flneg@f1
   343  0075                    ___flunpack@sign	equ	??___flunpack+0
   344                          	global	___flunpack@sign
   345  0071                    ___flunpack@arg	equ	?___flunpack+0
   346                          	global	___flunpack@arg
   347  0073                    ___flunpack@exp	equ	?___flunpack+2
   348                          	global	___flunpack@exp
   349  0071                    ___flpack@arg	equ	?___flpack+0
   350                          	global	___flpack@arg
   351  0073                    ___flpack@exp	equ	?___flpack+2
   352                          	global	___flpack@exp
   353                          ;Data sizes: Strings 597, constant 204, data 256, bss 21, persistent 0 stack 133
   354                          	global	_main
   355                          	global	??_main
   356                          	global	?_main
   357                          	psect	maintext,class=CODE,space=0
   358                          
   359                          ; *************** function _main *****************
   360                          ; Defined at:
   361                          ;		line 76 in file "./main.c"
   362                          ; Parameters:
   363                          ;		None
   364                          ; Auto variables:
   365                          ;		UART_bfr    	       	type: PTR unsigned char ; Largest target is 2048
   366                          ;		 -> RAM(255), RAM(2048), 
   367                          ; Return value:
   368                          ;		type: void 
   369                          ;		size: 0
   370                          ; Registers used:
   371                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   372                          ; Tracked objects:
   373                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   374                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   375                          ;		Unchanged: 
   376                          ; Data sizes:
   377                          ;		Autos:    2
   378                          ;		Params:   0
   379                          ;		Temp:     2
   380                          ;		Total:    4
   381                          ; This function calls:
   382                          ;		_hardware_init
   383                          ;		_print_help
   384                          ;		_LTRX_bCmdCheck
   385                          ;		_LTRX_szGetParam
   386                          ;		_print_header
   387                          ;		_printf
   388                          ;		_oo_report
   389                          ;		_s_do_measure
   390                          ;		_strcmp
   391                          ;		_orcon_low
   392                          ;		_orcon_med
   393                          ;		_orcon_high
   394                          ;		_LTRX_CmdReset
   395                          ; This function is called by:
   396                          ;		Startup code after reset
   397                          ; This function uses a non-reentrant model
   398                          ; 
   399                          	file	"./main.c"
   400                          	line	76
   401  0161                    	__size_of_main	equ	__end_of_main-_main
   402                          ;main.c: 75: void main()
   403                          ;main.c: 76: {
   404                          ;			
   405  7A27                    _main:	
   406                          	opt	disable
   407                          	line	80
   408                          ;main.c: 78: char * UART_bfr;
   409                          ;main.c: 80: hardware_init();
   410  7A27  71 80             	or	f, 0x80	;select multiple RAM page mode
   411                          	
   412  7A29  7C 3FF1           	xcall	_hardware_init
   413                          	
   414                          	line	82
   415                          ;main.c: 82: print_help();
   416  7A2C  71 80             	or	f, 0x80	;select multiple RAM page mode
   417                          	
   418  7A2E  7C 3FC5           	xcall	_print_help
   419                          	
   420                          	line	84
   421                          ;main.c: 84: while(1) {
   422                          ;			
   423  7A31                    l9:	
   424                          	line	87
   425                          ;main.c: 87: if (LTRX_bCmdCheck()) {
   426  7A31  71 80             	or	f, 0x80	;select multiple RAM page mode
   427  7A33  70 CF             	and	f, 0xCF   ;select user reg space
   428                          	
   429  7A35  7C 38E3           	xcall	_LTRX_bCmdCheck
   430                          	
   431  7A38  38 00             	add	sp,0
   432  7A3A  39 00             	cmp	a,(0)
   433  7A3C  A145              	jz	l8
   434                          	line	88
   435                          ;main.c: 88: if(UART_bfr = LTRX_szGetParam()) {
   436  7A3E  71 80             	or	f, 0x80	;select multiple RAM page mode
   437  7A40  70 CF             	and	f, 0xCF   ;select user reg space
   438                          	
   439  7A42  7C 38FC           	xcall	_LTRX_szGetParam
   440                          	
   441  7A45  38 00             	add	sp,0
   442  7A47  64                	asl	a
   443  7A48  4B                	swap	a,x
   444  7A49  39 01             	cmp	a,1
   445  7A4B  4B                	swap	a,x
   446  7A4C  6D                	rrc	a
   447  7A4D  31 80             	xor	a,80h
   448  7A4F  08                	push	a
   449  7A50  5B                	mov	a,x
   450  7A51  70 CF             	and	f, 0xCF   ;select user reg space
   451  7A53  62 D0 00          	mov	reg[CUR_PP],0
   452  7A56  53 02             	mov	[1+((main@UART_bfr)^0x0)],a
   453  7A58  18                	pop	a
   454  7A59  53 01             	mov	[0+((main@UART_bfr)^0x0)],a
   455  7A5B  51 01             	mov	a,[0+((main@UART_bfr)^0x0)]
   456  7A5D  39 00             	cmp	a,>(0)
   457  7A5F  B005              	jnz	u2573
   458  7A61  51 02             	mov	a,[1+((main@UART_bfr)^0x0)]
   459  7A63  39 00             	cmp	a,<(0)
   460  7A65                    u2573:
   461  7A65  A113              	jz	l12
   462                          	line	89
   463                          ;main.c: 89: if (*UART_bfr == '?'){
   464  7A67  70 CF             	and	f, 0xCF   ;select user reg space
   465  7A69  62 D0 00          	mov	reg[CUR_PP],0
   466  7A6C  51 01             	mov	a,[0+((main@UART_bfr)^0x0)]
   467  7A6E  58 02             	mov	x,[1+((main@UART_bfr)^0x0)]
   468  7A70  60 D3             	mov	reg[0xd3],a
   469  7A72  52 00             	mov	a,[x+0]
   470  7A74  39 3F             	cmp	a,(03Fh)
   471  7A76  B049              	jnz	l13
   472                          	line	90
   473                          ;main.c: 90: print_header();
   474  7A78  71 80             	or	f, 0x80	;select multiple RAM page mode
   475                          	
   476  7A7A  7C 577E           	xcall	_print_header
   477                          	
   478                          	line	92
   479                          ;main.c: 92: printf("-> OneWire devices\r\n");
   480  7A7D  50 AB             	mov	a,<(STR_6)
   481  7A7F  70 CF             	and	f, 0xCF   ;select user reg space
   482  7A81  62 D0 00          	mov	reg[CUR_PP],0
   483  7A84  53 16             	mov	[1+((?_printf)^0x0)],a
   484  7A86  50 7E             	mov	a,>(STR_6)
   485  7A88  53 15             	mov	[0+((?_printf)^0x0)],a
   486  7A8A  71 80             	or	f, 0x80	;select multiple RAM page mode
   487                          	
   488  7A8C  7C 4B67           	xcall	_printf
   489                          	
   490                          	line	93
   491                          ;main.c: 93: oo_report();
   492  7A8F  71 80             	or	f, 0x80	;select multiple RAM page mode
   493                          	
   494  7A91  7C 3D95           	xcall	_oo_report
   495                          	
   496                          	line	94
   497                          ;main.c: 94: printf("-> SHTxx sensors\r\n");
   498  7A94  50 C0             	mov	a,<(STR_7)
   499  7A96  70 CF             	and	f, 0xCF   ;select user reg space
   500  7A98  62 D0 00          	mov	reg[CUR_PP],0
   501  7A9B  53 16             	mov	[1+((?_printf)^0x0)],a
   502  7A9D  50 7E             	mov	a,>(STR_7)
   503  7A9F  53 15             	mov	[0+((?_printf)^0x0)],a
   504  7AA1  71 80             	or	f, 0x80	;select multiple RAM page mode
   505                          	
   506  7AA3  7C 4B67           	xcall	_printf
   507                          	
   508                          	line	95
   509                          ;main.c: 95: s_do_measure();
   510  7AA6  71 80             	or	f, 0x80	;select multiple RAM page mode
   511                          	
   512  7AA8  7C 3E52           	xcall	_s_do_measure
   513                          	
   514                          	line	96
   515                          ;main.c: 96: printf("-> EOT\r\n");
   516  7AAB  50 F6             	mov	a,<(STR_8)
   517  7AAD  70 CF             	and	f, 0xCF   ;select user reg space
   518  7AAF  62 D0 00          	mov	reg[CUR_PP],0
   519  7AB2  53 16             	mov	[1+((?_printf)^0x0)],a
   520  7AB4  50 7E             	mov	a,>(STR_8)
   521  7AB6  53 15             	mov	[0+((?_printf)^0x0)],a
   522  7AB8  71 80             	or	f, 0x80	;select multiple RAM page mode
   523                          	
   524  7ABA  7C 4B67           	xcall	_printf
   525                          	
   526                          	line	97
   527                          ;main.c: 97: } else if (strcmp(UART_bfr, "venti")==0){
   528  7ABD  7D 7B79           	xjmp	l12
   529                          ;			
   530  7AC0                    l13:	
   531  7AC0  70 CF             	and	f, 0xCF   ;select user reg space
   532  7AC2  62 D0 00          	mov	reg[CUR_PP],0
   533  7AC5  51 01             	mov	a,[0+((main@UART_bfr)^0x0)]
   534  7AC7  08                	push	a
   535  7AC8  51 02             	mov	a,[1+((main@UART_bfr)^0x0)]
   536  7ACA  53 06             	mov	[1+((?_strcmp)^0x0)],a
   537  7ACC  18                	pop	a
   538  7ACD  53 05             	mov	[0+((?_strcmp)^0x0)],a
   539  7ACF  50 45             	mov	a,<(STR_9)
   540  7AD1  53 08             	mov	[1+((0+?_strcmp+02h)^0x0)],a
   541  7AD3  50 7F             	mov	a,>(STR_9)
   542  7AD5  53 07             	mov	[0+((0+?_strcmp+02h)^0x0)],a
   543  7AD7  71 80             	or	f, 0x80	;select multiple RAM page mode
   544                          	
   545  7AD9  7C 3D41           	xcall	_strcmp
   546                          	
   547  7ADC  70 CF             	and	f, 0xCF   ;select user reg space
   548  7ADE  62 D0 00          	mov	reg[CUR_PP],0
   549  7AE1  5A 03             	mov	[(??_main^0x0)+2+0],x
   550  7AE3  2A 03             	or	a,[(??_main^0x0)+2+0]
   551  7AE5  B08E              	jnz	l15
   552                          	line	99
   553                          ;main.c: 99: if (UART_bfr = LTRX_szGetParam()){
   554  7AE7  71 80             	or	f, 0x80	;select multiple RAM page mode
   555  7AE9  70 CF             	and	f, 0xCF   ;select user reg space
   556                          	
   557  7AEB  7C 38FC           	xcall	_LTRX_szGetParam
   558                          	
   559  7AEE  38 00             	add	sp,0
   560  7AF0  64                	asl	a
   561  7AF1  4B                	swap	a,x
   562  7AF2  39 01             	cmp	a,1
   563  7AF4  4B                	swap	a,x
   564  7AF5  6D                	rrc	a
   565  7AF6  31 80             	xor	a,80h
   566  7AF8  08                	push	a
   567  7AF9  5B                	mov	a,x
   568  7AFA  70 CF             	and	f, 0xCF   ;select user reg space
   569  7AFC  62 D0 00          	mov	reg[CUR_PP],0
   570  7AFF  53 02             	mov	[1+((main@UART_bfr)^0x0)],a
   571  7B01  18                	pop	a
   572  7B02  53 01             	mov	[0+((main@UART_bfr)^0x0)],a
   573  7B04  51 01             	mov	a,[0+((main@UART_bfr)^0x0)]
   574  7B06  39 00             	cmp	a,>(0)
   575  7B08  B005              	jnz	u2583
   576  7B0A  51 02             	mov	a,[1+((main@UART_bfr)^0x0)]
   577  7B0C  39 00             	cmp	a,<(0)
   578  7B0E                    u2583:
   579  7B0E  A050              	jz	l16
   580                          	line	100
   581                          ;main.c: 100: switch (*UART_bfr){
   582  7B10  7D 7B40           	xjmp	l18
   583                          	line	101
   584                          ;main.c: 101: case 'l':
   585                          ;			
   586  7B13                    l19:	
   587                          	line	102
   588                          ;main.c: 102: orcon_low();
   589  7B13  71 80             	or	f, 0x80	;select multiple RAM page mode
   590                          	
   591  7B15  7C 40C2           	xcall	_orcon_low
   592                          	
   593                          	line	103
   594                          ;main.c: 103: break;
   595  7B18  7D 7B5C           	xjmp	l17
   596                          	line	104
   597                          ;main.c: 104: case 'n':
   598                          ;			
   599  7B1B                    l20:	
   600                          	line	105
   601                          ;main.c: 105: orcon_med();
   602  7B1B  71 80             	or	f, 0x80	;select multiple RAM page mode
   603                          	
   604  7B1D  7C 4086           	xcall	_orcon_med
   605                          	
   606                          	line	106
   607                          ;main.c: 106: break;
   608  7B20  7D 7B5C           	xjmp	l17
   609                          	line	107
   610                          ;main.c: 107: case 'h':
   611                          ;			
   612  7B23                    l21:	
   613                          	line	108
   614                          ;main.c: 108: orcon_high();
   615  7B23  71 80             	or	f, 0x80	;select multiple RAM page mode
   616                          	
   617  7B25  7C 404A           	xcall	_orcon_high
   618                          	
   619                          	line	109
   620                          ;main.c: 109: break;
   621  7B28  7D 7B5C           	xjmp	l17
   622                          	line	110
   623                          ;main.c: 110: default:
   624                          ;			
   625  7B2B                    l22:	
   626                          	line	111
   627                          ;main.c: 111: printf(" ! Unknown parameter\r\n");
   628  7B2B  50 7D             	mov	a,<(STR_10)
   629  7B2D  70 CF             	and	f, 0xCF   ;select user reg space
   630  7B2F  62 D0 00          	mov	reg[CUR_PP],0
   631  7B32  53 16             	mov	[1+((?_printf)^0x0)],a
   632  7B34  50 7E             	mov	a,>(STR_10)
   633  7B36  53 15             	mov	[0+((?_printf)^0x0)],a
   634  7B38  71 80             	or	f, 0x80	;select multiple RAM page mode
   635                          	
   636  7B3A  7C 4B67           	xcall	_printf
   637                          	
   638                          	line	112
   639                          ;main.c: 112: }
   640  7B3D  7D 7B5C           	xjmp	l17
   641                          	line	100
   642                          ;			
   643  7B40                    l18:	
   644  7B40  70 CF             	and	f, 0xCF   ;select user reg space
   645  7B42  62 D0 00          	mov	reg[CUR_PP],0
   646  7B45  51 01             	mov	a,[0+((main@UART_bfr)^0x0)]
   647  7B47  58 02             	mov	x,[1+((main@UART_bfr)^0x0)]
   648  7B49  60 D3             	mov	reg[0xd3],a
   649  7B4B  52 00             	mov	a,[x+0]
   650  7B4D  11 68             		sub	a,104
   651  7B4F  AFD3              	jz	l21
   652  7B51  11 04             	sub	a,4
   653  7B53  AFBF              	jz	l19
   654  7B55  11 02             	sub	a,2
   655  7B57  AFC3              	jz	l20
   656  7B59  7D 7B2B           	xjmp	l22
   657                          
   658                          	line	112
   659                          ;			
   660  7B5C                    l17:	
   661                          	line	113
   662                          ;main.c: 113: } else {
   663  7B5C  7D 7B71           	xjmp	l23
   664                          ;			
   665  7B5F                    l16:	
   666                          	line	114
   667                          ;main.c: 114: printf("Enter 'venti' followed by 'low', 'normal' or 'high'\r\n");
   668  7B5F  50 A3             	mov	a,<(STR_11)
   669  7B61  70 CF             	and	f, 0xCF   ;select user reg space
   670  7B63  62 D0 00          	mov	reg[CUR_PP],0
   671  7B66  53 16             	mov	[1+((?_printf)^0x0)],a
   672  7B68  50 7D             	mov	a,>(STR_11)
   673  7B6A  53 15             	mov	[0+((?_printf)^0x0)],a
   674  7B6C  71 80             	or	f, 0x80	;select multiple RAM page mode
   675                          	
   676  7B6E  7C 4B67           	xcall	_printf
   677                          	
   678                          	line	115
   679                          ;			
   680  7B71                    l23:	
   681                          	line	116
   682                          ;main.c: 115: }
   683                          ;main.c: 116: } else {
   684  7B71  7D 7B79           	xjmp	l12
   685                          ;			
   686  7B74                    l15:	
   687                          	line	117
   688                          ;main.c: 117: print_help();
   689  7B74  71 80             	or	f, 0x80	;select multiple RAM page mode
   690                          	
   691  7B76  7C 3FC5           	xcall	_print_help
   692                          	
   693                          	line	118
   694                          ;			
   695  7B79                    l24:	
   696                          ;			
   697  7B79                    l14:	
   698                          	line	120
   699                          ;			
   700  7B79                    l12:	
   701                          	line	121
   702                          ;main.c: 118: }
   703                          ;main.c: 120: }
   704                          ;main.c: 121: LTRX_CmdReset();
   705  7B79  71 80             	or	f, 0x80	;select multiple RAM page mode
   706  7B7B  70 CF             	and	f, 0xCF   ;select user reg space
   707                          	
   708  7B7D  7C 38CD           	xcall	_LTRX_CmdReset
   709                          	
   710  7B80  38 00             	add	sp,0
   711                          	line	122
   712                          ;			
   713  7B82                    l11:	
   714                          	line	123
   715                          ;			
   716  7B82                    l8:	
   717                          	line	84
   718  7B82  7D 7A31           	xjmp	l9
   719  7B85                    ___exit:	;where's that confounded watchdog?
   720  7B85  7D 7B85           	jmp	___exit
   721                          GLOBAL __end_of_main
   722  7B88                    	__end_of_main:
   723                          	FNSIZE	_main,4,0
   724                          ; =============== function _main ends ============
   725                          
   726                          	psect	maintext
   727                          	line	126
   728                          	signat	_main,88
   729                          	global	_LTRX_szGetParam
   730                          	global	_strcmp
   731                          	global	??_strcmp
   732                          	global	?_strcmp
   733                          	psect	text,class=CODE,space=0
   734                          
   735  3D41                    ___start_of_c_program_code:
   736                          
   737                          ; *************** function _strcmp *****************
   738                          ; Defined at:
   739                          ;		line 5 in file "../common/strcmp.c"
   740                          ; Parameters:
   741                          ;		s1          	offs:   0	type: PTR const unsigned char ; Largest target is 2048
   742                          ;		 -> RAM(255), RAM(2048), 
   743                          ;		s2          	offs:   2	type: PTR const unsigned char ; Largest target is 6
   744                          ;		 -> STR_9(6), 
   745                          ; Auto variables:
   746                          ;		r           	       	type: char 
   747                          ; Return value:
   748                          ;		type: int 
   749                          ;		size: 2
   750                          ; Registers used:
   751                          ;		a, x, CUR_PP
   752                          ; Tracked objects:
   753                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   754                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   755                          ;		Unchanged: 
   756                          ; Data sizes:
   757                          ;		Autos:    1
   758                          ;		Params:   4
   759                          ;		Temp:     1
   760                          ;		Total:    6
   761                          ; This function calls:
   762                          ;		Nothing
   763                          ; This function is called by:
   764                          ;		_main
   765                          ; This function uses a non-reentrant model
   766                          ; 
   767                          	file	"../common/strcmp.c"
   768                          	line	5
   769  0054                    	__size_of_strcmp	equ	__end_of_strcmp-_strcmp
   770                          ;strcmp.c: 3: int
   771                          ;strcmp.c: 4: strcmp(register const char * s1, register const char * s2)
   772                          ;strcmp.c: 5: {
   773                          ;			
   774  3D41                    _strcmp:	
   775                          	opt	disable
   776                          	line	8
   777                          ;strcmp.c: 6: register signed char r;
   778                          ;strcmp.c: 8: while(!(r = (unsigned char)*s1 - (unsigned char)*s2++) && *s1++)
   779  3D41  7D 3D47           	xjmp	l227
   780                          ;			
   781  3D44                    l228:	
   782                          	line	9
   783                          ;strcmp.c: 9: continue;
   784  3D44  7D 3D47           	xjmp	l227
   785                          ;			
   786  3D47                    l227:	
   787                          	line	8
   788  3D47  70 CF             	and	f, 0xCF   ;select user reg space
   789  3D49  62 D0 00          	mov	reg[CUR_PP],0
   790  3D4C  51 07             	mov	a,[0+((strcmp@s2)^0x0)]
   791  3D4E  58 08             	mov	x,[1+((strcmp@s2)^0x0)]
   792  3D50  06 08  01         	add	[1+((strcmp@s2)^0x0)],<(01h)
   793  3D53  0E 07  00         	adc	[0+((strcmp@s2)^0x0)],>(01h)
   794  3D56  28                	romx
   795  3D57  53 0A             	mov	[(??_strcmp^0x0)+1+0],a
   796  3D59  51 05             	mov	a,[0+((strcmp@s1)^0x0)]
   797  3D5B  58 06             	mov	x,[1+((strcmp@s1)^0x0)]
   798  3D5D  60 D3             	mov	reg[0xd3],a
   799  3D5F  52 00             	mov	a,[x+0]
   800  3D61  12 0A             	sub	a,[(??_strcmp^0x0)+1+0]
   801  3D63  53 09             	mov	[0+((strcmp@r)^0x0)],a
   802  3D65  39 00             	cmp	a,(0)
   803  3D67  B018              	jnz	l229
   804  3D69  70 CF             	and	f, 0xCF   ;select user reg space
   805  3D6B  62 D0 00          	mov	reg[CUR_PP],0
   806  3D6E  51 05             	mov	a,[0+((strcmp@s1)^0x0)]
   807  3D70  58 06             	mov	x,[1+((strcmp@s1)^0x0)]
   808  3D72  06 06  01         	add	[1+((strcmp@s1)^0x0)],<(01h)
   809  3D75  0E 05  00         	adc	[0+((strcmp@s1)^0x0)],>(01h)
   810  3D78  60 D3             	mov	reg[0xd3],a
   811  3D7A  52 00             	mov	a,[x+0]
   812  3D7C  39 00             	cmp	a,(0)
   813  3D7E  BFC5              	jnz	l228
   814                          ;			
   815  3D80                    l600002275:	
   816                          ;			
   817  3D80                    l229:	
   818                          	line	10
   819                          ;strcmp.c: 10: return r;
   820  3D80  70 CF             	and	f, 0xCF   ;select user reg space
   821  3D82  62 D0 00          	mov	reg[CUR_PP],0
   822  3D85  51 09             	mov	a,[0+((strcmp@r)^0x0)]
   823  3D87  08                	push	a
   824  3D88  6A                	rlc	a
   825  3D89  50 00             	mov	a,0
   826  3D8B  19 00             	sbb	a,0
   827  3D8D  5C                	mov	x,a
   828  3D8E  18                	pop	a
   829  3D8F  7D 3D92           	xjmp	l226
   830                          	line	11
   831                          ;strcmp.c: 11: }
   832  3D92                    l226:
   833                          ;			
   834  3D92  70 CF             	and	f, 0xCF   ;select user reg space
   835                          	
   836  3D94  7F                	ret
   837                          GLOBAL __end_of_strcmp
   838  3D95                    	__end_of_strcmp:
   839                          	FNSIZE	_strcmp,2,4
   840                          ; =============== function _strcmp ends ============
   841                          
   842                          	signat	_strcmp,8314
   843                          	global	_oo_report
   844                          	global	??_oo_report
   845                          	global	?_oo_report
   846                          	psect	text
   847                          
   848                          ; *************** function _oo_report *****************
   849                          ; Defined at:
   850                          ;		line 302 in file "./oo.c"
   851                          ; Parameters:
   852                          ;		None
   853                          ; Auto variables:
   854                          ;		data        	       	type: struct s_oo_data
   855                          ;		id          	       	type: unsigned char [8]
   856                          ; Return value:
   857                          ;		type: void 
   858                          ;		size: 0
   859                          ; Registers used:
   860                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   861                          ; Tracked objects:
   862                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   863                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   864                          ;		Unchanged: 
   865                          ; Data sizes:
   866                          ;		Autos:   13
   867                          ;		Params:   0
   868                          ;		Temp:     3
   869                          ;		Total:   16
   870                          ; This function calls:
   871                          ;		_OneWire_fReset
   872                          ;		_LTRX_CPutString
   873                          ;		_LTRX_PutCRLF
   874                          ;		_oo_start_conversion
   875                          ;		_oo_wait_for_completion
   876                          ;		_OneWire_fFindFirst
   877                          ;		_oo_read_device
   878                          ;		_oo_print_data
   879                          ;		_OneWire_fFindNext
   880                          ; This function is called by:
   881                          ;		_main
   882                          ; This function uses a non-reentrant model
   883                          ; 
   884                          	file	"./oo.c"
   885                          	line	302
   886  00BD                    	__size_of_oo_report	equ	__end_of_oo_report-_oo_report
   887                          ;oo.c: 302: void oo_report(){
   888                          ;			
   889  3D95                    _oo_report:	
   890                          	opt	disable
   891                          	line	309
   892                          ;oo.c: 304: oo_tdata data;
   893                          ;oo.c: 306: unsigned char id[8];
   894                          ;oo.c: 309: if (!OneWire_fReset()){
   895  3D95  71 80             	or	f, 0x80	;select multiple RAM page mode
   896  3D97  70 CF             	and	f, 0xCF   ;select user reg space
   897                          	
   898  3D99  7C 39F1           	xcall	_OneWire_fReset
   899                          	
   900  3D9C  38 00             	add	sp,0
   901  3D9E  39 00             	cmp	a,(0)
   902  3DA0  B01A              	jnz	l60
   903                          	line	310
   904                          ;oo.c: 310: LTRX_CPutString("No OneWire devices found on the bus!");
   905  3DA2  57 D9             	mov	x,<(STR_15)
   906  3DA4  50 7D             	mov	a,>(STR_15)
   907  3DA6  71 80             	or	f, 0x80	;select multiple RAM page mode
   908  3DA8  70 CF             	and	f, 0xCF   ;select user reg space
   909                          	
   910  3DAA  7C 38B2           	xcall	_LTRX_CPutString
   911                          	
   912  3DAD  38 00             	add	sp,0
   913                          	line	311
   914                          ;oo.c: 311: LTRX_PutCRLF();
   915  3DAF  71 80             	or	f, 0x80	;select multiple RAM page mode
   916  3DB1  70 CF             	and	f, 0xCF   ;select user reg space
   917                          	
   918  3DB3  7C 38C4           	xcall	_LTRX_PutCRLF
   919                          	
   920  3DB6  38 00             	add	sp,0
   921                          	line	312
   922                          ;oo.c: 312: return;
   923  3DB8  7D 3E4F           	xjmp	l59
   924                          	line	313
   925                          ;			
   926  3DBB                    l60:	
   927                          	line	316
   928                          ;oo.c: 313: }
   929                          ;oo.c: 316: oo_start_conversion();
   930  3DBB  71 80             	or	f, 0x80	;select multiple RAM page mode
   931                          	
   932  3DBD  7C 41D8           	xcall	_oo_start_conversion
   933                          	
   934                          	line	319
   935                          ;oo.c: 319: if (!oo_wait_for_completion()){
   936  3DC0  71 80             	or	f, 0x80	;select multiple RAM page mode
   937                          	
   938  3DC2  7C 41FA           	xcall	_oo_wait_for_completion
   939                          	
   940  3DC5  39 00             	cmp	a,(0)
   941  3DC7  B01A              	jnz	l61
   942                          	line	321
   943                          ;oo.c: 321: LTRX_CPutString("Timed out while waiting for conversion!");
   944  3DC9  57 55             	mov	x,<(STR_16)
   945  3DCB  50 7E             	mov	a,>(STR_16)
   946  3DCD  71 80             	or	f, 0x80	;select multiple RAM page mode
   947  3DCF  70 CF             	and	f, 0xCF   ;select user reg space
   948                          	
   949  3DD1  7C 38B2           	xcall	_LTRX_CPutString
   950                          	
   951  3DD4  38 00             	add	sp,0
   952                          	line	322
   953                          ;oo.c: 322: LTRX_PutCRLF();
   954  3DD6  71 80             	or	f, 0x80	;select multiple RAM page mode
   955  3DD8  70 CF             	and	f, 0xCF   ;select user reg space
   956                          	
   957  3DDA  7C 38C4           	xcall	_LTRX_PutCRLF
   958                          	
   959  3DDD  38 00             	add	sp,0
   960                          	line	323
   961                          ;oo.c: 323: return;
   962  3DDF  7D 3E4F           	xjmp	l59
   963                          	line	324
   964                          ;			
   965  3DE2                    l61:	
   966                          	line	327
   967                          ;oo.c: 324: }
   968                          ;oo.c: 327: if (OneWire_fFindFirst()){
   969  3DE2  71 80             	or	f, 0x80	;select multiple RAM page mode
   970  3DE4  70 CF             	and	f, 0xCF   ;select user reg space
   971                          	
   972  3DE6  7C 3ACB           	xcall	_OneWire_fFindFirst
   973                          	
   974  3DE9  38 00             	add	sp,0
   975  3DEB  39 00             	cmp	a,(0)
   976  3DED  A004              	jz	l62
   977                          	line	329
   978                          ;oo.c: 329: } else {
   979  3DEF  7D 3E0B           	xjmp	l66
   980                          ;			
   981  3DF2                    l62:	
   982                          	line	330
   983                          ;oo.c: 330: LTRX_CPutString("Problem detecting first device on the bus");
   984  3DF2  57 2B             	mov	x,<(STR_17)
   985  3DF4  50 7E             	mov	a,>(STR_17)
   986  3DF6  71 80             	or	f, 0x80	;select multiple RAM page mode
   987  3DF8  70 CF             	and	f, 0xCF   ;select user reg space
   988                          	
   989  3DFA  7C 38B2           	xcall	_LTRX_CPutString
   990                          	
   991  3DFD  38 00             	add	sp,0
   992                          	line	331
   993                          ;oo.c: 331: LTRX_PutCRLF();
   994  3DFF  71 80             	or	f, 0x80	;select multiple RAM page mode
   995  3E01  70 CF             	and	f, 0xCF   ;select user reg space
   996                          	
   997  3E03  7C 38C4           	xcall	_LTRX_PutCRLF
   998                          	
   999  3E06  38 00             	add	sp,0
  1000                          	line	332
  1001                          ;oo.c: 332: return;
  1002  3E08  7D 3E4F           	xjmp	l59
  1003                          	line	335
  1004                          ;oo.c: 333: }
  1005                          ;oo.c: 335: do {
  1006                          ;			
  1007  3E0B                    l66:	
  1008                          	line	337
  1009                          ;oo.c: 337: data = oo_read_device();
  1010  3E0B  71 80             	or	f, 0x80	;select multiple RAM page mode
  1011                          	
  1012  3E0D  7C 40FE           	xcall	_oo_read_device
  1013                          	
  1014  3E10  70 CF             	and	f, 0xCF   ;select user reg space
  1015  3E12  62 D0 00          	mov	reg[CUR_PP],0
  1016  3E15  55 12  15         	mov	[(??_oo_report^0x0)+13+0],<(0+?_oo_read_device)
  1017  3E18  62 D4 00          	mov	reg[MVR_PP],0
  1018                          	
  1019  3E1B  55 13  05         	mov	[(??_oo_report^0x0)+14+0],<(oo_report@data)
  1020  3E1E  62 D5 00          	mov	reg[MVW_PP],0
  1021                          	
  1022  3E21  55 14  0D         	mov	[(??_oo_report^0x0)+15+0],13
  1023  3E24                    u2553:
  1024  3E24  3E 12             	mvi	a,[[(??_oo_report^0x0)+13+0]++]
  1025  3E26  3F 13             	mvi	[[(??_oo_report^0x0)+14+0]++],a
  1026  3E28  7A 14             	dec	[(??_oo_report^0x0)+15+0]
  1027  3E2A  BFF9              	jnz	u2553
  1028                          	line	338
  1029                          ;oo.c: 338: oo_print_data(data);
  1030  3E2C  55 12  05         	mov	[(??_oo_report^0x0)+13+0],<(oo_report@data)
  1031                          	
  1032  3E2F  55 13  15         	mov	[(??_oo_report^0x0)+14+0],<(?_oo_print_data)
  1033                          	
  1034  3E32  55 14  0D         	mov	[(??_oo_report^0x0)+15+0],13
  1035  3E35                    u2563:
  1036  3E35  3E 12             	mvi	a,[[(??_oo_report^0x0)+13+0]++]
  1037  3E37  3F 13             	mvi	[[(??_oo_report^0x0)+14+0]++],a
  1038  3E39  7A 14             	dec	[(??_oo_report^0x0)+15+0]
  1039  3E3B  BFF9              	jnz	u2563
  1040  3E3D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1041                          	
  1042  3E3F  7C 4232           	xcall	_oo_print_data
  1043                          	
  1044                          	line	339
  1045                          ;oo.c: 339: } while (OneWire_fFindNext());
  1046  3E42  71 80             	or	f, 0x80	;select multiple RAM page mode
  1047  3E44  70 CF             	and	f, 0xCF   ;select user reg space
  1048                          	
  1049  3E46  7C 3AE0           	xcall	_OneWire_fFindNext
  1050                          	
  1051  3E49  38 00             	add	sp,0
  1052  3E4B  39 00             	cmp	a,(0)
  1053  3E4D  BFBD              	jnz	l66
  1054                          ;			
  1055  3E4F                    l65:	
  1056                          	line	342
  1057                          ;oo.c: 342: }
  1058  3E4F                    l59:
  1059                          ;			
  1060  3E4F  70 CF             	and	f, 0xCF   ;select user reg space
  1061                          	
  1062  3E51  7F                	ret
  1063                          GLOBAL __end_of_oo_report
  1064  3E52                    	__end_of_oo_report:
  1065                          	FNSIZE	_oo_report,16,0
  1066                          ; =============== function _oo_report ends ============
  1067                          
  1068                          	signat	_oo_report,88
  1069                          	global	_s_do_measure
  1070                          	global	??_s_do_measure
  1071                          	global	?_s_do_measure
  1072                          	psect	text
  1073                          
  1074                          ; *************** function _s_do_measure *****************
  1075                          ; Defined at:
  1076                          ;		line 260 in file "./shtxx.c"
  1077                          ; Parameters:
  1078                          ;		None
  1079                          ; Auto variables:
  1080                          ;		humi_val    	       	type: struct .
  1081                          ;		temp_val    	       	type: struct .
  1082                          ;		dew_point   	       	type: float 
  1083                          ;		i           	       	type: unsigned int 
  1084                          ;		error       	       	type: unsigned char 
  1085                          ;		checksum    	       	type: unsigned char 
  1086                          ; Return value:
  1087                          ;		type: void 
  1088                          ;		size: 0
  1089                          ; Registers used:
  1090                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1091                          ; Tracked objects:
  1092                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1093                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1094                          ;		Unchanged: 
  1095                          ; Data sizes:
  1096                          ;		Autos:   14
  1097                          ;		Params:   0
  1098                          ;		Temp:     2
  1099                          ;		Total:   16
  1100                          ; This function calls:
  1101                          ;		_s_connectionreset
  1102                          ;		_s_measure
  1103                          ;		_LTRX_CPutString
  1104                          ;		_LTRX_PutSHexByte
  1105                          ;		___lwtofl
  1106                          ;		_calc_sth11
  1107                          ;		_calc_dewpoint
  1108                          ;		_printf
  1109                          ; This function is called by:
  1110                          ;		_main
  1111                          ; This function uses a non-reentrant model
  1112                          ; 
  1113                          	file	"./shtxx.c"
  1114                          	line	260
  1115  0173                    	__size_of_s_do_measure	equ	__end_of_s_do_measure-_s_do_measure
  1116                          ;shtxx.c: 260: void s_do_measure(){
  1117                          ;			
  1118  3E52                    _s_do_measure:	
  1119                          	opt	disable
  1120                          	line	277
  1121                          ;shtxx.c: 271: value humi_val,temp_val;
  1122                          ;shtxx.c: 272: float dew_point;
  1123                          ;shtxx.c: 273: unsigned char error,checksum;
  1124                          ;shtxx.c: 274: unsigned int i;
  1125                          ;shtxx.c: 277: s_connectionreset();
  1126  3E52  71 80             	or	f, 0x80	;select multiple RAM page mode
  1127                          	
  1128  3E54  7C 49C2           	xcall	_s_connectionreset
  1129                          	
  1130                          	line	281
  1131                          ;shtxx.c: 281: error=0;
  1132  3E57  50 00             	mov	a,<((0))
  1133  3E59  70 CF             	and	f, 0xCF   ;select user reg space
  1134  3E5B  62 D0 00          	mov	reg[CUR_PP],0
  1135  3E5E  53 11             	mov	[0+((s_do_measure@error)^0x0)],a
  1136                          	line	282
  1137                          ;shtxx.c: 282: error+=s_measure((unsigned char*) &humi_val.i,&checksum,HUMI);
  1138  3E60  50 09             	mov	a,<((s_do_measure@humi_val|8000h))
  1139  3E62  70 CF             	and	f, 0xCF   ;select user reg space
  1140  3E64  62 D0 00          	mov	reg[CUR_PP],0
  1141  3E67  53 16             	mov	[1+((?_s_measure)^0x0)],a
  1142  3E69  50 80             	mov	a,>((s_do_measure@humi_val|8000h))
  1143  3E6B  53 15             	mov	[0+((?_s_measure)^0x0)],a
  1144  3E6D  50 12             	mov	a,<((s_do_measure@checksum|8000h))
  1145  3E6F  53 18             	mov	[1+((0+?_s_measure+02h)^0x0)],a
  1146  3E71  50 80             	mov	a,>((s_do_measure@checksum|8000h))
  1147  3E73  53 17             	mov	[0+((0+?_s_measure+02h)^0x0)],a
  1148  3E75  50 01             	mov	a,<((01h))
  1149  3E77  53 19             	mov	[0+((0+?_s_measure+04h)^0x0)],a
  1150  3E79  71 80             	or	f, 0x80	;select multiple RAM page mode
  1151                          	
  1152  3E7B  7C 4A2B           	xcall	_s_measure
  1153                          	
  1154  3E7E  70 CF             	and	f, 0xCF   ;select user reg space
  1155  3E80  62 D0 00          	mov	reg[CUR_PP],0
  1156  3E83  53 13             	mov	[(??_s_do_measure^0x0)+14+0],a
  1157  3E85  51 11             	mov	a,[0+((s_do_measure@error)^0x0)]
  1158  3E87  02 13             	add	a,[(??_s_do_measure^0x0)+14+0]
  1159  3E89  53 11             	mov	[0+((s_do_measure@error)^0x0)],a
  1160                          	line	283
  1161                          ;shtxx.c: 283: error+=s_measure((unsigned char*) &temp_val.i,&checksum,TEMP);
  1162  3E8B  50 05             	mov	a,<((s_do_measure@temp_val|8000h))
  1163  3E8D  70 CF             	and	f, 0xCF   ;select user reg space
  1164  3E8F  62 D0 00          	mov	reg[CUR_PP],0
  1165  3E92  53 16             	mov	[1+((?_s_measure)^0x0)],a
  1166  3E94  50 80             	mov	a,>((s_do_measure@temp_val|8000h))
  1167  3E96  53 15             	mov	[0+((?_s_measure)^0x0)],a
  1168  3E98  50 12             	mov	a,<((s_do_measure@checksum|8000h))
  1169  3E9A  53 18             	mov	[1+((0+?_s_measure+02h)^0x0)],a
  1170  3E9C  50 80             	mov	a,>((s_do_measure@checksum|8000h))
  1171  3E9E  53 17             	mov	[0+((0+?_s_measure+02h)^0x0)],a
  1172  3EA0  50 00             	mov	a,<((0))
  1173  3EA2  53 19             	mov	[0+((0+?_s_measure+04h)^0x0)],a
  1174  3EA4  71 80             	or	f, 0x80	;select multiple RAM page mode
  1175                          	
  1176  3EA6  7C 4A2B           	xcall	_s_measure
  1177                          	
  1178  3EA9  70 CF             	and	f, 0xCF   ;select user reg space
  1179  3EAB  62 D0 00          	mov	reg[CUR_PP],0
  1180  3EAE  53 13             	mov	[(??_s_do_measure^0x0)+14+0],a
  1181  3EB0  51 11             	mov	a,[0+((s_do_measure@error)^0x0)]
  1182  3EB2  02 13             	add	a,[(??_s_do_measure^0x0)+14+0]
  1183  3EB4  53 11             	mov	[0+((s_do_measure@error)^0x0)],a
  1184                          	line	285
  1185                          ;shtxx.c: 285: if(error!=0) {s_connectionreset(); LTRX_CPutString("SHTxx error: "); LTRX_PutSHexByte
                                (error); }
  1186  3EB6  51 11             	mov	a,[0+((s_do_measure@error)^0x0)]
  1187  3EB8  39 00             	cmp	a,(0)
  1188  3EBA  A024              	jz	l126
  1189  3EBC  71 80             	or	f, 0x80	;select multiple RAM page mode
  1190                          	
  1191  3EBE  7C 49C2           	xcall	_s_connectionreset
  1192                          	
  1193  3EC1  57 20             	mov	x,<(STR_24)
  1194  3EC3  50 7F             	mov	a,>(STR_24)
  1195  3EC5  71 80             	or	f, 0x80	;select multiple RAM page mode
  1196  3EC7  70 CF             	and	f, 0xCF   ;select user reg space
  1197                          	
  1198  3EC9  7C 38B2           	xcall	_LTRX_CPutString
  1199                          	
  1200  3ECC  38 00             	add	sp,0
  1201  3ECE  70 CF             	and	f, 0xCF   ;select user reg space
  1202  3ED0  62 D0 00          	mov	reg[CUR_PP],0
  1203  3ED3  51 11             	mov	a,[0+((s_do_measure@error)^0x0)]
  1204  3ED5  71 80             	or	f, 0x80	;select multiple RAM page mode
  1205                          	
  1206  3ED7  7C 37F7           	xcall	_LTRX_PutSHexByte
  1207                          	
  1208  3EDA  38 00             	add	sp,0
  1209  3EDC  7D 3FC2           	xjmp	l127
  1210                          	line	286
  1211                          ;			
  1212  3EDF                    l126:	
  1213                          	line	287
  1214                          ;shtxx.c: 286: else
  1215                          ;shtxx.c: 287: { humi_val.f=(float)humi_val.i;
  1216  3EDF  70 CF             	and	f, 0xCF   ;select user reg space
  1217  3EE1  62 D0 00          	mov	reg[CUR_PP],0
  1218  3EE4  51 09             	mov	a,[0+((s_do_measure@humi_val)^0x0)]
  1219  3EE6  08                	push	a
  1220  3EE7  51 0A             	mov	a,[1+((s_do_measure@humi_val)^0x0)]
  1221  3EE9  53 16             	mov	[1+((?___lwtofl)^0x0)],a
  1222  3EEB  18                	pop	a
  1223  3EEC  53 15             	mov	[0+((?___lwtofl)^0x0)],a
  1224  3EEE  71 80             	or	f, 0x80	;select multiple RAM page mode
  1225                          	
  1226  3EF0  7C 4949           	xcall	___lwtofl
  1227                          	
  1228  3EF3  70 CF             	and	f, 0xCF   ;select user reg space
  1229  3EF5  62 D0 00          	mov	reg[CUR_PP],0
  1230  3EF8  51 15             	mov	a,[0+((0+?___lwtofl)^0x0)]
  1231  3EFA  53 09             	mov	[0+((s_do_measure@humi_val)^0x0)],a
  1232  3EFC  51 16             	mov	a,[1+((0+?___lwtofl)^0x0)]
  1233  3EFE  53 0A             	mov	[1+((s_do_measure@humi_val)^0x0)],a
  1234  3F00  51 17             	mov	a,[2+((0+?___lwtofl)^0x0)]
  1235  3F02  53 0B             	mov	[2+((s_do_measure@humi_val)^0x0)],a
  1236  3F04  51 18             	mov	a,[3+((0+?___lwtofl)^0x0)]
  1237  3F06  53 0C             	mov	[3+((s_do_measure@humi_val)^0x0)],a
  1238                          	line	288
  1239                          ;shtxx.c: 288: temp_val.f=(float)temp_val.i;
  1240  3F08  51 05             	mov	a,[0+((s_do_measure@temp_val)^0x0)]
  1241  3F0A  08                	push	a
  1242  3F0B  51 06             	mov	a,[1+((s_do_measure@temp_val)^0x0)]
  1243  3F0D  53 16             	mov	[1+((?___lwtofl)^0x0)],a
  1244  3F0F  18                	pop	a
  1245  3F10  53 15             	mov	[0+((?___lwtofl)^0x0)],a
  1246  3F12  71 80             	or	f, 0x80	;select multiple RAM page mode
  1247                          	
  1248  3F14  7C 4949           	xcall	___lwtofl
  1249                          	
  1250  3F17  70 CF             	and	f, 0xCF   ;select user reg space
  1251  3F19  62 D0 00          	mov	reg[CUR_PP],0
  1252  3F1C  51 15             	mov	a,[0+((0+?___lwtofl)^0x0)]
  1253  3F1E  53 05             	mov	[0+((s_do_measure@temp_val)^0x0)],a
  1254  3F20  51 16             	mov	a,[1+((0+?___lwtofl)^0x0)]
  1255  3F22  53 06             	mov	[1+((s_do_measure@temp_val)^0x0)],a
  1256  3F24  51 17             	mov	a,[2+((0+?___lwtofl)^0x0)]
  1257  3F26  53 07             	mov	[2+((s_do_measure@temp_val)^0x0)],a
  1258  3F28  51 18             	mov	a,[3+((0+?___lwtofl)^0x0)]
  1259  3F2A  53 08             	mov	[3+((s_do_measure@temp_val)^0x0)],a
  1260                          	line	289
  1261                          ;shtxx.c: 289: calc_sth11(&humi_val.f,&temp_val.f);
  1262  3F2C  50 09             	mov	a,<((s_do_measure@humi_val|8000h))
  1263  3F2E  53 16             	mov	[1+((?_calc_sth11)^0x0)],a
  1264  3F30  50 80             	mov	a,>((s_do_measure@humi_val|8000h))
  1265  3F32  53 15             	mov	[0+((?_calc_sth11)^0x0)],a
  1266  3F34  50 05             	mov	a,<((s_do_measure@temp_val|8000h))
  1267  3F36  53 18             	mov	[1+((0+?_calc_sth11+02h)^0x0)],a
  1268  3F38  50 80             	mov	a,>((s_do_measure@temp_val|8000h))
  1269  3F3A  53 17             	mov	[0+((0+?_calc_sth11+02h)^0x0)],a
  1270  3F3C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1271                          	
  1272  3F3E  7C 42D1           	xcall	_calc_sth11
  1273                          	
  1274                          	line	290
  1275                          ;shtxx.c: 290: dew_point=calc_dewpoint(humi_val.f,temp_val.f);
  1276  3F41  70 CF             	and	f, 0xCF   ;select user reg space
  1277  3F43  62 D0 00          	mov	reg[CUR_PP],0
  1278  3F46  51 09             	mov	a,[0+((s_do_measure@humi_val)^0x0)]
  1279  3F48  53 15             	mov	[0+((?_calc_dewpoint)^0x0)],a
  1280  3F4A  51 0A             	mov	a,[1+((s_do_measure@humi_val)^0x0)]
  1281  3F4C  53 16             	mov	[1+((?_calc_dewpoint)^0x0)],a
  1282  3F4E  51 0B             	mov	a,[2+((s_do_measure@humi_val)^0x0)]
  1283  3F50  53 17             	mov	[2+((?_calc_dewpoint)^0x0)],a
  1284  3F52  51 0C             	mov	a,[3+((s_do_measure@humi_val)^0x0)]
  1285  3F54  53 18             	mov	[3+((?_calc_dewpoint)^0x0)],a
  1286  3F56  51 05             	mov	a,[0+((s_do_measure@temp_val)^0x0)]
  1287  3F58  53 19             	mov	[0+((0+?_calc_dewpoint+04h)^0x0)],a
  1288  3F5A  51 06             	mov	a,[1+((s_do_measure@temp_val)^0x0)]
  1289  3F5C  53 1A             	mov	[1+((0+?_calc_dewpoint+04h)^0x0)],a
  1290  3F5E  51 07             	mov	a,[2+((s_do_measure@temp_val)^0x0)]
  1291  3F60  53 1B             	mov	[2+((0+?_calc_dewpoint+04h)^0x0)],a
  1292  3F62  51 08             	mov	a,[3+((s_do_measure@temp_val)^0x0)]
  1293  3F64  53 1C             	mov	[3+((0+?_calc_dewpoint+04h)^0x0)],a
  1294  3F66  71 80             	or	f, 0x80	;select multiple RAM page mode
  1295                          	
  1296  3F68  7C 4637           	xcall	_calc_dewpoint
  1297                          	
  1298  3F6B  70 CF             	and	f, 0xCF   ;select user reg space
  1299  3F6D  62 D0 00          	mov	reg[CUR_PP],0
  1300  3F70  51 15             	mov	a,[0+((0+?_calc_dewpoint)^0x0)]
  1301  3F72  53 0D             	mov	[0+((s_do_measure@dew_point)^0x0)],a
  1302  3F74  51 16             	mov	a,[1+((0+?_calc_dewpoint)^0x0)]
  1303  3F76  53 0E             	mov	[1+((s_do_measure@dew_point)^0x0)],a
  1304  3F78  51 17             	mov	a,[2+((0+?_calc_dewpoint)^0x0)]
  1305  3F7A  53 0F             	mov	[2+((s_do_measure@dew_point)^0x0)],a
  1306  3F7C  51 18             	mov	a,[3+((0+?_calc_dewpoint)^0x0)]
  1307  3F7E  53 10             	mov	[3+((s_do_measure@dew_point)^0x0)],a
  1308                          	line	292
  1309                          ;shtxx.c: 292: printf("SHTxx T:%5.1f C RH:%5.1f%\% DewPt:%5.1f C\r\n",temp_val.f,humi_val.f,dew_poin
                                t);
  1310  3F80  70 CF             	and	f, 0xCF   ;select user reg space
  1311  3F82  62 D0 00          	mov	reg[CUR_PP],0
  1312  3F85  51 05             	mov	a,[0+((s_do_measure@temp_val)^0x0)]
  1313  3F87  53 17             	mov	[0+((0+?_printf+02h)^0x0)],a
  1314  3F89  51 06             	mov	a,[1+((s_do_measure@temp_val)^0x0)]
  1315  3F8B  53 18             	mov	[1+((0+?_printf+02h)^0x0)],a
  1316  3F8D  51 07             	mov	a,[2+((s_do_measure@temp_val)^0x0)]
  1317  3F8F  53 19             	mov	[2+((0+?_printf+02h)^0x0)],a
  1318  3F91  51 08             	mov	a,[3+((s_do_measure@temp_val)^0x0)]
  1319  3F93  53 1A             	mov	[3+((0+?_printf+02h)^0x0)],a
  1320  3F95  50 00             	mov	a,<(STR_25)
  1321  3F97  53 16             	mov	[1+((?_printf)^0x0)],a
  1322  3F99  50 7E             	mov	a,>(STR_25)
  1323  3F9B  53 15             	mov	[0+((?_printf)^0x0)],a
  1324  3F9D  51 0D             	mov	a,[0+((s_do_measure@dew_point)^0x0)]
  1325  3F9F  53 1F             	mov	[0+((0+?_printf+0Ah)^0x0)],a
  1326  3FA1  51 0E             	mov	a,[1+((s_do_measure@dew_point)^0x0)]
  1327  3FA3  53 20             	mov	[1+((0+?_printf+0Ah)^0x0)],a
  1328  3FA5  51 0F             	mov	a,[2+((s_do_measure@dew_point)^0x0)]
  1329  3FA7  53 21             	mov	[2+((0+?_printf+0Ah)^0x0)],a
  1330  3FA9  51 10             	mov	a,[3+((s_do_measure@dew_point)^0x0)]
  1331  3FAB  53 22             	mov	[3+((0+?_printf+0Ah)^0x0)],a
  1332  3FAD  51 09             	mov	a,[0+((s_do_measure@humi_val)^0x0)]
  1333  3FAF  53 1B             	mov	[0+((0+?_printf+06h)^0x0)],a
  1334  3FB1  51 0A             	mov	a,[1+((s_do_measure@humi_val)^0x0)]
  1335  3FB3  53 1C             	mov	[1+((0+?_printf+06h)^0x0)],a
  1336  3FB5  51 0B             	mov	a,[2+((s_do_measure@humi_val)^0x0)]
  1337  3FB7  53 1D             	mov	[2+((0+?_printf+06h)^0x0)],a
  1338  3FB9  51 0C             	mov	a,[3+((s_do_measure@humi_val)^0x0)]
  1339  3FBB  53 1E             	mov	[3+((0+?_printf+06h)^0x0)],a
  1340  3FBD  71 80             	or	f, 0x80	;select multiple RAM page mode
  1341                          	
  1342  3FBF  7C 4B67           	xcall	_printf
  1343                          	
  1344                          	line	293
  1345                          ;			
  1346  3FC2                    l127:	
  1347                          	line	295
  1348                          ;shtxx.c: 293: }
  1349                          ;shtxx.c: 295: }
  1350  3FC2                    l125:
  1351                          ;			
  1352  3FC2  70 CF             	and	f, 0xCF   ;select user reg space
  1353                          	
  1354  3FC4  7F                	ret
  1355                          GLOBAL __end_of_s_do_measure
  1356  3FC5                    	__end_of_s_do_measure:
  1357                          	FNSIZE	_s_do_measure,16,0
  1358                          ; =============== function _s_do_measure ends ============
  1359                          
  1360                          	signat	_s_do_measure,88
  1361                          	global	_print_help
  1362                          	global	??_print_help
  1363                          	global	?_print_help
  1364                          	psect	text
  1365                          
  1366                          ; *************** function _print_help *****************
  1367                          ; Defined at:
  1368                          ;		line 47 in file "./main.c"
  1369                          ; Parameters:
  1370                          ;		None
  1371                          ; Auto variables:
  1372                          ;		None
  1373                          ; Return value:
  1374                          ;		type: void 
  1375                          ;		size: 0
  1376                          ; Registers used:
  1377                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1378                          ; Tracked objects:
  1379                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1380                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1381                          ;		Unchanged: 
  1382                          ; Data sizes:
  1383                          ;		Autos:    0
  1384                          ;		Params:   0
  1385                          ;		Temp:     0
  1386                          ;		Total:    0
  1387                          ; This function calls:
  1388                          ;		_print_header
  1389                          ;		_printf
  1390                          ; This function is called by:
  1391                          ;		_main
  1392                          ; This function uses a non-reentrant model
  1393                          ; 
  1394                          	file	"./main.c"
  1395                          	line	47
  1396  002C                    	__size_of_print_help	equ	__end_of_print_help-_print_help
  1397                          ;main.c: 47: void print_help(){
  1398                          ;			
  1399  3FC5                    _print_help:	
  1400                          	opt	disable
  1401                          	line	48
  1402                          ;main.c: 48: print_header();
  1403  3FC5  71 80             	or	f, 0x80	;select multiple RAM page mode
  1404                          	
  1405  3FC7  7C 577E           	xcall	_print_header
  1406                          	
  1407                          	line	49
  1408                          ;main.c: 49: printf("Press '?' to acquire sensor values and to generate a report\r\n");
  1409  3FCA  50 65             	mov	a,<(STR_4)
  1410  3FCC  70 CF             	and	f, 0xCF   ;select user reg space
  1411  3FCE  62 D0 00          	mov	reg[CUR_PP],0
  1412  3FD1  53 16             	mov	[1+((?_printf)^0x0)],a
  1413  3FD3  50 7D             	mov	a,>(STR_4)
  1414  3FD5  53 15             	mov	[0+((?_printf)^0x0)],a
  1415  3FD7  71 80             	or	f, 0x80	;select multiple RAM page mode
  1416                          	
  1417  3FD9  7C 4B67           	xcall	_printf
  1418                          	
  1419                          	line	50
  1420                          ;main.c: 50: printf("Or enter 'venti'\r\n followed by 'low', 'normal' or 'high'\r\n to control the v
                                entilation system speed\r\n");
  1421  3FDC  50 00             	mov	a,<(STR_5)
  1422  3FDE  70 CF             	and	f, 0xCF   ;select user reg space
  1423  3FE0  62 D0 00          	mov	reg[CUR_PP],0
  1424  3FE3  53 16             	mov	[1+((?_printf)^0x0)],a
  1425  3FE5  50 7D             	mov	a,>(STR_5)
  1426  3FE7  53 15             	mov	[0+((?_printf)^0x0)],a
  1427  3FE9  71 80             	or	f, 0x80	;select multiple RAM page mode
  1428                          	
  1429  3FEB  7C 4B67           	xcall	_printf
  1430                          	
  1431                          	line	51
  1432                          ;main.c: 51: }
  1433  3FEE                    l5:
  1434                          ;			
  1435  3FEE  70 CF             	and	f, 0xCF   ;select user reg space
  1436                          	
  1437  3FF0  7F                	ret
  1438                          GLOBAL __end_of_print_help
  1439  3FF1                    	__end_of_print_help:
  1440                          	FNSIZE	_print_help,0,0
  1441                          ; =============== function _print_help ends ============
  1442                          
  1443                          	signat	_print_help,88
  1444                          	global	_hardware_init
  1445                          	global	??_hardware_init
  1446                          	global	?_hardware_init
  1447                          	psect	text
  1448                          
  1449                          ; *************** function _hardware_init *****************
  1450                          ; Defined at:
  1451                          ;		line 54 in file "./main.c"
  1452                          ; Parameters:
  1453                          ;		None
  1454                          ; Auto variables:
  1455                          ;		None
  1456                          ; Return value:
  1457                          ;		type: void 
  1458                          ;		size: 0
  1459                          ; Registers used:
  1460                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1461                          ; Tracked objects:
  1462                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1463                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1464                          ;		Unchanged: 
  1465                          ; Data sizes:
  1466                          ;		Autos:    0
  1467                          ;		Params:   0
  1468                          ;		Temp:     0
  1469                          ;		Total:    0
  1470                          ; This function calls:
  1471                          ;		_Counter8_ltrx_Start
  1472                          ;		_LED1_Start
  1473                          ;		_Ticker_Start
  1474                          ;		_OneWire_Start
  1475                          ;		_s_Start
  1476                          ;		_orcon_Start
  1477                          ;		_LTRX_CmdReset
  1478                          ;		_LTRX_EnableInt
  1479                          ;		_LTRX_Start
  1480                          ;		_Ticker_EnableInt
  1481                          ; This function is called by:
  1482                          ;		_main
  1483                          ; This function uses a non-reentrant model
  1484                          ; 
  1485                          	file	"./main.c"
  1486                          	line	54
  1487  0059                    	__size_of_hardware_init	equ	__end_of_hardware_init-_hardware_init
  1488                          ;main.c: 54: void hardware_init(){
  1489                          ;			
  1490  3FF1                    _hardware_init:	
  1491                          	opt	disable
  1492                          	line	57
  1493                          ;main.c: 57: Counter8_ltrx_Start();
  1494  3FF1  71 80             	or	f, 0x80	;select multiple RAM page mode
  1495  3FF3  70 CF             	and	f, 0xCF   ;select user reg space
  1496                          	
  1497  3FF5  7C 36F4           	xcall	_Counter8_ltrx_Start
  1498                          	
  1499  3FF8  38 00             	add	sp,0
  1500                          	line	58
  1501                          ;main.c: 58: LED1_Start();
  1502  3FFA  71 80             	or	f, 0x80	;select multiple RAM page mode
  1503  3FFC  70 CF             	and	f, 0xCF   ;select user reg space
  1504                          	
  1505  3FFE  7C 373D           	xcall	_LED1_Start
  1506                          	
  1507  4001  38 00             	add	sp,0
  1508                          	line	59
  1509                          ;main.c: 59: Ticker_Start();
  1510  4003  71 80             	or	f, 0x80	;select multiple RAM page mode
  1511  4005  70 CF             	and	f, 0xCF   ;select user reg space
  1512                          	
  1513  4007  7C 3CE7           	xcall	_Ticker_Start
  1514                          	
  1515  400A  38 00             	add	sp,0
  1516                          	line	60
  1517                          ;main.c: 60: OneWire_Start();
  1518  400C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1519  400E  70 CF             	and	f, 0xCF   ;select user reg space
  1520                          	
  1521  4010  7C 39D9           	xcall	_OneWire_Start
  1522                          	
  1523  4013  38 00             	add	sp,0
  1524                          	line	61
  1525                          ;main.c: 61: s_Start();
  1526  4015  71 80             	or	f, 0x80	;select multiple RAM page mode
  1527                          	
  1528  4017  7C 57CF           	xcall	_s_Start
  1529                          	
  1530                          	line	62
  1531                          ;main.c: 62: orcon_Start();
  1532  401A  71 80             	or	f, 0x80	;select multiple RAM page mode
  1533                          	
  1534  401C  7C 4B5C           	xcall	_orcon_Start
  1535                          	
  1536                          	line	65
  1537                          ;main.c: 65: LTRX_CmdReset();
  1538  401F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1539  4021  70 CF             	and	f, 0xCF   ;select user reg space
  1540                          	
  1541  4023  7C 38CD           	xcall	_LTRX_CmdReset
  1542                          	
  1543  4026  38 00             	add	sp,0
  1544                          	line	66
  1545                          ;main.c: 66: LTRX_EnableInt();
  1546  4028  71 80             	or	f, 0x80	;select multiple RAM page mode
  1547  402A  70 CF             	and	f, 0xCF   ;select user reg space
  1548                          	
  1549  402C  7C 377D           	xcall	_LTRX_EnableInt
  1550                          	
  1551  402F  38 00             	add	sp,0
  1552                          	line	67
  1553                          ;main.c: 67: LTRX_Start(0x00);
  1554  4031  50 00             	mov	a,<((0))
  1555  4033  71 80             	or	f, 0x80	;select multiple RAM page mode
  1556  4035  70 CF             	and	f, 0xCF   ;select user reg space
  1557                          	
  1558  4037  7C 379D           	xcall	_LTRX_Start
  1559                          	
  1560  403A  38 00             	add	sp,0
  1561                          	line	70
  1562                          ;main.c: 70: Ticker_EnableInt();
  1563  403C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1564  403E  70 CF             	and	f, 0xCF   ;select user reg space
  1565                          	
  1566  4040  7C 3CDF           	xcall	_Ticker_EnableInt
  1567                          	
  1568  4043  38 00             	add	sp,0
  1569                          	line	71
  1570                          # 71 "./main.c"
  1571  4045  71 01             or  F, 01h ;#
  1572                          	psect	text
  1573                          	line	73
  1574                          ;main.c: 71: asm("or  F, 01h") ;
  1575                          ;main.c: 73: }
  1576  4047                    l6:
  1577                          ;			
  1578  4047  70 CF             	and	f, 0xCF   ;select user reg space
  1579                          	
  1580  4049  7F                	ret
  1581                          GLOBAL __end_of_hardware_init
  1582  404A                    	__end_of_hardware_init:
  1583                          	FNSIZE	_hardware_init,0,0
  1584                          ; =============== function _hardware_init ends ============
  1585                          
  1586                          	signat	_hardware_init,88
  1587                          	global	_orcon_high
  1588                          	global	??_orcon_high
  1589                          	global	?_orcon_high
  1590                          	psect	text
  1591                          
  1592                          ; *************** function _orcon_high *****************
  1593                          ; Defined at:
  1594                          ;		line 77 in file "./orcon.c"
  1595                          ; Parameters:
  1596                          ;		None
  1597                          ; Auto variables:
  1598                          ;		None
  1599                          ; Return value:
  1600                          ;		type: void 
  1601                          ;		size: 0
  1602                          ; Registers used:
  1603                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1604                          ; Tracked objects:
  1605                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1606                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1607                          ;		Unchanged: 
  1608                          ; Data sizes:
  1609                          ;		Autos:    0
  1610                          ;		Params:   0
  1611                          ;		Temp:     0
  1612                          ;		Total:    0
  1613                          ; This function calls:
  1614                          ;		_printf
  1615                          ;		_orcon_delay
  1616                          ; This function is called by:
  1617                          ;		_main
  1618                          ; This function uses a non-reentrant model
  1619                          ; 
  1620                          	file	"./orcon.c"
  1621                          	line	77
  1622  003C                    	__size_of_orcon_high	equ	__end_of_orcon_high-_orcon_high
  1623                          ;orcon.c: 77: void orcon_high(){
  1624                          ;			
  1625  404A                    _orcon_high:	
  1626                          	opt	disable
  1627                          	line	78
  1628                          ;orcon.c: 78: (PRT0DR = PRT0DR & 0xDF);
  1629  404A  70 CF             	and	f, 0xCF   ;select user reg space
  1630  404C  5D 00             	mov	a,reg[(0)]
  1631  404E  21 DF             	and	a,<((0DFh))
  1632  4050  60 00             	mov	reg[(0)],a
  1633                          	line	79
  1634                          ;orcon.c: 79: printf("Switching Orcon ");
  1635  4052  50 00             	mov	a,<(STR_22)
  1636  4054  70 CF             	and	f, 0xCF   ;select user reg space
  1637  4056  62 D0 00          	mov	reg[CUR_PP],0
  1638  4059  53 16             	mov	[1+((?_printf)^0x0)],a
  1639  405B  50 7F             	mov	a,>(STR_22)
  1640  405D  53 15             	mov	[0+((?_printf)^0x0)],a
  1641  405F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1642                          	
  1643  4061  7C 4B67           	xcall	_printf
  1644                          	
  1645                          	line	80
  1646                          ;orcon.c: 80: orcon_delay();
  1647  4064  71 80             	or	f, 0x80	;select multiple RAM page mode
  1648                          	
  1649  4066  7C 484B           	xcall	_orcon_delay
  1650                          	
  1651                          	line	81
  1652                          ;orcon.c: 81: printf("to mode HIGH\r\n");
  1653  4069  50 11             	mov	a,<(STR_23)
  1654  406B  70 CF             	and	f, 0xCF   ;select user reg space
  1655  406D  62 D0 00          	mov	reg[CUR_PP],0
  1656  4070  53 16             	mov	[1+((?_printf)^0x0)],a
  1657  4072  50 7F             	mov	a,>(STR_23)
  1658  4074  53 15             	mov	[0+((?_printf)^0x0)],a
  1659  4076  71 80             	or	f, 0x80	;select multiple RAM page mode
  1660                          	
  1661  4078  7C 4B67           	xcall	_printf
  1662                          	
  1663                          	line	82
  1664                          ;orcon.c: 82: (PRT0DR = PRT0DR | 0x2A);
  1665  407B  70 CF             	and	f, 0xCF   ;select user reg space
  1666  407D  5D 00             	mov	a,reg[(0)]
  1667  407F  29 2A             	or	a,<((02Ah))
  1668  4081  60 00             	mov	reg[(0)],a
  1669                          	line	83
  1670                          ;orcon.c: 83: }
  1671  4083                    l85:
  1672                          ;			
  1673  4083  70 CF             	and	f, 0xCF   ;select user reg space
  1674                          	
  1675  4085  7F                	ret
  1676                          GLOBAL __end_of_orcon_high
  1677  4086                    	__end_of_orcon_high:
  1678                          	FNSIZE	_orcon_high,0,0
  1679                          ; =============== function _orcon_high ends ============
  1680                          
  1681                          	signat	_orcon_high,88
  1682                          	global	_orcon_med
  1683                          	global	??_orcon_med
  1684                          	global	?_orcon_med
  1685                          	psect	text
  1686                          
  1687                          ; *************** function _orcon_med *****************
  1688                          ; Defined at:
  1689                          ;		line 69 in file "./orcon.c"
  1690                          ; Parameters:
  1691                          ;		None
  1692                          ; Auto variables:
  1693                          ;		None
  1694                          ; Return value:
  1695                          ;		type: void 
  1696                          ;		size: 0
  1697                          ; Registers used:
  1698                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1699                          ; Tracked objects:
  1700                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1701                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1702                          ;		Unchanged: 
  1703                          ; Data sizes:
  1704                          ;		Autos:    0
  1705                          ;		Params:   0
  1706                          ;		Temp:     0
  1707                          ;		Total:    0
  1708                          ; This function calls:
  1709                          ;		_printf
  1710                          ;		_orcon_delay
  1711                          ; This function is called by:
  1712                          ;		_main
  1713                          ; This function uses a non-reentrant model
  1714                          ; 
  1715                          	file	"./orcon.c"
  1716                          	line	69
  1717  003C                    	__size_of_orcon_med	equ	__end_of_orcon_med-_orcon_med
  1718                          ;orcon.c: 69: void orcon_med(){
  1719                          ;			
  1720  4086                    _orcon_med:	
  1721                          	opt	disable
  1722                          	line	70
  1723                          ;orcon.c: 70: (PRT0DR = PRT0DR & 0xF7);
  1724  4086  70 CF             	and	f, 0xCF   ;select user reg space
  1725  4088  5D 00             	mov	a,reg[(0)]
  1726  408A  21 F7             	and	a,<((0F7h))
  1727  408C  60 00             	mov	reg[(0)],a
  1728                          	line	71
  1729                          ;orcon.c: 71: printf("Switching Orcon ");
  1730  408E  50 00             	mov	a,<(STR_20)
  1731  4090  70 CF             	and	f, 0xCF   ;select user reg space
  1732  4092  62 D0 00          	mov	reg[CUR_PP],0
  1733  4095  53 16             	mov	[1+((?_printf)^0x0)],a
  1734  4097  50 7F             	mov	a,>(STR_20)
  1735  4099  53 15             	mov	[0+((?_printf)^0x0)],a
  1736  409B  71 80             	or	f, 0x80	;select multiple RAM page mode
  1737                          	
  1738  409D  7C 4B67           	xcall	_printf
  1739                          	
  1740                          	line	72
  1741                          ;orcon.c: 72: orcon_delay();
  1742  40A0  71 80             	or	f, 0x80	;select multiple RAM page mode
  1743                          	
  1744  40A2  7C 484B           	xcall	_orcon_delay
  1745                          	
  1746                          	line	73
  1747                          ;orcon.c: 73: printf("to mode NORMAL\r\n");
  1748  40A5  50 E5             	mov	a,<(STR_21)
  1749  40A7  70 CF             	and	f, 0xCF   ;select user reg space
  1750  40A9  62 D0 00          	mov	reg[CUR_PP],0
  1751  40AC  53 16             	mov	[1+((?_printf)^0x0)],a
  1752  40AE  50 7E             	mov	a,>(STR_21)
  1753  40B0  53 15             	mov	[0+((?_printf)^0x0)],a
  1754  40B2  71 80             	or	f, 0x80	;select multiple RAM page mode
  1755                          	
  1756  40B4  7C 4B67           	xcall	_printf
  1757                          	
  1758                          	line	74
  1759                          ;orcon.c: 74: (PRT0DR = PRT0DR | 0x2A);
  1760  40B7  70 CF             	and	f, 0xCF   ;select user reg space
  1761  40B9  5D 00             	mov	a,reg[(0)]
  1762  40BB  29 2A             	or	a,<((02Ah))
  1763  40BD  60 00             	mov	reg[(0)],a
  1764                          	line	75
  1765                          ;orcon.c: 75: }
  1766  40BF                    l84:
  1767                          ;			
  1768  40BF  70 CF             	and	f, 0xCF   ;select user reg space
  1769                          	
  1770  40C1  7F                	ret
  1771                          GLOBAL __end_of_orcon_med
  1772  40C2                    	__end_of_orcon_med:
  1773                          	FNSIZE	_orcon_med,0,0
  1774                          ; =============== function _orcon_med ends ============
  1775                          
  1776                          	signat	_orcon_med,88
  1777                          	global	_orcon_low
  1778                          	global	??_orcon_low
  1779                          	global	?_orcon_low
  1780                          	psect	text
  1781                          
  1782                          ; *************** function _orcon_low *****************
  1783                          ; Defined at:
  1784                          ;		line 61 in file "./orcon.c"
  1785                          ; Parameters:
  1786                          ;		None
  1787                          ; Auto variables:
  1788                          ;		None
  1789                          ; Return value:
  1790                          ;		type: void 
  1791                          ;		size: 0
  1792                          ; Registers used:
  1793                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1794                          ; Tracked objects:
  1795                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1796                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1797                          ;		Unchanged: 
  1798                          ; Data sizes:
  1799                          ;		Autos:    0
  1800                          ;		Params:   0
  1801                          ;		Temp:     0
  1802                          ;		Total:    0
  1803                          ; This function calls:
  1804                          ;		_printf
  1805                          ;		_orcon_delay
  1806                          ; This function is called by:
  1807                          ;		_main
  1808                          ; This function uses a non-reentrant model
  1809                          ; 
  1810                          	file	"./orcon.c"
  1811                          	line	61
  1812  003C                    	__size_of_orcon_low	equ	__end_of_orcon_low-_orcon_low
  1813                          ;orcon.c: 61: void orcon_low(){
  1814                          ;			
  1815  40C2                    _orcon_low:	
  1816                          	opt	disable
  1817                          	line	62
  1818                          ;orcon.c: 62: (PRT0DR = PRT0DR & 0xFD);
  1819  40C2  70 CF             	and	f, 0xCF   ;select user reg space
  1820  40C4  5D 00             	mov	a,reg[(0)]
  1821  40C6  21 FD             	and	a,<((0FDh))
  1822  40C8  60 00             	mov	reg[(0)],a
  1823                          	line	63
  1824                          ;orcon.c: 63: printf("Switching Orcon ");
  1825  40CA  50 00             	mov	a,<(STR_18)
  1826  40CC  70 CF             	and	f, 0xCF   ;select user reg space
  1827  40CE  62 D0 00          	mov	reg[CUR_PP],0
  1828  40D1  53 16             	mov	[1+((?_printf)^0x0)],a
  1829  40D3  50 7F             	mov	a,>(STR_18)
  1830  40D5  53 15             	mov	[0+((?_printf)^0x0)],a
  1831  40D7  71 80             	or	f, 0x80	;select multiple RAM page mode
  1832                          	
  1833  40D9  7C 4B67           	xcall	_printf
  1834                          	
  1835                          	line	64
  1836                          ;orcon.c: 64: orcon_delay();
  1837  40DC  71 80             	or	f, 0x80	;select multiple RAM page mode
  1838                          	
  1839  40DE  7C 484B           	xcall	_orcon_delay
  1840                          	
  1841                          	line	65
  1842                          ;orcon.c: 65: printf("to mode LOW\r\n");
  1843  40E1  50 2E             	mov	a,<(STR_19)
  1844  40E3  70 CF             	and	f, 0xCF   ;select user reg space
  1845  40E5  62 D0 00          	mov	reg[CUR_PP],0
  1846  40E8  53 16             	mov	[1+((?_printf)^0x0)],a
  1847  40EA  50 7F             	mov	a,>(STR_19)
  1848  40EC  53 15             	mov	[0+((?_printf)^0x0)],a
  1849  40EE  71 80             	or	f, 0x80	;select multiple RAM page mode
  1850                          	
  1851  40F0  7C 4B67           	xcall	_printf
  1852                          	
  1853                          	line	66
  1854                          ;orcon.c: 66: (PRT0DR = PRT0DR | 0x2A);
  1855  40F3  70 CF             	and	f, 0xCF   ;select user reg space
  1856  40F5  5D 00             	mov	a,reg[(0)]
  1857  40F7  29 2A             	or	a,<((02Ah))
  1858  40F9  60 00             	mov	reg[(0)],a
  1859                          	line	67
  1860                          ;orcon.c: 67: }
  1861  40FB                    l83:
  1862                          ;			
  1863  40FB  70 CF             	and	f, 0xCF   ;select user reg space
  1864                          	
  1865  40FD  7F                	ret
  1866                          GLOBAL __end_of_orcon_low
  1867  40FE                    	__end_of_orcon_low:
  1868                          	FNSIZE	_orcon_low,0,0
  1869                          ; =============== function _orcon_low ends ============
  1870                          
  1871                          	signat	_orcon_low,88
  1872                          	global	_LTRX_bCmdCheck
  1873                          	global	_oo_read_device
  1874                          	global	??_oo_read_device
  1875                          	global	?_oo_read_device
  1876                          	psect	text
  1877                          
  1878                          ; *************** function _oo_read_device *****************
  1879                          ; Defined at:
  1880                          ;		line 233 in file "./oo.c"
  1881                          ; Parameters:
  1882                          ;		None
  1883                          ; Auto variables:
  1884                          ;		data        	       	type: struct s_oo_data
  1885                          ;		crc         	       	type: unsigned char 
  1886                          ;		loper       	       	type: unsigned char 
  1887                          ; Return value:
  1888                          ;		type: struct s_oo_data
  1889                          ;		size: 13
  1890                          ; Registers used:
  1891                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1892                          ; Tracked objects:
  1893                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1894                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1895                          ;		Unchanged: 
  1896                          ; Data sizes:
  1897                          ;		Autos:   14
  1898                          ;		Params:  13
  1899                          ;		Temp:     3
  1900                          ;		Total:   30
  1901                          ; This function calls:
  1902                          ;		_OneWire_GetROM
  1903                          ;		_oo_busreset
  1904                          ;		_OneWire_SetROM
  1905                          ;		_OneWire_fVerify
  1906                          ;		_oo_read_scratchpad
  1907                          ; This function is called by:
  1908                          ;		_oo_report
  1909                          ; This function uses a non-reentrant model
  1910                          ; 
  1911                          	file	"./oo.c"
  1912                          	line	233
  1913  00DA                    	__size_of_oo_read_device	equ	__end_of_oo_read_device-_oo_read_device
  1914                          ;oo.c: 233: oo_tdata oo_read_device(){
  1915                          ;			
  1916  40FE                    _oo_read_device:	
  1917                          	opt	disable
  1918                          	line	240
  1919                          ;oo.c: 235: char loper;
  1920                          ;oo.c: 236: char crc;
  1921                          ;oo.c: 238: oo_tdata data;
  1922                          ;oo.c: 240: data.valid = 0;
  1923  40FE  50 00             	mov	a,<((0))
  1924  4100  70 CF             	and	f, 0xCF   ;select user reg space
  1925  4102  62 D0 00          	mov	reg[CUR_PP],0
  1926  4105  53 2E             	mov	[0+((0+oo_read_device@data+0Ch)^0x0)],a
  1927                          	line	243
  1928                          ;oo.c: 243: OneWire_GetROM(data.id);
  1929  4107  57 22             	mov	x,<((oo_read_device@data|8000h))
  1930  4109  50 80             	mov	a,>((oo_read_device@data|8000h))
  1931  410B  71 80             	or	f, 0x80	;select multiple RAM page mode
  1932  410D  70 CF             	and	f, 0xCF   ;select user reg space
  1933                          	
  1934  410F  7C 3A77           	xcall	_OneWire_GetROM
  1935                          	
  1936  4112  38 00             	add	sp,0
  1937                          	line	245
  1938                          ;oo.c: 245: oo_busreset();
  1939  4114  71 80             	or	f, 0x80	;select multiple RAM page mode
  1940                          	
  1941  4116  7C 5831           	xcall	_oo_busreset
  1942                          	
  1943                          	line	248
  1944                          ;oo.c: 248: OneWire_SetROM(data.id);
  1945  4119  57 22             	mov	x,<((oo_read_device@data|8000h))
  1946  411B  50 80             	mov	a,>((oo_read_device@data|8000h))
  1947  411D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1948  411F  70 CF             	and	f, 0xCF   ;select user reg space
  1949                          	
  1950  4121  7C 3AA1           	xcall	_OneWire_SetROM
  1951                          	
  1952  4124  38 00             	add	sp,0
  1953                          	line	249
  1954                          ;oo.c: 249: OneWire_fVerify();
  1955  4126  71 80             	or	f, 0x80	;select multiple RAM page mode
  1956  4128  70 CF             	and	f, 0xCF   ;select user reg space
  1957                          	
  1958  412A  7C 3C02           	xcall	_OneWire_fVerify
  1959                          	
  1960  412D  38 00             	add	sp,0
  1961                          	line	252
  1962                          ;oo.c: 252: if (crc = oo_read_scratchpad()){
  1963  412F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1964                          	
  1965  4131  7C 57DA           	xcall	_oo_read_scratchpad
  1966                          	
  1967  4134  70 CF             	and	f, 0xCF   ;select user reg space
  1968  4136  62 D0 00          	mov	reg[CUR_PP],0
  1969  4139  53 2F             	mov	[0+((oo_read_device@crc)^0x0)],a
  1970  413B  39 00             	cmp	a,(0)
  1971  413D  A020              	jz	l53
  1972                          	line	253
  1973  413F  70 CF             	and	f, 0xCF   ;select user reg space
  1974  4141  62 D0 00          	mov	reg[CUR_PP],0
  1975  4144  55 30  22         	mov	[(??_oo_read_device^0x0)+14+0],<(oo_read_device@data)
  1976  4147  62 D4 00          	mov	reg[MVR_PP],0
  1977                          	
  1978  414A  55 31  15         	mov	[(??_oo_read_device^0x0)+15+0],<(?_oo_read_device)
  1979  414D  62 D5 00          	mov	reg[MVW_PP],0
  1980                          	
  1981  4150  55 32  0D         	mov	[(??_oo_read_device^0x0)+16+0],13
  1982  4153                    u2533:
  1983  4153  3E 30             	mvi	a,[[(??_oo_read_device^0x0)+14+0]++]
  1984  4155  3F 31             	mvi	[[(??_oo_read_device^0x0)+15+0]++],a
  1985  4157  7A 32             	dec	[(??_oo_read_device^0x0)+16+0]
  1986  4159  BFF9              	jnz	u2533
  1987  415B  7D 41D5           	xjmp	l52
  1988                          	line	254
  1989                          ;			
  1990  415E                    l53:	
  1991                          	line	257
  1992                          ;oo.c: 254: }
  1993                          ;oo.c: 257: data.t_msb = oo_scratchpad[1];
  1994  415E  50 01             	mov	a,<((01h))
  1995  4160  01 00             	add	a,<(8000h+_oo_scratchpad)
  1996  4162  5C                	mov	x,a
  1997  4163  50 82             	mov	a,>(8000h+_oo_scratchpad)
  1998  4165  70 CF             	and	f, 0xCF   ;select user reg space
  1999  4167  60 D3             	mov	reg[0xd3],a
  2000  4169  52 00             	mov	a,[x+0]
  2001  416B  62 D0 00          	mov	reg[CUR_PP],0
  2002  416E  53 2A             	mov	[0+((0+oo_read_device@data+08h)^0x0)],a
  2003                          	line	258
  2004                          ;oo.c: 258: data.t_lsb = oo_scratchpad[0];
  2005  4170  70 CF             	and	f, 0xCF   ;select user reg space
  2006  4172  71 80             	or	f, 0x80	;select multiple RAM page mode
  2007  4174  62 D0 02          	mov	reg[CUR_PP],2
  2008  4177  51 00             	mov	a,[0+((_oo_scratchpad)^0x200)]
  2009  4179  62 D0 00          	mov	reg[CUR_PP],0
  2010  417C  53 2B             	mov	[0+((0+oo_read_device@data+09h)^0x0)],a
  2011                          	line	259
  2012                          ;oo.c: 259: data.remain = oo_scratchpad[6];
  2013  417E  50 06             	mov	a,<((06h))
  2014  4180  01 00             	add	a,<(8000h+_oo_scratchpad)
  2015  4182  5C                	mov	x,a
  2016  4183  50 82             	mov	a,>(8000h+_oo_scratchpad)
  2017  4185  70 CF             	and	f, 0xCF   ;select user reg space
  2018  4187  60 D3             	mov	reg[0xd3],a
  2019  4189  52 00             	mov	a,[x+0]
  2020  418B  62 D0 00          	mov	reg[CUR_PP],0
  2021  418E  53 2C             	mov	[0+((0+oo_read_device@data+0Ah)^0x0)],a
  2022                          	line	260
  2023                          ;oo.c: 260: data.nr_count = oo_scratchpad[7];
  2024  4190  50 07             	mov	a,<((07h))
  2025  4192  01 00             	add	a,<(8000h+_oo_scratchpad)
  2026  4194  5C                	mov	x,a
  2027  4195  50 82             	mov	a,>(8000h+_oo_scratchpad)
  2028  4197  70 CF             	and	f, 0xCF   ;select user reg space
  2029  4199  60 D3             	mov	reg[0xd3],a
  2030  419B  52 00             	mov	a,[x+0]
  2031  419D  62 D0 00          	mov	reg[CUR_PP],0
  2032  41A0  53 2D             	mov	[0+((0+oo_read_device@data+0Bh)^0x0)],a
  2033                          	line	261
  2034                          ;oo.c: 261: if (crc == 0x00) { data.valid = 1; }
  2035  41A2  70 CF             	and	f, 0xCF   ;select user reg space
  2036  41A4  62 D0 00          	mov	reg[CUR_PP],0
  2037  41A7  51 2F             	mov	a,[0+((oo_read_device@crc)^0x0)]
  2038  41A9  39 00             	cmp	a,(0)
  2039  41AB  B00A              	jnz	l54
  2040  41AD  50 01             	mov	a,<((01h))
  2041  41AF  70 CF             	and	f, 0xCF   ;select user reg space
  2042  41B1  62 D0 00          	mov	reg[CUR_PP],0
  2043  41B4  53 2E             	mov	[0+((0+oo_read_device@data+0Ch)^0x0)],a
  2044                          ;			
  2045  41B6                    l54:	
  2046                          	line	263
  2047  41B6  70 CF             	and	f, 0xCF   ;select user reg space
  2048  41B8  62 D0 00          	mov	reg[CUR_PP],0
  2049  41BB  55 30  22         	mov	[(??_oo_read_device^0x0)+14+0],<(oo_read_device@data)
  2050  41BE  62 D4 00          	mov	reg[MVR_PP],0
  2051                          	
  2052  41C1  55 31  15         	mov	[(??_oo_read_device^0x0)+15+0],<(?_oo_read_device)
  2053  41C4  62 D5 00          	mov	reg[MVW_PP],0
  2054                          	
  2055  41C7  55 32  0D         	mov	[(??_oo_read_device^0x0)+16+0],13
  2056  41CA                    u2543:
  2057  41CA  3E 30             	mvi	a,[[(??_oo_read_device^0x0)+14+0]++]
  2058  41CC  3F 31             	mvi	[[(??_oo_read_device^0x0)+15+0]++],a
  2059  41CE  7A 32             	dec	[(??_oo_read_device^0x0)+16+0]
  2060  41D0  BFF9              	jnz	u2543
  2061  41D2  7D 41D5           	xjmp	l52
  2062                          	line	265
  2063                          ;oo.c: 265: }
  2064  41D5                    l52:
  2065                          ;			
  2066  41D5  70 CF             	and	f, 0xCF   ;select user reg space
  2067                          	
  2068  41D7  7F                	ret
  2069                          GLOBAL __end_of_oo_read_device
  2070  41D8                    	__end_of_oo_read_device:
  2071                          	FNSIZE	_oo_read_device,17,13
  2072                          ; =============== function _oo_read_device ends ============
  2073                          
  2074                          	signat	_oo_read_device,95
  2075                          	global	_oo_start_conversion
  2076                          	global	??_oo_start_conversion
  2077                          	global	?_oo_start_conversion
  2078                          	psect	text
  2079                          
  2080                          ; *************** function _oo_start_conversion *****************
  2081                          ; Defined at:
  2082                          ;		line 163 in file "./oo.c"
  2083                          ; Parameters:
  2084                          ;		None
  2085                          ; Auto variables:
  2086                          ;		None
  2087                          ; Return value:
  2088                          ;		type: void 
  2089                          ;		size: 0
  2090                          ; Registers used:
  2091                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2092                          ; Tracked objects:
  2093                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2094                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2095                          ;		Unchanged: 
  2096                          ; Data sizes:
  2097                          ;		Autos:    0
  2098                          ;		Params:   0
  2099                          ;		Temp:     0
  2100                          ;		Total:    0
  2101                          ; This function calls:
  2102                          ;		_oo_tx_byte
  2103                          ; This function is called by:
  2104                          ;		_oo_report
  2105                          ; This function uses a non-reentrant model
  2106                          ; 
  2107                          	file	"./oo.c"
  2108                          	line	163
  2109  0022                    	__size_of_oo_start_conversion	equ	__end_of_oo_start_conversion-_oo_start_conversion
  2110                          ;oo.c: 163: void oo_start_conversion(){
  2111                          ;			
  2112  41D8                    _oo_start_conversion:	
  2113                          	opt	disable
  2114                          	line	165
  2115                          ;oo.c: 165: oo_tx_byte(0xCC);
  2116  41D8  50 CC             	mov	a,<((0CCh))
  2117  41DA  70 CF             	and	f, 0xCF   ;select user reg space
  2118  41DC  62 D0 00          	mov	reg[CUR_PP],0
  2119  41DF  53 34             	mov	[0+((?_oo_tx_byte)^0x0)],a
  2120  41E1  71 80             	or	f, 0x80	;select multiple RAM page mode
  2121                          	
  2122  41E3  7C 69E0           	xcall	_oo_tx_byte
  2123                          	
  2124                          	line	168
  2125                          ;oo.c: 168: oo_tx_byte(0x44);
  2126  41E6  50 44             	mov	a,<((044h))
  2127  41E8  70 CF             	and	f, 0xCF   ;select user reg space
  2128  41EA  62 D0 00          	mov	reg[CUR_PP],0
  2129  41ED  53 34             	mov	[0+((?_oo_tx_byte)^0x0)],a
  2130  41EF  71 80             	or	f, 0x80	;select multiple RAM page mode
  2131                          	
  2132  41F1  7C 69E0           	xcall	_oo_tx_byte
  2133                          	
  2134                          	line	170
  2135                          ;oo.c: 170: return;
  2136  41F4  7D 41F7           	xjmp	l39
  2137                          	line	171
  2138                          ;oo.c: 171: }
  2139  41F7                    l39:
  2140                          ;			
  2141  41F7  70 CF             	and	f, 0xCF   ;select user reg space
  2142                          	
  2143  41F9  7F                	ret
  2144                          GLOBAL __end_of_oo_start_conversion
  2145  41FA                    	__end_of_oo_start_conversion:
  2146                          	FNSIZE	_oo_start_conversion,0,0
  2147                          ; =============== function _oo_start_conversion ends ============
  2148                          
  2149                          	signat	_oo_start_conversion,88
  2150                          	global	_oo_wait_for_completion
  2151                          	global	??_oo_wait_for_completion
  2152                          	global	?_oo_wait_for_completion
  2153                          	psect	text
  2154                          
  2155                          ; *************** function _oo_wait_for_completion *****************
  2156                          ; Defined at:
  2157                          ;		line 188 in file "./oo.c"
  2158                          ; Parameters:
  2159                          ;		None
  2160                          ; Auto variables:
  2161                          ;		counter     	       	type: unsigned char 
  2162                          ; Return value:
  2163                          ;		type: unsigned char 
  2164                          ;		size: 1
  2165                          ; Registers used:
  2166                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2167                          ; Tracked objects:
  2168                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2169                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2170                          ;		Unchanged: 
  2171                          ; Data sizes:
  2172                          ;		Autos:    1
  2173                          ;		Params:   0
  2174                          ;		Temp:     0
  2175                          ;		Total:    1
  2176                          ; This function calls:
  2177                          ;		_delay_10ms
  2178                          ;		_oo_conversion_busy
  2179                          ; This function is called by:
  2180                          ;		_oo_report
  2181                          ; This function uses a non-reentrant model
  2182                          ; 
  2183                          	file	"./oo.c"
  2184                          	line	188
  2185  0038                    	__size_of_oo_wait_for_completion	equ	__end_of_oo_wait_for_completion-_oo_wait_for_completion
  2186                          ;oo.c: 188: char oo_wait_for_completion(){
  2187                          ;			
  2188  41FA                    _oo_wait_for_completion:	
  2189                          	opt	disable
  2190                          	line	190
  2191                          ;oo.c: 190: char counter = 0;
  2192  41FA  50 00             	mov	a,<((0))
  2193  41FC  70 CF             	and	f, 0xCF   ;select user reg space
  2194  41FE  62 D0 00          	mov	reg[CUR_PP],0
  2195  4201  53 15             	mov	[0+((oo_wait_for_completion@counter)^0x0)],a
  2196                          	line	192
  2197                          ;oo.c: 192: while (oo_conversion_busy()){
  2198  4203  7D 4221           	xjmp	l45
  2199                          ;			
  2200  4206                    l46:	
  2201                          	line	195
  2202                          ;oo.c: 195: delay_10ms();
  2203  4206  71 80             	or	f, 0x80	;select multiple RAM page mode
  2204                          	
  2205  4208  7C 698D           	xcall	_delay_10ms
  2206                          	
  2207                          	line	196
  2208                          ;oo.c: 196: counter++;
  2209  420B  70 CF             	and	f, 0xCF   ;select user reg space
  2210  420D  62 D0 00          	mov	reg[CUR_PP],0
  2211  4210  51 15             	mov	a,[0+((oo_wait_for_completion@counter)^0x0)]
  2212  4212  01 01             	add	a,<((01h))
  2213  4214  53 15             	mov	[0+((oo_wait_for_completion@counter)^0x0)],a
  2214                          	line	197
  2215                          ;oo.c: 197: if (counter == 100){
  2216  4216  51 15             	mov	a,[0+((oo_wait_for_completion@counter)^0x0)]
  2217  4218  39 64             	cmp	a,(064h)
  2218  421A  B006              	jnz	l45
  2219                          	line	198
  2220                          ;oo.c: 198: return 0;
  2221  421C  50 00             	mov	a,<((0))
  2222  421E  7D 422F           	xjmp	l44
  2223                          	line	200
  2224                          ;			
  2225  4221                    l45:	
  2226                          	line	192
  2227  4221  71 80             	or	f, 0x80	;select multiple RAM page mode
  2228                          	
  2229  4223  7C 69CA           	xcall	_oo_conversion_busy
  2230                          	
  2231  4226  39 00             	cmp	a,(0)
  2232  4228  BFDD              	jnz	l46
  2233                          ;			
  2234  422A                    l47:	
  2235                          	line	202
  2236                          ;oo.c: 199: }
  2237                          ;oo.c: 200: }
  2238                          ;oo.c: 202: return 1;
  2239  422A  50 01             	mov	a,<((01h))
  2240  422C  7D 422F           	xjmp	l44
  2241                          	line	203
  2242                          ;oo.c: 203: }
  2243  422F                    l44:
  2244                          ;			
  2245  422F  70 CF             	and	f, 0xCF   ;select user reg space
  2246                          	
  2247  4231  7F                	ret
  2248                          GLOBAL __end_of_oo_wait_for_completion
  2249  4232                    	__end_of_oo_wait_for_completion:
  2250                          	FNSIZE	_oo_wait_for_completion,1,0
  2251                          ; =============== function _oo_wait_for_completion ends ============
  2252                          
  2253                          	signat	_oo_wait_for_completion,89
  2254                          	global	_OneWire_fFindFirst
  2255                          	global	_oo_print_data
  2256                          	global	??_oo_print_data
  2257                          	global	?_oo_print_data
  2258                          	psect	text
  2259                          
  2260                          ; *************** function _oo_print_data *****************
  2261                          ; Defined at:
  2262                          ;		line 270 in file "./oo.c"
  2263                          ; Parameters:
  2264                          ;		data        	offs:   0	type: struct s_oo_data
  2265                          ; Auto variables:
  2266                          ;		cntr        	       	type: unsigned char 
  2267                          ; Return value:
  2268                          ;		type: void 
  2269                          ;		size: 0
  2270                          ; Registers used:
  2271                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2272                          ; Tracked objects:
  2273                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2274                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2275                          ;		Unchanged: 
  2276                          ; Data sizes:
  2277                          ;		Autos:    1
  2278                          ;		Params:  13
  2279                          ;		Temp:     0
  2280                          ;		Total:   14
  2281                          ; This function calls:
  2282                          ;		_LTRX_CPutString
  2283                          ;		_LTRX_PutSHexByte
  2284                          ;		_LTRX_PutChar
  2285                          ;		_LTRX_PutCRLF
  2286                          ; This function is called by:
  2287                          ;		_oo_report
  2288                          ; This function uses a non-reentrant model
  2289                          ; 
  2290                          	file	"./oo.c"
  2291                          	line	270
  2292  009F                    	__size_of_oo_print_data	equ	__end_of_oo_print_data-_oo_print_data
  2293                          ;oo.c: 270: void oo_print_data(oo_tdata data){
  2294                          ;			
  2295  4232                    _oo_print_data:	
  2296                          	opt	disable
  2297                          	line	274
  2298                          ;oo.c: 272: char cntr;
  2299                          ;oo.c: 274: LTRX_CPutString("OneWire ");
  2300  4232  57 3C             	mov	x,<(STR_12)
  2301  4234  50 7F             	mov	a,>(STR_12)
  2302  4236  71 80             	or	f, 0x80	;select multiple RAM page mode
  2303  4238  70 CF             	and	f, 0xCF   ;select user reg space
  2304                          	
  2305  423A  7C 38B2           	xcall	_LTRX_CPutString
  2306                          	
  2307  423D  38 00             	add	sp,0
  2308                          	line	277
  2309                          ;oo.c: 277: for (cntr=0; cntr<8; cntr++){
  2310  423F  50 00             	mov	a,<((0))
  2311  4241  70 CF             	and	f, 0xCF   ;select user reg space
  2312  4243  62 D0 00          	mov	reg[CUR_PP],0
  2313  4246  53 22             	mov	[0+((oo_print_data@cntr)^0x0)],a
  2314  4248  70 CF             	and	f, 0xCF   ;select user reg space
  2315  424A  62 D0 00          	mov	reg[CUR_PP],0
  2316  424D  51 22             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  2317  424F  39 08             	cmp	a,<((08h))
  2318  4251  C004              	jc	l56
  2319  4253  7D 427F           	xjmp	l57
  2320                          ;			
  2321  4256                    l56:	
  2322                          	line	278
  2323                          ;oo.c: 278: LTRX_PutSHexByte(*(data.id+cntr));
  2324  4256  70 CF             	and	f, 0xCF   ;select user reg space
  2325  4258  62 D0 00          	mov	reg[CUR_PP],0
  2326  425B  58 22             	mov	x,[0+((oo_print_data@cntr)^0x0)]
  2327  425D  62 D3 00          	mov	reg[IDX_PP],0
  2328  4260  52 15             	mov	a,[0+(oo_print_data@data)+x]
  2329  4262  71 80             	or	f, 0x80	;select multiple RAM page mode
  2330                          	
  2331  4264  7C 37F7           	xcall	_LTRX_PutSHexByte
  2332                          	
  2333  4267  38 00             	add	sp,0
  2334                          	line	277
  2335  4269  70 CF             	and	f, 0xCF   ;select user reg space
  2336  426B  62 D0 00          	mov	reg[CUR_PP],0
  2337  426E  51 22             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  2338  4270  01 01             	add	a,<((01h))
  2339  4272  53 22             	mov	[0+((oo_print_data@cntr)^0x0)],a
  2340  4274  70 CF             	and	f, 0xCF   ;select user reg space
  2341  4276  62 D0 00          	mov	reg[CUR_PP],0
  2342  4279  51 22             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  2343  427B  39 08             	cmp	a,<((08h))
  2344  427D  CFD8              	jc	l56
  2345                          ;			
  2346  427F                    l57:	
  2347                          	line	281
  2348                          ;oo.c: 279: }
  2349                          ;oo.c: 281: LTRX_CPutString(" - ");
  2350  427F  57 51             	mov	x,<(STR_13)
  2351  4281  50 7F             	mov	a,>(STR_13)
  2352  4283  71 80             	or	f, 0x80	;select multiple RAM page mode
  2353  4285  70 CF             	and	f, 0xCF   ;select user reg space
  2354                          	
  2355  4287  7C 38B2           	xcall	_LTRX_CPutString
  2356                          	
  2357  428A  38 00             	add	sp,0
  2358                          	line	284
  2359                          ;oo.c: 284: LTRX_PutSHexByte(data.t_msb);
  2360  428C  70 CF             	and	f, 0xCF   ;select user reg space
  2361  428E  62 D0 00          	mov	reg[CUR_PP],0
  2362  4291  51 1D             	mov	a,[0+((0+oo_print_data@data+08h)^0x0)]
  2363  4293  71 80             	or	f, 0x80	;select multiple RAM page mode
  2364                          	
  2365  4295  7C 37F7           	xcall	_LTRX_PutSHexByte
  2366                          	
  2367  4298  38 00             	add	sp,0
  2368                          	line	285
  2369                          ;oo.c: 285: LTRX_PutSHexByte(data.t_lsb);
  2370  429A  70 CF             	and	f, 0xCF   ;select user reg space
  2371  429C  62 D0 00          	mov	reg[CUR_PP],0
  2372  429F  51 1E             	mov	a,[0+((0+oo_print_data@data+09h)^0x0)]
  2373  42A1  71 80             	or	f, 0x80	;select multiple RAM page mode
  2374                          	
  2375  42A3  7C 37F7           	xcall	_LTRX_PutSHexByte
  2376                          	
  2377  42A6  38 00             	add	sp,0
  2378                          	line	287
  2379                          ;oo.c: 287: LTRX_CPutString(" - ");
  2380  42A8  57 51             	mov	x,<(STR_14)
  2381  42AA  50 7F             	mov	a,>(STR_14)
  2382  42AC  71 80             	or	f, 0x80	;select multiple RAM page mode
  2383  42AE  70 CF             	and	f, 0xCF   ;select user reg space
  2384                          	
  2385  42B0  7C 38B2           	xcall	_LTRX_CPutString
  2386                          	
  2387  42B3  38 00             	add	sp,0
  2388                          	line	288
  2389                          ;oo.c: 288: LTRX_PutChar(data.valid+0x30);
  2390  42B5  50 30             	mov	a,<((030h))
  2391  42B7  70 CF             	and	f, 0xCF   ;select user reg space
  2392  42B9  62 D0 00          	mov	reg[CUR_PP],0
  2393  42BC  02 21             	add	a,[0+((0+oo_print_data@data+0Ch)^0x0)]
  2394  42BE  71 80             	or	f, 0x80	;select multiple RAM page mode
  2395                          	
  2396  42C0  7C 3811           	xcall	_LTRX_PutChar
  2397                          	
  2398  42C3  38 00             	add	sp,0
  2399                          	line	290
  2400                          ;oo.c: 290: LTRX_PutCRLF();
  2401  42C5  71 80             	or	f, 0x80	;select multiple RAM page mode
  2402  42C7  70 CF             	and	f, 0xCF   ;select user reg space
  2403                          	
  2404  42C9  7C 38C4           	xcall	_LTRX_PutCRLF
  2405                          	
  2406  42CC  38 00             	add	sp,0
  2407                          	line	293
  2408                          ;oo.c: 293: }
  2409  42CE                    l55:
  2410                          ;			
  2411  42CE  70 CF             	and	f, 0xCF   ;select user reg space
  2412                          	
  2413  42D0  7F                	ret
  2414                          GLOBAL __end_of_oo_print_data
  2415  42D1                    	__end_of_oo_print_data:
  2416                          	FNSIZE	_oo_print_data,1,13
  2417                          ; =============== function _oo_print_data ends ============
  2418                          
  2419                          	signat	_oo_print_data,4216
  2420                          	global	_calc_sth11
  2421                          	global	??_calc_sth11
  2422                          	global	?_calc_sth11
  2423                          	psect	text
  2424                          
  2425                          ; *************** function _calc_sth11 *****************
  2426                          ; Defined at:
  2427                          ;		line 225 in file "./shtxx.c"
  2428                          ; Parameters:
  2429                          ;		p_humidity  	offs:   0	type: PTR float ; Largest target is 4
  2430                          ;		 -> s_do_measure@humi_val.f(4), 
  2431                          ;		p_temperatur	offs:   2	type: PTR float ; Largest target is 4
  2432                          ;		 -> s_do_measure@temp_val.f(4), 
  2433                          ; Auto variables:
  2434                          ;		rh_true     	       	type: float 
  2435                          ;		rh          	       	type: float 
  2436                          ;		t_C         	       	type: float 
  2437                          ;		t           	       	type: float 
  2438                          ;		rh_lin      	       	type: float 
  2439                          ; Return value:
  2440                          ;		type: void 
  2441                          ;		size: 0
  2442                          ; Registers used:
  2443                          ;		a, x, CUR_PP, mret
  2444                          ; Tracked objects:
  2445                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2446                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2447                          ;		Unchanged: 
  2448                          ; Data sizes:
  2449                          ;		Autos:   32
  2450                          ;		Params:   4
  2451                          ;		Temp:     1
  2452                          ;		Total:   37
  2453                          ; This function calls:
  2454                          ;		___flmul
  2455                          ;		___fladd
  2456                          ;		___flge
  2457                          ; This function is called by:
  2458                          ;		_s_do_measure
  2459                          ; This function uses a non-reentrant model
  2460                          ; 
  2461                          	file	"./shtxx.c"
  2462                          	line	225
  2463  0366                    	__size_of_calc_sth11	equ	__end_of_calc_sth11-_calc_sth11
  2464                          ;shtxx.c: 218: void calc_sth11(float *p_humidity ,float *p_temperature)
  2465                          ;shtxx.c: 225: { const float C1=-4.0;
  2466                          ;			
  2467  42D1                    _calc_sth11:	
  2468                          	opt	disable
  2469                          	line	231
  2470                          ;shtxx.c: 226: const float C2=+0.0405;
  2471                          ;shtxx.c: 227: const float C3=-0.0000028;
  2472                          ;shtxx.c: 228: const float T1=+0.01;
  2473                          ;shtxx.c: 229: const float T2=+0.00008;
  2474                          ;shtxx.c: 231: float rh=*p_humidity;
  2475  42D1  70 CF             	and	f, 0xCF   ;select user reg space
  2476  42D3  62 D0 00          	mov	reg[CUR_PP],0
  2477  42D6  51 15             	mov	a,[0+((calc_sth11@p_humidity)^0x0)]
  2478  42D8  58 16             	mov	x,[1+((calc_sth11@p_humidity)^0x0)]
  2479  42DA  60 D3             	mov	reg[0xd3],a
  2480  42DC  52 00             	mov	a,[0+x]
  2481  42DE  53 1D             	mov	[0+((calc_sth11@rh)^0x0)],a
  2482  42E0  52 01             	mov	a,[1+x]
  2483  42E2  53 1E             	mov	[1+((calc_sth11@rh)^0x0)],a
  2484  42E4  52 02             	mov	a,[2+x]
  2485  42E6  53 1F             	mov	[2+((calc_sth11@rh)^0x0)],a
  2486  42E8  52 03             	mov	a,[3+x]
  2487  42EA  53 20             	mov	[3+((calc_sth11@rh)^0x0)],a
  2488                          	line	232
  2489                          ;shtxx.c: 232: float t=*p_temperature;
  2490  42EC  51 17             	mov	a,[0+((calc_sth11@p_temperature)^0x0)]
  2491  42EE  58 18             	mov	x,[1+((calc_sth11@p_temperature)^0x0)]
  2492  42F0  60 D3             	mov	reg[0xd3],a
  2493  42F2  52 00             	mov	a,[0+x]
  2494  42F4  53 29             	mov	[0+((calc_sth11@t)^0x0)],a
  2495  42F6  52 01             	mov	a,[1+x]
  2496  42F8  53 2A             	mov	[1+((calc_sth11@t)^0x0)],a
  2497  42FA  52 02             	mov	a,[2+x]
  2498  42FC  53 2B             	mov	[2+((calc_sth11@t)^0x0)],a
  2499  42FE  52 03             	mov	a,[3+x]
  2500  4300  53 2C             	mov	[3+((calc_sth11@t)^0x0)],a
  2501                          	line	237
  2502                          ;shtxx.c: 233: float rh_lin;
  2503                          ;shtxx.c: 234: float rh_true;
  2504                          ;shtxx.c: 235: float t_C;
  2505                          ;shtxx.c: 237: t_C=t*0.01 - 40;
  2506  4302  70 CF             	and	f, 0xCF   ;select user reg space
  2507  4304  62 D0 00          	mov	reg[CUR_PP],0
  2508  4307  51 29             	mov	a,[0+((calc_sth11@t)^0x0)]
  2509  4309  53 5E             	mov	[0+((?___flmul)^0x0)],a
  2510  430B  51 2A             	mov	a,[1+((calc_sth11@t)^0x0)]
  2511  430D  53 5F             	mov	[1+((?___flmul)^0x0)],a
  2512  430F  51 2B             	mov	a,[2+((calc_sth11@t)^0x0)]
  2513  4311  53 60             	mov	[2+((?___flmul)^0x0)],a
  2514  4313  51 2C             	mov	a,[3+((calc_sth11@t)^0x0)]
  2515  4315  53 61             	mov	[3+((?___flmul)^0x0)],a
  2516  4317  50 3C             	mov	a,<(0x3c23d70a>>24)
  2517  4319  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2518  431B  50 23             	mov	a,<(0x3c23d70a>>16)
  2519  431D  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2520  431F  50 D7             	mov	a,<(0x3c23d70a>>8)
  2521  4321  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2522  4323  50 0A             	mov	a,<(0x3c23d70a)
  2523  4325  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2524  4327  71 80             	or	f, 0x80	;select multiple RAM page mode
  2525                          	
  2526  4329  7C 7201           	xcall	___flmul
  2527                          	
  2528  432C  70 CF             	and	f, 0xCF   ;select user reg space
  2529  432E  62 D0 00          	mov	reg[CUR_PP],0
  2530  4331  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  2531  4333  53 4D             	mov	[0+((?___fladd)^0x0)],a
  2532  4335  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  2533  4337  53 4E             	mov	[1+((?___fladd)^0x0)],a
  2534  4339  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  2535  433B  53 4F             	mov	[2+((?___fladd)^0x0)],a
  2536  433D  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  2537  433F  53 50             	mov	[3+((?___fladd)^0x0)],a
  2538  4341  50 C2             	mov	a,<(0xc2200000>>24)
  2539  4343  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2540  4345  50 20             	mov	a,<(0xc2200000>>16)
  2541  4347  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2542  4349  50 00             	mov	a,<(0xc2200000>>8)
  2543  434B  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2544  434D  50 00             	mov	a,<(0xc2200000)
  2545  434F  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2546  4351  71 80             	or	f, 0x80	;select multiple RAM page mode
  2547                          	
  2548  4353  7C 7416           	xcall	___fladd
  2549                          	
  2550  4356  70 CF             	and	f, 0xCF   ;select user reg space
  2551  4358  62 D0 00          	mov	reg[CUR_PP],0
  2552  435B  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  2553  435D  53 21             	mov	[0+((calc_sth11@t_C)^0x0)],a
  2554  435F  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  2555  4361  53 22             	mov	[1+((calc_sth11@t_C)^0x0)],a
  2556  4363  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  2557  4365  53 23             	mov	[2+((calc_sth11@t_C)^0x0)],a
  2558  4367  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  2559  4369  53 24             	mov	[3+((calc_sth11@t_C)^0x0)],a
  2560                          	line	238
  2561                          ;shtxx.c: 238: rh_lin=C3*rh*rh + C2*rh + C1;
  2562  436B  50 7C             	mov	a,>F817
  2563  436D  57 C8             	mov	x,<F817
  2564  436F  08                	push	a
  2565  4370  28                	romx
  2566  4371  70 CF             	and	f, 0xCF   ;select user reg space
  2567  4373  62 D0 00          	mov	reg[CUR_PP],0
  2568  4376  53 5E             	mov	[0+((?___flmul)^0x0)],a
  2569  4378  18                	pop	a
  2570  4379  75                	inc	x
  2571  437A  08                	push	a
  2572  437B  28                	romx
  2573  437C  53 5F             	mov	[1+((?___flmul)^0x0)],a
  2574  437E  18                	pop	a
  2575  437F  75                	inc	x
  2576  4380  08                	push	a
  2577  4381  28                	romx
  2578  4382  53 60             	mov	[2+((?___flmul)^0x0)],a
  2579  4384  18                	pop	a
  2580  4385  75                	inc	x
  2581  4386  28                	romx
  2582  4387  53 61             	mov	[3+((?___flmul)^0x0)],a
  2583  4389  51 1D             	mov	a,[0+((calc_sth11@rh)^0x0)]
  2584  438B  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2585  438D  51 1E             	mov	a,[1+((calc_sth11@rh)^0x0)]
  2586  438F  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2587  4391  51 1F             	mov	a,[2+((calc_sth11@rh)^0x0)]
  2588  4393  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2589  4395  51 20             	mov	a,[3+((calc_sth11@rh)^0x0)]
  2590  4397  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2591  4399  71 80             	or	f, 0x80	;select multiple RAM page mode
  2592                          	
  2593  439B  7C 7201           	xcall	___flmul
  2594                          	
  2595  439E  70 CF             	and	f, 0xCF   ;select user reg space
  2596  43A0  62 D0 00          	mov	reg[CUR_PP],0
  2597  43A3  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  2598  43A5  53 31             	mov	[0+((_calc_sth11$3252)^0x0)],a
  2599  43A7  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  2600  43A9  53 32             	mov	[1+((_calc_sth11$3252)^0x0)],a
  2601  43AB  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  2602  43AD  53 33             	mov	[2+((_calc_sth11$3252)^0x0)],a
  2603  43AF  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  2604  43B1  53 34             	mov	[3+((_calc_sth11$3252)^0x0)],a
  2605  43B3  70 CF             	and	f, 0xCF   ;select user reg space
  2606  43B5  62 D0 00          	mov	reg[CUR_PP],0
  2607  43B8  51 1D             	mov	a,[0+((calc_sth11@rh)^0x0)]
  2608  43BA  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2609  43BC  51 1E             	mov	a,[1+((calc_sth11@rh)^0x0)]
  2610  43BE  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2611  43C0  51 1F             	mov	a,[2+((calc_sth11@rh)^0x0)]
  2612  43C2  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2613  43C4  51 20             	mov	a,[3+((calc_sth11@rh)^0x0)]
  2614  43C6  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2615  43C8  51 31             	mov	a,[0+((_calc_sth11$3252)^0x0)]
  2616  43CA  53 5E             	mov	[0+((?___flmul)^0x0)],a
  2617  43CC  51 32             	mov	a,[1+((_calc_sth11$3252)^0x0)]
  2618  43CE  53 5F             	mov	[1+((?___flmul)^0x0)],a
  2619  43D0  51 33             	mov	a,[2+((_calc_sth11$3252)^0x0)]
  2620  43D2  53 60             	mov	[2+((?___flmul)^0x0)],a
  2621  43D4  51 34             	mov	a,[3+((_calc_sth11$3252)^0x0)]
  2622  43D6  53 61             	mov	[3+((?___flmul)^0x0)],a
  2623  43D8  71 80             	or	f, 0x80	;select multiple RAM page mode
  2624                          	
  2625  43DA  7C 7201           	xcall	___flmul
  2626                          	
  2627  43DD  70 CF             	and	f, 0xCF   ;select user reg space
  2628  43DF  62 D0 00          	mov	reg[CUR_PP],0
  2629  43E2  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  2630  43E4  53 35             	mov	[0+((_calc_sth11$3253)^0x0)],a
  2631  43E6  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  2632  43E8  53 36             	mov	[1+((_calc_sth11$3253)^0x0)],a
  2633  43EA  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  2634  43EC  53 37             	mov	[2+((_calc_sth11$3253)^0x0)],a
  2635  43EE  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  2636  43F0  53 38             	mov	[3+((_calc_sth11$3253)^0x0)],a
  2637  43F2  70 CF             	and	f, 0xCF   ;select user reg space
  2638  43F4  62 D0 00          	mov	reg[CUR_PP],0
  2639  43F7  51 1D             	mov	a,[0+((calc_sth11@rh)^0x0)]
  2640  43F9  53 5E             	mov	[0+((?___flmul)^0x0)],a
  2641  43FB  51 1E             	mov	a,[1+((calc_sth11@rh)^0x0)]
  2642  43FD  53 5F             	mov	[1+((?___flmul)^0x0)],a
  2643  43FF  51 1F             	mov	a,[2+((calc_sth11@rh)^0x0)]
  2644  4401  53 60             	mov	[2+((?___flmul)^0x0)],a
  2645  4403  51 20             	mov	a,[3+((calc_sth11@rh)^0x0)]
  2646  4405  53 61             	mov	[3+((?___flmul)^0x0)],a
  2647  4407  50 3D             	mov	a,<(0x3d25e354>>24)
  2648  4409  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2649  440B  50 25             	mov	a,<(0x3d25e354>>16)
  2650  440D  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2651  440F  50 E3             	mov	a,<(0x3d25e354>>8)
  2652  4411  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2653  4413  50 54             	mov	a,<(0x3d25e354)
  2654  4415  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2655  4417  71 80             	or	f, 0x80	;select multiple RAM page mode
  2656                          	
  2657  4419  7C 7201           	xcall	___flmul
  2658                          	
  2659  441C  70 CF             	and	f, 0xCF   ;select user reg space
  2660  441E  62 D0 00          	mov	reg[CUR_PP],0
  2661  4421  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  2662  4423  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2663  4425  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  2664  4427  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2665  4429  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  2666  442B  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2667  442D  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  2668  442F  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2669  4431  51 35             	mov	a,[0+((_calc_sth11$3253)^0x0)]
  2670  4433  53 4D             	mov	[0+((?___fladd)^0x0)],a
  2671  4435  51 36             	mov	a,[1+((_calc_sth11$3253)^0x0)]
  2672  4437  53 4E             	mov	[1+((?___fladd)^0x0)],a
  2673  4439  51 37             	mov	a,[2+((_calc_sth11$3253)^0x0)]
  2674  443B  53 4F             	mov	[2+((?___fladd)^0x0)],a
  2675  443D  51 38             	mov	a,[3+((_calc_sth11$3253)^0x0)]
  2676  443F  53 50             	mov	[3+((?___fladd)^0x0)],a
  2677  4441  71 80             	or	f, 0x80	;select multiple RAM page mode
  2678                          	
  2679  4443  7C 7416           	xcall	___fladd
  2680                          	
  2681  4446  70 CF             	and	f, 0xCF   ;select user reg space
  2682  4448  62 D0 00          	mov	reg[CUR_PP],0
  2683  444B  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  2684  444D  53 4D             	mov	[0+((?___fladd)^0x0)],a
  2685  444F  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  2686  4451  53 4E             	mov	[1+((?___fladd)^0x0)],a
  2687  4453  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  2688  4455  53 4F             	mov	[2+((?___fladd)^0x0)],a
  2689  4457  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  2690  4459  53 50             	mov	[3+((?___fladd)^0x0)],a
  2691  445B  50 C0             	mov	a,<(0xc0800000>>24)
  2692  445D  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2693  445F  50 80             	mov	a,<(0xc0800000>>16)
  2694  4461  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2695  4463  50 00             	mov	a,<(0xc0800000>>8)
  2696  4465  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2697  4467  50 00             	mov	a,<(0xc0800000)
  2698  4469  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2699  446B  71 80             	or	f, 0x80	;select multiple RAM page mode
  2700                          	
  2701  446D  7C 7416           	xcall	___fladd
  2702                          	
  2703  4470  70 CF             	and	f, 0xCF   ;select user reg space
  2704  4472  62 D0 00          	mov	reg[CUR_PP],0
  2705  4475  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  2706  4477  53 25             	mov	[0+((calc_sth11@rh_lin)^0x0)],a
  2707  4479  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  2708  447B  53 26             	mov	[1+((calc_sth11@rh_lin)^0x0)],a
  2709  447D  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  2710  447F  53 27             	mov	[2+((calc_sth11@rh_lin)^0x0)],a
  2711  4481  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  2712  4483  53 28             	mov	[3+((calc_sth11@rh_lin)^0x0)],a
  2713                          	line	239
  2714                          ;shtxx.c: 239: rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;
  2715  4485  70 CF             	and	f, 0xCF   ;select user reg space
  2716  4487  62 D0 00          	mov	reg[CUR_PP],0
  2717  448A  51 21             	mov	a,[0+((calc_sth11@t_C)^0x0)]
  2718  448C  53 4D             	mov	[0+((?___fladd)^0x0)],a
  2719  448E  51 22             	mov	a,[1+((calc_sth11@t_C)^0x0)]
  2720  4490  53 4E             	mov	[1+((?___fladd)^0x0)],a
  2721  4492  51 23             	mov	a,[2+((calc_sth11@t_C)^0x0)]
  2722  4494  53 4F             	mov	[2+((?___fladd)^0x0)],a
  2723  4496  51 24             	mov	a,[3+((calc_sth11@t_C)^0x0)]
  2724  4498  53 50             	mov	[3+((?___fladd)^0x0)],a
  2725  449A  50 C1             	mov	a,<(0xc1c80000>>24)
  2726  449C  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2727  449E  50 C8             	mov	a,<(0xc1c80000>>16)
  2728  44A0  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2729  44A2  50 00             	mov	a,<(0xc1c80000>>8)
  2730  44A4  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2731  44A6  50 00             	mov	a,<(0xc1c80000)
  2732  44A8  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2733  44AA  71 80             	or	f, 0x80	;select multiple RAM page mode
  2734                          	
  2735  44AC  7C 7416           	xcall	___fladd
  2736                          	
  2737  44AF  70 CF             	and	f, 0xCF   ;select user reg space
  2738  44B1  62 D0 00          	mov	reg[CUR_PP],0
  2739  44B4  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  2740  44B6  53 2D             	mov	[0+((_calc_sth11$3259)^0x0)],a
  2741  44B8  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  2742  44BA  53 2E             	mov	[1+((_calc_sth11$3259)^0x0)],a
  2743  44BC  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  2744  44BE  53 2F             	mov	[2+((_calc_sth11$3259)^0x0)],a
  2745  44C0  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  2746  44C2  53 30             	mov	[3+((_calc_sth11$3259)^0x0)],a
  2747  44C4  70 CF             	and	f, 0xCF   ;select user reg space
  2748  44C6  62 D0 00          	mov	reg[CUR_PP],0
  2749  44C9  51 1D             	mov	a,[0+((calc_sth11@rh)^0x0)]
  2750  44CB  53 5E             	mov	[0+((?___flmul)^0x0)],a
  2751  44CD  51 1E             	mov	a,[1+((calc_sth11@rh)^0x0)]
  2752  44CF  53 5F             	mov	[1+((?___flmul)^0x0)],a
  2753  44D1  51 1F             	mov	a,[2+((calc_sth11@rh)^0x0)]
  2754  44D3  53 60             	mov	[2+((?___flmul)^0x0)],a
  2755  44D5  51 20             	mov	a,[3+((calc_sth11@rh)^0x0)]
  2756  44D7  53 61             	mov	[3+((?___flmul)^0x0)],a
  2757  44D9  50 38             	mov	a,<(0x38a7c5ac>>24)
  2758  44DB  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2759  44DD  50 A7             	mov	a,<(0x38a7c5ac>>16)
  2760  44DF  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2761  44E1  50 C5             	mov	a,<(0x38a7c5ac>>8)
  2762  44E3  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2763  44E5  50 AC             	mov	a,<(0x38a7c5ac)
  2764  44E7  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2765  44E9  71 80             	or	f, 0x80	;select multiple RAM page mode
  2766                          	
  2767  44EB  7C 7201           	xcall	___flmul
  2768                          	
  2769  44EE  70 CF             	and	f, 0xCF   ;select user reg space
  2770  44F0  62 D0 00          	mov	reg[CUR_PP],0
  2771  44F3  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  2772  44F5  53 4D             	mov	[0+((?___fladd)^0x0)],a
  2773  44F7  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  2774  44F9  53 4E             	mov	[1+((?___fladd)^0x0)],a
  2775  44FB  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  2776  44FD  53 4F             	mov	[2+((?___fladd)^0x0)],a
  2777  44FF  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  2778  4501  53 50             	mov	[3+((?___fladd)^0x0)],a
  2779  4503  50 3C             	mov	a,<(0x3c23d70a>>24)
  2780  4505  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2781  4507  50 23             	mov	a,<(0x3c23d70a>>16)
  2782  4509  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2783  450B  50 D7             	mov	a,<(0x3c23d70a>>8)
  2784  450D  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2785  450F  50 0A             	mov	a,<(0x3c23d70a)
  2786  4511  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2787  4513  71 80             	or	f, 0x80	;select multiple RAM page mode
  2788                          	
  2789  4515  7C 7416           	xcall	___fladd
  2790                          	
  2791  4518  70 CF             	and	f, 0xCF   ;select user reg space
  2792  451A  62 D0 00          	mov	reg[CUR_PP],0
  2793  451D  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  2794  451F  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2795  4521  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  2796  4523  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2797  4525  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  2798  4527  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2799  4529  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  2800  452B  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2801  452D  51 2D             	mov	a,[0+((_calc_sth11$3259)^0x0)]
  2802  452F  53 5E             	mov	[0+((?___flmul)^0x0)],a
  2803  4531  51 2E             	mov	a,[1+((_calc_sth11$3259)^0x0)]
  2804  4533  53 5F             	mov	[1+((?___flmul)^0x0)],a
  2805  4535  51 2F             	mov	a,[2+((_calc_sth11$3259)^0x0)]
  2806  4537  53 60             	mov	[2+((?___flmul)^0x0)],a
  2807  4539  51 30             	mov	a,[3+((_calc_sth11$3259)^0x0)]
  2808  453B  53 61             	mov	[3+((?___flmul)^0x0)],a
  2809  453D  71 80             	or	f, 0x80	;select multiple RAM page mode
  2810                          	
  2811  453F  7C 7201           	xcall	___flmul
  2812                          	
  2813  4542  70 CF             	and	f, 0xCF   ;select user reg space
  2814  4544  62 D0 00          	mov	reg[CUR_PP],0
  2815  4547  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  2816  4549  53 4D             	mov	[0+((?___fladd)^0x0)],a
  2817  454B  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  2818  454D  53 4E             	mov	[1+((?___fladd)^0x0)],a
  2819  454F  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  2820  4551  53 4F             	mov	[2+((?___fladd)^0x0)],a
  2821  4553  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  2822  4555  53 50             	mov	[3+((?___fladd)^0x0)],a
  2823  4557  51 25             	mov	a,[0+((calc_sth11@rh_lin)^0x0)]
  2824  4559  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2825  455B  51 26             	mov	a,[1+((calc_sth11@rh_lin)^0x0)]
  2826  455D  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2827  455F  51 27             	mov	a,[2+((calc_sth11@rh_lin)^0x0)]
  2828  4561  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2829  4563  51 28             	mov	a,[3+((calc_sth11@rh_lin)^0x0)]
  2830  4565  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2831  4567  71 80             	or	f, 0x80	;select multiple RAM page mode
  2832                          	
  2833  4569  7C 7416           	xcall	___fladd
  2834                          	
  2835  456C  70 CF             	and	f, 0xCF   ;select user reg space
  2836  456E  62 D0 00          	mov	reg[CUR_PP],0
  2837  4571  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  2838  4573  53 19             	mov	[0+((calc_sth11@rh_true)^0x0)],a
  2839  4575  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  2840  4577  53 1A             	mov	[1+((calc_sth11@rh_true)^0x0)],a
  2841  4579  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  2842  457B  53 1B             	mov	[2+((calc_sth11@rh_true)^0x0)],a
  2843  457D  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  2844  457F  53 1C             	mov	[3+((calc_sth11@rh_true)^0x0)],a
  2845                          	line	240
  2846                          ;shtxx.c: 240: if(rh_true>100)rh_true=100;
  2847  4581  50 42             	mov	a,<(0x42c80000>>24)
  2848  4583  70 CF             	and	f, 0xCF   ;select user reg space
  2849  4585  62 D0 00          	mov	reg[CUR_PP],0
  2850  4588  53 41             	mov	[0+((?___flge)^0x0)],a
  2851  458A  50 C8             	mov	a,<(0x42c80000>>16)
  2852  458C  53 42             	mov	[1+((?___flge)^0x0)],a
  2853  458E  50 00             	mov	a,<(0x42c80000>>8)
  2854  4590  53 43             	mov	[2+((?___flge)^0x0)],a
  2855  4592  50 00             	mov	a,<(0x42c80000)
  2856  4594  53 44             	mov	[3+((?___flge)^0x0)],a
  2857  4596  51 19             	mov	a,[0+((calc_sth11@rh_true)^0x0)]
  2858  4598  53 45             	mov	[0+((0+?___flge+04h)^0x0)],a
  2859  459A  51 1A             	mov	a,[1+((calc_sth11@rh_true)^0x0)]
  2860  459C  53 46             	mov	[1+((0+?___flge+04h)^0x0)],a
  2861  459E  51 1B             	mov	a,[2+((calc_sth11@rh_true)^0x0)]
  2862  45A0  53 47             	mov	[2+((0+?___flge+04h)^0x0)],a
  2863  45A2  51 1C             	mov	a,[3+((calc_sth11@rh_true)^0x0)]
  2864  45A4  53 48             	mov	[3+((0+?___flge+04h)^0x0)],a
  2865  45A6  71 80             	or	f, 0x80	;select multiple RAM page mode
  2866                          	
  2867  45A8  7C 6F80           	xcall	___flge
  2868                          	
  2869  45AB  C016              	jc	l122
  2870  45AD  50 42             	mov	a,<(0x42c80000>>24)
  2871  45AF  70 CF             	and	f, 0xCF   ;select user reg space
  2872  45B1  62 D0 00          	mov	reg[CUR_PP],0
  2873  45B4  53 19             	mov	[0+((calc_sth11@rh_true)^0x0)],a
  2874  45B6  50 C8             	mov	a,<(0x42c80000>>16)
  2875  45B8  53 1A             	mov	[1+((calc_sth11@rh_true)^0x0)],a
  2876  45BA  50 00             	mov	a,<(0x42c80000>>8)
  2877  45BC  53 1B             	mov	[2+((calc_sth11@rh_true)^0x0)],a
  2878  45BE  50 00             	mov	a,<(0x42c80000)
  2879  45C0  53 1C             	mov	[3+((calc_sth11@rh_true)^0x0)],a
  2880                          ;			
  2881  45C2                    l122:	
  2882                          	line	241
  2883                          ;shtxx.c: 241: if(rh_true<0.1)rh_true=0.1;
  2884  45C2  70 CF             	and	f, 0xCF   ;select user reg space
  2885  45C4  62 D0 00          	mov	reg[CUR_PP],0
  2886  45C7  51 19             	mov	a,[0+((calc_sth11@rh_true)^0x0)]
  2887  45C9  53 41             	mov	[0+((?___flge)^0x0)],a
  2888  45CB  51 1A             	mov	a,[1+((calc_sth11@rh_true)^0x0)]
  2889  45CD  53 42             	mov	[1+((?___flge)^0x0)],a
  2890  45CF  51 1B             	mov	a,[2+((calc_sth11@rh_true)^0x0)]
  2891  45D1  53 43             	mov	[2+((?___flge)^0x0)],a
  2892  45D3  51 1C             	mov	a,[3+((calc_sth11@rh_true)^0x0)]
  2893  45D5  53 44             	mov	[3+((?___flge)^0x0)],a
  2894  45D7  50 3D             	mov	a,<(0x3dcccccd>>24)
  2895  45D9  53 45             	mov	[0+((0+?___flge+04h)^0x0)],a
  2896  45DB  50 CC             	mov	a,<(0x3dcccccd>>16)
  2897  45DD  53 46             	mov	[1+((0+?___flge+04h)^0x0)],a
  2898  45DF  50 CC             	mov	a,<(0x3dcccccd>>8)
  2899  45E1  53 47             	mov	[2+((0+?___flge+04h)^0x0)],a
  2900  45E3  50 CD             	mov	a,<(0x3dcccccd)
  2901  45E5  53 48             	mov	[3+((0+?___flge+04h)^0x0)],a
  2902  45E7  71 80             	or	f, 0x80	;select multiple RAM page mode
  2903                          	
  2904  45E9  7C 6F80           	xcall	___flge
  2905                          	
  2906  45EC  C016              	jc	l123
  2907  45EE  50 3D             	mov	a,<(0x3dcccccd>>24)
  2908  45F0  70 CF             	and	f, 0xCF   ;select user reg space
  2909  45F2  62 D0 00          	mov	reg[CUR_PP],0
  2910  45F5  53 19             	mov	[0+((calc_sth11@rh_true)^0x0)],a
  2911  45F7  50 CC             	mov	a,<(0x3dcccccd>>16)
  2912  45F9  53 1A             	mov	[1+((calc_sth11@rh_true)^0x0)],a
  2913  45FB  50 CC             	mov	a,<(0x3dcccccd>>8)
  2914  45FD  53 1B             	mov	[2+((calc_sth11@rh_true)^0x0)],a
  2915  45FF  50 CD             	mov	a,<(0x3dcccccd)
  2916  4601  53 1C             	mov	[3+((calc_sth11@rh_true)^0x0)],a
  2917                          ;			
  2918  4603                    l123:	
  2919                          	line	243
  2920                          ;shtxx.c: 243: *p_temperature=t_C;
  2921  4603  70 CF             	and	f, 0xCF   ;select user reg space
  2922  4605  62 D0 00          	mov	reg[CUR_PP],0
  2923  4608  51 17             	mov	a,[0+((calc_sth11@p_temperature)^0x0)]
  2924  460A  58 18             	mov	x,[1+((calc_sth11@p_temperature)^0x0)]
  2925  460C  60 D3             	mov	reg[0xd3],a
  2926  460E  51 21             	mov	a,[0+((calc_sth11@t_C)^0x0)]
  2927  4610  54 00             	mov	[0+x],a
  2928  4612  51 22             	mov	a,[1+((calc_sth11@t_C)^0x0)]
  2929  4614  54 01             	mov	[1+x],a
  2930  4616  51 23             	mov	a,[2+((calc_sth11@t_C)^0x0)]
  2931  4618  54 02             	mov	[2+x],a
  2932  461A  51 24             	mov	a,[3+((calc_sth11@t_C)^0x0)]
  2933  461C  54 03             	mov	[3+x],a
  2934                          	line	244
  2935                          ;shtxx.c: 244: *p_humidity=rh_true;
  2936  461E  51 15             	mov	a,[0+((calc_sth11@p_humidity)^0x0)]
  2937  4620  58 16             	mov	x,[1+((calc_sth11@p_humidity)^0x0)]
  2938  4622  60 D3             	mov	reg[0xd3],a
  2939  4624  51 19             	mov	a,[0+((calc_sth11@rh_true)^0x0)]
  2940  4626  54 00             	mov	[0+x],a
  2941  4628  51 1A             	mov	a,[1+((calc_sth11@rh_true)^0x0)]
  2942  462A  54 01             	mov	[1+x],a
  2943  462C  51 1B             	mov	a,[2+((calc_sth11@rh_true)^0x0)]
  2944  462E  54 02             	mov	[2+x],a
  2945  4630  51 1C             	mov	a,[3+((calc_sth11@rh_true)^0x0)]
  2946  4632  54 03             	mov	[3+x],a
  2947                          	line	245
  2948                          ;shtxx.c: 245: }
  2949  4634                    l121:
  2950                          ;			
  2951  4634  70 CF             	and	f, 0xCF   ;select user reg space
  2952                          	
  2953  4636  7F                	ret
  2954                          GLOBAL __end_of_calc_sth11
  2955  4637                    	__end_of_calc_sth11:
  2956                          	FNSIZE	_calc_sth11,33,4
  2957                          ; =============== function _calc_sth11 ends ============
  2958                          
  2959                          	signat	_calc_sth11,8312
  2960                          	global	_calc_dewpoint
  2961                          	global	??_calc_dewpoint
  2962                          	global	?_calc_dewpoint
  2963                          	psect	text
  2964                          
  2965                          ; *************** function _calc_dewpoint *****************
  2966                          ; Defined at:
  2967                          ;		line 253 in file "./shtxx.c"
  2968                          ; Parameters:
  2969                          ;		h           	offs:   0	type: float 
  2970                          ;		t           	offs:   4	type: float 
  2971                          ; Auto variables:
  2972                          ;		logEx       	       	type: float 
  2973                          ;		dew_point   	       	type: float 
  2974                          ; Return value:
  2975                          ;		type: float 
  2976                          ;		size: 4
  2977                          ; Registers used:
  2978                          ;		a, x, CUR_PP, mret
  2979                          ; Tracked objects:
  2980                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2981                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2982                          ;		Unchanged: 
  2983                          ; Data sizes:
  2984                          ;		Autos:   24
  2985                          ;		Params:   8
  2986                          ;		Temp:     0
  2987                          ;		Total:   32
  2988                          ; This function calls:
  2989                          ;		___flmul
  2990                          ;		_log10
  2991                          ;		___fladd
  2992                          ;		___fldiv
  2993                          ;		___flsub
  2994                          ; This function is called by:
  2995                          ;		_s_do_measure
  2996                          ; This function uses a non-reentrant model
  2997                          ; 
  2998                          	file	"./shtxx.c"
  2999                          	line	253
  3000  0214                    	__size_of_calc_dewpoint	equ	__end_of_calc_dewpoint-_calc_dewpoint
  3001                          ;shtxx.c: 248: float calc_dewpoint(float h,float t)
  3002                          ;shtxx.c: 253: { float logEx,dew_point;
  3003                          ;			
  3004  4637                    _calc_dewpoint:	
  3005                          	opt	disable
  3006                          	line	254
  3007                          ;shtxx.c: 254: logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
  3008  4637  70 CF             	and	f, 0xCF   ;select user reg space
  3009  4639  62 D0 00          	mov	reg[CUR_PP],0
  3010  463C  51 19             	mov	a,[0+((calc_dewpoint@t)^0x0)]
  3011  463E  53 5E             	mov	[0+((?___flmul)^0x0)],a
  3012  4640  51 1A             	mov	a,[1+((calc_dewpoint@t)^0x0)]
  3013  4642  53 5F             	mov	[1+((?___flmul)^0x0)],a
  3014  4644  51 1B             	mov	a,[2+((calc_dewpoint@t)^0x0)]
  3015  4646  53 60             	mov	[2+((?___flmul)^0x0)],a
  3016  4648  51 1C             	mov	a,[3+((calc_dewpoint@t)^0x0)]
  3017  464A  53 61             	mov	[3+((?___flmul)^0x0)],a
  3018  464C  50 40             	mov	a,<(0x40f00000>>24)
  3019  464E  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  3020  4650  50 F0             	mov	a,<(0x40f00000>>16)
  3021  4652  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  3022  4654  50 00             	mov	a,<(0x40f00000>>8)
  3023  4656  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  3024  4658  50 00             	mov	a,<(0x40f00000)
  3025  465A  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  3026  465C  71 80             	or	f, 0x80	;select multiple RAM page mode
  3027                          	
  3028  465E  7C 7201           	xcall	___flmul
  3029                          	
  3030  4661  70 CF             	and	f, 0xCF   ;select user reg space
  3031  4663  62 D0 00          	mov	reg[CUR_PP],0
  3032  4666  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  3033  4668  53 31             	mov	[0+((_calc_dewpoint$3267)^0x0)],a
  3034  466A  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  3035  466C  53 32             	mov	[1+((_calc_dewpoint$3267)^0x0)],a
  3036  466E  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  3037  4670  53 33             	mov	[2+((_calc_dewpoint$3267)^0x0)],a
  3038  4672  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  3039  4674  53 34             	mov	[3+((_calc_dewpoint$3267)^0x0)],a
  3040  4676  51 15             	mov	a,[0+((calc_dewpoint@h)^0x0)]
  3041  4678  53 35             	mov	[0+((?_log10)^0x0)],a
  3042  467A  51 16             	mov	a,[1+((calc_dewpoint@h)^0x0)]
  3043  467C  53 36             	mov	[1+((?_log10)^0x0)],a
  3044  467E  51 17             	mov	a,[2+((calc_dewpoint@h)^0x0)]
  3045  4680  53 37             	mov	[2+((?_log10)^0x0)],a
  3046  4682  51 18             	mov	a,[3+((calc_dewpoint@h)^0x0)]
  3047  4684  53 38             	mov	[3+((?_log10)^0x0)],a
  3048  4686  71 80             	or	f, 0x80	;select multiple RAM page mode
  3049                          	
  3050  4688  7C 5854           	xcall	_log10
  3051                          	
  3052  468B  70 CF             	and	f, 0xCF   ;select user reg space
  3053  468D  62 D0 00          	mov	reg[CUR_PP],0
  3054  4690  51 35             	mov	a,[0+((0+?_log10)^0x0)]
  3055  4692  53 2D             	mov	[0+((_calc_dewpoint$3268)^0x0)],a
  3056  4694  51 36             	mov	a,[1+((0+?_log10)^0x0)]
  3057  4696  53 2E             	mov	[1+((_calc_dewpoint$3268)^0x0)],a
  3058  4698  51 37             	mov	a,[2+((0+?_log10)^0x0)]
  3059  469A  53 2F             	mov	[2+((_calc_dewpoint$3268)^0x0)],a
  3060  469C  51 38             	mov	a,[3+((0+?_log10)^0x0)]
  3061  469E  53 30             	mov	[3+((_calc_dewpoint$3268)^0x0)],a
  3062  46A0  51 19             	mov	a,[0+((calc_dewpoint@t)^0x0)]
  3063  46A2  53 4D             	mov	[0+((?___fladd)^0x0)],a
  3064  46A4  51 1A             	mov	a,[1+((calc_dewpoint@t)^0x0)]
  3065  46A6  53 4E             	mov	[1+((?___fladd)^0x0)],a
  3066  46A8  51 1B             	mov	a,[2+((calc_dewpoint@t)^0x0)]
  3067  46AA  53 4F             	mov	[2+((?___fladd)^0x0)],a
  3068  46AC  51 1C             	mov	a,[3+((calc_dewpoint@t)^0x0)]
  3069  46AE  53 50             	mov	[3+((?___fladd)^0x0)],a
  3070  46B0  50 43             	mov	a,<(0x436d4ccd>>24)
  3071  46B2  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  3072  46B4  50 6D             	mov	a,<(0x436d4ccd>>16)
  3073  46B6  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  3074  46B8  50 4C             	mov	a,<(0x436d4ccd>>8)
  3075  46BA  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  3076  46BC  50 CD             	mov	a,<(0x436d4ccd)
  3077  46BE  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  3078  46C0  71 80             	or	f, 0x80	;select multiple RAM page mode
  3079                          	
  3080  46C2  7C 7416           	xcall	___fladd
  3081                          	
  3082  46C5  70 CF             	and	f, 0xCF   ;select user reg space
  3083  46C7  62 D0 00          	mov	reg[CUR_PP],0
  3084  46CA  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  3085  46CC  53 39             	mov	[0+((0+?___fldiv+04h)^0x0)],a
  3086  46CE  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  3087  46D0  53 3A             	mov	[1+((0+?___fldiv+04h)^0x0)],a
  3088  46D2  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  3089  46D4  53 3B             	mov	[2+((0+?___fldiv+04h)^0x0)],a
  3090  46D6  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  3091  46D8  53 3C             	mov	[3+((0+?___fldiv+04h)^0x0)],a
  3092  46DA  51 31             	mov	a,[0+((_calc_dewpoint$3267)^0x0)]
  3093  46DC  53 35             	mov	[0+((?___fldiv)^0x0)],a
  3094  46DE  51 32             	mov	a,[1+((_calc_dewpoint$3267)^0x0)]
  3095  46E0  53 36             	mov	[1+((?___fldiv)^0x0)],a
  3096  46E2  51 33             	mov	a,[2+((_calc_dewpoint$3267)^0x0)]
  3097  46E4  53 37             	mov	[2+((?___fldiv)^0x0)],a
  3098  46E6  51 34             	mov	a,[3+((_calc_dewpoint$3267)^0x0)]
  3099  46E8  53 38             	mov	[3+((?___fldiv)^0x0)],a
  3100  46EA  71 80             	or	f, 0x80	;select multiple RAM page mode
  3101                          	
  3102  46EC  7C 5A6E           	xcall	___fldiv
  3103                          	
  3104  46EF  70 CF             	and	f, 0xCF   ;select user reg space
  3105  46F1  62 D0 00          	mov	reg[CUR_PP],0
  3106  46F4  51 35             	mov	a,[0+((0+?___fldiv)^0x0)]
  3107  46F6  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  3108  46F8  51 36             	mov	a,[1+((0+?___fldiv)^0x0)]
  3109  46FA  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  3110  46FC  51 37             	mov	a,[2+((0+?___fldiv)^0x0)]
  3111  46FE  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  3112  4700  51 38             	mov	a,[3+((0+?___fldiv)^0x0)]
  3113  4702  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  3114  4704  51 2D             	mov	a,[0+((_calc_dewpoint$3268)^0x0)]
  3115  4706  53 4D             	mov	[0+((?___fladd)^0x0)],a
  3116  4708  51 2E             	mov	a,[1+((_calc_dewpoint$3268)^0x0)]
  3117  470A  53 4E             	mov	[1+((?___fladd)^0x0)],a
  3118  470C  51 2F             	mov	a,[2+((_calc_dewpoint$3268)^0x0)]
  3119  470E  53 4F             	mov	[2+((?___fladd)^0x0)],a
  3120  4710  51 30             	mov	a,[3+((_calc_dewpoint$3268)^0x0)]
  3121  4712  53 50             	mov	[3+((?___fladd)^0x0)],a
  3122  4714  71 80             	or	f, 0x80	;select multiple RAM page mode
  3123                          	
  3124  4716  7C 7416           	xcall	___fladd
  3125                          	
  3126  4719  70 CF             	and	f, 0xCF   ;select user reg space
  3127  471B  62 D0 00          	mov	reg[CUR_PP],0
  3128  471E  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  3129  4720  53 4D             	mov	[0+((?___fladd)^0x0)],a
  3130  4722  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  3131  4724  53 4E             	mov	[1+((?___fladd)^0x0)],a
  3132  4726  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  3133  4728  53 4F             	mov	[2+((?___fladd)^0x0)],a
  3134  472A  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  3135  472C  53 50             	mov	[3+((?___fladd)^0x0)],a
  3136  472E  50 BF             	mov	a,<(0xbfab6be3>>24)
  3137  4730  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  3138  4732  50 AB             	mov	a,<(0xbfab6be3>>16)
  3139  4734  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  3140  4736  50 6B             	mov	a,<(0xbfab6be3>>8)
  3141  4738  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  3142  473A  50 E3             	mov	a,<(0xbfab6be3)
  3143  473C  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  3144  473E  71 80             	or	f, 0x80	;select multiple RAM page mode
  3145                          	
  3146  4740  7C 7416           	xcall	___fladd
  3147                          	
  3148  4743  70 CF             	and	f, 0xCF   ;select user reg space
  3149  4745  62 D0 00          	mov	reg[CUR_PP],0
  3150  4748  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  3151  474A  53 1D             	mov	[0+((calc_dewpoint@logEx)^0x0)],a
  3152  474C  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  3153  474E  53 1E             	mov	[1+((calc_dewpoint@logEx)^0x0)],a
  3154  4750  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  3155  4752  53 1F             	mov	[2+((calc_dewpoint@logEx)^0x0)],a
  3156  4754  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  3157  4756  53 20             	mov	[3+((calc_dewpoint@logEx)^0x0)],a
  3158                          	line	255
  3159                          ;shtxx.c: 255: dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
  3160  4758  51 1D             	mov	a,[0+((calc_dewpoint@logEx)^0x0)]
  3161  475A  53 4D             	mov	[0+((?___fladd)^0x0)],a
  3162  475C  51 1E             	mov	a,[1+((calc_dewpoint@logEx)^0x0)]
  3163  475E  53 4E             	mov	[1+((?___fladd)^0x0)],a
  3164  4760  51 1F             	mov	a,[2+((calc_dewpoint@logEx)^0x0)]
  3165  4762  53 4F             	mov	[2+((?___fladd)^0x0)],a
  3166  4764  51 20             	mov	a,[3+((calc_dewpoint@logEx)^0x0)]
  3167  4766  53 50             	mov	[3+((?___fladd)^0x0)],a
  3168  4768  50 BF             	mov	a,<(0xbf292839>>24)
  3169  476A  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  3170  476C  50 29             	mov	a,<(0xbf292839>>16)
  3171  476E  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  3172  4770  50 28             	mov	a,<(0xbf292839>>8)
  3173  4772  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  3174  4774  50 39             	mov	a,<(0xbf292839)
  3175  4776  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  3176  4778  71 80             	or	f, 0x80	;select multiple RAM page mode
  3177                          	
  3178  477A  7C 7416           	xcall	___fladd
  3179                          	
  3180  477D  70 CF             	and	f, 0xCF   ;select user reg space
  3181  477F  62 D0 00          	mov	reg[CUR_PP],0
  3182  4782  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  3183  4784  53 29             	mov	[0+((_calc_dewpoint$3273)^0x0)],a
  3184  4786  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  3185  4788  53 2A             	mov	[1+((_calc_dewpoint$3273)^0x0)],a
  3186  478A  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  3187  478C  53 2B             	mov	[2+((_calc_dewpoint$3273)^0x0)],a
  3188  478E  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  3189  4790  53 2C             	mov	[3+((_calc_dewpoint$3273)^0x0)],a
  3190  4792  50 43             	mov	a,<(0x436d4ccd>>24)
  3191  4794  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  3192  4796  50 6D             	mov	a,<(0x436d4ccd>>16)
  3193  4798  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  3194  479A  50 4C             	mov	a,<(0x436d4ccd>>8)
  3195  479C  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  3196  479E  50 CD             	mov	a,<(0x436d4ccd)
  3197  47A0  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  3198  47A2  51 29             	mov	a,[0+((_calc_dewpoint$3273)^0x0)]
  3199  47A4  53 5E             	mov	[0+((?___flmul)^0x0)],a
  3200  47A6  51 2A             	mov	a,[1+((_calc_dewpoint$3273)^0x0)]
  3201  47A8  53 5F             	mov	[1+((?___flmul)^0x0)],a
  3202  47AA  51 2B             	mov	a,[2+((_calc_dewpoint$3273)^0x0)]
  3203  47AC  53 60             	mov	[2+((?___flmul)^0x0)],a
  3204  47AE  51 2C             	mov	a,[3+((_calc_dewpoint$3273)^0x0)]
  3205  47B0  53 61             	mov	[3+((?___flmul)^0x0)],a
  3206  47B2  71 80             	or	f, 0x80	;select multiple RAM page mode
  3207                          	
  3208  47B4  7C 7201           	xcall	___flmul
  3209                          	
  3210  47B7  70 CF             	and	f, 0xCF   ;select user reg space
  3211  47B9  62 D0 00          	mov	reg[CUR_PP],0
  3212  47BC  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  3213  47BE  53 25             	mov	[0+((_calc_dewpoint$3274)^0x0)],a
  3214  47C0  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  3215  47C2  53 26             	mov	[1+((_calc_dewpoint$3274)^0x0)],a
  3216  47C4  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  3217  47C6  53 27             	mov	[2+((_calc_dewpoint$3274)^0x0)],a
  3218  47C8  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  3219  47CA  53 28             	mov	[3+((_calc_dewpoint$3274)^0x0)],a
  3220  47CC  50 41             	mov	a,<(0x41029284>>24)
  3221  47CE  53 41             	mov	[0+((?___flsub)^0x0)],a
  3222  47D0  50 02             	mov	a,<(0x41029284>>16)
  3223  47D2  53 42             	mov	[1+((?___flsub)^0x0)],a
  3224  47D4  50 92             	mov	a,<(0x41029284>>8)
  3225  47D6  53 43             	mov	[2+((?___flsub)^0x0)],a
  3226  47D8  50 84             	mov	a,<(0x41029284)
  3227  47DA  53 44             	mov	[3+((?___flsub)^0x0)],a
  3228  47DC  51 1D             	mov	a,[0+((calc_dewpoint@logEx)^0x0)]
  3229  47DE  53 45             	mov	[0+((0+?___flsub+04h)^0x0)],a
  3230  47E0  51 1E             	mov	a,[1+((calc_dewpoint@logEx)^0x0)]
  3231  47E2  53 46             	mov	[1+((0+?___flsub+04h)^0x0)],a
  3232  47E4  51 1F             	mov	a,[2+((calc_dewpoint@logEx)^0x0)]
  3233  47E6  53 47             	mov	[2+((0+?___flsub+04h)^0x0)],a
  3234  47E8  51 20             	mov	a,[3+((calc_dewpoint@logEx)^0x0)]
  3235  47EA  53 48             	mov	[3+((0+?___flsub+04h)^0x0)],a
  3236  47EC  71 80             	or	f, 0x80	;select multiple RAM page mode
  3237                          	
  3238  47EE  7C 5D18           	xcall	___flsub
  3239                          	
  3240  47F1  70 CF             	and	f, 0xCF   ;select user reg space
  3241  47F3  62 D0 00          	mov	reg[CUR_PP],0
  3242  47F6  51 41             	mov	a,[0+((0+?___flsub)^0x0)]
  3243  47F8  53 39             	mov	[0+((0+?___fldiv+04h)^0x0)],a
  3244  47FA  51 42             	mov	a,[1+((0+?___flsub)^0x0)]
  3245  47FC  53 3A             	mov	[1+((0+?___fldiv+04h)^0x0)],a
  3246  47FE  51 43             	mov	a,[2+((0+?___flsub)^0x0)]
  3247  4800  53 3B             	mov	[2+((0+?___fldiv+04h)^0x0)],a
  3248  4802  51 44             	mov	a,[3+((0+?___flsub)^0x0)]
  3249  4804  53 3C             	mov	[3+((0+?___fldiv+04h)^0x0)],a
  3250  4806  51 25             	mov	a,[0+((_calc_dewpoint$3274)^0x0)]
  3251  4808  53 35             	mov	[0+((?___fldiv)^0x0)],a
  3252  480A  51 26             	mov	a,[1+((_calc_dewpoint$3274)^0x0)]
  3253  480C  53 36             	mov	[1+((?___fldiv)^0x0)],a
  3254  480E  51 27             	mov	a,[2+((_calc_dewpoint$3274)^0x0)]
  3255  4810  53 37             	mov	[2+((?___fldiv)^0x0)],a
  3256  4812  51 28             	mov	a,[3+((_calc_dewpoint$3274)^0x0)]
  3257  4814  53 38             	mov	[3+((?___fldiv)^0x0)],a
  3258  4816  71 80             	or	f, 0x80	;select multiple RAM page mode
  3259                          	
  3260  4818  7C 5A6E           	xcall	___fldiv
  3261                          	
  3262  481B  70 CF             	and	f, 0xCF   ;select user reg space
  3263  481D  62 D0 00          	mov	reg[CUR_PP],0
  3264  4820  51 35             	mov	a,[0+((0+?___fldiv)^0x0)]
  3265  4822  53 21             	mov	[0+((calc_dewpoint@dew_point)^0x0)],a
  3266  4824  51 36             	mov	a,[1+((0+?___fldiv)^0x0)]
  3267  4826  53 22             	mov	[1+((calc_dewpoint@dew_point)^0x0)],a
  3268  4828  51 37             	mov	a,[2+((0+?___fldiv)^0x0)]
  3269  482A  53 23             	mov	[2+((calc_dewpoint@dew_point)^0x0)],a
  3270  482C  51 38             	mov	a,[3+((0+?___fldiv)^0x0)]
  3271  482E  53 24             	mov	[3+((calc_dewpoint@dew_point)^0x0)],a
  3272                          	line	256
  3273  4830  70 CF             	and	f, 0xCF   ;select user reg space
  3274  4832  62 D0 00          	mov	reg[CUR_PP],0
  3275  4835  51 21             	mov	a,[0+((calc_dewpoint@dew_point)^0x0)]
  3276  4837  53 15             	mov	[0+((?_calc_dewpoint)^0x0)],a
  3277  4839  51 22             	mov	a,[1+((calc_dewpoint@dew_point)^0x0)]
  3278  483B  53 16             	mov	[1+((?_calc_dewpoint)^0x0)],a
  3279  483D  51 23             	mov	a,[2+((calc_dewpoint@dew_point)^0x0)]
  3280  483F  53 17             	mov	[2+((?_calc_dewpoint)^0x0)],a
  3281  4841  51 24             	mov	a,[3+((calc_dewpoint@dew_point)^0x0)]
  3282  4843  53 18             	mov	[3+((?_calc_dewpoint)^0x0)],a
  3283  4845  7D 4848           	xjmp	l124
  3284                          	line	257
  3285                          ;shtxx.c: 257: }
  3286  4848                    l124:
  3287                          ;			
  3288  4848  70 CF             	and	f, 0xCF   ;select user reg space
  3289                          	
  3290  484A  7F                	ret
  3291                          GLOBAL __end_of_calc_dewpoint
  3292  484B                    	__end_of_calc_dewpoint:
  3293                          	FNSIZE	_calc_dewpoint,24,8
  3294                          ; =============== function _calc_dewpoint ends ============
  3295                          
  3296                          	signat	_calc_dewpoint,8316
  3297                          	global	_orcon_delay
  3298                          	global	??_orcon_delay
  3299                          	global	?_orcon_delay
  3300                          	psect	text
  3301                          
  3302                          ; *************** function _orcon_delay *****************
  3303                          ; Defined at:
  3304                          ;		line 41 in file "./orcon.c"
  3305                          ; Parameters:
  3306                          ;		None
  3307                          ; Auto variables:
  3308                          ;		i           	       	type: int 
  3309                          ; Return value:
  3310                          ;		type: void 
  3311                          ;		size: 0
  3312                          ; Registers used:
  3313                          ;		a, CUR_PP
  3314                          ; Tracked objects:
  3315                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3316                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3317                          ;		Unchanged: 
  3318                          ; Data sizes:
  3319                          ;		Autos:    2
  3320                          ;		Params:   0
  3321                          ;		Temp:     0
  3322                          ;		Total:    2
  3323                          ; This function calls:
  3324                          ;		_orcon_delay_5us
  3325                          ; This function is called by:
  3326                          ;		_orcon_low
  3327                          ;		_orcon_med
  3328                          ;		_orcon_high
  3329                          ; This function uses a non-reentrant model
  3330                          ; 
  3331                          	file	"./orcon.c"
  3332                          	line	41
  3333  00FE                    	__size_of_orcon_delay	equ	__end_of_orcon_delay-_orcon_delay
  3334                          ;orcon.c: 41: void orcon_delay(){
  3335                          ;			
  3336  484B                    _orcon_delay:	
  3337                          	opt	disable
  3338                          	line	46
  3339                          ;orcon.c: 44: int i;
  3340                          ;orcon.c: 46: for (i=0;i<20000;i++){
  3341  484B  50 00             	mov	a,<(0)
  3342  484D  70 CF             	and	f, 0xCF   ;select user reg space
  3343  484F  62 D0 00          	mov	reg[CUR_PP],0
  3344  4852  53 06             	mov	[1+((orcon_delay@i)^0x0)],a
  3345  4854  50 00             	mov	a,>(0)
  3346  4856  53 05             	mov	[0+((orcon_delay@i)^0x0)],a
  3347  4858  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3348  485A  39 20             	cmp	a,<(04E20h)
  3349  485C  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3350  485E  31 80             	xor	a,80h
  3351  4860  19 CE             	sbb	a,(>04E20h)^80h
  3352  4862  C004              	jc	l71
  3353  4864  7D 4889           	xjmp	l72
  3354                          ;			
  3355  4867                    l71:	
  3356                          	line	47
  3357                          ;orcon.c: 47: orcon_delay_5us();
  3358  4867  71 80             	or	f, 0x80	;select multiple RAM page mode
  3359                          	
  3360  4869  7C 5A54           	xcall	_orcon_delay_5us
  3361                          	
  3362                          	line	46
  3363  486C  70 CF             	and	f, 0xCF   ;select user reg space
  3364  486E  62 D0 00          	mov	reg[CUR_PP],0
  3365  4871  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3366  4873  01 01             	add	a,<(01h)
  3367  4875  53 06             	mov	[1+((orcon_delay@i)^0x0)],a
  3368  4877  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3369  4879  09 00             	adc	a,>(01h)
  3370  487B  53 05             	mov	[0+((orcon_delay@i)^0x0)],a
  3371  487D  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3372  487F  39 20             	cmp	a,<(04E20h)
  3373  4881  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3374  4883  31 80             	xor	a,80h
  3375  4885  19 CE             	sbb	a,(>04E20h)^80h
  3376  4887  CFDF              	jc	l71
  3377                          ;			
  3378  4889                    l72:	
  3379                          	line	49
  3380                          ;orcon.c: 48: }
  3381                          ;orcon.c: 49: for (i=0;i<20000;i++){
  3382  4889  50 00             	mov	a,<(0)
  3383  488B  70 CF             	and	f, 0xCF   ;select user reg space
  3384  488D  62 D0 00          	mov	reg[CUR_PP],0
  3385  4890  53 06             	mov	[1+((orcon_delay@i)^0x0)],a
  3386  4892  50 00             	mov	a,>(0)
  3387  4894  53 05             	mov	[0+((orcon_delay@i)^0x0)],a
  3388  4896  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3389  4898  39 20             	cmp	a,<(04E20h)
  3390  489A  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3391  489C  31 80             	xor	a,80h
  3392  489E  19 CE             	sbb	a,(>04E20h)^80h
  3393  48A0  C004              	jc	l74
  3394  48A2  7D 48C7           	xjmp	l75
  3395                          ;			
  3396  48A5                    l74:	
  3397                          	line	50
  3398                          ;orcon.c: 50: orcon_delay_5us();
  3399  48A5  71 80             	or	f, 0x80	;select multiple RAM page mode
  3400                          	
  3401  48A7  7C 5A54           	xcall	_orcon_delay_5us
  3402                          	
  3403                          	line	49
  3404  48AA  70 CF             	and	f, 0xCF   ;select user reg space
  3405  48AC  62 D0 00          	mov	reg[CUR_PP],0
  3406  48AF  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3407  48B1  01 01             	add	a,<(01h)
  3408  48B3  53 06             	mov	[1+((orcon_delay@i)^0x0)],a
  3409  48B5  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3410  48B7  09 00             	adc	a,>(01h)
  3411  48B9  53 05             	mov	[0+((orcon_delay@i)^0x0)],a
  3412  48BB  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3413  48BD  39 20             	cmp	a,<(04E20h)
  3414  48BF  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3415  48C1  31 80             	xor	a,80h
  3416  48C3  19 CE             	sbb	a,(>04E20h)^80h
  3417  48C5  CFDF              	jc	l74
  3418                          ;			
  3419  48C7                    l75:	
  3420                          	line	52
  3421                          ;orcon.c: 51: }
  3422                          ;orcon.c: 52: for (i=0;i<20000;i++){
  3423  48C7  50 00             	mov	a,<(0)
  3424  48C9  70 CF             	and	f, 0xCF   ;select user reg space
  3425  48CB  62 D0 00          	mov	reg[CUR_PP],0
  3426  48CE  53 06             	mov	[1+((orcon_delay@i)^0x0)],a
  3427  48D0  50 00             	mov	a,>(0)
  3428  48D2  53 05             	mov	[0+((orcon_delay@i)^0x0)],a
  3429  48D4  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3430  48D6  39 20             	cmp	a,<(04E20h)
  3431  48D8  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3432  48DA  31 80             	xor	a,80h
  3433  48DC  19 CE             	sbb	a,(>04E20h)^80h
  3434  48DE  C004              	jc	l77
  3435  48E0  7D 4905           	xjmp	l78
  3436                          ;			
  3437  48E3                    l77:	
  3438                          	line	53
  3439                          ;orcon.c: 53: orcon_delay_5us();
  3440  48E3  71 80             	or	f, 0x80	;select multiple RAM page mode
  3441                          	
  3442  48E5  7C 5A54           	xcall	_orcon_delay_5us
  3443                          	
  3444                          	line	52
  3445  48E8  70 CF             	and	f, 0xCF   ;select user reg space
  3446  48EA  62 D0 00          	mov	reg[CUR_PP],0
  3447  48ED  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3448  48EF  01 01             	add	a,<(01h)
  3449  48F1  53 06             	mov	[1+((orcon_delay@i)^0x0)],a
  3450  48F3  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3451  48F5  09 00             	adc	a,>(01h)
  3452  48F7  53 05             	mov	[0+((orcon_delay@i)^0x0)],a
  3453  48F9  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3454  48FB  39 20             	cmp	a,<(04E20h)
  3455  48FD  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3456  48FF  31 80             	xor	a,80h
  3457  4901  19 CE             	sbb	a,(>04E20h)^80h
  3458  4903  CFDF              	jc	l77
  3459                          ;			
  3460  4905                    l78:	
  3461                          	line	55
  3462                          ;orcon.c: 54: }
  3463                          ;orcon.c: 55: for (i=0;i<20000;i++){
  3464  4905  50 00             	mov	a,<(0)
  3465  4907  70 CF             	and	f, 0xCF   ;select user reg space
  3466  4909  62 D0 00          	mov	reg[CUR_PP],0
  3467  490C  53 06             	mov	[1+((orcon_delay@i)^0x0)],a
  3468  490E  50 00             	mov	a,>(0)
  3469  4910  53 05             	mov	[0+((orcon_delay@i)^0x0)],a
  3470  4912  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3471  4914  39 20             	cmp	a,<(04E20h)
  3472  4916  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3473  4918  31 80             	xor	a,80h
  3474  491A  19 CE             	sbb	a,(>04E20h)^80h
  3475  491C  C004              	jc	l80
  3476  491E  7D 4943           	xjmp	l81
  3477                          ;			
  3478  4921                    l80:	
  3479                          	line	56
  3480                          ;orcon.c: 56: orcon_delay_5us();
  3481  4921  71 80             	or	f, 0x80	;select multiple RAM page mode
  3482                          	
  3483  4923  7C 5A54           	xcall	_orcon_delay_5us
  3484                          	
  3485                          	line	55
  3486  4926  70 CF             	and	f, 0xCF   ;select user reg space
  3487  4928  62 D0 00          	mov	reg[CUR_PP],0
  3488  492B  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3489  492D  01 01             	add	a,<(01h)
  3490  492F  53 06             	mov	[1+((orcon_delay@i)^0x0)],a
  3491  4931  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3492  4933  09 00             	adc	a,>(01h)
  3493  4935  53 05             	mov	[0+((orcon_delay@i)^0x0)],a
  3494  4937  51 06             	mov	a,[1+((orcon_delay@i)^0x0)]
  3495  4939  39 20             	cmp	a,<(04E20h)
  3496  493B  51 05             	mov	a,[0+((orcon_delay@i)^0x0)]
  3497  493D  31 80             	xor	a,80h
  3498  493F  19 CE             	sbb	a,(>04E20h)^80h
  3499  4941  CFDF              	jc	l80
  3500                          ;			
  3501  4943                    l81:	
  3502                          	line	59
  3503                          ;orcon.c: 57: }
  3504                          ;orcon.c: 59: return;
  3505  4943  7D 4946           	xjmp	l70
  3506                          	line	60
  3507                          ;orcon.c: 60: }
  3508  4946                    l70:
  3509                          ;			
  3510  4946  70 CF             	and	f, 0xCF   ;select user reg space
  3511                          	
  3512  4948  7F                	ret
  3513                          GLOBAL __end_of_orcon_delay
  3514  4949                    	__end_of_orcon_delay:
  3515                          	FNSIZE	_orcon_delay,2,0
  3516                          ; =============== function _orcon_delay ends ============
  3517                          
  3518                          	signat	_orcon_delay,88
  3519                          	global	___lwtofl
  3520                          	global	??___lwtofl
  3521                          	global	?___lwtofl
  3522                          	psect	text
  3523                          
  3524                          ; *************** function ___lwtofl *****************
  3525                          ; Defined at:
  3526                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwtofl.c"
  3527                          ; Parameters:
  3528                          ;		c           	offs:   0	type: unsigned int 
  3529                          ; Auto variables:
  3530                          ;		f1          	       	type: unsigned int 
  3531                          ; Return value:
  3532                          ;		type: unsigned int 
  3533                          ;		size: 4
  3534                          ; Registers used:
  3535                          ;		a, x, CUR_PP
  3536                          ; Tracked objects:
  3537                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3538                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3539                          ;		Unchanged: 
  3540                          ; Data sizes:
  3541                          ;		Autos:    4
  3542                          ;		Params:   4
  3543                          ;		Temp:     4
  3544                          ;		Total:   12
  3545                          ; This function calls:
  3546                          ;		___flpack
  3547                          ; This function is called by:
  3548                          ;		_s_do_measure
  3549                          ; This function uses a non-reentrant model
  3550                          ; 
  3551                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwtofl.c"
  3552                          	line	16
  3553  0079                    	__size_of___lwtofl	equ	__end_of___lwtofl-___lwtofl
  3554                          ;lwtofl.c: 14: double
  3555                          ;lwtofl.c: 15: __lwtofl(unsigned int c)
  3556                          ;lwtofl.c: 16: {
  3557                          ;			
  3558  4949                    ___lwtofl:	
  3559                          	opt	disable
  3560                          	line	19
  3561                          ;lwtofl.c: 17: double f1;
  3562                          ;lwtofl.c: 19: if(c == 0)
  3563  4949  70 CF             	and	f, 0xCF   ;select user reg space
  3564  494B  62 D0 00          	mov	reg[CUR_PP],0
  3565  494E  51 15             	mov	a,[0+((___lwtofl@c)^0x0)]
  3566  4950  39 00             	cmp	a,>(0)
  3567  4952  B005              	jnz	u2423
  3568  4954  51 16             	mov	a,[1+((___lwtofl@c)^0x0)]
  3569  4956  39 00             	cmp	a,<(0)
  3570  4958                    u2423:
  3571  4958  B019              	jnz	l537
  3572                          	line	20
  3573  495A  50 00             	mov	a,<(0x0>>24)
  3574  495C  70 CF             	and	f, 0xCF   ;select user reg space
  3575  495E  62 D0 00          	mov	reg[CUR_PP],0
  3576  4961  53 15             	mov	[0+((?___lwtofl)^0x0)],a
  3577  4963  50 00             	mov	a,<(0x0>>16)
  3578  4965  53 16             	mov	[1+((?___lwtofl)^0x0)],a
  3579  4967  50 00             	mov	a,<(0x0>>8)
  3580  4969  53 17             	mov	[2+((?___lwtofl)^0x0)],a
  3581  496B  50 00             	mov	a,<(0x0)
  3582  496D  53 18             	mov	[3+((?___lwtofl)^0x0)],a
  3583  496F  7D 49BF           	xjmp	l536
  3584                          ;			
  3585  4972                    l537:	
  3586                          	line	21
  3587                          ;lwtofl.c: 21: (*(unsigned long *)&f1) = c;
  3588  4972  70 CF             	and	f, 0xCF   ;select user reg space
  3589  4974  62 D0 00          	mov	reg[CUR_PP],0
  3590  4977  51 16             	mov	a,[1+((___lwtofl@c)^0x0)]
  3591  4979  53 20             	mov	[(??___lwtofl^0x0)+4+0+3],a
  3592  497B  51 15             	mov	a,[0+((___lwtofl@c)^0x0)]
  3593  497D  53 1F             	mov	[(??___lwtofl^0x0)+4+0+2],a
  3594  497F  55 1E  00         	mov	[(??___lwtofl^0x0)+4+0+1],0
  3595  4982  55 1D  00         	mov	[(??___lwtofl^0x0)+4+0],0
  3596  4985  5F 19  1D         	mov	[((___lwtofl@f1)^0x0)],[(??___lwtofl^0x0)+4+0]
  3597  4988  5F 1A  1E         	mov	[((___lwtofl@f1+1)^0x0)],[(??___lwtofl^0x0)+4+1]
  3598  498B  5F 1B  1F         	mov	[((___lwtofl@f1+2)^0x0)],[(??___lwtofl^0x0)+4+2]
  3599  498E  5F 1C  20         	mov	[((___lwtofl@f1+3)^0x0)],[(??___lwtofl^0x0)+4+3]
  3600                          	line	22
  3601                          ;lwtofl.c: 22: __flpack(&(*(unsigned long *)&f1), 127+23);
  3602  4991  50 19             	mov	a,<((___lwtofl@f1|8000h))
  3603  4993  70 CF             	and	f, 0xCF   ;select user reg space
  3604  4995  62 D0 00          	mov	reg[CUR_PP],0
  3605  4998  53 72             	mov	[1+((?___flpack)^0x0)],a
  3606  499A  50 80             	mov	a,>((___lwtofl@f1|8000h))
  3607  499C  53 71             	mov	[0+((?___flpack)^0x0)],a
  3608  499E  50 96             	mov	a,<((096h))
  3609  49A0  53 73             	mov	[0+((0+?___flpack+02h)^0x0)],a
  3610  49A2  71 80             	or	f, 0x80	;select multiple RAM page mode
  3611                          	
  3612  49A4  7C 77F8           	xcall	___flpack
  3613                          	
  3614                          	line	23
  3615  49A7  70 CF             	and	f, 0xCF   ;select user reg space
  3616  49A9  62 D0 00          	mov	reg[CUR_PP],0
  3617  49AC  51 19             	mov	a,[0+((___lwtofl@f1)^0x0)]
  3618  49AE  53 15             	mov	[0+((?___lwtofl)^0x0)],a
  3619  49B0  51 1A             	mov	a,[1+((___lwtofl@f1)^0x0)]
  3620  49B2  53 16             	mov	[1+((?___lwtofl)^0x0)],a
  3621  49B4  51 1B             	mov	a,[2+((___lwtofl@f1)^0x0)]
  3622  49B6  53 17             	mov	[2+((?___lwtofl)^0x0)],a
  3623  49B8  51 1C             	mov	a,[3+((___lwtofl@f1)^0x0)]
  3624  49BA  53 18             	mov	[3+((?___lwtofl)^0x0)],a
  3625  49BC  7D 49BF           	xjmp	l536
  3626                          	line	24
  3627                          ;lwtofl.c: 24: }
  3628  49BF                    l536:
  3629                          ;			
  3630  49BF  70 CF             	and	f, 0xCF   ;select user reg space
  3631                          	
  3632  49C1  7F                	ret
  3633                          GLOBAL __end_of___lwtofl
  3634  49C2                    	__end_of___lwtofl:
  3635                          	FNSIZE	___lwtofl,8,4
  3636                          ; =============== function ___lwtofl ends ============
  3637                          
  3638                          	signat	___lwtofl,4220
  3639                          	global	_OneWire_fFindNext
  3640                          	global	_s_connectionreset
  3641                          	global	??_s_connectionreset
  3642                          	global	?_s_connectionreset
  3643                          	psect	text
  3644                          
  3645                          ; *************** function _s_connectionreset *****************
  3646                          ; Defined at:
  3647                          ;		line 134 in file "./shtxx.c"
  3648                          ; Parameters:
  3649                          ;		None
  3650                          ; Auto variables:
  3651                          ;		i           	       	type: unsigned char 
  3652                          ; Return value:
  3653                          ;		type: void 
  3654                          ;		size: 0
  3655                          ; Registers used:
  3656                          ;		a, CUR_PP
  3657                          ; Tracked objects:
  3658                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3659                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3660                          ;		Unchanged: 
  3661                          ; Data sizes:
  3662                          ;		Autos:    1
  3663                          ;		Params:   0
  3664                          ;		Temp:     0
  3665                          ;		Total:    1
  3666                          ; This function calls:
  3667                          ;		_delay_5us
  3668                          ;		_s_transstart
  3669                          ; This function is called by:
  3670                          ;		_s_do_measure
  3671                          ; This function uses a non-reentrant model
  3672                          ; 
  3673                          	file	"./shtxx.c"
  3674                          	line	134
  3675  0069                    	__size_of_s_connectionreset	equ	__end_of_s_connectionreset-_s_connectionreset
  3676                          ;shtxx.c: 127: void s_connectionreset(void)
  3677                          ;shtxx.c: 134: {
  3678                          ;			
  3679  49C2                    _s_connectionreset:	
  3680                          	opt	disable
  3681                          	line	136
  3682                          ;shtxx.c: 135: unsigned char i;
  3683                          ;shtxx.c: 136: (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  3684  49C2  70 CF             	and	f, 0xCF   ;select user reg space
  3685  49C4  5D 08             	mov	a,reg[(8)]
  3686  49C6  29 02             	or	a,<((02h))
  3687  49C8  60 08             	mov	reg[(8)],a
  3688                          	line	137
  3689                          ;shtxx.c: 137: delay_5us();
  3690  49CA  71 80             	or	f, 0x80	;select multiple RAM page mode
  3691                          	
  3692  49CC  7C 6E6C           	xcall	_delay_5us
  3693                          	
  3694                          	line	138
  3695                          ;shtxx.c: 138: (PRT4DR = (0==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  3696  49CF  70 CF             	and	f, 0xCF   ;select user reg space
  3697  49D1  5D 10             	mov	a,reg[(16)]
  3698  49D3  21 7F             	and	a,<((07Fh))
  3699  49D5  60 10             	mov	reg[(16)],a
  3700                          	line	139
  3701                          ;shtxx.c: 139: delay_5us();
  3702  49D7  71 80             	or	f, 0x80	;select multiple RAM page mode
  3703                          	
  3704  49D9  7C 6E6C           	xcall	_delay_5us
  3705                          	
  3706                          	line	140
  3707                          ;shtxx.c: 140: for(i=0;i<9;i++)
  3708  49DC  50 00             	mov	a,<((0))
  3709  49DE  70 CF             	and	f, 0xCF   ;select user reg space
  3710  49E0  62 D0 00          	mov	reg[CUR_PP],0
  3711  49E3  53 15             	mov	[0+((s_connectionreset@i)^0x0)],a
  3712  49E5  70 CF             	and	f, 0xCF   ;select user reg space
  3713  49E7  62 D0 00          	mov	reg[CUR_PP],0
  3714  49EA  51 15             	mov	a,[0+((s_connectionreset@i)^0x0)]
  3715  49EC  39 09             	cmp	a,<((09h))
  3716  49EE  C004              	jc	l104
  3717  49F0  7D 4A23           	xjmp	l105
  3718                          	line	141
  3719                          ;			
  3720  49F3                    l104:	
  3721                          ;shtxx.c: 141: { (PRT4DR = (1==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  3722  49F3  70 CF             	and	f, 0xCF   ;select user reg space
  3723  49F5  5D 10             	mov	a,reg[(16)]
  3724  49F7  29 80             	or	a,<((080h))
  3725  49F9  60 10             	mov	reg[(16)],a
  3726                          	line	142
  3727                          ;shtxx.c: 142: delay_5us();
  3728  49FB  71 80             	or	f, 0x80	;select multiple RAM page mode
  3729                          	
  3730  49FD  7C 6E6C           	xcall	_delay_5us
  3731                          	
  3732                          	line	143
  3733                          ;shtxx.c: 143: (PRT4DR = (0==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  3734  4A00  70 CF             	and	f, 0xCF   ;select user reg space
  3735  4A02  5D 10             	mov	a,reg[(16)]
  3736  4A04  21 7F             	and	a,<((07Fh))
  3737  4A06  60 10             	mov	reg[(16)],a
  3738                          	line	144
  3739                          ;shtxx.c: 144: delay_5us();
  3740  4A08  71 80             	or	f, 0x80	;select multiple RAM page mode
  3741                          	
  3742  4A0A  7C 6E6C           	xcall	_delay_5us
  3743                          	
  3744                          	line	140
  3745  4A0D  70 CF             	and	f, 0xCF   ;select user reg space
  3746  4A0F  62 D0 00          	mov	reg[CUR_PP],0
  3747  4A12  51 15             	mov	a,[0+((s_connectionreset@i)^0x0)]
  3748  4A14  01 01             	add	a,<((01h))
  3749  4A16  53 15             	mov	[0+((s_connectionreset@i)^0x0)],a
  3750  4A18  70 CF             	and	f, 0xCF   ;select user reg space
  3751  4A1A  62 D0 00          	mov	reg[CUR_PP],0
  3752  4A1D  51 15             	mov	a,[0+((s_connectionreset@i)^0x0)]
  3753  4A1F  39 09             	cmp	a,<((09h))
  3754  4A21  CFD1              	jc	l104
  3755                          ;			
  3756  4A23                    l105:	
  3757                          	line	146
  3758                          ;shtxx.c: 145: }
  3759                          ;shtxx.c: 146: s_transstart();
  3760  4A23  71 80             	or	f, 0x80	;select multiple RAM page mode
  3761                          	
  3762  4A25  7C 58B3           	xcall	_s_transstart
  3763                          	
  3764                          	line	147
  3765                          ;shtxx.c: 147: }
  3766  4A28                    l103:
  3767                          ;			
  3768  4A28  70 CF             	and	f, 0xCF   ;select user reg space
  3769                          	
  3770  4A2A  7F                	ret
  3771                          GLOBAL __end_of_s_connectionreset
  3772  4A2B                    	__end_of_s_connectionreset:
  3773                          	FNSIZE	_s_connectionreset,1,0
  3774                          ; =============== function _s_connectionreset ends ============
  3775                          
  3776                          	signat	_s_connectionreset,88
  3777                          	global	_s_measure
  3778                          	global	??_s_measure
  3779                          	global	?_s_measure
  3780                          	psect	text
  3781                          
  3782                          ; *************** function _s_measure *****************
  3783                          ; Defined at:
  3784                          ;		line 189 in file "./shtxx.c"
  3785                          ; Parameters:
  3786                          ;		p_value     	offs:   0	type: PTR unsigned char ; Largest target is 2
  3787                          ;		 -> s_do_measure@temp_val.i(2), s_do_measure@humi_val.i(2), 
  3788                          ;		p_checksum  	offs:   2	type: PTR unsigned char ; Largest target is 1
  3789                          ;		 -> s_do_measure@checksum(1), 
  3790                          ;		mode        	offs:   4	type: unsigned char 
  3791                          ; Auto variables:
  3792                          ;		error       	       	type: unsigned int 
  3793                          ;		i           	       	type: unsigned int 
  3794                          ; Return value:
  3795                          ;		type: unsigned char 
  3796                          ;		size: 1
  3797                          ; Registers used:
  3798                          ;		a, x, CUR_PP
  3799                          ; Tracked objects:
  3800                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3801                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3802                          ;		Unchanged: 
  3803                          ; Data sizes:
  3804                          ;		Autos:    4
  3805                          ;		Params:   5
  3806                          ;		Temp:     4
  3807                          ;		Total:   13
  3808                          ; This function calls:
  3809                          ;		_s_transstart
  3810                          ;		_s_write_byte
  3811                          ;		_delay_5us
  3812                          ;		_s_read_byte
  3813                          ; This function is called by:
  3814                          ;		_s_do_measure
  3815                          ; This function uses a non-reentrant model
  3816                          ; 
  3817                          	file	"./shtxx.c"
  3818                          	line	189
  3819  0131                    	__size_of_s_measure	equ	__end_of_s_measure-_s_measure
  3820                          ;shtxx.c: 186: char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
  3821                          ;shtxx.c: 189: {
  3822                          ;			
  3823  4A2B                    _s_measure:	
  3824                          	opt	disable
  3825                          	line	190
  3826                          ;shtxx.c: 190: unsigned error=0;
  3827  4A2B  50 00             	mov	a,<(0)
  3828  4A2D  70 CF             	and	f, 0xCF   ;select user reg space
  3829  4A2F  62 D0 00          	mov	reg[CUR_PP],0
  3830  4A32  53 1B             	mov	[1+((s_measure@error)^0x0)],a
  3831  4A34  50 00             	mov	a,>(0)
  3832  4A36  53 1A             	mov	[0+((s_measure@error)^0x0)],a
  3833                          	line	193
  3834                          ;shtxx.c: 191: unsigned int i;
  3835                          ;shtxx.c: 193: s_transstart();
  3836  4A38  71 80             	or	f, 0x80	;select multiple RAM page mode
  3837                          	
  3838  4A3A  7C 58B3           	xcall	_s_transstart
  3839                          	
  3840                          	line	194
  3841                          ;shtxx.c: 194: switch(mode){
  3842  4A3D  7D 4A8B           	xjmp	l112
  3843                          	line	195
  3844                          ;shtxx.c: 195: case TEMP : error+=s_write_byte(0x03); break;
  3845                          ;			
  3846  4A40                    l113:	
  3847  4A40  50 03             	mov	a,<((03h))
  3848  4A42  70 CF             	and	f, 0xCF   ;select user reg space
  3849  4A44  62 D0 00          	mov	reg[CUR_PP],0
  3850  4A47  53 22             	mov	[0+((?_s_write_byte)^0x0)],a
  3851  4A49  71 80             	or	f, 0x80	;select multiple RAM page mode
  3852                          	
  3853  4A4B  7C 5912           	xcall	_s_write_byte
  3854                          	
  3855  4A4E  70 CF             	and	f, 0xCF   ;select user reg space
  3856  4A50  62 D0 00          	mov	reg[CUR_PP],0
  3857  4A53  53 1E             	mov	[(??_s_measure^0x0)+4+0],a
  3858  4A55  51 1B             	mov	a,[1+((s_measure@error)^0x0)]
  3859  4A57  02 1E             	add	a,[(??_s_measure^0x0)+4+0]
  3860  4A59  53 1B             	mov	[1+((s_measure@error)^0x0)],a
  3861  4A5B  51 1A             	mov	a,[0+((s_measure@error)^0x0)]
  3862  4A5D  09 00             	adc	a,0
  3863  4A5F  53 1A             	mov	[0+((s_measure@error)^0x0)],a
  3864  4A61  7D 4A9A           	xjmp	l111
  3865                          	line	196
  3866                          ;shtxx.c: 196: case HUMI : error+=s_write_byte(0x05); break;
  3867                          ;			
  3868  4A64                    l114:	
  3869  4A64  50 05             	mov	a,<((05h))
  3870  4A66  70 CF             	and	f, 0xCF   ;select user reg space
  3871  4A68  62 D0 00          	mov	reg[CUR_PP],0
  3872  4A6B  53 22             	mov	[0+((?_s_write_byte)^0x0)],a
  3873  4A6D  71 80             	or	f, 0x80	;select multiple RAM page mode
  3874                          	
  3875  4A6F  7C 5912           	xcall	_s_write_byte
  3876                          	
  3877  4A72  70 CF             	and	f, 0xCF   ;select user reg space
  3878  4A74  62 D0 00          	mov	reg[CUR_PP],0
  3879  4A77  53 1E             	mov	[(??_s_measure^0x0)+4+0],a
  3880  4A79  51 1B             	mov	a,[1+((s_measure@error)^0x0)]
  3881  4A7B  02 1E             	add	a,[(??_s_measure^0x0)+4+0]
  3882  4A7D  53 1B             	mov	[1+((s_measure@error)^0x0)],a
  3883  4A7F  51 1A             	mov	a,[0+((s_measure@error)^0x0)]
  3884  4A81  09 00             	adc	a,0
  3885  4A83  53 1A             	mov	[0+((s_measure@error)^0x0)],a
  3886  4A85  7D 4A9A           	xjmp	l111
  3887                          	line	197
  3888                          ;shtxx.c: 197: default : break;
  3889                          ;			
  3890  4A88                    l115:	
  3891  4A88  7D 4A9A           	xjmp	l111
  3892                          	line	194
  3893                          ;			
  3894  4A8B                    l112:	
  3895  4A8B  70 CF             	and	f, 0xCF   ;select user reg space
  3896  4A8D  62 D0 00          	mov	reg[CUR_PP],0
  3897  4A90  51 19             	mov	a,[0+((s_measure@mode)^0x0)]
  3898  4A92  AFAD              		jz	l113
  3899  4A94  78                	dec	a
  3900  4A95  AFCE              	jz	l114
  3901  4A97  7D 4A88           	xjmp	l115
  3902                          
  3903                          	line	198
  3904                          ;			
  3905  4A9A                    l111:	
  3906                          	line	199
  3907                          ;shtxx.c: 199: for (i=0;i<65535;i++) {
  3908  4A9A  50 00             	mov	a,<(0)
  3909  4A9C  70 CF             	and	f, 0xCF   ;select user reg space
  3910  4A9E  62 D0 00          	mov	reg[CUR_PP],0
  3911  4AA1  53 1D             	mov	[1+((s_measure@i)^0x0)],a
  3912  4AA3  50 00             	mov	a,>(0)
  3913  4AA5  53 1C             	mov	[0+((s_measure@i)^0x0)],a
  3914  4AA7  51 1C             	mov	a,[0+((s_measure@i)^0x0)]
  3915  4AA9  39 FF             	cmp	a,>(0FFFFh)
  3916  4AAB  B005              	jnz	u1373
  3917  4AAD  51 1D             	mov	a,[1+((s_measure@i)^0x0)]
  3918  4AAF  39 FF             	cmp	a,<(0FFFFh)
  3919  4AB1                    u1373:
  3920  4AB1  B004              	jnz	l116
  3921  4AB3  7D 4ADB           	xjmp	l117
  3922                          ;			
  3923  4AB6                    l116:	
  3924                          	line	200
  3925                          ;shtxx.c: 200: if(PRT2DR&0x02==0) break;
  3926  4AB6  7D 4AB9           	xjmp	l119
  3927                          ;			
  3928  4AB9                    l119:	
  3929                          	line	201
  3930                          ;shtxx.c: 201: delay_5us();
  3931  4AB9  71 80             	or	f, 0x80	;select multiple RAM page mode
  3932                          	
  3933  4ABB  7C 6E6C           	xcall	_delay_5us
  3934                          	
  3935                          	line	199
  3936  4ABE  70 CF             	and	f, 0xCF   ;select user reg space
  3937  4AC0  62 D0 00          	mov	reg[CUR_PP],0
  3938  4AC3  51 1D             	mov	a,[1+((s_measure@i)^0x0)]
  3939  4AC5  01 01             	add	a,<(01h)
  3940  4AC7  53 1D             	mov	[1+((s_measure@i)^0x0)],a
  3941  4AC9  51 1C             	mov	a,[0+((s_measure@i)^0x0)]
  3942  4ACB  09 00             	adc	a,>(01h)
  3943  4ACD  53 1C             	mov	[0+((s_measure@i)^0x0)],a
  3944  4ACF  51 1C             	mov	a,[0+((s_measure@i)^0x0)]
  3945  4AD1  39 FF             	cmp	a,>(0FFFFh)
  3946  4AD3  B005              	jnz	u1383
  3947  4AD5  51 1D             	mov	a,[1+((s_measure@i)^0x0)]
  3948  4AD7  39 FF             	cmp	a,<(0FFFFh)
  3949  4AD9                    u1383:
  3950  4AD9  BFDC              	jnz	l116
  3951                          ;			
  3952  4ADB                    l117:	
  3953                          	line	207
  3954                          ;shtxx.c: 205: }
  3955                          ;shtxx.c: 207: if(PRT2DR&0x02) error+=1;
  3956  4ADB  70 CF             	and	f, 0xCF   ;select user reg space
  3957  4ADD  49 08 02          	tst	reg[(8)],(02h)
  3958  4AE0  A012              	jz	l120
  3959  4AE2  70 CF             	and	f, 0xCF   ;select user reg space
  3960  4AE4  62 D0 00          	mov	reg[CUR_PP],0
  3961  4AE7  51 1B             	mov	a,[1+((s_measure@error)^0x0)]
  3962  4AE9  01 01             	add	a,<(01h)
  3963  4AEB  53 1B             	mov	[1+((s_measure@error)^0x0)],a
  3964  4AED  51 1A             	mov	a,[0+((s_measure@error)^0x0)]
  3965  4AEF  09 00             	adc	a,>(01h)
  3966  4AF1  53 1A             	mov	[0+((s_measure@error)^0x0)],a
  3967                          ;			
  3968  4AF3                    l120:	
  3969                          	line	208
  3970                          ;shtxx.c: 208: *(p_value) =s_read_byte(1);
  3971  4AF3  50 01             	mov	a,<((01h))
  3972  4AF5  70 CF             	and	f, 0xCF   ;select user reg space
  3973  4AF7  62 D0 00          	mov	reg[CUR_PP],0
  3974  4AFA  53 22             	mov	[0+((?_s_read_byte)^0x0)],a
  3975  4AFC  71 80             	or	f, 0x80	;select multiple RAM page mode
  3976                          	
  3977  4AFE  7C 59AC           	xcall	_s_read_byte
  3978                          	
  3979  4B01  08                	push	a
  3980  4B02  70 CF             	and	f, 0xCF   ;select user reg space
  3981  4B04  62 D0 00          	mov	reg[CUR_PP],0
  3982  4B07  51 15             	mov	a,[0+((s_measure@p_value)^0x0)]
  3983  4B09  08                	push	a
  3984  4B0A  58 16             	mov	x,[1+((s_measure@p_value)^0x0)]
  3985  4B0C  18                	pop	a
  3986  4B0D  60 D3             	mov	reg[0xd3],a
  3987  4B0F  18                	pop	a
  3988  4B10  54 00             	mov	[0+x],a
  3989                          	line	209
  3990                          ;shtxx.c: 209: *(p_value+1)=s_read_byte(1);
  3991  4B12  50 01             	mov	a,<((01h))
  3992  4B14  53 22             	mov	[0+((?_s_read_byte)^0x0)],a
  3993  4B16  71 80             	or	f, 0x80	;select multiple RAM page mode
  3994                          	
  3995  4B18  7C 59AC           	xcall	_s_read_byte
  3996                          	
  3997  4B1B  70 CF             	and	f, 0xCF   ;select user reg space
  3998  4B1D  62 D0 00          	mov	reg[CUR_PP],0
  3999  4B20  5F 1E  15         	mov	[(??_s_measure^0x0)+4+0],[((s_measure@p_value)^0x0)]
  4000  4B23  5F 1F  16         	mov	[(??_s_measure^0x0)+4+0+1],[((s_measure@p_value+1)^0x0)]
  4001  4B26  06 1F  01         	add	[(??_s_measure^0x0)+4+1],<((01h))
  4002  4B29  08                	push	a
  4003  4B2A  51 1E             	mov	a,[(??_s_measure^0x0)+4+0]
  4004  4B2C  08                	push	a
  4005  4B2D  58 1F             	mov	x,[(??_s_measure^0x0)+4+1]
  4006  4B2F  18                	pop	a
  4007  4B30  60 D3             	mov	reg[0xd3],a
  4008  4B32  18                	pop	a
  4009  4B33  54 00             	mov	[0+x],a
  4010                          	line	210
  4011                          ;shtxx.c: 210: *p_checksum =s_read_byte(0);
  4012  4B35  50 00             	mov	a,<((0))
  4013  4B37  53 22             	mov	[0+((?_s_read_byte)^0x0)],a
  4014  4B39  71 80             	or	f, 0x80	;select multiple RAM page mode
  4015                          	
  4016  4B3B  7C 59AC           	xcall	_s_read_byte
  4017                          	
  4018  4B3E  08                	push	a
  4019  4B3F  70 CF             	and	f, 0xCF   ;select user reg space
  4020  4B41  62 D0 00          	mov	reg[CUR_PP],0
  4021  4B44  51 17             	mov	a,[0+((s_measure@p_checksum)^0x0)]
  4022  4B46  08                	push	a
  4023  4B47  58 18             	mov	x,[1+((s_measure@p_checksum)^0x0)]
  4024  4B49  18                	pop	a
  4025  4B4A  60 D3             	mov	reg[0xd3],a
  4026  4B4C  18                	pop	a
  4027  4B4D  54 00             	mov	[0+x],a
  4028                          	line	212
  4029                          ;shtxx.c: 212: return error;
  4030  4B4F  70 CF             	and	f, 0xCF   ;select user reg space
  4031  4B51  62 D0 00          	mov	reg[CUR_PP],0
  4032  4B54  51 1B             	mov	a,[0+((0+s_measure@error+01h)^0x0)]
  4033  4B56  7D 4B59           	xjmp	l110
  4034                          	line	214
  4035                          ;shtxx.c: 214: }
  4036  4B59                    l110:
  4037                          ;			
  4038  4B59  70 CF             	and	f, 0xCF   ;select user reg space
  4039                          	
  4040  4B5B  7F                	ret
  4041                          GLOBAL __end_of_s_measure
  4042  4B5C                    	__end_of_s_measure:
  4043                          	FNSIZE	_s_measure,8,5
  4044                          ; =============== function _s_measure ends ============
  4045                          
  4046                          	signat	_s_measure,12409
  4047                          	global	_LTRX_EnableInt
  4048                          	global	_LTRX_CmdReset
  4049                          	global	_orcon_Start
  4050                          	global	??_orcon_Start
  4051                          	global	?_orcon_Start
  4052                          	psect	text
  4053                          
  4054                          ; *************** function _orcon_Start *****************
  4055                          ; Defined at:
  4056                          ;		line 25 in file "./orcon.c"
  4057                          ; Parameters:
  4058                          ;		None
  4059                          ; Auto variables:
  4060                          ;		None
  4061                          ; Return value:
  4062                          ;		type: void 
  4063                          ;		size: 0
  4064                          ; Registers used:
  4065                          ;		a
  4066                          ; Tracked objects:
  4067                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4068                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4069                          ;		Unchanged: 
  4070                          ; Data sizes:
  4071                          ;		Autos:    0
  4072                          ;		Params:   0
  4073                          ;		Temp:     0
  4074                          ;		Total:    0
  4075                          ; This function calls:
  4076                          ;		Nothing
  4077                          ; This function is called by:
  4078                          ;		_hardware_init
  4079                          ; This function uses a non-reentrant model
  4080                          ; 
  4081                          	file	"./orcon.c"
  4082                          	line	25
  4083  000B                    	__size_of_orcon_Start	equ	__end_of_orcon_Start-_orcon_Start
  4084                          ;orcon.c: 25: void orcon_Start(){
  4085                          ;			
  4086  4B5C                    _orcon_Start:	
  4087                          	opt	disable
  4088                          	line	26
  4089                          ;orcon.c: 26: (PRT0DR = PRT0DR | 0x2A);
  4090  4B5C  70 CF             	and	f, 0xCF   ;select user reg space
  4091  4B5E  5D 00             	mov	a,reg[(0)]
  4092  4B60  29 2A             	or	a,<((02Ah))
  4093  4B62  60 00             	mov	reg[(0)],a
  4094                          	line	27
  4095                          ;orcon.c: 27: };
  4096  4B64                    l68:
  4097                          ;			
  4098  4B64  70 CF             	and	f, 0xCF   ;select user reg space
  4099                          	
  4100  4B66  7F                	ret
  4101                          GLOBAL __end_of_orcon_Start
  4102  4B67                    	__end_of_orcon_Start:
  4103                          	FNSIZE	_orcon_Start,0,0
  4104                          ; =============== function _orcon_Start ends ============
  4105                          
  4106                          	signat	_orcon_Start,88
  4107                          	global	_LTRX_Start
  4108                          	global	_printf
  4109                          	global	??_printf
  4110                          	global	?_printf
  4111                          	psect	text
  4112                          
  4113                          ; *************** function _printf *****************
  4114                          ; Defined at:
  4115                          ;		line 453 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  4116                          ; Parameters:
  4117                          ;		f           	offs:   0	type: PTR const unsigned char ; Largest target is 101
  4118                          ;		 -> STR_25(43), STR_23(15), STR_22(17), STR_21(17), 
  4119                          ;		 -> STR_20(17), STR_19(14), STR_18(17), STR_11(54), 
  4120                          ;		 -> STR_10(23), STR_8(9), STR_7(19), STR_6(21), 
  4121                          ;		 -> STR_5(101), STR_4(62), 
  4122                          ; Auto variables:
  4123                          ;		fval        	       	type: PTR const unsigned char 
  4124                          ;		_val        	       	type: struct .
  4125                          ;		integ       	       	type: struct .
  4126                          ;		ival        	       	type: struct .
  4127                          ;		prec        	       	type: int 
  4128                          ;		exp         	       	type: int 
  4129                          ;		width       	       	type: int 
  4130                          ;		flag        	       	type: unsigned short 
  4131                          ;		ap          	       	type: PTR void [1]
  4132                          ;		c           	       	type: char 
  4133                          ;		d           	       	type: unsigned char 
  4134                          ; Return value:
  4135                          ;		type: int 
  4136                          ;		size: 2
  4137                          ; Registers used:
  4138                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4139                          ; Tracked objects:
  4140                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4141                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4142                          ;		Unchanged: 
  4143                          ; Data sizes:
  4144                          ;		Autos:   23
  4145                          ;		Params:  14
  4146                          ;		Temp:     7
  4147                          ;		Total:   44
  4148                          ; This function calls:
  4149                          ;		_putch
  4150                          ;		_isdigit
  4151                          ;		___wmul
  4152                          ;		___flge
  4153                          ;		___flneg
  4154                          ;		___awdiv
  4155                          ;		_scale
  4156                          ;		___flmul
  4157                          ;		_fround
  4158                          ;		___fladd
  4159                          ;		___fltol
  4160                          ;		__div_to_l_
  4161                          ;		___lltofl
  4162                          ;		___flsub
  4163                          ;		___lldiv
  4164                          ;		___llmod
  4165                          ; This function is called by:
  4166                          ;		_print_help
  4167                          ;		_main
  4168                          ;		_orcon_low
  4169                          ;		_orcon_med
  4170                          ;		_orcon_high
  4171                          ;		_s_do_measure
  4172                          ; This function uses a non-reentrant model
  4173                          ; 
  4174                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  4175                          	line	453
  4176  0C17                    	__size_of_printf	equ	__end_of_printf-_printf
  4177                          ;doprnt.c: 443: int
  4178                          ;doprnt.c: 452: printf(const char * f, ...)
  4179                          ;doprnt.c: 453: {
  4180                          ;			
  4181  4B67                    _printf:	
  4182                          	opt	disable
  4183                          	line	529
  4184                          ;doprnt.c: 454: va_list ap;
  4185                          ;doprnt.c: 486: signed char c;
  4186                          ;doprnt.c: 488: int width;
  4187                          ;doprnt.c: 491: int prec;
  4188                          ;doprnt.c: 495: unsigned short flag;
  4189                          ;doprnt.c: 502: char d;
  4190                          ;doprnt.c: 503: double fval, integ;
  4191                          ;doprnt.c: 504: int exp;
  4192                          ;doprnt.c: 505: double ival;
  4193                          ;doprnt.c: 506: union {
  4194                          ;doprnt.c: 507: unsigned long _val;
  4195                          ;doprnt.c: 508: struct {
  4196                          ;doprnt.c: 509: const char * _cp;
  4197                          ;doprnt.c: 510: unsigned _len;
  4198                          ;doprnt.c: 511: } _str;
  4199                          ;doprnt.c: 512: } _val;
  4200                          ;doprnt.c: 529: *ap = __va_start();
  4201  4B67  50 15             	mov	a,<((?_printf|8000h))
  4202  4B69  01 02             	add	a,<(02h)
  4203  4B6B  70 CF             	and	f, 0xCF   ;select user reg space
  4204  4B6D  62 D0 00          	mov	reg[CUR_PP],0
  4205  4B70  53 38             	mov	[1+((printf@ap)^0x0)],a
  4206  4B72  50 80             	mov	a,>((?_printf|8000h))
  4207  4B74  09 00             	adc	a,>(02h)
  4208  4B76  53 37             	mov	[0+((printf@ap)^0x0)],a
  4209                          	line	532
  4210                          ;doprnt.c: 532: while(c = *f++) {
  4211  4B78  7D 575F           	xjmp	l150
  4212                          ;			
  4213  4B7B                    l151:	
  4214                          	line	534
  4215                          ;doprnt.c: 534: if(c != '%')
  4216  4B7B  70 CF             	and	f, 0xCF   ;select user reg space
  4217  4B7D  62 D0 00          	mov	reg[CUR_PP],0
  4218  4B80  51 39             	mov	a,[0+((printf@c)^0x0)]
  4219  4B82  39 25             	cmp	a,(025h)
  4220  4B84  A012              	jz	l153
  4221                          	line	537
  4222                          ;doprnt.c: 536: {
  4223                          ;doprnt.c: 537: (putch(c) );
  4224  4B86  70 CF             	and	f, 0xCF   ;select user reg space
  4225  4B88  62 D0 00          	mov	reg[CUR_PP],0
  4226  4B8B  51 39             	mov	a,[0+((printf@c)^0x0)]
  4227  4B8D  53 41             	mov	[0+((?_putch)^0x0)],a
  4228  4B8F  71 80             	or	f, 0x80	;select multiple RAM page mode
  4229                          	
  4230  4B91  7C 5840           	xcall	_putch
  4231                          	
  4232                          	line	538
  4233                          ;doprnt.c: 538: continue;
  4234  4B94  7D 575F           	xjmp	l150
  4235                          	line	539
  4236                          ;			
  4237  4B97                    l153:	
  4238                          	line	542
  4239                          ;doprnt.c: 539: }
  4240                          ;doprnt.c: 542: width = 0;
  4241  4B97  50 00             	mov	a,<(0)
  4242  4B99  70 CF             	and	f, 0xCF   ;select user reg space
  4243  4B9B  62 D0 00          	mov	reg[CUR_PP],0
  4244  4B9E  53 34             	mov	[1+((printf@width)^0x0)],a
  4245  4BA0  50 00             	mov	a,>(0)
  4246  4BA2  53 33             	mov	[0+((printf@width)^0x0)],a
  4247                          	line	544
  4248                          ;doprnt.c: 544: flag = 0;
  4249  4BA4  50 00             	mov	a,<(0)
  4250  4BA6  53 36             	mov	[1+((printf@flag)^0x0)],a
  4251  4BA8  50 00             	mov	a,>(0)
  4252  4BAA  53 35             	mov	[0+((printf@flag)^0x0)],a
  4253                          	line	593
  4254                          ;doprnt.c: 593: if(isdigit((unsigned)*f)) {
  4255  4BAC  70 CF             	and	f, 0xCF   ;select user reg space
  4256  4BAE  62 D0 00          	mov	reg[CUR_PP],0
  4257  4BB1  51 15             	mov	a,[0+((printf@f)^0x0)]
  4258  4BB3  58 16             	mov	x,[1+((printf@f)^0x0)]
  4259  4BB5  28                	romx
  4260  4BB6  53 41             	mov	[0+((?_isdigit)^0x0)],a
  4261  4BB8  71 80             	or	f, 0x80	;select multiple RAM page mode
  4262                          	
  4263  4BBA  7C 696A           	xcall	_isdigit
  4264                          	
  4265  4BBD  D06D              	jnc	l154
  4266                          	line	594
  4267                          ;doprnt.c: 594: width = 0;
  4268  4BBF  50 00             	mov	a,<(0)
  4269  4BC1  70 CF             	and	f, 0xCF   ;select user reg space
  4270  4BC3  62 D0 00          	mov	reg[CUR_PP],0
  4271  4BC6  53 34             	mov	[1+((printf@width)^0x0)],a
  4272  4BC8  50 00             	mov	a,>(0)
  4273  4BCA  53 33             	mov	[0+((printf@width)^0x0)],a
  4274                          	line	595
  4275                          ;doprnt.c: 595: do
  4276                          ;			
  4277  4BCC                    l157:	
  4278                          	line	596
  4279                          ;doprnt.c: 596: width = width*10 + *f++ - '0';
  4280  4BCC  70 CF             	and	f, 0xCF   ;select user reg space
  4281  4BCE  62 D0 00          	mov	reg[CUR_PP],0
  4282  4BD1  51 15             	mov	a,[0+((printf@f)^0x0)]
  4283  4BD3  58 16             	mov	x,[1+((printf@f)^0x0)]
  4284  4BD5  28                	romx
  4285  4BD6  53 3A             	mov	[(??_printf^0x0)+23+0],a
  4286  4BD8  51 33             	mov	a,[0+((printf@width)^0x0)]
  4287  4BDA  08                	push	a
  4288  4BDB  51 34             	mov	a,[1+((printf@width)^0x0)]
  4289  4BDD  53 42             	mov	[1+((?___wmul)^0x0)],a
  4290  4BDF  18                	pop	a
  4291  4BE0  53 41             	mov	[0+((?___wmul)^0x0)],a
  4292  4BE2  50 0A             	mov	a,<(0Ah)
  4293  4BE4  53 44             	mov	[1+((0+?___wmul+02h)^0x0)],a
  4294  4BE6  50 00             	mov	a,>(0Ah)
  4295  4BE8  53 43             	mov	[0+((0+?___wmul+02h)^0x0)],a
  4296  4BEA  71 80             	or	f, 0x80	;select multiple RAM page mode
  4297                          	
  4298  4BEC  7C 5D72           	xcall	___wmul
  4299                          	
  4300  4BEF  70 CF             	and	f, 0xCF   ;select user reg space
  4301  4BF1  62 D0 00          	mov	reg[CUR_PP],0
  4302  4BF4  5A 3B             	mov	[(??_printf^0x0)+24+0],x
  4303  4BF6  53 3C             	mov	[(??_printf^0x0)+24+0+1],a
  4304  4BF8  51 3C             	mov	a,[(??_printf^0x0)+24+1]
  4305  4BFA  02 3A             	add	a,[(??_printf^0x0)+23+0]
  4306  4BFC  53 3E             	mov	[(??_printf^0x0)+26+0+1],a
  4307  4BFE  51 3B             	mov	a,[(??_printf^0x0)+24+0]
  4308  4C00  09 00             	adc	a,0
  4309  4C02  53 3D             	mov	[(??_printf^0x0)+26+0],a
  4310  4C04  51 3E             	mov	a,[(??_printf^0x0)+26+1]
  4311  4C06  01 D0             	add	a,<(-48)
  4312  4C08  53 34             	mov	[1+((printf@width)^0x0)],a
  4313  4C0A  51 3D             	mov	a,[(??_printf^0x0)+26+0]
  4314  4C0C  09 FF             	adc	a,>(-48)
  4315  4C0E  53 33             	mov	[0+((printf@width)^0x0)],a
  4316  4C10  70 CF             	and	f, 0xCF   ;select user reg space
  4317  4C12  62 D0 00          	mov	reg[CUR_PP],0
  4318  4C15  06 16  01         	add	[1+((printf@f)^0x0)],<((01h))
  4319                          	line	597
  4320                          ;doprnt.c: 597: while(isdigit((unsigned)*f));
  4321  4C18  70 CF             	and	f, 0xCF   ;select user reg space
  4322  4C1A  62 D0 00          	mov	reg[CUR_PP],0
  4323  4C1D  51 15             	mov	a,[0+((printf@f)^0x0)]
  4324  4C1F  58 16             	mov	x,[1+((printf@f)^0x0)]
  4325  4C21  28                	romx
  4326  4C22  53 41             	mov	[0+((?_isdigit)^0x0)],a
  4327  4C24  71 80             	or	f, 0x80	;select multiple RAM page mode
  4328                          	
  4329  4C26  7C 696A           	xcall	_isdigit
  4330                          	
  4331  4C29  CFA2              	jc	l157
  4332                          ;			
  4333  4C2B                    l156:	
  4334                          	line	603
  4335                          ;			
  4336  4C2B                    l154:	
  4337                          	line	606
  4338                          ;doprnt.c: 603: }
  4339                          ;doprnt.c: 606: if(*f == '.') {
  4340  4C2B  70 CF             	and	f, 0xCF   ;select user reg space
  4341  4C2D  62 D0 00          	mov	reg[CUR_PP],0
  4342  4C30  51 15             	mov	a,[0+((printf@f)^0x0)]
  4343  4C32  58 16             	mov	x,[1+((printf@f)^0x0)]
  4344  4C34  28                	romx
  4345  4C35  39 2E             	cmp	a,(02Eh)
  4346  4C37  B07B              	jnz	l158
  4347                          	line	607
  4348                          ;doprnt.c: 607: f++;
  4349  4C39  70 CF             	and	f, 0xCF   ;select user reg space
  4350  4C3B  62 D0 00          	mov	reg[CUR_PP],0
  4351  4C3E  06 16  01         	add	[1+((printf@f)^0x0)],<((01h))
  4352                          	line	615
  4353                          ;doprnt.c: 614: {
  4354                          ;doprnt.c: 615: prec = 0;
  4355  4C41  50 00             	mov	a,<(0)
  4356  4C43  70 CF             	and	f, 0xCF   ;select user reg space
  4357  4C45  62 D0 00          	mov	reg[CUR_PP],0
  4358  4C48  53 30             	mov	[1+((printf@prec)^0x0)],a
  4359  4C4A  50 00             	mov	a,>(0)
  4360  4C4C  53 2F             	mov	[0+((printf@prec)^0x0)],a
  4361                          	line	616
  4362                          ;doprnt.c: 616: while(isdigit((unsigned)*f))
  4363  4C4E  7D 4C9D           	xjmp	l159
  4364                          ;			
  4365  4C51                    l160:	
  4366                          	line	617
  4367                          ;doprnt.c: 617: prec = prec*10 + *f++ - '0';
  4368  4C51  70 CF             	and	f, 0xCF   ;select user reg space
  4369  4C53  62 D0 00          	mov	reg[CUR_PP],0
  4370  4C56  51 15             	mov	a,[0+((printf@f)^0x0)]
  4371  4C58  58 16             	mov	x,[1+((printf@f)^0x0)]
  4372  4C5A  28                	romx
  4373  4C5B  53 3A             	mov	[(??_printf^0x0)+23+0],a
  4374  4C5D  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  4375  4C5F  08                	push	a
  4376  4C60  51 30             	mov	a,[1+((printf@prec)^0x0)]
  4377  4C62  53 42             	mov	[1+((?___wmul)^0x0)],a
  4378  4C64  18                	pop	a
  4379  4C65  53 41             	mov	[0+((?___wmul)^0x0)],a
  4380  4C67  50 0A             	mov	a,<(0Ah)
  4381  4C69  53 44             	mov	[1+((0+?___wmul+02h)^0x0)],a
  4382  4C6B  50 00             	mov	a,>(0Ah)
  4383  4C6D  53 43             	mov	[0+((0+?___wmul+02h)^0x0)],a
  4384  4C6F  71 80             	or	f, 0x80	;select multiple RAM page mode
  4385                          	
  4386  4C71  7C 5D72           	xcall	___wmul
  4387                          	
  4388  4C74  70 CF             	and	f, 0xCF   ;select user reg space
  4389  4C76  62 D0 00          	mov	reg[CUR_PP],0
  4390  4C79  5A 3B             	mov	[(??_printf^0x0)+24+0],x
  4391  4C7B  53 3C             	mov	[(??_printf^0x0)+24+0+1],a
  4392  4C7D  51 3C             	mov	a,[(??_printf^0x0)+24+1]
  4393  4C7F  02 3A             	add	a,[(??_printf^0x0)+23+0]
  4394  4C81  53 3E             	mov	[(??_printf^0x0)+26+0+1],a
  4395  4C83  51 3B             	mov	a,[(??_printf^0x0)+24+0]
  4396  4C85  09 00             	adc	a,0
  4397  4C87  53 3D             	mov	[(??_printf^0x0)+26+0],a
  4398  4C89  51 3E             	mov	a,[(??_printf^0x0)+26+1]
  4399  4C8B  01 D0             	add	a,<(-48)
  4400  4C8D  53 30             	mov	[1+((printf@prec)^0x0)],a
  4401  4C8F  51 3D             	mov	a,[(??_printf^0x0)+26+0]
  4402  4C91  09 FF             	adc	a,>(-48)
  4403  4C93  53 2F             	mov	[0+((printf@prec)^0x0)],a
  4404  4C95  70 CF             	and	f, 0xCF   ;select user reg space
  4405  4C97  62 D0 00          	mov	reg[CUR_PP],0
  4406  4C9A  06 16  01         	add	[1+((printf@f)^0x0)],<((01h))
  4407                          ;			
  4408  4C9D                    l159:	
  4409                          	line	616
  4410  4C9D  70 CF             	and	f, 0xCF   ;select user reg space
  4411  4C9F  62 D0 00          	mov	reg[CUR_PP],0
  4412  4CA2  51 15             	mov	a,[0+((printf@f)^0x0)]
  4413  4CA4  58 16             	mov	x,[1+((printf@f)^0x0)]
  4414  4CA6  28                	romx
  4415  4CA7  53 41             	mov	[0+((?_isdigit)^0x0)],a
  4416  4CA9  71 80             	or	f, 0x80	;select multiple RAM page mode
  4417                          	
  4418  4CAB  7C 696A           	xcall	_isdigit
  4419                          	
  4420  4CAE  CFA2              	jc	l160
  4421                          ;			
  4422  4CB0                    l161:	
  4423                          	line	619
  4424                          ;doprnt.c: 618: }
  4425                          ;doprnt.c: 619: } else {
  4426  4CB0  7D 4CCC           	xjmp	l162
  4427                          ;			
  4428  4CB3                    l158:	
  4429                          	line	620
  4430                          ;doprnt.c: 620: prec = 0;
  4431  4CB3  50 00             	mov	a,<(0)
  4432  4CB5  70 CF             	and	f, 0xCF   ;select user reg space
  4433  4CB7  62 D0 00          	mov	reg[CUR_PP],0
  4434  4CBA  53 30             	mov	[1+((printf@prec)^0x0)],a
  4435  4CBC  50 00             	mov	a,>(0)
  4436  4CBE  53 2F             	mov	[0+((printf@prec)^0x0)],a
  4437                          	line	622
  4438                          ;doprnt.c: 622: flag |= 0x1000;
  4439  4CC0  51 36             	mov	a,[1+((printf@flag)^0x0)]
  4440  4CC2  29 00             	or	a,<(01000h)
  4441  4CC4  53 36             	mov	[1+((printf@flag)^0x0)],a
  4442  4CC6  51 35             	mov	a,[0+((printf@flag)^0x0)]
  4443  4CC8  29 10             	or	a,>(01000h)
  4444  4CCA  53 35             	mov	[0+((printf@flag)^0x0)],a
  4445                          	line	624
  4446                          ;			
  4447  4CCC                    l162:	
  4448                          	line	629
  4449                          ;doprnt.c: 624: }
  4450                          ;doprnt.c: 629: switch(c = *f++) {
  4451  4CCC  7D 4CE9           	xjmp	l164
  4452                          	line	631
  4453                          ;doprnt.c: 631: case 0:
  4454                          ;			
  4455  4CCF                    l165:	
  4456                          	line	632
  4457                          ;doprnt.c: 632: goto alldone;
  4458  4CCF  7D 5778           	xjmp	l166
  4459                          	line	656
  4460                          ;doprnt.c: 656: case 'f':
  4461                          ;			
  4462  4CD2                    l167:	
  4463                          	line	657
  4464                          ;doprnt.c: 657: flag |= 0x400;
  4465  4CD2  70 CF             	and	f, 0xCF   ;select user reg space
  4466  4CD4  62 D0 00          	mov	reg[CUR_PP],0
  4467  4CD7  51 36             	mov	a,[1+((printf@flag)^0x0)]
  4468  4CD9  29 00             	or	a,<(0400h)
  4469  4CDB  53 36             	mov	[1+((printf@flag)^0x0)],a
  4470  4CDD  51 35             	mov	a,[0+((printf@flag)^0x0)]
  4471  4CDF  29 04             	or	a,>(0400h)
  4472  4CE1  53 35             	mov	[0+((printf@flag)^0x0)],a
  4473                          	line	658
  4474                          ;doprnt.c: 658: break;
  4475  4CE3  7D 4D0A           	xjmp	l163
  4476                          	line	796
  4477                          ;doprnt.c: 796: default:
  4478                          ;			
  4479  4CE6                    l168:	
  4480                          	line	807
  4481                          ;doprnt.c: 807: continue;
  4482  4CE6  7D 575F           	xjmp	l150
  4483                          	line	629
  4484                          ;			
  4485  4CE9                    l164:	
  4486  4CE9  70 CF             	and	f, 0xCF   ;select user reg space
  4487  4CEB  62 D0 00          	mov	reg[CUR_PP],0
  4488  4CEE  51 15             	mov	a,[0+((printf@f)^0x0)]
  4489  4CF0  58 16             	mov	x,[1+((printf@f)^0x0)]
  4490  4CF2  06 16  01         	add	[1+((printf@f)^0x0)],<(01h)
  4491  4CF5  0E 15  00         	adc	[0+((printf@f)^0x0)],>(01h)
  4492  4CF8  28                	romx
  4493  4CF9  53 3A             	mov	[(??_printf^0x0)+23+0],a
  4494  4CFB  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  4495  4CFD  53 39             	mov	[0+((printf@c)^0x0)],a
  4496  4CFF  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  4497  4D01  AFCD              		jz	l165
  4498  4D03  11 66             	sub	a,102
  4499  4D05  AFCC              	jz	l167
  4500  4D07  7D 4CE6           	xjmp	l168
  4501                          
  4502                          	line	816
  4503                          ;			
  4504  4D0A                    l163:	
  4505                          	line	819
  4506                          ;doprnt.c: 819: if(flag & (0x700)) {
  4507  4D0A  70 CF             	and	f, 0xCF   ;select user reg space
  4508  4D0C  62 D0 00          	mov	reg[CUR_PP],0
  4509  4D0F  51 36             	mov	a,[1+((printf@flag)^0x0)]
  4510  4D11  21 00             	and	a,<(0700h)
  4511  4D13  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  4512  4D15  51 35             	mov	a,[0+((printf@flag)^0x0)]
  4513  4D17  21 07             	and	a,>(0700h)
  4514  4D19  53 3A             	mov	[(??_printf^0x0)+23+0],a
  4515  4D1B  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  4516  4D1D  39 00             	cmp	a,>(0)
  4517  4D1F  B005              	jnz	u1393
  4518  4D21  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  4519  4D23  39 00             	cmp	a,<(0)
  4520  4D25                    u1393:
  4521  4D25  B004 7D 558E      	jz	l169
  4522                          	line	821
  4523                          ;doprnt.c: 821: if(flag & 0x1000)
  4524  4D2A  70 CF             	and	f, 0xCF   ;select user reg space
  4525  4D2C  62 D0 00          	mov	reg[CUR_PP],0
  4526  4D2F  51 36             	mov	a,[1+((printf@flag)^0x0)]
  4527  4D31  21 00             	and	a,<(01000h)
  4528  4D33  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  4529  4D35  51 35             	mov	a,[0+((printf@flag)^0x0)]
  4530  4D37  21 10             	and	a,>(01000h)
  4531  4D39  53 3A             	mov	[(??_printf^0x0)+23+0],a
  4532  4D3B  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  4533  4D3D  39 00             	cmp	a,>(0)
  4534  4D3F  B005              	jnz	u1403
  4535  4D41  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  4536  4D43  39 00             	cmp	a,<(0)
  4537  4D45                    u1403:
  4538  4D45  A00E              	jz	l170
  4539                          	line	823
  4540                          ;doprnt.c: 823: prec = 6;
  4541  4D47  50 06             	mov	a,<(06h)
  4542  4D49  70 CF             	and	f, 0xCF   ;select user reg space
  4543  4D4B  62 D0 00          	mov	reg[CUR_PP],0
  4544  4D4E  53 30             	mov	[1+((printf@prec)^0x0)],a
  4545  4D50  50 00             	mov	a,>(06h)
  4546  4D52  53 2F             	mov	[0+((printf@prec)^0x0)],a
  4547                          ;			
  4548  4D54                    l170:	
  4549                          	line	824
  4550                          ;doprnt.c: 824: fval = (*(double *)__va_arg((*(double **)ap)));
  4551  4D54  70 CF             	and	f, 0xCF   ;select user reg space
  4552  4D56  62 D0 00          	mov	reg[CUR_PP],0
  4553  4D59  51 37             	mov	a,[0+((printf@ap)^0x0)]
  4554  4D5B  58 38             	mov	x,[1+((printf@ap)^0x0)]
  4555  4D5D  60 D3             	mov	reg[0xd3],a
  4556  4D5F  52 00             	mov	a,[0+x]
  4557  4D61  53 23             	mov	[0+((printf@fval)^0x0)],a
  4558  4D63  52 01             	mov	a,[1+x]
  4559  4D65  53 24             	mov	[1+((printf@fval)^0x0)],a
  4560  4D67  52 02             	mov	a,[2+x]
  4561  4D69  53 25             	mov	[2+((printf@fval)^0x0)],a
  4562  4D6B  52 03             	mov	a,[3+x]
  4563  4D6D  53 26             	mov	[3+((printf@fval)^0x0)],a
  4564  4D6F  70 CF             	and	f, 0xCF   ;select user reg space
  4565  4D71  62 D0 00          	mov	reg[CUR_PP],0
  4566  4D74  06 38  04         	add	[1+((printf@ap)^0x0)],<((04h))
  4567                          	line	825
  4568                          ;doprnt.c: 825: if(fval < 0.0) {
  4569  4D77  70 CF             	and	f, 0xCF   ;select user reg space
  4570  4D79  62 D0 00          	mov	reg[CUR_PP],0
  4571  4D7C  51 23             	mov	a,[0+((printf@fval)^0x0)]
  4572  4D7E  53 41             	mov	[0+((?___flge)^0x0)],a
  4573  4D80  51 24             	mov	a,[1+((printf@fval)^0x0)]
  4574  4D82  53 42             	mov	[1+((?___flge)^0x0)],a
  4575  4D84  51 25             	mov	a,[2+((printf@fval)^0x0)]
  4576  4D86  53 43             	mov	[2+((?___flge)^0x0)],a
  4577  4D88  51 26             	mov	a,[3+((printf@fval)^0x0)]
  4578  4D8A  53 44             	mov	[3+((?___flge)^0x0)],a
  4579  4D8C  50 00             	mov	a,<(0x0>>24)
  4580  4D8E  53 45             	mov	[0+((0+?___flge+04h)^0x0)],a
  4581  4D90  50 00             	mov	a,<(0x0>>16)
  4582  4D92  53 46             	mov	[1+((0+?___flge+04h)^0x0)],a
  4583  4D94  50 00             	mov	a,<(0x0>>8)
  4584  4D96  53 47             	mov	[2+((0+?___flge+04h)^0x0)],a
  4585  4D98  50 00             	mov	a,<(0x0)
  4586  4D9A  53 48             	mov	[3+((0+?___flge+04h)^0x0)],a
  4587  4D9C  71 80             	or	f, 0x80	;select multiple RAM page mode
  4588                          	
  4589  4D9E  7C 6F80           	xcall	___flge
  4590                          	
  4591  4DA1  C041              	jc	l171
  4592                          	line	826
  4593                          ;doprnt.c: 826: fval = -fval;
  4594  4DA3  70 CF             	and	f, 0xCF   ;select user reg space
  4595  4DA5  62 D0 00          	mov	reg[CUR_PP],0
  4596  4DA8  51 23             	mov	a,[0+((printf@fval)^0x0)]
  4597  4DAA  53 4C             	mov	[0+((?___flneg)^0x0)],a
  4598  4DAC  51 24             	mov	a,[1+((printf@fval)^0x0)]
  4599  4DAE  53 4D             	mov	[1+((?___flneg)^0x0)],a
  4600  4DB0  51 25             	mov	a,[2+((printf@fval)^0x0)]
  4601  4DB2  53 4E             	mov	[2+((?___flneg)^0x0)],a
  4602  4DB4  51 26             	mov	a,[3+((printf@fval)^0x0)]
  4603  4DB6  53 4F             	mov	[3+((?___flneg)^0x0)],a
  4604  4DB8  71 80             	or	f, 0x80	;select multiple RAM page mode
  4605                          	
  4606  4DBA  7C 76DC           	xcall	___flneg
  4607                          	
  4608  4DBD  70 CF             	and	f, 0xCF   ;select user reg space
  4609  4DBF  62 D0 00          	mov	reg[CUR_PP],0
  4610  4DC2  51 4C             	mov	a,[0+((0+?___flneg)^0x0)]
  4611  4DC4  53 23             	mov	[0+((printf@fval)^0x0)],a
  4612  4DC6  51 4D             	mov	a,[1+((0+?___flneg)^0x0)]
  4613  4DC8  53 24             	mov	[1+((printf@fval)^0x0)],a
  4614  4DCA  51 4E             	mov	a,[2+((0+?___flneg)^0x0)]
  4615  4DCC  53 25             	mov	[2+((printf@fval)^0x0)],a
  4616  4DCE  51 4F             	mov	a,[3+((0+?___flneg)^0x0)]
  4617  4DD0  53 26             	mov	[3+((printf@fval)^0x0)],a
  4618                          	line	827
  4619                          ;doprnt.c: 827: flag |= 0x03;
  4620  4DD2  70 CF             	and	f, 0xCF   ;select user reg space
  4621  4DD4  62 D0 00          	mov	reg[CUR_PP],0
  4622  4DD7  51 36             	mov	a,[1+((printf@flag)^0x0)]
  4623  4DD9  29 03             	or	a,<(03h)
  4624  4DDB  53 36             	mov	[1+((printf@flag)^0x0)],a
  4625  4DDD  51 35             	mov	a,[0+((printf@flag)^0x0)]
  4626  4DDF  29 00             	or	a,>(03h)
  4627  4DE1  53 35             	mov	[0+((printf@flag)^0x0)],a
  4628                          	line	828
  4629                          ;			
  4630  4DE3                    l171:	
  4631                          	line	829
  4632                          ;doprnt.c: 828: }
  4633                          ;doprnt.c: 829: exp = 0;
  4634  4DE3  50 00             	mov	a,<(0)
  4635  4DE5  70 CF             	and	f, 0xCF   ;select user reg space
  4636  4DE7  62 D0 00          	mov	reg[CUR_PP],0
  4637  4DEA  53 32             	mov	[1+((printf@exp)^0x0)],a
  4638  4DEC  50 00             	mov	a,>(0)
  4639  4DEE  53 31             	mov	[0+((printf@exp)^0x0)],a
  4640                          	line	830
  4641                          ;doprnt.c: 830: if( fval!=0) {
  4642  4DF0  70 CF             	and	f, 0xCF   ;select user reg space
  4643  4DF2  62 D0 00          	mov	reg[CUR_PP],0
  4644  4DF5  51 23             	mov	a,[0+((printf@fval)^0x0)]
  4645  4DF7  39 00             	cmp	a,<(0x0>>24)
  4646  4DF9  B011              	jnz	u1413
  4647  4DFB  51 24             	mov	a,[1+((printf@fval)^0x0)]
  4648  4DFD  39 00             	cmp	a,<(0x0>>16)
  4649  4DFF  B00B              	jnz	u1413
  4650  4E01  51 25             	mov	a,[2+((printf@fval)^0x0)]
  4651  4E03  39 00             	cmp	a,<(0x0>>8)
  4652  4E05  B005              	jnz	u1413
  4653  4E07  51 26             	mov	a,[3+((printf@fval)^0x0)]
  4654  4E09  39 00             	cmp	a,<(0x0)
  4655  4E0B                    u1413:
  4656  4E0B  A17C              	jz	l172
  4657                          	line	831
  4658                          ;doprnt.c: 831: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) - 126);
  4659  4E0D  70 CF             	and	f, 0xCF   ;select user reg space
  4660  4E0F  62 D0 00          	mov	reg[CUR_PP],0
  4661  4E12  51 23             	mov	a,[0+((printf@fval)^0x0)]
  4662  4E14  53 3A             	mov	[(??_printf^0x0)+23+0],a
  4663  4E16  51 24             	mov	a,[1+((printf@fval)^0x0)]
  4664  4E18  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  4665  4E1A  51 25             	mov	a,[2+((printf@fval)^0x0)]
  4666  4E1C  53 3C             	mov	[(??_printf^0x0)+23+0+2],a
  4667  4E1E  51 26             	mov	a,[3+((printf@fval)^0x0)]
  4668  4E20  53 3D             	mov	[(??_printf^0x0)+23+0+3],a
  4669  4E22  50 17             	mov	a,<((017h))
  4670  4E24  7D 4E31           	xjmp	u1423
  4671  4E27  70 FB             	clrc
  4672  4E29                    u1434:
  4673  4E29  6E 3A             	rrc	[(??_printf^0x0)+23+0]
  4674  4E2B  6E 3B             	rrc	[(??_printf^0x0)+23+1]
  4675  4E2D  6E 3C             	rrc	[(??_printf^0x0)+23+2]
  4676  4E2F  6E 3D             	rrc	[(??_printf^0x0)+23+3]
  4677  4E31                    u1423:
  4678  4E31  78                	dec	a
  4679  4E32  DFF6              	jnc	u1434
  4680  4E34  51 3D             	mov	a,[(??_printf^0x0)+23+3]
  4681  4E36  01 82             	add	a,<(-126)
  4682  4E38  53 32             	mov	[1+((printf@exp)^0x0)],a
  4683  4E3A  50 00             	mov	a,0
  4684  4E3C  09 FF             	adc	a,>(-126)
  4685  4E3E  53 31             	mov	[0+((printf@exp)^0x0)],a
  4686                          	line	832
  4687                          ;doprnt.c: 832: exp--;
  4688  4E40  51 32             	mov	a,[1+((printf@exp)^0x0)]
  4689  4E42  01 FF             	add	a,<(-1)
  4690  4E44  53 32             	mov	[1+((printf@exp)^0x0)],a
  4691  4E46  51 31             	mov	a,[0+((printf@exp)^0x0)]
  4692  4E48  09 FF             	adc	a,>(-1)
  4693  4E4A  53 31             	mov	[0+((printf@exp)^0x0)],a
  4694                          	line	833
  4695                          ;doprnt.c: 833: exp *= 3;
  4696  4E4C  70 CF             	and	f, 0xCF   ;select user reg space
  4697  4E4E  62 D0 00          	mov	reg[CUR_PP],0
  4698  4E51  51 31             	mov	a,[0+((printf@exp)^0x0)]
  4699  4E53  08                	push	a
  4700  4E54  51 32             	mov	a,[1+((printf@exp)^0x0)]
  4701  4E56  53 42             	mov	[1+((?___wmul)^0x0)],a
  4702  4E58  18                	pop	a
  4703  4E59  53 41             	mov	[0+((?___wmul)^0x0)],a
  4704  4E5B  50 03             	mov	a,<(03h)
  4705  4E5D  53 44             	mov	[1+((0+?___wmul+02h)^0x0)],a
  4706  4E5F  50 00             	mov	a,>(03h)
  4707  4E61  53 43             	mov	[0+((0+?___wmul+02h)^0x0)],a
  4708  4E63  71 80             	or	f, 0x80	;select multiple RAM page mode
  4709                          	
  4710  4E65  7C 5D72           	xcall	___wmul
  4711                          	
  4712  4E68  70 CF             	and	f, 0xCF   ;select user reg space
  4713  4E6A  62 D0 00          	mov	reg[CUR_PP],0
  4714  4E6D  5A 31             	mov	[((printf@exp)^0x0)],x
  4715  4E6F  53 32             	mov	[((printf@exp+1)^0x0)],a
  4716                          	line	834
  4717                          ;doprnt.c: 834: exp /= 10;
  4718  4E71  70 CF             	and	f, 0xCF   ;select user reg space
  4719  4E73  62 D0 00          	mov	reg[CUR_PP],0
  4720  4E76  51 31             	mov	a,[0+((printf@exp)^0x0)]
  4721  4E78  08                	push	a
  4722  4E79  51 32             	mov	a,[1+((printf@exp)^0x0)]
  4723  4E7B  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  4724  4E7D  18                	pop	a
  4725  4E7E  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  4726  4E80  50 0A             	mov	a,<(0Ah)
  4727  4E82  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  4728  4E84  50 00             	mov	a,>(0Ah)
  4729  4E86  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  4730  4E88  71 80             	or	f, 0x80	;select multiple RAM page mode
  4731                          	
  4732  4E8A  7C 6D2D           	xcall	___awdiv
  4733                          	
  4734  4E8D  70 CF             	and	f, 0xCF   ;select user reg space
  4735  4E8F  62 D0 00          	mov	reg[CUR_PP],0
  4736  4E92  5A 31             	mov	[((printf@exp)^0x0)],x
  4737  4E94  53 32             	mov	[((printf@exp+1)^0x0)],a
  4738                          	line	835
  4739                          ;doprnt.c: 835: if(exp < 0)
  4740  4E96  51 32             	mov	a,[1+((printf@exp)^0x0)]
  4741  4E98  39 00             	cmp	a,<(0)
  4742  4E9A  51 31             	mov	a,[0+((printf@exp)^0x0)]
  4743  4E9C  31 80             	xor	a,80h
  4744  4E9E  19 80             	sbb	a,(>0)^80h
  4745  4EA0  D012              	jnc	l173
  4746                          	line	836
  4747                          ;doprnt.c: 836: exp--;
  4748  4EA2  70 CF             	and	f, 0xCF   ;select user reg space
  4749  4EA4  62 D0 00          	mov	reg[CUR_PP],0
  4750  4EA7  51 32             	mov	a,[1+((printf@exp)^0x0)]
  4751  4EA9  01 FF             	add	a,<(-1)
  4752  4EAB  53 32             	mov	[1+((printf@exp)^0x0)],a
  4753  4EAD  51 31             	mov	a,[0+((printf@exp)^0x0)]
  4754  4EAF  09 FF             	adc	a,>(-1)
  4755  4EB1  53 31             	mov	[0+((printf@exp)^0x0)],a
  4756                          ;			
  4757  4EB3                    l173:	
  4758                          	line	837
  4759                          ;doprnt.c: 837: integ = fval * scale(-exp);
  4760  4EB3  50 01             	mov	a,<((01h))
  4761  4EB5  01 31             	add	a,<(8000h+printf@exp)
  4762  4EB7  5C                	mov	x,a
  4763  4EB8  50 80             	mov	a,>(8000h+printf@exp)
  4764  4EBA  70 CF             	and	f, 0xCF   ;select user reg space
  4765  4EBC  60 D3             	mov	reg[0xd3],a
  4766  4EBE  52 00             	mov	a,[x+0]
  4767  4EC0  73                	cpl	a
  4768  4EC1  74                	inc	a
  4769  4EC2  62 D0 00          	mov	reg[CUR_PP],0
  4770  4EC5  53 41             	mov	[0+((?_scale)^0x0)],a
  4771  4EC7  71 80             	or	f, 0x80	;select multiple RAM page mode
  4772                          	
  4773  4EC9  7C 61EB           	xcall	_scale
  4774                          	
  4775  4ECC  70 CF             	and	f, 0xCF   ;select user reg space
  4776  4ECE  62 D0 00          	mov	reg[CUR_PP],0
  4777  4ED1  51 41             	mov	a,[0+((0+?_scale)^0x0)]
  4778  4ED3  53 5E             	mov	[0+((?___flmul)^0x0)],a
  4779  4ED5  51 42             	mov	a,[1+((0+?_scale)^0x0)]
  4780  4ED7  53 5F             	mov	[1+((?___flmul)^0x0)],a
  4781  4ED9  51 43             	mov	a,[2+((0+?_scale)^0x0)]
  4782  4EDB  53 60             	mov	[2+((?___flmul)^0x0)],a
  4783  4EDD  51 44             	mov	a,[3+((0+?_scale)^0x0)]
  4784  4EDF  53 61             	mov	[3+((?___flmul)^0x0)],a
  4785  4EE1  51 23             	mov	a,[0+((printf@fval)^0x0)]
  4786  4EE3  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  4787  4EE5  51 24             	mov	a,[1+((printf@fval)^0x0)]
  4788  4EE7  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  4789  4EE9  51 25             	mov	a,[2+((printf@fval)^0x0)]
  4790  4EEB  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  4791  4EED  51 26             	mov	a,[3+((printf@fval)^0x0)]
  4792  4EEF  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  4793  4EF1  71 80             	or	f, 0x80	;select multiple RAM page mode
  4794                          	
  4795  4EF3  7C 7201           	xcall	___flmul
  4796                          	
  4797  4EF6  70 CF             	and	f, 0xCF   ;select user reg space
  4798  4EF8  62 D0 00          	mov	reg[CUR_PP],0
  4799  4EFB  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  4800  4EFD  53 2B             	mov	[0+((printf@integ)^0x0)],a
  4801  4EFF  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  4802  4F01  53 2C             	mov	[1+((printf@integ)^0x0)],a
  4803  4F03  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  4804  4F05  53 2D             	mov	[2+((printf@integ)^0x0)],a
  4805  4F07  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  4806  4F09  53 2E             	mov	[3+((printf@integ)^0x0)],a
  4807                          	line	838
  4808                          ;doprnt.c: 838: if(integ < 1.0)
  4809  4F0B  70 CF             	and	f, 0xCF   ;select user reg space
  4810  4F0D  62 D0 00          	mov	reg[CUR_PP],0
  4811  4F10  51 2B             	mov	a,[0+((printf@integ)^0x0)]
  4812  4F12  53 41             	mov	[0+((?___flge)^0x0)],a
  4813  4F14  51 2C             	mov	a,[1+((printf@integ)^0x0)]
  4814  4F16  53 42             	mov	[1+((?___flge)^0x0)],a
  4815  4F18  51 2D             	mov	a,[2+((printf@integ)^0x0)]
  4816  4F1A  53 43             	mov	[2+((?___flge)^0x0)],a
  4817  4F1C  51 2E             	mov	a,[3+((printf@integ)^0x0)]
  4818  4F1E  53 44             	mov	[3+((?___flge)^0x0)],a
  4819  4F20  50 3F             	mov	a,<(0x3f800000>>24)
  4820  4F22  53 45             	mov	[0+((0+?___flge+04h)^0x0)],a
  4821  4F24  50 80             	mov	a,<(0x3f800000>>16)
  4822  4F26  53 46             	mov	[1+((0+?___flge+04h)^0x0)],a
  4823  4F28  50 00             	mov	a,<(0x3f800000>>8)
  4824  4F2A  53 47             	mov	[2+((0+?___flge+04h)^0x0)],a
  4825  4F2C  50 00             	mov	a,<(0x3f800000)
  4826  4F2E  53 48             	mov	[3+((0+?___flge+04h)^0x0)],a
  4827  4F30  71 80             	or	f, 0x80	;select multiple RAM page mode
  4828                          	
  4829  4F32  7C 6F80           	xcall	___flge
  4830                          	
  4831  4F35  C015              	jc	l174
  4832                          	line	839
  4833                          ;doprnt.c: 839: exp--;
  4834  4F37  70 CF             	and	f, 0xCF   ;select user reg space
  4835  4F39  62 D0 00          	mov	reg[CUR_PP],0
  4836  4F3C  51 32             	mov	a,[1+((printf@exp)^0x0)]
  4837  4F3E  01 FF             	add	a,<(-1)
  4838  4F40  53 32             	mov	[1+((printf@exp)^0x0)],a
  4839  4F42  51 31             	mov	a,[0+((printf@exp)^0x0)]
  4840  4F44  09 FF             	adc	a,>(-1)
  4841  4F46  53 31             	mov	[0+((printf@exp)^0x0)],a
  4842  4F48  7D 4F88           	xjmp	l172
  4843                          	line	840
  4844                          ;			
  4845  4F4B                    l174:	
  4846                          ;doprnt.c: 840: else if(integ >= 10.0)
  4847  4F4B  70 CF             	and	f, 0xCF   ;select user reg space
  4848  4F4D  62 D0 00          	mov	reg[CUR_PP],0
  4849  4F50  51 2B             	mov	a,[0+((printf@integ)^0x0)]
  4850  4F52  53 41             	mov	[0+((?___flge)^0x0)],a
  4851  4F54  51 2C             	mov	a,[1+((printf@integ)^0x0)]
  4852  4F56  53 42             	mov	[1+((?___flge)^0x0)],a
  4853  4F58  51 2D             	mov	a,[2+((printf@integ)^0x0)]
  4854  4F5A  53 43             	mov	[2+((?___flge)^0x0)],a
  4855  4F5C  51 2E             	mov	a,[3+((printf@integ)^0x0)]
  4856  4F5E  53 44             	mov	[3+((?___flge)^0x0)],a
  4857  4F60  50 41             	mov	a,<(0x41200000>>24)
  4858  4F62  53 45             	mov	[0+((0+?___flge+04h)^0x0)],a
  4859  4F64  50 20             	mov	a,<(0x41200000>>16)
  4860  4F66  53 46             	mov	[1+((0+?___flge+04h)^0x0)],a
  4861  4F68  50 00             	mov	a,<(0x41200000>>8)
  4862  4F6A  53 47             	mov	[2+((0+?___flge+04h)^0x0)],a
  4863  4F6C  50 00             	mov	a,<(0x41200000)
  4864  4F6E  53 48             	mov	[3+((0+?___flge+04h)^0x0)],a
  4865  4F70  71 80             	or	f, 0x80	;select multiple RAM page mode
  4866                          	
  4867  4F72  7C 6F80           	xcall	___flge
  4868                          	
  4869  4F75  D012              	jnc	l172
  4870                          	line	841
  4871                          ;doprnt.c: 841: exp++;
  4872  4F77  70 CF             	and	f, 0xCF   ;select user reg space
  4873  4F79  62 D0 00          	mov	reg[CUR_PP],0
  4874  4F7C  51 32             	mov	a,[1+((printf@exp)^0x0)]
  4875  4F7E  01 01             	add	a,<(01h)
  4876  4F80  53 32             	mov	[1+((printf@exp)^0x0)],a
  4877  4F82  51 31             	mov	a,[0+((printf@exp)^0x0)]
  4878  4F84  09 00             	adc	a,>(01h)
  4879  4F86  53 31             	mov	[0+((printf@exp)^0x0)],a
  4880                          ;			
  4881  4F88                    l176:	
  4882                          	line	842
  4883                          ;			
  4884  4F88                    l175:	
  4885                          ;			
  4886  4F88                    l172:	
  4887                          	line	1099
  4888                          ;doprnt.c: 842: }
  4889                          ;doprnt.c: 1099: if(prec <= 12)
  4890  4F88  70 CF             	and	f, 0xCF   ;select user reg space
  4891  4F8A  62 D0 00          	mov	reg[CUR_PP],0
  4892  4F8D  51 30             	mov	a,[1+((printf@prec)^0x0)]
  4893  4F8F  39 0D             	cmp	a,<(0Dh)
  4894  4F91  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  4895  4F93  31 80             	xor	a,80h
  4896  4F95  19 80             	sbb	a,(>0Dh)^80h
  4897  4F97  D057              	jnc	l177
  4898                          	line	1100
  4899                          ;doprnt.c: 1100: fval += fround(prec);
  4900  4F99  50 01             	mov	a,<((01h))
  4901  4F9B  01 2F             	add	a,<(8000h+printf@prec)
  4902  4F9D  5C                	mov	x,a
  4903  4F9E  50 80             	mov	a,>(8000h+printf@prec)
  4904  4FA0  70 CF             	and	f, 0xCF   ;select user reg space
  4905  4FA2  60 D3             	mov	reg[0xd3],a
  4906  4FA4  52 00             	mov	a,[x+0]
  4907  4FA6  62 D0 00          	mov	reg[CUR_PP],0
  4908  4FA9  53 41             	mov	[0+((?_fround)^0x0)],a
  4909  4FAB  71 80             	or	f, 0x80	;select multiple RAM page mode
  4910                          	
  4911  4FAD  7C 5F50           	xcall	_fround
  4912                          	
  4913  4FB0  70 CF             	and	f, 0xCF   ;select user reg space
  4914  4FB2  62 D0 00          	mov	reg[CUR_PP],0
  4915  4FB5  51 41             	mov	a,[0+((0+?_fround)^0x0)]
  4916  4FB7  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  4917  4FB9  51 42             	mov	a,[1+((0+?_fround)^0x0)]
  4918  4FBB  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  4919  4FBD  51 43             	mov	a,[2+((0+?_fround)^0x0)]
  4920  4FBF  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  4921  4FC1  51 44             	mov	a,[3+((0+?_fround)^0x0)]
  4922  4FC3  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  4923  4FC5  51 23             	mov	a,[0+((printf@fval)^0x0)]
  4924  4FC7  53 4D             	mov	[0+((?___fladd)^0x0)],a
  4925  4FC9  51 24             	mov	a,[1+((printf@fval)^0x0)]
  4926  4FCB  53 4E             	mov	[1+((?___fladd)^0x0)],a
  4927  4FCD  51 25             	mov	a,[2+((printf@fval)^0x0)]
  4928  4FCF  53 4F             	mov	[2+((?___fladd)^0x0)],a
  4929  4FD1  51 26             	mov	a,[3+((printf@fval)^0x0)]
  4930  4FD3  53 50             	mov	[3+((?___fladd)^0x0)],a
  4931  4FD5  71 80             	or	f, 0x80	;select multiple RAM page mode
  4932                          	
  4933  4FD7  7C 7416           	xcall	___fladd
  4934                          	
  4935  4FDA  70 CF             	and	f, 0xCF   ;select user reg space
  4936  4FDC  62 D0 00          	mov	reg[CUR_PP],0
  4937  4FDF  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  4938  4FE1  53 23             	mov	[0+((printf@fval)^0x0)],a
  4939  4FE3  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  4940  4FE5  53 24             	mov	[1+((printf@fval)^0x0)],a
  4941  4FE7  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  4942  4FE9  53 25             	mov	[2+((printf@fval)^0x0)],a
  4943  4FEB  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  4944  4FED  53 26             	mov	[3+((printf@fval)^0x0)],a
  4945                          ;			
  4946  4FEF                    l177:	
  4947                          	line	1103
  4948                          ;doprnt.c: 1103: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4949  4FEF  70 CF             	and	f, 0xCF   ;select user reg space
  4950  4FF1  62 D0 00          	mov	reg[CUR_PP],0
  4951  4FF4  51 32             	mov	a,[1+((printf@exp)^0x0)]
  4952  4FF6  39 0A             	cmp	a,<(0Ah)
  4953  4FF8  51 31             	mov	a,[0+((printf@exp)^0x0)]
  4954  4FFA  31 80             	xor	a,80h
  4955  4FFC  19 80             	sbb	a,(>0Ah)^80h
  4956  4FFE  D066              	jnc	l600002253
  4957  5000  70 CF             	and	f, 0xCF   ;select user reg space
  4958  5002  62 D0 00          	mov	reg[CUR_PP],0
  4959  5005  51 23             	mov	a,[0+((printf@fval)^0x0)]
  4960  5007  39 00             	cmp	a,<(0x0>>24)
  4961  5009  B011              	jnz	u1443
  4962  500B  51 24             	mov	a,[1+((printf@fval)^0x0)]
  4963  500D  39 00             	cmp	a,<(0x0>>16)
  4964  500F  B00B              	jnz	u1443
  4965  5011  51 25             	mov	a,[2+((printf@fval)^0x0)]
  4966  5013  39 00             	cmp	a,<(0x0>>8)
  4967  5015  B005              	jnz	u1443
  4968  5017  51 26             	mov	a,[3+((printf@fval)^0x0)]
  4969  5019  39 00             	cmp	a,<(0x0)
  4970  501B                    u1443:
  4971  501B  A118              	jz	l178
  4972  501D  70 CF             	and	f, 0xCF   ;select user reg space
  4973  501F  62 D0 00          	mov	reg[CUR_PP],0
  4974  5022  51 23             	mov	a,[0+((printf@fval)^0x0)]
  4975  5024  53 41             	mov	[0+((?___fltol)^0x0)],a
  4976  5026  51 24             	mov	a,[1+((printf@fval)^0x0)]
  4977  5028  53 42             	mov	[1+((?___fltol)^0x0)],a
  4978  502A  51 25             	mov	a,[2+((printf@fval)^0x0)]
  4979  502C  53 43             	mov	[2+((?___fltol)^0x0)],a
  4980  502E  51 26             	mov	a,[3+((printf@fval)^0x0)]
  4981  5030  53 44             	mov	[3+((?___fltol)^0x0)],a
  4982  5032  71 80             	or	f, 0x80	;select multiple RAM page mode
  4983                          	
  4984  5034  7C 6831           	xcall	___fltol
  4985                          	
  4986  5037  70 CF             	and	f, 0xCF   ;select user reg space
  4987  5039  62 D0 00          	mov	reg[CUR_PP],0
  4988  503C  51 41             	mov	a,[0+((0+?___fltol)^0x0)]
  4989  503E  39 00             	cmp	a,<(0>>24)
  4990  5040  B011              	jnz	u1453
  4991  5042  51 42             	mov	a,[1+((0+?___fltol)^0x0)]
  4992  5044  39 00             	cmp	a,<(0>>16)
  4993  5046  B00B              	jnz	u1453
  4994  5048  51 43             	mov	a,[2+((0+?___fltol)^0x0)]
  4995  504A  39 00             	cmp	a,<(0>>8)
  4996  504C  B005              	jnz	u1453
  4997  504E  51 44             	mov	a,[3+((0+?___fltol)^0x0)]
  4998  5050  39 00             	cmp	a,<(0)
  4999  5052                    u1453:
  5000  5052  B0E1              	jnz	l178
  5001  5054  70 CF             	and	f, 0xCF   ;select user reg space
  5002  5056  62 D0 00          	mov	reg[CUR_PP],0
  5003  5059  51 32             	mov	a,[1+((printf@exp)^0x0)]
  5004  505B  39 02             	cmp	a,<(02h)
  5005  505D  51 31             	mov	a,[0+((printf@exp)^0x0)]
  5006  505F  31 80             	xor	a,80h
  5007  5061  19 80             	sbb	a,(>02h)^80h
  5008  5063  C0D0              	jc	l178
  5009                          ;			
  5010  5065                    l600002253:	
  5011                          	line	1107
  5012                          ;doprnt.c: 1107: if(integ < 4.294967296){
  5013  5065  70 CF             	and	f, 0xCF   ;select user reg space
  5014  5067  62 D0 00          	mov	reg[CUR_PP],0
  5015  506A  51 2B             	mov	a,[0+((printf@integ)^0x0)]
  5016  506C  53 41             	mov	[0+((?___flge)^0x0)],a
  5017  506E  51 2C             	mov	a,[1+((printf@integ)^0x0)]
  5018  5070  53 42             	mov	[1+((?___flge)^0x0)],a
  5019  5072  51 2D             	mov	a,[2+((printf@integ)^0x0)]
  5020  5074  53 43             	mov	[2+((?___flge)^0x0)],a
  5021  5076  51 2E             	mov	a,[3+((printf@integ)^0x0)]
  5022  5078  53 44             	mov	[3+((?___flge)^0x0)],a
  5023  507A  50 40             	mov	a,<(0x4089705f>>24)
  5024  507C  53 45             	mov	[0+((0+?___flge+04h)^0x0)],a
  5025  507E  50 89             	mov	a,<(0x4089705f>>16)
  5026  5080  53 46             	mov	[1+((0+?___flge+04h)^0x0)],a
  5027  5082  50 70             	mov	a,<(0x4089705f>>8)
  5028  5084  53 47             	mov	[2+((0+?___flge+04h)^0x0)],a
  5029  5086  50 5F             	mov	a,<(0x4089705f)
  5030  5088  53 48             	mov	[3+((0+?___flge+04h)^0x0)],a
  5031  508A  71 80             	or	f, 0x80	;select multiple RAM page mode
  5032                          	
  5033  508C  7C 6F80           	xcall	___flge
  5034                          	
  5035  508F  C015              	jc	l179
  5036                          	line	1108
  5037                          ;doprnt.c: 1108: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5038  5091  70 CF             	and	f, 0xCF   ;select user reg space
  5039  5093  62 D0 00          	mov	reg[CUR_PP],0
  5040  5096  51 32             	mov	a,[1+((printf@exp)^0x0)]
  5041  5098  01 F7             	add	a,<(-9)
  5042  509A  53 32             	mov	[1+((printf@exp)^0x0)],a
  5043  509C  51 31             	mov	a,[0+((printf@exp)^0x0)]
  5044  509E  09 FF             	adc	a,>(-9)
  5045  50A0  53 31             	mov	[0+((printf@exp)^0x0)],a
  5046                          	line	1109
  5047                          ;doprnt.c: 1109: }else{
  5048  50A2  7D 50B6           	xjmp	l180
  5049                          ;			
  5050  50A5                    l179:	
  5051                          	line	1110
  5052                          ;doprnt.c: 1110: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5053  50A5  70 CF             	and	f, 0xCF   ;select user reg space
  5054  50A7  62 D0 00          	mov	reg[CUR_PP],0
  5055  50AA  51 32             	mov	a,[1+((printf@exp)^0x0)]
  5056  50AC  01 F8             	add	a,<(-8)
  5057  50AE  53 32             	mov	[1+((printf@exp)^0x0)],a
  5058  50B0  51 31             	mov	a,[0+((printf@exp)^0x0)]
  5059  50B2  09 FF             	adc	a,>(-8)
  5060  50B4  53 31             	mov	[0+((printf@exp)^0x0)],a
  5061                          	line	1111
  5062                          ;			
  5063  50B6                    l180:	
  5064                          	line	1112
  5065                          ;doprnt.c: 1111: }
  5066                          ;doprnt.c: 1112: integ = scale(exp);
  5067  50B6  50 01             	mov	a,<((01h))
  5068  50B8  01 31             	add	a,<(8000h+printf@exp)
  5069  50BA  5C                	mov	x,a
  5070  50BB  50 80             	mov	a,>(8000h+printf@exp)
  5071  50BD  70 CF             	and	f, 0xCF   ;select user reg space
  5072  50BF  60 D3             	mov	reg[0xd3],a
  5073  50C1  52 00             	mov	a,[x+0]
  5074  50C3  62 D0 00          	mov	reg[CUR_PP],0
  5075  50C6  53 41             	mov	[0+((?_scale)^0x0)],a
  5076  50C8  71 80             	or	f, 0x80	;select multiple RAM page mode
  5077                          	
  5078  50CA  7C 61EB           	xcall	_scale
  5079                          	
  5080  50CD  70 CF             	and	f, 0xCF   ;select user reg space
  5081  50CF  62 D0 00          	mov	reg[CUR_PP],0
  5082  50D2  51 41             	mov	a,[0+((0+?_scale)^0x0)]
  5083  50D4  53 2B             	mov	[0+((printf@integ)^0x0)],a
  5084  50D6  51 42             	mov	a,[1+((0+?_scale)^0x0)]
  5085  50D8  53 2C             	mov	[1+((printf@integ)^0x0)],a
  5086  50DA  51 43             	mov	a,[2+((0+?_scale)^0x0)]
  5087  50DC  53 2D             	mov	[2+((printf@integ)^0x0)],a
  5088  50DE  51 44             	mov	a,[3+((0+?_scale)^0x0)]
  5089  50E0  53 2E             	mov	[3+((printf@integ)^0x0)],a
  5090                          	line	1113
  5091                          ;doprnt.c: 1113: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l_(fval,integ
                                ));
  5092  50E2  51 23             	mov	a,[0+((printf@fval)^0x0)]
  5093  50E4  53 41             	mov	[0+((?__div_to_l_)^0x0)],a
  5094  50E6  51 24             	mov	a,[1+((printf@fval)^0x0)]
  5095  50E8  53 42             	mov	[1+((?__div_to_l_)^0x0)],a
  5096  50EA  51 25             	mov	a,[2+((printf@fval)^0x0)]
  5097  50EC  53 43             	mov	[2+((?__div_to_l_)^0x0)],a
  5098  50EE  51 26             	mov	a,[3+((printf@fval)^0x0)]
  5099  50F0  53 44             	mov	[3+((?__div_to_l_)^0x0)],a
  5100  50F2  51 2B             	mov	a,[0+((printf@integ)^0x0)]
  5101  50F4  53 45             	mov	[0+((0+?__div_to_l_+04h)^0x0)],a
  5102  50F6  51 2C             	mov	a,[1+((printf@integ)^0x0)]
  5103  50F8  53 46             	mov	[1+((0+?__div_to_l_+04h)^0x0)],a
  5104  50FA  51 2D             	mov	a,[2+((printf@integ)^0x0)]
  5105  50FC  53 47             	mov	[2+((0+?__div_to_l_+04h)^0x0)],a
  5106  50FE  51 2E             	mov	a,[3+((printf@integ)^0x0)]
  5107  5100  53 48             	mov	[3+((0+?__div_to_l_+04h)^0x0)],a
  5108  5102  71 80             	or	f, 0x80	;select multiple RAM page mode
  5109                          	
  5110  5104  7C 6647           	xcall	__div_to_l_
  5111                          	
  5112  5107  70 CF             	and	f, 0xCF   ;select user reg space
  5113  5109  62 D0 00          	mov	reg[CUR_PP],0
  5114  510C  51 41             	mov	a,[0+((0+?__div_to_l_)^0x0)]
  5115  510E  53 27             	mov	[0+((printf@_val)^0x0)],a
  5116  5110  51 42             	mov	a,[1+((0+?__div_to_l_)^0x0)]
  5117  5112  53 28             	mov	[1+((printf@_val)^0x0)],a
  5118  5114  51 43             	mov	a,[2+((0+?__div_to_l_)^0x0)]
  5119  5116  53 29             	mov	[2+((printf@_val)^0x0)],a
  5120  5118  51 44             	mov	a,[3+((0+?__div_to_l_)^0x0)]
  5121  511A  53 2A             	mov	[3+((printf@_val)^0x0)],a
  5122                          	line	1116
  5123                          ;doprnt.c: 1116: fval = 0.0;
  5124  511C  50 00             	mov	a,<(0x0>>24)
  5125  511E  70 CF             	and	f, 0xCF   ;select user reg space
  5126  5120  62 D0 00          	mov	reg[CUR_PP],0
  5127  5123  53 23             	mov	[0+((printf@fval)^0x0)],a
  5128  5125  50 00             	mov	a,<(0x0>>16)
  5129  5127  53 24             	mov	[1+((printf@fval)^0x0)],a
  5130  5129  50 00             	mov	a,<(0x0>>8)
  5131  512B  53 25             	mov	[2+((printf@fval)^0x0)],a
  5132  512D  50 00             	mov	a,<(0x0)
  5133  512F  53 26             	mov	[3+((printf@fval)^0x0)],a
  5134                          	line	1117
  5135                          ;doprnt.c: 1117: } else {
  5136  5131  7D 51C4           	xjmp	l181
  5137                          ;			
  5138  5134                    l178:	
  5139                          	line	1118
  5140                          ;doprnt.c: 1118: _val._val = (unsigned long)fval;
  5141  5134  70 CF             	and	f, 0xCF   ;select user reg space
  5142  5136  62 D0 00          	mov	reg[CUR_PP],0
  5143  5139  51 23             	mov	a,[0+((printf@fval)^0x0)]
  5144  513B  53 41             	mov	[0+((?___fltol)^0x0)],a
  5145  513D  51 24             	mov	a,[1+((printf@fval)^0x0)]
  5146  513F  53 42             	mov	[1+((?___fltol)^0x0)],a
  5147  5141  51 25             	mov	a,[2+((printf@fval)^0x0)]
  5148  5143  53 43             	mov	[2+((?___fltol)^0x0)],a
  5149  5145  51 26             	mov	a,[3+((printf@fval)^0x0)]
  5150  5147  53 44             	mov	[3+((?___fltol)^0x0)],a
  5151  5149  71 80             	or	f, 0x80	;select multiple RAM page mode
  5152                          	
  5153  514B  7C 6831           	xcall	___fltol
  5154                          	
  5155  514E  70 CF             	and	f, 0xCF   ;select user reg space
  5156  5150  62 D0 00          	mov	reg[CUR_PP],0
  5157  5153  51 41             	mov	a,[0+((0+?___fltol)^0x0)]
  5158  5155  53 27             	mov	[0+((printf@_val)^0x0)],a
  5159  5157  51 42             	mov	a,[1+((0+?___fltol)^0x0)]
  5160  5159  53 28             	mov	[1+((printf@_val)^0x0)],a
  5161  515B  51 43             	mov	a,[2+((0+?___fltol)^0x0)]
  5162  515D  53 29             	mov	[2+((printf@_val)^0x0)],a
  5163  515F  51 44             	mov	a,[3+((0+?___fltol)^0x0)]
  5164  5161  53 2A             	mov	[3+((printf@_val)^0x0)],a
  5165                          	line	1119
  5166                          ;doprnt.c: 1119: fval -= (double)_val._val;
  5167  5163  51 27             	mov	a,[0+((printf@_val)^0x0)]
  5168  5165  53 41             	mov	[0+((?___lltofl)^0x0)],a
  5169  5167  51 28             	mov	a,[1+((printf@_val)^0x0)]
  5170  5169  53 42             	mov	[1+((?___lltofl)^0x0)],a
  5171  516B  51 29             	mov	a,[2+((printf@_val)^0x0)]
  5172  516D  53 43             	mov	[2+((?___lltofl)^0x0)],a
  5173  516F  51 2A             	mov	a,[3+((printf@_val)^0x0)]
  5174  5171  53 44             	mov	[3+((?___lltofl)^0x0)],a
  5175  5173  71 80             	or	f, 0x80	;select multiple RAM page mode
  5176                          	
  5177  5175  7C 5ED1           	xcall	___lltofl
  5178                          	
  5179  5178  70 CF             	and	f, 0xCF   ;select user reg space
  5180  517A  62 D0 00          	mov	reg[CUR_PP],0
  5181  517D  51 41             	mov	a,[0+((0+?___lltofl)^0x0)]
  5182  517F  53 45             	mov	[0+((0+?___flsub+04h)^0x0)],a
  5183  5181  51 42             	mov	a,[1+((0+?___lltofl)^0x0)]
  5184  5183  53 46             	mov	[1+((0+?___flsub+04h)^0x0)],a
  5185  5185  51 43             	mov	a,[2+((0+?___lltofl)^0x0)]
  5186  5187  53 47             	mov	[2+((0+?___flsub+04h)^0x0)],a
  5187  5189  51 44             	mov	a,[3+((0+?___lltofl)^0x0)]
  5188  518B  53 48             	mov	[3+((0+?___flsub+04h)^0x0)],a
  5189  518D  51 23             	mov	a,[0+((printf@fval)^0x0)]
  5190  518F  53 41             	mov	[0+((?___flsub)^0x0)],a
  5191  5191  51 24             	mov	a,[1+((printf@fval)^0x0)]
  5192  5193  53 42             	mov	[1+((?___flsub)^0x0)],a
  5193  5195  51 25             	mov	a,[2+((printf@fval)^0x0)]
  5194  5197  53 43             	mov	[2+((?___flsub)^0x0)],a
  5195  5199  51 26             	mov	a,[3+((printf@fval)^0x0)]
  5196  519B  53 44             	mov	[3+((?___flsub)^0x0)],a
  5197  519D  71 80             	or	f, 0x80	;select multiple RAM page mode
  5198                          	
  5199  519F  7C 5D18           	xcall	___flsub
  5200                          	
  5201  51A2  70 CF             	and	f, 0xCF   ;select user reg space
  5202  51A4  62 D0 00          	mov	reg[CUR_PP],0
  5203  51A7  51 41             	mov	a,[0+((0+?___flsub)^0x0)]
  5204  51A9  53 23             	mov	[0+((printf@fval)^0x0)],a
  5205  51AB  51 42             	mov	a,[1+((0+?___flsub)^0x0)]
  5206  51AD  53 24             	mov	[1+((printf@fval)^0x0)],a
  5207  51AF  51 43             	mov	a,[2+((0+?___flsub)^0x0)]
  5208  51B1  53 25             	mov	[2+((printf@fval)^0x0)],a
  5209  51B3  51 44             	mov	a,[3+((0+?___flsub)^0x0)]
  5210  51B5  53 26             	mov	[3+((printf@fval)^0x0)],a
  5211                          	line	1120
  5212                          ;doprnt.c: 1120: exp = 0;
  5213  51B7  50 00             	mov	a,<(0)
  5214  51B9  70 CF             	and	f, 0xCF   ;select user reg space
  5215  51BB  62 D0 00          	mov	reg[CUR_PP],0
  5216  51BE  53 32             	mov	[1+((printf@exp)^0x0)],a
  5217  51C0  50 00             	mov	a,>(0)
  5218  51C2  53 31             	mov	[0+((printf@exp)^0x0)],a
  5219                          	line	1121
  5220                          ;			
  5221  51C4                    l181:	
  5222                          	line	1123
  5223                          ;doprnt.c: 1121: }
  5224                          ;doprnt.c: 1123: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5225  51C4  50 01             	mov	a,<((01h))
  5226  51C6  70 CF             	and	f, 0xCF   ;select user reg space
  5227  51C8  62 D0 00          	mov	reg[CUR_PP],0
  5228  51CB  53 39             	mov	[0+((printf@c)^0x0)],a
  5229  51CD  70 CF             	and	f, 0xCF   ;select user reg space
  5230  51CF  62 D0 00          	mov	reg[CUR_PP],0
  5231  51D2  51 39             	mov	a,[0+((printf@c)^0x0)]
  5232  51D4  39 0A             	cmp	a,(0Ah)
  5233  51D6  B004              	jnz	l182
  5234  51D8  7D 5224           	xjmp	l183
  5235                          	line	1124
  5236                          ;			
  5237  51DB                    l182:	
  5238                          ;doprnt.c: 1124: if(_val._val < dpowers[c])
  5239  51DB  70 CF             	and	f, 0xCF   ;select user reg space
  5240  51DD  62 D0 00          	mov	reg[CUR_PP],0
  5241  51E0  51 39             	mov	a,[0+((printf@c)^0x0)]
  5242  51E2  64                	asl	a
  5243  51E3  64                	asl	a
  5244  51E4  01 68             	add	a,<_dpowers
  5245  51E6  5C                	mov	x,a
  5246  51E7  50 7C             	mov	a,>_dpowers
  5247  51E9  08                	push	a
  5248  51EA  28                	romx
  5249  51EB  53 3A             	mov	[(??_printf^0x0)+23+0],a
  5250  51ED  18                	pop	a
  5251  51EE  75                	inc	x
  5252  51EF  08                	push	a
  5253  51F0  28                	romx
  5254  51F1  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  5255  51F3  18                	pop	a
  5256  51F4  75                	inc	x
  5257  51F5  08                	push	a
  5258  51F6  28                	romx
  5259  51F7  53 3C             	mov	[(??_printf^0x0)+23+0+2],a
  5260  51F9  18                	pop	a
  5261  51FA  75                	inc	x
  5262  51FB  28                	romx
  5263  51FC  53 3D             	mov	[(??_printf^0x0)+23+0+3],a
  5264  51FE  51 2A             	mov	a,[3+((printf@_val)^0x0)]
  5265  5200  3A 3D             	cmp	a,[(??_printf^0x0)+23+3]
  5266  5202  51 29             	mov	a,[2+((printf@_val)^0x0)]
  5267  5204  1A 3C             	sbb	a,[(??_printf^0x0)+23+2]
  5268  5206  51 28             	mov	a,[1+((printf@_val)^0x0)]
  5269  5208  1A 3B             	sbb	a,[(??_printf^0x0)+23+1]
  5270  520A  51 27             	mov	a,[0+((printf@_val)^0x0)]
  5271  520C  1A 3A             	sbb	a,[(??_printf^0x0)+23+0]
  5272  520E  D004              	jnc	l185
  5273                          	line	1125
  5274                          ;doprnt.c: 1125: break;
  5275  5210  7D 5224           	xjmp	l183
  5276                          ;			
  5277  5213                    l185:	
  5278                          	line	1123
  5279  5213  70 CF             	and	f, 0xCF   ;select user reg space
  5280  5215  62 D0 00          	mov	reg[CUR_PP],0
  5281  5218  51 39             	mov	a,[0+((printf@c)^0x0)]
  5282  521A  01 01             	add	a,<((01h))
  5283  521C  53 39             	mov	[0+((printf@c)^0x0)],a
  5284  521E  51 39             	mov	a,[0+((printf@c)^0x0)]
  5285  5220  39 0A             	cmp	a,(0Ah)
  5286  5222  BFB8              	jnz	l182
  5287                          ;			
  5288  5224                    l183:	
  5289                          	line	1129
  5290                          ;doprnt.c: 1129: width -= prec + c + exp;
  5291  5224  70 CF             	and	f, 0xCF   ;select user reg space
  5292  5226  62 D0 00          	mov	reg[CUR_PP],0
  5293  5229  51 39             	mov	a,[0+((printf@c)^0x0)]
  5294  522B  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  5295  522D  55 3A  00         	mov	[(??_printf^0x0)+23+0],0
  5296  5230  6A                	rlc	a
  5297  5231  1E 3A  00         	sbb	[(??_printf^0x0)+23+0],0
  5298  5234  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  5299  5236  02 30             	add	a,[1+((printf@prec)^0x0)]
  5300  5238  53 3D             	mov	[(??_printf^0x0)+25+0+1],a
  5301  523A  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  5302  523C  0A 2F             	adc	a,[0+((printf@prec)^0x0)]
  5303  523E  53 3C             	mov	[(??_printf^0x0)+25+0],a
  5304  5240  51 3D             	mov	a,[(??_printf^0x0)+25+1]
  5305  5242  02 32             	add	a,[1+((printf@exp)^0x0)]
  5306  5244  53 3F             	mov	[(??_printf^0x0)+27+0+1],a
  5307  5246  51 3C             	mov	a,[(??_printf^0x0)+25+0]
  5308  5248  0A 31             	adc	a,[0+((printf@exp)^0x0)]
  5309  524A  53 3E             	mov	[(??_printf^0x0)+27+0],a
  5310  524C  51 34             	mov	a,[1+((printf@width)^0x0)]
  5311  524E  12 3F             	sub	a,[(??_printf^0x0)+27+1]
  5312  5250  53 34             	mov	[1+((printf@width)^0x0)],a
  5313  5252  51 33             	mov	a,[0+((printf@width)^0x0)]
  5314  5254  1A 3E             	sbb	a,[(??_printf^0x0)+27+0]
  5315  5256  53 33             	mov	[0+((printf@width)^0x0)],a
  5316                          	line	1134
  5317                          ;doprnt.c: 1130: if(
  5318                          ;doprnt.c: 1134: prec)
  5319  5258  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5320  525A  39 00             	cmp	a,>(0)
  5321  525C  B005              	jnz	u1463
  5322  525E  51 30             	mov	a,[1+((printf@prec)^0x0)]
  5323  5260  39 00             	cmp	a,<(0)
  5324  5262                    u1463:
  5325  5262  A012              	jz	l186
  5326                          	line	1135
  5327                          ;doprnt.c: 1135: width--;
  5328  5264  70 CF             	and	f, 0xCF   ;select user reg space
  5329  5266  62 D0 00          	mov	reg[CUR_PP],0
  5330  5269  51 34             	mov	a,[1+((printf@width)^0x0)]
  5331  526B  01 FF             	add	a,<(-1)
  5332  526D  53 34             	mov	[1+((printf@width)^0x0)],a
  5333  526F  51 33             	mov	a,[0+((printf@width)^0x0)]
  5334  5271  09 FF             	adc	a,>(-1)
  5335  5273  53 33             	mov	[0+((printf@width)^0x0)],a
  5336                          ;			
  5337  5275                    l186:	
  5338                          	line	1136
  5339                          ;doprnt.c: 1136: if(flag & 0x03)
  5340  5275  70 CF             	and	f, 0xCF   ;select user reg space
  5341  5277  62 D0 00          	mov	reg[CUR_PP],0
  5342  527A  51 36             	mov	a,[1+((printf@flag)^0x0)]
  5343  527C  21 03             	and	a,<(03h)
  5344  527E  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  5345  5280  51 35             	mov	a,[0+((printf@flag)^0x0)]
  5346  5282  21 00             	and	a,>(03h)
  5347  5284  53 3A             	mov	[(??_printf^0x0)+23+0],a
  5348  5286  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  5349  5288  39 00             	cmp	a,>(0)
  5350  528A  B005              	jnz	u1473
  5351  528C  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  5352  528E  39 00             	cmp	a,<(0)
  5353  5290                    u1473:
  5354  5290  A012              	jz	l187
  5355                          	line	1137
  5356                          ;doprnt.c: 1137: width--;
  5357  5292  70 CF             	and	f, 0xCF   ;select user reg space
  5358  5294  62 D0 00          	mov	reg[CUR_PP],0
  5359  5297  51 34             	mov	a,[1+((printf@width)^0x0)]
  5360  5299  01 FF             	add	a,<(-1)
  5361  529B  53 34             	mov	[1+((printf@width)^0x0)],a
  5362  529D  51 33             	mov	a,[0+((printf@width)^0x0)]
  5363  529F  09 FF             	adc	a,>(-1)
  5364  52A1  53 33             	mov	[0+((printf@width)^0x0)],a
  5365                          ;			
  5366  52A3                    l187:	
  5367                          	line	1160
  5368                          ;doprnt.c: 1155: {
  5369                          ;doprnt.c: 1160: while(width > 0) {
  5370  52A3  7D 52C5           	xjmp	l188
  5371                          ;			
  5372  52A6                    l189:	
  5373                          	line	1161
  5374                          ;doprnt.c: 1161: (putch(' ') );
  5375  52A6  50 20             	mov	a,<((020h))
  5376  52A8  70 CF             	and	f, 0xCF   ;select user reg space
  5377  52AA  62 D0 00          	mov	reg[CUR_PP],0
  5378  52AD  53 41             	mov	[0+((?_putch)^0x0)],a
  5379  52AF  71 80             	or	f, 0x80	;select multiple RAM page mode
  5380                          	
  5381  52B1  7C 5840           	xcall	_putch
  5382                          	
  5383                          	line	1162
  5384                          ;doprnt.c: 1162: width--;
  5385  52B4  70 CF             	and	f, 0xCF   ;select user reg space
  5386  52B6  62 D0 00          	mov	reg[CUR_PP],0
  5387  52B9  51 34             	mov	a,[1+((printf@width)^0x0)]
  5388  52BB  01 FF             	add	a,<(-1)
  5389  52BD  53 34             	mov	[1+((printf@width)^0x0)],a
  5390  52BF  51 33             	mov	a,[0+((printf@width)^0x0)]
  5391  52C1  09 FF             	adc	a,>(-1)
  5392  52C3  53 33             	mov	[0+((printf@width)^0x0)],a
  5393                          	line	1163
  5394                          ;			
  5395  52C5                    l188:	
  5396                          	line	1160
  5397  52C5  70 CF             	and	f, 0xCF   ;select user reg space
  5398  52C7  62 D0 00          	mov	reg[CUR_PP],0
  5399  52CA  51 34             	mov	a,[1+((printf@width)^0x0)]
  5400  52CC  39 01             	cmp	a,<(01h)
  5401  52CE  51 33             	mov	a,[0+((printf@width)^0x0)]
  5402  52D0  31 80             	xor	a,80h
  5403  52D2  19 80             	sbb	a,(>01h)^80h
  5404  52D4  DFD1              	jnc	l189
  5405                          ;			
  5406  52D6                    l190:	
  5407                          	line	1168
  5408                          ;doprnt.c: 1163: }
  5409                          ;doprnt.c: 1168: if(flag & 0x03)
  5410  52D6  70 CF             	and	f, 0xCF   ;select user reg space
  5411  52D8  62 D0 00          	mov	reg[CUR_PP],0
  5412  52DB  51 36             	mov	a,[1+((printf@flag)^0x0)]
  5413  52DD  21 03             	and	a,<(03h)
  5414  52DF  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  5415  52E1  51 35             	mov	a,[0+((printf@flag)^0x0)]
  5416  52E3  21 00             	and	a,>(03h)
  5417  52E5  53 3A             	mov	[(??_printf^0x0)+23+0],a
  5418  52E7  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  5419  52E9  39 00             	cmp	a,>(0)
  5420  52EB  B005              	jnz	u1483
  5421  52ED  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  5422  52EF  39 00             	cmp	a,<(0)
  5423  52F1                    u1483:
  5424  52F1  A00F              	jz	l191
  5425                          	line	1170
  5426                          ;doprnt.c: 1170: (putch('-') );
  5427  52F3  50 2D             	mov	a,<((02Dh))
  5428  52F5  70 CF             	and	f, 0xCF   ;select user reg space
  5429  52F7  62 D0 00          	mov	reg[CUR_PP],0
  5430  52FA  53 41             	mov	[0+((?_putch)^0x0)],a
  5431  52FC  71 80             	or	f, 0x80	;select multiple RAM page mode
  5432                          	
  5433  52FE  7C 5840           	xcall	_putch
  5434                          	
  5435                          ;			
  5436  5301                    l191:	
  5437                          	line	1176
  5438                          ;doprnt.c: 1175: }
  5439                          ;doprnt.c: 1176: while(c--) {
  5440  5301  7D 5376           	xjmp	l192
  5441                          ;			
  5442  5304                    l193:	
  5443                          	line	1180
  5444                          ;doprnt.c: 1180: (putch('0' + (_val._val/dpowers[c])%10) );
  5445  5304  70 CF             	and	f, 0xCF   ;select user reg space
  5446  5306  62 D0 00          	mov	reg[CUR_PP],0
  5447  5309  51 27             	mov	a,[0+((printf@_val)^0x0)]
  5448  530B  53 41             	mov	[0+((?___lldiv)^0x0)],a
  5449  530D  51 28             	mov	a,[1+((printf@_val)^0x0)]
  5450  530F  53 42             	mov	[1+((?___lldiv)^0x0)],a
  5451  5311  51 29             	mov	a,[2+((printf@_val)^0x0)]
  5452  5313  53 43             	mov	[2+((?___lldiv)^0x0)],a
  5453  5315  51 2A             	mov	a,[3+((printf@_val)^0x0)]
  5454  5317  53 44             	mov	[3+((?___lldiv)^0x0)],a
  5455  5319  51 39             	mov	a,[0+((printf@c)^0x0)]
  5456  531B  64                	asl	a
  5457  531C  64                	asl	a
  5458  531D  01 68             	add	a,<_dpowers
  5459  531F  5C                	mov	x,a
  5460  5320  50 7C             	mov	a,>_dpowers
  5461  5322  08                	push	a
  5462  5323  28                	romx
  5463  5324  53 45             	mov	[0+((0+?___lldiv+04h)^0x0)],a
  5464  5326  18                	pop	a
  5465  5327  75                	inc	x
  5466  5328  08                	push	a
  5467  5329  28                	romx
  5468  532A  53 46             	mov	[1+((0+?___lldiv+04h)^0x0)],a
  5469  532C  18                	pop	a
  5470  532D  75                	inc	x
  5471  532E  08                	push	a
  5472  532F  28                	romx
  5473  5330  53 47             	mov	[2+((0+?___lldiv+04h)^0x0)],a
  5474  5332  18                	pop	a
  5475  5333  75                	inc	x
  5476  5334  28                	romx
  5477  5335  53 48             	mov	[3+((0+?___lldiv+04h)^0x0)],a
  5478  5337  71 80             	or	f, 0x80	;select multiple RAM page mode
  5479                          	
  5480  5339  7C 5BEE           	xcall	___lldiv
  5481                          	
  5482  533C  70 CF             	and	f, 0xCF   ;select user reg space
  5483  533E  62 D0 00          	mov	reg[CUR_PP],0
  5484  5341  51 41             	mov	a,[0+((0+?___lldiv)^0x0)]
  5485  5343  53 41             	mov	[0+((?___llmod)^0x0)],a
  5486  5345  51 42             	mov	a,[1+((0+?___lldiv)^0x0)]
  5487  5347  53 42             	mov	[1+((?___llmod)^0x0)],a
  5488  5349  51 43             	mov	a,[2+((0+?___lldiv)^0x0)]
  5489  534B  53 43             	mov	[2+((?___llmod)^0x0)],a
  5490  534D  51 44             	mov	a,[3+((0+?___lldiv)^0x0)]
  5491  534F  53 44             	mov	[3+((?___llmod)^0x0)],a
  5492  5351  50 00             	mov	a,<(0Ah>>24)
  5493  5353  53 45             	mov	[0+((0+?___llmod+04h)^0x0)],a
  5494  5355  50 00             	mov	a,<(0Ah>>16)
  5495  5357  53 46             	mov	[1+((0+?___llmod+04h)^0x0)],a
  5496  5359  50 00             	mov	a,<(0Ah>>8)
  5497  535B  53 47             	mov	[2+((0+?___llmod+04h)^0x0)],a
  5498  535D  50 0A             	mov	a,<(0Ah)
  5499  535F  53 48             	mov	[3+((0+?___llmod+04h)^0x0)],a
  5500  5361  71 80             	or	f, 0x80	;select multiple RAM page mode
  5501                          	
  5502  5363  7C 5DF1           	xcall	___llmod
  5503                          	
  5504  5366  50 30             	mov	a,<((030h))
  5505  5368  70 CF             	and	f, 0xCF   ;select user reg space
  5506  536A  62 D0 00          	mov	reg[CUR_PP],0
  5507  536D  02 44             	add	a,[3+((0+?___llmod)^0x0)]
  5508  536F  53 41             	mov	[0+((?_putch)^0x0)],a
  5509  5371  71 80             	or	f, 0x80	;select multiple RAM page mode
  5510                          	
  5511  5373  7C 5840           	xcall	_putch
  5512                          	
  5513                          	line	1182
  5514                          ;			
  5515  5376                    l192:	
  5516                          	line	1176
  5517  5376  70 CF             	and	f, 0xCF   ;select user reg space
  5518  5378  62 D0 00          	mov	reg[CUR_PP],0
  5519  537B  51 39             	mov	a,[0+((printf@c)^0x0)]
  5520  537D  01 FF             	add	a,<((-1))
  5521  537F  53 39             	mov	[0+((printf@c)^0x0)],a
  5522  5381  51 39             	mov	a,[0+((printf@c)^0x0)]
  5523  5383  39 FF             	cmp	a,(-1)
  5524  5385  BF7E              	jnz	l193
  5525                          ;			
  5526  5387                    l194:	
  5527                          	line	1183
  5528                          ;doprnt.c: 1182: }
  5529                          ;doprnt.c: 1183: while(exp > 0) {
  5530  5387  7D 53A9           	xjmp	l195
  5531                          ;			
  5532  538A                    l196:	
  5533                          	line	1184
  5534                          ;doprnt.c: 1184: (putch('0') );
  5535  538A  50 30             	mov	a,<((030h))
  5536  538C  70 CF             	and	f, 0xCF   ;select user reg space
  5537  538E  62 D0 00          	mov	reg[CUR_PP],0
  5538  5391  53 41             	mov	[0+((?_putch)^0x0)],a
  5539  5393  71 80             	or	f, 0x80	;select multiple RAM page mode
  5540                          	
  5541  5395  7C 5840           	xcall	_putch
  5542                          	
  5543                          	line	1185
  5544                          ;doprnt.c: 1185: exp--;
  5545  5398  70 CF             	and	f, 0xCF   ;select user reg space
  5546  539A  62 D0 00          	mov	reg[CUR_PP],0
  5547  539D  51 32             	mov	a,[1+((printf@exp)^0x0)]
  5548  539F  01 FF             	add	a,<(-1)
  5549  53A1  53 32             	mov	[1+((printf@exp)^0x0)],a
  5550  53A3  51 31             	mov	a,[0+((printf@exp)^0x0)]
  5551  53A5  09 FF             	adc	a,>(-1)
  5552  53A7  53 31             	mov	[0+((printf@exp)^0x0)],a
  5553                          	line	1186
  5554                          ;			
  5555  53A9                    l195:	
  5556                          	line	1183
  5557  53A9  70 CF             	and	f, 0xCF   ;select user reg space
  5558  53AB  62 D0 00          	mov	reg[CUR_PP],0
  5559  53AE  51 32             	mov	a,[1+((printf@exp)^0x0)]
  5560  53B0  39 01             	cmp	a,<(01h)
  5561  53B2  51 31             	mov	a,[0+((printf@exp)^0x0)]
  5562  53B4  31 80             	xor	a,80h
  5563  53B6  19 80             	sbb	a,(>01h)^80h
  5564  53B8  DFD1              	jnc	l196
  5565                          ;			
  5566  53BA                    l197:	
  5567                          	line	1187
  5568                          ;doprnt.c: 1186: }
  5569                          ;doprnt.c: 1187: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5570  53BA  70 CF             	and	f, 0xCF   ;select user reg space
  5571  53BC  62 D0 00          	mov	reg[CUR_PP],0
  5572  53BF  51 30             	mov	a,[1+((printf@prec)^0x0)]
  5573  53C1  39 09             	cmp	a,<(09h)
  5574  53C3  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5575  53C5  31 80             	xor	a,80h
  5576  53C7  19 80             	sbb	a,(>09h)^80h
  5577  53C9  C00D              	jc	l198
  5578                          	line	1188
  5579                          ;doprnt.c: 1188: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5580  53CB  50 08             	mov	a,<((08h))
  5581  53CD  70 CF             	and	f, 0xCF   ;select user reg space
  5582  53CF  62 D0 00          	mov	reg[CUR_PP],0
  5583  53D2  53 39             	mov	[0+((printf@c)^0x0)],a
  5584  53D4  7D 53E9           	xjmp	l199
  5585                          	line	1189
  5586                          ;			
  5587  53D7                    l198:	
  5588                          	line	1190
  5589                          ;doprnt.c: 1189: else
  5590                          ;doprnt.c: 1190: c = prec;
  5591  53D7  50 01             	mov	a,<((01h))
  5592  53D9  01 2F             	add	a,<(8000h+printf@prec)
  5593  53DB  5C                	mov	x,a
  5594  53DC  50 80             	mov	a,>(8000h+printf@prec)
  5595  53DE  70 CF             	and	f, 0xCF   ;select user reg space
  5596  53E0  60 D3             	mov	reg[0xd3],a
  5597  53E2  52 00             	mov	a,[x+0]
  5598  53E4  62 D0 00          	mov	reg[CUR_PP],0
  5599  53E7  53 39             	mov	[0+((printf@c)^0x0)],a
  5600                          ;			
  5601  53E9                    l199:	
  5602                          	line	1191
  5603                          ;doprnt.c: 1191: prec -= c;
  5604  53E9  70 CF             	and	f, 0xCF   ;select user reg space
  5605  53EB  62 D0 00          	mov	reg[CUR_PP],0
  5606  53EE  51 39             	mov	a,[0+((printf@c)^0x0)]
  5607  53F0  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  5608  53F2  55 3A  00         	mov	[(??_printf^0x0)+23+0],0
  5609  53F5  6A                	rlc	a
  5610  53F6  1E 3A  00         	sbb	[(??_printf^0x0)+23+0],0
  5611  53F9  51 30             	mov	a,[1+((printf@prec)^0x0)]
  5612  53FB  12 3B             	sub	a,[(??_printf^0x0)+23+1]
  5613  53FD  53 30             	mov	[1+((printf@prec)^0x0)],a
  5614  53FF  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5615  5401  1A 3A             	sbb	a,[(??_printf^0x0)+23+0]
  5616  5403  53 2F             	mov	[0+((printf@prec)^0x0)],a
  5617                          	line	1195
  5618                          ;doprnt.c: 1195: if(c)
  5619  5405  70 CF             	and	f, 0xCF   ;select user reg space
  5620  5407  62 D0 00          	mov	reg[CUR_PP],0
  5621  540A  51 39             	mov	a,[0+((printf@c)^0x0)]
  5622  540C  39 00             	cmp	a,(0)
  5623  540E  A00F              	jz	l200
  5624                          	line	1197
  5625                          ;doprnt.c: 1197: (putch('.') );
  5626  5410  50 2E             	mov	a,<((02Eh))
  5627  5412  70 CF             	and	f, 0xCF   ;select user reg space
  5628  5414  62 D0 00          	mov	reg[CUR_PP],0
  5629  5417  53 41             	mov	[0+((?_putch)^0x0)],a
  5630  5419  71 80             	or	f, 0x80	;select multiple RAM page mode
  5631                          	
  5632  541B  7C 5840           	xcall	_putch
  5633                          	
  5634                          ;			
  5635  541E                    l200:	
  5636                          	line	1203
  5637                          ;doprnt.c: 1203: _val._val = (long)(fval * scale(c));
  5638  541E  70 CF             	and	f, 0xCF   ;select user reg space
  5639  5420  62 D0 00          	mov	reg[CUR_PP],0
  5640  5423  51 39             	mov	a,[0+((printf@c)^0x0)]
  5641  5425  53 41             	mov	[0+((?_scale)^0x0)],a
  5642  5427  71 80             	or	f, 0x80	;select multiple RAM page mode
  5643                          	
  5644  5429  7C 61EB           	xcall	_scale
  5645                          	
  5646  542C  70 CF             	and	f, 0xCF   ;select user reg space
  5647  542E  62 D0 00          	mov	reg[CUR_PP],0
  5648  5431  51 41             	mov	a,[0+((0+?_scale)^0x0)]
  5649  5433  53 5E             	mov	[0+((?___flmul)^0x0)],a
  5650  5435  51 42             	mov	a,[1+((0+?_scale)^0x0)]
  5651  5437  53 5F             	mov	[1+((?___flmul)^0x0)],a
  5652  5439  51 43             	mov	a,[2+((0+?_scale)^0x0)]
  5653  543B  53 60             	mov	[2+((?___flmul)^0x0)],a
  5654  543D  51 44             	mov	a,[3+((0+?_scale)^0x0)]
  5655  543F  53 61             	mov	[3+((?___flmul)^0x0)],a
  5656  5441  51 23             	mov	a,[0+((printf@fval)^0x0)]
  5657  5443  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  5658  5445  51 24             	mov	a,[1+((printf@fval)^0x0)]
  5659  5447  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  5660  5449  51 25             	mov	a,[2+((printf@fval)^0x0)]
  5661  544B  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  5662  544D  51 26             	mov	a,[3+((printf@fval)^0x0)]
  5663  544F  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  5664  5451  71 80             	or	f, 0x80	;select multiple RAM page mode
  5665                          	
  5666  5453  7C 7201           	xcall	___flmul
  5667                          	
  5668  5456  70 CF             	and	f, 0xCF   ;select user reg space
  5669  5458  62 D0 00          	mov	reg[CUR_PP],0
  5670  545B  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  5671  545D  53 41             	mov	[0+((?___fltol)^0x0)],a
  5672  545F  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  5673  5461  53 42             	mov	[1+((?___fltol)^0x0)],a
  5674  5463  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  5675  5465  53 43             	mov	[2+((?___fltol)^0x0)],a
  5676  5467  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  5677  5469  53 44             	mov	[3+((?___fltol)^0x0)],a
  5678  546B  71 80             	or	f, 0x80	;select multiple RAM page mode
  5679                          	
  5680  546D  7C 6831           	xcall	___fltol
  5681                          	
  5682  5470  70 CF             	and	f, 0xCF   ;select user reg space
  5683  5472  62 D0 00          	mov	reg[CUR_PP],0
  5684  5475  51 41             	mov	a,[0+((0+?___fltol)^0x0)]
  5685  5477  53 27             	mov	[0+((printf@_val)^0x0)],a
  5686  5479  51 42             	mov	a,[1+((0+?___fltol)^0x0)]
  5687  547B  53 28             	mov	[1+((printf@_val)^0x0)],a
  5688  547D  51 43             	mov	a,[2+((0+?___fltol)^0x0)]
  5689  547F  53 29             	mov	[2+((printf@_val)^0x0)],a
  5690  5481  51 44             	mov	a,[3+((0+?___fltol)^0x0)]
  5691  5483  53 2A             	mov	[3+((printf@_val)^0x0)],a
  5692                          	line	1204
  5693                          ;doprnt.c: 1204: while(c--) {
  5694  5485  7D 5547           	xjmp	l201
  5695                          ;			
  5696  5488                    l202:	
  5697                          	line	1205
  5698                          ;doprnt.c: 1205: (putch('0' + (_val._val/dpowers[c])%10) );
  5699  5488  70 CF             	and	f, 0xCF   ;select user reg space
  5700  548A  62 D0 00          	mov	reg[CUR_PP],0
  5701  548D  51 27             	mov	a,[0+((printf@_val)^0x0)]
  5702  548F  53 41             	mov	[0+((?___lldiv)^0x0)],a
  5703  5491  51 28             	mov	a,[1+((printf@_val)^0x0)]
  5704  5493  53 42             	mov	[1+((?___lldiv)^0x0)],a
  5705  5495  51 29             	mov	a,[2+((printf@_val)^0x0)]
  5706  5497  53 43             	mov	[2+((?___lldiv)^0x0)],a
  5707  5499  51 2A             	mov	a,[3+((printf@_val)^0x0)]
  5708  549B  53 44             	mov	[3+((?___lldiv)^0x0)],a
  5709  549D  51 39             	mov	a,[0+((printf@c)^0x0)]
  5710  549F  64                	asl	a
  5711  54A0  64                	asl	a
  5712  54A1  01 68             	add	a,<_dpowers
  5713  54A3  5C                	mov	x,a
  5714  54A4  50 7C             	mov	a,>_dpowers
  5715  54A6  08                	push	a
  5716  54A7  28                	romx
  5717  54A8  53 45             	mov	[0+((0+?___lldiv+04h)^0x0)],a
  5718  54AA  18                	pop	a
  5719  54AB  75                	inc	x
  5720  54AC  08                	push	a
  5721  54AD  28                	romx
  5722  54AE  53 46             	mov	[1+((0+?___lldiv+04h)^0x0)],a
  5723  54B0  18                	pop	a
  5724  54B1  75                	inc	x
  5725  54B2  08                	push	a
  5726  54B3  28                	romx
  5727  54B4  53 47             	mov	[2+((0+?___lldiv+04h)^0x0)],a
  5728  54B6  18                	pop	a
  5729  54B7  75                	inc	x
  5730  54B8  28                	romx
  5731  54B9  53 48             	mov	[3+((0+?___lldiv+04h)^0x0)],a
  5732  54BB  71 80             	or	f, 0x80	;select multiple RAM page mode
  5733                          	
  5734  54BD  7C 5BEE           	xcall	___lldiv
  5735                          	
  5736  54C0  70 CF             	and	f, 0xCF   ;select user reg space
  5737  54C2  62 D0 00          	mov	reg[CUR_PP],0
  5738  54C5  51 41             	mov	a,[0+((0+?___lldiv)^0x0)]
  5739  54C7  53 41             	mov	[0+((?___llmod)^0x0)],a
  5740  54C9  51 42             	mov	a,[1+((0+?___lldiv)^0x0)]
  5741  54CB  53 42             	mov	[1+((?___llmod)^0x0)],a
  5742  54CD  51 43             	mov	a,[2+((0+?___lldiv)^0x0)]
  5743  54CF  53 43             	mov	[2+((?___llmod)^0x0)],a
  5744  54D1  51 44             	mov	a,[3+((0+?___lldiv)^0x0)]
  5745  54D3  53 44             	mov	[3+((?___llmod)^0x0)],a
  5746  54D5  50 00             	mov	a,<(0Ah>>24)
  5747  54D7  53 45             	mov	[0+((0+?___llmod+04h)^0x0)],a
  5748  54D9  50 00             	mov	a,<(0Ah>>16)
  5749  54DB  53 46             	mov	[1+((0+?___llmod+04h)^0x0)],a
  5750  54DD  50 00             	mov	a,<(0Ah>>8)
  5751  54DF  53 47             	mov	[2+((0+?___llmod+04h)^0x0)],a
  5752  54E1  50 0A             	mov	a,<(0Ah)
  5753  54E3  53 48             	mov	[3+((0+?___llmod+04h)^0x0)],a
  5754  54E5  71 80             	or	f, 0x80	;select multiple RAM page mode
  5755                          	
  5756  54E7  7C 5DF1           	xcall	___llmod
  5757                          	
  5758  54EA  50 30             	mov	a,<((030h))
  5759  54EC  70 CF             	and	f, 0xCF   ;select user reg space
  5760  54EE  62 D0 00          	mov	reg[CUR_PP],0
  5761  54F1  02 44             	add	a,[3+((0+?___llmod)^0x0)]
  5762  54F3  53 41             	mov	[0+((?_putch)^0x0)],a
  5763  54F5  71 80             	or	f, 0x80	;select multiple RAM page mode
  5764                          	
  5765  54F7  7C 5840           	xcall	_putch
  5766                          	
  5767                          	line	1206
  5768                          ;doprnt.c: 1206: _val._val %= dpowers[c];
  5769  54FA  70 CF             	and	f, 0xCF   ;select user reg space
  5770  54FC  62 D0 00          	mov	reg[CUR_PP],0
  5771  54FF  51 27             	mov	a,[0+((printf@_val)^0x0)]
  5772  5501  53 41             	mov	[0+((?___llmod)^0x0)],a
  5773  5503  51 28             	mov	a,[1+((printf@_val)^0x0)]
  5774  5505  53 42             	mov	[1+((?___llmod)^0x0)],a
  5775  5507  51 29             	mov	a,[2+((printf@_val)^0x0)]
  5776  5509  53 43             	mov	[2+((?___llmod)^0x0)],a
  5777  550B  51 2A             	mov	a,[3+((printf@_val)^0x0)]
  5778  550D  53 44             	mov	[3+((?___llmod)^0x0)],a
  5779  550F  51 39             	mov	a,[0+((printf@c)^0x0)]
  5780  5511  64                	asl	a
  5781  5512  64                	asl	a
  5782  5513  01 68             	add	a,<_dpowers
  5783  5515  5C                	mov	x,a
  5784  5516  50 7C             	mov	a,>_dpowers
  5785  5518  08                	push	a
  5786  5519  28                	romx
  5787  551A  53 45             	mov	[0+((0+?___llmod+04h)^0x0)],a
  5788  551C  18                	pop	a
  5789  551D  75                	inc	x
  5790  551E  08                	push	a
  5791  551F  28                	romx
  5792  5520  53 46             	mov	[1+((0+?___llmod+04h)^0x0)],a
  5793  5522  18                	pop	a
  5794  5523  75                	inc	x
  5795  5524  08                	push	a
  5796  5525  28                	romx
  5797  5526  53 47             	mov	[2+((0+?___llmod+04h)^0x0)],a
  5798  5528  18                	pop	a
  5799  5529  75                	inc	x
  5800  552A  28                	romx
  5801  552B  53 48             	mov	[3+((0+?___llmod+04h)^0x0)],a
  5802  552D  71 80             	or	f, 0x80	;select multiple RAM page mode
  5803                          	
  5804  552F  7C 5DF1           	xcall	___llmod
  5805                          	
  5806  5532  70 CF             	and	f, 0xCF   ;select user reg space
  5807  5534  62 D0 00          	mov	reg[CUR_PP],0
  5808  5537  51 41             	mov	a,[0+((0+?___llmod)^0x0)]
  5809  5539  53 27             	mov	[0+((printf@_val)^0x0)],a
  5810  553B  51 42             	mov	a,[1+((0+?___llmod)^0x0)]
  5811  553D  53 28             	mov	[1+((printf@_val)^0x0)],a
  5812  553F  51 43             	mov	a,[2+((0+?___llmod)^0x0)]
  5813  5541  53 29             	mov	[2+((printf@_val)^0x0)],a
  5814  5543  51 44             	mov	a,[3+((0+?___llmod)^0x0)]
  5815  5545  53 2A             	mov	[3+((printf@_val)^0x0)],a
  5816                          	line	1207
  5817                          ;			
  5818  5547                    l201:	
  5819                          	line	1204
  5820  5547  70 CF             	and	f, 0xCF   ;select user reg space
  5821  5549  62 D0 00          	mov	reg[CUR_PP],0
  5822  554C  51 39             	mov	a,[0+((printf@c)^0x0)]
  5823  554E  01 FF             	add	a,<((-1))
  5824  5550  53 39             	mov	[0+((printf@c)^0x0)],a
  5825  5552  51 39             	mov	a,[0+((printf@c)^0x0)]
  5826  5554  39 FF             	cmp	a,(-1)
  5827  5556  BF31              	jnz	l202
  5828                          ;			
  5829  5558                    l203:	
  5830                          	line	1209
  5831                          ;doprnt.c: 1207: }
  5832                          ;doprnt.c: 1209: while(prec) {
  5833  5558  7D 557A           	xjmp	l204
  5834                          ;			
  5835  555B                    l205:	
  5836                          	line	1210
  5837                          ;doprnt.c: 1210: (putch('0') );
  5838  555B  50 30             	mov	a,<((030h))
  5839  555D  70 CF             	and	f, 0xCF   ;select user reg space
  5840  555F  62 D0 00          	mov	reg[CUR_PP],0
  5841  5562  53 41             	mov	[0+((?_putch)^0x0)],a
  5842  5564  71 80             	or	f, 0x80	;select multiple RAM page mode
  5843                          	
  5844  5566  7C 5840           	xcall	_putch
  5845                          	
  5846                          	line	1211
  5847                          ;doprnt.c: 1211: prec--;
  5848  5569  70 CF             	and	f, 0xCF   ;select user reg space
  5849  556B  62 D0 00          	mov	reg[CUR_PP],0
  5850  556E  51 30             	mov	a,[1+((printf@prec)^0x0)]
  5851  5570  01 FF             	add	a,<(-1)
  5852  5572  53 30             	mov	[1+((printf@prec)^0x0)],a
  5853  5574  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5854  5576  09 FF             	adc	a,>(-1)
  5855  5578  53 2F             	mov	[0+((printf@prec)^0x0)],a
  5856                          	line	1212
  5857                          ;			
  5858  557A                    l204:	
  5859                          	line	1209
  5860  557A  70 CF             	and	f, 0xCF   ;select user reg space
  5861  557C  62 D0 00          	mov	reg[CUR_PP],0
  5862  557F  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5863  5581  39 00             	cmp	a,>(0)
  5864  5583  B005              	jnz	u1493
  5865  5585  51 30             	mov	a,[1+((printf@prec)^0x0)]
  5866  5587  39 00             	cmp	a,<(0)
  5867  5589                    u1493:
  5868  5589  BFD1              	jnz	l205
  5869                          ;			
  5870  558B                    l206:	
  5871                          	line	1219
  5872                          ;doprnt.c: 1212: }
  5873                          ;doprnt.c: 1219: continue;
  5874  558B  7D 575F           	xjmp	l150
  5875                          	line	1220
  5876                          ;			
  5877  558E                    l169:	
  5878                          	line	1264
  5879                          ;doprnt.c: 1220: }
  5880                          ;doprnt.c: 1264: if(prec == 0 && _val._val == 0)
  5881  558E  70 CF             	and	f, 0xCF   ;select user reg space
  5882  5590  62 D0 00          	mov	reg[CUR_PP],0
  5883  5593  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5884  5595  39 00             	cmp	a,>(0)
  5885  5597  B005              	jnz	u1503
  5886  5599  51 30             	mov	a,[1+((printf@prec)^0x0)]
  5887  559B  39 00             	cmp	a,<(0)
  5888  559D                    u1503:
  5889  559D  B02F              	jnz	l207
  5890  559F  70 CF             	and	f, 0xCF   ;select user reg space
  5891  55A1  62 D0 00          	mov	reg[CUR_PP],0
  5892  55A4  51 27             	mov	a,[0+((printf@_val)^0x0)]
  5893  55A6  39 00             	cmp	a,<(0>>24)
  5894  55A8  B011              	jnz	u1513
  5895  55AA  51 28             	mov	a,[1+((printf@_val)^0x0)]
  5896  55AC  39 00             	cmp	a,<(0>>16)
  5897  55AE  B00B              	jnz	u1513
  5898  55B0  51 29             	mov	a,[2+((printf@_val)^0x0)]
  5899  55B2  39 00             	cmp	a,<(0>>8)
  5900  55B4  B005              	jnz	u1513
  5901  55B6  51 2A             	mov	a,[3+((printf@_val)^0x0)]
  5902  55B8  39 00             	cmp	a,<(0)
  5903  55BA                    u1513:
  5904  55BA  B012              	jnz	l207
  5905                          	line	1265
  5906                          ;doprnt.c: 1265: prec++;
  5907  55BC  70 CF             	and	f, 0xCF   ;select user reg space
  5908  55BE  62 D0 00          	mov	reg[CUR_PP],0
  5909  55C1  51 30             	mov	a,[1+((printf@prec)^0x0)]
  5910  55C3  01 01             	add	a,<(01h)
  5911  55C5  53 30             	mov	[1+((printf@prec)^0x0)],a
  5912  55C7  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5913  55C9  09 00             	adc	a,>(01h)
  5914  55CB  53 2F             	mov	[0+((printf@prec)^0x0)],a
  5915                          ;			
  5916  55CD                    l207:	
  5917                          	line	1313
  5918                          ;doprnt.c: 1313: if(c < prec)
  5919  55CD  70 CF             	and	f, 0xCF   ;select user reg space
  5920  55CF  62 D0 00          	mov	reg[CUR_PP],0
  5921  55D2  51 39             	mov	a,[0+((printf@c)^0x0)]
  5922  55D4  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  5923  55D6  55 3A  00         	mov	[(??_printf^0x0)+23+0],0
  5924  55D9  6A                	rlc	a
  5925  55DA  1E 3A  00         	sbb	[(??_printf^0x0)+23+0],0
  5926  55DD  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5927  55DF  31 80             	xor	a,80h
  5928  55E1  53 3C             	mov	[(??_printf^0x0)+25+0],a
  5929  55E3  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  5930  55E5  3A 30             	cmp	a,[1+((printf@prec)^0x0)]
  5931  55E7  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  5932  55E9  31 80             	xor	a,80h
  5933  55EB  1A 3C             	sbb	a,[(??_printf^0x0)+25+0]
  5934  55ED  D016              	jnc	l208
  5935                          	line	1314
  5936                          ;doprnt.c: 1314: c = prec;
  5937  55EF  50 01             	mov	a,<((01h))
  5938  55F1  01 2F             	add	a,<(8000h+printf@prec)
  5939  55F3  5C                	mov	x,a
  5940  55F4  50 80             	mov	a,>(8000h+printf@prec)
  5941  55F6  70 CF             	and	f, 0xCF   ;select user reg space
  5942  55F8  60 D3             	mov	reg[0xd3],a
  5943  55FA  52 00             	mov	a,[x+0]
  5944  55FC  62 D0 00          	mov	reg[CUR_PP],0
  5945  55FF  53 39             	mov	[0+((printf@c)^0x0)],a
  5946  5601  7D 5633           	xjmp	l209
  5947                          	line	1315
  5948                          ;			
  5949  5604                    l208:	
  5950                          ;doprnt.c: 1315: else if(prec < c)
  5951  5604  70 CF             	and	f, 0xCF   ;select user reg space
  5952  5606  62 D0 00          	mov	reg[CUR_PP],0
  5953  5609  51 39             	mov	a,[0+((printf@c)^0x0)]
  5954  560B  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  5955  560D  55 3A  00         	mov	[(??_printf^0x0)+23+0],0
  5956  5610  6A                	rlc	a
  5957  5611  1E 3A  00         	sbb	[(??_printf^0x0)+23+0],0
  5958  5614  36 3A  80         	xor	[(??_printf^0x0)+23+0],80h
  5959  5617  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  5960  5619  31 80             	xor	a,80h
  5961  561B  3A 3A             	cmp	a,[(??_printf^0x0)+23+0]
  5962  561D  B005              	jnz	u1523
  5963  561F  51 30             	mov	a,[1+((printf@prec)^0x0)]
  5964  5621  3A 3B             	cmp	a,[(??_printf^0x0)+23+1]
  5965  5623                    u1523:
  5966  5623  D00F              	jnc	l209
  5967                          	line	1316
  5968                          ;doprnt.c: 1316: prec = c;
  5969  5625  70 CF             	and	f, 0xCF   ;select user reg space
  5970  5627  62 D0 00          	mov	reg[CUR_PP],0
  5971  562A  51 39             	mov	a,[0+((printf@c)^0x0)]
  5972  562C  53 30             	mov	[1+((printf@prec)^0x0)],a
  5973  562E  6A                	rlc	a
  5974  562F  53 2F             	mov	[0+((printf@prec)^0x0)],a
  5975  5631  1C 2F             	sbb	[0+((printf@prec)^0x0)],a
  5976                          ;			
  5977  5633                    l210:	
  5978                          	line	1319
  5979                          ;			
  5980  5633                    l209:	
  5981                          ;doprnt.c: 1319: if(width && flag & 0x03)
  5982  5633  70 CF             	and	f, 0xCF   ;select user reg space
  5983  5635  62 D0 00          	mov	reg[CUR_PP],0
  5984  5638  51 33             	mov	a,[0+((printf@width)^0x0)]
  5985  563A  39 00             	cmp	a,>(0)
  5986  563C  B005              	jnz	u1533
  5987  563E  51 34             	mov	a,[1+((printf@width)^0x0)]
  5988  5640  39 00             	cmp	a,<(0)
  5989  5642                    u1533:
  5990  5642  A02F              	jz	l211
  5991  5644  70 CF             	and	f, 0xCF   ;select user reg space
  5992  5646  62 D0 00          	mov	reg[CUR_PP],0
  5993  5649  51 36             	mov	a,[1+((printf@flag)^0x0)]
  5994  564B  21 03             	and	a,<(03h)
  5995  564D  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  5996  564F  51 35             	mov	a,[0+((printf@flag)^0x0)]
  5997  5651  21 00             	and	a,>(03h)
  5998  5653  53 3A             	mov	[(??_printf^0x0)+23+0],a
  5999  5655  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  6000  5657  39 00             	cmp	a,>(0)
  6001  5659  B005              	jnz	u1543
  6002  565B  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  6003  565D  39 00             	cmp	a,<(0)
  6004  565F                    u1543:
  6005  565F  A012              	jz	l211
  6006                          	line	1320
  6007                          ;doprnt.c: 1320: width--;
  6008  5661  70 CF             	and	f, 0xCF   ;select user reg space
  6009  5663  62 D0 00          	mov	reg[CUR_PP],0
  6010  5666  51 34             	mov	a,[1+((printf@width)^0x0)]
  6011  5668  01 FF             	add	a,<(-1)
  6012  566A  53 34             	mov	[1+((printf@width)^0x0)],a
  6013  566C  51 33             	mov	a,[0+((printf@width)^0x0)]
  6014  566E  09 FF             	adc	a,>(-1)
  6015  5670  53 33             	mov	[0+((printf@width)^0x0)],a
  6016                          ;			
  6017  5672                    l211:	
  6018                          	line	1322
  6019                          ;doprnt.c: 1322: if(width > prec)
  6020  5672  70 CF             	and	f, 0xCF   ;select user reg space
  6021  5674  62 D0 00          	mov	reg[CUR_PP],0
  6022  5677  51 33             	mov	a,[0+((printf@width)^0x0)]
  6023  5679  31 80             	xor	a,80h
  6024  567B  53 3A             	mov	[(??_printf^0x0)+23+0],a
  6025  567D  51 30             	mov	a,[1+((printf@prec)^0x0)]
  6026  567F  3A 34             	cmp	a,[1+((printf@width)^0x0)]
  6027  5681  51 2F             	mov	a,[0+((printf@prec)^0x0)]
  6028  5683  31 80             	xor	a,80h
  6029  5685  1A 3A             	sbb	a,[(??_printf^0x0)+23+0]
  6030  5687  D015              	jnc	l212
  6031                          	line	1323
  6032                          ;doprnt.c: 1323: width -= prec;
  6033  5689  70 CF             	and	f, 0xCF   ;select user reg space
  6034  568B  62 D0 00          	mov	reg[CUR_PP],0
  6035  568E  51 34             	mov	a,[1+((printf@width)^0x0)]
  6036  5690  12 30             	sub	a,[1+((printf@prec)^0x0)]
  6037  5692  53 34             	mov	[1+((printf@width)^0x0)],a
  6038  5694  51 33             	mov	a,[0+((printf@width)^0x0)]
  6039  5696  1A 2F             	sbb	a,[0+((printf@prec)^0x0)]
  6040  5698  53 33             	mov	[0+((printf@width)^0x0)],a
  6041  569A  7D 56AA           	xjmp	l213
  6042                          	line	1324
  6043                          ;			
  6044  569D                    l212:	
  6045                          	line	1325
  6046                          ;doprnt.c: 1324: else
  6047                          ;doprnt.c: 1325: width = 0;
  6048  569D  50 00             	mov	a,<(0)
  6049  569F  70 CF             	and	f, 0xCF   ;select user reg space
  6050  56A1  62 D0 00          	mov	reg[CUR_PP],0
  6051  56A4  53 34             	mov	[1+((printf@width)^0x0)],a
  6052  56A6  50 00             	mov	a,>(0)
  6053  56A8  53 33             	mov	[0+((printf@width)^0x0)],a
  6054                          ;			
  6055  56AA                    l213:	
  6056                          	line	1353
  6057                          ;doprnt.c: 1353: if(width > c)
  6058  56AA  70 CF             	and	f, 0xCF   ;select user reg space
  6059  56AC  62 D0 00          	mov	reg[CUR_PP],0
  6060  56AF  51 39             	mov	a,[0+((printf@c)^0x0)]
  6061  56B1  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  6062  56B3  55 3A  00         	mov	[(??_printf^0x0)+23+0],0
  6063  56B6  6A                	rlc	a
  6064  56B7  1E 3A  00         	sbb	[(??_printf^0x0)+23+0],0
  6065  56BA  51 33             	mov	a,[0+((printf@width)^0x0)]
  6066  56BC  31 80             	xor	a,80h
  6067  56BE  53 3C             	mov	[(??_printf^0x0)+25+0],a
  6068  56C0  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  6069  56C2  3A 34             	cmp	a,[1+((printf@width)^0x0)]
  6070  56C4  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  6071  56C6  31 80             	xor	a,80h
  6072  56C8  1A 3C             	sbb	a,[(??_printf^0x0)+25+0]
  6073  56CA  D020              	jnc	l214
  6074                          	line	1354
  6075                          ;doprnt.c: 1354: width -= c;
  6076  56CC  70 CF             	and	f, 0xCF   ;select user reg space
  6077  56CE  62 D0 00          	mov	reg[CUR_PP],0
  6078  56D1  51 39             	mov	a,[0+((printf@c)^0x0)]
  6079  56D3  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  6080  56D5  55 3A  00         	mov	[(??_printf^0x0)+23+0],0
  6081  56D8  6A                	rlc	a
  6082  56D9  1E 3A  00         	sbb	[(??_printf^0x0)+23+0],0
  6083  56DC  51 34             	mov	a,[1+((printf@width)^0x0)]
  6084  56DE  12 3B             	sub	a,[(??_printf^0x0)+23+1]
  6085  56E0  53 34             	mov	[1+((printf@width)^0x0)],a
  6086  56E2  51 33             	mov	a,[0+((printf@width)^0x0)]
  6087  56E4  1A 3A             	sbb	a,[(??_printf^0x0)+23+0]
  6088  56E6  53 33             	mov	[0+((printf@width)^0x0)],a
  6089  56E8  7D 56F8           	xjmp	l215
  6090                          	line	1355
  6091                          ;			
  6092  56EB                    l214:	
  6093                          	line	1356
  6094                          ;doprnt.c: 1355: else
  6095                          ;doprnt.c: 1356: width = 0;
  6096  56EB  50 00             	mov	a,<(0)
  6097  56ED  70 CF             	and	f, 0xCF   ;select user reg space
  6098  56EF  62 D0 00          	mov	reg[CUR_PP],0
  6099  56F2  53 34             	mov	[1+((printf@width)^0x0)],a
  6100  56F4  50 00             	mov	a,>(0)
  6101  56F6  53 33             	mov	[0+((printf@width)^0x0)],a
  6102                          ;			
  6103  56F8                    l215:	
  6104                          	line	1397
  6105                          ;doprnt.c: 1391: {
  6106                          ;doprnt.c: 1393: if(width
  6107                          ;doprnt.c: 1397: )
  6108  56F8  70 CF             	and	f, 0xCF   ;select user reg space
  6109  56FA  62 D0 00          	mov	reg[CUR_PP],0
  6110  56FD  51 33             	mov	a,[0+((printf@width)^0x0)]
  6111  56FF  39 00             	cmp	a,>(0)
  6112  5701  B005              	jnz	u1553
  6113  5703  51 34             	mov	a,[1+((printf@width)^0x0)]
  6114  5705  39 00             	cmp	a,<(0)
  6115  5707                    u1553:
  6116  5707  A02C              	jz	l216
  6117                          	line	1398
  6118                          ;doprnt.c: 1398: do
  6119                          ;			
  6120  5709                    l219:	
  6121                          	line	1399
  6122                          ;doprnt.c: 1399: (putch(' ') );
  6123  5709  50 20             	mov	a,<((020h))
  6124  570B  70 CF             	and	f, 0xCF   ;select user reg space
  6125  570D  62 D0 00          	mov	reg[CUR_PP],0
  6126  5710  53 41             	mov	[0+((?_putch)^0x0)],a
  6127  5712  71 80             	or	f, 0x80	;select multiple RAM page mode
  6128                          	
  6129  5714  7C 5840           	xcall	_putch
  6130                          	
  6131                          	line	1400
  6132                          ;doprnt.c: 1400: while(--width);
  6133  5717  70 CF             	and	f, 0xCF   ;select user reg space
  6134  5719  62 D0 00          	mov	reg[CUR_PP],0
  6135  571C  51 34             	mov	a,[1+((printf@width)^0x0)]
  6136  571E  01 FF             	add	a,<(-1)
  6137  5720  53 34             	mov	[1+((printf@width)^0x0)],a
  6138  5722  51 33             	mov	a,[0+((printf@width)^0x0)]
  6139  5724  09 FF             	adc	a,>(-1)
  6140  5726  53 33             	mov	[0+((printf@width)^0x0)],a
  6141  5728  51 33             	mov	a,[0+((printf@width)^0x0)]
  6142  572A  39 00             	cmp	a,>(0)
  6143  572C  B005              	jnz	u1563
  6144  572E  51 34             	mov	a,[1+((printf@width)^0x0)]
  6145  5730  39 00             	cmp	a,<(0)
  6146  5732                    u1563:
  6147  5732  BFD6              	jnz	l219
  6148                          ;			
  6149  5734                    l218:	
  6150                          ;			
  6151  5734                    l216:	
  6152                          	line	1407
  6153                          ;doprnt.c: 1407: if(flag & 0x03)
  6154  5734  70 CF             	and	f, 0xCF   ;select user reg space
  6155  5736  62 D0 00          	mov	reg[CUR_PP],0
  6156  5739  51 36             	mov	a,[1+((printf@flag)^0x0)]
  6157  573B  21 03             	and	a,<(03h)
  6158  573D  53 3B             	mov	[(??_printf^0x0)+23+0+1],a
  6159  573F  51 35             	mov	a,[0+((printf@flag)^0x0)]
  6160  5741  21 00             	and	a,>(03h)
  6161  5743  53 3A             	mov	[(??_printf^0x0)+23+0],a
  6162  5745  51 3A             	mov	a,[(??_printf^0x0)+23+0]
  6163  5747  39 00             	cmp	a,>(0)
  6164  5749  B005              	jnz	u1573
  6165  574B  51 3B             	mov	a,[(??_printf^0x0)+23+1]
  6166  574D  39 00             	cmp	a,<(0)
  6167  574F                    u1573:
  6168  574F  A00F              	jz	l150
  6169                          	line	1408
  6170                          ;doprnt.c: 1408: (putch('-') );
  6171  5751  50 2D             	mov	a,<((02Dh))
  6172  5753  70 CF             	and	f, 0xCF   ;select user reg space
  6173  5755  62 D0 00          	mov	reg[CUR_PP],0
  6174  5758  53 41             	mov	[0+((?_putch)^0x0)],a
  6175  575A  71 80             	or	f, 0x80	;select multiple RAM page mode
  6176                          	
  6177  575C  7C 5840           	xcall	_putch
  6178                          	
  6179                          ;			
  6180  575F                    l220:	
  6181                          	line	1499
  6182                          ;			
  6183  575F                    l150:	
  6184                          	line	532
  6185  575F  70 CF             	and	f, 0xCF   ;select user reg space
  6186  5761  62 D0 00          	mov	reg[CUR_PP],0
  6187  5764  51 15             	mov	a,[0+((printf@f)^0x0)]
  6188  5766  58 16             	mov	x,[1+((printf@f)^0x0)]
  6189  5768  06 16  01         	add	[1+((printf@f)^0x0)],<(01h)
  6190  576B  0E 15  00         	adc	[0+((printf@f)^0x0)],>(01h)
  6191  576E  28                	romx
  6192  576F  53 39             	mov	[0+((printf@c)^0x0)],a
  6193  5771  39 00             	cmp	a,(0)
  6194  5773  A004 7D 4B7B      	jnz	l151
  6195                          ;			
  6196  5778                    l152:	
  6197                          	line	1501
  6198                          ;doprnt.c: 1438: }
  6199                          ;doprnt.c: 1499: }
  6200                          ;doprnt.c: 1501: alldone:
  6201                          ;			
  6202  5778                    l166:	
  6203                          	line	1506
  6204                          ;doprnt.c: 1506: return 0;
  6205                          ;	Return value of _printf is never used
  6206  5778  7D 577B           	xjmp	l149
  6207                          	line	1507
  6208                          ;doprnt.c: 1507: }
  6209  577B                    l149:
  6210                          ;			
  6211  577B  70 CF             	and	f, 0xCF   ;select user reg space
  6212                          	
  6213  577D  7F                	ret
  6214                          GLOBAL __end_of_printf
  6215  577E                    	__end_of_printf:
  6216                          	FNSIZE	_printf,30,14
  6217                          ; =============== function _printf ends ============
  6218                          
  6219                          	signat	_printf,602
  6220                          	global	_print_header
  6221                          	global	??_print_header
  6222                          	global	?_print_header
  6223                          	psect	text
  6224                          
  6225                          ; *************** function _print_header *****************
  6226                          ; Defined at:
  6227                          ;		line 36 in file "./main.c"
  6228                          ; Parameters:
  6229                          ;		None
  6230                          ; Auto variables:
  6231                          ;		None
  6232                          ; Return value:
  6233                          ;		type: void 
  6234                          ;		size: 0
  6235                          ; Registers used:
  6236                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  6237                          ; Tracked objects:
  6238                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6239                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6240                          ;		Unchanged: 
  6241                          ; Data sizes:
  6242                          ;		Autos:    0
  6243                          ;		Params:   0
  6244                          ;		Temp:     0
  6245                          ;		Total:    0
  6246                          ; This function calls:
  6247                          ;		_LTRX_PutCRLF
  6248                          ;		_LTRX_CPutString
  6249                          ; This function is called by:
  6250                          ;		_print_help
  6251                          ;		_main
  6252                          ; This function uses a non-reentrant model
  6253                          ; 
  6254                          	file	"./main.c"
  6255                          	line	36
  6256  0051                    	__size_of_print_header	equ	__end_of_print_header-_print_header
  6257                          ;main.c: 36: void print_header(){
  6258                          ;			
  6259  577E                    _print_header:	
  6260                          	opt	disable
  6261                          	line	37
  6262                          ;main.c: 37: LTRX_PutCRLF();
  6263  577E  71 80             	or	f, 0x80	;select multiple RAM page mode
  6264  5780  70 CF             	and	f, 0xCF   ;select user reg space
  6265                          	
  6266  5782  7C 38C4           	xcall	_LTRX_PutCRLF
  6267                          	
  6268  5785  38 00             	add	sp,0
  6269                          	line	38
  6270                          ;main.c: 38: LTRX_CPutString("Sensor gateway v.");
  6271  5787  57 D3             	mov	x,<(STR_1)
  6272  5789  50 7E             	mov	a,>(STR_1)
  6273  578B  71 80             	or	f, 0x80	;select multiple RAM page mode
  6274  578D  70 CF             	and	f, 0xCF   ;select user reg space
  6275                          	
  6276  578F  7C 38B2           	xcall	_LTRX_CPutString
  6277                          	
  6278  5792  38 00             	add	sp,0
  6279                          	line	39
  6280                          ;main.c: 39: LTRX_CPutString("1.0.2");
  6281  5794  57 4B             	mov	x,<(STR_2)
  6282  5796  50 7F             	mov	a,>(STR_2)
  6283  5798  71 80             	or	f, 0x80	;select multiple RAM page mode
  6284  579A  70 CF             	and	f, 0xCF   ;select user reg space
  6285                          	
  6286  579C  7C 38B2           	xcall	_LTRX_CPutString
  6287                          	
  6288  579F  38 00             	add	sp,0
  6289                          	line	40
  6290                          ;main.c: 40: LTRX_PutCRLF();
  6291  57A1  71 80             	or	f, 0x80	;select multiple RAM page mode
  6292  57A3  70 CF             	and	f, 0xCF   ;select user reg space
  6293                          	
  6294  57A5  7C 38C4           	xcall	_LTRX_PutCRLF
  6295                          	
  6296  57A8  38 00             	add	sp,0
  6297                          	line	41
  6298                          ;main.c: 41: LTRX_CPutString("Lieven Hollevoet, 2009");
  6299  57AA  57 94             	mov	x,<(STR_3)
  6300  57AC  50 7E             	mov	a,>(STR_3)
  6301  57AE  71 80             	or	f, 0x80	;select multiple RAM page mode
  6302  57B0  70 CF             	and	f, 0xCF   ;select user reg space
  6303                          	
  6304  57B2  7C 38B2           	xcall	_LTRX_CPutString
  6305                          	
  6306  57B5  38 00             	add	sp,0
  6307                          	line	42
  6308                          ;main.c: 42: LTRX_PutCRLF();
  6309  57B7  71 80             	or	f, 0x80	;select multiple RAM page mode
  6310  57B9  70 CF             	and	f, 0xCF   ;select user reg space
  6311                          	
  6312  57BB  7C 38C4           	xcall	_LTRX_PutCRLF
  6313                          	
  6314  57BE  38 00             	add	sp,0
  6315                          	line	43
  6316                          ;main.c: 43: LTRX_PutCRLF();
  6317  57C0  71 80             	or	f, 0x80	;select multiple RAM page mode
  6318  57C2  70 CF             	and	f, 0xCF   ;select user reg space
  6319                          	
  6320  57C4  7C 38C4           	xcall	_LTRX_PutCRLF
  6321                          	
  6322  57C7  38 00             	add	sp,0
  6323                          	line	44
  6324                          ;main.c: 44: return;
  6325  57C9  7D 57CC           	xjmp	l4
  6326                          	line	45
  6327                          ;main.c: 45: }
  6328  57CC                    l4:
  6329                          ;			
  6330  57CC  70 CF             	and	f, 0xCF   ;select user reg space
  6331                          	
  6332  57CE  7F                	ret
  6333                          GLOBAL __end_of_print_header
  6334  57CF                    	__end_of_print_header:
  6335                          	FNSIZE	_print_header,0,0
  6336                          ; =============== function _print_header ends ============
  6337                          
  6338                          	signat	_print_header,88
  6339                          	global	_Ticker_EnableInt
  6340                          	global	_Ticker_Start
  6341                          	global	_LED1_Start
  6342                          	global	_Counter8_ltrx_Start
  6343                          	global	_OneWire_Start
  6344                          	global	_s_Start
  6345                          	global	??_s_Start
  6346                          	global	?_s_Start
  6347                          	psect	text
  6348                          
  6349                          ; *************** function _s_Start *****************
  6350                          ; Defined at:
  6351                          ;		line 48 in file "./shtxx.c"
  6352                          ; Parameters:
  6353                          ;		None
  6354                          ; Auto variables:
  6355                          ;		None
  6356                          ; Return value:
  6357                          ;		type: void 
  6358                          ;		size: 0
  6359                          ; Registers used:
  6360                          ;		a
  6361                          ; Tracked objects:
  6362                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6363                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6364                          ;		Unchanged: 
  6365                          ; Data sizes:
  6366                          ;		Autos:    0
  6367                          ;		Params:   0
  6368                          ;		Temp:     0
  6369                          ;		Total:    0
  6370                          ; This function calls:
  6371                          ;		Nothing
  6372                          ; This function is called by:
  6373                          ;		_hardware_init
  6374                          ; This function uses a non-reentrant model
  6375                          ; 
  6376                          	file	"./shtxx.c"
  6377                          	line	48
  6378  000B                    	__size_of_s_Start	equ	__end_of_s_Start-_s_Start
  6379                          ;shtxx.c: 17: enum {TEMP,HUMI};
  6380                          ;shtxx.c: 19: typedef union
  6381                          ;shtxx.c: 20: { unsigned int i;
  6382                          ;shtxx.c: 21: float f;
  6383                          ;shtxx.c: 22: } value;
  6384                          ;shtxx.c: 47: void s_Start()
  6385                          ;shtxx.c: 48: {
  6386                          ;			
  6387  57CF                    _s_Start:	
  6388                          	opt	disable
  6389                          	line	50
  6390                          ;shtxx.c: 50: (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  6391  57CF  70 CF             	and	f, 0xCF   ;select user reg space
  6392  57D1  5D 08             	mov	a,reg[(8)]
  6393  57D3  29 02             	or	a,<((02h))
  6394  57D5  60 08             	mov	reg[(8)],a
  6395                          	line	52
  6396                          ;shtxx.c: 52: }
  6397  57D7                    l88:
  6398                          ;			
  6399  57D7  70 CF             	and	f, 0xCF   ;select user reg space
  6400                          	
  6401  57D9  7F                	ret
  6402                          GLOBAL __end_of_s_Start
  6403  57DA                    	__end_of_s_Start:
  6404                          	FNSIZE	_s_Start,0,0
  6405                          ; =============== function _s_Start ends ============
  6406                          
  6407                          	signat	_s_Start,88
  6408                          	global	_OneWire_SetROM
  6409                          	global	_oo_read_scratchpad
  6410                          	global	??_oo_read_scratchpad
  6411                          	global	?_oo_read_scratchpad
  6412                          	psect	text
  6413                          
  6414                          ; *************** function _oo_read_scratchpad *****************
  6415                          ; Defined at:
  6416                          ;		line 90 in file "./oo.c"
  6417                          ; Parameters:
  6418                          ;		None
  6419                          ; Auto variables:
  6420                          ;		counter     	       	type: unsigned char 
  6421                          ; Return value:
  6422                          ;		type: unsigned char 
  6423                          ;		size: 1
  6424                          ; Registers used:
  6425                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  6426                          ; Tracked objects:
  6427                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6428                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6429                          ;		Unchanged: 
  6430                          ; Data sizes:
  6431                          ;		Autos:    1
  6432                          ;		Params:   0
  6433                          ;		Temp:     0
  6434                          ;		Total:    1
  6435                          ; This function calls:
  6436                          ;		_oo_tx_byte
  6437                          ;		_oo_crc_init
  6438                          ;		_oo_rx_byte
  6439                          ; This function is called by:
  6440                          ;		_oo_read_device
  6441                          ; This function uses a non-reentrant model
  6442                          ; 
  6443                          	file	"./oo.c"
  6444                          	line	90
  6445  0057                    	__size_of_oo_read_scratchpad	equ	__end_of_oo_read_scratchpad-_oo_read_scratchpad
  6446                          ;oo.c: 90: char oo_read_scratchpad(){
  6447                          ;			
  6448  57DA                    _oo_read_scratchpad:	
  6449                          	opt	disable
  6450                          	line	93
  6451                          ;oo.c: 93: oo_tx_byte(0xBE);
  6452  57DA  50 BE             	mov	a,<((0BEh))
  6453  57DC  70 CF             	and	f, 0xCF   ;select user reg space
  6454  57DE  62 D0 00          	mov	reg[CUR_PP],0
  6455  57E1  53 34             	mov	[0+((?_oo_tx_byte)^0x0)],a
  6456  57E3  71 80             	or	f, 0x80	;select multiple RAM page mode
  6457                          	
  6458  57E5  7C 69E0           	xcall	_oo_tx_byte
  6459                          	
  6460                          	line	95
  6461                          ;oo.c: 95: char counter = 0;
  6462  57E8  50 00             	mov	a,<((0))
  6463  57EA  70 CF             	and	f, 0xCF   ;select user reg space
  6464  57EC  62 D0 00          	mov	reg[CUR_PP],0
  6465  57EF  53 33             	mov	[0+((oo_read_scratchpad@counter)^0x0)],a
  6466                          	line	99
  6467                          ;oo.c: 99: oo_crc_init();
  6468  57F1  71 80             	or	f, 0x80	;select multiple RAM page mode
  6469                          	
  6470  57F3  7C 6E86           	xcall	_oo_crc_init
  6471                          	
  6472                          	line	101
  6473                          ;oo.c: 101: while (counter < 9){
  6474  57F6  7D 5817           	xjmp	l31
  6475                          ;			
  6476  57F9                    l32:	
  6477                          	line	102
  6478                          ;oo.c: 102: oo_scratchpad[counter] = oo_rx_byte();
  6479  57F9  71 80             	or	f, 0x80	;select multiple RAM page mode
  6480                          	
  6481  57FB  7C 69F4           	xcall	_oo_rx_byte
  6482                          	
  6483  57FE  70 CF             	and	f, 0xCF   ;select user reg space
  6484  5800  62 D0 00          	mov	reg[CUR_PP],0
  6485  5803  58 33             	mov	x,[0+((oo_read_scratchpad@counter)^0x0)]
  6486  5805  71 80             	or	f, 0x80	;select multiple RAM page mode
  6487  5807  62 D3 02          	mov	reg[IDX_PP],2
  6488  580A  54 00             	mov	[0+(_oo_scratchpad^0x200)+x],a
  6489                          	line	103
  6490                          ;oo.c: 103: counter++;
  6491  580C  70 CF             	and	f, 0xCF   ;select user reg space
  6492  580E  62 D0 00          	mov	reg[CUR_PP],0
  6493  5811  51 33             	mov	a,[0+((oo_read_scratchpad@counter)^0x0)]
  6494  5813  01 01             	add	a,<((01h))
  6495  5815  53 33             	mov	[0+((oo_read_scratchpad@counter)^0x0)],a
  6496                          	line	104
  6497                          ;			
  6498  5817                    l31:	
  6499                          	line	101
  6500  5817  70 CF             	and	f, 0xCF   ;select user reg space
  6501  5819  62 D0 00          	mov	reg[CUR_PP],0
  6502  581C  51 33             	mov	a,[0+((oo_read_scratchpad@counter)^0x0)]
  6503  581E  39 09             	cmp	a,<((09h))
  6504  5820  CFD8              	jc	l32
  6505                          ;			
  6506  5822                    l33:	
  6507                          	line	108
  6508                          ;oo.c: 104: }
  6509                          ;oo.c: 108: return crc;
  6510  5822  70 CF             	and	f, 0xCF   ;select user reg space
  6511  5824  71 80             	or	f, 0x80	;select multiple RAM page mode
  6512  5826  62 D0 02          	mov	reg[CUR_PP],2
  6513  5829  51 14             	mov	a,[0+((_crc)^0x200)]
  6514  582B  7D 582E           	xjmp	l30
  6515                          	line	112
  6516                          ;oo.c: 112: }
  6517  582E                    l30:
  6518                          ;			
  6519  582E  70 CF             	and	f, 0xCF   ;select user reg space
  6520                          	
  6521  5830  7F                	ret
  6522                          GLOBAL __end_of_oo_read_scratchpad
  6523  5831                    	__end_of_oo_read_scratchpad:
  6524                          	FNSIZE	_oo_read_scratchpad,1,0
  6525                          ; =============== function _oo_read_scratchpad ends ============
  6526                          
  6527                          	signat	_oo_read_scratchpad,89
  6528                          	global	_OneWire_fVerify
  6529                          	global	_oo_busreset
  6530                          	global	??_oo_busreset
  6531                          	global	?_oo_busreset
  6532                          	psect	text
  6533                          
  6534                          ; *************** function _oo_busreset *****************
  6535                          ; Defined at:
  6536                          ;		line 51 in file "./oo.c"
  6537                          ; Parameters:
  6538                          ;		None
  6539                          ; Auto variables:
  6540                          ;		None
  6541                          ; Return value:
  6542                          ;		type: unsigned char 
  6543                          ;		size: 1
  6544                          ; Registers used:
  6545                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  6546                          ; Tracked objects:
  6547                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6548                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6549                          ;		Unchanged: 
  6550                          ; Data sizes:
  6551                          ;		Autos:    0
  6552                          ;		Params:   0
  6553                          ;		Temp:     0
  6554                          ;		Total:    0
  6555                          ; This function calls:
  6556                          ;		_OneWire_fReset
  6557                          ; This function is called by:
  6558                          ;		_oo_read_device
  6559                          ; This function uses a non-reentrant model
  6560                          ; 
  6561                          	file	"./oo.c"
  6562                          	line	51
  6563  000F                    	__size_of_oo_busreset	equ	__end_of_oo_busreset-_oo_busreset
  6564                          ;oo.c: 11: char oo_scratchpad[9];
  6565                          ;oo.c: 26: char crc = 0;
  6566                          ;oo.c: 29: char crc_rom[256] = {0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 
                                65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220, 35, 125, 159, 193, 66, 2
                                8, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98, 190, 224, 2, 
  6567                          ;oo.c: 32: void oo_crc_init();
  6568                          ;oo.c: 33: void oo_crc_shuffle_byte(char input);
  6569                          ;oo.c: 37: char id[8];
  6570                          ;oo.c: 38: signed char conflict;
  6571                          ;oo.c: 39: bit new_conflict;
  6572                          ;oo.c: 51: char oo_busreset(){
  6573                          ;			
  6574  5831                    _oo_busreset:	
  6575                          	opt	disable
  6576                          	line	53
  6577                          ;oo.c: 53: return OneWire_fReset();
  6578                          ;	Return value of _oo_busreset is never used
  6579  5831  71 80             	or	f, 0x80	;select multiple RAM page mode
  6580  5833  70 CF             	and	f, 0xCF   ;select user reg space
  6581                          	
  6582  5835  7C 39F1           	xcall	_OneWire_fReset
  6583                          	
  6584  5838  38 00             	add	sp,0
  6585  583A  7D 583D           	xjmp	l27
  6586                          	line	55
  6587                          ;oo.c: 55: }
  6588  583D                    l27:
  6589                          ;			
  6590  583D  70 CF             	and	f, 0xCF   ;select user reg space
  6591                          	
  6592  583F  7F                	ret
  6593                          GLOBAL __end_of_oo_busreset
  6594  5840                    	__end_of_oo_busreset:
  6595                          	FNSIZE	_oo_busreset,0,0
  6596                          ; =============== function _oo_busreset ends ============
  6597                          
  6598                          	signat	_oo_busreset,89
  6599                          	global	_putch
  6600                          	global	??_putch
  6601                          	global	?_putch
  6602                          	psect	text
  6603                          
  6604                          ; *************** function _putch *****************
  6605                          ; Defined at:
  6606                          ;		line 129 in file "./main.c"
  6607                          ; Parameters:
  6608                          ;		c           	offs:   0	type: unsigned char 
  6609                          ; Auto variables:
  6610                          ;		None
  6611                          ; Return value:
  6612                          ;		type: void 
  6613                          ;		size: 0
  6614                          ; Registers used:
  6615                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  6616                          ; Tracked objects:
  6617                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6618                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6619                          ;		Unchanged: 
  6620                          ; Data sizes:
  6621                          ;		Autos:    0
  6622                          ;		Params:   1
  6623                          ;		Temp:     0
  6624                          ;		Total:    1
  6625                          ; This function calls:
  6626                          ;		_LTRX_PutChar
  6627                          ; This function is called by:
  6628                          ;		_printf
  6629                          ; This function uses a non-reentrant model
  6630                          ; 
  6631                          	file	"./main.c"
  6632                          	line	129
  6633  0014                    	__size_of_putch	equ	__end_of_putch-_putch
  6634                          ;main.c: 129: void putch(unsigned char c) {
  6635                          ;			
  6636  5840                    _putch:	
  6637                          	opt	disable
  6638                          	line	131
  6639                          ;main.c: 131: LTRX_PutChar(c);
  6640  5840  70 CF             	and	f, 0xCF   ;select user reg space
  6641  5842  62 D0 00          	mov	reg[CUR_PP],0
  6642  5845  51 41             	mov	a,[0+((putch@c)^0x0)]
  6643  5847  71 80             	or	f, 0x80	;select multiple RAM page mode
  6644                          	
  6645  5849  7C 3811           	xcall	_LTRX_PutChar
  6646                          	
  6647  584C  38 00             	add	sp,0
  6648                          	line	132
  6649                          ;main.c: 132: return;
  6650  584E  7D 5851           	xjmp	l25
  6651                          	line	133
  6652                          ;main.c: 133: }
  6653  5851                    l25:
  6654                          ;			
  6655  5851  70 CF             	and	f, 0xCF   ;select user reg space
  6656                          	
  6657  5853  7F                	ret
  6658                          GLOBAL __end_of_putch
  6659  5854                    	__end_of_putch:
  6660                          	FNSIZE	_putch,0,1
  6661                          ; =============== function _putch ends ============
  6662                          
  6663                          	signat	_putch,4216
  6664                          	global	_log10
  6665                          	global	??_log10
  6666                          	global	?_log10
  6667                          	psect	text
  6668                          
  6669                          ; *************** function _log10 *****************
  6670                          ; Defined at:
  6671                          ;		line 40 in file "../common/log.c"
  6672                          ; Parameters:
  6673                          ;		x           	offs:   0	type: void 
  6674                          ; Auto variables:
  6675                          ;		None
  6676                          ; Return value:
  6677                          ;		type: void 
  6678                          ;		size: 4
  6679                          ; Registers used:
  6680                          ;		a, x, CUR_PP, mret
  6681                          ; Tracked objects:
  6682                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6683                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6684                          ;		Unchanged: 
  6685                          ; Data sizes:
  6686                          ;		Autos:    0
  6687                          ;		Params:   4
  6688                          ;		Temp:     0
  6689                          ;		Total:    4
  6690                          ; This function calls:
  6691                          ;		_log
  6692                          ;		___flmul
  6693                          ; This function is called by:
  6694                          ;		_calc_dewpoint
  6695                          ; This function uses a non-reentrant model
  6696                          ; 
  6697                          	file	"../common/log.c"
  6698                          	line	40
  6699  005F                    	__size_of_log10	equ	__end_of_log10-_log10
  6700                          ;log.c: 38: double
  6701                          ;log.c: 39: log10(double x)
  6702                          ;log.c: 40: {
  6703                          ;			
  6704  5854                    _log10:	
  6705                          	opt	disable
  6706                          	line	41
  6707  5854  70 CF             	and	f, 0xCF   ;select user reg space
  6708  5856  62 D0 00          	mov	reg[CUR_PP],0
  6709  5859  51 35             	mov	a,[0+((log10@x)^0x0)]
  6710  585B  53 39             	mov	[0+((?_log)^0x0)],a
  6711  585D  51 36             	mov	a,[1+((log10@x)^0x0)]
  6712  585F  53 3A             	mov	[1+((?_log)^0x0)],a
  6713  5861  51 37             	mov	a,[2+((log10@x)^0x0)]
  6714  5863  53 3B             	mov	[2+((?_log)^0x0)],a
  6715  5865  51 38             	mov	a,[3+((log10@x)^0x0)]
  6716  5867  53 3C             	mov	[3+((?_log)^0x0)],a
  6717  5869  71 80             	or	f, 0x80	;select multiple RAM page mode
  6718                          	
  6719  586B  7C 6B3C           	xcall	_log
  6720                          	
  6721  586E  70 CF             	and	f, 0xCF   ;select user reg space
  6722  5870  62 D0 00          	mov	reg[CUR_PP],0
  6723  5873  51 39             	mov	a,[0+((0+?_log)^0x0)]
  6724  5875  53 5E             	mov	[0+((?___flmul)^0x0)],a
  6725  5877  51 3A             	mov	a,[1+((0+?_log)^0x0)]
  6726  5879  53 5F             	mov	[1+((?___flmul)^0x0)],a
  6727  587B  51 3B             	mov	a,[2+((0+?_log)^0x0)]
  6728  587D  53 60             	mov	[2+((?___flmul)^0x0)],a
  6729  587F  51 3C             	mov	a,[3+((0+?_log)^0x0)]
  6730  5881  53 61             	mov	[3+((?___flmul)^0x0)],a
  6731  5883  50 3E             	mov	a,<(0x3ede5bd9>>24)
  6732  5885  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  6733  5887  50 DE             	mov	a,<(0x3ede5bd9>>16)
  6734  5889  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  6735  588B  50 5B             	mov	a,<(0x3ede5bd9>>8)
  6736  588D  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  6737  588F  50 D9             	mov	a,<(0x3ede5bd9)
  6738  5891  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  6739  5893  71 80             	or	f, 0x80	;select multiple RAM page mode
  6740                          	
  6741  5895  7C 7201           	xcall	___flmul
  6742                          	
  6743  5898  70 CF             	and	f, 0xCF   ;select user reg space
  6744  589A  62 D0 00          	mov	reg[CUR_PP],0
  6745  589D  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  6746  589F  53 35             	mov	[0+((?_log10)^0x0)],a
  6747  58A1  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  6748  58A3  53 36             	mov	[1+((?_log10)^0x0)],a
  6749  58A5  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  6750  58A7  53 37             	mov	[2+((?_log10)^0x0)],a
  6751  58A9  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  6752  58AB  53 38             	mov	[3+((?_log10)^0x0)],a
  6753  58AD  7D 58B0           	xjmp	l225
  6754                          	line	42
  6755                          ;log.c: 42: }
  6756  58B0                    l225:
  6757                          ;			
  6758  58B0  70 CF             	and	f, 0xCF   ;select user reg space
  6759                          	
  6760  58B2  7F                	ret
  6761                          GLOBAL __end_of_log10
  6762  58B3                    	__end_of_log10:
  6763                          	FNSIZE	_log10,0,4
  6764                          ; =============== function _log10 ends ============
  6765                          
  6766                          	signat	_log10,4220
  6767                          	global	_OneWire_GetROM
  6768                          	global	_LTRX_CPutString
  6769                          	global	_s_transstart
  6770                          	global	??_s_transstart
  6771                          	global	?_s_transstart
  6772                          	psect	text
  6773                          
  6774                          ; *************** function _s_transstart *****************
  6775                          ; Defined at:
  6776                          ;		line 110 in file "./shtxx.c"
  6777                          ; Parameters:
  6778                          ;		None
  6779                          ; Auto variables:
  6780                          ;		None
  6781                          ; Return value:
  6782                          ;		type: void 
  6783                          ;		size: 0
  6784                          ; Registers used:
  6785                          ;		a
  6786                          ; Tracked objects:
  6787                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6788                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6789                          ;		Unchanged: 
  6790                          ; Data sizes:
  6791                          ;		Autos:    0
  6792                          ;		Params:   0
  6793                          ;		Temp:     0
  6794                          ;		Total:    0
  6795                          ; This function calls:
  6796                          ;		_delay_5us
  6797                          ; This function is called by:
  6798                          ;		_s_connectionreset
  6799                          ;		_s_measure
  6800                          ; This function uses a non-reentrant model
  6801                          ; 
  6802                          	file	"./shtxx.c"
  6803                          	line	110
  6804  005F                    	__size_of_s_transstart	equ	__end_of_s_transstart-_s_transstart
  6805                          ;shtxx.c: 103: void s_transstart(void)
  6806                          ;shtxx.c: 110: {
  6807                          ;			
  6808  58B3                    _s_transstart:	
  6809                          	opt	disable
  6810                          	line	111
  6811                          ;shtxx.c: 111: (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02)); (PRT4DR = (0==0) ? (PRT4DR&0x7F) :
                                 (PRT4DR|0x80));
  6812  58B3  70 CF             	and	f, 0xCF   ;select user reg space
  6813  58B5  5D 08             	mov	a,reg[(8)]
  6814  58B7  29 02             	or	a,<((02h))
  6815  58B9  60 08             	mov	reg[(8)],a
  6816  58BB  5D 10             	mov	a,reg[(16)]
  6817  58BD  21 7F             	and	a,<((07Fh))
  6818  58BF  60 10             	mov	reg[(16)],a
  6819                          	line	112
  6820                          ;shtxx.c: 112: delay_5us();
  6821  58C1  71 80             	or	f, 0x80	;select multiple RAM page mode
  6822                          	
  6823  58C3  7C 6E6C           	xcall	_delay_5us
  6824                          	
  6825                          	line	113
  6826                          ;shtxx.c: 113: (PRT4DR = (1==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  6827  58C6  70 CF             	and	f, 0xCF   ;select user reg space
  6828  58C8  5D 10             	mov	a,reg[(16)]
  6829  58CA  29 80             	or	a,<((080h))
  6830  58CC  60 10             	mov	reg[(16)],a
  6831                          	line	114
  6832                          ;shtxx.c: 114: delay_5us();
  6833  58CE  71 80             	or	f, 0x80	;select multiple RAM page mode
  6834                          	
  6835  58D0  7C 6E6C           	xcall	_delay_5us
  6836                          	
  6837                          	line	115
  6838                          ;shtxx.c: 115: (PRT2DR = (0==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  6839  58D3  70 CF             	and	f, 0xCF   ;select user reg space
  6840  58D5  5D 08             	mov	a,reg[(8)]
  6841  58D7  21 FD             	and	a,<((0FDh))
  6842  58D9  60 08             	mov	reg[(8)],a
  6843                          	line	116
  6844                          ;shtxx.c: 116: delay_5us();
  6845  58DB  71 80             	or	f, 0x80	;select multiple RAM page mode
  6846                          	
  6847  58DD  7C 6E6C           	xcall	_delay_5us
  6848                          	
  6849                          	line	117
  6850                          ;shtxx.c: 117: (PRT4DR = (0==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  6851  58E0  70 CF             	and	f, 0xCF   ;select user reg space
  6852  58E2  5D 10             	mov	a,reg[(16)]
  6853  58E4  21 7F             	and	a,<((07Fh))
  6854  58E6  60 10             	mov	reg[(16)],a
  6855                          	line	118
  6856                          ;shtxx.c: 118: delay_5us();
  6857  58E8  71 80             	or	f, 0x80	;select multiple RAM page mode
  6858                          	
  6859  58EA  7C 6E6C           	xcall	_delay_5us
  6860                          	
  6861                          	line	119
  6862                          ;shtxx.c: 119: (PRT4DR = (1==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  6863  58ED  70 CF             	and	f, 0xCF   ;select user reg space
  6864  58EF  5D 10             	mov	a,reg[(16)]
  6865  58F1  29 80             	or	a,<((080h))
  6866  58F3  60 10             	mov	reg[(16)],a
  6867                          	line	120
  6868                          ;shtxx.c: 120: delay_5us();
  6869  58F5  71 80             	or	f, 0x80	;select multiple RAM page mode
  6870                          	
  6871  58F7  7C 6E6C           	xcall	_delay_5us
  6872                          	
  6873                          	line	121
  6874                          ;shtxx.c: 121: (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  6875  58FA  70 CF             	and	f, 0xCF   ;select user reg space
  6876  58FC  5D 08             	mov	a,reg[(8)]
  6877  58FE  29 02             	or	a,<((02h))
  6878  5900  60 08             	mov	reg[(8)],a
  6879                          	line	122
  6880                          ;shtxx.c: 122: delay_5us();
  6881  5902  71 80             	or	f, 0x80	;select multiple RAM page mode
  6882                          	
  6883  5904  7C 6E6C           	xcall	_delay_5us
  6884                          	
  6885                          	line	123
  6886                          ;shtxx.c: 123: (PRT4DR = (0==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  6887  5907  70 CF             	and	f, 0xCF   ;select user reg space
  6888  5909  5D 10             	mov	a,reg[(16)]
  6889  590B  21 7F             	and	a,<((07Fh))
  6890  590D  60 10             	mov	reg[(16)],a
  6891                          	line	124
  6892                          ;shtxx.c: 124: }
  6893  590F                    l102:
  6894                          ;			
  6895  590F  70 CF             	and	f, 0xCF   ;select user reg space
  6896                          	
  6897  5911  7F                	ret
  6898                          GLOBAL __end_of_s_transstart
  6899  5912                    	__end_of_s_transstart:
  6900                          	FNSIZE	_s_transstart,0,0
  6901                          ; =============== function _s_transstart ends ============
  6902                          
  6903                          	signat	_s_transstart,88
  6904                          	global	_s_write_byte
  6905                          	global	??_s_write_byte
  6906                          	global	?_s_write_byte
  6907                          	psect	text
  6908                          
  6909                          ; *************** function _s_write_byte *****************
  6910                          ; Defined at:
  6911                          ;		line 58 in file "./shtxx.c"
  6912                          ; Parameters:
  6913                          ;		value       	offs:   0	type: unsigned char 
  6914                          ; Auto variables:
  6915                          ;		i           	       	type: unsigned char 
  6916                          ;		error       	       	type: unsigned char 
  6917                          ; Return value:
  6918                          ;		type: unsigned char 
  6919                          ;		size: 1
  6920                          ; Registers used:
  6921                          ;		a, CUR_PP
  6922                          ; Tracked objects:
  6923                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6924                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6925                          ;		Unchanged: 
  6926                          ; Data sizes:
  6927                          ;		Autos:    2
  6928                          ;		Params:   1
  6929                          ;		Temp:     0
  6930                          ;		Total:    3
  6931                          ; This function calls:
  6932                          ;		_delay_5us
  6933                          ; This function is called by:
  6934                          ;		_s_measure
  6935                          ; This function uses a non-reentrant model
  6936                          ; 
  6937                          	file	"./shtxx.c"
  6938                          	line	58
  6939  009A                    	__size_of_s_write_byte	equ	__end_of_s_write_byte-_s_write_byte
  6940                          ;shtxx.c: 55: char s_write_byte(unsigned char value)
  6941                          ;shtxx.c: 58: {
  6942                          ;			
  6943  5912                    _s_write_byte:	
  6944                          	opt	disable
  6945                          	line	59
  6946                          ;shtxx.c: 59: unsigned char i,error=0;
  6947  5912  50 00             	mov	a,<((0))
  6948  5914  70 CF             	and	f, 0xCF   ;select user reg space
  6949  5916  62 D0 00          	mov	reg[CUR_PP],0
  6950  5919  53 24             	mov	[0+((s_write_byte@error)^0x0)],a
  6951                          	line	60
  6952                          ;shtxx.c: 60: for (i=0x80;i>0;i/=2)
  6953  591B  50 80             	mov	a,<((080h))
  6954  591D  53 23             	mov	[0+((s_write_byte@i)^0x0)],a
  6955  591F  51 23             	mov	a,[0+((s_write_byte@i)^0x0)]
  6956  5921  39 00             	cmp	a,(0)
  6957  5923  B004              	jnz	l90
  6958  5925  7D 5979           	xjmp	l91
  6959                          	line	61
  6960                          ;			
  6961  5928                    l90:	
  6962                          ;shtxx.c: 61: { if (i & value) (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  6963  5928  70 CF             	and	f, 0xCF   ;select user reg space
  6964  592A  62 D0 00          	mov	reg[CUR_PP],0
  6965  592D  51 23             	mov	a,[0+((s_write_byte@i)^0x0)]
  6966  592F  22 22             	and	a,[0+((s_write_byte@value)^0x0)]
  6967  5931  39 00             	cmp	a,(0)
  6968  5933  A00C              	jz	l93
  6969  5935  70 CF             	and	f, 0xCF   ;select user reg space
  6970  5937  5D 08             	mov	a,reg[(8)]
  6971  5939  29 02             	or	a,<((02h))
  6972  593B  60 08             	mov	reg[(8)],a
  6973  593D  7D 5948           	xjmp	l94
  6974                          	line	62
  6975                          ;			
  6976  5940                    l93:	
  6977                          ;shtxx.c: 62: else (PRT2DR = (0==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  6978  5940  70 CF             	and	f, 0xCF   ;select user reg space
  6979  5942  5D 08             	mov	a,reg[(8)]
  6980  5944  21 FD             	and	a,<((0FDh))
  6981  5946  60 08             	mov	reg[(8)],a
  6982                          ;			
  6983  5948                    l94:	
  6984                          	line	63
  6985                          ;shtxx.c: 63: (PRT4DR = (1==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  6986  5948  70 CF             	and	f, 0xCF   ;select user reg space
  6987  594A  5D 10             	mov	a,reg[(16)]
  6988  594C  29 80             	or	a,<((080h))
  6989  594E  60 10             	mov	reg[(16)],a
  6990                          	line	64
  6991                          ;shtxx.c: 64: delay_5us();
  6992  5950  71 80             	or	f, 0x80	;select multiple RAM page mode
  6993                          	
  6994  5952  7C 6E6C           	xcall	_delay_5us
  6995                          	
  6996                          	line	65
  6997                          ;shtxx.c: 65: (PRT4DR = (0==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  6998  5955  70 CF             	and	f, 0xCF   ;select user reg space
  6999  5957  5D 10             	mov	a,reg[(16)]
  7000  5959  21 7F             	and	a,<((07Fh))
  7001  595B  60 10             	mov	reg[(16)],a
  7002                          	line	60
  7003  595D  50 01             	mov	a,<((01h))
  7004  595F  7D 596B           	xjmp	u1333
  7005  5962  70 FB             	clrc
  7006  5964                    u1344:
  7007  5964  70 CF             	and	f, 0xCF   ;select user reg space
  7008  5966  62 D0 00          	mov	reg[CUR_PP],0
  7009  5969  6E 23             	rrc	[0+((s_write_byte@i)^0x0)]
  7010  596B                    u1333:
  7011  596B  78                	dec	a
  7012  596C  DFF7              	jnc	u1344
  7013  596E  70 CF             	and	f, 0xCF   ;select user reg space
  7014  5970  62 D0 00          	mov	reg[CUR_PP],0
  7015  5973  51 23             	mov	a,[0+((s_write_byte@i)^0x0)]
  7016  5975  39 00             	cmp	a,(0)
  7017  5977  BFB0              	jnz	l90
  7018                          ;			
  7019  5979                    l91:	
  7020                          	line	67
  7021                          ;shtxx.c: 66: }
  7022                          ;shtxx.c: 67: (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  7023  5979  70 CF             	and	f, 0xCF   ;select user reg space
  7024  597B  5D 08             	mov	a,reg[(8)]
  7025  597D  29 02             	or	a,<((02h))
  7026  597F  60 08             	mov	reg[(8)],a
  7027                          	line	68
  7028                          ;shtxx.c: 68: (PRT4DR = (1==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  7029  5981  5D 10             	mov	a,reg[(16)]
  7030  5983  29 80             	or	a,<((080h))
  7031  5985  60 10             	mov	reg[(16)],a
  7032                          	line	69
  7033                          ;shtxx.c: 69: delay_5us();
  7034  5987  71 80             	or	f, 0x80	;select multiple RAM page mode
  7035                          	
  7036  5989  7C 6E6C           	xcall	_delay_5us
  7037                          	
  7038                          	line	70
  7039                          ;shtxx.c: 70: error=PRT2DR&0x02;
  7040  598C  70 CF             	and	f, 0xCF   ;select user reg space
  7041  598E  5D 08             	mov	a,reg[(8)]
  7042  5990  21 02             	and	a,<((02h))
  7043  5992  62 D0 00          	mov	reg[CUR_PP],0
  7044  5995  53 24             	mov	[0+((s_write_byte@error)^0x0)],a
  7045                          	line	71
  7046                          ;shtxx.c: 71: (PRT4DR = (0==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  7047  5997  70 CF             	and	f, 0xCF   ;select user reg space
  7048  5999  5D 10             	mov	a,reg[(16)]
  7049  599B  21 7F             	and	a,<((07Fh))
  7050  599D  60 10             	mov	reg[(16)],a
  7051                          	line	72
  7052                          ;shtxx.c: 72: return error;
  7053  599F  70 CF             	and	f, 0xCF   ;select user reg space
  7054  59A1  62 D0 00          	mov	reg[CUR_PP],0
  7055  59A4  51 24             	mov	a,[0+((s_write_byte@error)^0x0)]
  7056  59A6  7D 59A9           	xjmp	l89
  7057                          	line	73
  7058                          ;shtxx.c: 73: }
  7059  59A9                    l89:
  7060                          ;			
  7061  59A9  70 CF             	and	f, 0xCF   ;select user reg space
  7062                          	
  7063  59AB  7F                	ret
  7064                          GLOBAL __end_of_s_write_byte
  7065  59AC                    	__end_of_s_write_byte:
  7066                          	FNSIZE	_s_write_byte,2,1
  7067                          ; =============== function _s_write_byte ends ============
  7068                          
  7069                          	signat	_s_write_byte,4217
  7070                          	global	_s_read_byte
  7071                          	global	??_s_read_byte
  7072                          	global	?_s_read_byte
  7073                          	psect	text
  7074                          
  7075                          ; *************** function _s_read_byte *****************
  7076                          ; Defined at:
  7077                          ;		line 79 in file "./shtxx.c"
  7078                          ; Parameters:
  7079                          ;		ack         	offs:   0	type: unsigned char 
  7080                          ; Auto variables:
  7081                          ;		i           	       	type: unsigned char 
  7082                          ;		val         	       	type: unsigned char 
  7083                          ; Return value:
  7084                          ;		type: unsigned char 
  7085                          ;		size: 1
  7086                          ; Registers used:
  7087                          ;		a, CUR_PP
  7088                          ; Tracked objects:
  7089                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7090                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7091                          ;		Unchanged: 
  7092                          ; Data sizes:
  7093                          ;		Autos:    2
  7094                          ;		Params:   1
  7095                          ;		Temp:     0
  7096                          ;		Total:    3
  7097                          ; This function calls:
  7098                          ;		_delay_5us
  7099                          ; This function is called by:
  7100                          ;		_s_measure
  7101                          ; This function uses a non-reentrant model
  7102                          ; 
  7103                          	file	"./shtxx.c"
  7104                          	line	79
  7105  00A8                    	__size_of_s_read_byte	equ	__end_of_s_read_byte-_s_read_byte
  7106                          ;shtxx.c: 76: char s_read_byte(unsigned char ack)
  7107                          ;shtxx.c: 79: {
  7108                          ;			
  7109  59AC                    _s_read_byte:	
  7110                          	opt	disable
  7111                          	line	80
  7112                          ;shtxx.c: 80: unsigned char i,val=0;
  7113  59AC  50 00             	mov	a,<((0))
  7114  59AE  70 CF             	and	f, 0xCF   ;select user reg space
  7115  59B0  62 D0 00          	mov	reg[CUR_PP],0
  7116  59B3  53 24             	mov	[0+((s_read_byte@val)^0x0)],a
  7117                          	line	81
  7118                          ;shtxx.c: 81: (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  7119  59B5  70 CF             	and	f, 0xCF   ;select user reg space
  7120  59B7  5D 08             	mov	a,reg[(8)]
  7121  59B9  29 02             	or	a,<((02h))
  7122  59BB  60 08             	mov	reg[(8)],a
  7123                          	line	82
  7124                          ;shtxx.c: 82: for (i=0x80;i>0;i/=2)
  7125  59BD  50 80             	mov	a,<((080h))
  7126  59BF  70 CF             	and	f, 0xCF   ;select user reg space
  7127  59C1  62 D0 00          	mov	reg[CUR_PP],0
  7128  59C4  53 23             	mov	[0+((s_read_byte@i)^0x0)],a
  7129  59C6  70 CF             	and	f, 0xCF   ;select user reg space
  7130  59C8  62 D0 00          	mov	reg[CUR_PP],0
  7131  59CB  51 23             	mov	a,[0+((s_read_byte@i)^0x0)]
  7132  59CD  39 00             	cmp	a,(0)
  7133  59CF  B004              	jnz	l96
  7134  59D1  7D 5A0E           	xjmp	l97
  7135                          	line	83
  7136                          ;			
  7137  59D4                    l96:	
  7138                          ;shtxx.c: 83: { (PRT4DR = (1==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  7139  59D4  70 CF             	and	f, 0xCF   ;select user reg space
  7140  59D6  5D 10             	mov	a,reg[(16)]
  7141  59D8  29 80             	or	a,<((080h))
  7142  59DA  60 10             	mov	reg[(16)],a
  7143                          	line	84
  7144                          ;shtxx.c: 84: if (PRT2DR&0x02) val=(val | i);
  7145  59DC  70 CF             	and	f, 0xCF   ;select user reg space
  7146  59DE  49 08 02          	tst	reg[(8)],(02h)
  7147  59E1  A00C              	jz	l99
  7148  59E3  70 CF             	and	f, 0xCF   ;select user reg space
  7149  59E5  62 D0 00          	mov	reg[CUR_PP],0
  7150  59E8  51 24             	mov	a,[0+((s_read_byte@val)^0x0)]
  7151  59EA  2A 23             	or	a,[0+((s_read_byte@i)^0x0)]
  7152  59EC  53 24             	mov	[0+((s_read_byte@val)^0x0)],a
  7153                          ;			
  7154  59EE                    l99:	
  7155                          	line	85
  7156                          ;shtxx.c: 85: (PRT4DR = (0==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  7157  59EE  70 CF             	and	f, 0xCF   ;select user reg space
  7158  59F0  5D 10             	mov	a,reg[(16)]
  7159  59F2  21 7F             	and	a,<((07Fh))
  7160  59F4  60 10             	mov	reg[(16)],a
  7161                          	line	82
  7162  59F6  50 01             	mov	a,<((01h))
  7163  59F8  7D 5A02           	xjmp	u1353
  7164  59FB  70 FB             	clrc
  7165  59FD                    u1364:
  7166  59FD  62 D0 00          	mov	reg[CUR_PP],0
  7167  5A00  6E 23             	rrc	[0+((s_read_byte@i)^0x0)]
  7168  5A02                    u1353:
  7169  5A02  78                	dec	a
  7170  5A03  DFF9              	jnc	u1364
  7171  5A05  62 D0 00          	mov	reg[CUR_PP],0
  7172  5A08  51 23             	mov	a,[0+((s_read_byte@i)^0x0)]
  7173  5A0A  39 00             	cmp	a,(0)
  7174  5A0C  BFC7              	jnz	l96
  7175                          ;			
  7176  5A0E                    l97:	
  7177                          	line	88
  7178                          ;shtxx.c: 86: }
  7179                          ;shtxx.c: 88: if (ack){
  7180  5A0E  70 CF             	and	f, 0xCF   ;select user reg space
  7181  5A10  62 D0 00          	mov	reg[CUR_PP],0
  7182  5A13  51 22             	mov	a,[0+((s_read_byte@ack)^0x0)]
  7183  5A15  39 00             	cmp	a,(0)
  7184  5A17  A00C              	jz	l100
  7185                          	line	89
  7186                          ;shtxx.c: 89: (PRT2DR = (0==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  7187  5A19  70 CF             	and	f, 0xCF   ;select user reg space
  7188  5A1B  5D 08             	mov	a,reg[(8)]
  7189  5A1D  21 FD             	and	a,<((0FDh))
  7190  5A1F  60 08             	mov	reg[(8)],a
  7191                          	line	90
  7192                          ;shtxx.c: 90: } else {
  7193  5A21  7D 5A2C           	xjmp	l101
  7194                          ;			
  7195  5A24                    l100:	
  7196                          	line	91
  7197                          ;shtxx.c: 91: (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  7198  5A24  70 CF             	and	f, 0xCF   ;select user reg space
  7199  5A26  5D 08             	mov	a,reg[(8)]
  7200  5A28  29 02             	or	a,<((02h))
  7201  5A2A  60 08             	mov	reg[(8)],a
  7202                          	line	92
  7203                          ;			
  7204  5A2C                    l101:	
  7205                          	line	94
  7206                          ;shtxx.c: 92: }
  7207                          ;shtxx.c: 94: (PRT4DR = (1==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  7208  5A2C  70 CF             	and	f, 0xCF   ;select user reg space
  7209  5A2E  5D 10             	mov	a,reg[(16)]
  7210  5A30  29 80             	or	a,<((080h))
  7211  5A32  60 10             	mov	reg[(16)],a
  7212                          	line	95
  7213                          ;shtxx.c: 95: delay_5us();
  7214  5A34  71 80             	or	f, 0x80	;select multiple RAM page mode
  7215                          	
  7216  5A36  7C 6E6C           	xcall	_delay_5us
  7217                          	
  7218                          	line	96
  7219                          ;shtxx.c: 96: (PRT4DR = (0==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80));
  7220  5A39  70 CF             	and	f, 0xCF   ;select user reg space
  7221  5A3B  5D 10             	mov	a,reg[(16)]
  7222  5A3D  21 7F             	and	a,<((07Fh))
  7223  5A3F  60 10             	mov	reg[(16)],a
  7224                          	line	97
  7225                          ;shtxx.c: 97: (PRT2DR = (1==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02));
  7226  5A41  5D 08             	mov	a,reg[(8)]
  7227  5A43  29 02             	or	a,<((02h))
  7228  5A45  60 08             	mov	reg[(8)],a
  7229                          	line	99
  7230                          ;shtxx.c: 99: return val;
  7231  5A47  70 CF             	and	f, 0xCF   ;select user reg space
  7232  5A49  62 D0 00          	mov	reg[CUR_PP],0
  7233  5A4C  51 24             	mov	a,[0+((s_read_byte@val)^0x0)]
  7234  5A4E  7D 5A51           	xjmp	l95
  7235                          	line	100
  7236                          ;shtxx.c: 100: }
  7237  5A51                    l95:
  7238                          ;			
  7239  5A51  70 CF             	and	f, 0xCF   ;select user reg space
  7240                          	
  7241  5A53  7F                	ret
  7242                          GLOBAL __end_of_s_read_byte
  7243  5A54                    	__end_of_s_read_byte:
  7244                          	FNSIZE	_s_read_byte,2,1
  7245                          ; =============== function _s_read_byte ends ============
  7246                          
  7247                          	signat	_s_read_byte,4217
  7248                          	global	_orcon_delay_5us
  7249                          	global	??_orcon_delay_5us
  7250                          	global	?_orcon_delay_5us
  7251                          	psect	text
  7252                          
  7253                          ; *************** function _orcon_delay_5us *****************
  7254                          ; Defined at:
  7255                          ;		line 31 in file "./orcon.c"
  7256                          ; Parameters:
  7257                          ;		None
  7258                          ; Auto variables:
  7259                          ;		None
  7260                          ; Return value:
  7261                          ;		type: void 
  7262                          ;		size: 0
  7263                          ; Registers used:
  7264                          ;		None
  7265                          ; Tracked objects:
  7266                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7267                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7268                          ;		Unchanged: 
  7269                          ; Data sizes:
  7270                          ;		Autos:    0
  7271                          ;		Params:   0
  7272                          ;		Temp:     0
  7273                          ;		Total:    0
  7274                          ; This function calls:
  7275                          ;		Nothing
  7276                          ; This function is called by:
  7277                          ;		_orcon_delay
  7278                          ; This function uses a non-reentrant model
  7279                          ; 
  7280                          	file	"./orcon.c"
  7281                          	line	31
  7282  001A                    	__size_of_orcon_delay_5us	equ	__end_of_orcon_delay_5us-_orcon_delay_5us
  7283                          ;orcon.c: 31: void orcon_delay_5us() {
  7284                          ;			
  7285  5A54                    _orcon_delay_5us:	
  7286                          	opt	disable
  7287                          	line	33
  7288                          # 33 "./orcon.c"
  7289  5A54  40                nop ;#
  7290                          # 33 "./orcon.c"
  7291  5A55  40                nop ;#
  7292                          # 33 "./orcon.c"
  7293  5A56  40                nop ;#
  7294                          # 33 "./orcon.c"
  7295  5A57  40                nop ;#
  7296                          # 33 "./orcon.c"
  7297  5A58  40                nop ;#
  7298                          	line	34
  7299                          # 34 "./orcon.c"
  7300  5A59  40                nop ;#
  7301                          # 34 "./orcon.c"
  7302  5A5A  40                nop ;#
  7303                          # 34 "./orcon.c"
  7304  5A5B  40                nop ;#
  7305                          # 34 "./orcon.c"
  7306  5A5C  40                nop ;#
  7307                          # 34 "./orcon.c"
  7308  5A5D  40                nop ;#
  7309                          	line	35
  7310                          # 35 "./orcon.c"
  7311  5A5E  40                nop ;#
  7312                          # 35 "./orcon.c"
  7313  5A5F  40                nop ;#
  7314                          # 35 "./orcon.c"
  7315  5A60  40                nop ;#
  7316                          # 35 "./orcon.c"
  7317  5A61  40                nop ;#
  7318                          # 35 "./orcon.c"
  7319  5A62  40                nop ;#
  7320                          	line	36
  7321                          # 36 "./orcon.c"
  7322  5A63  40                nop ;#
  7323                          # 36 "./orcon.c"
  7324  5A64  40                nop ;#
  7325                          # 36 "./orcon.c"
  7326  5A65  40                nop ;#
  7327                          # 36 "./orcon.c"
  7328  5A66  40                nop ;#
  7329                          # 36 "./orcon.c"
  7330  5A67  40                nop ;#
  7331                          	psect	text
  7332                          	line	38
  7333                          ;orcon.c: 33: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  7334                          ;orcon.c: 34: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  7335                          ;orcon.c: 35: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  7336                          ;orcon.c: 36: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  7337                          ;orcon.c: 38: return;
  7338  5A68  7D 5A6B           	xjmp	l69
  7339                          	line	39
  7340                          ;orcon.c: 39: }
  7341  5A6B                    l69:
  7342                          ;			
  7343  5A6B  70 CF             	and	f, 0xCF   ;select user reg space
  7344                          	
  7345  5A6D  7F                	ret
  7346                          GLOBAL __end_of_orcon_delay_5us
  7347  5A6E                    	__end_of_orcon_delay_5us:
  7348                          	FNSIZE	_orcon_delay_5us,0,0
  7349                          ; =============== function _orcon_delay_5us ends ============
  7350                          
  7351                          	signat	_orcon_delay_5us,88
  7352                          	global	_LTRX_PutSHexByte
  7353                          	global	_LTRX_PutCRLF
  7354                          	global	___fldiv
  7355                          	global	??___fldiv
  7356                          	global	?___fldiv
  7357                          	psect	text
  7358                          
  7359                          ; *************** function ___fldiv *****************
  7360                          ; Defined at:
  7361                          ;		line 19 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fldiv.c"
  7362                          ; Parameters:
  7363                          ;		f1          	offs:   0	type: void 
  7364                          ;		f2          	offs:   4	type: void 
  7365                          ; Auto variables:
  7366                          ;		f3          	       	type: void 
  7367                          ;		exp1        	       	type: unsigned char 
  7368                          ;		sign2       	       	type: unsigned char 
  7369                          ;		exp2        	       	type: unsigned char 
  7370                          ;		sign1       	       	type: unsigned char 
  7371                          ; Return value:
  7372                          ;		type: unsigned char 
  7373                          ;		size: 4
  7374                          ; Registers used:
  7375                          ;		a, x, CUR_PP
  7376                          ; Tracked objects:
  7377                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7378                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7379                          ;		Unchanged: 
  7380                          ; Data sizes:
  7381                          ;		Autos:    8
  7382                          ;		Params:   8
  7383                          ;		Temp:     1
  7384                          ;		Total:   17
  7385                          ; This function calls:
  7386                          ;		___flunpack
  7387                          ;		___flpack
  7388                          ; This function is called by:
  7389                          ;		_calc_dewpoint
  7390                          ; This function uses a non-reentrant model
  7391                          ; 
  7392                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fldiv.c"
  7393                          	line	19
  7394  0180                    	__size_of___fldiv	equ	__end_of___fldiv-___fldiv
  7395                          ;fldiv.c: 17: double
  7396                          ;fldiv.c: 18: __fldiv(double f1, double f2)
  7397                          ;fldiv.c: 19: {
  7398                          ;			
  7399  5A6E                    ___fldiv:	
  7400                          	opt	disable
  7401                          	line	23
  7402                          ;fldiv.c: 20: unsigned char exp1, exp2, sign1, sign2;
  7403                          ;fldiv.c: 21: double f3;
  7404                          ;fldiv.c: 23: (*(unsigned long *)&f3) = 0;
  7405  5A6E  50 00             	mov	a,<(0>>24)
  7406  5A70  70 CF             	and	f, 0xCF   ;select user reg space
  7407  5A72  62 D0 00          	mov	reg[CUR_PP],0
  7408  5A75  53 3D             	mov	[0+((___fldiv@f3)^0x0)],a
  7409  5A77  50 00             	mov	a,<(0>>16)
  7410  5A79  53 3E             	mov	[1+((___fldiv@f3)^0x0)],a
  7411  5A7B  50 00             	mov	a,<(0>>8)
  7412  5A7D  53 3F             	mov	[2+((___fldiv@f3)^0x0)],a
  7413  5A7F  50 00             	mov	a,<(0)
  7414  5A81  53 40             	mov	[3+((___fldiv@f3)^0x0)],a
  7415                          	line	24
  7416                          ;fldiv.c: 24: sign1 = __flunpack(&(*(unsigned long *)&f1), &exp1);
  7417  5A83  50 35             	mov	a,<((___fldiv@f1|8000h))
  7418  5A85  70 CF             	and	f, 0xCF   ;select user reg space
  7419  5A87  62 D0 00          	mov	reg[CUR_PP],0
  7420  5A8A  53 72             	mov	[1+((?___flunpack)^0x0)],a
  7421  5A8C  50 80             	mov	a,>((___fldiv@f1|8000h))
  7422  5A8E  53 71             	mov	[0+((?___flunpack)^0x0)],a
  7423  5A90  50 42             	mov	a,<((___fldiv@exp1|8000h))
  7424  5A92  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  7425  5A94  50 80             	mov	a,>((___fldiv@exp1|8000h))
  7426  5A96  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  7427  5A98  71 80             	or	f, 0x80	;select multiple RAM page mode
  7428                          	
  7429  5A9A  7C 7714           	xcall	___flunpack
  7430                          	
  7431  5A9D  70 CF             	and	f, 0xCF   ;select user reg space
  7432  5A9F  62 D0 00          	mov	reg[CUR_PP],0
  7433  5AA2  53 43             	mov	[0+((___fldiv@sign1)^0x0)],a
  7434                          	line	25
  7435                          ;fldiv.c: 25: if(exp1 == 0)
  7436  5AA4  70 CF             	and	f, 0xCF   ;select user reg space
  7437  5AA6  62 D0 00          	mov	reg[CUR_PP],0
  7438  5AA9  51 42             	mov	a,[0+((___fldiv@exp1)^0x0)]
  7439  5AAB  39 00             	cmp	a,(0)
  7440  5AAD  B019              	jnz	l395
  7441                          	line	26
  7442  5AAF  70 CF             	and	f, 0xCF   ;select user reg space
  7443  5AB1  62 D0 00          	mov	reg[CUR_PP],0
  7444  5AB4  51 3D             	mov	a,[0+((___fldiv@f3)^0x0)]
  7445  5AB6  53 35             	mov	[0+((?___fldiv)^0x0)],a
  7446  5AB8  51 3E             	mov	a,[1+((___fldiv@f3)^0x0)]
  7447  5ABA  53 36             	mov	[1+((?___fldiv)^0x0)],a
  7448  5ABC  51 3F             	mov	a,[2+((___fldiv@f3)^0x0)]
  7449  5ABE  53 37             	mov	[2+((?___fldiv)^0x0)],a
  7450  5AC0  51 40             	mov	a,[3+((___fldiv@f3)^0x0)]
  7451  5AC2  53 38             	mov	[3+((?___fldiv)^0x0)],a
  7452  5AC4  7D 5BEB           	xjmp	l394
  7453                          ;			
  7454  5AC7                    l395:	
  7455                          	line	27
  7456                          ;fldiv.c: 27: sign2 = __flunpack(&(*(unsigned long *)&f2), &exp2);
  7457  5AC7  50 39             	mov	a,<((___fldiv@f2|8000h))
  7458  5AC9  70 CF             	and	f, 0xCF   ;select user reg space
  7459  5ACB  62 D0 00          	mov	reg[CUR_PP],0
  7460  5ACE  53 72             	mov	[1+((?___flunpack)^0x0)],a
  7461  5AD0  50 80             	mov	a,>((___fldiv@f2|8000h))
  7462  5AD2  53 71             	mov	[0+((?___flunpack)^0x0)],a
  7463  5AD4  50 44             	mov	a,<((___fldiv@exp2|8000h))
  7464  5AD6  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  7465  5AD8  50 80             	mov	a,>((___fldiv@exp2|8000h))
  7466  5ADA  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  7467  5ADC  71 80             	or	f, 0x80	;select multiple RAM page mode
  7468                          	
  7469  5ADE  7C 7714           	xcall	___flunpack
  7470                          	
  7471  5AE1  70 CF             	and	f, 0xCF   ;select user reg space
  7472  5AE3  62 D0 00          	mov	reg[CUR_PP],0
  7473  5AE6  53 41             	mov	[0+((___fldiv@sign2)^0x0)],a
  7474                          	line	28
  7475                          ;fldiv.c: 28: if(exp2 == 0)
  7476  5AE8  70 CF             	and	f, 0xCF   ;select user reg space
  7477  5AEA  62 D0 00          	mov	reg[CUR_PP],0
  7478  5AED  51 44             	mov	a,[0+((___fldiv@exp2)^0x0)]
  7479  5AEF  39 00             	cmp	a,(0)
  7480  5AF1  B019              	jnz	l396
  7481                          	line	29
  7482  5AF3  70 CF             	and	f, 0xCF   ;select user reg space
  7483  5AF5  62 D0 00          	mov	reg[CUR_PP],0
  7484  5AF8  51 3D             	mov	a,[0+((___fldiv@f3)^0x0)]
  7485  5AFA  53 35             	mov	[0+((?___fldiv)^0x0)],a
  7486  5AFC  51 3E             	mov	a,[1+((___fldiv@f3)^0x0)]
  7487  5AFE  53 36             	mov	[1+((?___fldiv)^0x0)],a
  7488  5B00  51 3F             	mov	a,[2+((___fldiv@f3)^0x0)]
  7489  5B02  53 37             	mov	[2+((?___fldiv)^0x0)],a
  7490  5B04  51 40             	mov	a,[3+((___fldiv@f3)^0x0)]
  7491  5B06  53 38             	mov	[3+((?___fldiv)^0x0)],a
  7492  5B08  7D 5BEB           	xjmp	l394
  7493                          ;			
  7494  5B0B                    l396:	
  7495                          	line	30
  7496                          ;fldiv.c: 30: exp1 -= exp2-127+8;
  7497  5B0B  50 89             	mov	a,<((089h))
  7498  5B0D  70 CF             	and	f, 0xCF   ;select user reg space
  7499  5B0F  62 D0 00          	mov	reg[CUR_PP],0
  7500  5B12  02 44             	add	a,[0+((___fldiv@exp2)^0x0)]
  7501  5B14  53 45             	mov	[(??___fldiv^0x0)+8+0],a
  7502  5B16  51 42             	mov	a,[0+((___fldiv@exp1)^0x0)]
  7503  5B18  12 45             	sub	a,[(??___fldiv^0x0)+8+0]
  7504  5B1A  53 42             	mov	[0+((___fldiv@exp1)^0x0)],a
  7505                          	line	31
  7506                          ;fldiv.c: 31: sign1 ^= sign2;
  7507  5B1C  51 43             	mov	a,[0+((___fldiv@sign1)^0x0)]
  7508  5B1E  32 41             	xor	a,[0+((___fldiv@sign2)^0x0)]
  7509  5B20  53 43             	mov	[0+((___fldiv@sign1)^0x0)],a
  7510                          	line	32
  7511                          ;fldiv.c: 32: sign2 = 24+8;
  7512  5B22  50 20             	mov	a,<((020h))
  7513  5B24  53 41             	mov	[0+((___fldiv@sign2)^0x0)],a
  7514                          	line	33
  7515                          ;fldiv.c: 33: do {
  7516                          ;			
  7517  5B26                    l399:	
  7518                          	line	34
  7519                          ;fldiv.c: 34: (*(unsigned long *)&f3) <<= 1;
  7520  5B26  50 01             	mov	a,<((01h))
  7521  5B28  7D 5B38           	xjmp	u1903
  7522  5B2B                    u1914:
  7523  5B2B  70 CF             	and	f, 0xCF   ;select user reg space
  7524  5B2D  62 D0 00          	mov	reg[CUR_PP],0
  7525  5B30  65 40             	asl	[3+((___fldiv@f3)^0x0)]
  7526  5B32  6B 3F             	rlc	[2+((___fldiv@f3)^0x0)]
  7527  5B34  6B 3E             	rlc	[1+((___fldiv@f3)^0x0)]
  7528  5B36  6B 3D             	rlc	[0+((___fldiv@f3)^0x0)]
  7529  5B38                    u1903:
  7530  5B38  78                	dec	a
  7531  5B39  DFF1              	jnc	u1914
  7532                          	line	35
  7533                          ;fldiv.c: 35: if((*(unsigned long *)&f1) >= (*(unsigned long *)&f2)) {
  7534  5B3B  70 CF             	and	f, 0xCF   ;select user reg space
  7535  5B3D  62 D0 00          	mov	reg[CUR_PP],0
  7536  5B40  51 38             	mov	a,[3+((___fldiv@f1)^0x0)]
  7537  5B42  3A 3C             	cmp	a,[3+((___fldiv@f2)^0x0)]
  7538  5B44  51 37             	mov	a,[2+((___fldiv@f1)^0x0)]
  7539  5B46  1A 3B             	sbb	a,[2+((___fldiv@f2)^0x0)]
  7540  5B48  51 36             	mov	a,[1+((___fldiv@f1)^0x0)]
  7541  5B4A  1A 3A             	sbb	a,[1+((___fldiv@f2)^0x0)]
  7542  5B4C  51 35             	mov	a,[0+((___fldiv@f1)^0x0)]
  7543  5B4E  1A 39             	sbb	a,[0+((___fldiv@f2)^0x0)]
  7544  5B50  C026              	jc	l400
  7545                          	line	36
  7546                          ;fldiv.c: 36: (*(unsigned long *)&f1) -= (*(unsigned long *)&f2);
  7547  5B52  70 CF             	and	f, 0xCF   ;select user reg space
  7548  5B54  62 D0 00          	mov	reg[CUR_PP],0
  7549  5B57  51 3C             	mov	a,[3+((___fldiv@f2)^0x0)]
  7550  5B59  14 38             	sub	[3+((___fldiv@f1)^0x0)],a
  7551  5B5B  51 3B             	mov	a,[2+((___fldiv@f2)^0x0)]
  7552  5B5D  1C 37             	sbb	[2+((___fldiv@f1)^0x0)],a
  7553  5B5F  51 3A             	mov	a,[1+((___fldiv@f2)^0x0)]
  7554  5B61  1C 36             	sbb	[1+((___fldiv@f1)^0x0)],a
  7555  5B63  51 39             	mov	a,[0+((___fldiv@f2)^0x0)]
  7556  5B65  1C 35             	sbb	[0+((___fldiv@f1)^0x0)],a
  7557                          	line	37
  7558                          ;fldiv.c: 37: (*(unsigned long *)&f3) |= 1;
  7559  5B67  50 01             	mov	a,<(01h)
  7560  5B69  2C 40             	or	[3+((___fldiv@f3)^0x0)],a
  7561  5B6B  50 00             	mov	a,<(01h>>8)
  7562  5B6D  2C 3F             	or	[2+((___fldiv@f3)^0x0)],a
  7563  5B6F  50 00             	mov	a,<(01h>>16)
  7564  5B71  2C 3E             	or	[1+((___fldiv@f3)^0x0)],a
  7565  5B73  50 00             	mov	a,<(01h>>24)
  7566  5B75  2C 3D             	or	[0+((___fldiv@f3)^0x0)],a
  7567                          	line	38
  7568                          ;			
  7569  5B77                    l400:	
  7570                          	line	39
  7571                          ;fldiv.c: 38: }
  7572                          ;fldiv.c: 39: (*(unsigned long *)&f1) <<= 1;
  7573  5B77  50 01             	mov	a,<((01h))
  7574  5B79  7D 5B89           	xjmp	u1923
  7575  5B7C                    u1934:
  7576  5B7C  70 CF             	and	f, 0xCF   ;select user reg space
  7577  5B7E  62 D0 00          	mov	reg[CUR_PP],0
  7578  5B81  65 38             	asl	[3+((___fldiv@f1)^0x0)]
  7579  5B83  6B 37             	rlc	[2+((___fldiv@f1)^0x0)]
  7580  5B85  6B 36             	rlc	[1+((___fldiv@f1)^0x0)]
  7581  5B87  6B 35             	rlc	[0+((___fldiv@f1)^0x0)]
  7582  5B89                    u1923:
  7583  5B89  78                	dec	a
  7584  5B8A  DFF1              	jnc	u1934
  7585                          	line	40
  7586                          ;fldiv.c: 40: } while(--sign2 != 0);
  7587  5B8C  70 CF             	and	f, 0xCF   ;select user reg space
  7588  5B8E  62 D0 00          	mov	reg[CUR_PP],0
  7589  5B91  51 41             	mov	a,[0+((___fldiv@sign2)^0x0)]
  7590  5B93  11 01             	sub	a,<((01h))
  7591  5B95  53 41             	mov	[0+((___fldiv@sign2)^0x0)],a
  7592  5B97  51 41             	mov	a,[0+((___fldiv@sign2)^0x0)]
  7593  5B99  39 00             	cmp	a,(0)
  7594  5B9B  BF8A              	jnz	l399
  7595                          ;			
  7596  5B9D                    l398:	
  7597                          	line	41
  7598                          ;fldiv.c: 41: __flpack(&(*(unsigned long *)&f3), exp1);
  7599  5B9D  50 3D             	mov	a,<((___fldiv@f3|8000h))
  7600  5B9F  70 CF             	and	f, 0xCF   ;select user reg space
  7601  5BA1  62 D0 00          	mov	reg[CUR_PP],0
  7602  5BA4  53 72             	mov	[1+((?___flpack)^0x0)],a
  7603  5BA6  50 80             	mov	a,>((___fldiv@f3|8000h))
  7604  5BA8  53 71             	mov	[0+((?___flpack)^0x0)],a
  7605  5BAA  51 42             	mov	a,[0+((___fldiv@exp1)^0x0)]
  7606  5BAC  53 73             	mov	[0+((0+?___flpack+02h)^0x0)],a
  7607  5BAE  71 80             	or	f, 0x80	;select multiple RAM page mode
  7608                          	
  7609  5BB0  7C 77F8           	xcall	___flpack
  7610                          	
  7611                          	line	42
  7612                          ;fldiv.c: 42: if(sign1)
  7613  5BB3  70 CF             	and	f, 0xCF   ;select user reg space
  7614  5BB5  62 D0 00          	mov	reg[CUR_PP],0
  7615  5BB8  51 43             	mov	a,[0+((___fldiv@sign1)^0x0)]
  7616  5BBA  39 00             	cmp	a,(0)
  7617  5BBC  A016              	jz	l401
  7618                          	line	43
  7619                          ;fldiv.c: 43: (*(unsigned long *)&f3) |= 0x80000000;
  7620  5BBE  50 00             	mov	a,<(-2147483648)
  7621  5BC0  70 CF             	and	f, 0xCF   ;select user reg space
  7622  5BC2  62 D0 00          	mov	reg[CUR_PP],0
  7623  5BC5  2C 40             	or	[3+((___fldiv@f3)^0x0)],a
  7624  5BC7  50 00             	mov	a,<(-2147483648>>8)
  7625  5BC9  2C 3F             	or	[2+((___fldiv@f3)^0x0)],a
  7626  5BCB  50 00             	mov	a,<(-2147483648>>16)
  7627  5BCD  2C 3E             	or	[1+((___fldiv@f3)^0x0)],a
  7628  5BCF  50 80             	mov	a,<(-2147483648>>24)
  7629  5BD1  2C 3D             	or	[0+((___fldiv@f3)^0x0)],a
  7630                          ;			
  7631  5BD3                    l401:	
  7632                          	line	44
  7633  5BD3  70 CF             	and	f, 0xCF   ;select user reg space
  7634  5BD5  62 D0 00          	mov	reg[CUR_PP],0
  7635  5BD8  51 3D             	mov	a,[0+((___fldiv@f3)^0x0)]
  7636  5BDA  53 35             	mov	[0+((?___fldiv)^0x0)],a
  7637  5BDC  51 3E             	mov	a,[1+((___fldiv@f3)^0x0)]
  7638  5BDE  53 36             	mov	[1+((?___fldiv)^0x0)],a
  7639  5BE0  51 3F             	mov	a,[2+((___fldiv@f3)^0x0)]
  7640  5BE2  53 37             	mov	[2+((?___fldiv)^0x0)],a
  7641  5BE4  51 40             	mov	a,[3+((___fldiv@f3)^0x0)]
  7642  5BE6  53 38             	mov	[3+((?___fldiv)^0x0)],a
  7643  5BE8  7D 5BEB           	xjmp	l394
  7644                          	line	45
  7645                          ;fldiv.c: 45: }
  7646  5BEB                    l394:
  7647                          ;			
  7648  5BEB  70 CF             	and	f, 0xCF   ;select user reg space
  7649                          	
  7650  5BED  7F                	ret
  7651                          GLOBAL __end_of___fldiv
  7652  5BEE                    	__end_of___fldiv:
  7653                          	FNSIZE	___fldiv,9,8
  7654                          ; =============== function ___fldiv ends ============
  7655                          
  7656                          	signat	___fldiv,8316
  7657                          	global	___lldiv
  7658                          	global	??___lldiv
  7659                          	global	?___lldiv
  7660                          	psect	text
  7661                          
  7662                          ; *************** function ___lldiv *****************
  7663                          ; Defined at:
  7664                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lldiv.c"
  7665                          ; Parameters:
  7666                          ;		dividend    	offs:   0	type: unsigned long 
  7667                          ;		divisor     	offs:   4	type: unsigned long 
  7668                          ; Auto variables:
  7669                          ;		quotient    	       	type: unsigned long 
  7670                          ;		counter     	       	type: unsigned char 
  7671                          ; Return value:
  7672                          ;		type: unsigned long 
  7673                          ;		size: 4
  7674                          ; Registers used:
  7675                          ;		a, CUR_PP
  7676                          ; Tracked objects:
  7677                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7678                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7679                          ;		Unchanged: 
  7680                          ; Data sizes:
  7681                          ;		Autos:    5
  7682                          ;		Params:   8
  7683                          ;		Temp:     4
  7684                          ;		Total:   17
  7685                          ; This function calls:
  7686                          ;		Nothing
  7687                          ; This function is called by:
  7688                          ;		_printf
  7689                          ; This function uses a non-reentrant model
  7690                          ; 
  7691                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lldiv.c"
  7692                          	line	5
  7693  012A                    	__size_of___lldiv	equ	__end_of___lldiv-___lldiv
  7694                          ;lldiv.c: 3: unsigned long int
  7695                          ;lldiv.c: 4: __lldiv(unsigned long int dividend, unsigned long int divisor)
  7696                          ;lldiv.c: 5: {
  7697                          ;			
  7698  5BEE                    ___lldiv:	
  7699                          	opt	disable
  7700                          	line	9
  7701                          ;lldiv.c: 6: unsigned long int quotient;
  7702                          ;lldiv.c: 7: unsigned char counter;
  7703                          ;lldiv.c: 9: quotient = 0;
  7704  5BEE  50 00             	mov	a,<(0>>24)
  7705  5BF0  70 CF             	and	f, 0xCF   ;select user reg space
  7706  5BF2  62 D0 00          	mov	reg[CUR_PP],0
  7707  5BF5  53 49             	mov	[0+((___lldiv@quotient)^0x0)],a
  7708  5BF7  50 00             	mov	a,<(0>>16)
  7709  5BF9  53 4A             	mov	[1+((___lldiv@quotient)^0x0)],a
  7710  5BFB  50 00             	mov	a,<(0>>8)
  7711  5BFD  53 4B             	mov	[2+((___lldiv@quotient)^0x0)],a
  7712  5BFF  50 00             	mov	a,<(0)
  7713  5C01  53 4C             	mov	[3+((___lldiv@quotient)^0x0)],a
  7714                          	line	10
  7715                          ;lldiv.c: 10: if(divisor != 0) {
  7716  5C03  51 45             	mov	a,[0+((___lldiv@divisor)^0x0)]
  7717  5C05  39 00             	cmp	a,<(0>>24)
  7718  5C07  B011              	jnz	u2273
  7719  5C09  51 46             	mov	a,[1+((___lldiv@divisor)^0x0)]
  7720  5C0B  39 00             	cmp	a,<(0>>16)
  7721  5C0D  B00B              	jnz	u2273
  7722  5C0F  51 47             	mov	a,[2+((___lldiv@divisor)^0x0)]
  7723  5C11  39 00             	cmp	a,<(0>>8)
  7724  5C13  B005              	jnz	u2273
  7725  5C15  51 48             	mov	a,[3+((___lldiv@divisor)^0x0)]
  7726  5C17  39 00             	cmp	a,<(0)
  7727  5C19                    u2273:
  7728  5C19  A0E3              	jz	l490
  7729                          	line	11
  7730                          ;lldiv.c: 11: counter = 1;
  7731  5C1B  50 01             	mov	a,<((01h))
  7732  5C1D  70 CF             	and	f, 0xCF   ;select user reg space
  7733  5C1F  62 D0 00          	mov	reg[CUR_PP],0
  7734  5C22  53 4D             	mov	[0+((___lldiv@counter)^0x0)],a
  7735                          	line	12
  7736                          ;lldiv.c: 12: while((divisor & 0x80000000UL) == 0) {
  7737  5C24  7D 5C47           	xjmp	l491
  7738                          ;			
  7739  5C27                    l492:	
  7740                          	line	13
  7741                          ;lldiv.c: 13: divisor <<= 1;
  7742  5C27  50 01             	mov	a,<((01h))
  7743  5C29  7D 5C39           	xjmp	u2283
  7744  5C2C                    u2294:
  7745  5C2C  70 CF             	and	f, 0xCF   ;select user reg space
  7746  5C2E  62 D0 00          	mov	reg[CUR_PP],0
  7747  5C31  65 48             	asl	[3+((___lldiv@divisor)^0x0)]
  7748  5C33  6B 47             	rlc	[2+((___lldiv@divisor)^0x0)]
  7749  5C35  6B 46             	rlc	[1+((___lldiv@divisor)^0x0)]
  7750  5C37  6B 45             	rlc	[0+((___lldiv@divisor)^0x0)]
  7751  5C39                    u2283:
  7752  5C39  78                	dec	a
  7753  5C3A  DFF1              	jnc	u2294
  7754                          	line	14
  7755                          ;lldiv.c: 14: counter++;
  7756  5C3C  70 CF             	and	f, 0xCF   ;select user reg space
  7757  5C3E  62 D0 00          	mov	reg[CUR_PP],0
  7758  5C41  51 4D             	mov	a,[0+((___lldiv@counter)^0x0)]
  7759  5C43  01 01             	add	a,<((01h))
  7760  5C45  53 4D             	mov	[0+((___lldiv@counter)^0x0)],a
  7761                          	line	15
  7762                          ;			
  7763  5C47                    l491:	
  7764                          	line	12
  7765  5C47  70 CF             	and	f, 0xCF   ;select user reg space
  7766  5C49  62 D0 00          	mov	reg[CUR_PP],0
  7767  5C4C  51 45             	mov	a,[0+((___lldiv@divisor)^0x0)]
  7768  5C4E  53 4E             	mov	[(??___lldiv^0x0)+5+0],a
  7769  5C50  51 46             	mov	a,[1+((___lldiv@divisor)^0x0)]
  7770  5C52  53 4F             	mov	[(??___lldiv^0x0)+5+0+1],a
  7771  5C54  51 47             	mov	a,[2+((___lldiv@divisor)^0x0)]
  7772  5C56  53 50             	mov	[(??___lldiv^0x0)+5+0+2],a
  7773  5C58  51 48             	mov	a,[3+((___lldiv@divisor)^0x0)]
  7774  5C5A  53 51             	mov	[(??___lldiv^0x0)+5+0+3],a
  7775  5C5C  50 00             	mov	a,<(-2147483648)
  7776  5C5E  24 51             	and	[(??___lldiv^0x0)+5+3],a
  7777  5C60  50 00             	mov	a,<(-2147483648>>8)
  7778  5C62  24 50             	and	[(??___lldiv^0x0)+5+2],a
  7779  5C64  50 00             	mov	a,<(-2147483648>>16)
  7780  5C66  24 4F             	and	[(??___lldiv^0x0)+5+1],a
  7781  5C68  50 80             	mov	a,<(-2147483648>>24)
  7782  5C6A  24 4E             	and	[(??___lldiv^0x0)+5+0],a
  7783  5C6C  51 4E             	mov	a,[(??___lldiv^0x0)+5+0]
  7784  5C6E  39 00             	cmp	a,<(0>>24)
  7785  5C70  B011              	jnz	u2303
  7786  5C72  51 4F             	mov	a,[(??___lldiv^0x0)+5+1]
  7787  5C74  39 00             	cmp	a,<(0>>16)
  7788  5C76  B00B              	jnz	u2303
  7789  5C78  51 50             	mov	a,[(??___lldiv^0x0)+5+2]
  7790  5C7A  39 00             	cmp	a,<(0>>8)
  7791  5C7C  B005              	jnz	u2303
  7792  5C7E  51 51             	mov	a,[(??___lldiv^0x0)+5+3]
  7793  5C80  39 00             	cmp	a,<(0)
  7794  5C82                    u2303:
  7795  5C82  AFA4              	jz	l492
  7796                          ;			
  7797  5C84                    l493:	
  7798                          	line	16
  7799                          ;lldiv.c: 15: }
  7800                          ;lldiv.c: 16: do {
  7801                          ;			
  7802  5C84                    l496:	
  7803                          	line	17
  7804                          ;lldiv.c: 17: quotient <<= 1;
  7805  5C84  50 01             	mov	a,<((01h))
  7806  5C86  7D 5C96           	xjmp	u2313
  7807  5C89                    u2324:
  7808  5C89  70 CF             	and	f, 0xCF   ;select user reg space
  7809  5C8B  62 D0 00          	mov	reg[CUR_PP],0
  7810  5C8E  65 4C             	asl	[3+((___lldiv@quotient)^0x0)]
  7811  5C90  6B 4B             	rlc	[2+((___lldiv@quotient)^0x0)]
  7812  5C92  6B 4A             	rlc	[1+((___lldiv@quotient)^0x0)]
  7813  5C94  6B 49             	rlc	[0+((___lldiv@quotient)^0x0)]
  7814  5C96                    u2313:
  7815  5C96  78                	dec	a
  7816  5C97  DFF1              	jnc	u2324
  7817                          	line	18
  7818                          ;lldiv.c: 18: if(divisor <= dividend) {
  7819  5C99  70 CF             	and	f, 0xCF   ;select user reg space
  7820  5C9B  62 D0 00          	mov	reg[CUR_PP],0
  7821  5C9E  51 44             	mov	a,[3+((___lldiv@dividend)^0x0)]
  7822  5CA0  3A 48             	cmp	a,[3+((___lldiv@divisor)^0x0)]
  7823  5CA2  51 43             	mov	a,[2+((___lldiv@dividend)^0x0)]
  7824  5CA4  1A 47             	sbb	a,[2+((___lldiv@divisor)^0x0)]
  7825  5CA6  51 42             	mov	a,[1+((___lldiv@dividend)^0x0)]
  7826  5CA8  1A 46             	sbb	a,[1+((___lldiv@divisor)^0x0)]
  7827  5CAA  51 41             	mov	a,[0+((___lldiv@dividend)^0x0)]
  7828  5CAC  1A 45             	sbb	a,[0+((___lldiv@divisor)^0x0)]
  7829  5CAE  C026              	jc	l497
  7830                          	line	19
  7831                          ;lldiv.c: 19: dividend -= divisor;
  7832  5CB0  70 CF             	and	f, 0xCF   ;select user reg space
  7833  5CB2  62 D0 00          	mov	reg[CUR_PP],0
  7834  5CB5  51 48             	mov	a,[3+((___lldiv@divisor)^0x0)]
  7835  5CB7  14 44             	sub	[3+((___lldiv@dividend)^0x0)],a
  7836  5CB9  51 47             	mov	a,[2+((___lldiv@divisor)^0x0)]
  7837  5CBB  1C 43             	sbb	[2+((___lldiv@dividend)^0x0)],a
  7838  5CBD  51 46             	mov	a,[1+((___lldiv@divisor)^0x0)]
  7839  5CBF  1C 42             	sbb	[1+((___lldiv@dividend)^0x0)],a
  7840  5CC1  51 45             	mov	a,[0+((___lldiv@divisor)^0x0)]
  7841  5CC3  1C 41             	sbb	[0+((___lldiv@dividend)^0x0)],a
  7842                          	line	20
  7843                          ;lldiv.c: 20: quotient |= 1;
  7844  5CC5  50 01             	mov	a,<(01h)
  7845  5CC7  2C 4C             	or	[3+((___lldiv@quotient)^0x0)],a
  7846  5CC9  50 00             	mov	a,<(01h>>8)
  7847  5CCB  2C 4B             	or	[2+((___lldiv@quotient)^0x0)],a
  7848  5CCD  50 00             	mov	a,<(01h>>16)
  7849  5CCF  2C 4A             	or	[1+((___lldiv@quotient)^0x0)],a
  7850  5CD1  50 00             	mov	a,<(01h>>24)
  7851  5CD3  2C 49             	or	[0+((___lldiv@quotient)^0x0)],a
  7852                          	line	21
  7853                          ;			
  7854  5CD5                    l497:	
  7855                          	line	22
  7856                          ;lldiv.c: 21: }
  7857                          ;lldiv.c: 22: divisor >>= 1;
  7858  5CD5  50 01             	mov	a,<((01h))
  7859  5CD7  7D 5CE9           	xjmp	u2333
  7860  5CDA  70 FB             	clrc
  7861  5CDC                    u2344:
  7862  5CDC  70 CF             	and	f, 0xCF   ;select user reg space
  7863  5CDE  62 D0 00          	mov	reg[CUR_PP],0
  7864  5CE1  6E 45             	rrc	[0+((___lldiv@divisor)^0x0)]
  7865  5CE3  6E 46             	rrc	[1+((___lldiv@divisor)^0x0)]
  7866  5CE5  6E 47             	rrc	[2+((___lldiv@divisor)^0x0)]
  7867  5CE7  6E 48             	rrc	[3+((___lldiv@divisor)^0x0)]
  7868  5CE9                    u2333:
  7869  5CE9  78                	dec	a
  7870  5CEA  DFF1              	jnc	u2344
  7871                          	line	23
  7872                          ;lldiv.c: 23: } while(--counter != 0);
  7873  5CEC  70 CF             	and	f, 0xCF   ;select user reg space
  7874  5CEE  62 D0 00          	mov	reg[CUR_PP],0
  7875  5CF1  51 4D             	mov	a,[0+((___lldiv@counter)^0x0)]
  7876  5CF3  11 01             	sub	a,<((01h))
  7877  5CF5  53 4D             	mov	[0+((___lldiv@counter)^0x0)],a
  7878  5CF7  51 4D             	mov	a,[0+((___lldiv@counter)^0x0)]
  7879  5CF9  39 00             	cmp	a,(0)
  7880  5CFB  BF88              	jnz	l496
  7881                          ;			
  7882  5CFD                    l495:	
  7883                          	line	24
  7884                          ;			
  7885  5CFD                    l490:	
  7886                          	line	25
  7887  5CFD  70 CF             	and	f, 0xCF   ;select user reg space
  7888  5CFF  62 D0 00          	mov	reg[CUR_PP],0
  7889  5D02  51 49             	mov	a,[0+((___lldiv@quotient)^0x0)]
  7890  5D04  53 41             	mov	[0+((?___lldiv)^0x0)],a
  7891  5D06  51 4A             	mov	a,[1+((___lldiv@quotient)^0x0)]
  7892  5D08  53 42             	mov	[1+((?___lldiv)^0x0)],a
  7893  5D0A  51 4B             	mov	a,[2+((___lldiv@quotient)^0x0)]
  7894  5D0C  53 43             	mov	[2+((?___lldiv)^0x0)],a
  7895  5D0E  51 4C             	mov	a,[3+((___lldiv@quotient)^0x0)]
  7896  5D10  53 44             	mov	[3+((?___lldiv)^0x0)],a
  7897  5D12  7D 5D15           	xjmp	l489
  7898                          	line	26
  7899                          ;lldiv.c: 26: }
  7900  5D15                    l489:
  7901                          ;			
  7902  5D15  70 CF             	and	f, 0xCF   ;select user reg space
  7903                          	
  7904  5D17  7F                	ret
  7905                          GLOBAL __end_of___lldiv
  7906  5D18                    	__end_of___lldiv:
  7907                          	FNSIZE	___lldiv,9,8
  7908                          ; =============== function ___lldiv ends ============
  7909                          
  7910                          	signat	___lldiv,8316
  7911                          	global	___flsub
  7912                          	global	??___flsub
  7913                          	global	?___flsub
  7914                          	psect	text
  7915                          
  7916                          ; *************** function ___flsub *****************
  7917                          ; Defined at:
  7918                          ;		line 17 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flsub.c"
  7919                          ; Parameters:
  7920                          ;		f1          	offs:   0	type: unsigned long 
  7921                          ;		f2          	offs:   4	type: unsigned long 
  7922                          ; Auto variables:
  7923                          ;		None
  7924                          ; Return value:
  7925                          ;		type: unsigned long 
  7926                          ;		size: 4
  7927                          ; Registers used:
  7928                          ;		a, x, CUR_PP, mret
  7929                          ; Tracked objects:
  7930                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7931                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7932                          ;		Unchanged: 
  7933                          ; Data sizes:
  7934                          ;		Autos:    0
  7935                          ;		Params:   8
  7936                          ;		Temp:     0
  7937                          ;		Total:    8
  7938                          ; This function calls:
  7939                          ;		___fladd
  7940                          ; This function is called by:
  7941                          ;		_calc_dewpoint
  7942                          ;		_printf
  7943                          ; This function uses a non-reentrant model
  7944                          ; 
  7945                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flsub.c"
  7946                          	line	17
  7947  005A                    	__size_of___flsub	equ	__end_of___flsub-___flsub
  7948                          ;flsub.c: 15: double
  7949                          ;flsub.c: 16: __flsub(double f1, double f2)
  7950                          ;flsub.c: 17: {
  7951                          ;			
  7952  5D18                    ___flsub:	
  7953                          	opt	disable
  7954                          	line	18
  7955                          ;flsub.c: 18: (*(unsigned long *)&f2) ^= 0x80000000;
  7956  5D18  50 00             	mov	a,<(-2147483648)
  7957  5D1A  70 CF             	and	f, 0xCF   ;select user reg space
  7958  5D1C  62 D0 00          	mov	reg[CUR_PP],0
  7959  5D1F  34 48             	xor	[3+((___flsub@f2)^0x0)],a
  7960  5D21  50 00             	mov	a,<(-2147483648>>8)
  7961  5D23  34 47             	xor	[2+((___flsub@f2)^0x0)],a
  7962  5D25  50 00             	mov	a,<(-2147483648>>16)
  7963  5D27  34 46             	xor	[1+((___flsub@f2)^0x0)],a
  7964  5D29  50 80             	mov	a,<(-2147483648>>24)
  7965  5D2B  34 45             	xor	[0+((___flsub@f2)^0x0)],a
  7966                          	line	19
  7967  5D2D  70 CF             	and	f, 0xCF   ;select user reg space
  7968  5D2F  62 D0 00          	mov	reg[CUR_PP],0
  7969  5D32  51 41             	mov	a,[0+((___flsub@f1)^0x0)]
  7970  5D34  53 4D             	mov	[0+((?___fladd)^0x0)],a
  7971  5D36  51 42             	mov	a,[1+((___flsub@f1)^0x0)]
  7972  5D38  53 4E             	mov	[1+((?___fladd)^0x0)],a
  7973  5D3A  51 43             	mov	a,[2+((___flsub@f1)^0x0)]
  7974  5D3C  53 4F             	mov	[2+((?___fladd)^0x0)],a
  7975  5D3E  51 44             	mov	a,[3+((___flsub@f1)^0x0)]
  7976  5D40  53 50             	mov	[3+((?___fladd)^0x0)],a
  7977  5D42  51 45             	mov	a,[0+((___flsub@f2)^0x0)]
  7978  5D44  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
  7979  5D46  51 46             	mov	a,[1+((___flsub@f2)^0x0)]
  7980  5D48  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
  7981  5D4A  51 47             	mov	a,[2+((___flsub@f2)^0x0)]
  7982  5D4C  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
  7983  5D4E  51 48             	mov	a,[3+((___flsub@f2)^0x0)]
  7984  5D50  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
  7985  5D52  71 80             	or	f, 0x80	;select multiple RAM page mode
  7986                          	
  7987  5D54  7C 7416           	xcall	___fladd
  7988                          	
  7989  5D57  70 CF             	and	f, 0xCF   ;select user reg space
  7990  5D59  62 D0 00          	mov	reg[CUR_PP],0
  7991  5D5C  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
  7992  5D5E  53 41             	mov	[0+((?___flsub)^0x0)],a
  7993  5D60  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
  7994  5D62  53 42             	mov	[1+((?___flsub)^0x0)],a
  7995  5D64  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
  7996  5D66  53 43             	mov	[2+((?___flsub)^0x0)],a
  7997  5D68  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
  7998  5D6A  53 44             	mov	[3+((?___flsub)^0x0)],a
  7999  5D6C  7D 5D6F           	xjmp	l393
  8000                          	line	20
  8001                          ;flsub.c: 20: }
  8002  5D6F                    l393:
  8003                          ;			
  8004  5D6F  70 CF             	and	f, 0xCF   ;select user reg space
  8005                          	
  8006  5D71  7F                	ret
  8007                          GLOBAL __end_of___flsub
  8008  5D72                    	__end_of___flsub:
  8009                          	FNSIZE	___flsub,0,8
  8010                          ; =============== function ___flsub ends ============
  8011                          
  8012                          	signat	___flsub,8316
  8013                          	global	___wmul
  8014                          	global	??___wmul
  8015                          	global	?___wmul
  8016                          	psect	text
  8017                          
  8018                          ; *************** function ___wmul *****************
  8019                          ; Defined at:
  8020                          ;		line 3 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\wmul.c"
  8021                          ; Parameters:
  8022                          ;		multiplier  	offs:   0	type: unsigned int 
  8023                          ;		multiplicand	offs:   2	type: unsigned int 
  8024                          ; Auto variables:
  8025                          ;		product     	       	type: unsigned int 
  8026                          ; Return value:
  8027                          ;		type: unsigned int 
  8028                          ;		size: 2
  8029                          ; Registers used:
  8030                          ;		a, CUR_PP
  8031                          ; Tracked objects:
  8032                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8033                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8034                          ;		Unchanged: 
  8035                          ; Data sizes:
  8036                          ;		Autos:    2
  8037                          ;		Params:   4
  8038                          ;		Temp:     2
  8039                          ;		Total:    8
  8040                          ; This function calls:
  8041                          ;		Nothing
  8042                          ; This function is called by:
  8043                          ;		_printf
  8044                          ; This function uses a non-reentrant model
  8045                          ; 
  8046                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\wmul.c"
  8047                          	line	3
  8048  007F                    	__size_of___wmul	equ	__end_of___wmul-___wmul
  8049                          ;wmul.c: 1: unsigned int
  8050                          ;wmul.c: 2: __wmul(unsigned int multiplier, unsigned int multiplicand)
  8051                          ;wmul.c: 3: {
  8052                          ;			
  8053  5D72                    ___wmul:	
  8054                          	opt	disable
  8055                          	line	4
  8056                          ;wmul.c: 4: unsigned int product = 0;
  8057  5D72  50 00             	mov	a,<(0)
  8058  5D74  70 CF             	and	f, 0xCF   ;select user reg space
  8059  5D76  62 D0 00          	mov	reg[CUR_PP],0
  8060  5D79  53 46             	mov	[1+((___wmul@product)^0x0)],a
  8061  5D7B  50 00             	mov	a,>(0)
  8062  5D7D  53 45             	mov	[0+((___wmul@product)^0x0)],a
  8063                          	line	6
  8064                          ;wmul.c: 6: do {
  8065                          ;			
  8066  5D7F                    l250:	
  8067                          	line	7
  8068                          ;wmul.c: 7: if(multiplier & 1)
  8069  5D7F  70 CF             	and	f, 0xCF   ;select user reg space
  8070  5D81  62 D0 00          	mov	reg[CUR_PP],0
  8071  5D84  51 42             	mov	a,[1+((___wmul@multiplier)^0x0)]
  8072  5D86  21 01             	and	a,<(01h)
  8073  5D88  53 48             	mov	[(??___wmul^0x0)+2+0+1],a
  8074  5D8A  51 41             	mov	a,[0+((___wmul@multiplier)^0x0)]
  8075  5D8C  21 00             	and	a,>(01h)
  8076  5D8E  53 47             	mov	[(??___wmul^0x0)+2+0],a
  8077  5D90  51 47             	mov	a,[(??___wmul^0x0)+2+0]
  8078  5D92  39 00             	cmp	a,>(0)
  8079  5D94  B005              	jnz	u1603
  8080  5D96  51 48             	mov	a,[(??___wmul^0x0)+2+1]
  8081  5D98  39 00             	cmp	a,<(0)
  8082  5D9A                    u1603:
  8083  5D9A  A012              	jz	l251
  8084                          	line	8
  8085                          ;wmul.c: 8: product += multiplicand;
  8086  5D9C  70 CF             	and	f, 0xCF   ;select user reg space
  8087  5D9E  62 D0 00          	mov	reg[CUR_PP],0
  8088  5DA1  51 46             	mov	a,[1+((___wmul@product)^0x0)]
  8089  5DA3  02 44             	add	a,[1+((___wmul@multiplicand)^0x0)]
  8090  5DA5  53 46             	mov	[1+((___wmul@product)^0x0)],a
  8091  5DA7  51 45             	mov	a,[0+((___wmul@product)^0x0)]
  8092  5DA9  0A 43             	adc	a,[0+((___wmul@multiplicand)^0x0)]
  8093  5DAB  53 45             	mov	[0+((___wmul@product)^0x0)],a
  8094                          ;			
  8095  5DAD                    l251:	
  8096                          	line	9
  8097                          ;wmul.c: 9: multiplicand <<= 1;
  8098  5DAD  50 01             	mov	a,<((01h))
  8099  5DAF  7D 5DBB           	xjmp	u1613
  8100  5DB2                    u1624:
  8101  5DB2  70 CF             	and	f, 0xCF   ;select user reg space
  8102  5DB4  62 D0 00          	mov	reg[CUR_PP],0
  8103  5DB7  65 44             	asl	[1+((___wmul@multiplicand)^0x0)]
  8104  5DB9  6B 43             	rlc	[0+((___wmul@multiplicand)^0x0)]
  8105  5DBB                    u1613:
  8106  5DBB  78                	dec	a
  8107  5DBC  DFF5              	jnc	u1624
  8108                          	line	10
  8109                          ;wmul.c: 10: multiplier >>= 1;
  8110  5DBE  50 01             	mov	a,<((01h))
  8111  5DC0  7D 5DCE           	xjmp	u1633
  8112  5DC3  70 FB             	clrc
  8113  5DC5                    u1644:
  8114  5DC5  70 CF             	and	f, 0xCF   ;select user reg space
  8115  5DC7  62 D0 00          	mov	reg[CUR_PP],0
  8116  5DCA  6E 41             	rrc	[0+((___wmul@multiplier)^0x0)]
  8117  5DCC  6E 42             	rrc	[1+((___wmul@multiplier)^0x0)]
  8118  5DCE                    u1633:
  8119  5DCE  78                	dec	a
  8120  5DCF  DFF5              	jnc	u1644
  8121                          	line	11
  8122                          ;wmul.c: 11: } while(multiplier != 0);
  8123  5DD1  70 CF             	and	f, 0xCF   ;select user reg space
  8124  5DD3  62 D0 00          	mov	reg[CUR_PP],0
  8125  5DD6  51 41             	mov	a,[0+((___wmul@multiplier)^0x0)]
  8126  5DD8  39 00             	cmp	a,>(0)
  8127  5DDA  B005              	jnz	u1653
  8128  5DDC  51 42             	mov	a,[1+((___wmul@multiplier)^0x0)]
  8129  5DDE  39 00             	cmp	a,<(0)
  8130  5DE0                    u1653:
  8131  5DE0  BF9E              	jnz	l250
  8132                          ;			
  8133  5DE2                    l249:	
  8134                          	line	12
  8135                          ;wmul.c: 12: return product;
  8136  5DE2  70 CF             	and	f, 0xCF   ;select user reg space
  8137  5DE4  62 D0 00          	mov	reg[CUR_PP],0
  8138  5DE7  51 46             	mov	a,[1+((___wmul@product)^0x0)]
  8139  5DE9  58 45             	mov	x,[0+((___wmul@product)^0x0)]
  8140  5DEB  7D 5DEE           	xjmp	l247
  8141                          	line	13
  8142                          ;wmul.c: 13: }
  8143  5DEE                    l247:
  8144                          ;			
  8145  5DEE  70 CF             	and	f, 0xCF   ;select user reg space
  8146                          	
  8147  5DF0  7F                	ret
  8148                          GLOBAL __end_of___wmul
  8149  5DF1                    	__end_of___wmul:
  8150                          	FNSIZE	___wmul,4,4
  8151                          ; =============== function ___wmul ends ============
  8152                          
  8153                          	signat	___wmul,8314
  8154                          	global	___llmod
  8155                          	global	??___llmod
  8156                          	global	?___llmod
  8157                          	psect	text
  8158                          
  8159                          ; *************** function ___llmod *****************
  8160                          ; Defined at:
  8161                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\llmod.c"
  8162                          ; Parameters:
  8163                          ;		dividend    	offs:   0	type: unsigned long 
  8164                          ;		divisor     	offs:   4	type: unsigned long 
  8165                          ; Auto variables:
  8166                          ;		counter     	       	type: unsigned char 
  8167                          ; Return value:
  8168                          ;		type: unsigned long 
  8169                          ;		size: 4
  8170                          ; Registers used:
  8171                          ;		a, CUR_PP
  8172                          ; Tracked objects:
  8173                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8174                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8175                          ;		Unchanged: 
  8176                          ; Data sizes:
  8177                          ;		Autos:    1
  8178                          ;		Params:   8
  8179                          ;		Temp:     4
  8180                          ;		Total:   13
  8181                          ; This function calls:
  8182                          ;		Nothing
  8183                          ; This function is called by:
  8184                          ;		_printf
  8185                          ; This function uses a non-reentrant model
  8186                          ; 
  8187                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\llmod.c"
  8188                          	line	5
  8189  00E0                    	__size_of___llmod	equ	__end_of___llmod-___llmod
  8190                          ;llmod.c: 3: unsigned long int
  8191                          ;llmod.c: 4: __llmod(unsigned long int dividend, unsigned long int divisor)
  8192                          ;llmod.c: 5: {
  8193                          ;			
  8194  5DF1                    ___llmod:	
  8195                          	opt	disable
  8196                          	line	8
  8197                          ;llmod.c: 6: unsigned char counter;
  8198                          ;llmod.c: 8: if(divisor != 0) {
  8199  5DF1  70 CF             	and	f, 0xCF   ;select user reg space
  8200  5DF3  62 D0 00          	mov	reg[CUR_PP],0
  8201  5DF6  51 45             	mov	a,[0+((___llmod@divisor)^0x0)]
  8202  5DF8  39 00             	cmp	a,<(0>>24)
  8203  5DFA  B011              	jnz	u2153
  8204  5DFC  51 46             	mov	a,[1+((___llmod@divisor)^0x0)]
  8205  5DFE  39 00             	cmp	a,<(0>>16)
  8206  5E00  B00B              	jnz	u2153
  8207  5E02  51 47             	mov	a,[2+((___llmod@divisor)^0x0)]
  8208  5E04  39 00             	cmp	a,<(0>>8)
  8209  5E06  B005              	jnz	u2153
  8210  5E08  51 48             	mov	a,[3+((___llmod@divisor)^0x0)]
  8211  5E0A  39 00             	cmp	a,<(0)
  8212  5E0C                    u2153:
  8213  5E0C  A0BE              	jz	l455
  8214                          	line	9
  8215                          ;llmod.c: 9: counter = 1;
  8216  5E0E  50 01             	mov	a,<((01h))
  8217  5E10  70 CF             	and	f, 0xCF   ;select user reg space
  8218  5E12  62 D0 00          	mov	reg[CUR_PP],0
  8219  5E15  53 49             	mov	[0+((___llmod@counter)^0x0)],a
  8220                          	line	10
  8221                          ;llmod.c: 10: while((divisor & 0x80000000UL) == 0) {
  8222  5E17  7D 5E3A           	xjmp	l456
  8223                          ;			
  8224  5E1A                    l457:	
  8225                          	line	11
  8226                          ;llmod.c: 11: divisor <<= 1;
  8227  5E1A  50 01             	mov	a,<((01h))
  8228  5E1C  7D 5E2C           	xjmp	u2163
  8229  5E1F                    u2174:
  8230  5E1F  70 CF             	and	f, 0xCF   ;select user reg space
  8231  5E21  62 D0 00          	mov	reg[CUR_PP],0
  8232  5E24  65 48             	asl	[3+((___llmod@divisor)^0x0)]
  8233  5E26  6B 47             	rlc	[2+((___llmod@divisor)^0x0)]
  8234  5E28  6B 46             	rlc	[1+((___llmod@divisor)^0x0)]
  8235  5E2A  6B 45             	rlc	[0+((___llmod@divisor)^0x0)]
  8236  5E2C                    u2163:
  8237  5E2C  78                	dec	a
  8238  5E2D  DFF1              	jnc	u2174
  8239                          	line	12
  8240                          ;llmod.c: 12: counter++;
  8241  5E2F  70 CF             	and	f, 0xCF   ;select user reg space
  8242  5E31  62 D0 00          	mov	reg[CUR_PP],0
  8243  5E34  51 49             	mov	a,[0+((___llmod@counter)^0x0)]
  8244  5E36  01 01             	add	a,<((01h))
  8245  5E38  53 49             	mov	[0+((___llmod@counter)^0x0)],a
  8246                          	line	13
  8247                          ;			
  8248  5E3A                    l456:	
  8249                          	line	10
  8250  5E3A  70 CF             	and	f, 0xCF   ;select user reg space
  8251  5E3C  62 D0 00          	mov	reg[CUR_PP],0
  8252  5E3F  51 45             	mov	a,[0+((___llmod@divisor)^0x0)]
  8253  5E41  53 4A             	mov	[(??___llmod^0x0)+1+0],a
  8254  5E43  51 46             	mov	a,[1+((___llmod@divisor)^0x0)]
  8255  5E45  53 4B             	mov	[(??___llmod^0x0)+1+0+1],a
  8256  5E47  51 47             	mov	a,[2+((___llmod@divisor)^0x0)]
  8257  5E49  53 4C             	mov	[(??___llmod^0x0)+1+0+2],a
  8258  5E4B  51 48             	mov	a,[3+((___llmod@divisor)^0x0)]
  8259  5E4D  53 4D             	mov	[(??___llmod^0x0)+1+0+3],a
  8260  5E4F  50 00             	mov	a,<(-2147483648)
  8261  5E51  24 4D             	and	[(??___llmod^0x0)+1+3],a
  8262  5E53  50 00             	mov	a,<(-2147483648>>8)
  8263  5E55  24 4C             	and	[(??___llmod^0x0)+1+2],a
  8264  5E57  50 00             	mov	a,<(-2147483648>>16)
  8265  5E59  24 4B             	and	[(??___llmod^0x0)+1+1],a
  8266  5E5B  50 80             	mov	a,<(-2147483648>>24)
  8267  5E5D  24 4A             	and	[(??___llmod^0x0)+1+0],a
  8268  5E5F  51 4A             	mov	a,[(??___llmod^0x0)+1+0]
  8269  5E61  39 00             	cmp	a,<(0>>24)
  8270  5E63  B011              	jnz	u2183
  8271  5E65  51 4B             	mov	a,[(??___llmod^0x0)+1+1]
  8272  5E67  39 00             	cmp	a,<(0>>16)
  8273  5E69  B00B              	jnz	u2183
  8274  5E6B  51 4C             	mov	a,[(??___llmod^0x0)+1+2]
  8275  5E6D  39 00             	cmp	a,<(0>>8)
  8276  5E6F  B005              	jnz	u2183
  8277  5E71  51 4D             	mov	a,[(??___llmod^0x0)+1+3]
  8278  5E73  39 00             	cmp	a,<(0)
  8279  5E75                    u2183:
  8280  5E75  AFA4              	jz	l457
  8281                          ;			
  8282  5E77                    l458:	
  8283                          	line	14
  8284                          ;llmod.c: 13: }
  8285                          ;llmod.c: 14: do {
  8286                          ;			
  8287  5E77                    l461:	
  8288                          	line	15
  8289                          ;llmod.c: 15: if((unsigned long)divisor <= (unsigned long)dividend)
  8290  5E77  70 CF             	and	f, 0xCF   ;select user reg space
  8291  5E79  62 D0 00          	mov	reg[CUR_PP],0
  8292  5E7C  51 44             	mov	a,[3+((___llmod@dividend)^0x0)]
  8293  5E7E  3A 48             	cmp	a,[3+((___llmod@divisor)^0x0)]
  8294  5E80  51 43             	mov	a,[2+((___llmod@dividend)^0x0)]
  8295  5E82  1A 47             	sbb	a,[2+((___llmod@divisor)^0x0)]
  8296  5E84  51 42             	mov	a,[1+((___llmod@dividend)^0x0)]
  8297  5E86  1A 46             	sbb	a,[1+((___llmod@divisor)^0x0)]
  8298  5E88  51 41             	mov	a,[0+((___llmod@dividend)^0x0)]
  8299  5E8A  1A 45             	sbb	a,[0+((___llmod@divisor)^0x0)]
  8300  5E8C  C016              	jc	l462
  8301                          	line	16
  8302                          ;llmod.c: 16: dividend -= divisor;
  8303  5E8E  70 CF             	and	f, 0xCF   ;select user reg space
  8304  5E90  62 D0 00          	mov	reg[CUR_PP],0
  8305  5E93  51 48             	mov	a,[3+((___llmod@divisor)^0x0)]
  8306  5E95  14 44             	sub	[3+((___llmod@dividend)^0x0)],a
  8307  5E97  51 47             	mov	a,[2+((___llmod@divisor)^0x0)]
  8308  5E99  1C 43             	sbb	[2+((___llmod@dividend)^0x0)],a
  8309  5E9B  51 46             	mov	a,[1+((___llmod@divisor)^0x0)]
  8310  5E9D  1C 42             	sbb	[1+((___llmod@dividend)^0x0)],a
  8311  5E9F  51 45             	mov	a,[0+((___llmod@divisor)^0x0)]
  8312  5EA1  1C 41             	sbb	[0+((___llmod@dividend)^0x0)],a
  8313                          ;			
  8314  5EA3                    l462:	
  8315                          	line	17
  8316                          ;llmod.c: 17: *(unsigned long int *)&divisor >>= 1;
  8317  5EA3  50 01             	mov	a,<((01h))
  8318  5EA5  7D 5EB7           	xjmp	u2193
  8319  5EA8  70 FB             	clrc
  8320  5EAA                    u2204:
  8321  5EAA  70 CF             	and	f, 0xCF   ;select user reg space
  8322  5EAC  62 D0 00          	mov	reg[CUR_PP],0
  8323  5EAF  6E 45             	rrc	[0+((___llmod@divisor)^0x0)]
  8324  5EB1  6E 46             	rrc	[1+((___llmod@divisor)^0x0)]
  8325  5EB3  6E 47             	rrc	[2+((___llmod@divisor)^0x0)]
  8326  5EB5  6E 48             	rrc	[3+((___llmod@divisor)^0x0)]
  8327  5EB7                    u2193:
  8328  5EB7  78                	dec	a
  8329  5EB8  DFF1              	jnc	u2204
  8330                          	line	18
  8331                          ;llmod.c: 18: } while(--counter != 0);
  8332  5EBA  70 CF             	and	f, 0xCF   ;select user reg space
  8333  5EBC  62 D0 00          	mov	reg[CUR_PP],0
  8334  5EBF  51 49             	mov	a,[0+((___llmod@counter)^0x0)]
  8335  5EC1  11 01             	sub	a,<((01h))
  8336  5EC3  53 49             	mov	[0+((___llmod@counter)^0x0)],a
  8337  5EC5  51 49             	mov	a,[0+((___llmod@counter)^0x0)]
  8338  5EC7  39 00             	cmp	a,(0)
  8339  5EC9  BFAD              	jnz	l461
  8340                          ;			
  8341  5ECB                    l460:	
  8342                          	line	19
  8343                          ;			
  8344  5ECB                    l455:	
  8345                          	line	20
  8346  5ECB  7D 5ECE           	xjmp	l454
  8347                          	line	21
  8348                          ;llmod.c: 21: }
  8349  5ECE                    l454:
  8350                          ;			
  8351  5ECE  70 CF             	and	f, 0xCF   ;select user reg space
  8352                          	
  8353  5ED0  7F                	ret
  8354                          GLOBAL __end_of___llmod
  8355  5ED1                    	__end_of___llmod:
  8356                          	FNSIZE	___llmod,5,8
  8357                          ; =============== function ___llmod ends ============
  8358                          
  8359                          	signat	___llmod,8316
  8360                          	global	___lltofl
  8361                          	global	??___lltofl
  8362                          	global	?___lltofl
  8363                          	psect	text
  8364                          
  8365                          ; *************** function ___lltofl *****************
  8366                          ; Defined at:
  8367                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lltofl.c"
  8368                          ; Parameters:
  8369                          ;		c           	offs:   0	type: unsigned long 
  8370                          ; Auto variables:
  8371                          ;		f1          	       	type: unsigned long 
  8372                          ;		exp         	       	type: unsigned char 
  8373                          ; Return value:
  8374                          ;		type: unsigned char 
  8375                          ;		size: 4
  8376                          ; Registers used:
  8377                          ;		a, x, CUR_PP
  8378                          ; Tracked objects:
  8379                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8380                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8381                          ;		Unchanged: 
  8382                          ; Data sizes:
  8383                          ;		Autos:    5
  8384                          ;		Params:   4
  8385                          ;		Temp:     0
  8386                          ;		Total:    9
  8387                          ; This function calls:
  8388                          ;		___flpack
  8389                          ; This function is called by:
  8390                          ;		_printf
  8391                          ; This function uses a non-reentrant model
  8392                          ; 
  8393                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lltofl.c"
  8394                          	line	16
  8395  007F                    	__size_of___lltofl	equ	__end_of___lltofl-___lltofl
  8396                          ;lltofl.c: 14: double
  8397                          ;lltofl.c: 15: __lltofl(unsigned long int c)
  8398                          ;lltofl.c: 16: {
  8399                          ;			
  8400  5ED1                    ___lltofl:	
  8401                          	opt	disable
  8402                          	line	20
  8403                          ;lltofl.c: 17: double f1;
  8404                          ;lltofl.c: 18: unsigned char exp;
  8405                          ;lltofl.c: 20: if(c == 0)
  8406  5ED1  70 CF             	and	f, 0xCF   ;select user reg space
  8407  5ED3  62 D0 00          	mov	reg[CUR_PP],0
  8408  5ED6  51 41             	mov	a,[0+((___lltofl@c)^0x0)]
  8409  5ED8  39 00             	cmp	a,<(0>>24)
  8410  5EDA  B011              	jnz	u2433
  8411  5EDC  51 42             	mov	a,[1+((___lltofl@c)^0x0)]
  8412  5EDE  39 00             	cmp	a,<(0>>16)
  8413  5EE0  B00B              	jnz	u2433
  8414  5EE2  51 43             	mov	a,[2+((___lltofl@c)^0x0)]
  8415  5EE4  39 00             	cmp	a,<(0>>8)
  8416  5EE6  B005              	jnz	u2433
  8417  5EE8  51 44             	mov	a,[3+((___lltofl@c)^0x0)]
  8418  5EEA  39 00             	cmp	a,<(0)
  8419  5EEC                    u2433:
  8420  5EEC  B019              	jnz	l602
  8421                          	line	21
  8422  5EEE  50 00             	mov	a,<(0x0>>24)
  8423  5EF0  70 CF             	and	f, 0xCF   ;select user reg space
  8424  5EF2  62 D0 00          	mov	reg[CUR_PP],0
  8425  5EF5  53 41             	mov	[0+((?___lltofl)^0x0)],a
  8426  5EF7  50 00             	mov	a,<(0x0>>16)
  8427  5EF9  53 42             	mov	[1+((?___lltofl)^0x0)],a
  8428  5EFB  50 00             	mov	a,<(0x0>>8)
  8429  5EFD  53 43             	mov	[2+((?___lltofl)^0x0)],a
  8430  5EFF  50 00             	mov	a,<(0x0)
  8431  5F01  53 44             	mov	[3+((?___lltofl)^0x0)],a
  8432  5F03  7D 5F4D           	xjmp	l601
  8433                          ;			
  8434  5F06                    l602:	
  8435                          	line	22
  8436                          ;lltofl.c: 22: exp = 127+23;
  8437  5F06  50 96             	mov	a,<((096h))
  8438  5F08  70 CF             	and	f, 0xCF   ;select user reg space
  8439  5F0A  62 D0 00          	mov	reg[CUR_PP],0
  8440  5F0D  53 49             	mov	[0+((___lltofl@exp)^0x0)],a
  8441                          	line	23
  8442                          ;lltofl.c: 23: (*(unsigned long *)&f1) = c;
  8443  5F0F  51 41             	mov	a,[0+((___lltofl@c)^0x0)]
  8444  5F11  53 45             	mov	[0+((___lltofl@f1)^0x0)],a
  8445  5F13  51 42             	mov	a,[1+((___lltofl@c)^0x0)]
  8446  5F15  53 46             	mov	[1+((___lltofl@f1)^0x0)],a
  8447  5F17  51 43             	mov	a,[2+((___lltofl@c)^0x0)]
  8448  5F19  53 47             	mov	[2+((___lltofl@f1)^0x0)],a
  8449  5F1B  51 44             	mov	a,[3+((___lltofl@c)^0x0)]
  8450  5F1D  53 48             	mov	[3+((___lltofl@f1)^0x0)],a
  8451                          	line	24
  8452                          ;lltofl.c: 24: __flpack(&(*(unsigned long *)&f1), exp);
  8453  5F1F  50 45             	mov	a,<((___lltofl@f1|8000h))
  8454  5F21  70 CF             	and	f, 0xCF   ;select user reg space
  8455  5F23  62 D0 00          	mov	reg[CUR_PP],0
  8456  5F26  53 72             	mov	[1+((?___flpack)^0x0)],a
  8457  5F28  50 80             	mov	a,>((___lltofl@f1|8000h))
  8458  5F2A  53 71             	mov	[0+((?___flpack)^0x0)],a
  8459  5F2C  51 49             	mov	a,[0+((___lltofl@exp)^0x0)]
  8460  5F2E  53 73             	mov	[0+((0+?___flpack+02h)^0x0)],a
  8461  5F30  71 80             	or	f, 0x80	;select multiple RAM page mode
  8462                          	
  8463  5F32  7C 77F8           	xcall	___flpack
  8464                          	
  8465                          	line	25
  8466  5F35  70 CF             	and	f, 0xCF   ;select user reg space
  8467  5F37  62 D0 00          	mov	reg[CUR_PP],0
  8468  5F3A  51 45             	mov	a,[0+((___lltofl@f1)^0x0)]
  8469  5F3C  53 41             	mov	[0+((?___lltofl)^0x0)],a
  8470  5F3E  51 46             	mov	a,[1+((___lltofl@f1)^0x0)]
  8471  5F40  53 42             	mov	[1+((?___lltofl)^0x0)],a
  8472  5F42  51 47             	mov	a,[2+((___lltofl@f1)^0x0)]
  8473  5F44  53 43             	mov	[2+((?___lltofl)^0x0)],a
  8474  5F46  51 48             	mov	a,[3+((___lltofl@f1)^0x0)]
  8475  5F48  53 44             	mov	[3+((?___lltofl)^0x0)],a
  8476  5F4A  7D 5F4D           	xjmp	l601
  8477                          	line	26
  8478                          ;lltofl.c: 26: }
  8479  5F4D                    l601:
  8480                          ;			
  8481  5F4D  70 CF             	and	f, 0xCF   ;select user reg space
  8482                          	
  8483  5F4F  7F                	ret
  8484                          GLOBAL __end_of___lltofl
  8485  5F50                    	__end_of___lltofl:
  8486                          	FNSIZE	___lltofl,5,4
  8487                          ; =============== function ___lltofl ends ============
  8488                          
  8489                          	signat	___lltofl,4220
  8490                          	global	_fround
  8491                          	global	??_fround
  8492                          	global	?_fround
  8493                          	psect	text
  8494                          
  8495                          ; *************** function _fround *****************
  8496                          ; Defined at:
  8497                          ;		line 398 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  8498                          ; Parameters:
  8499                          ;		prec        	offs:   0	type: unsigned char 
  8500                          ; Auto variables:
  8501                          ;		None
  8502                          ; Return value:
  8503                          ;		type: unsigned char 
  8504                          ;		size: 4
  8505                          ; Registers used:
  8506                          ;		a, x, CUR_PP, mret
  8507                          ; Tracked objects:
  8508                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8509                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8510                          ;		Unchanged: 
  8511                          ; Data sizes:
  8512                          ;		Autos:   12
  8513                          ;		Params:   4
  8514                          ;		Temp:     1
  8515                          ;		Total:   17
  8516                          ; This function calls:
  8517                          ;		___awdiv
  8518                          ;		___awmod
  8519                          ;		___flmul
  8520                          ; This function is called by:
  8521                          ;		_printf
  8522                          ; This function uses a non-reentrant model
  8523                          ; 
  8524                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  8525                          	line	398
  8526  029B                    	__size_of_fround	equ	__end_of_fround-_fround
  8527                          ;doprnt.c: 342: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
  8528                          ;doprnt.c: 344: 100000, 1000000, 10000000, 100000000,
  8529                          ;doprnt.c: 345: 1000000000
  8530                          ;doprnt.c: 347: };
  8531                          ;doprnt.c: 376: extern const double _powers_[], _npowers_[];
  8532                          ;doprnt.c: 380: extern unsigned long _div_to_l_(double, double);
  8533                          ;doprnt.c: 382: extern unsigned long _tdiv_to_l_(float, float);
  8534                          ;doprnt.c: 396: static double
  8535                          ;doprnt.c: 397: fround(unsigned char prec)
  8536                          ;doprnt.c: 398: {
  8537                          ;			
  8538  5F50                    _fround:	
  8539                          	opt	disable
  8540                          	line	401
  8541                          ;doprnt.c: 401: if(prec>=110)
  8542  5F50  70 CF             	and	f, 0xCF   ;select user reg space
  8543  5F52  62 D0 00          	mov	reg[CUR_PP],0
  8544  5F55  51 41             	mov	a,[0+((fround@prec)^0x0)]
  8545  5F57  39 6E             	cmp	a,<((06Eh))
  8546  5F59  C165              	jc	l136
  8547                          	line	402
  8548  5F5B  70 CF             	and	f, 0xCF   ;select user reg space
  8549  5F5D  62 D0 00          	mov	reg[CUR_PP],0
  8550  5F60  51 41             	mov	a,[0+((fround@prec)^0x0)]
  8551  5F62  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  8552  5F64  50 00             	mov	a,0
  8553  5F66  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  8554  5F68  50 64             	mov	a,<(064h)
  8555  5F6A  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  8556  5F6C  50 00             	mov	a,>(064h)
  8557  5F6E  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  8558  5F70  71 80             	or	f, 0x80	;select multiple RAM page mode
  8559                          	
  8560  5F72  7C 6D2D           	xcall	___awdiv
  8561                          	
  8562  5F75  70 CF             	and	f, 0xCF   ;select user reg space
  8563  5F77  62 D0 00          	mov	reg[CUR_PP],0
  8564  5F7A  5A 4D             	mov	[((_fround$3284)^0x0)],x
  8565  5F7C  53 4E             	mov	[((_fround$3284+1)^0x0)],a
  8566  5F7E  51 41             	mov	a,[0+((fround@prec)^0x0)]
  8567  5F80  53 5F             	mov	[1+((?___awmod)^0x0)],a
  8568  5F82  50 00             	mov	a,0
  8569  5F84  53 5E             	mov	[0+((?___awmod)^0x0)],a
  8570  5F86  50 64             	mov	a,<(064h)
  8571  5F88  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  8572  5F8A  50 00             	mov	a,>(064h)
  8573  5F8C  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  8574  5F8E  71 80             	or	f, 0x80	;select multiple RAM page mode
  8575                          	
  8576  5F90  7C 6A28           	xcall	___awmod
  8577                          	
  8578  5F93  70 CF             	and	f, 0xCF   ;select user reg space
  8579  5F95  62 D0 00          	mov	reg[CUR_PP],0
  8580  5F98  5A 4B             	mov	[((_fround$3285)^0x0)],x
  8581  5F9A  53 4C             	mov	[((_fround$3285+1)^0x0)],a
  8582  5F9C  50 0A             	mov	a,<(0Ah)
  8583  5F9E  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  8584  5FA0  50 00             	mov	a,>(0Ah)
  8585  5FA2  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  8586  5FA4  51 4B             	mov	a,[0+((_fround$3285)^0x0)]
  8587  5FA6  08                	push	a
  8588  5FA7  51 4C             	mov	a,[1+((_fround$3285)^0x0)]
  8589  5FA9  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  8590  5FAB  18                	pop	a
  8591  5FAC  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  8592  5FAE  71 80             	or	f, 0x80	;select multiple RAM page mode
  8593                          	
  8594  5FB0  7C 6D2D           	xcall	___awdiv
  8595                          	
  8596  5FB3  70 CF             	and	f, 0xCF   ;select user reg space
  8597  5FB5  62 D0 00          	mov	reg[CUR_PP],0
  8598  5FB8  5A 4F             	mov	[((_fround$3286)^0x0)],x
  8599  5FBA  53 50             	mov	[((_fround$3286+1)^0x0)],a
  8600  5FBC  50 01             	mov	a,<((01h))
  8601  5FBE  01 4D             	add	a,<(8000h+_fround$3284)
  8602  5FC0  5C                	mov	x,a
  8603  5FC1  50 80             	mov	a,>(8000h+_fround$3284)
  8604  5FC3  70 CF             	and	f, 0xCF   ;select user reg space
  8605  5FC5  60 D3             	mov	reg[0xd3],a
  8606  5FC7  52 00             	mov	a,[x+0]
  8607  5FC9  64                	asl	a
  8608  5FCA  64                	asl	a
  8609  5FCB  01 48             	add	a,<((048h))
  8610  5FCD  01 00             	add	a,<__npowers_
  8611  5FCF  5C                	mov	x,a
  8612  5FD0  50 7C             	mov	a,>__npowers_
  8613  5FD2  08                	push	a
  8614  5FD3  28                	romx
  8615  5FD4  62 D0 00          	mov	reg[CUR_PP],0
  8616  5FD7  53 5E             	mov	[0+((?___flmul)^0x0)],a
  8617  5FD9  18                	pop	a
  8618  5FDA  75                	inc	x
  8619  5FDB  08                	push	a
  8620  5FDC  28                	romx
  8621  5FDD  53 5F             	mov	[1+((?___flmul)^0x0)],a
  8622  5FDF  18                	pop	a
  8623  5FE0  75                	inc	x
  8624  5FE1  08                	push	a
  8625  5FE2  28                	romx
  8626  5FE3  53 60             	mov	[2+((?___flmul)^0x0)],a
  8627  5FE5  18                	pop	a
  8628  5FE6  75                	inc	x
  8629  5FE7  28                	romx
  8630  5FE8  53 61             	mov	[3+((?___flmul)^0x0)],a
  8631  5FEA  50 01             	mov	a,<((01h))
  8632  5FEC  01 4F             	add	a,<(8000h+_fround$3286)
  8633  5FEE  5C                	mov	x,a
  8634  5FEF  50 80             	mov	a,>(8000h+_fround$3286)
  8635  5FF1  60 D3             	mov	reg[0xd3],a
  8636  5FF3  52 00             	mov	a,[x+0]
  8637  5FF5  64                	asl	a
  8638  5FF6  64                	asl	a
  8639  5FF7  01 24             	add	a,<((024h))
  8640  5FF9  01 00             	add	a,<__npowers_
  8641  5FFB  5C                	mov	x,a
  8642  5FFC  50 7C             	mov	a,>__npowers_
  8643  5FFE  08                	push	a
  8644  5FFF  28                	romx
  8645  6000  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  8646  6002  18                	pop	a
  8647  6003  75                	inc	x
  8648  6004  08                	push	a
  8649  6005  28                	romx
  8650  6006  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  8651  6008  18                	pop	a
  8652  6009  75                	inc	x
  8653  600A  08                	push	a
  8654  600B  28                	romx
  8655  600C  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  8656  600E  18                	pop	a
  8657  600F  75                	inc	x
  8658  6010  28                	romx
  8659  6011  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  8660  6013  71 80             	or	f, 0x80	;select multiple RAM page mode
  8661                          	
  8662  6015  7C 7201           	xcall	___flmul
  8663                          	
  8664  6018  70 CF             	and	f, 0xCF   ;select user reg space
  8665  601A  62 D0 00          	mov	reg[CUR_PP],0
  8666  601D  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  8667  601F  53 47             	mov	[0+((_fround$3287)^0x0)],a
  8668  6021  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  8669  6023  53 48             	mov	[1+((_fround$3287)^0x0)],a
  8670  6025  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  8671  6027  53 49             	mov	[2+((_fround$3287)^0x0)],a
  8672  6029  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  8673  602B  53 4A             	mov	[3+((_fround$3287)^0x0)],a
  8674  602D  70 CF             	and	f, 0xCF   ;select user reg space
  8675  602F  62 D0 00          	mov	reg[CUR_PP],0
  8676  6032  51 41             	mov	a,[0+((fround@prec)^0x0)]
  8677  6034  53 5F             	mov	[1+((?___awmod)^0x0)],a
  8678  6036  50 00             	mov	a,0
  8679  6038  53 5E             	mov	[0+((?___awmod)^0x0)],a
  8680  603A  50 0A             	mov	a,<(0Ah)
  8681  603C  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  8682  603E  50 00             	mov	a,>(0Ah)
  8683  6040  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  8684  6042  71 80             	or	f, 0x80	;select multiple RAM page mode
  8685                          	
  8686  6044  7C 6A28           	xcall	___awmod
  8687                          	
  8688  6047  64                	asl	a
  8689  6048  64                	asl	a
  8690  6049  01 00             	add	a,<__npowers_
  8691  604B  5C                	mov	x,a
  8692  604C  50 7C             	mov	a,>__npowers_
  8693  604E  08                	push	a
  8694  604F  28                	romx
  8695  6050  70 CF             	and	f, 0xCF   ;select user reg space
  8696  6052  62 D0 00          	mov	reg[CUR_PP],0
  8697  6055  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  8698  6057  18                	pop	a
  8699  6058  75                	inc	x
  8700  6059  08                	push	a
  8701  605A  28                	romx
  8702  605B  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  8703  605D  18                	pop	a
  8704  605E  75                	inc	x
  8705  605F  08                	push	a
  8706  6060  28                	romx
  8707  6061  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  8708  6063  18                	pop	a
  8709  6064  75                	inc	x
  8710  6065  28                	romx
  8711  6066  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  8712  6068  51 47             	mov	a,[0+((_fround$3287)^0x0)]
  8713  606A  53 5E             	mov	[0+((?___flmul)^0x0)],a
  8714  606C  51 48             	mov	a,[1+((_fround$3287)^0x0)]
  8715  606E  53 5F             	mov	[1+((?___flmul)^0x0)],a
  8716  6070  51 49             	mov	a,[2+((_fround$3287)^0x0)]
  8717  6072  53 60             	mov	[2+((?___flmul)^0x0)],a
  8718  6074  51 4A             	mov	a,[3+((_fround$3287)^0x0)]
  8719  6076  53 61             	mov	[3+((?___flmul)^0x0)],a
  8720  6078  71 80             	or	f, 0x80	;select multiple RAM page mode
  8721                          	
  8722  607A  7C 7201           	xcall	___flmul
  8723                          	
  8724  607D  70 CF             	and	f, 0xCF   ;select user reg space
  8725  607F  62 D0 00          	mov	reg[CUR_PP],0
  8726  6082  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  8727  6084  53 5E             	mov	[0+((?___flmul)^0x0)],a
  8728  6086  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  8729  6088  53 5F             	mov	[1+((?___flmul)^0x0)],a
  8730  608A  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  8731  608C  53 60             	mov	[2+((?___flmul)^0x0)],a
  8732  608E  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  8733  6090  53 61             	mov	[3+((?___flmul)^0x0)],a
  8734  6092  50 3F             	mov	a,<(0x3f000000>>24)
  8735  6094  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  8736  6096  50 00             	mov	a,<(0x3f000000>>16)
  8737  6098  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  8738  609A  50 00             	mov	a,<(0x3f000000>>8)
  8739  609C  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  8740  609E  50 00             	mov	a,<(0x3f000000)
  8741  60A0  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  8742  60A2  71 80             	or	f, 0x80	;select multiple RAM page mode
  8743                          	
  8744  60A4  7C 7201           	xcall	___flmul
  8745                          	
  8746  60A7  70 CF             	and	f, 0xCF   ;select user reg space
  8747  60A9  62 D0 00          	mov	reg[CUR_PP],0
  8748  60AC  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  8749  60AE  53 41             	mov	[0+((?_fround)^0x0)],a
  8750  60B0  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  8751  60B2  53 42             	mov	[1+((?_fround)^0x0)],a
  8752  60B4  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  8753  60B6  53 43             	mov	[2+((?_fround)^0x0)],a
  8754  60B8  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  8755  60BA  53 44             	mov	[3+((?_fround)^0x0)],a
  8756  60BC  7D 61E8           	xjmp	l135
  8757                          	line	403
  8758                          ;			
  8759  60BF                    l136:	
  8760                          ;doprnt.c: 403: else if(prec > 10)
  8761  60BF  70 CF             	and	f, 0xCF   ;select user reg space
  8762  60C1  62 D0 00          	mov	reg[CUR_PP],0
  8763  60C4  51 41             	mov	a,[0+((fround@prec)^0x0)]
  8764  60C6  39 0B             	cmp	a,<((0Bh))
  8765  60C8  C0CF              	jc	l137
  8766                          	line	404
  8767  60CA  70 CF             	and	f, 0xCF   ;select user reg space
  8768  60CC  62 D0 00          	mov	reg[CUR_PP],0
  8769  60CF  51 41             	mov	a,[0+((fround@prec)^0x0)]
  8770  60D1  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  8771  60D3  50 00             	mov	a,0
  8772  60D5  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  8773  60D7  50 0A             	mov	a,<(0Ah)
  8774  60D9  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  8775  60DB  50 00             	mov	a,>(0Ah)
  8776  60DD  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  8777  60DF  71 80             	or	f, 0x80	;select multiple RAM page mode
  8778                          	
  8779  60E1  7C 6D2D           	xcall	___awdiv
  8780                          	
  8781  60E4  70 CF             	and	f, 0xCF   ;select user reg space
  8782  60E6  62 D0 00          	mov	reg[CUR_PP],0
  8783  60E9  5A 45             	mov	[((_fround$3292)^0x0)],x
  8784  60EB  53 46             	mov	[((_fround$3292+1)^0x0)],a
  8785  60ED  70 CF             	and	f, 0xCF   ;select user reg space
  8786  60EF  62 D0 00          	mov	reg[CUR_PP],0
  8787  60F2  51 41             	mov	a,[0+((fround@prec)^0x0)]
  8788  60F4  53 5F             	mov	[1+((?___awmod)^0x0)],a
  8789  60F6  50 00             	mov	a,0
  8790  60F8  53 5E             	mov	[0+((?___awmod)^0x0)],a
  8791  60FA  50 0A             	mov	a,<(0Ah)
  8792  60FC  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  8793  60FE  50 00             	mov	a,>(0Ah)
  8794  6100  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  8795  6102  71 80             	or	f, 0x80	;select multiple RAM page mode
  8796                          	
  8797  6104  7C 6A28           	xcall	___awmod
  8798                          	
  8799  6107  64                	asl	a
  8800  6108  64                	asl	a
  8801  6109  01 00             	add	a,<__npowers_
  8802  610B  5C                	mov	x,a
  8803  610C  50 7C             	mov	a,>__npowers_
  8804  610E  08                	push	a
  8805  610F  28                	romx
  8806  6110  70 CF             	and	f, 0xCF   ;select user reg space
  8807  6112  62 D0 00          	mov	reg[CUR_PP],0
  8808  6115  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  8809  6117  18                	pop	a
  8810  6118  75                	inc	x
  8811  6119  08                	push	a
  8812  611A  28                	romx
  8813  611B  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  8814  611D  18                	pop	a
  8815  611E  75                	inc	x
  8816  611F  08                	push	a
  8817  6120  28                	romx
  8818  6121  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  8819  6123  18                	pop	a
  8820  6124  75                	inc	x
  8821  6125  28                	romx
  8822  6126  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  8823  6128  50 01             	mov	a,<((01h))
  8824  612A  01 45             	add	a,<(8000h+_fround$3292)
  8825  612C  5C                	mov	x,a
  8826  612D  50 80             	mov	a,>(8000h+_fround$3292)
  8827  612F  60 D3             	mov	reg[0xd3],a
  8828  6131  52 00             	mov	a,[x+0]
  8829  6133  64                	asl	a
  8830  6134  64                	asl	a
  8831  6135  01 24             	add	a,<((024h))
  8832  6137  01 00             	add	a,<__npowers_
  8833  6139  5C                	mov	x,a
  8834  613A  50 7C             	mov	a,>__npowers_
  8835  613C  08                	push	a
  8836  613D  28                	romx
  8837  613E  53 5E             	mov	[0+((?___flmul)^0x0)],a
  8838  6140  18                	pop	a
  8839  6141  75                	inc	x
  8840  6142  08                	push	a
  8841  6143  28                	romx
  8842  6144  53 5F             	mov	[1+((?___flmul)^0x0)],a
  8843  6146  18                	pop	a
  8844  6147  75                	inc	x
  8845  6148  08                	push	a
  8846  6149  28                	romx
  8847  614A  53 60             	mov	[2+((?___flmul)^0x0)],a
  8848  614C  18                	pop	a
  8849  614D  75                	inc	x
  8850  614E  28                	romx
  8851  614F  53 61             	mov	[3+((?___flmul)^0x0)],a
  8852  6151  71 80             	or	f, 0x80	;select multiple RAM page mode
  8853                          	
  8854  6153  7C 7201           	xcall	___flmul
  8855                          	
  8856  6156  70 CF             	and	f, 0xCF   ;select user reg space
  8857  6158  62 D0 00          	mov	reg[CUR_PP],0
  8858  615B  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  8859  615D  53 5E             	mov	[0+((?___flmul)^0x0)],a
  8860  615F  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  8861  6161  53 5F             	mov	[1+((?___flmul)^0x0)],a
  8862  6163  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  8863  6165  53 60             	mov	[2+((?___flmul)^0x0)],a
  8864  6167  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  8865  6169  53 61             	mov	[3+((?___flmul)^0x0)],a
  8866  616B  50 3F             	mov	a,<(0x3f000000>>24)
  8867  616D  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  8868  616F  50 00             	mov	a,<(0x3f000000>>16)
  8869  6171  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  8870  6173  50 00             	mov	a,<(0x3f000000>>8)
  8871  6175  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  8872  6177  50 00             	mov	a,<(0x3f000000)
  8873  6179  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  8874  617B  71 80             	or	f, 0x80	;select multiple RAM page mode
  8875                          	
  8876  617D  7C 7201           	xcall	___flmul
  8877                          	
  8878  6180  70 CF             	and	f, 0xCF   ;select user reg space
  8879  6182  62 D0 00          	mov	reg[CUR_PP],0
  8880  6185  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  8881  6187  53 41             	mov	[0+((?_fround)^0x0)],a
  8882  6189  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  8883  618B  53 42             	mov	[1+((?_fround)^0x0)],a
  8884  618D  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  8885  618F  53 43             	mov	[2+((?_fround)^0x0)],a
  8886  6191  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  8887  6193  53 44             	mov	[3+((?_fround)^0x0)],a
  8888  6195  7D 61E8           	xjmp	l135
  8889                          	line	405
  8890                          ;			
  8891  6198                    l137:	
  8892  6198  70 CF             	and	f, 0xCF   ;select user reg space
  8893  619A  62 D0 00          	mov	reg[CUR_PP],0
  8894  619D  51 41             	mov	a,[0+((fround@prec)^0x0)]
  8895  619F  64                	asl	a
  8896  61A0  64                	asl	a
  8897  61A1  01 00             	add	a,<__npowers_
  8898  61A3  5C                	mov	x,a
  8899  61A4  50 7C             	mov	a,>__npowers_
  8900  61A6  08                	push	a
  8901  61A7  28                	romx
  8902  61A8  53 5E             	mov	[0+((?___flmul)^0x0)],a
  8903  61AA  18                	pop	a
  8904  61AB  75                	inc	x
  8905  61AC  08                	push	a
  8906  61AD  28                	romx
  8907  61AE  53 5F             	mov	[1+((?___flmul)^0x0)],a
  8908  61B0  18                	pop	a
  8909  61B1  75                	inc	x
  8910  61B2  08                	push	a
  8911  61B3  28                	romx
  8912  61B4  53 60             	mov	[2+((?___flmul)^0x0)],a
  8913  61B6  18                	pop	a
  8914  61B7  75                	inc	x
  8915  61B8  28                	romx
  8916  61B9  53 61             	mov	[3+((?___flmul)^0x0)],a
  8917  61BB  50 3F             	mov	a,<(0x3f000000>>24)
  8918  61BD  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  8919  61BF  50 00             	mov	a,<(0x3f000000>>16)
  8920  61C1  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  8921  61C3  50 00             	mov	a,<(0x3f000000>>8)
  8922  61C5  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  8923  61C7  50 00             	mov	a,<(0x3f000000)
  8924  61C9  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  8925  61CB  71 80             	or	f, 0x80	;select multiple RAM page mode
  8926                          	
  8927  61CD  7C 7201           	xcall	___flmul
  8928                          	
  8929  61D0  70 CF             	and	f, 0xCF   ;select user reg space
  8930  61D2  62 D0 00          	mov	reg[CUR_PP],0
  8931  61D5  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  8932  61D7  53 41             	mov	[0+((?_fround)^0x0)],a
  8933  61D9  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  8934  61DB  53 42             	mov	[1+((?_fround)^0x0)],a
  8935  61DD  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  8936  61DF  53 43             	mov	[2+((?_fround)^0x0)],a
  8937  61E1  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  8938  61E3  53 44             	mov	[3+((?_fround)^0x0)],a
  8939  61E5  7D 61E8           	xjmp	l135
  8940                          	line	406
  8941                          ;doprnt.c: 406: }
  8942  61E8                    l135:
  8943                          ;			
  8944  61E8  70 CF             	and	f, 0xCF   ;select user reg space
  8945                          	
  8946  61EA  7F                	ret
  8947                          GLOBAL __end_of_fround
  8948  61EB                    	__end_of_fround:
  8949                          	FNSIZE	_fround,13,4
  8950                          ; =============== function _fround ends ============
  8951                          
  8952                          	signat	_fround,4220
  8953                          	global	_scale
  8954                          	global	??_scale
  8955                          	global	?_scale
  8956                          	psect	text
  8957                          
  8958                          ; *************** function _scale *****************
  8959                          ; Defined at:
  8960                          ;		line 414 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  8961                          ; Parameters:
  8962                          ;		scl         	offs:   0	type: char 
  8963                          ; Auto variables:
  8964                          ;		None
  8965                          ; Return value:
  8966                          ;		type: char 
  8967                          ;		size: 4
  8968                          ; Registers used:
  8969                          ;		a, x, CUR_PP, mret
  8970                          ; Tracked objects:
  8971                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8972                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8973                          ;		Unchanged: 
  8974                          ; Data sizes:
  8975                          ;		Autos:   24
  8976                          ;		Params:   4
  8977                          ;		Temp:     1
  8978                          ;		Total:   29
  8979                          ; This function calls:
  8980                          ;		___awdiv
  8981                          ;		___awmod
  8982                          ;		___flmul
  8983                          ; This function is called by:
  8984                          ;		_printf
  8985                          ; This function uses a non-reentrant model
  8986                          ; 
  8987                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  8988                          	line	414
  8989  045C                    	__size_of_scale	equ	__end_of_scale-_scale
  8990                          ;doprnt.c: 412: static double
  8991                          ;doprnt.c: 413: scale(signed char scl)
  8992                          ;doprnt.c: 414: {
  8993                          ;			
  8994  61EB                    _scale:	
  8995                          	opt	disable
  8996                          	line	416
  8997                          ;doprnt.c: 416: if(scl < 0) {
  8998  61EB  70 CF             	and	f, 0xCF   ;select user reg space
  8999  61ED  62 D0 00          	mov	reg[CUR_PP],0
  9000  61F0  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9001  61F2  31 80             	xor	a,80h
  9002  61F4  39 80             	cmp	a,(0)^80h
  9003  61F6  D22A              	jnc	l140
  9004                          	line	417
  9005                          ;doprnt.c: 417: scl = -scl;
  9006  61F8  70 CF             	and	f, 0xCF   ;select user reg space
  9007  61FA  62 D0 00          	mov	reg[CUR_PP],0
  9008  61FD  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9009  61FF  73                	cpl	a
  9010  6200  74                	inc	a
  9011  6201  53 41             	mov	[0+((scale@scl)^0x0)],a
  9012                          	line	418
  9013                          ;doprnt.c: 418: if(scl>=110)
  9014  6203  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9015  6205  31 80             	xor	a,80h
  9016  6207  39 EE             	cmp	a,(06Eh)^80h
  9017  6209  C13E              	jc	l141
  9018                          	line	419
  9019  620B  70 CF             	and	f, 0xCF   ;select user reg space
  9020  620D  62 D0 00          	mov	reg[CUR_PP],0
  9021  6210  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9022  6212  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  9023  6214  6A                	rlc	a
  9024  6215  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  9025  6217  1C 5E             	sbb	[0+((?___awdiv)^0x0)],a
  9026  6219  50 64             	mov	a,<(064h)
  9027  621B  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  9028  621D  50 00             	mov	a,>(064h)
  9029  621F  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  9030  6221  71 80             	or	f, 0x80	;select multiple RAM page mode
  9031                          	
  9032  6223  7C 6D2D           	xcall	___awdiv
  9033                          	
  9034  6226  70 CF             	and	f, 0xCF   ;select user reg space
  9035  6228  62 D0 00          	mov	reg[CUR_PP],0
  9036  622B  5A 5B             	mov	[((_scale$3300)^0x0)],x
  9037  622D  53 5C             	mov	[((_scale$3300+1)^0x0)],a
  9038  622F  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9039  6231  53 5F             	mov	[1+((?___awmod)^0x0)],a
  9040  6233  6A                	rlc	a
  9041  6234  53 5E             	mov	[0+((?___awmod)^0x0)],a
  9042  6236  1C 5E             	sbb	[0+((?___awmod)^0x0)],a
  9043  6238  50 64             	mov	a,<(064h)
  9044  623A  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  9045  623C  50 00             	mov	a,>(064h)
  9046  623E  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  9047  6240  71 80             	or	f, 0x80	;select multiple RAM page mode
  9048                          	
  9049  6242  7C 6A28           	xcall	___awmod
  9050                          	
  9051  6245  70 CF             	and	f, 0xCF   ;select user reg space
  9052  6247  62 D0 00          	mov	reg[CUR_PP],0
  9053  624A  5A 59             	mov	[((_scale$3301)^0x0)],x
  9054  624C  53 5A             	mov	[((_scale$3301+1)^0x0)],a
  9055  624E  50 0A             	mov	a,<(0Ah)
  9056  6250  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  9057  6252  50 00             	mov	a,>(0Ah)
  9058  6254  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  9059  6256  51 59             	mov	a,[0+((_scale$3301)^0x0)]
  9060  6258  08                	push	a
  9061  6259  51 5A             	mov	a,[1+((_scale$3301)^0x0)]
  9062  625B  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  9063  625D  18                	pop	a
  9064  625E  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  9065  6260  71 80             	or	f, 0x80	;select multiple RAM page mode
  9066                          	
  9067  6262  7C 6D2D           	xcall	___awdiv
  9068                          	
  9069  6265  70 CF             	and	f, 0xCF   ;select user reg space
  9070  6267  62 D0 00          	mov	reg[CUR_PP],0
  9071  626A  5A 57             	mov	[((_scale$3302)^0x0)],x
  9072  626C  53 58             	mov	[((_scale$3302+1)^0x0)],a
  9073  626E  50 01             	mov	a,<((01h))
  9074  6270  01 5B             	add	a,<(8000h+_scale$3300)
  9075  6272  5C                	mov	x,a
  9076  6273  50 80             	mov	a,>(8000h+_scale$3300)
  9077  6275  70 CF             	and	f, 0xCF   ;select user reg space
  9078  6277  60 D3             	mov	reg[0xd3],a
  9079  6279  52 00             	mov	a,[x+0]
  9080  627B  64                	asl	a
  9081  627C  64                	asl	a
  9082  627D  01 48             	add	a,<((048h))
  9083  627F  01 00             	add	a,<__npowers_
  9084  6281  5C                	mov	x,a
  9085  6282  50 7C             	mov	a,>__npowers_
  9086  6284  08                	push	a
  9087  6285  28                	romx
  9088  6286  62 D0 00          	mov	reg[CUR_PP],0
  9089  6289  53 5E             	mov	[0+((?___flmul)^0x0)],a
  9090  628B  18                	pop	a
  9091  628C  75                	inc	x
  9092  628D  08                	push	a
  9093  628E  28                	romx
  9094  628F  53 5F             	mov	[1+((?___flmul)^0x0)],a
  9095  6291  18                	pop	a
  9096  6292  75                	inc	x
  9097  6293  08                	push	a
  9098  6294  28                	romx
  9099  6295  53 60             	mov	[2+((?___flmul)^0x0)],a
  9100  6297  18                	pop	a
  9101  6298  75                	inc	x
  9102  6299  28                	romx
  9103  629A  53 61             	mov	[3+((?___flmul)^0x0)],a
  9104  629C  50 01             	mov	a,<((01h))
  9105  629E  01 57             	add	a,<(8000h+_scale$3302)
  9106  62A0  5C                	mov	x,a
  9107  62A1  50 80             	mov	a,>(8000h+_scale$3302)
  9108  62A3  60 D3             	mov	reg[0xd3],a
  9109  62A5  52 00             	mov	a,[x+0]
  9110  62A7  64                	asl	a
  9111  62A8  64                	asl	a
  9112  62A9  01 24             	add	a,<((024h))
  9113  62AB  01 00             	add	a,<__npowers_
  9114  62AD  5C                	mov	x,a
  9115  62AE  50 7C             	mov	a,>__npowers_
  9116  62B0  08                	push	a
  9117  62B1  28                	romx
  9118  62B2  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  9119  62B4  18                	pop	a
  9120  62B5  75                	inc	x
  9121  62B6  08                	push	a
  9122  62B7  28                	romx
  9123  62B8  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  9124  62BA  18                	pop	a
  9125  62BB  75                	inc	x
  9126  62BC  08                	push	a
  9127  62BD  28                	romx
  9128  62BE  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  9129  62C0  18                	pop	a
  9130  62C1  75                	inc	x
  9131  62C2  28                	romx
  9132  62C3  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  9133  62C5  71 80             	or	f, 0x80	;select multiple RAM page mode
  9134                          	
  9135  62C7  7C 7201           	xcall	___flmul
  9136                          	
  9137  62CA  70 CF             	and	f, 0xCF   ;select user reg space
  9138  62CC  62 D0 00          	mov	reg[CUR_PP],0
  9139  62CF  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  9140  62D1  53 53             	mov	[0+((_scale$3303)^0x0)],a
  9141  62D3  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  9142  62D5  53 54             	mov	[1+((_scale$3303)^0x0)],a
  9143  62D7  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  9144  62D9  53 55             	mov	[2+((_scale$3303)^0x0)],a
  9145  62DB  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  9146  62DD  53 56             	mov	[3+((_scale$3303)^0x0)],a
  9147  62DF  70 CF             	and	f, 0xCF   ;select user reg space
  9148  62E1  62 D0 00          	mov	reg[CUR_PP],0
  9149  62E4  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9150  62E6  53 5F             	mov	[1+((?___awmod)^0x0)],a
  9151  62E8  6A                	rlc	a
  9152  62E9  53 5E             	mov	[0+((?___awmod)^0x0)],a
  9153  62EB  1C 5E             	sbb	[0+((?___awmod)^0x0)],a
  9154  62ED  50 0A             	mov	a,<(0Ah)
  9155  62EF  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  9156  62F1  50 00             	mov	a,>(0Ah)
  9157  62F3  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  9158  62F5  71 80             	or	f, 0x80	;select multiple RAM page mode
  9159                          	
  9160  62F7  7C 6A28           	xcall	___awmod
  9161                          	
  9162  62FA  64                	asl	a
  9163  62FB  64                	asl	a
  9164  62FC  01 00             	add	a,<__npowers_
  9165  62FE  5C                	mov	x,a
  9166  62FF  50 7C             	mov	a,>__npowers_
  9167  6301  08                	push	a
  9168  6302  28                	romx
  9169  6303  70 CF             	and	f, 0xCF   ;select user reg space
  9170  6305  62 D0 00          	mov	reg[CUR_PP],0
  9171  6308  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  9172  630A  18                	pop	a
  9173  630B  75                	inc	x
  9174  630C  08                	push	a
  9175  630D  28                	romx
  9176  630E  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  9177  6310  18                	pop	a
  9178  6311  75                	inc	x
  9179  6312  08                	push	a
  9180  6313  28                	romx
  9181  6314  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  9182  6316  18                	pop	a
  9183  6317  75                	inc	x
  9184  6318  28                	romx
  9185  6319  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  9186  631B  51 53             	mov	a,[0+((_scale$3303)^0x0)]
  9187  631D  53 5E             	mov	[0+((?___flmul)^0x0)],a
  9188  631F  51 54             	mov	a,[1+((_scale$3303)^0x0)]
  9189  6321  53 5F             	mov	[1+((?___flmul)^0x0)],a
  9190  6323  51 55             	mov	a,[2+((_scale$3303)^0x0)]
  9191  6325  53 60             	mov	[2+((?___flmul)^0x0)],a
  9192  6327  51 56             	mov	a,[3+((_scale$3303)^0x0)]
  9193  6329  53 61             	mov	[3+((?___flmul)^0x0)],a
  9194  632B  71 80             	or	f, 0x80	;select multiple RAM page mode
  9195                          	
  9196  632D  7C 7201           	xcall	___flmul
  9197                          	
  9198  6330  70 CF             	and	f, 0xCF   ;select user reg space
  9199  6332  62 D0 00          	mov	reg[CUR_PP],0
  9200  6335  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  9201  6337  53 41             	mov	[0+((?_scale)^0x0)],a
  9202  6339  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  9203  633B  53 42             	mov	[1+((?_scale)^0x0)],a
  9204  633D  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  9205  633F  53 43             	mov	[2+((?_scale)^0x0)],a
  9206  6341  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  9207  6343  53 44             	mov	[3+((?_scale)^0x0)],a
  9208  6345  7D 6644           	xjmp	l139
  9209                          	line	420
  9210                          ;			
  9211  6348                    l141:	
  9212                          ;doprnt.c: 420: else if(scl > 10)
  9213  6348  70 CF             	and	f, 0xCF   ;select user reg space
  9214  634A  62 D0 00          	mov	reg[CUR_PP],0
  9215  634D  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9216  634F  31 80             	xor	a,80h
  9217  6351  39 8B             	cmp	a,(0Bh)^80h
  9218  6353  C0A7              	jc	l142
  9219                          	line	421
  9220  6355  70 CF             	and	f, 0xCF   ;select user reg space
  9221  6357  62 D0 00          	mov	reg[CUR_PP],0
  9222  635A  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9223  635C  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  9224  635E  6A                	rlc	a
  9225  635F  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  9226  6361  1C 5E             	sbb	[0+((?___awdiv)^0x0)],a
  9227  6363  50 0A             	mov	a,<(0Ah)
  9228  6365  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  9229  6367  50 00             	mov	a,>(0Ah)
  9230  6369  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  9231  636B  71 80             	or	f, 0x80	;select multiple RAM page mode
  9232                          	
  9233  636D  7C 6D2D           	xcall	___awdiv
  9234                          	
  9235  6370  70 CF             	and	f, 0xCF   ;select user reg space
  9236  6372  62 D0 00          	mov	reg[CUR_PP],0
  9237  6375  5A 51             	mov	[((_scale$3307)^0x0)],x
  9238  6377  53 52             	mov	[((_scale$3307+1)^0x0)],a
  9239  6379  70 CF             	and	f, 0xCF   ;select user reg space
  9240  637B  62 D0 00          	mov	reg[CUR_PP],0
  9241  637E  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9242  6380  53 5F             	mov	[1+((?___awmod)^0x0)],a
  9243  6382  6A                	rlc	a
  9244  6383  53 5E             	mov	[0+((?___awmod)^0x0)],a
  9245  6385  1C 5E             	sbb	[0+((?___awmod)^0x0)],a
  9246  6387  50 0A             	mov	a,<(0Ah)
  9247  6389  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  9248  638B  50 00             	mov	a,>(0Ah)
  9249  638D  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  9250  638F  71 80             	or	f, 0x80	;select multiple RAM page mode
  9251                          	
  9252  6391  7C 6A28           	xcall	___awmod
  9253                          	
  9254  6394  64                	asl	a
  9255  6395  64                	asl	a
  9256  6396  01 00             	add	a,<__npowers_
  9257  6398  5C                	mov	x,a
  9258  6399  50 7C             	mov	a,>__npowers_
  9259  639B  08                	push	a
  9260  639C  28                	romx
  9261  639D  70 CF             	and	f, 0xCF   ;select user reg space
  9262  639F  62 D0 00          	mov	reg[CUR_PP],0
  9263  63A2  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  9264  63A4  18                	pop	a
  9265  63A5  75                	inc	x
  9266  63A6  08                	push	a
  9267  63A7  28                	romx
  9268  63A8  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  9269  63AA  18                	pop	a
  9270  63AB  75                	inc	x
  9271  63AC  08                	push	a
  9272  63AD  28                	romx
  9273  63AE  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  9274  63B0  18                	pop	a
  9275  63B1  75                	inc	x
  9276  63B2  28                	romx
  9277  63B3  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  9278  63B5  50 01             	mov	a,<((01h))
  9279  63B7  01 51             	add	a,<(8000h+_scale$3307)
  9280  63B9  5C                	mov	x,a
  9281  63BA  50 80             	mov	a,>(8000h+_scale$3307)
  9282  63BC  60 D3             	mov	reg[0xd3],a
  9283  63BE  52 00             	mov	a,[x+0]
  9284  63C0  64                	asl	a
  9285  63C1  64                	asl	a
  9286  63C2  01 24             	add	a,<((024h))
  9287  63C4  01 00             	add	a,<__npowers_
  9288  63C6  5C                	mov	x,a
  9289  63C7  50 7C             	mov	a,>__npowers_
  9290  63C9  08                	push	a
  9291  63CA  28                	romx
  9292  63CB  53 5E             	mov	[0+((?___flmul)^0x0)],a
  9293  63CD  18                	pop	a
  9294  63CE  75                	inc	x
  9295  63CF  08                	push	a
  9296  63D0  28                	romx
  9297  63D1  53 5F             	mov	[1+((?___flmul)^0x0)],a
  9298  63D3  18                	pop	a
  9299  63D4  75                	inc	x
  9300  63D5  08                	push	a
  9301  63D6  28                	romx
  9302  63D7  53 60             	mov	[2+((?___flmul)^0x0)],a
  9303  63D9  18                	pop	a
  9304  63DA  75                	inc	x
  9305  63DB  28                	romx
  9306  63DC  53 61             	mov	[3+((?___flmul)^0x0)],a
  9307  63DE  71 80             	or	f, 0x80	;select multiple RAM page mode
  9308                          	
  9309  63E0  7C 7201           	xcall	___flmul
  9310                          	
  9311  63E3  70 CF             	and	f, 0xCF   ;select user reg space
  9312  63E5  62 D0 00          	mov	reg[CUR_PP],0
  9313  63E8  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  9314  63EA  53 41             	mov	[0+((?_scale)^0x0)],a
  9315  63EC  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  9316  63EE  53 42             	mov	[1+((?_scale)^0x0)],a
  9317  63F0  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  9318  63F2  53 43             	mov	[2+((?_scale)^0x0)],a
  9319  63F4  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  9320  63F6  53 44             	mov	[3+((?_scale)^0x0)],a
  9321  63F8  7D 6644           	xjmp	l139
  9322                          	line	422
  9323                          ;			
  9324  63FB                    l142:	
  9325  63FB  70 CF             	and	f, 0xCF   ;select user reg space
  9326  63FD  62 D0 00          	mov	reg[CUR_PP],0
  9327  6400  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9328  6402  64                	asl	a
  9329  6403  64                	asl	a
  9330  6404  01 00             	add	a,<__npowers_
  9331  6406  5C                	mov	x,a
  9332  6407  50 7C             	mov	a,>__npowers_
  9333  6409  08                	push	a
  9334  640A  28                	romx
  9335  640B  53 41             	mov	[0+((?_scale)^0x0)],a
  9336  640D  18                	pop	a
  9337  640E  75                	inc	x
  9338  640F  08                	push	a
  9339  6410  28                	romx
  9340  6411  53 42             	mov	[1+((?_scale)^0x0)],a
  9341  6413  18                	pop	a
  9342  6414  75                	inc	x
  9343  6415  08                	push	a
  9344  6416  28                	romx
  9345  6417  53 43             	mov	[2+((?_scale)^0x0)],a
  9346  6419  18                	pop	a
  9347  641A  75                	inc	x
  9348  641B  28                	romx
  9349  641C  53 44             	mov	[3+((?_scale)^0x0)],a
  9350  641E  7D 6644           	xjmp	l139
  9351                          	line	423
  9352                          ;			
  9353  6421                    l140:	
  9354                          	line	424
  9355                          ;doprnt.c: 423: }
  9356                          ;doprnt.c: 424: if(scl>=110)
  9357  6421  70 CF             	and	f, 0xCF   ;select user reg space
  9358  6423  62 D0 00          	mov	reg[CUR_PP],0
  9359  6426  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9360  6428  31 80             	xor	a,80h
  9361  642A  39 EE             	cmp	a,(06Eh)^80h
  9362  642C  C13E              	jc	l144
  9363                          	line	425
  9364  642E  70 CF             	and	f, 0xCF   ;select user reg space
  9365  6430  62 D0 00          	mov	reg[CUR_PP],0
  9366  6433  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9367  6435  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  9368  6437  6A                	rlc	a
  9369  6438  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  9370  643A  1C 5E             	sbb	[0+((?___awdiv)^0x0)],a
  9371  643C  50 64             	mov	a,<(064h)
  9372  643E  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  9373  6440  50 00             	mov	a,>(064h)
  9374  6442  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  9375  6444  71 80             	or	f, 0x80	;select multiple RAM page mode
  9376                          	
  9377  6446  7C 6D2D           	xcall	___awdiv
  9378                          	
  9379  6449  70 CF             	and	f, 0xCF   ;select user reg space
  9380  644B  62 D0 00          	mov	reg[CUR_PP],0
  9381  644E  5A 4F             	mov	[((_scale$3314)^0x0)],x
  9382  6450  53 50             	mov	[((_scale$3314+1)^0x0)],a
  9383  6452  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9384  6454  53 5F             	mov	[1+((?___awmod)^0x0)],a
  9385  6456  6A                	rlc	a
  9386  6457  53 5E             	mov	[0+((?___awmod)^0x0)],a
  9387  6459  1C 5E             	sbb	[0+((?___awmod)^0x0)],a
  9388  645B  50 64             	mov	a,<(064h)
  9389  645D  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  9390  645F  50 00             	mov	a,>(064h)
  9391  6461  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  9392  6463  71 80             	or	f, 0x80	;select multiple RAM page mode
  9393                          	
  9394  6465  7C 6A28           	xcall	___awmod
  9395                          	
  9396  6468  70 CF             	and	f, 0xCF   ;select user reg space
  9397  646A  62 D0 00          	mov	reg[CUR_PP],0
  9398  646D  5A 4D             	mov	[((_scale$3315)^0x0)],x
  9399  646F  53 4E             	mov	[((_scale$3315+1)^0x0)],a
  9400  6471  50 0A             	mov	a,<(0Ah)
  9401  6473  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  9402  6475  50 00             	mov	a,>(0Ah)
  9403  6477  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  9404  6479  51 4D             	mov	a,[0+((_scale$3315)^0x0)]
  9405  647B  08                	push	a
  9406  647C  51 4E             	mov	a,[1+((_scale$3315)^0x0)]
  9407  647E  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  9408  6480  18                	pop	a
  9409  6481  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  9410  6483  71 80             	or	f, 0x80	;select multiple RAM page mode
  9411                          	
  9412  6485  7C 6D2D           	xcall	___awdiv
  9413                          	
  9414  6488  70 CF             	and	f, 0xCF   ;select user reg space
  9415  648A  62 D0 00          	mov	reg[CUR_PP],0
  9416  648D  5A 4B             	mov	[((_scale$3316)^0x0)],x
  9417  648F  53 4C             	mov	[((_scale$3316+1)^0x0)],a
  9418  6491  50 01             	mov	a,<((01h))
  9419  6493  01 4F             	add	a,<(8000h+_scale$3314)
  9420  6495  5C                	mov	x,a
  9421  6496  50 80             	mov	a,>(8000h+_scale$3314)
  9422  6498  70 CF             	and	f, 0xCF   ;select user reg space
  9423  649A  60 D3             	mov	reg[0xd3],a
  9424  649C  52 00             	mov	a,[x+0]
  9425  649E  64                	asl	a
  9426  649F  64                	asl	a
  9427  64A0  01 48             	add	a,<((048h))
  9428  64A2  01 34             	add	a,<__powers_
  9429  64A4  5C                	mov	x,a
  9430  64A5  50 7C             	mov	a,>__powers_
  9431  64A7  08                	push	a
  9432  64A8  28                	romx
  9433  64A9  62 D0 00          	mov	reg[CUR_PP],0
  9434  64AC  53 5E             	mov	[0+((?___flmul)^0x0)],a
  9435  64AE  18                	pop	a
  9436  64AF  75                	inc	x
  9437  64B0  08                	push	a
  9438  64B1  28                	romx
  9439  64B2  53 5F             	mov	[1+((?___flmul)^0x0)],a
  9440  64B4  18                	pop	a
  9441  64B5  75                	inc	x
  9442  64B6  08                	push	a
  9443  64B7  28                	romx
  9444  64B8  53 60             	mov	[2+((?___flmul)^0x0)],a
  9445  64BA  18                	pop	a
  9446  64BB  75                	inc	x
  9447  64BC  28                	romx
  9448  64BD  53 61             	mov	[3+((?___flmul)^0x0)],a
  9449  64BF  50 01             	mov	a,<((01h))
  9450  64C1  01 4B             	add	a,<(8000h+_scale$3316)
  9451  64C3  5C                	mov	x,a
  9452  64C4  50 80             	mov	a,>(8000h+_scale$3316)
  9453  64C6  60 D3             	mov	reg[0xd3],a
  9454  64C8  52 00             	mov	a,[x+0]
  9455  64CA  64                	asl	a
  9456  64CB  64                	asl	a
  9457  64CC  01 24             	add	a,<((024h))
  9458  64CE  01 34             	add	a,<__powers_
  9459  64D0  5C                	mov	x,a
  9460  64D1  50 7C             	mov	a,>__powers_
  9461  64D3  08                	push	a
  9462  64D4  28                	romx
  9463  64D5  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  9464  64D7  18                	pop	a
  9465  64D8  75                	inc	x
  9466  64D9  08                	push	a
  9467  64DA  28                	romx
  9468  64DB  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  9469  64DD  18                	pop	a
  9470  64DE  75                	inc	x
  9471  64DF  08                	push	a
  9472  64E0  28                	romx
  9473  64E1  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  9474  64E3  18                	pop	a
  9475  64E4  75                	inc	x
  9476  64E5  28                	romx
  9477  64E6  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  9478  64E8  71 80             	or	f, 0x80	;select multiple RAM page mode
  9479                          	
  9480  64EA  7C 7201           	xcall	___flmul
  9481                          	
  9482  64ED  70 CF             	and	f, 0xCF   ;select user reg space
  9483  64EF  62 D0 00          	mov	reg[CUR_PP],0
  9484  64F2  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  9485  64F4  53 47             	mov	[0+((_scale$3317)^0x0)],a
  9486  64F6  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  9487  64F8  53 48             	mov	[1+((_scale$3317)^0x0)],a
  9488  64FA  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  9489  64FC  53 49             	mov	[2+((_scale$3317)^0x0)],a
  9490  64FE  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  9491  6500  53 4A             	mov	[3+((_scale$3317)^0x0)],a
  9492  6502  70 CF             	and	f, 0xCF   ;select user reg space
  9493  6504  62 D0 00          	mov	reg[CUR_PP],0
  9494  6507  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9495  6509  53 5F             	mov	[1+((?___awmod)^0x0)],a
  9496  650B  6A                	rlc	a
  9497  650C  53 5E             	mov	[0+((?___awmod)^0x0)],a
  9498  650E  1C 5E             	sbb	[0+((?___awmod)^0x0)],a
  9499  6510  50 0A             	mov	a,<(0Ah)
  9500  6512  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  9501  6514  50 00             	mov	a,>(0Ah)
  9502  6516  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  9503  6518  71 80             	or	f, 0x80	;select multiple RAM page mode
  9504                          	
  9505  651A  7C 6A28           	xcall	___awmod
  9506                          	
  9507  651D  64                	asl	a
  9508  651E  64                	asl	a
  9509  651F  01 34             	add	a,<__powers_
  9510  6521  5C                	mov	x,a
  9511  6522  50 7C             	mov	a,>__powers_
  9512  6524  08                	push	a
  9513  6525  28                	romx
  9514  6526  70 CF             	and	f, 0xCF   ;select user reg space
  9515  6528  62 D0 00          	mov	reg[CUR_PP],0
  9516  652B  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  9517  652D  18                	pop	a
  9518  652E  75                	inc	x
  9519  652F  08                	push	a
  9520  6530  28                	romx
  9521  6531  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  9522  6533  18                	pop	a
  9523  6534  75                	inc	x
  9524  6535  08                	push	a
  9525  6536  28                	romx
  9526  6537  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  9527  6539  18                	pop	a
  9528  653A  75                	inc	x
  9529  653B  28                	romx
  9530  653C  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  9531  653E  51 47             	mov	a,[0+((_scale$3317)^0x0)]
  9532  6540  53 5E             	mov	[0+((?___flmul)^0x0)],a
  9533  6542  51 48             	mov	a,[1+((_scale$3317)^0x0)]
  9534  6544  53 5F             	mov	[1+((?___flmul)^0x0)],a
  9535  6546  51 49             	mov	a,[2+((_scale$3317)^0x0)]
  9536  6548  53 60             	mov	[2+((?___flmul)^0x0)],a
  9537  654A  51 4A             	mov	a,[3+((_scale$3317)^0x0)]
  9538  654C  53 61             	mov	[3+((?___flmul)^0x0)],a
  9539  654E  71 80             	or	f, 0x80	;select multiple RAM page mode
  9540                          	
  9541  6550  7C 7201           	xcall	___flmul
  9542                          	
  9543  6553  70 CF             	and	f, 0xCF   ;select user reg space
  9544  6555  62 D0 00          	mov	reg[CUR_PP],0
  9545  6558  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  9546  655A  53 41             	mov	[0+((?_scale)^0x0)],a
  9547  655C  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  9548  655E  53 42             	mov	[1+((?_scale)^0x0)],a
  9549  6560  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  9550  6562  53 43             	mov	[2+((?_scale)^0x0)],a
  9551  6564  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  9552  6566  53 44             	mov	[3+((?_scale)^0x0)],a
  9553  6568  7D 6644           	xjmp	l139
  9554                          	line	426
  9555                          ;			
  9556  656B                    l144:	
  9557                          ;doprnt.c: 426: else if(scl > 10)
  9558  656B  70 CF             	and	f, 0xCF   ;select user reg space
  9559  656D  62 D0 00          	mov	reg[CUR_PP],0
  9560  6570  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9561  6572  31 80             	xor	a,80h
  9562  6574  39 8B             	cmp	a,(0Bh)^80h
  9563  6576  C0A7              	jc	l145
  9564                          	line	427
  9565  6578  70 CF             	and	f, 0xCF   ;select user reg space
  9566  657A  62 D0 00          	mov	reg[CUR_PP],0
  9567  657D  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9568  657F  53 5F             	mov	[1+((?___awdiv)^0x0)],a
  9569  6581  6A                	rlc	a
  9570  6582  53 5E             	mov	[0+((?___awdiv)^0x0)],a
  9571  6584  1C 5E             	sbb	[0+((?___awdiv)^0x0)],a
  9572  6586  50 0A             	mov	a,<(0Ah)
  9573  6588  53 61             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  9574  658A  50 00             	mov	a,>(0Ah)
  9575  658C  53 60             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  9576  658E  71 80             	or	f, 0x80	;select multiple RAM page mode
  9577                          	
  9578  6590  7C 6D2D           	xcall	___awdiv
  9579                          	
  9580  6593  70 CF             	and	f, 0xCF   ;select user reg space
  9581  6595  62 D0 00          	mov	reg[CUR_PP],0
  9582  6598  5A 45             	mov	[((_scale$3321)^0x0)],x
  9583  659A  53 46             	mov	[((_scale$3321+1)^0x0)],a
  9584  659C  70 CF             	and	f, 0xCF   ;select user reg space
  9585  659E  62 D0 00          	mov	reg[CUR_PP],0
  9586  65A1  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9587  65A3  53 5F             	mov	[1+((?___awmod)^0x0)],a
  9588  65A5  6A                	rlc	a
  9589  65A6  53 5E             	mov	[0+((?___awmod)^0x0)],a
  9590  65A8  1C 5E             	sbb	[0+((?___awmod)^0x0)],a
  9591  65AA  50 0A             	mov	a,<(0Ah)
  9592  65AC  53 61             	mov	[1+((0+?___awmod+02h)^0x0)],a
  9593  65AE  50 00             	mov	a,>(0Ah)
  9594  65B0  53 60             	mov	[0+((0+?___awmod+02h)^0x0)],a
  9595  65B2  71 80             	or	f, 0x80	;select multiple RAM page mode
  9596                          	
  9597  65B4  7C 6A28           	xcall	___awmod
  9598                          	
  9599  65B7  64                	asl	a
  9600  65B8  64                	asl	a
  9601  65B9  01 34             	add	a,<__powers_
  9602  65BB  5C                	mov	x,a
  9603  65BC  50 7C             	mov	a,>__powers_
  9604  65BE  08                	push	a
  9605  65BF  28                	romx
  9606  65C0  70 CF             	and	f, 0xCF   ;select user reg space
  9607  65C2  62 D0 00          	mov	reg[CUR_PP],0
  9608  65C5  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
  9609  65C7  18                	pop	a
  9610  65C8  75                	inc	x
  9611  65C9  08                	push	a
  9612  65CA  28                	romx
  9613  65CB  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
  9614  65CD  18                	pop	a
  9615  65CE  75                	inc	x
  9616  65CF  08                	push	a
  9617  65D0  28                	romx
  9618  65D1  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
  9619  65D3  18                	pop	a
  9620  65D4  75                	inc	x
  9621  65D5  28                	romx
  9622  65D6  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
  9623  65D8  50 01             	mov	a,<((01h))
  9624  65DA  01 45             	add	a,<(8000h+_scale$3321)
  9625  65DC  5C                	mov	x,a
  9626  65DD  50 80             	mov	a,>(8000h+_scale$3321)
  9627  65DF  60 D3             	mov	reg[0xd3],a
  9628  65E1  52 00             	mov	a,[x+0]
  9629  65E3  64                	asl	a
  9630  65E4  64                	asl	a
  9631  65E5  01 24             	add	a,<((024h))
  9632  65E7  01 34             	add	a,<__powers_
  9633  65E9  5C                	mov	x,a
  9634  65EA  50 7C             	mov	a,>__powers_
  9635  65EC  08                	push	a
  9636  65ED  28                	romx
  9637  65EE  53 5E             	mov	[0+((?___flmul)^0x0)],a
  9638  65F0  18                	pop	a
  9639  65F1  75                	inc	x
  9640  65F2  08                	push	a
  9641  65F3  28                	romx
  9642  65F4  53 5F             	mov	[1+((?___flmul)^0x0)],a
  9643  65F6  18                	pop	a
  9644  65F7  75                	inc	x
  9645  65F8  08                	push	a
  9646  65F9  28                	romx
  9647  65FA  53 60             	mov	[2+((?___flmul)^0x0)],a
  9648  65FC  18                	pop	a
  9649  65FD  75                	inc	x
  9650  65FE  28                	romx
  9651  65FF  53 61             	mov	[3+((?___flmul)^0x0)],a
  9652  6601  71 80             	or	f, 0x80	;select multiple RAM page mode
  9653                          	
  9654  6603  7C 7201           	xcall	___flmul
  9655                          	
  9656  6606  70 CF             	and	f, 0xCF   ;select user reg space
  9657  6608  62 D0 00          	mov	reg[CUR_PP],0
  9658  660B  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
  9659  660D  53 41             	mov	[0+((?_scale)^0x0)],a
  9660  660F  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
  9661  6611  53 42             	mov	[1+((?_scale)^0x0)],a
  9662  6613  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
  9663  6615  53 43             	mov	[2+((?_scale)^0x0)],a
  9664  6617  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
  9665  6619  53 44             	mov	[3+((?_scale)^0x0)],a
  9666  661B  7D 6644           	xjmp	l139
  9667                          	line	428
  9668                          ;			
  9669  661E                    l145:	
  9670  661E  70 CF             	and	f, 0xCF   ;select user reg space
  9671  6620  62 D0 00          	mov	reg[CUR_PP],0
  9672  6623  51 41             	mov	a,[0+((scale@scl)^0x0)]
  9673  6625  64                	asl	a
  9674  6626  64                	asl	a
  9675  6627  01 34             	add	a,<__powers_
  9676  6629  5C                	mov	x,a
  9677  662A  50 7C             	mov	a,>__powers_
  9678  662C  08                	push	a
  9679  662D  28                	romx
  9680  662E  53 41             	mov	[0+((?_scale)^0x0)],a
  9681  6630  18                	pop	a
  9682  6631  75                	inc	x
  9683  6632  08                	push	a
  9684  6633  28                	romx
  9685  6634  53 42             	mov	[1+((?_scale)^0x0)],a
  9686  6636  18                	pop	a
  9687  6637  75                	inc	x
  9688  6638  08                	push	a
  9689  6639  28                	romx
  9690  663A  53 43             	mov	[2+((?_scale)^0x0)],a
  9691  663C  18                	pop	a
  9692  663D  75                	inc	x
  9693  663E  28                	romx
  9694  663F  53 44             	mov	[3+((?_scale)^0x0)],a
  9695  6641  7D 6644           	xjmp	l139
  9696                          	line	429
  9697                          ;doprnt.c: 429: }
  9698  6644                    l139:
  9699                          ;			
  9700  6644  70 CF             	and	f, 0xCF   ;select user reg space
  9701                          	
  9702  6646  7F                	ret
  9703                          GLOBAL __end_of_scale
  9704  6647                    	__end_of_scale:
  9705                          	FNSIZE	_scale,25,4
  9706                          ; =============== function _scale ends ============
  9707                          
  9708                          	signat	_scale,4220
  9709                          	global	__div_to_l_
  9710                          	global	??__div_to_l_
  9711                          	global	?__div_to_l_
  9712                          	psect	text
  9713                          
  9714                          ; *************** function __div_to_l_ *****************
  9715                          ; Defined at:
  9716                          ;		line 19 in file "fldivl.c"
  9717                          ; Parameters:
  9718                          ;		f1          	offs:   0	type: char 
  9719                          ;		f2          	offs:   4	type: char 
  9720                          ; Auto variables:
  9721                          ;		quot        	       	type: unsigned long 
  9722                          ;		exp1        	       	type: unsigned char 
  9723                          ;		cntr        	       	type: unsigned char 
  9724                          ; Return value:
  9725                          ;		type: unsigned long 
  9726                          ;		size: 4
  9727                          ; Registers used:
  9728                          ;		a, x, CUR_PP
  9729                          ; Tracked objects:
  9730                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9731                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9732                          ;		Unchanged: 
  9733                          ; Data sizes:
  9734                          ;		Autos:    6
  9735                          ;		Params:   8
  9736                          ;		Temp:     1
  9737                          ;		Total:   15
  9738                          ; This function calls:
  9739                          ;		___flunpack
  9740                          ; This function is called by:
  9741                          ;		_printf
  9742                          ; This function uses a non-reentrant model
  9743                          ; 
  9744                          	file	"fldivl.c"
  9745                          	line	19
  9746  01EA                    	__size_of__div_to_l_	equ	__end_of__div_to_l_-__div_to_l_
  9747                          ;fldivl.c: 17: unsigned long int
  9748                          ;fldivl.c: 18: _div_to_l_(double f1, double f2)
  9749                          ;fldivl.c: 19: {
  9750                          ;			
  9751  6647                    __div_to_l_:	
  9752                          	opt	disable
  9753                          	line	23
  9754                          ;fldivl.c: 20: unsigned char cntr, exp1;
  9755                          ;fldivl.c: 21: unsigned long quot;
  9756                          ;fldivl.c: 23: quot = 0;
  9757  6647  50 00             	mov	a,<(0>>24)
  9758  6649  70 CF             	and	f, 0xCF   ;select user reg space
  9759  664B  62 D0 00          	mov	reg[CUR_PP],0
  9760  664E  53 49             	mov	[0+((__div_to_l_@quot)^0x0)],a
  9761  6650  50 00             	mov	a,<(0>>16)
  9762  6652  53 4A             	mov	[1+((__div_to_l_@quot)^0x0)],a
  9763  6654  50 00             	mov	a,<(0>>8)
  9764  6656  53 4B             	mov	[2+((__div_to_l_@quot)^0x0)],a
  9765  6658  50 00             	mov	a,<(0)
  9766  665A  53 4C             	mov	[3+((__div_to_l_@quot)^0x0)],a
  9767                          	line	24
  9768                          ;fldivl.c: 24: __flunpack(&(*(unsigned long *)&f1), &exp1);
  9769  665C  50 41             	mov	a,<((__div_to_l_@f1|8000h))
  9770  665E  70 CF             	and	f, 0xCF   ;select user reg space
  9771  6660  62 D0 00          	mov	reg[CUR_PP],0
  9772  6663  53 72             	mov	[1+((?___flunpack)^0x0)],a
  9773  6665  50 80             	mov	a,>((__div_to_l_@f1|8000h))
  9774  6667  53 71             	mov	[0+((?___flunpack)^0x0)],a
  9775  6669  50 4D             	mov	a,<((__div_to_l_@exp1|8000h))
  9776  666B  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  9777  666D  50 80             	mov	a,>((__div_to_l_@exp1|8000h))
  9778  666F  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  9779  6671  71 80             	or	f, 0x80	;select multiple RAM page mode
  9780                          	
  9781  6673  7C 7714           	xcall	___flunpack
  9782                          	
  9783                          	line	25
  9784                          ;fldivl.c: 25: if(exp1 == 0)
  9785  6676  70 CF             	and	f, 0xCF   ;select user reg space
  9786  6678  62 D0 00          	mov	reg[CUR_PP],0
  9787  667B  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9788  667D  39 00             	cmp	a,(0)
  9789  667F  B019              	jnz	l610
  9790                          	line	26
  9791  6681  70 CF             	and	f, 0xCF   ;select user reg space
  9792  6683  62 D0 00          	mov	reg[CUR_PP],0
  9793  6686  51 49             	mov	a,[0+((__div_to_l_@quot)^0x0)]
  9794  6688  53 41             	mov	[0+((?__div_to_l_)^0x0)],a
  9795  668A  51 4A             	mov	a,[1+((__div_to_l_@quot)^0x0)]
  9796  668C  53 42             	mov	[1+((?__div_to_l_)^0x0)],a
  9797  668E  51 4B             	mov	a,[2+((__div_to_l_@quot)^0x0)]
  9798  6690  53 43             	mov	[2+((?__div_to_l_)^0x0)],a
  9799  6692  51 4C             	mov	a,[3+((__div_to_l_@quot)^0x0)]
  9800  6694  53 44             	mov	[3+((?__div_to_l_)^0x0)],a
  9801  6696  7D 682E           	xjmp	l609
  9802                          ;			
  9803  6699                    l610:	
  9804                          	line	27
  9805                          ;fldivl.c: 27: __flunpack(&(*(unsigned long *)&f2), &cntr);
  9806  6699  50 45             	mov	a,<((__div_to_l_@f2|8000h))
  9807  669B  70 CF             	and	f, 0xCF   ;select user reg space
  9808  669D  62 D0 00          	mov	reg[CUR_PP],0
  9809  66A0  53 72             	mov	[1+((?___flunpack)^0x0)],a
  9810  66A2  50 80             	mov	a,>((__div_to_l_@f2|8000h))
  9811  66A4  53 71             	mov	[0+((?___flunpack)^0x0)],a
  9812  66A6  50 4E             	mov	a,<((__div_to_l_@cntr|8000h))
  9813  66A8  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  9814  66AA  50 80             	mov	a,>((__div_to_l_@cntr|8000h))
  9815  66AC  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  9816  66AE  71 80             	or	f, 0x80	;select multiple RAM page mode
  9817                          	
  9818  66B0  7C 7714           	xcall	___flunpack
  9819                          	
  9820                          	line	28
  9821                          ;fldivl.c: 28: if(cntr == 0)
  9822  66B3  70 CF             	and	f, 0xCF   ;select user reg space
  9823  66B5  62 D0 00          	mov	reg[CUR_PP],0
  9824  66B8  51 4E             	mov	a,[0+((__div_to_l_@cntr)^0x0)]
  9825  66BA  39 00             	cmp	a,(0)
  9826  66BC  B019              	jnz	l611
  9827                          	line	29
  9828  66BE  70 CF             	and	f, 0xCF   ;select user reg space
  9829  66C0  62 D0 00          	mov	reg[CUR_PP],0
  9830  66C3  51 49             	mov	a,[0+((__div_to_l_@quot)^0x0)]
  9831  66C5  53 41             	mov	[0+((?__div_to_l_)^0x0)],a
  9832  66C7  51 4A             	mov	a,[1+((__div_to_l_@quot)^0x0)]
  9833  66C9  53 42             	mov	[1+((?__div_to_l_)^0x0)],a
  9834  66CB  51 4B             	mov	a,[2+((__div_to_l_@quot)^0x0)]
  9835  66CD  53 43             	mov	[2+((?__div_to_l_)^0x0)],a
  9836  66CF  51 4C             	mov	a,[3+((__div_to_l_@quot)^0x0)]
  9837  66D1  53 44             	mov	[3+((?__div_to_l_)^0x0)],a
  9838  66D3  7D 682E           	xjmp	l609
  9839                          ;			
  9840  66D6                    l611:	
  9841                          	line	30
  9842                          ;fldivl.c: 30: exp1 -= 127;
  9843  66D6  70 CF             	and	f, 0xCF   ;select user reg space
  9844  66D8  62 D0 00          	mov	reg[CUR_PP],0
  9845  66DB  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9846  66DD  11 7F             	sub	a,<((07Fh))
  9847  66DF  53 4D             	mov	[0+((__div_to_l_@exp1)^0x0)],a
  9848                          	line	31
  9849                          ;fldivl.c: 31: exp1 -= cntr-127+31;
  9850  66E1  50 A0             	mov	a,<((0A0h))
  9851  66E3  02 4E             	add	a,[0+((__div_to_l_@cntr)^0x0)]
  9852  66E5  53 4F             	mov	[(??__div_to_l_^0x0)+6+0],a
  9853  66E7  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9854  66E9  12 4F             	sub	a,[(??__div_to_l_^0x0)+6+0]
  9855  66EB  53 4D             	mov	[0+((__div_to_l_@exp1)^0x0)],a
  9856                          	line	32
  9857                          ;fldivl.c: 32: cntr = 32;
  9858  66ED  50 20             	mov	a,<((020h))
  9859  66EF  53 4E             	mov	[0+((__div_to_l_@cntr)^0x0)],a
  9860                          	line	33
  9861                          ;fldivl.c: 33: do {
  9862                          ;			
  9863  66F1                    l614:	
  9864                          	line	34
  9865                          ;fldivl.c: 34: quot <<= 1;
  9866  66F1  50 01             	mov	a,<((01h))
  9867  66F3  7D 6703           	xjmp	u2443
  9868  66F6                    u2454:
  9869  66F6  70 CF             	and	f, 0xCF   ;select user reg space
  9870  66F8  62 D0 00          	mov	reg[CUR_PP],0
  9871  66FB  65 4C             	asl	[3+((__div_to_l_@quot)^0x0)]
  9872  66FD  6B 4B             	rlc	[2+((__div_to_l_@quot)^0x0)]
  9873  66FF  6B 4A             	rlc	[1+((__div_to_l_@quot)^0x0)]
  9874  6701  6B 49             	rlc	[0+((__div_to_l_@quot)^0x0)]
  9875  6703                    u2443:
  9876  6703  78                	dec	a
  9877  6704  DFF1              	jnc	u2454
  9878                          	line	35
  9879                          ;fldivl.c: 35: if((*(unsigned long *)&f1) >= (*(unsigned long *)&f2)) {
  9880  6706  70 CF             	and	f, 0xCF   ;select user reg space
  9881  6708  62 D0 00          	mov	reg[CUR_PP],0
  9882  670B  51 44             	mov	a,[3+((__div_to_l_@f1)^0x0)]
  9883  670D  3A 48             	cmp	a,[3+((__div_to_l_@f2)^0x0)]
  9884  670F  51 43             	mov	a,[2+((__div_to_l_@f1)^0x0)]
  9885  6711  1A 47             	sbb	a,[2+((__div_to_l_@f2)^0x0)]
  9886  6713  51 42             	mov	a,[1+((__div_to_l_@f1)^0x0)]
  9887  6715  1A 46             	sbb	a,[1+((__div_to_l_@f2)^0x0)]
  9888  6717  51 41             	mov	a,[0+((__div_to_l_@f1)^0x0)]
  9889  6719  1A 45             	sbb	a,[0+((__div_to_l_@f2)^0x0)]
  9890  671B  C026              	jc	l615
  9891                          	line	36
  9892                          ;fldivl.c: 36: (*(unsigned long *)&f1) -= (*(unsigned long *)&f2);
  9893  671D  70 CF             	and	f, 0xCF   ;select user reg space
  9894  671F  62 D0 00          	mov	reg[CUR_PP],0
  9895  6722  51 48             	mov	a,[3+((__div_to_l_@f2)^0x0)]
  9896  6724  14 44             	sub	[3+((__div_to_l_@f1)^0x0)],a
  9897  6726  51 47             	mov	a,[2+((__div_to_l_@f2)^0x0)]
  9898  6728  1C 43             	sbb	[2+((__div_to_l_@f1)^0x0)],a
  9899  672A  51 46             	mov	a,[1+((__div_to_l_@f2)^0x0)]
  9900  672C  1C 42             	sbb	[1+((__div_to_l_@f1)^0x0)],a
  9901  672E  51 45             	mov	a,[0+((__div_to_l_@f2)^0x0)]
  9902  6730  1C 41             	sbb	[0+((__div_to_l_@f1)^0x0)],a
  9903                          	line	37
  9904                          ;fldivl.c: 37: quot |= 1;
  9905  6732  50 01             	mov	a,<(01h)
  9906  6734  2C 4C             	or	[3+((__div_to_l_@quot)^0x0)],a
  9907  6736  50 00             	mov	a,<(01h>>8)
  9908  6738  2C 4B             	or	[2+((__div_to_l_@quot)^0x0)],a
  9909  673A  50 00             	mov	a,<(01h>>16)
  9910  673C  2C 4A             	or	[1+((__div_to_l_@quot)^0x0)],a
  9911  673E  50 00             	mov	a,<(01h>>24)
  9912  6740  2C 49             	or	[0+((__div_to_l_@quot)^0x0)],a
  9913                          	line	38
  9914                          ;			
  9915  6742                    l615:	
  9916                          	line	39
  9917                          ;fldivl.c: 38: }
  9918                          ;fldivl.c: 39: (*(unsigned long *)&f1) <<= 1;
  9919  6742  50 01             	mov	a,<((01h))
  9920  6744  7D 6754           	xjmp	u2463
  9921  6747                    u2474:
  9922  6747  70 CF             	and	f, 0xCF   ;select user reg space
  9923  6749  62 D0 00          	mov	reg[CUR_PP],0
  9924  674C  65 44             	asl	[3+((__div_to_l_@f1)^0x0)]
  9925  674E  6B 43             	rlc	[2+((__div_to_l_@f1)^0x0)]
  9926  6750  6B 42             	rlc	[1+((__div_to_l_@f1)^0x0)]
  9927  6752  6B 41             	rlc	[0+((__div_to_l_@f1)^0x0)]
  9928  6754                    u2463:
  9929  6754  78                	dec	a
  9930  6755  DFF1              	jnc	u2474
  9931                          	line	40
  9932                          ;fldivl.c: 40: } while(--cntr != 0);
  9933  6757  70 CF             	and	f, 0xCF   ;select user reg space
  9934  6759  62 D0 00          	mov	reg[CUR_PP],0
  9935  675C  51 4E             	mov	a,[0+((__div_to_l_@cntr)^0x0)]
  9936  675E  11 01             	sub	a,<((01h))
  9937  6760  53 4E             	mov	[0+((__div_to_l_@cntr)^0x0)],a
  9938  6762  51 4E             	mov	a,[0+((__div_to_l_@cntr)^0x0)]
  9939  6764  39 00             	cmp	a,(0)
  9940  6766  BF8A              	jnz	l614
  9941                          ;			
  9942  6768                    l613:	
  9943                          	line	41
  9944                          ;fldivl.c: 41: if((signed char)exp1 < 0) {
  9945  6768  70 CF             	and	f, 0xCF   ;select user reg space
  9946  676A  62 D0 00          	mov	reg[CUR_PP],0
  9947  676D  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9948  676F  31 80             	xor	a,80h
  9949  6771  39 80             	cmp	a,(0)^80h
  9950  6773  D051              	jnc	l616
  9951                          	line	42
  9952                          ;fldivl.c: 42: if((signed char)exp1 < -31)
  9953  6775  70 CF             	and	f, 0xCF   ;select user reg space
  9954  6777  62 D0 00          	mov	reg[CUR_PP],0
  9955  677A  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9956  677C  31 80             	xor	a,80h
  9957  677E  39 61             	cmp	a,(-31)^80h
  9958  6780  D019              	jnc	l620
  9959                          	line	43
  9960  6782  50 00             	mov	a,<(0>>24)
  9961  6784  70 CF             	and	f, 0xCF   ;select user reg space
  9962  6786  62 D0 00          	mov	reg[CUR_PP],0
  9963  6789  53 41             	mov	[0+((?__div_to_l_)^0x0)],a
  9964  678B  50 00             	mov	a,<(0>>16)
  9965  678D  53 42             	mov	[1+((?__div_to_l_)^0x0)],a
  9966  678F  50 00             	mov	a,<(0>>8)
  9967  6791  53 43             	mov	[2+((?__div_to_l_)^0x0)],a
  9968  6793  50 00             	mov	a,<(0)
  9969  6795  53 44             	mov	[3+((?__div_to_l_)^0x0)],a
  9970  6797  7D 682E           	xjmp	l609
  9971                          	line	44
  9972                          ;fldivl.c: 44: do
  9973                          ;			
  9974  679A                    l620:	
  9975                          	line	45
  9976                          ;fldivl.c: 45: quot >>= 1;
  9977  679A  50 01             	mov	a,<((01h))
  9978  679C  7D 67AE           	xjmp	u2483
  9979  679F  70 FB             	clrc
  9980  67A1                    u2494:
  9981  67A1  70 CF             	and	f, 0xCF   ;select user reg space
  9982  67A3  62 D0 00          	mov	reg[CUR_PP],0
  9983  67A6  6E 49             	rrc	[0+((__div_to_l_@quot)^0x0)]
  9984  67A8  6E 4A             	rrc	[1+((__div_to_l_@quot)^0x0)]
  9985  67AA  6E 4B             	rrc	[2+((__div_to_l_@quot)^0x0)]
  9986  67AC  6E 4C             	rrc	[3+((__div_to_l_@quot)^0x0)]
  9987  67AE                    u2483:
  9988  67AE  78                	dec	a
  9989  67AF  DFF1              	jnc	u2494
  9990                          	line	46
  9991                          ;fldivl.c: 46: while(++exp1 != 0);
  9992  67B1  70 CF             	and	f, 0xCF   ;select user reg space
  9993  67B3  62 D0 00          	mov	reg[CUR_PP],0
  9994  67B6  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9995  67B8  01 01             	add	a,<((01h))
  9996  67BA  53 4D             	mov	[0+((__div_to_l_@exp1)^0x0)],a
  9997  67BC  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9998  67BE  39 00             	cmp	a,(0)
  9999  67C0  BFD9              	jnz	l620
 10000                          ;			
 10001  67C2                    l619:	
 10002                          	line	47
 10003                          ;fldivl.c: 47: } else {
 10004  67C2  7D 6816           	xjmp	l621
 10005                          ;			
 10006  67C5                    l616:	
 10007                          	line	48
 10008                          ;fldivl.c: 48: if(exp1 >= 32)
 10009  67C5  70 CF             	and	f, 0xCF   ;select user reg space
 10010  67C7  62 D0 00          	mov	reg[CUR_PP],0
 10011  67CA  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
 10012  67CC  39 20             	cmp	a,<((020h))
 10013  67CE  C019              	jc	l622
 10014                          	line	49
 10015  67D0  50 00             	mov	a,<(0>>24)
 10016  67D2  70 CF             	and	f, 0xCF   ;select user reg space
 10017  67D4  62 D0 00          	mov	reg[CUR_PP],0
 10018  67D7  53 41             	mov	[0+((?__div_to_l_)^0x0)],a
 10019  67D9  50 00             	mov	a,<(0>>16)
 10020  67DB  53 42             	mov	[1+((?__div_to_l_)^0x0)],a
 10021  67DD  50 00             	mov	a,<(0>>8)
 10022  67DF  53 43             	mov	[2+((?__div_to_l_)^0x0)],a
 10023  67E1  50 00             	mov	a,<(0)
 10024  67E3  53 44             	mov	[3+((?__div_to_l_)^0x0)],a
 10025  67E5  7D 682E           	xjmp	l609
 10026                          ;			
 10027  67E8                    l622:	
 10028                          	line	50
 10029                          ;fldivl.c: 50: while(exp1 != 0) {
 10030  67E8  7D 680B           	xjmp	l623
 10031                          ;			
 10032  67EB                    l624:	
 10033                          	line	51
 10034                          ;fldivl.c: 51: quot <<= 1;
 10035  67EB  50 01             	mov	a,<((01h))
 10036  67ED  7D 67FD           	xjmp	u2503
 10037  67F0                    u2514:
 10038  67F0  70 CF             	and	f, 0xCF   ;select user reg space
 10039  67F2  62 D0 00          	mov	reg[CUR_PP],0
 10040  67F5  65 4C             	asl	[3+((__div_to_l_@quot)^0x0)]
 10041  67F7  6B 4B             	rlc	[2+((__div_to_l_@quot)^0x0)]
 10042  67F9  6B 4A             	rlc	[1+((__div_to_l_@quot)^0x0)]
 10043  67FB  6B 49             	rlc	[0+((__div_to_l_@quot)^0x0)]
 10044  67FD                    u2503:
 10045  67FD  78                	dec	a
 10046  67FE  DFF1              	jnc	u2514
 10047                          	line	52
 10048                          ;fldivl.c: 52: exp1--;
 10049  6800  70 CF             	and	f, 0xCF   ;select user reg space
 10050  6802  62 D0 00          	mov	reg[CUR_PP],0
 10051  6805  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
 10052  6807  11 01             	sub	a,<((01h))
 10053  6809  53 4D             	mov	[0+((__div_to_l_@exp1)^0x0)],a
 10054                          	line	53
 10055                          ;			
 10056  680B                    l623:	
 10057                          	line	50
 10058  680B  70 CF             	and	f, 0xCF   ;select user reg space
 10059  680D  62 D0 00          	mov	reg[CUR_PP],0
 10060  6810  51 4D             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
 10061  6812  39 00             	cmp	a,(0)
 10062  6814  BFD6              	jnz	l624
 10063                          ;			
 10064  6816                    l625:	
 10065                          	line	54
 10066                          ;			
 10067  6816                    l621:	
 10068                          	line	55
 10069  6816  70 CF             	and	f, 0xCF   ;select user reg space
 10070  6818  62 D0 00          	mov	reg[CUR_PP],0
 10071  681B  51 49             	mov	a,[0+((__div_to_l_@quot)^0x0)]
 10072  681D  53 41             	mov	[0+((?__div_to_l_)^0x0)],a
 10073  681F  51 4A             	mov	a,[1+((__div_to_l_@quot)^0x0)]
 10074  6821  53 42             	mov	[1+((?__div_to_l_)^0x0)],a
 10075  6823  51 4B             	mov	a,[2+((__div_to_l_@quot)^0x0)]
 10076  6825  53 43             	mov	[2+((?__div_to_l_)^0x0)],a
 10077  6827  51 4C             	mov	a,[3+((__div_to_l_@quot)^0x0)]
 10078  6829  53 44             	mov	[3+((?__div_to_l_)^0x0)],a
 10079  682B  7D 682E           	xjmp	l609
 10080                          	line	56
 10081                          ;fldivl.c: 56: }
 10082  682E                    l609:
 10083                          ;			
 10084  682E  70 CF             	and	f, 0xCF   ;select user reg space
 10085                          	
 10086  6830  7F                	ret
 10087                          GLOBAL __end_of__div_to_l_
 10088  6831                    	__end_of__div_to_l_:
 10089                          	FNSIZE	__div_to_l_,7,8
 10090                          ; =============== function __div_to_l_ ends ============
 10091                          
 10092                          	signat	__div_to_l_,8316
 10093                          	global	___fltol
 10094                          	global	??___fltol
 10095                          	global	?___fltol
 10096                          	psect	text
 10097                          
 10098                          ; *************** function ___fltol *****************
 10099                          ; Defined at:
 10100                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fltol.c"
 10101                          ; Parameters:
 10102                          ;		f1          	offs:   0	type: unsigned long 
 10103                          ; Auto variables:
 10104                          ;		lval        	       	type: unsigned long 
 10105                          ;		exp1        	       	type: unsigned char 
 10106                          ;		sign1       	       	type: unsigned char 
 10107                          ; Return value:
 10108                          ;		type: long 
 10109                          ;		size: 4
 10110                          ; Registers used:
 10111                          ;		a, x, CUR_PP
 10112                          ; Tracked objects:
 10113                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10114                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10115                          ;		Unchanged: 
 10116                          ; Data sizes:
 10117                          ;		Autos:    6
 10118                          ;		Params:   4
 10119                          ;		Temp:     0
 10120                          ;		Total:   10
 10121                          ; This function calls:
 10122                          ;		___flunpack
 10123                          ; This function is called by:
 10124                          ;		_printf
 10125                          ; This function uses a non-reentrant model
 10126                          ; 
 10127                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fltol.c"
 10128                          	line	16
 10129  0139                    	__size_of___fltol	equ	__end_of___fltol-___fltol
 10130                          ;fltol.c: 14: long
 10131                          ;fltol.c: 15: __fltol(double f1)
 10132                          ;fltol.c: 16: {
 10133                          ;			
 10134  6831                    ___fltol:	
 10135                          	opt	disable
 10136                          	line	20
 10137                          ;fltol.c: 17: unsigned char sign1, exp1;
 10138                          ;fltol.c: 18: unsigned long lval;
 10139                          ;fltol.c: 20: sign1 = __flunpack(&(*(unsigned long *)&f1), &exp1);
 10140  6831  50 41             	mov	a,<((___fltol@f1|8000h))
 10141  6833  70 CF             	and	f, 0xCF   ;select user reg space
 10142  6835  62 D0 00          	mov	reg[CUR_PP],0
 10143  6838  53 72             	mov	[1+((?___flunpack)^0x0)],a
 10144  683A  50 80             	mov	a,>((___fltol@f1|8000h))
 10145  683C  53 71             	mov	[0+((?___flunpack)^0x0)],a
 10146  683E  50 49             	mov	a,<((___fltol@exp1|8000h))
 10147  6840  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 10148  6842  50 80             	mov	a,>((___fltol@exp1|8000h))
 10149  6844  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 10150  6846  71 80             	or	f, 0x80	;select multiple RAM page mode
 10151                          	
 10152  6848  7C 7714           	xcall	___flunpack
 10153                          	
 10154  684B  70 CF             	and	f, 0xCF   ;select user reg space
 10155  684D  62 D0 00          	mov	reg[CUR_PP],0
 10156  6850  53 4A             	mov	[0+((___fltol@sign1)^0x0)],a
 10157                          	line	21
 10158                          ;fltol.c: 21: lval = (*(unsigned long *)&f1);
 10159  6852  70 CF             	and	f, 0xCF   ;select user reg space
 10160  6854  62 D0 00          	mov	reg[CUR_PP],0
 10161  6857  51 41             	mov	a,[0+((___fltol@f1)^0x0)]
 10162  6859  53 45             	mov	[0+((___fltol@lval)^0x0)],a
 10163  685B  51 42             	mov	a,[1+((___fltol@f1)^0x0)]
 10164  685D  53 46             	mov	[1+((___fltol@lval)^0x0)],a
 10165  685F  51 43             	mov	a,[2+((___fltol@f1)^0x0)]
 10166  6861  53 47             	mov	[2+((___fltol@lval)^0x0)],a
 10167  6863  51 44             	mov	a,[3+((___fltol@f1)^0x0)]
 10168  6865  53 48             	mov	[3+((___fltol@lval)^0x0)],a
 10169                          	line	22
 10170                          ;fltol.c: 22: exp1 -= 127+23;
 10171  6867  70 CF             	and	f, 0xCF   ;select user reg space
 10172  6869  62 D0 00          	mov	reg[CUR_PP],0
 10173  686C  51 49             	mov	a,[0+((___fltol@exp1)^0x0)]
 10174  686E  11 96             	sub	a,<((096h))
 10175  6870  53 49             	mov	[0+((___fltol@exp1)^0x0)],a
 10176                          	line	23
 10177                          ;fltol.c: 23: if((signed char)exp1 < 0) {
 10178  6872  70 CF             	and	f, 0xCF   ;select user reg space
 10179  6874  62 D0 00          	mov	reg[CUR_PP],0
 10180  6877  51 49             	mov	a,[0+((___fltol@exp1)^0x0)]
 10181  6879  31 80             	xor	a,80h
 10182  687B  39 80             	cmp	a,(0)^80h
 10183  687D  D051              	jnc	l468
 10184                          	line	24
 10185                          ;fltol.c: 24: if((signed char)exp1 < -23)
 10186  687F  70 CF             	and	f, 0xCF   ;select user reg space
 10187  6881  62 D0 00          	mov	reg[CUR_PP],0
 10188  6884  51 49             	mov	a,[0+((___fltol@exp1)^0x0)]
 10189  6886  31 80             	xor	a,80h
 10190  6888  39 69             	cmp	a,(-23)^80h
 10191  688A  D019              	jnc	l472
 10192                          	line	25
 10193  688C  50 00             	mov	a,<(0>>24)
 10194  688E  70 CF             	and	f, 0xCF   ;select user reg space
 10195  6890  62 D0 00          	mov	reg[CUR_PP],0
 10196  6893  53 41             	mov	[0+((?___fltol)^0x0)],a
 10197  6895  50 00             	mov	a,<(0>>16)
 10198  6897  53 42             	mov	[1+((?___fltol)^0x0)],a
 10199  6899  50 00             	mov	a,<(0>>8)
 10200  689B  53 43             	mov	[2+((?___fltol)^0x0)],a
 10201  689D  50 00             	mov	a,<(0)
 10202  689F  53 44             	mov	[3+((?___fltol)^0x0)],a
 10203  68A1  7D 6967           	xjmp	l467
 10204                          	line	26
 10205                          ;fltol.c: 26: do
 10206                          ;			
 10207  68A4                    l472:	
 10208                          	line	27
 10209                          ;fltol.c: 27: lval >>= 1;
 10210  68A4  50 01             	mov	a,<((01h))
 10211  68A6  7D 68B8           	xjmp	u2223
 10212  68A9  70 FB             	clrc
 10213  68AB                    u2234:
 10214  68AB  70 CF             	and	f, 0xCF   ;select user reg space
 10215  68AD  62 D0 00          	mov	reg[CUR_PP],0
 10216  68B0  6E 45             	rrc	[0+((___fltol@lval)^0x0)]
 10217  68B2  6E 46             	rrc	[1+((___fltol@lval)^0x0)]
 10218  68B4  6E 47             	rrc	[2+((___fltol@lval)^0x0)]
 10219  68B6  6E 48             	rrc	[3+((___fltol@lval)^0x0)]
 10220  68B8                    u2223:
 10221  68B8  78                	dec	a
 10222  68B9  DFF1              	jnc	u2234
 10223                          	line	28
 10224                          ;fltol.c: 28: while(++exp1 != 0);
 10225  68BB  70 CF             	and	f, 0xCF   ;select user reg space
 10226  68BD  62 D0 00          	mov	reg[CUR_PP],0
 10227  68C0  51 49             	mov	a,[0+((___fltol@exp1)^0x0)]
 10228  68C2  01 01             	add	a,<((01h))
 10229  68C4  53 49             	mov	[0+((___fltol@exp1)^0x0)],a
 10230  68C6  51 49             	mov	a,[0+((___fltol@exp1)^0x0)]
 10231  68C8  39 00             	cmp	a,(0)
 10232  68CA  BFD9              	jnz	l472
 10233                          ;			
 10234  68CC                    l471:	
 10235                          	line	29
 10236                          ;fltol.c: 29: } else {
 10237  68CC  7D 6920           	xjmp	l473
 10238                          ;			
 10239  68CF                    l468:	
 10240                          	line	30
 10241                          ;fltol.c: 30: if(exp1 >= 32)
 10242  68CF  70 CF             	and	f, 0xCF   ;select user reg space
 10243  68D1  62 D0 00          	mov	reg[CUR_PP],0
 10244  68D4  51 49             	mov	a,[0+((___fltol@exp1)^0x0)]
 10245  68D6  39 20             	cmp	a,<((020h))
 10246  68D8  C019              	jc	l474
 10247                          	line	31
 10248  68DA  50 00             	mov	a,<(0>>24)
 10249  68DC  70 CF             	and	f, 0xCF   ;select user reg space
 10250  68DE  62 D0 00          	mov	reg[CUR_PP],0
 10251  68E1  53 41             	mov	[0+((?___fltol)^0x0)],a
 10252  68E3  50 00             	mov	a,<(0>>16)
 10253  68E5  53 42             	mov	[1+((?___fltol)^0x0)],a
 10254  68E7  50 00             	mov	a,<(0>>8)
 10255  68E9  53 43             	mov	[2+((?___fltol)^0x0)],a
 10256  68EB  50 00             	mov	a,<(0)
 10257  68ED  53 44             	mov	[3+((?___fltol)^0x0)],a
 10258  68EF  7D 6967           	xjmp	l467
 10259                          ;			
 10260  68F2                    l474:	
 10261                          	line	32
 10262                          ;fltol.c: 32: while(exp1 != 0) {
 10263  68F2  7D 6915           	xjmp	l475
 10264                          ;			
 10265  68F5                    l476:	
 10266                          	line	33
 10267                          ;fltol.c: 33: lval <<= 1;
 10268  68F5  50 01             	mov	a,<((01h))
 10269  68F7  7D 6907           	xjmp	u2243
 10270  68FA                    u2254:
 10271  68FA  70 CF             	and	f, 0xCF   ;select user reg space
 10272  68FC  62 D0 00          	mov	reg[CUR_PP],0
 10273  68FF  65 48             	asl	[3+((___fltol@lval)^0x0)]
 10274  6901  6B 47             	rlc	[2+((___fltol@lval)^0x0)]
 10275  6903  6B 46             	rlc	[1+((___fltol@lval)^0x0)]
 10276  6905  6B 45             	rlc	[0+((___fltol@lval)^0x0)]
 10277  6907                    u2243:
 10278  6907  78                	dec	a
 10279  6908  DFF1              	jnc	u2254
 10280                          	line	34
 10281                          ;fltol.c: 34: exp1--;
 10282  690A  70 CF             	and	f, 0xCF   ;select user reg space
 10283  690C  62 D0 00          	mov	reg[CUR_PP],0
 10284  690F  51 49             	mov	a,[0+((___fltol@exp1)^0x0)]
 10285  6911  11 01             	sub	a,<((01h))
 10286  6913  53 49             	mov	[0+((___fltol@exp1)^0x0)],a
 10287                          	line	35
 10288                          ;			
 10289  6915                    l475:	
 10290                          	line	32
 10291  6915  70 CF             	and	f, 0xCF   ;select user reg space
 10292  6917  62 D0 00          	mov	reg[CUR_PP],0
 10293  691A  51 49             	mov	a,[0+((___fltol@exp1)^0x0)]
 10294  691C  39 00             	cmp	a,(0)
 10295  691E  BFD6              	jnz	l476
 10296                          ;			
 10297  6920                    l477:	
 10298                          	line	36
 10299                          ;			
 10300  6920                    l473:	
 10301                          	line	37
 10302                          ;fltol.c: 35: }
 10303                          ;fltol.c: 36: }
 10304                          ;fltol.c: 37: if(sign1)
 10305  6920  70 CF             	and	f, 0xCF   ;select user reg space
 10306  6922  62 D0 00          	mov	reg[CUR_PP],0
 10307  6925  51 4A             	mov	a,[0+((___fltol@sign1)^0x0)]
 10308  6927  39 00             	cmp	a,(0)
 10309  6929  A025              	jz	l478
 10310                          	line	38
 10311                          ;fltol.c: 38: lval = -lval;
 10312  692B  70 CF             	and	f, 0xCF   ;select user reg space
 10313  692D  62 D0 00          	mov	reg[CUR_PP],0
 10314  6930  51 45             	mov	a,[0+((___fltol@lval)^0x0)]
 10315  6932  73                	cpl	a
 10316  6933  53 45             	mov	[0+((___fltol@lval)^0x0)],a
 10317  6935  51 46             	mov	a,[1+((___fltol@lval)^0x0)]
 10318  6937  73                	cpl	a
 10319  6938  53 46             	mov	[1+((___fltol@lval)^0x0)],a
 10320  693A  51 47             	mov	a,[2+((___fltol@lval)^0x0)]
 10321  693C  73                	cpl	a
 10322  693D  53 47             	mov	[2+((___fltol@lval)^0x0)],a
 10323  693F  51 48             	mov	a,[3+((___fltol@lval)^0x0)]
 10324  6941  73                	cpl	a
 10325  6942  53 48             	mov	[3+((___fltol@lval)^0x0)],a
 10326  6944  76 48             	inc	[3+((___fltol@lval)^0x0)]
 10327  6946  0E 47  00         	adc	[2+((___fltol@lval)^0x0)],0
 10328  6949  0E 46  00         	adc	[1+((___fltol@lval)^0x0)],0
 10329  694C  0E 45  00         	adc	[0+((___fltol@lval)^0x0)],0
 10330                          ;			
 10331  694F                    l478:	
 10332                          	line	39
 10333  694F  70 CF             	and	f, 0xCF   ;select user reg space
 10334  6951  62 D0 00          	mov	reg[CUR_PP],0
 10335  6954  51 45             	mov	a,[0+((___fltol@lval)^0x0)]
 10336  6956  53 41             	mov	[0+((?___fltol)^0x0)],a
 10337  6958  51 46             	mov	a,[1+((___fltol@lval)^0x0)]
 10338  695A  53 42             	mov	[1+((?___fltol)^0x0)],a
 10339  695C  51 47             	mov	a,[2+((___fltol@lval)^0x0)]
 10340  695E  53 43             	mov	[2+((?___fltol)^0x0)],a
 10341  6960  51 48             	mov	a,[3+((___fltol@lval)^0x0)]
 10342  6962  53 44             	mov	[3+((?___fltol)^0x0)],a
 10343  6964  7D 6967           	xjmp	l467
 10344                          	line	40
 10345                          ;fltol.c: 40: }
 10346  6967                    l467:
 10347                          ;			
 10348  6967  70 CF             	and	f, 0xCF   ;select user reg space
 10349                          	
 10350  6969  7F                	ret
 10351                          GLOBAL __end_of___fltol
 10352  696A                    	__end_of___fltol:
 10353                          	FNSIZE	___fltol,6,4
 10354                          ; =============== function ___fltol ends ============
 10355                          
 10356                          	signat	___fltol,4220
 10357                          	global	_isdigit
 10358                          	global	??_isdigit
 10359                          	global	?_isdigit
 10360                          	psect	text
 10361                          
 10362                          ; *************** function _isdigit *****************
 10363                          ; Defined at:
 10364                          ;		line 13 in file "../common/isdigit.c"
 10365                          ; Parameters:
 10366                          ;		c           	offs:   0	type: unsigned char 
 10367                          ; Auto variables:
 10368                          ;		None
 10369                          ; Return value:
 10370                          ;		type: bit 
 10371                          ;		size: 0
 10372                          ; Registers used:
 10373                          ;		a, CUR_PP
 10374                          ; Tracked objects:
 10375                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10376                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10377                          ;		Unchanged: 
 10378                          ; Data sizes:
 10379                          ;		Autos:    0
 10380                          ;		Params:   1
 10381                          ;		Temp:     0
 10382                          ;		Total:    1
 10383                          ; This function calls:
 10384                          ;		Nothing
 10385                          ; This function is called by:
 10386                          ;		_printf
 10387                          ; This function uses a non-reentrant model
 10388                          ; 
 10389                          	file	"../common/isdigit.c"
 10390                          	line	13
 10391  0023                    	__size_of_isdigit	equ	__end_of_isdigit-_isdigit
 10392                          ;isdigit.c: 7: bit
 10393                          ;isdigit.c: 8: isdigit(char c)
 10394                          ;isdigit.c: 13: {
 10395                          ;			
 10396  696A                    _isdigit:	
 10397                          	opt	disable
 10398                          	line	14
 10399                          ;isdigit.c: 14: return c <= '9' && c >= '0';
 10400  696A  70 CF             	and	f, 0xCF   ;select user reg space
 10401  696C  62 D0 00          	mov	reg[CUR_PP],0
 10402  696F  51 41             	mov	a,[0+((isdigit@c)^0x0)]
 10403  6971  39 3A             	cmp	a,<((03Ah))
 10404  6973  D00C              	jnc	l600002267
 10405  6975  70 CF             	and	f, 0xCF   ;select user reg space
 10406  6977  62 D0 00          	mov	reg[CUR_PP],0
 10407  697A  51 41             	mov	a,[0+((isdigit@c)^0x0)]
 10408  697C  39 30             	cmp	a,<((030h))
 10409  697E  D006              	jnc	l400002265
 10410                          ;			
 10411  6980                    l600002267:	
 10412  6980  70 FB             	clrc
 10413  6982  7D 6987           	xjmp	l400002266
 10414                          ;			
 10415  6985                    l400002265:	
 10416  6985  71 04             	setc
 10417                          ;			
 10418  6987                    l400002266:	
 10419  6987  7D 698A           	xjmp	l221
 10420                          	line	15
 10421                          ;isdigit.c: 15: }
 10422  698A                    l221:
 10423                          ;			
 10424  698A  70 CF             	and	f, 0xCF   ;select user reg space
 10425                          	
 10426  698C  7F                	ret
 10427                          GLOBAL __end_of_isdigit
 10428  698D                    	__end_of_isdigit:
 10429                          	FNSIZE	_isdigit,0,1
 10430                          ; =============== function _isdigit ends ============
 10431                          
 10432                          	signat	_isdigit,4216
 10433                          	global	_delay_10ms
 10434                          	global	??_delay_10ms
 10435                          	global	?_delay_10ms
 10436                          	psect	text
 10437                          
 10438                          ; *************** function _delay_10ms *****************
 10439                          ; Defined at:
 10440                          ;		line 174 in file "./oo.c"
 10441                          ; Parameters:
 10442                          ;		None
 10443                          ; Auto variables:
 10444                          ;		counter     	       	type: short 
 10445                          ; Return value:
 10446                          ;		type: void 
 10447                          ;		size: 0
 10448                          ; Registers used:
 10449                          ;		a, CUR_PP
 10450                          ; Tracked objects:
 10451                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10452                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10453                          ;		Unchanged: 
 10454                          ; Data sizes:
 10455                          ;		Autos:    2
 10456                          ;		Params:   0
 10457                          ;		Temp:     0
 10458                          ;		Total:    2
 10459                          ; This function calls:
 10460                          ;		Nothing
 10461                          ; This function is called by:
 10462                          ;		_oo_wait_for_completion
 10463                          ; This function uses a non-reentrant model
 10464                          ; 
 10465                          	file	"./oo.c"
 10466                          	line	174
 10467  003D                    	__size_of_delay_10ms	equ	__end_of_delay_10ms-_delay_10ms
 10468                          ;oo.c: 174: void delay_10ms(){
 10469                          ;			
 10470  698D                    _delay_10ms:	
 10471                          	opt	disable
 10472                          	line	177
 10473                          ;oo.c: 175: short counter;
 10474                          ;oo.c: 177: for (counter = 0; counter<8*430; counter++){
 10475  698D  50 00             	mov	a,<(0)
 10476  698F  70 CF             	and	f, 0xCF   ;select user reg space
 10477  6991  62 D0 00          	mov	reg[CUR_PP],0
 10478  6994  53 17             	mov	[1+((delay_10ms@counter)^0x0)],a
 10479  6996  50 00             	mov	a,>(0)
 10480  6998  53 16             	mov	[0+((delay_10ms@counter)^0x0)],a
 10481  699A  51 17             	mov	a,[1+((delay_10ms@counter)^0x0)]
 10482  699C  39 70             	cmp	a,<(0D70h)
 10483  699E  51 16             	mov	a,[0+((delay_10ms@counter)^0x0)]
 10484  69A0  31 80             	xor	a,80h
 10485  69A2  19 8D             	sbb	a,(>0D70h)^80h
 10486  69A4  C004              	jc	l41
 10487  69A6  7D 69C7           	xjmp	l42
 10488                          ;			
 10489  69A9                    l41:	
 10490                          	line	178
 10491                          # 178 "./oo.c"
 10492  69A9  40                nop ;#
 10493                          	psect	text
 10494                          	line	177
 10495                          ;oo.c: 178: asm("nop");
 10496  69AA  70 CF             	and	f, 0xCF   ;select user reg space
 10497  69AC  62 D0 00          	mov	reg[CUR_PP],0
 10498  69AF  51 17             	mov	a,[1+((delay_10ms@counter)^0x0)]
 10499  69B1  01 01             	add	a,<(01h)
 10500  69B3  53 17             	mov	[1+((delay_10ms@counter)^0x0)],a
 10501  69B5  51 16             	mov	a,[0+((delay_10ms@counter)^0x0)]
 10502  69B7  09 00             	adc	a,>(01h)
 10503  69B9  53 16             	mov	[0+((delay_10ms@counter)^0x0)],a
 10504  69BB  51 17             	mov	a,[1+((delay_10ms@counter)^0x0)]
 10505  69BD  39 70             	cmp	a,<(0D70h)
 10506  69BF  51 16             	mov	a,[0+((delay_10ms@counter)^0x0)]
 10507  69C1  31 80             	xor	a,80h
 10508  69C3  19 8D             	sbb	a,(>0D70h)^80h
 10509  69C5  CFE3              	jc	l41
 10510                          ;			
 10511  69C7                    l42:	
 10512                          	line	180
 10513                          ;oo.c: 179: }
 10514                          ;oo.c: 180: }
 10515  69C7                    l40:
 10516                          ;			
 10517  69C7  70 CF             	and	f, 0xCF   ;select user reg space
 10518                          	
 10519  69C9  7F                	ret
 10520                          GLOBAL __end_of_delay_10ms
 10521  69CA                    	__end_of_delay_10ms:
 10522                          	FNSIZE	_delay_10ms,2,0
 10523                          ; =============== function _delay_10ms ends ============
 10524                          
 10525                          	signat	_delay_10ms,88
 10526                          	global	_oo_conversion_busy
 10527                          	global	??_oo_conversion_busy
 10528                          	global	?_oo_conversion_busy
 10529                          	psect	text
 10530                          
 10531                          ; *************** function _oo_conversion_busy *****************
 10532                          ; Defined at:
 10533                          ;		line 149 in file "./oo.c"
 10534                          ; Parameters:
 10535                          ;		None
 10536                          ; Auto variables:
 10537                          ;		None
 10538                          ; Return value:
 10539                          ;		type: unsigned char 
 10540                          ;		size: 1
 10541                          ; Registers used:
 10542                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
 10543                          ; Tracked objects:
 10544                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10545                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10546                          ;		Unchanged: 
 10547                          ; Data sizes:
 10548                          ;		Autos:    0
 10549                          ;		Params:   0
 10550                          ;		Temp:     0
 10551                          ;		Total:    0
 10552                          ; This function calls:
 10553                          ;		_oo_rx_byte
 10554                          ; This function is called by:
 10555                          ;		_oo_wait_for_completion
 10556                          ; This function uses a non-reentrant model
 10557                          ; 
 10558                          	file	"./oo.c"
 10559                          	line	149
 10560  0016                    	__size_of_oo_conversion_busy	equ	__end_of_oo_conversion_busy-_oo_conversion_busy
 10561                          ;oo.c: 149: char oo_conversion_busy(){
 10562                          ;			
 10563  69CA                    _oo_conversion_busy:	
 10564                          	opt	disable
 10565                          	line	150
 10566                          ;oo.c: 150: if (oo_rx_byte() == 0x00){
 10567  69CA  71 80             	or	f, 0x80	;select multiple RAM page mode
 10568                          	
 10569  69CC  7C 69F4           	xcall	_oo_rx_byte
 10570                          	
 10571  69CF  39 00             	cmp	a,(0)
 10572  69D1  B006              	jnz	l37
 10573                          	line	151
 10574                          ;oo.c: 151: return 1;
 10575  69D3  50 01             	mov	a,<((01h))
 10576  69D5  7D 69DD           	xjmp	l36
 10577                          	line	152
 10578                          ;			
 10579  69D8                    l37:	
 10580                          	line	153
 10581                          ;oo.c: 153: return 0;
 10582  69D8  50 00             	mov	a,<((0))
 10583  69DA  7D 69DD           	xjmp	l36
 10584                          	line	155
 10585                          ;oo.c: 154: }
 10586                          ;oo.c: 155: }
 10587  69DD                    l36:
 10588                          ;			
 10589  69DD  70 CF             	and	f, 0xCF   ;select user reg space
 10590                          	
 10591  69DF  7F                	ret
 10592                          GLOBAL __end_of_oo_conversion_busy
 10593  69E0                    	__end_of_oo_conversion_busy:
 10594                          	FNSIZE	_oo_conversion_busy,0,0
 10595                          ; =============== function _oo_conversion_busy ends ============
 10596                          
 10597                          	signat	_oo_conversion_busy,89
 10598                          	global	_OneWire_fReset
 10599                          	global	_oo_tx_byte
 10600                          	global	??_oo_tx_byte
 10601                          	global	?_oo_tx_byte
 10602                          	psect	text
 10603                          
 10604                          ; *************** function _oo_tx_byte *****************
 10605                          ; Defined at:
 10606                          ;		line 62 in file "./oo.c"
 10607                          ; Parameters:
 10608                          ;		data        	offs:   0	type: unsigned char 
 10609                          ; Auto variables:
 10610                          ;		None
 10611                          ; Return value:
 10612                          ;		type: void 
 10613                          ;		size: 0
 10614                          ; Registers used:
 10615                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
 10616                          ; Tracked objects:
 10617                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10618                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10619                          ;		Unchanged: 
 10620                          ; Data sizes:
 10621                          ;		Autos:    0
 10622                          ;		Params:   1
 10623                          ;		Temp:     0
 10624                          ;		Total:    1
 10625                          ; This function calls:
 10626                          ;		_OneWire_WriteByte
 10627                          ; This function is called by:
 10628                          ;		_oo_read_scratchpad
 10629                          ;		_oo_start_conversion
 10630                          ; This function uses a non-reentrant model
 10631                          ; 
 10632                          	file	"./oo.c"
 10633                          	line	62
 10634  0014                    	__size_of_oo_tx_byte	equ	__end_of_oo_tx_byte-_oo_tx_byte
 10635                          ;oo.c: 62: void oo_tx_byte(char data){
 10636                          ;			
 10637  69E0                    _oo_tx_byte:	
 10638                          	opt	disable
 10639                          	line	63
 10640                          ;oo.c: 63: OneWire_WriteByte(data);
 10641  69E0  70 CF             	and	f, 0xCF   ;select user reg space
 10642  69E2  62 D0 00          	mov	reg[CUR_PP],0
 10643  69E5  51 34             	mov	a,[0+((oo_tx_byte@data)^0x0)]
 10644  69E7  71 80             	or	f, 0x80	;select multiple RAM page mode
 10645                          	
 10646  69E9  7C 3A27           	xcall	_OneWire_WriteByte
 10647                          	
 10648  69EC  38 00             	add	sp,0
 10649                          	line	64
 10650                          ;oo.c: 64: return;
 10651  69EE  7D 69F1           	xjmp	l28
 10652                          	line	65
 10653                          ;oo.c: 65: }
 10654  69F1                    l28:
 10655                          ;			
 10656  69F1  70 CF             	and	f, 0xCF   ;select user reg space
 10657                          	
 10658  69F3  7F                	ret
 10659                          GLOBAL __end_of_oo_tx_byte
 10660  69F4                    	__end_of_oo_tx_byte:
 10661                          	FNSIZE	_oo_tx_byte,0,1
 10662                          ; =============== function _oo_tx_byte ends ============
 10663                          
 10664                          	signat	_oo_tx_byte,4216
 10665                          	global	_oo_rx_byte
 10666                          	global	??_oo_rx_byte
 10667                          	global	?_oo_rx_byte
 10668                          	psect	text
 10669                          
 10670                          ; *************** function _oo_rx_byte *****************
 10671                          ; Defined at:
 10672                          ;		line 72 in file "./oo.c"
 10673                          ; Parameters:
 10674                          ;		None
 10675                          ; Auto variables:
 10676                          ;		data        	       	type: unsigned char 
 10677                          ; Return value:
 10678                          ;		type: unsigned char 
 10679                          ;		size: 1
 10680                          ; Registers used:
 10681                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
 10682                          ; Tracked objects:
 10683                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10684                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10685                          ;		Unchanged: 
 10686                          ; Data sizes:
 10687                          ;		Autos:    1
 10688                          ;		Params:   0
 10689                          ;		Temp:     0
 10690                          ;		Total:    1
 10691                          ; This function calls:
 10692                          ;		_OneWire_bReadByte
 10693                          ;		_oo_crc_shuffle_byte
 10694                          ; This function is called by:
 10695                          ;		_oo_read_scratchpad
 10696                          ;		_oo_conversion_busy
 10697                          ; This function uses a non-reentrant model
 10698                          ; 
 10699                          	file	"./oo.c"
 10700                          	line	72
 10701  0034                    	__size_of_oo_rx_byte	equ	__end_of_oo_rx_byte-_oo_rx_byte
 10702                          ;oo.c: 72: char oo_rx_byte(){
 10703                          ;			
 10704  69F4                    _oo_rx_byte:	
 10705                          	opt	disable
 10706                          	line	74
 10707                          ;oo.c: 74: char data = 0;
 10708  69F4  50 00             	mov	a,<((0))
 10709  69F6  70 CF             	and	f, 0xCF   ;select user reg space
 10710  69F8  62 D0 00          	mov	reg[CUR_PP],0
 10711  69FB  53 34             	mov	[0+((oo_rx_byte@data)^0x0)],a
 10712                          	line	76
 10713                          ;oo.c: 76: data = OneWire_bReadByte();
 10714  69FD  71 80             	or	f, 0x80	;select multiple RAM page mode
 10715  69FF  70 CF             	and	f, 0xCF   ;select user reg space
 10716                          	
 10717  6A01  7C 3A42           	xcall	_OneWire_bReadByte
 10718                          	
 10719  6A04  38 00             	add	sp,0
 10720  6A06  70 CF             	and	f, 0xCF   ;select user reg space
 10721  6A08  62 D0 00          	mov	reg[CUR_PP],0
 10722  6A0B  53 34             	mov	[0+((oo_rx_byte@data)^0x0)],a
 10723                          	line	79
 10724                          ;oo.c: 79: oo_crc_shuffle_byte(data);
 10725  6A0D  70 CF             	and	f, 0xCF   ;select user reg space
 10726  6A0F  62 D0 00          	mov	reg[CUR_PP],0
 10727  6A12  51 34             	mov	a,[0+((oo_rx_byte@data)^0x0)]
 10728  6A14  53 35             	mov	[0+((?_oo_crc_shuffle_byte)^0x0)],a
 10729  6A16  71 80             	or	f, 0x80	;select multiple RAM page mode
 10730                          	
 10731  6A18  7C 715A           	xcall	_oo_crc_shuffle_byte
 10732                          	
 10733                          	line	81
 10734                          ;oo.c: 81: return data;
 10735  6A1B  70 CF             	and	f, 0xCF   ;select user reg space
 10736  6A1D  62 D0 00          	mov	reg[CUR_PP],0
 10737  6A20  51 34             	mov	a,[0+((oo_rx_byte@data)^0x0)]
 10738  6A22  7D 6A25           	xjmp	l29
 10739                          	line	82
 10740                          ;oo.c: 82: }
 10741  6A25                    l29:
 10742                          ;			
 10743  6A25  70 CF             	and	f, 0xCF   ;select user reg space
 10744                          	
 10745  6A27  7F                	ret
 10746                          GLOBAL __end_of_oo_rx_byte
 10747  6A28                    	__end_of_oo_rx_byte:
 10748                          	FNSIZE	_oo_rx_byte,1,0
 10749                          ; =============== function _oo_rx_byte ends ============
 10750                          
 10751                          	signat	_oo_rx_byte,89
 10752                          	global	___awmod
 10753                          	global	??___awmod
 10754                          	global	?___awmod
 10755                          	psect	text
 10756                          
 10757                          ; *************** function ___awmod *****************
 10758                          ; Defined at:
 10759                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awmod.c"
 10760                          ; Parameters:
 10761                          ;		dividend    	offs:   0	type: int 
 10762                          ;		divisor     	offs:   2	type: int 
 10763                          ; Auto variables:
 10764                          ;		counter     	       	type: unsigned char 
 10765                          ;		sign        	       	type: unsigned char 
 10766                          ; Return value:
 10767                          ;		type: int 
 10768                          ;		size: 2
 10769                          ; Registers used:
 10770                          ;		a, CUR_PP
 10771                          ; Tracked objects:
 10772                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10773                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10774                          ;		Unchanged: 
 10775                          ; Data sizes:
 10776                          ;		Autos:    2
 10777                          ;		Params:   4
 10778                          ;		Temp:     2
 10779                          ;		Total:    8
 10780                          ; This function calls:
 10781                          ;		Nothing
 10782                          ; This function is called by:
 10783                          ;		_fround
 10784                          ;		_scale
 10785                          ; This function uses a non-reentrant model
 10786                          ; 
 10787                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awmod.c"
 10788                          	line	5
 10789  0114                    	__size_of___awmod	equ	__end_of___awmod-___awmod
 10790                          ;awmod.c: 3: signed int
 10791                          ;awmod.c: 4: __awmod(signed int dividend, signed int divisor)
 10792                          ;awmod.c: 5: {
 10793                          ;			
 10794  6A28                    ___awmod:	
 10795                          	opt	disable
 10796                          	line	8
 10797                          ;awmod.c: 6: unsigned char counter, sign;
 10798                          ;awmod.c: 8: sign = 0;
 10799  6A28  50 00             	mov	a,<((0))
 10800  6A2A  70 CF             	and	f, 0xCF   ;select user reg space
 10801  6A2C  62 D0 00          	mov	reg[CUR_PP],0
 10802  6A2F  53 62             	mov	[0+((___awmod@sign)^0x0)],a
 10803                          	line	9
 10804                          ;awmod.c: 9: if(dividend < 0) {
 10805  6A31  51 5F             	mov	a,[1+((___awmod@dividend)^0x0)]
 10806  6A33  39 00             	cmp	a,<(0)
 10807  6A35  51 5E             	mov	a,[0+((___awmod@dividend)^0x0)]
 10808  6A37  31 80             	xor	a,80h
 10809  6A39  19 80             	sbb	a,(>0)^80h
 10810  6A3B  D017              	jnc	l523
 10811                          	line	10
 10812                          ;awmod.c: 10: dividend = -dividend;
 10813  6A3D  70 CF             	and	f, 0xCF   ;select user reg space
 10814  6A3F  62 D0 00          	mov	reg[CUR_PP],0
 10815  6A42  51 5F             	mov	a,[1+((___awmod@dividend)^0x0)]
 10816  6A44  73                	cpl	a
 10817  6A45  74                	inc	a
 10818  6A46  53 5F             	mov	[1+((___awmod@dividend)^0x0)],a
 10819  6A48  51 5E             	mov	a,[0+((___awmod@dividend)^0x0)]
 10820  6A4A  73                	cpl	a
 10821  6A4B  09 00             	adc	a,0
 10822  6A4D  53 5E             	mov	[0+((___awmod@dividend)^0x0)],a
 10823                          	line	11
 10824                          ;awmod.c: 11: sign = 1;
 10825  6A4F  50 01             	mov	a,<((01h))
 10826  6A51  53 62             	mov	[0+((___awmod@sign)^0x0)],a
 10827                          	line	12
 10828                          ;			
 10829  6A53                    l523:	
 10830                          	line	13
 10831                          ;awmod.c: 12: }
 10832                          ;awmod.c: 13: if(divisor < 0)
 10833  6A53  70 CF             	and	f, 0xCF   ;select user reg space
 10834  6A55  62 D0 00          	mov	reg[CUR_PP],0
 10835  6A58  51 61             	mov	a,[1+((___awmod@divisor)^0x0)]
 10836  6A5A  39 00             	cmp	a,<(0)
 10837  6A5C  51 60             	mov	a,[0+((___awmod@divisor)^0x0)]
 10838  6A5E  31 80             	xor	a,80h
 10839  6A60  19 80             	sbb	a,(>0)^80h
 10840  6A62  D013              	jnc	l524
 10841                          	line	14
 10842                          ;awmod.c: 14: divisor = -divisor;
 10843  6A64  70 CF             	and	f, 0xCF   ;select user reg space
 10844  6A66  62 D0 00          	mov	reg[CUR_PP],0
 10845  6A69  51 61             	mov	a,[1+((___awmod@divisor)^0x0)]
 10846  6A6B  73                	cpl	a
 10847  6A6C  74                	inc	a
 10848  6A6D  53 61             	mov	[1+((___awmod@divisor)^0x0)],a
 10849  6A6F  51 60             	mov	a,[0+((___awmod@divisor)^0x0)]
 10850  6A71  73                	cpl	a
 10851  6A72  09 00             	adc	a,0
 10852  6A74  53 60             	mov	[0+((___awmod@divisor)^0x0)],a
 10853                          ;			
 10854  6A76                    l524:	
 10855                          	line	15
 10856                          ;awmod.c: 15: if(divisor != 0) {
 10857  6A76  70 CF             	and	f, 0xCF   ;select user reg space
 10858  6A78  62 D0 00          	mov	reg[CUR_PP],0
 10859  6A7B  51 60             	mov	a,[0+((___awmod@divisor)^0x0)]
 10860  6A7D  39 00             	cmp	a,>(0)
 10861  6A7F  B005              	jnz	u2353
 10862  6A81  51 61             	mov	a,[1+((___awmod@divisor)^0x0)]
 10863  6A83  39 00             	cmp	a,<(0)
 10864  6A85                    u2353:
 10865  6A85  A08A              	jz	l525
 10866                          	line	16
 10867                          ;awmod.c: 16: counter = 1;
 10868  6A87  50 01             	mov	a,<((01h))
 10869  6A89  70 CF             	and	f, 0xCF   ;select user reg space
 10870  6A8B  62 D0 00          	mov	reg[CUR_PP],0
 10871  6A8E  53 63             	mov	[0+((___awmod@counter)^0x0)],a
 10872                          	line	17
 10873                          ;awmod.c: 17: while(((unsigned int)divisor & 0x8000U) == 0) {
 10874  6A90  7D 6AAF           	xjmp	l526
 10875                          ;			
 10876  6A93                    l527:	
 10877                          	line	18
 10878                          ;awmod.c: 18: divisor <<= 1;
 10879  6A93  50 01             	mov	a,<((01h))
 10880  6A95  7D 6AA1           	xjmp	u2363
 10881  6A98                    u2374:
 10882  6A98  70 CF             	and	f, 0xCF   ;select user reg space
 10883  6A9A  62 D0 00          	mov	reg[CUR_PP],0
 10884  6A9D  65 61             	asl	[1+((___awmod@divisor)^0x0)]
 10885  6A9F  6B 60             	rlc	[0+((___awmod@divisor)^0x0)]
 10886  6AA1                    u2363:
 10887  6AA1  78                	dec	a
 10888  6AA2  DFF5              	jnc	u2374
 10889                          	line	19
 10890                          ;awmod.c: 19: counter++;
 10891  6AA4  70 CF             	and	f, 0xCF   ;select user reg space
 10892  6AA6  62 D0 00          	mov	reg[CUR_PP],0
 10893  6AA9  51 63             	mov	a,[0+((___awmod@counter)^0x0)]
 10894  6AAB  01 01             	add	a,<((01h))
 10895  6AAD  53 63             	mov	[0+((___awmod@counter)^0x0)],a
 10896                          	line	20
 10897                          ;			
 10898  6AAF                    l526:	
 10899                          	line	17
 10900  6AAF  70 CF             	and	f, 0xCF   ;select user reg space
 10901  6AB1  62 D0 00          	mov	reg[CUR_PP],0
 10902  6AB4  51 61             	mov	a,[1+((___awmod@divisor)^0x0)]
 10903  6AB6  21 00             	and	a,<(08000h)
 10904  6AB8  53 65             	mov	[(??___awmod^0x0)+2+0+1],a
 10905  6ABA  51 60             	mov	a,[0+((___awmod@divisor)^0x0)]
 10906  6ABC  21 80             	and	a,>(08000h)
 10907  6ABE  53 64             	mov	[(??___awmod^0x0)+2+0],a
 10908  6AC0  51 64             	mov	a,[(??___awmod^0x0)+2+0]
 10909  6AC2  39 00             	cmp	a,>(0)
 10910  6AC4  B005              	jnz	u2383
 10911  6AC6  51 65             	mov	a,[(??___awmod^0x0)+2+1]
 10912  6AC8  39 00             	cmp	a,<(0)
 10913  6ACA                    u2383:
 10914  6ACA  AFC8              	jz	l527
 10915                          ;			
 10916  6ACC                    l528:	
 10917                          	line	21
 10918                          ;awmod.c: 20: }
 10919                          ;awmod.c: 21: do {
 10920                          ;			
 10921  6ACC                    l531:	
 10922                          	line	22
 10923                          ;awmod.c: 22: if((unsigned int)divisor <= (unsigned int)dividend)
 10924  6ACC  70 CF             	and	f, 0xCF   ;select user reg space
 10925  6ACE  62 D0 00          	mov	reg[CUR_PP],0
 10926  6AD1  51 5F             	mov	a,[1+((___awmod@dividend)^0x0)]
 10927  6AD3  3A 61             	cmp	a,[1+((___awmod@divisor)^0x0)]
 10928  6AD5  51 5E             	mov	a,[0+((___awmod@dividend)^0x0)]
 10929  6AD7  1A 60             	sbb	a,[0+((___awmod@divisor)^0x0)]
 10930  6AD9                    u2393:
 10931  6AD9  C012              	jc	l532
 10932                          	line	23
 10933                          ;awmod.c: 23: dividend -= divisor;
 10934  6ADB  70 CF             	and	f, 0xCF   ;select user reg space
 10935  6ADD  62 D0 00          	mov	reg[CUR_PP],0
 10936  6AE0  51 5F             	mov	a,[1+((___awmod@dividend)^0x0)]
 10937  6AE2  12 61             	sub	a,[1+((___awmod@divisor)^0x0)]
 10938  6AE4  53 5F             	mov	[1+((___awmod@dividend)^0x0)],a
 10939  6AE6  51 5E             	mov	a,[0+((___awmod@dividend)^0x0)]
 10940  6AE8  1A 60             	sbb	a,[0+((___awmod@divisor)^0x0)]
 10941  6AEA  53 5E             	mov	[0+((___awmod@dividend)^0x0)],a
 10942                          ;			
 10943  6AEC                    l532:	
 10944                          	line	24
 10945                          ;awmod.c: 24: *(unsigned int *)&divisor >>= 1;
 10946  6AEC  50 01             	mov	a,<((01h))
 10947  6AEE  7D 6AFC           	xjmp	u2403
 10948  6AF1  70 FB             	clrc
 10949  6AF3                    u2414:
 10950  6AF3  70 CF             	and	f, 0xCF   ;select user reg space
 10951  6AF5  62 D0 00          	mov	reg[CUR_PP],0
 10952  6AF8  6E 60             	rrc	[0+((___awmod@divisor)^0x0)]
 10953  6AFA  6E 61             	rrc	[1+((___awmod@divisor)^0x0)]
 10954  6AFC                    u2403:
 10955  6AFC  78                	dec	a
 10956  6AFD  DFF5              	jnc	u2414
 10957                          	line	25
 10958                          ;awmod.c: 25: } while(--counter != 0);
 10959  6AFF  70 CF             	and	f, 0xCF   ;select user reg space
 10960  6B01  62 D0 00          	mov	reg[CUR_PP],0
 10961  6B04  51 63             	mov	a,[0+((___awmod@counter)^0x0)]
 10962  6B06  11 01             	sub	a,<((01h))
 10963  6B08  53 63             	mov	[0+((___awmod@counter)^0x0)],a
 10964  6B0A  51 63             	mov	a,[0+((___awmod@counter)^0x0)]
 10965  6B0C  39 00             	cmp	a,(0)
 10966  6B0E  BFBD              	jnz	l531
 10967                          ;			
 10968  6B10                    l530:	
 10969                          	line	26
 10970                          ;			
 10971  6B10                    l525:	
 10972                          	line	27
 10973                          ;awmod.c: 26: }
 10974                          ;awmod.c: 27: if(sign)
 10975  6B10  70 CF             	and	f, 0xCF   ;select user reg space
 10976  6B12  62 D0 00          	mov	reg[CUR_PP],0
 10977  6B15  51 62             	mov	a,[0+((___awmod@sign)^0x0)]
 10978  6B17  39 00             	cmp	a,(0)
 10979  6B19  A013              	jz	l533
 10980                          	line	28
 10981                          ;awmod.c: 28: dividend = -dividend;
 10982  6B1B  70 CF             	and	f, 0xCF   ;select user reg space
 10983  6B1D  62 D0 00          	mov	reg[CUR_PP],0
 10984  6B20  51 5F             	mov	a,[1+((___awmod@dividend)^0x0)]
 10985  6B22  73                	cpl	a
 10986  6B23  74                	inc	a
 10987  6B24  53 5F             	mov	[1+((___awmod@dividend)^0x0)],a
 10988  6B26  51 5E             	mov	a,[0+((___awmod@dividend)^0x0)]
 10989  6B28  73                	cpl	a
 10990  6B29  09 00             	adc	a,0
 10991  6B2B  53 5E             	mov	[0+((___awmod@dividend)^0x0)],a
 10992                          ;			
 10993  6B2D                    l533:	
 10994                          	line	29
 10995                          ;awmod.c: 29: return dividend;
 10996  6B2D  70 CF             	and	f, 0xCF   ;select user reg space
 10997  6B2F  62 D0 00          	mov	reg[CUR_PP],0
 10998  6B32  51 5F             	mov	a,[1+((___awmod@dividend)^0x0)]
 10999  6B34  58 5E             	mov	x,[0+((___awmod@dividend)^0x0)]
 11000  6B36  7D 6B39           	xjmp	l522
 11001                          	line	30
 11002                          ;awmod.c: 30: }
 11003  6B39                    l522:
 11004                          ;			
 11005  6B39  70 CF             	and	f, 0xCF   ;select user reg space
 11006                          	
 11007  6B3B  7F                	ret
 11008                          GLOBAL __end_of___awmod
 11009  6B3C                    	__end_of___awmod:
 11010                          	FNSIZE	___awmod,4,4
 11011                          ; =============== function ___awmod ends ============
 11012                          
 11013                          	signat	___awmod,8314
 11014                          	global	_log
 11015                          	global	??_log
 11016                          	global	?_log
 11017                          	psect	text
 11018                          
 11019                          ; *************** function _log *****************
 11020                          ; Defined at:
 11021                          ;		line 6 in file "../common/log.c"
 11022                          ; Parameters:
 11023                          ;		x           	offs:   0	type: int 
 11024                          ; Auto variables:
 11025                          ;		exp         	       	type: int 
 11026                          ; Return value:
 11027                          ;		type: int 
 11028                          ;		size: 4
 11029                          ; Registers used:
 11030                          ;		a, x, CUR_PP, mret
 11031                          ; Tracked objects:
 11032                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11033                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11034                          ;		Unchanged: 
 11035                          ; Data sizes:
 11036                          ;		Autos:    2
 11037                          ;		Params:   4
 11038                          ;		Temp:     1
 11039                          ;		Total:    7
 11040                          ; This function calls:
 11041                          ;		___flge
 11042                          ;		_frexp
 11043                          ;		___flmul
 11044                          ;		___fladd
 11045                          ;		_eval_poly
 11046                          ;		___awtofl
 11047                          ; This function is called by:
 11048                          ;		_log10
 11049                          ; This function uses a non-reentrant model
 11050                          ; 
 11051                          	file	"../common/log.c"
 11052                          	line	6
 11053  01F1                    	__size_of_log	equ	__end_of_log-_log
 11054                          ;log.c: 4: double
 11055                          ;log.c: 5: log(double x)
 11056                          ;log.c: 6: {
 11057                          ;			
 11058  6B3C                    _log:	
 11059                          	opt	disable
 11060                          	line	24
 11061                          ;log.c: 7: int exp;
 11062                          ;log.c: 9: static const double coeff[] =
 11063                          ;log.c: 10: {
 11064                          ;log.c: 11: 0.0000000000,
 11065                          ;log.c: 12: 0.9999964239,
 11066                          ;log.c: 13: -0.4998741238,
 11067                          ;log.c: 14: 0.3317990258,
 11068                          ;log.c: 15: -0.2407338084,
 11069                          ;log.c: 16: 0.1676540711,
 11070                          ;log.c: 17: -0.0953293897,
 11071                          ;log.c: 18: 0.0360884937,
 11072                          ;log.c: 19: -0.0064535442,
 11073                          ;log.c: 20: };
 11074                          ;log.c: 24: if(x < 0.0) {
 11075  6B3C  70 CF             	and	f, 0xCF   ;select user reg space
 11076  6B3E  62 D0 00          	mov	reg[CUR_PP],0
 11077  6B41  51 39             	mov	a,[0+((log@x)^0x0)]
 11078  6B43  53 41             	mov	[0+((?___flge)^0x0)],a
 11079  6B45  51 3A             	mov	a,[1+((log@x)^0x0)]
 11080  6B47  53 42             	mov	[1+((?___flge)^0x0)],a
 11081  6B49  51 3B             	mov	a,[2+((log@x)^0x0)]
 11082  6B4B  53 43             	mov	[2+((?___flge)^0x0)],a
 11083  6B4D  51 3C             	mov	a,[3+((log@x)^0x0)]
 11084  6B4F  53 44             	mov	[3+((?___flge)^0x0)],a
 11085  6B51  50 00             	mov	a,<(0x0>>24)
 11086  6B53  53 45             	mov	[0+((0+?___flge+04h)^0x0)],a
 11087  6B55  50 00             	mov	a,<(0x0>>16)
 11088  6B57  53 46             	mov	[1+((0+?___flge+04h)^0x0)],a
 11089  6B59  50 00             	mov	a,<(0x0>>8)
 11090  6B5B  53 47             	mov	[2+((0+?___flge+04h)^0x0)],a
 11091  6B5D  50 00             	mov	a,<(0x0)
 11092  6B5F  53 48             	mov	[3+((0+?___flge+04h)^0x0)],a
 11093  6B61  71 80             	or	f, 0x80	;select multiple RAM page mode
 11094                          	
 11095  6B63  7C 6F80           	xcall	___flge
 11096                          	
 11097  6B66  C026              	jc	l223
 11098                          	line	25
 11099                          ;log.c: 25: errno = 33;
 11100  6B68  50 21             	mov	a,<(021h)
 11101  6B6A  70 CF             	and	f, 0xCF   ;select user reg space
 11102  6B6C  71 80             	or	f, 0x80	;select multiple RAM page mode
 11103  6B6E  62 D0 02          	mov	reg[CUR_PP],2
 11104  6B71  53 12             	mov	[1+((_errno)^0x200)],a
 11105  6B73  50 00             	mov	a,>(021h)
 11106  6B75  53 11             	mov	[0+((_errno)^0x200)],a
 11107                          	line	26
 11108  6B77  50 00             	mov	a,<(0x0>>24)
 11109  6B79  62 D0 00          	mov	reg[CUR_PP],0
 11110  6B7C  53 39             	mov	[0+((?_log)^0x0)],a
 11111  6B7E  50 00             	mov	a,<(0x0>>16)
 11112  6B80  53 3A             	mov	[1+((?_log)^0x0)],a
 11113  6B82  50 00             	mov	a,<(0x0>>8)
 11114  6B84  53 3B             	mov	[2+((?_log)^0x0)],a
 11115  6B86  50 00             	mov	a,<(0x0)
 11116  6B88  53 3C             	mov	[3+((?_log)^0x0)],a
 11117  6B8A  7D 6D2A           	xjmp	l222
 11118                          	line	27
 11119                          ;			
 11120  6B8D                    l223:	
 11121                          	line	28
 11122                          ;log.c: 27: }
 11123                          ;log.c: 28: if(x == 0.0) {
 11124  6B8D  70 CF             	and	f, 0xCF   ;select user reg space
 11125  6B8F  62 D0 00          	mov	reg[CUR_PP],0
 11126  6B92  51 39             	mov	a,[0+((log@x)^0x0)]
 11127  6B94  39 00             	cmp	a,<(0x0>>24)
 11128  6B96  B011              	jnz	u1583
 11129  6B98  51 3A             	mov	a,[1+((log@x)^0x0)]
 11130  6B9A  39 00             	cmp	a,<(0x0>>16)
 11131  6B9C  B00B              	jnz	u1583
 11132  6B9E  51 3B             	mov	a,[2+((log@x)^0x0)]
 11133  6BA0  39 00             	cmp	a,<(0x0>>8)
 11134  6BA2  B005              	jnz	u1583
 11135  6BA4  51 3C             	mov	a,[3+((log@x)^0x0)]
 11136  6BA6  39 00             	cmp	a,<(0x0)
 11137  6BA8                    u1583:
 11138  6BA8  B026              	jnz	l224
 11139                          	line	29
 11140                          ;log.c: 29: errno = 34;
 11141  6BAA  50 22             	mov	a,<(022h)
 11142  6BAC  70 CF             	and	f, 0xCF   ;select user reg space
 11143  6BAE  71 80             	or	f, 0x80	;select multiple RAM page mode
 11144  6BB0  62 D0 02          	mov	reg[CUR_PP],2
 11145  6BB3  53 12             	mov	[1+((_errno)^0x200)],a
 11146  6BB5  50 00             	mov	a,>(022h)
 11147  6BB7  53 11             	mov	[0+((_errno)^0x200)],a
 11148                          	line	30
 11149  6BB9  50 00             	mov	a,<(0x0>>24)
 11150  6BBB  62 D0 00          	mov	reg[CUR_PP],0
 11151  6BBE  53 39             	mov	[0+((?_log)^0x0)],a
 11152  6BC0  50 00             	mov	a,<(0x0>>16)
 11153  6BC2  53 3A             	mov	[1+((?_log)^0x0)],a
 11154  6BC4  50 00             	mov	a,<(0x0>>8)
 11155  6BC6  53 3B             	mov	[2+((?_log)^0x0)],a
 11156  6BC8  50 00             	mov	a,<(0x0)
 11157  6BCA  53 3C             	mov	[3+((?_log)^0x0)],a
 11158  6BCC  7D 6D2A           	xjmp	l222
 11159                          	line	31
 11160                          ;			
 11161  6BCF                    l224:	
 11162                          	line	32
 11163                          ;log.c: 31: }
 11164                          ;log.c: 32: x = frexp(x, &exp) * 2.0 - 1.0;
 11165  6BCF  70 CF             	and	f, 0xCF   ;select user reg space
 11166  6BD1  62 D0 00          	mov	reg[CUR_PP],0
 11167  6BD4  51 39             	mov	a,[0+((log@x)^0x0)]
 11168  6BD6  53 40             	mov	[0+((?_frexp)^0x0)],a
 11169  6BD8  51 3A             	mov	a,[1+((log@x)^0x0)]
 11170  6BDA  53 41             	mov	[1+((?_frexp)^0x0)],a
 11171  6BDC  51 3B             	mov	a,[2+((log@x)^0x0)]
 11172  6BDE  53 42             	mov	[2+((?_frexp)^0x0)],a
 11173  6BE0  51 3C             	mov	a,[3+((log@x)^0x0)]
 11174  6BE2  53 43             	mov	[3+((?_frexp)^0x0)],a
 11175  6BE4  50 3D             	mov	a,<((log@exp|8000h))
 11176  6BE6  53 45             	mov	[1+((0+?_frexp+04h)^0x0)],a
 11177  6BE8  50 80             	mov	a,>((log@exp|8000h))
 11178  6BEA  53 44             	mov	[0+((0+?_frexp+04h)^0x0)],a
 11179  6BEC  71 80             	or	f, 0x80	;select multiple RAM page mode
 11180                          	
 11181  6BEE  7C 717D           	xcall	_frexp
 11182                          	
 11183  6BF1  70 CF             	and	f, 0xCF   ;select user reg space
 11184  6BF3  62 D0 00          	mov	reg[CUR_PP],0
 11185  6BF6  51 40             	mov	a,[0+((0+?_frexp)^0x0)]
 11186  6BF8  53 5E             	mov	[0+((?___flmul)^0x0)],a
 11187  6BFA  51 41             	mov	a,[1+((0+?_frexp)^0x0)]
 11188  6BFC  53 5F             	mov	[1+((?___flmul)^0x0)],a
 11189  6BFE  51 42             	mov	a,[2+((0+?_frexp)^0x0)]
 11190  6C00  53 60             	mov	[2+((?___flmul)^0x0)],a
 11191  6C02  51 43             	mov	a,[3+((0+?_frexp)^0x0)]
 11192  6C04  53 61             	mov	[3+((?___flmul)^0x0)],a
 11193  6C06  50 40             	mov	a,<(0x40000000>>24)
 11194  6C08  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
 11195  6C0A  50 00             	mov	a,<(0x40000000>>16)
 11196  6C0C  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
 11197  6C0E  50 00             	mov	a,<(0x40000000>>8)
 11198  6C10  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
 11199  6C12  50 00             	mov	a,<(0x40000000)
 11200  6C14  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
 11201  6C16  71 80             	or	f, 0x80	;select multiple RAM page mode
 11202                          	
 11203  6C18  7C 7201           	xcall	___flmul
 11204                          	
 11205  6C1B  70 CF             	and	f, 0xCF   ;select user reg space
 11206  6C1D  62 D0 00          	mov	reg[CUR_PP],0
 11207  6C20  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
 11208  6C22  53 4D             	mov	[0+((?___fladd)^0x0)],a
 11209  6C24  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
 11210  6C26  53 4E             	mov	[1+((?___fladd)^0x0)],a
 11211  6C28  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
 11212  6C2A  53 4F             	mov	[2+((?___fladd)^0x0)],a
 11213  6C2C  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
 11214  6C2E  53 50             	mov	[3+((?___fladd)^0x0)],a
 11215  6C30  50 BF             	mov	a,<(0xbf800000>>24)
 11216  6C32  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
 11217  6C34  50 80             	mov	a,<(0xbf800000>>16)
 11218  6C36  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
 11219  6C38  50 00             	mov	a,<(0xbf800000>>8)
 11220  6C3A  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
 11221  6C3C  50 00             	mov	a,<(0xbf800000)
 11222  6C3E  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
 11223  6C40  71 80             	or	f, 0x80	;select multiple RAM page mode
 11224                          	
 11225  6C42  7C 7416           	xcall	___fladd
 11226                          	
 11227  6C45  70 CF             	and	f, 0xCF   ;select user reg space
 11228  6C47  62 D0 00          	mov	reg[CUR_PP],0
 11229  6C4A  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
 11230  6C4C  53 39             	mov	[0+((log@x)^0x0)],a
 11231  6C4E  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
 11232  6C50  53 3A             	mov	[1+((log@x)^0x0)],a
 11233  6C52  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
 11234  6C54  53 3B             	mov	[2+((log@x)^0x0)],a
 11235  6C56  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
 11236  6C58  53 3C             	mov	[3+((log@x)^0x0)],a
 11237                          	line	33
 11238                          ;log.c: 33: exp--;
 11239  6C5A  70 CF             	and	f, 0xCF   ;select user reg space
 11240  6C5C  62 D0 00          	mov	reg[CUR_PP],0
 11241  6C5F  51 3E             	mov	a,[1+((log@exp)^0x0)]
 11242  6C61  01 FF             	add	a,<(-1)
 11243  6C63  53 3E             	mov	[1+((log@exp)^0x0)],a
 11244  6C65  51 3D             	mov	a,[0+((log@exp)^0x0)]
 11245  6C67  09 FF             	adc	a,>(-1)
 11246  6C69  53 3D             	mov	[0+((log@exp)^0x0)],a
 11247                          	line	34
 11248                          ;log.c: 34: x = eval_poly(x, coeff, sizeof coeff/sizeof coeff[0] - 1);
 11249  6C6B  70 CF             	and	f, 0xCF   ;select user reg space
 11250  6C6D  62 D0 00          	mov	reg[CUR_PP],0
 11251  6C70  51 39             	mov	a,[0+((log@x)^0x0)]
 11252  6C72  53 40             	mov	[0+((?_eval_poly)^0x0)],a
 11253  6C74  51 3A             	mov	a,[1+((log@x)^0x0)]
 11254  6C76  53 41             	mov	[1+((?_eval_poly)^0x0)],a
 11255  6C78  51 3B             	mov	a,[2+((log@x)^0x0)]
 11256  6C7A  53 42             	mov	[2+((?_eval_poly)^0x0)],a
 11257  6C7C  51 3C             	mov	a,[3+((log@x)^0x0)]
 11258  6C7E  53 43             	mov	[3+((?_eval_poly)^0x0)],a
 11259  6C80  50 A4             	mov	a,<(F64)
 11260  6C82  53 45             	mov	[1+((0+?_eval_poly+04h)^0x0)],a
 11261  6C84  50 7C             	mov	a,>(F64)
 11262  6C86  53 44             	mov	[0+((0+?_eval_poly+04h)^0x0)],a
 11263  6C88  50 08             	mov	a,<(08h)
 11264  6C8A  53 47             	mov	[1+((0+?_eval_poly+06h)^0x0)],a
 11265  6C8C  50 00             	mov	a,>(08h)
 11266  6C8E  53 46             	mov	[0+((0+?_eval_poly+06h)^0x0)],a
 11267  6C90  71 80             	or	f, 0x80	;select multiple RAM page mode
 11268                          	
 11269  6C92  7C 7078           	xcall	_eval_poly
 11270                          	
 11271  6C95  70 CF             	and	f, 0xCF   ;select user reg space
 11272  6C97  62 D0 00          	mov	reg[CUR_PP],0
 11273  6C9A  51 40             	mov	a,[0+((0+?_eval_poly)^0x0)]
 11274  6C9C  53 39             	mov	[0+((log@x)^0x0)],a
 11275  6C9E  51 41             	mov	a,[1+((0+?_eval_poly)^0x0)]
 11276  6CA0  53 3A             	mov	[1+((log@x)^0x0)],a
 11277  6CA2  51 42             	mov	a,[2+((0+?_eval_poly)^0x0)]
 11278  6CA4  53 3B             	mov	[2+((log@x)^0x0)],a
 11279  6CA6  51 43             	mov	a,[3+((0+?_eval_poly)^0x0)]
 11280  6CA8  53 3C             	mov	[3+((log@x)^0x0)],a
 11281                          	line	35
 11282  6CAA  70 CF             	and	f, 0xCF   ;select user reg space
 11283  6CAC  62 D0 00          	mov	reg[CUR_PP],0
 11284  6CAF  51 3D             	mov	a,[0+((log@exp)^0x0)]
 11285  6CB1  08                	push	a
 11286  6CB2  51 3E             	mov	a,[1+((log@exp)^0x0)]
 11287  6CB4  53 41             	mov	[1+((?___awtofl)^0x0)],a
 11288  6CB6  18                	pop	a
 11289  6CB7  53 40             	mov	[0+((?___awtofl)^0x0)],a
 11290  6CB9  71 80             	or	f, 0x80	;select multiple RAM page mode
 11291                          	
 11292  6CBB  7C 6E94           	xcall	___awtofl
 11293                          	
 11294  6CBE  70 CF             	and	f, 0xCF   ;select user reg space
 11295  6CC0  62 D0 00          	mov	reg[CUR_PP],0
 11296  6CC3  51 40             	mov	a,[0+((0+?___awtofl)^0x0)]
 11297  6CC5  53 5E             	mov	[0+((?___flmul)^0x0)],a
 11298  6CC7  51 41             	mov	a,[1+((0+?___awtofl)^0x0)]
 11299  6CC9  53 5F             	mov	[1+((?___flmul)^0x0)],a
 11300  6CCB  51 42             	mov	a,[2+((0+?___awtofl)^0x0)]
 11301  6CCD  53 60             	mov	[2+((?___flmul)^0x0)],a
 11302  6CCF  51 43             	mov	a,[3+((0+?___awtofl)^0x0)]
 11303  6CD1  53 61             	mov	[3+((?___flmul)^0x0)],a
 11304  6CD3  50 3F             	mov	a,<(0x3f317218>>24)
 11305  6CD5  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
 11306  6CD7  50 31             	mov	a,<(0x3f317218>>16)
 11307  6CD9  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
 11308  6CDB  50 72             	mov	a,<(0x3f317218>>8)
 11309  6CDD  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
 11310  6CDF  50 18             	mov	a,<(0x3f317218)
 11311  6CE1  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
 11312  6CE3  71 80             	or	f, 0x80	;select multiple RAM page mode
 11313                          	
 11314  6CE5  7C 7201           	xcall	___flmul
 11315                          	
 11316  6CE8  70 CF             	and	f, 0xCF   ;select user reg space
 11317  6CEA  62 D0 00          	mov	reg[CUR_PP],0
 11318  6CED  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
 11319  6CEF  53 4D             	mov	[0+((?___fladd)^0x0)],a
 11320  6CF1  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
 11321  6CF3  53 4E             	mov	[1+((?___fladd)^0x0)],a
 11322  6CF5  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
 11323  6CF7  53 4F             	mov	[2+((?___fladd)^0x0)],a
 11324  6CF9  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
 11325  6CFB  53 50             	mov	[3+((?___fladd)^0x0)],a
 11326  6CFD  51 39             	mov	a,[0+((log@x)^0x0)]
 11327  6CFF  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
 11328  6D01  51 3A             	mov	a,[1+((log@x)^0x0)]
 11329  6D03  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
 11330  6D05  51 3B             	mov	a,[2+((log@x)^0x0)]
 11331  6D07  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
 11332  6D09  51 3C             	mov	a,[3+((log@x)^0x0)]
 11333  6D0B  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
 11334  6D0D  71 80             	or	f, 0x80	;select multiple RAM page mode
 11335                          	
 11336  6D0F  7C 7416           	xcall	___fladd
 11337                          	
 11338  6D12  70 CF             	and	f, 0xCF   ;select user reg space
 11339  6D14  62 D0 00          	mov	reg[CUR_PP],0
 11340  6D17  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
 11341  6D19  53 39             	mov	[0+((?_log)^0x0)],a
 11342  6D1B  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
 11343  6D1D  53 3A             	mov	[1+((?_log)^0x0)],a
 11344  6D1F  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
 11345  6D21  53 3B             	mov	[2+((?_log)^0x0)],a
 11346  6D23  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
 11347  6D25  53 3C             	mov	[3+((?_log)^0x0)],a
 11348  6D27  7D 6D2A           	xjmp	l222
 11349                          	line	36
 11350                          ;log.c: 36: }
 11351  6D2A                    l222:
 11352                          ;			
 11353  6D2A  70 CF             	and	f, 0xCF   ;select user reg space
 11354                          	
 11355  6D2C  7F                	ret
 11356                          GLOBAL __end_of_log
 11357  6D2D                    	__end_of_log:
 11358                          	FNSIZE	_log,3,4
 11359                          ; =============== function _log ends ============
 11360                          
 11361                          	signat	_log,4220
 11362                          	global	_LTRX_PutChar
 11363                          	global	___awdiv
 11364                          	global	??___awdiv
 11365                          	global	?___awdiv
 11366                          	psect	text
 11367                          
 11368                          ; *************** function ___awdiv *****************
 11369                          ; Defined at:
 11370                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awdiv.c"
 11371                          ; Parameters:
 11372                          ;		dividend    	offs:   0	type: int 
 11373                          ;		divisor     	offs:   2	type: int 
 11374                          ; Auto variables:
 11375                          ;		quotient    	       	type: int 
 11376                          ;		sign        	       	type: unsigned char 
 11377                          ;		counter     	       	type: unsigned char 
 11378                          ; Return value:
 11379                          ;		type: int 
 11380                          ;		size: 2
 11381                          ; Registers used:
 11382                          ;		a, CUR_PP
 11383                          ; Tracked objects:
 11384                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11385                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11386                          ;		Unchanged: 
 11387                          ; Data sizes:
 11388                          ;		Autos:    4
 11389                          ;		Params:   4
 11390                          ;		Temp:     2
 11391                          ;		Total:   10
 11392                          ; This function calls:
 11393                          ;		Nothing
 11394                          ; This function is called by:
 11395                          ;		_fround
 11396                          ;		_scale
 11397                          ;		_printf
 11398                          ; This function uses a non-reentrant model
 11399                          ; 
 11400                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awdiv.c"
 11401                          	line	5
 11402  013F                    	__size_of___awdiv	equ	__end_of___awdiv-___awdiv
 11403                          ;awdiv.c: 3: signed int
 11404                          ;awdiv.c: 4: __awdiv(signed int dividend, signed int divisor)
 11405                          ;awdiv.c: 5: {
 11406                          ;			
 11407  6D2D                    ___awdiv:	
 11408                          	opt	disable
 11409                          	line	9
 11410                          ;awdiv.c: 6: signed int quotient;
 11411                          ;awdiv.c: 7: unsigned char counter, sign;
 11412                          ;awdiv.c: 9: sign = 0;
 11413  6D2D  50 00             	mov	a,<((0))
 11414  6D2F  70 CF             	and	f, 0xCF   ;select user reg space
 11415  6D31  62 D0 00          	mov	reg[CUR_PP],0
 11416  6D34  53 64             	mov	[0+((___awdiv@sign)^0x0)],a
 11417                          	line	10
 11418                          ;awdiv.c: 10: if(divisor < 0) {
 11419  6D36  51 61             	mov	a,[1+((___awdiv@divisor)^0x0)]
 11420  6D38  39 00             	cmp	a,<(0)
 11421  6D3A  51 60             	mov	a,[0+((___awdiv@divisor)^0x0)]
 11422  6D3C  31 80             	xor	a,80h
 11423  6D3E  19 80             	sbb	a,(>0)^80h
 11424  6D40  D017              	jnc	l443
 11425                          	line	11
 11426                          ;awdiv.c: 11: divisor = -divisor;
 11427  6D42  70 CF             	and	f, 0xCF   ;select user reg space
 11428  6D44  62 D0 00          	mov	reg[CUR_PP],0
 11429  6D47  51 61             	mov	a,[1+((___awdiv@divisor)^0x0)]
 11430  6D49  73                	cpl	a
 11431  6D4A  74                	inc	a
 11432  6D4B  53 61             	mov	[1+((___awdiv@divisor)^0x0)],a
 11433  6D4D  51 60             	mov	a,[0+((___awdiv@divisor)^0x0)]
 11434  6D4F  73                	cpl	a
 11435  6D50  09 00             	adc	a,0
 11436  6D52  53 60             	mov	[0+((___awdiv@divisor)^0x0)],a
 11437                          	line	12
 11438                          ;awdiv.c: 12: sign = 1;
 11439  6D54  50 01             	mov	a,<((01h))
 11440  6D56  53 64             	mov	[0+((___awdiv@sign)^0x0)],a
 11441                          	line	13
 11442                          ;			
 11443  6D58                    l443:	
 11444                          	line	14
 11445                          ;awdiv.c: 13: }
 11446                          ;awdiv.c: 14: if(dividend < 0) {
 11447  6D58  70 CF             	and	f, 0xCF   ;select user reg space
 11448  6D5A  62 D0 00          	mov	reg[CUR_PP],0
 11449  6D5D  51 5F             	mov	a,[1+((___awdiv@dividend)^0x0)]
 11450  6D5F  39 00             	cmp	a,<(0)
 11451  6D61  51 5E             	mov	a,[0+((___awdiv@dividend)^0x0)]
 11452  6D63  31 80             	xor	a,80h
 11453  6D65  19 80             	sbb	a,(>0)^80h
 11454  6D67  D019              	jnc	l444
 11455                          	line	15
 11456                          ;awdiv.c: 15: dividend = -dividend;
 11457  6D69  70 CF             	and	f, 0xCF   ;select user reg space
 11458  6D6B  62 D0 00          	mov	reg[CUR_PP],0
 11459  6D6E  51 5F             	mov	a,[1+((___awdiv@dividend)^0x0)]
 11460  6D70  73                	cpl	a
 11461  6D71  74                	inc	a
 11462  6D72  53 5F             	mov	[1+((___awdiv@dividend)^0x0)],a
 11463  6D74  51 5E             	mov	a,[0+((___awdiv@dividend)^0x0)]
 11464  6D76  73                	cpl	a
 11465  6D77  09 00             	adc	a,0
 11466  6D79  53 5E             	mov	[0+((___awdiv@dividend)^0x0)],a
 11467                          	line	16
 11468                          ;awdiv.c: 16: sign ^= 1;
 11469  6D7B  51 64             	mov	a,[0+((___awdiv@sign)^0x0)]
 11470  6D7D  31 01             	xor	a,<((01h))
 11471  6D7F  53 64             	mov	[0+((___awdiv@sign)^0x0)],a
 11472                          	line	17
 11473                          ;			
 11474  6D81                    l444:	
 11475                          	line	18
 11476                          ;awdiv.c: 17: }
 11477                          ;awdiv.c: 18: quotient = 0;
 11478  6D81  50 00             	mov	a,<(0)
 11479  6D83  70 CF             	and	f, 0xCF   ;select user reg space
 11480  6D85  62 D0 00          	mov	reg[CUR_PP],0
 11481  6D88  53 63             	mov	[1+((___awdiv@quotient)^0x0)],a
 11482  6D8A  50 00             	mov	a,>(0)
 11483  6D8C  53 62             	mov	[0+((___awdiv@quotient)^0x0)],a
 11484                          	line	19
 11485                          ;awdiv.c: 19: if(divisor != 0) {
 11486  6D8E  51 60             	mov	a,[0+((___awdiv@divisor)^0x0)]
 11487  6D90  39 00             	cmp	a,>(0)
 11488  6D92  B005              	jnz	u2063
 11489  6D94  51 61             	mov	a,[1+((___awdiv@divisor)^0x0)]
 11490  6D96  39 00             	cmp	a,<(0)
 11491  6D98                    u2063:
 11492  6D98  A0A7              	jz	l445
 11493                          	line	20
 11494                          ;awdiv.c: 20: counter = 1;
 11495  6D9A  50 01             	mov	a,<((01h))
 11496  6D9C  70 CF             	and	f, 0xCF   ;select user reg space
 11497  6D9E  62 D0 00          	mov	reg[CUR_PP],0
 11498  6DA1  53 65             	mov	[0+((___awdiv@counter)^0x0)],a
 11499                          	line	21
 11500                          ;awdiv.c: 21: while((divisor & 0x8000U) == 0) {
 11501  6DA3  7D 6DC2           	xjmp	l446
 11502                          ;			
 11503  6DA6                    l447:	
 11504                          	line	22
 11505                          ;awdiv.c: 22: divisor <<= 1;
 11506  6DA6  50 01             	mov	a,<((01h))
 11507  6DA8  7D 6DB4           	xjmp	u2073
 11508  6DAB                    u2084:
 11509  6DAB  70 CF             	and	f, 0xCF   ;select user reg space
 11510  6DAD  62 D0 00          	mov	reg[CUR_PP],0
 11511  6DB0  65 61             	asl	[1+((___awdiv@divisor)^0x0)]
 11512  6DB2  6B 60             	rlc	[0+((___awdiv@divisor)^0x0)]
 11513  6DB4                    u2073:
 11514  6DB4  78                	dec	a
 11515  6DB5  DFF5              	jnc	u2084
 11516                          	line	23
 11517                          ;awdiv.c: 23: counter++;
 11518  6DB7  70 CF             	and	f, 0xCF   ;select user reg space
 11519  6DB9  62 D0 00          	mov	reg[CUR_PP],0
 11520  6DBC  51 65             	mov	a,[0+((___awdiv@counter)^0x0)]
 11521  6DBE  01 01             	add	a,<((01h))
 11522  6DC0  53 65             	mov	[0+((___awdiv@counter)^0x0)],a
 11523                          	line	24
 11524                          ;			
 11525  6DC2                    l446:	
 11526                          	line	21
 11527  6DC2  70 CF             	and	f, 0xCF   ;select user reg space
 11528  6DC4  62 D0 00          	mov	reg[CUR_PP],0
 11529  6DC7  51 61             	mov	a,[1+((___awdiv@divisor)^0x0)]
 11530  6DC9  21 00             	and	a,<(08000h)
 11531  6DCB  53 67             	mov	[(??___awdiv^0x0)+4+0+1],a
 11532  6DCD  51 60             	mov	a,[0+((___awdiv@divisor)^0x0)]
 11533  6DCF  21 80             	and	a,>(08000h)
 11534  6DD1  53 66             	mov	[(??___awdiv^0x0)+4+0],a
 11535  6DD3  51 66             	mov	a,[(??___awdiv^0x0)+4+0]
 11536  6DD5  39 00             	cmp	a,>(0)
 11537  6DD7  B005              	jnz	u2093
 11538  6DD9  51 67             	mov	a,[(??___awdiv^0x0)+4+1]
 11539  6DDB  39 00             	cmp	a,<(0)
 11540  6DDD                    u2093:
 11541  6DDD  AFC8              	jz	l447
 11542                          ;			
 11543  6DDF                    l448:	
 11544                          	line	25
 11545                          ;awdiv.c: 24: }
 11546                          ;awdiv.c: 25: do {
 11547                          ;			
 11548  6DDF                    l451:	
 11549                          	line	26
 11550                          ;awdiv.c: 26: quotient <<= 1;
 11551  6DDF  50 01             	mov	a,<((01h))
 11552  6DE1  7D 6DED           	xjmp	u2103
 11553  6DE4                    u2114:
 11554  6DE4  70 CF             	and	f, 0xCF   ;select user reg space
 11555  6DE6  62 D0 00          	mov	reg[CUR_PP],0
 11556  6DE9  65 63             	asl	[1+((___awdiv@quotient)^0x0)]
 11557  6DEB  6B 62             	rlc	[0+((___awdiv@quotient)^0x0)]
 11558  6DED                    u2103:
 11559  6DED  78                	dec	a
 11560  6DEE  DFF5              	jnc	u2114
 11561                          	line	27
 11562                          ;awdiv.c: 27: if((unsigned int)divisor <= (unsigned int)dividend) {
 11563  6DF0  70 CF             	and	f, 0xCF   ;select user reg space
 11564  6DF2  62 D0 00          	mov	reg[CUR_PP],0
 11565  6DF5  51 5F             	mov	a,[1+((___awdiv@dividend)^0x0)]
 11566  6DF7  3A 61             	cmp	a,[1+((___awdiv@divisor)^0x0)]
 11567  6DF9  51 5E             	mov	a,[0+((___awdiv@dividend)^0x0)]
 11568  6DFB  1A 60             	sbb	a,[0+((___awdiv@divisor)^0x0)]
 11569  6DFD                    u2123:
 11570  6DFD  C01E              	jc	l452
 11571                          	line	28
 11572                          ;awdiv.c: 28: dividend -= divisor;
 11573  6DFF  70 CF             	and	f, 0xCF   ;select user reg space
 11574  6E01  62 D0 00          	mov	reg[CUR_PP],0
 11575  6E04  51 5F             	mov	a,[1+((___awdiv@dividend)^0x0)]
 11576  6E06  12 61             	sub	a,[1+((___awdiv@divisor)^0x0)]
 11577  6E08  53 5F             	mov	[1+((___awdiv@dividend)^0x0)],a
 11578  6E0A  51 5E             	mov	a,[0+((___awdiv@dividend)^0x0)]
 11579  6E0C  1A 60             	sbb	a,[0+((___awdiv@divisor)^0x0)]
 11580  6E0E  53 5E             	mov	[0+((___awdiv@dividend)^0x0)],a
 11581                          	line	29
 11582                          ;awdiv.c: 29: quotient |= 1;
 11583  6E10  51 63             	mov	a,[1+((___awdiv@quotient)^0x0)]
 11584  6E12  29 01             	or	a,<(01h)
 11585  6E14  53 63             	mov	[1+((___awdiv@quotient)^0x0)],a
 11586  6E16  51 62             	mov	a,[0+((___awdiv@quotient)^0x0)]
 11587  6E18  29 00             	or	a,>(01h)
 11588  6E1A  53 62             	mov	[0+((___awdiv@quotient)^0x0)],a
 11589                          	line	30
 11590                          ;			
 11591  6E1C                    l452:	
 11592                          	line	31
 11593                          ;awdiv.c: 30: }
 11594                          ;awdiv.c: 31: *(unsigned int *)&divisor >>= 1;
 11595  6E1C  50 01             	mov	a,<((01h))
 11596  6E1E  7D 6E2C           	xjmp	u2133
 11597  6E21  70 FB             	clrc
 11598  6E23                    u2144:
 11599  6E23  70 CF             	and	f, 0xCF   ;select user reg space
 11600  6E25  62 D0 00          	mov	reg[CUR_PP],0
 11601  6E28  6E 60             	rrc	[0+((___awdiv@divisor)^0x0)]
 11602  6E2A  6E 61             	rrc	[1+((___awdiv@divisor)^0x0)]
 11603  6E2C                    u2133:
 11604  6E2C  78                	dec	a
 11605  6E2D  DFF5              	jnc	u2144
 11606                          	line	32
 11607                          ;awdiv.c: 32: } while(--counter != 0);
 11608  6E2F  70 CF             	and	f, 0xCF   ;select user reg space
 11609  6E31  62 D0 00          	mov	reg[CUR_PP],0
 11610  6E34  51 65             	mov	a,[0+((___awdiv@counter)^0x0)]
 11611  6E36  11 01             	sub	a,<((01h))
 11612  6E38  53 65             	mov	[0+((___awdiv@counter)^0x0)],a
 11613  6E3A  51 65             	mov	a,[0+((___awdiv@counter)^0x0)]
 11614  6E3C  39 00             	cmp	a,(0)
 11615  6E3E  BFA0              	jnz	l451
 11616                          ;			
 11617  6E40                    l450:	
 11618                          	line	33
 11619                          ;			
 11620  6E40                    l445:	
 11621                          	line	34
 11622                          ;awdiv.c: 33: }
 11623                          ;awdiv.c: 34: if(sign)
 11624  6E40  70 CF             	and	f, 0xCF   ;select user reg space
 11625  6E42  62 D0 00          	mov	reg[CUR_PP],0
 11626  6E45  51 64             	mov	a,[0+((___awdiv@sign)^0x0)]
 11627  6E47  39 00             	cmp	a,(0)
 11628  6E49  A013              	jz	l453
 11629                          	line	35
 11630                          ;awdiv.c: 35: quotient = -quotient;
 11631  6E4B  70 CF             	and	f, 0xCF   ;select user reg space
 11632  6E4D  62 D0 00          	mov	reg[CUR_PP],0
 11633  6E50  51 63             	mov	a,[1+((___awdiv@quotient)^0x0)]
 11634  6E52  73                	cpl	a
 11635  6E53  74                	inc	a
 11636  6E54  53 63             	mov	[1+((___awdiv@quotient)^0x0)],a
 11637  6E56  51 62             	mov	a,[0+((___awdiv@quotient)^0x0)]
 11638  6E58  73                	cpl	a
 11639  6E59  09 00             	adc	a,0
 11640  6E5B  53 62             	mov	[0+((___awdiv@quotient)^0x0)],a
 11641                          ;			
 11642  6E5D                    l453:	
 11643                          	line	36
 11644                          ;awdiv.c: 36: return quotient;
 11645  6E5D  70 CF             	and	f, 0xCF   ;select user reg space
 11646  6E5F  62 D0 00          	mov	reg[CUR_PP],0
 11647  6E62  51 63             	mov	a,[1+((___awdiv@quotient)^0x0)]
 11648  6E64  58 62             	mov	x,[0+((___awdiv@quotient)^0x0)]
 11649  6E66  7D 6E69           	xjmp	l442
 11650                          	line	37
 11651                          ;awdiv.c: 37: }
 11652  6E69                    l442:
 11653                          ;			
 11654  6E69  70 CF             	and	f, 0xCF   ;select user reg space
 11655                          	
 11656  6E6B  7F                	ret
 11657                          GLOBAL __end_of___awdiv
 11658  6E6C                    	__end_of___awdiv:
 11659                          	FNSIZE	___awdiv,6,4
 11660                          ; =============== function ___awdiv ends ============
 11661                          
 11662                          	signat	___awdiv,8314
 11663                          	global	_delay_5us
 11664                          	global	??_delay_5us
 11665                          	global	?_delay_5us
 11666                          	psect	text
 11667                          
 11668                          ; *************** function _delay_5us *****************
 11669                          ; Defined at:
 11670                          ;		line 306 in file "./shtxx.c"
 11671                          ; Parameters:
 11672                          ;		None
 11673                          ; Auto variables:
 11674                          ;		None
 11675                          ; Return value:
 11676                          ;		type: void 
 11677                          ;		size: 0
 11678                          ; Registers used:
 11679                          ;		None
 11680                          ; Tracked objects:
 11681                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11682                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11683                          ;		Unchanged: 
 11684                          ; Data sizes:
 11685                          ;		Autos:    0
 11686                          ;		Params:   0
 11687                          ;		Temp:     0
 11688                          ;		Total:    0
 11689                          ; This function calls:
 11690                          ;		Nothing
 11691                          ; This function is called by:
 11692                          ;		_s_write_byte
 11693                          ;		_s_read_byte
 11694                          ;		_s_transstart
 11695                          ;		_s_connectionreset
 11696                          ;		_s_measure
 11697                          ; This function uses a non-reentrant model
 11698                          ; 
 11699                          	file	"./shtxx.c"
 11700                          	line	306
 11701  001A                    	__size_of_delay_5us	equ	__end_of_delay_5us-_delay_5us
 11702                          ;shtxx.c: 306: void delay_5us() {
 11703                          ;			
 11704  6E6C                    _delay_5us:	
 11705                          	opt	disable
 11706                          	line	308
 11707                          # 308 "./shtxx.c"
 11708  6E6C  40                nop ;#
 11709                          # 308 "./shtxx.c"
 11710  6E6D  40                nop ;#
 11711                          # 308 "./shtxx.c"
 11712  6E6E  40                nop ;#
 11713                          # 308 "./shtxx.c"
 11714  6E6F  40                nop ;#
 11715                          # 308 "./shtxx.c"
 11716  6E70  40                nop ;#
 11717                          	line	309
 11718                          # 309 "./shtxx.c"
 11719  6E71  40                nop ;#
 11720                          # 309 "./shtxx.c"
 11721  6E72  40                nop ;#
 11722                          # 309 "./shtxx.c"
 11723  6E73  40                nop ;#
 11724                          # 309 "./shtxx.c"
 11725  6E74  40                nop ;#
 11726                          # 309 "./shtxx.c"
 11727  6E75  40                nop ;#
 11728                          	line	310
 11729                          # 310 "./shtxx.c"
 11730  6E76  40                nop ;#
 11731                          # 310 "./shtxx.c"
 11732  6E77  40                nop ;#
 11733                          # 310 "./shtxx.c"
 11734  6E78  40                nop ;#
 11735                          # 310 "./shtxx.c"
 11736  6E79  40                nop ;#
 11737                          # 310 "./shtxx.c"
 11738  6E7A  40                nop ;#
 11739                          	line	311
 11740                          # 311 "./shtxx.c"
 11741  6E7B  40                nop ;#
 11742                          # 311 "./shtxx.c"
 11743  6E7C  40                nop ;#
 11744                          # 311 "./shtxx.c"
 11745  6E7D  40                nop ;#
 11746                          # 311 "./shtxx.c"
 11747  6E7E  40                nop ;#
 11748                          # 311 "./shtxx.c"
 11749  6E7F  40                nop ;#
 11750                          	psect	text
 11751                          	line	313
 11752                          ;shtxx.c: 308: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 11753                          ;shtxx.c: 309: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 11754                          ;shtxx.c: 310: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 11755                          ;shtxx.c: 311: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 11756                          ;shtxx.c: 313: return;
 11757  6E80  7D 6E83           	xjmp	l129
 11758                          	line	314
 11759                          ;shtxx.c: 314: }
 11760  6E83                    l129:
 11761                          ;			
 11762  6E83  70 CF             	and	f, 0xCF   ;select user reg space
 11763                          	
 11764  6E85  7F                	ret
 11765                          GLOBAL __end_of_delay_5us
 11766  6E86                    	__end_of_delay_5us:
 11767                          	FNSIZE	_delay_5us,0,0
 11768                          ; =============== function _delay_5us ends ============
 11769                          
 11770                          	signat	_delay_5us,88
 11771                          	global	_oo_crc_init
 11772                          	global	??_oo_crc_init
 11773                          	global	?_oo_crc_init
 11774                          	psect	text
 11775                          
 11776                          ; *************** function _oo_crc_init *****************
 11777                          ; Defined at:
 11778                          ;		line 212 in file "./oo.c"
 11779                          ; Parameters:
 11780                          ;		None
 11781                          ; Auto variables:
 11782                          ;		None
 11783                          ; Return value:
 11784                          ;		type: void 
 11785                          ;		size: 0
 11786                          ; Registers used:
 11787                          ;		a, CUR_PP
 11788                          ; Tracked objects:
 11789                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11790                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11791                          ;		Unchanged: 
 11792                          ; Data sizes:
 11793                          ;		Autos:    0
 11794                          ;		Params:   0
 11795                          ;		Temp:     0
 11796                          ;		Total:    0
 11797                          ; This function calls:
 11798                          ;		Nothing
 11799                          ; This function is called by:
 11800                          ;		_oo_read_scratchpad
 11801                          ; This function uses a non-reentrant model
 11802                          ; 
 11803                          	file	"./oo.c"
 11804                          	line	212
 11805  000E                    	__size_of_oo_crc_init	equ	__end_of_oo_crc_init-_oo_crc_init
 11806                          ;oo.c: 212: void oo_crc_init(){
 11807                          ;			
 11808  6E86                    _oo_crc_init:	
 11809                          	opt	disable
 11810                          	line	213
 11811                          ;oo.c: 213: crc = 0;
 11812  6E86  50 00             	mov	a,<((0))
 11813  6E88  70 CF             	and	f, 0xCF   ;select user reg space
 11814  6E8A  71 80             	or	f, 0x80	;select multiple RAM page mode
 11815  6E8C  62 D0 02          	mov	reg[CUR_PP],2
 11816  6E8F  53 14             	mov	[0+((_crc)^0x200)],a
 11817                          	line	214
 11818                          ;oo.c: 214: }
 11819  6E91                    l49:
 11820                          ;			
 11821  6E91  70 CF             	and	f, 0xCF   ;select user reg space
 11822                          	
 11823  6E93  7F                	ret
 11824                          GLOBAL __end_of_oo_crc_init
 11825  6E94                    	__end_of_oo_crc_init:
 11826                          	FNSIZE	_oo_crc_init,0,0
 11827                          ; =============== function _oo_crc_init ends ============
 11828                          
 11829                          	signat	_oo_crc_init,88
 11830                          	global	___awtofl
 11831                          	global	??___awtofl
 11832                          	global	?___awtofl
 11833                          	psect	text
 11834                          
 11835                          ; *************** function ___awtofl *****************
 11836                          ; Defined at:
 11837                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awtofl.c"
 11838                          ; Parameters:
 11839                          ;		c           	offs:   0	type: int 
 11840                          ; Auto variables:
 11841                          ;		f1          	       	type: int 
 11842                          ; Return value:
 11843                          ;		type: int 
 11844                          ;		size: 4
 11845                          ; Registers used:
 11846                          ;		a, x, CUR_PP, mret
 11847                          ; Tracked objects:
 11848                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11849                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11850                          ;		Unchanged: 
 11851                          ; Data sizes:
 11852                          ;		Autos:    4
 11853                          ;		Params:   4
 11854                          ;		Temp:     4
 11855                          ;		Total:   12
 11856                          ; This function calls:
 11857                          ;		___flpack
 11858                          ;		___flneg
 11859                          ; This function is called by:
 11860                          ;		_log
 11861                          ; This function uses a non-reentrant model
 11862                          ; 
 11863                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awtofl.c"
 11864                          	line	16
 11865  00EC                    	__size_of___awtofl	equ	__end_of___awtofl-___awtofl
 11866                          ;awtofl.c: 14: double
 11867                          ;awtofl.c: 15: __awtofl(signed int c)
 11868                          ;awtofl.c: 16: {
 11869                          ;			
 11870  6E94                    ___awtofl:	
 11871                          	opt	disable
 11872                          	line	19
 11873                          ;awtofl.c: 17: double f1;
 11874                          ;awtofl.c: 19: if(c == 0)
 11875  6E94  70 CF             	and	f, 0xCF   ;select user reg space
 11876  6E96  62 D0 00          	mov	reg[CUR_PP],0
 11877  6E99  51 40             	mov	a,[0+((___awtofl@c)^0x0)]
 11878  6E9B  39 00             	cmp	a,>(0)
 11879  6E9D  B005              	jnz	u2263
 11880  6E9F  51 41             	mov	a,[1+((___awtofl@c)^0x0)]
 11881  6EA1  39 00             	cmp	a,<(0)
 11882  6EA3                    u2263:
 11883  6EA3  B019              	jnz	l486
 11884                          	line	20
 11885  6EA5  50 00             	mov	a,<(0x0>>24)
 11886  6EA7  70 CF             	and	f, 0xCF   ;select user reg space
 11887  6EA9  62 D0 00          	mov	reg[CUR_PP],0
 11888  6EAC  53 40             	mov	[0+((?___awtofl)^0x0)],a
 11889  6EAE  50 00             	mov	a,<(0x0>>16)
 11890  6EB0  53 41             	mov	[1+((?___awtofl)^0x0)],a
 11891  6EB2  50 00             	mov	a,<(0x0>>8)
 11892  6EB4  53 42             	mov	[2+((?___awtofl)^0x0)],a
 11893  6EB6  50 00             	mov	a,<(0x0)
 11894  6EB8  53 43             	mov	[3+((?___awtofl)^0x0)],a
 11895  6EBA  7D 6F7D           	xjmp	l485
 11896                          ;			
 11897  6EBD                    l486:	
 11898                          	line	21
 11899                          ;awtofl.c: 21: (*(unsigned long *)&f1) = (signed long)c;
 11900  6EBD  70 CF             	and	f, 0xCF   ;select user reg space
 11901  6EBF  62 D0 00          	mov	reg[CUR_PP],0
 11902  6EC2  51 41             	mov	a,[1+((___awtofl@c)^0x0)]
 11903  6EC4  53 4B             	mov	[(??___awtofl^0x0)+4+0+3],a
 11904  6EC6  51 40             	mov	a,[0+((___awtofl@c)^0x0)]
 11905  6EC8  53 4A             	mov	[(??___awtofl^0x0)+4+0+2],a
 11906  6ECA  6A                	rlc	a
 11907  6ECB  50 00             	mov	a,0
 11908  6ECD  19 00             	sbb	a,0
 11909  6ECF  53 49             	mov	[(??___awtofl^0x0)+4+0+1],a
 11910  6ED1  53 48             	mov	[(??___awtofl^0x0)+4+0],a
 11911  6ED3  5F 44  48         	mov	[((___awtofl@f1)^0x0)],[(??___awtofl^0x0)+4+0]
 11912  6ED6  5F 45  49         	mov	[((___awtofl@f1+1)^0x0)],[(??___awtofl^0x0)+4+1]
 11913  6ED9  5F 46  4A         	mov	[((___awtofl@f1+2)^0x0)],[(??___awtofl^0x0)+4+2]
 11914  6EDC  5F 47  4B         	mov	[((___awtofl@f1+3)^0x0)],[(??___awtofl^0x0)+4+3]
 11915                          	line	22
 11916                          ;awtofl.c: 22: if(c < 0)
 11917  6EDF  51 41             	mov	a,[1+((___awtofl@c)^0x0)]
 11918  6EE1  39 00             	cmp	a,<(0)
 11919  6EE3  51 40             	mov	a,[0+((___awtofl@c)^0x0)]
 11920  6EE5  31 80             	xor	a,80h
 11921  6EE7  19 80             	sbb	a,(>0)^80h
 11922  6EE9  D025              	jnc	l487
 11923                          	line	23
 11924                          ;awtofl.c: 23: (*(unsigned long *)&f1) = -(*(unsigned long *)&f1);
 11925  6EEB  70 CF             	and	f, 0xCF   ;select user reg space
 11926  6EED  62 D0 00          	mov	reg[CUR_PP],0
 11927  6EF0  51 44             	mov	a,[0+((___awtofl@f1)^0x0)]
 11928  6EF2  73                	cpl	a
 11929  6EF3  53 44             	mov	[0+((___awtofl@f1)^0x0)],a
 11930  6EF5  51 45             	mov	a,[1+((___awtofl@f1)^0x0)]
 11931  6EF7  73                	cpl	a
 11932  6EF8  53 45             	mov	[1+((___awtofl@f1)^0x0)],a
 11933  6EFA  51 46             	mov	a,[2+((___awtofl@f1)^0x0)]
 11934  6EFC  73                	cpl	a
 11935  6EFD  53 46             	mov	[2+((___awtofl@f1)^0x0)],a
 11936  6EFF  51 47             	mov	a,[3+((___awtofl@f1)^0x0)]
 11937  6F01  73                	cpl	a
 11938  6F02  53 47             	mov	[3+((___awtofl@f1)^0x0)],a
 11939  6F04  76 47             	inc	[3+((___awtofl@f1)^0x0)]
 11940  6F06  0E 46  00         	adc	[2+((___awtofl@f1)^0x0)],0
 11941  6F09  0E 45  00         	adc	[1+((___awtofl@f1)^0x0)],0
 11942  6F0C  0E 44  00         	adc	[0+((___awtofl@f1)^0x0)],0
 11943                          ;			
 11944  6F0F                    l487:	
 11945                          	line	24
 11946                          ;awtofl.c: 24: __flpack(&(*(unsigned long *)&f1), 127+23);
 11947  6F0F  50 44             	mov	a,<((___awtofl@f1|8000h))
 11948  6F11  70 CF             	and	f, 0xCF   ;select user reg space
 11949  6F13  62 D0 00          	mov	reg[CUR_PP],0
 11950  6F16  53 72             	mov	[1+((?___flpack)^0x0)],a
 11951  6F18  50 80             	mov	a,>((___awtofl@f1|8000h))
 11952  6F1A  53 71             	mov	[0+((?___flpack)^0x0)],a
 11953  6F1C  50 96             	mov	a,<((096h))
 11954  6F1E  53 73             	mov	[0+((0+?___flpack+02h)^0x0)],a
 11955  6F20  71 80             	or	f, 0x80	;select multiple RAM page mode
 11956                          	
 11957  6F22  7C 77F8           	xcall	___flpack
 11958                          	
 11959                          	line	25
 11960                          ;awtofl.c: 25: if(c < 0)
 11961  6F25  70 CF             	and	f, 0xCF   ;select user reg space
 11962  6F27  62 D0 00          	mov	reg[CUR_PP],0
 11963  6F2A  51 41             	mov	a,[1+((___awtofl@c)^0x0)]
 11964  6F2C  39 00             	cmp	a,<(0)
 11965  6F2E  51 40             	mov	a,[0+((___awtofl@c)^0x0)]
 11966  6F30  31 80             	xor	a,80h
 11967  6F32  19 80             	sbb	a,(>0)^80h
 11968  6F34  D030              	jnc	l488
 11969                          	line	26
 11970                          ;awtofl.c: 26: f1 = -f1;
 11971  6F36  70 CF             	and	f, 0xCF   ;select user reg space
 11972  6F38  62 D0 00          	mov	reg[CUR_PP],0
 11973  6F3B  51 44             	mov	a,[0+((___awtofl@f1)^0x0)]
 11974  6F3D  53 4C             	mov	[0+((?___flneg)^0x0)],a
 11975  6F3F  51 45             	mov	a,[1+((___awtofl@f1)^0x0)]
 11976  6F41  53 4D             	mov	[1+((?___flneg)^0x0)],a
 11977  6F43  51 46             	mov	a,[2+((___awtofl@f1)^0x0)]
 11978  6F45  53 4E             	mov	[2+((?___flneg)^0x0)],a
 11979  6F47  51 47             	mov	a,[3+((___awtofl@f1)^0x0)]
 11980  6F49  53 4F             	mov	[3+((?___flneg)^0x0)],a
 11981  6F4B  71 80             	or	f, 0x80	;select multiple RAM page mode
 11982                          	
 11983  6F4D  7C 76DC           	xcall	___flneg
 11984                          	
 11985  6F50  70 CF             	and	f, 0xCF   ;select user reg space
 11986  6F52  62 D0 00          	mov	reg[CUR_PP],0
 11987  6F55  51 4C             	mov	a,[0+((0+?___flneg)^0x0)]
 11988  6F57  53 44             	mov	[0+((___awtofl@f1)^0x0)],a
 11989  6F59  51 4D             	mov	a,[1+((0+?___flneg)^0x0)]
 11990  6F5B  53 45             	mov	[1+((___awtofl@f1)^0x0)],a
 11991  6F5D  51 4E             	mov	a,[2+((0+?___flneg)^0x0)]
 11992  6F5F  53 46             	mov	[2+((___awtofl@f1)^0x0)],a
 11993  6F61  51 4F             	mov	a,[3+((0+?___flneg)^0x0)]
 11994  6F63  53 47             	mov	[3+((___awtofl@f1)^0x0)],a
 11995                          ;			
 11996  6F65                    l488:	
 11997                          	line	27
 11998  6F65  70 CF             	and	f, 0xCF   ;select user reg space
 11999  6F67  62 D0 00          	mov	reg[CUR_PP],0
 12000  6F6A  51 44             	mov	a,[0+((___awtofl@f1)^0x0)]
 12001  6F6C  53 40             	mov	[0+((?___awtofl)^0x0)],a
 12002  6F6E  51 45             	mov	a,[1+((___awtofl@f1)^0x0)]
 12003  6F70  53 41             	mov	[1+((?___awtofl)^0x0)],a
 12004  6F72  51 46             	mov	a,[2+((___awtofl@f1)^0x0)]
 12005  6F74  53 42             	mov	[2+((?___awtofl)^0x0)],a
 12006  6F76  51 47             	mov	a,[3+((___awtofl@f1)^0x0)]
 12007  6F78  53 43             	mov	[3+((?___awtofl)^0x0)],a
 12008  6F7A  7D 6F7D           	xjmp	l485
 12009                          	line	28
 12010                          ;awtofl.c: 28: }
 12011  6F7D                    l485:
 12012                          ;			
 12013  6F7D  70 CF             	and	f, 0xCF   ;select user reg space
 12014                          	
 12015  6F7F  7F                	ret
 12016                          GLOBAL __end_of___awtofl
 12017  6F80                    	__end_of___awtofl:
 12018                          	FNSIZE	___awtofl,8,4
 12019                          ; =============== function ___awtofl ends ============
 12020                          
 12021                          	signat	___awtofl,4220
 12022                          	global	___flge
 12023                          	global	??___flge
 12024                          	global	?___flge
 12025                          	psect	text
 12026                          
 12027                          ; *************** function ___flge *****************
 12028                          ; Defined at:
 12029                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flge.c"
 12030                          ; Parameters:
 12031                          ;		ff1         	offs:   0	type: int 
 12032                          ;		ff2         	offs:   4	type: int 
 12033                          ; Auto variables:
 12034                          ;		None
 12035                          ; Return value:
 12036                          ;		type: bit 
 12037                          ;		size: 0
 12038                          ; Registers used:
 12039                          ;		a, CUR_PP
 12040                          ; Tracked objects:
 12041                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12042                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12043                          ;		Unchanged: 
 12044                          ; Data sizes:
 12045                          ;		Autos:    0
 12046                          ;		Params:   8
 12047                          ;		Temp:     4
 12048                          ;		Total:   12
 12049                          ; This function calls:
 12050                          ;		Nothing
 12051                          ; This function is called by:
 12052                          ;		_calc_sth11
 12053                          ;		_printf
 12054                          ;		_log
 12055                          ; This function uses a non-reentrant model
 12056                          ; 
 12057                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flge.c"
 12058                          	line	5
 12059  00F8                    	__size_of___flge	equ	__end_of___flge-___flge
 12060                          ;flge.c: 3: bit
 12061                          ;flge.c: 4: __flge(double ff1, double ff2)
 12062                          ;flge.c: 5: {
 12063                          ;			
 12064  6F80                    ___flge:	
 12065                          	opt	disable
 12066                          	line	6
 12067                          ;flge.c: 6: if((*(unsigned long *)&ff1) & 0x80000000UL)
 12068  6F80  70 CF             	and	f, 0xCF   ;select user reg space
 12069  6F82  62 D0 00          	mov	reg[CUR_PP],0
 12070  6F85  51 41             	mov	a,[0+((___flge@ff1)^0x0)]
 12071  6F87  53 49             	mov	[(??___flge^0x0)+0+0],a
 12072  6F89  51 42             	mov	a,[1+((___flge@ff1)^0x0)]
 12073  6F8B  53 4A             	mov	[(??___flge^0x0)+0+0+1],a
 12074  6F8D  51 43             	mov	a,[2+((___flge@ff1)^0x0)]
 12075  6F8F  53 4B             	mov	[(??___flge^0x0)+0+0+2],a
 12076  6F91  51 44             	mov	a,[3+((___flge@ff1)^0x0)]
 12077  6F93  53 4C             	mov	[(??___flge^0x0)+0+0+3],a
 12078  6F95  50 00             	mov	a,<(-2147483648)
 12079  6F97  24 4C             	and	[(??___flge^0x0)+0+3],a
 12080  6F99  50 00             	mov	a,<(-2147483648>>8)
 12081  6F9B  24 4B             	and	[(??___flge^0x0)+0+2],a
 12082  6F9D  50 00             	mov	a,<(-2147483648>>16)
 12083  6F9F  24 4A             	and	[(??___flge^0x0)+0+1],a
 12084  6FA1  50 80             	mov	a,<(-2147483648>>24)
 12085  6FA3  24 49             	and	[(??___flge^0x0)+0+0],a
 12086  6FA5  51 49             	mov	a,[(??___flge^0x0)+0+0]
 12087  6FA7  39 00             	cmp	a,<(0>>24)
 12088  6FA9  B011              	jnz	u2043
 12089  6FAB  51 4A             	mov	a,[(??___flge^0x0)+0+1]
 12090  6FAD  39 00             	cmp	a,<(0>>16)
 12091  6FAF  B00B              	jnz	u2043
 12092  6FB1  51 4B             	mov	a,[(??___flge^0x0)+0+2]
 12093  6FB3  39 00             	cmp	a,<(0>>8)
 12094  6FB5  B005              	jnz	u2043
 12095  6FB7  51 4C             	mov	a,[(??___flge^0x0)+0+3]
 12096  6FB9  39 00             	cmp	a,<(0)
 12097  6FBB                    u2043:
 12098  6FBB  A01E              	jz	l414
 12099                          	line	7
 12100                          ;flge.c: 7: (*(unsigned long *)&ff1) = 0x80000000UL - (*(unsigned long *)&ff1);
 12101  6FBD  50 00             	mov	a,<(-2147483648)
 12102  6FBF  70 CF             	and	f, 0xCF   ;select user reg space
 12103  6FC1  62 D0 00          	mov	reg[CUR_PP],0
 12104  6FC4  12 44             	sub	a,[3+((___flge@ff1)^0x0)]
 12105  6FC6  53 44             	mov	[3+((___flge@ff1)^0x0)],a
 12106  6FC8  50 00             	mov	a,<(-2147483648>>8)
 12107  6FCA  1A 43             	sbb	a,[2+((___flge@ff1)^0x0)]
 12108  6FCC  53 43             	mov	[2+((___flge@ff1)^0x0)],a
 12109  6FCE  50 00             	mov	a,<(-2147483648>>16)
 12110  6FD0  1A 42             	sbb	a,[1+((___flge@ff1)^0x0)]
 12111  6FD2  53 42             	mov	[1+((___flge@ff1)^0x0)],a
 12112  6FD4  50 80             	mov	a,<(-2147483648>>24)
 12113  6FD6  1A 41             	sbb	a,[0+((___flge@ff1)^0x0)]
 12114  6FD8  53 41             	mov	[0+((___flge@ff1)^0x0)],a
 12115                          ;			
 12116  6FDA                    l414:	
 12117                          	line	8
 12118                          ;flge.c: 8: if((*(unsigned long *)&ff2) & 0x80000000UL)
 12119  6FDA  70 CF             	and	f, 0xCF   ;select user reg space
 12120  6FDC  62 D0 00          	mov	reg[CUR_PP],0
 12121  6FDF  51 45             	mov	a,[0+((___flge@ff2)^0x0)]
 12122  6FE1  53 49             	mov	[(??___flge^0x0)+0+0],a
 12123  6FE3  51 46             	mov	a,[1+((___flge@ff2)^0x0)]
 12124  6FE5  53 4A             	mov	[(??___flge^0x0)+0+0+1],a
 12125  6FE7  51 47             	mov	a,[2+((___flge@ff2)^0x0)]
 12126  6FE9  53 4B             	mov	[(??___flge^0x0)+0+0+2],a
 12127  6FEB  51 48             	mov	a,[3+((___flge@ff2)^0x0)]
 12128  6FED  53 4C             	mov	[(??___flge^0x0)+0+0+3],a
 12129  6FEF  50 00             	mov	a,<(-2147483648)
 12130  6FF1  24 4C             	and	[(??___flge^0x0)+0+3],a
 12131  6FF3  50 00             	mov	a,<(-2147483648>>8)
 12132  6FF5  24 4B             	and	[(??___flge^0x0)+0+2],a
 12133  6FF7  50 00             	mov	a,<(-2147483648>>16)
 12134  6FF9  24 4A             	and	[(??___flge^0x0)+0+1],a
 12135  6FFB  50 80             	mov	a,<(-2147483648>>24)
 12136  6FFD  24 49             	and	[(??___flge^0x0)+0+0],a
 12137  6FFF  51 49             	mov	a,[(??___flge^0x0)+0+0]
 12138  7001  39 00             	cmp	a,<(0>>24)
 12139  7003  B011              	jnz	u2053
 12140  7005  51 4A             	mov	a,[(??___flge^0x0)+0+1]
 12141  7007  39 00             	cmp	a,<(0>>16)
 12142  7009  B00B              	jnz	u2053
 12143  700B  51 4B             	mov	a,[(??___flge^0x0)+0+2]
 12144  700D  39 00             	cmp	a,<(0>>8)
 12145  700F  B005              	jnz	u2053
 12146  7011  51 4C             	mov	a,[(??___flge^0x0)+0+3]
 12147  7013  39 00             	cmp	a,<(0)
 12148  7015                    u2053:
 12149  7015  A01E              	jz	l415
 12150                          	line	9
 12151                          ;flge.c: 9: (*(unsigned long *)&ff2) = 0x80000000UL - (*(unsigned long *)&ff2);
 12152  7017  50 00             	mov	a,<(-2147483648)
 12153  7019  70 CF             	and	f, 0xCF   ;select user reg space
 12154  701B  62 D0 00          	mov	reg[CUR_PP],0
 12155  701E  12 48             	sub	a,[3+((___flge@ff2)^0x0)]
 12156  7020  53 48             	mov	[3+((___flge@ff2)^0x0)],a
 12157  7022  50 00             	mov	a,<(-2147483648>>8)
 12158  7024  1A 47             	sbb	a,[2+((___flge@ff2)^0x0)]
 12159  7026  53 47             	mov	[2+((___flge@ff2)^0x0)],a
 12160  7028  50 00             	mov	a,<(-2147483648>>16)
 12161  702A  1A 46             	sbb	a,[1+((___flge@ff2)^0x0)]
 12162  702C  53 46             	mov	[1+((___flge@ff2)^0x0)],a
 12163  702E  50 80             	mov	a,<(-2147483648>>24)
 12164  7030  1A 45             	sbb	a,[0+((___flge@ff2)^0x0)]
 12165  7032  53 45             	mov	[0+((___flge@ff2)^0x0)],a
 12166                          ;			
 12167  7034                    l415:	
 12168                          	line	10
 12169                          ;flge.c: 10: (*(unsigned long *)&ff1) ^= 0x80000000UL;
 12170  7034  50 00             	mov	a,<(-2147483648)
 12171  7036  70 CF             	and	f, 0xCF   ;select user reg space
 12172  7038  62 D0 00          	mov	reg[CUR_PP],0
 12173  703B  34 44             	xor	[3+((___flge@ff1)^0x0)],a
 12174  703D  50 00             	mov	a,<(-2147483648>>8)
 12175  703F  34 43             	xor	[2+((___flge@ff1)^0x0)],a
 12176  7041  50 00             	mov	a,<(-2147483648>>16)
 12177  7043  34 42             	xor	[1+((___flge@ff1)^0x0)],a
 12178  7045  50 80             	mov	a,<(-2147483648>>24)
 12179  7047  34 41             	xor	[0+((___flge@ff1)^0x0)],a
 12180                          	line	11
 12181                          ;flge.c: 11: (*(unsigned long *)&ff2) ^= 0x80000000UL;
 12182  7049  50 00             	mov	a,<(-2147483648)
 12183  704B  34 48             	xor	[3+((___flge@ff2)^0x0)],a
 12184  704D  50 00             	mov	a,<(-2147483648>>8)
 12185  704F  34 47             	xor	[2+((___flge@ff2)^0x0)],a
 12186  7051  50 00             	mov	a,<(-2147483648>>16)
 12187  7053  34 46             	xor	[1+((___flge@ff2)^0x0)],a
 12188  7055  50 80             	mov	a,<(-2147483648>>24)
 12189  7057  34 45             	xor	[0+((___flge@ff2)^0x0)],a
 12190                          	line	12
 12191                          ;flge.c: 12: return (*(unsigned long *)&ff1) >= (*(unsigned long *)&ff2);
 12192  7059  51 44             	mov	a,[3+((___flge@ff1)^0x0)]
 12193  705B  3A 48             	cmp	a,[3+((___flge@ff2)^0x0)]
 12194  705D  51 43             	mov	a,[2+((___flge@ff1)^0x0)]
 12195  705F  1A 47             	sbb	a,[2+((___flge@ff2)^0x0)]
 12196  7061  51 42             	mov	a,[1+((___flge@ff1)^0x0)]
 12197  7063  1A 46             	sbb	a,[1+((___flge@ff2)^0x0)]
 12198  7065  51 41             	mov	a,[0+((___flge@ff1)^0x0)]
 12199  7067  1A 45             	sbb	a,[0+((___flge@ff2)^0x0)]
 12200  7069  D006              	jnc	l400002280
 12201  706B  70 FB             	clrc
 12202  706D  7D 7072           	xjmp	l400002281
 12203                          ;			
 12204  7070                    l400002280:	
 12205  7070  71 04             	setc
 12206                          ;			
 12207  7072                    l400002281:	
 12208  7072  7D 7075           	xjmp	l413
 12209                          	line	13
 12210                          ;flge.c: 13: }
 12211  7075                    l413:
 12212                          ;			
 12213  7075  70 CF             	and	f, 0xCF   ;select user reg space
 12214                          	
 12215  7077  7F                	ret
 12216                          GLOBAL __end_of___flge
 12217  7078                    	__end_of___flge:
 12218                          	FNSIZE	___flge,4,8
 12219                          ; =============== function ___flge ends ============
 12220                          
 12221                          	signat	___flge,8312
 12222                          	global	_OneWire_bReadByte
 12223                          	global	_eval_poly
 12224                          	global	??_eval_poly
 12225                          	global	?_eval_poly
 12226                          	psect	text
 12227                          
 12228                          ; *************** function _eval_poly *****************
 12229                          ; Defined at:
 12230                          ;		line 5 in file "../common/evalpoly.c"
 12231                          ; Parameters:
 12232                          ;		x           	offs:   0	type: bit 
 12233                          ;		d           	offs:   4	type: PTR const ; Largest target is 36
 12234                          ;		 -> F64(36), 
 12235                          ;		n           	offs:   6	type: int 
 12236                          ; Auto variables:
 12237                          ;		res         	       	type: int 
 12238                          ; Return value:
 12239                          ;		type: int 
 12240                          ;		size: 4
 12241                          ; Registers used:
 12242                          ;		a, x, CUR_PP, mret
 12243                          ; Tracked objects:
 12244                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12245                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12246                          ;		Unchanged: 
 12247                          ; Data sizes:
 12248                          ;		Autos:    4
 12249                          ;		Params:   8
 12250                          ;		Temp:     1
 12251                          ;		Total:   13
 12252                          ; This function calls:
 12253                          ;		___flmul
 12254                          ;		___fladd
 12255                          ; This function is called by:
 12256                          ;		_log
 12257                          ; This function uses a non-reentrant model
 12258                          ; 
 12259                          	file	"../common/evalpoly.c"
 12260                          	line	5
 12261  00E2                    	__size_of_eval_poly	equ	__end_of_eval_poly-_eval_poly
 12262                          ;evalpoly.c: 3: double
 12263                          ;evalpoly.c: 4: eval_poly(double x, const double * d, int n)
 12264                          ;evalpoly.c: 5: {
 12265                          ;			
 12266  7078                    _eval_poly:	
 12267                          	opt	disable
 12268                          	line	8
 12269                          ;evalpoly.c: 6: double res;
 12270                          ;evalpoly.c: 8: res = d[n];
 12271  7078  50 01             	mov	a,<((01h))
 12272  707A  01 46             	add	a,<(8000h+eval_poly@n)
 12273  707C  5C                	mov	x,a
 12274  707D  50 80             	mov	a,>(8000h+eval_poly@n)
 12275  707F  70 CF             	and	f, 0xCF   ;select user reg space
 12276  7081  60 D3             	mov	reg[0xd3],a
 12277  7083  52 00             	mov	a,[x+0]
 12278  7085  64                	asl	a
 12279  7086  64                	asl	a
 12280  7087  62 D0 00          	mov	reg[CUR_PP],0
 12281  708A  02 45             	add	a,[1+((eval_poly@d)^0x0)]
 12282  708C  5C                	mov	x,a
 12283  708D  50 00             	mov	a,0
 12284  708F  0A 44             	adc	a,[0+((eval_poly@d)^0x0)]
 12285  7091  08                	push	a
 12286  7092  28                	romx
 12287  7093  53 48             	mov	[0+((eval_poly@res)^0x0)],a
 12288  7095  18                	pop	a
 12289  7096  75                	inc	x
 12290  7097  08                	push	a
 12291  7098  28                	romx
 12292  7099  53 49             	mov	[1+((eval_poly@res)^0x0)],a
 12293  709B  18                	pop	a
 12294  709C  75                	inc	x
 12295  709D  08                	push	a
 12296  709E  28                	romx
 12297  709F  53 4A             	mov	[2+((eval_poly@res)^0x0)],a
 12298  70A1  18                	pop	a
 12299  70A2  75                	inc	x
 12300  70A3  28                	romx
 12301  70A4  53 4B             	mov	[3+((eval_poly@res)^0x0)],a
 12302                          	line	9
 12303                          ;evalpoly.c: 9: while(n)
 12304  70A6  7D 712E           	xjmp	l674
 12305                          ;			
 12306  70A9                    l675:	
 12307                          	line	10
 12308                          ;evalpoly.c: 10: res = x * res + d[--n];
 12309  70A9  70 CF             	and	f, 0xCF   ;select user reg space
 12310  70AB  62 D0 00          	mov	reg[CUR_PP],0
 12311  70AE  51 40             	mov	a,[0+((eval_poly@x)^0x0)]
 12312  70B0  53 5E             	mov	[0+((?___flmul)^0x0)],a
 12313  70B2  51 41             	mov	a,[1+((eval_poly@x)^0x0)]
 12314  70B4  53 5F             	mov	[1+((?___flmul)^0x0)],a
 12315  70B6  51 42             	mov	a,[2+((eval_poly@x)^0x0)]
 12316  70B8  53 60             	mov	[2+((?___flmul)^0x0)],a
 12317  70BA  51 43             	mov	a,[3+((eval_poly@x)^0x0)]
 12318  70BC  53 61             	mov	[3+((?___flmul)^0x0)],a
 12319  70BE  51 48             	mov	a,[0+((eval_poly@res)^0x0)]
 12320  70C0  53 62             	mov	[0+((0+?___flmul+04h)^0x0)],a
 12321  70C2  51 49             	mov	a,[1+((eval_poly@res)^0x0)]
 12322  70C4  53 63             	mov	[1+((0+?___flmul+04h)^0x0)],a
 12323  70C6  51 4A             	mov	a,[2+((eval_poly@res)^0x0)]
 12324  70C8  53 64             	mov	[2+((0+?___flmul+04h)^0x0)],a
 12325  70CA  51 4B             	mov	a,[3+((eval_poly@res)^0x0)]
 12326  70CC  53 65             	mov	[3+((0+?___flmul+04h)^0x0)],a
 12327  70CE  71 80             	or	f, 0x80	;select multiple RAM page mode
 12328                          	
 12329  70D0  7C 7201           	xcall	___flmul
 12330                          	
 12331  70D3  70 CF             	and	f, 0xCF   ;select user reg space
 12332  70D5  62 D0 00          	mov	reg[CUR_PP],0
 12333  70D8  51 5E             	mov	a,[0+((0+?___flmul)^0x0)]
 12334  70DA  53 4D             	mov	[0+((?___fladd)^0x0)],a
 12335  70DC  51 5F             	mov	a,[1+((0+?___flmul)^0x0)]
 12336  70DE  53 4E             	mov	[1+((?___fladd)^0x0)],a
 12337  70E0  51 60             	mov	a,[2+((0+?___flmul)^0x0)]
 12338  70E2  53 4F             	mov	[2+((?___fladd)^0x0)],a
 12339  70E4  51 61             	mov	a,[3+((0+?___flmul)^0x0)]
 12340  70E6  53 50             	mov	[3+((?___fladd)^0x0)],a
 12341  70E8  51 47             	mov	a,[1+((eval_poly@n)^0x0)]
 12342  70EA  01 FF             	add	a,<(-1)
 12343  70EC  53 47             	mov	[1+((eval_poly@n)^0x0)],a
 12344  70EE  51 46             	mov	a,[0+((eval_poly@n)^0x0)]
 12345  70F0  09 FF             	adc	a,>(-1)
 12346  70F2  53 46             	mov	[0+((eval_poly@n)^0x0)],a
 12347  70F4  51 47             	mov	a,[1+((eval_poly@n)^0x0)]
 12348  70F6  64                	asl	a
 12349  70F7  64                	asl	a
 12350  70F8  02 45             	add	a,[1+((eval_poly@d)^0x0)]
 12351  70FA  5C                	mov	x,a
 12352  70FB  50 00             	mov	a,0
 12353  70FD  0A 44             	adc	a,[0+((eval_poly@d)^0x0)]
 12354  70FF  08                	push	a
 12355  7100  28                	romx
 12356  7101  53 51             	mov	[0+((0+?___fladd+04h)^0x0)],a
 12357  7103  18                	pop	a
 12358  7104  75                	inc	x
 12359  7105  08                	push	a
 12360  7106  28                	romx
 12361  7107  53 52             	mov	[1+((0+?___fladd+04h)^0x0)],a
 12362  7109  18                	pop	a
 12363  710A  75                	inc	x
 12364  710B  08                	push	a
 12365  710C  28                	romx
 12366  710D  53 53             	mov	[2+((0+?___fladd+04h)^0x0)],a
 12367  710F  18                	pop	a
 12368  7110  75                	inc	x
 12369  7111  28                	romx
 12370  7112  53 54             	mov	[3+((0+?___fladd+04h)^0x0)],a
 12371  7114  71 80             	or	f, 0x80	;select multiple RAM page mode
 12372                          	
 12373  7116  7C 7416           	xcall	___fladd
 12374                          	
 12375  7119  70 CF             	and	f, 0xCF   ;select user reg space
 12376  711B  62 D0 00          	mov	reg[CUR_PP],0
 12377  711E  51 4D             	mov	a,[0+((0+?___fladd)^0x0)]
 12378  7120  53 48             	mov	[0+((eval_poly@res)^0x0)],a
 12379  7122  51 4E             	mov	a,[1+((0+?___fladd)^0x0)]
 12380  7124  53 49             	mov	[1+((eval_poly@res)^0x0)],a
 12381  7126  51 4F             	mov	a,[2+((0+?___fladd)^0x0)]
 12382  7128  53 4A             	mov	[2+((eval_poly@res)^0x0)],a
 12383  712A  51 50             	mov	a,[3+((0+?___fladd)^0x0)]
 12384  712C  53 4B             	mov	[3+((eval_poly@res)^0x0)],a
 12385                          ;			
 12386  712E                    l674:	
 12387                          	line	9
 12388  712E  70 CF             	and	f, 0xCF   ;select user reg space
 12389  7130  62 D0 00          	mov	reg[CUR_PP],0
 12390  7133  51 46             	mov	a,[0+((eval_poly@n)^0x0)]
 12391  7135  39 00             	cmp	a,>(0)
 12392  7137  B005              	jnz	u2523
 12393  7139  51 47             	mov	a,[1+((eval_poly@n)^0x0)]
 12394  713B  39 00             	cmp	a,<(0)
 12395  713D                    u2523:
 12396  713D  BF6B              	jnz	l675
 12397                          ;			
 12398  713F                    l676:	
 12399                          	line	11
 12400  713F  70 CF             	and	f, 0xCF   ;select user reg space
 12401  7141  62 D0 00          	mov	reg[CUR_PP],0
 12402  7144  51 48             	mov	a,[0+((eval_poly@res)^0x0)]
 12403  7146  53 40             	mov	[0+((?_eval_poly)^0x0)],a
 12404  7148  51 49             	mov	a,[1+((eval_poly@res)^0x0)]
 12405  714A  53 41             	mov	[1+((?_eval_poly)^0x0)],a
 12406  714C  51 4A             	mov	a,[2+((eval_poly@res)^0x0)]
 12407  714E  53 42             	mov	[2+((?_eval_poly)^0x0)],a
 12408  7150  51 4B             	mov	a,[3+((eval_poly@res)^0x0)]
 12409  7152  53 43             	mov	[3+((?_eval_poly)^0x0)],a
 12410  7154  7D 7157           	xjmp	l673
 12411                          	line	12
 12412                          ;evalpoly.c: 12: }
 12413  7157                    l673:
 12414                          ;			
 12415  7157  70 CF             	and	f, 0xCF   ;select user reg space
 12416                          	
 12417  7159  7F                	ret
 12418                          GLOBAL __end_of_eval_poly
 12419  715A                    	__end_of_eval_poly:
 12420                          	FNSIZE	_eval_poly,5,8
 12421                          ; =============== function _eval_poly ends ============
 12422                          
 12423                          	signat	_eval_poly,12412
 12424                          	global	_OneWire_WriteByte
 12425                          	global	_oo_crc_shuffle_byte
 12426                          	global	??_oo_crc_shuffle_byte
 12427                          	global	?_oo_crc_shuffle_byte
 12428                          	psect	text
 12429                          
 12430                          ; *************** function _oo_crc_shuffle_byte *****************
 12431                          ; Defined at:
 12432                          ;		line 221 in file "./oo.c"
 12433                          ; Parameters:
 12434                          ;		input       	offs:   0	type: unsigned char 
 12435                          ; Auto variables:
 12436                          ;		None
 12437                          ; Return value:
 12438                          ;		type: void 
 12439                          ;		size: 0
 12440                          ; Registers used:
 12441                          ;		a, x, CUR_PP
 12442                          ; Tracked objects:
 12443                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12444                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12445                          ;		Unchanged: 
 12446                          ; Data sizes:
 12447                          ;		Autos:    0
 12448                          ;		Params:   1
 12449                          ;		Temp:     1
 12450                          ;		Total:    2
 12451                          ; This function calls:
 12452                          ;		Nothing
 12453                          ; This function is called by:
 12454                          ;		_oo_rx_byte
 12455                          ; This function uses a non-reentrant model
 12456                          ; 
 12457                          	file	"./oo.c"
 12458                          	line	221
 12459  0023                    	__size_of_oo_crc_shuffle_byte	equ	__end_of_oo_crc_shuffle_byte-_oo_crc_shuffle_byte
 12460                          ;oo.c: 221: void oo_crc_shuffle_byte(char input){
 12461                          ;			
 12462  715A                    _oo_crc_shuffle_byte:	
 12463                          	opt	disable
 12464                          	line	222
 12465                          ;oo.c: 222: crc = crc_rom[crc ^ input];
 12466  715A  70 CF             	and	f, 0xCF   ;select user reg space
 12467  715C  71 80             	or	f, 0x80	;select multiple RAM page mode
 12468  715E  62 D0 02          	mov	reg[CUR_PP],2
 12469  7161  51 14             	mov	a,[0+((_crc)^0x200)]
 12470  7163  62 D0 00          	mov	reg[CUR_PP],0
 12471  7166  32 35             	xor	a,[0+((oo_crc_shuffle_byte@input)^0x0)]
 12472  7168  53 36             	mov	[(??_oo_crc_shuffle_byte^0x0)+0+0],a
 12473  716A  51 36             	mov	a,[(??_oo_crc_shuffle_byte^0x0)+0+0]
 12474  716C  01 00             	add	a,<(8000h+_crc_rom)
 12475  716E  5C                	mov	x,a
 12476  716F  50 81             	mov	a,>(8000h+_crc_rom)
 12477  7171  60 D3             	mov	reg[0xd3],a
 12478  7173  52 00             	mov	a,[x+0]
 12479  7175  62 D0 02          	mov	reg[CUR_PP],2
 12480  7178  53 14             	mov	[0+((_crc)^0x200)],a
 12481                          	line	223
 12482                          ;oo.c: 223: }
 12483  717A                    l50:
 12484                          ;			
 12485  717A  70 CF             	and	f, 0xCF   ;select user reg space
 12486                          	
 12487  717C  7F                	ret
 12488                          GLOBAL __end_of_oo_crc_shuffle_byte
 12489  717D                    	__end_of_oo_crc_shuffle_byte:
 12490                          	FNSIZE	_oo_crc_shuffle_byte,1,1
 12491                          ; =============== function _oo_crc_shuffle_byte ends ============
 12492                          
 12493                          	signat	_oo_crc_shuffle_byte,4216
 12494                          	global	_frexp
 12495                          	global	??_frexp
 12496                          	global	?_frexp
 12497                          	psect	text
 12498                          
 12499                          ; *************** function _frexp *****************
 12500                          ; Defined at:
 12501                          ;		line 255 in file "../common/frexp.c"
 12502                          ; Parameters:
 12503                          ;		value       	offs:   0	type: void 
 12504                          ;		eptr        	offs:   4	type: PTR int ; Largest target is 2
 12505                          ;		 -> log@exp(2), 
 12506                          ; Auto variables:
 12507                          ;		None
 12508                          ; Return value:
 12509                          ;		type: PTR int 
 12510                          ;		size: 4
 12511                          ; Registers used:
 12512                          ;		a, x, CUR_PP
 12513                          ; Tracked objects:
 12514                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12515                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12516                          ;		Unchanged: 
 12517                          ; Data sizes:
 12518                          ;		Autos:    0
 12519                          ;		Params:   6
 12520                          ;		Temp:     3
 12521                          ;		Total:    9
 12522                          ; This function calls:
 12523                          ;		Nothing
 12524                          ; This function is called by:
 12525                          ;		_log
 12526                          ; This function uses a non-reentrant model
 12527                          ; 
 12528                          	file	"../common/frexp.c"
 12529                          	line	255
 12530  0084                    	__size_of_frexp	equ	__end_of_frexp-_frexp
 12531                          ;frexp.c: 116: typedef union both
 12532                          ;frexp.c: 117: {
 12533                          ;frexp.c: 118: struct flt
 12534                          ;frexp.c: 119: {
 12535                          ;frexp.c: 120: unsigned sign:1;
 12536                          ;frexp.c: 121: unsigned exp:8;
 12537                          ;frexp.c: 122: unsigned hmant:7;
 12538                          ;frexp.c: 123: unsigned char mant[2];
 12539                          ;frexp.c: 124: } flt;
 12540                          ;frexp.c: 125: double fl;
 12541                          ;frexp.c: 126: } both_t;
 12542                          ;frexp.c: 253: double
 12543                          ;frexp.c: 254: frexp(double value, int * eptr)
 12544                          ;frexp.c: 255: {
 12545                          ;			
 12546  717D                    _frexp:	
 12547                          	opt	disable
 12548                          	line	256
 12549                          ;frexp.c: 256: if (value == 0.0) {
 12550  717D  70 CF             	and	f, 0xCF   ;select user reg space
 12551  717F  62 D0 00          	mov	reg[CUR_PP],0
 12552  7182  51 40             	mov	a,[0+((frexp@value)^0x0)]
 12553  7184  39 00             	cmp	a,<(0x0>>24)
 12554  7186  B011              	jnz	u1593
 12555  7188  51 41             	mov	a,[1+((frexp@value)^0x0)]
 12556  718A  39 00             	cmp	a,<(0x0>>16)
 12557  718C  B00B              	jnz	u1593
 12558  718E  51 42             	mov	a,[2+((frexp@value)^0x0)]
 12559  7190  39 00             	cmp	a,<(0x0>>8)
 12560  7192  B005              	jnz	u1593
 12561  7194  51 43             	mov	a,[3+((frexp@value)^0x0)]
 12562  7196  39 00             	cmp	a,<(0x0)
 12563  7198                    u1593:
 12564  7198  B02C              	jnz	l233
 12565                          	line	257
 12566                          ;frexp.c: 257: *eptr = 0;
 12567  719A  70 CF             	and	f, 0xCF   ;select user reg space
 12568  719C  62 D0 00          	mov	reg[CUR_PP],0
 12569  719F  51 44             	mov	a,[0+((frexp@eptr)^0x0)]
 12570  71A1  58 45             	mov	x,[1+((frexp@eptr)^0x0)]
 12571  71A3  60 D3             	mov	reg[0xd3],a
 12572  71A5  50 00             	mov	a,<(0)
 12573  71A7  54 01             	mov	[1+x],a
 12574  71A9  50 00             	mov	a,>(0)
 12575  71AB  54 00             	mov	[0+x],a
 12576                          	line	258
 12577  71AD  50 00             	mov	a,<(0x0>>24)
 12578  71AF  70 CF             	and	f, 0xCF   ;select user reg space
 12579  71B1  62 D0 00          	mov	reg[CUR_PP],0
 12580  71B4  53 40             	mov	[0+((?_frexp)^0x0)],a
 12581  71B6  50 00             	mov	a,<(0x0>>16)
 12582  71B8  53 41             	mov	[1+((?_frexp)^0x0)],a
 12583  71BA  50 00             	mov	a,<(0x0>>8)
 12584  71BC  53 42             	mov	[2+((?_frexp)^0x0)],a
 12585  71BE  50 00             	mov	a,<(0x0)
 12586  71C0  53 43             	mov	[3+((?_frexp)^0x0)],a
 12587  71C2  7D 71FE           	xjmp	l232
 12588                          	line	259
 12589                          ;			
 12590  71C5                    l233:	
 12591                          	line	265
 12592                          ;frexp.c: 259: }
 12593                          ;frexp.c: 265: *eptr = ((both_t *)&value)->flt.exp - 126;
 12594  71C5  70 CF             	and	f, 0xCF   ;select user reg space
 12595  71C7  62 D0 00          	mov	reg[CUR_PP],0
 12596  71CA  51 41             	mov	a,[1+((frexp@value)^0x0)]
 12597  71CC  6A                	rlc	a
 12598  71CD  51 40             	mov	a,[0+((frexp@value)^0x0)]
 12599  71CF  6A                	rlc	a
 12600  71D0  21 FF             	and	a,((1<<8)-1)
 12601  71D2  53 46             	mov	[(??_frexp^0x0)+0+0],a
 12602  71D4  08                	push	a
 12603  71D5  51 44             	mov	a,[0+((frexp@eptr)^0x0)]
 12604  71D7  08                	push	a
 12605  71D8  58 45             	mov	x,[1+((frexp@eptr)^0x0)]
 12606  71DA  18                	pop	a
 12607  71DB  60 D3             	mov	reg[0xd3],a
 12608  71DD  18                	pop	a
 12609  71DE  51 46             	mov	a,[(??_frexp^0x0)+0+0]
 12610  71E0  01 82             	add	a,<(-126)
 12611  71E2  54 01             	mov	[1+x],a
 12612  71E4  50 00             	mov	a,0
 12613  71E6  09 FF             	adc	a,>(-126)
 12614  71E8  54 00             	mov	[0+x],a
 12615                          	line	271
 12616                          ;frexp.c: 271: ((both_t *)&value)->flt.exp = 126;
 12617  71EA  70 CF             	and	f, 0xCF   ;select user reg space
 12618  71EC  62 D0 00          	mov	reg[CUR_PP],0
 12619  71EF  26 40  80         	and	[0+((frexp@value)^0x0)],>(not (((1<<8)-1)<<7))
 12620  71F2  2E 40  3F         	or	[0+((frexp@value)^0x0)],>((07Eh & ((1<<8)-1))<<7)
 12621  71F5  26 41  7F         	and	[1+((frexp@value)^0x0)],<(not (((1<<8)-1)<<7))
 12622  71F8  2E 41  00         	or	[1+((frexp@value)^0x0)],<((07Eh & ((1<<8)-1))<<7)
 12623                          	line	273
 12624  71FB  7D 71FE           	xjmp	l232
 12625                          	line	274
 12626                          ;frexp.c: 274: }
 12627  71FE                    l232:
 12628                          ;			
 12629  71FE  70 CF             	and	f, 0xCF   ;select user reg space
 12630                          	
 12631  7200  7F                	ret
 12632                          GLOBAL __end_of_frexp
 12633  7201                    	__end_of_frexp:
 12634                          	FNSIZE	_frexp,3,6
 12635                          ; =============== function _frexp ends ============
 12636                          
 12637                          	signat	_frexp,8316
 12638                          	global	___flmul
 12639                          	global	??___flmul
 12640                          	global	?___flmul
 12641                          	psect	text
 12642                          
 12643                          ; *************** function ___flmul *****************
 12644                          ; Defined at:
 12645                          ;		line 18 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flmul.c"
 12646                          ; Parameters:
 12647                          ;		f1          	offs:   0	type: PTR int 
 12648                          ;		f2          	offs:   4	type: PTR int 
 12649                          ; Auto variables:
 12650                          ;		f3          	       	type: PTR int 
 12651                          ;		cntr        	       	type: unsigned char 
 12652                          ;		exp1        	       	type: unsigned char 
 12653                          ;		sign1       	       	type: unsigned char 
 12654                          ; Return value:
 12655                          ;		type: unsigned char 
 12656                          ;		size: 4
 12657                          ; Registers used:
 12658                          ;		a, x, CUR_PP
 12659                          ; Tracked objects:
 12660                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12661                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12662                          ;		Unchanged: 
 12663                          ; Data sizes:
 12664                          ;		Autos:    7
 12665                          ;		Params:   8
 12666                          ;		Temp:     4
 12667                          ;		Total:   19
 12668                          ; This function calls:
 12669                          ;		___flunpack
 12670                          ;		___flpack
 12671                          ; This function is called by:
 12672                          ;		_calc_sth11
 12673                          ;		_calc_dewpoint
 12674                          ;		_fround
 12675                          ;		_scale
 12676                          ;		_printf
 12677                          ;		_log
 12678                          ;		_log10
 12679                          ;		_eval_poly
 12680                          ; This function uses a non-reentrant model
 12681                          ; 
 12682                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flmul.c"
 12683                          	line	18
 12684  0215                    	__size_of___flmul	equ	__end_of___flmul-___flmul
 12685                          ;flmul.c: 16: double
 12686                          ;flmul.c: 17: __flmul(double f1, double f2)
 12687                          ;flmul.c: 18: {
 12688                          ;			
 12689  7201                    ___flmul:	
 12690                          	opt	disable
 12691                          	line	22
 12692                          ;flmul.c: 19: unsigned char exp1, sign1, cntr;
 12693                          ;flmul.c: 20: double f3;
 12694                          ;flmul.c: 22: (*(unsigned long *)&f3) = 0;
 12695  7201  50 00             	mov	a,<(0>>24)
 12696  7203  70 CF             	and	f, 0xCF   ;select user reg space
 12697  7205  62 D0 00          	mov	reg[CUR_PP],0
 12698  7208  53 66             	mov	[0+((___flmul@f3)^0x0)],a
 12699  720A  50 00             	mov	a,<(0>>16)
 12700  720C  53 67             	mov	[1+((___flmul@f3)^0x0)],a
 12701  720E  50 00             	mov	a,<(0>>8)
 12702  7210  53 68             	mov	[2+((___flmul@f3)^0x0)],a
 12703  7212  50 00             	mov	a,<(0)
 12704  7214  53 69             	mov	[3+((___flmul@f3)^0x0)],a
 12705                          	line	23
 12706                          ;flmul.c: 23: sign1 = __flunpack(&(*(unsigned long *)&f1), &exp1);
 12707  7216  50 5E             	mov	a,<((___flmul@f1|8000h))
 12708  7218  70 CF             	and	f, 0xCF   ;select user reg space
 12709  721A  62 D0 00          	mov	reg[CUR_PP],0
 12710  721D  53 72             	mov	[1+((?___flunpack)^0x0)],a
 12711  721F  50 80             	mov	a,>((___flmul@f1|8000h))
 12712  7221  53 71             	mov	[0+((?___flunpack)^0x0)],a
 12713  7223  50 6B             	mov	a,<((___flmul@exp1|8000h))
 12714  7225  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 12715  7227  50 80             	mov	a,>((___flmul@exp1|8000h))
 12716  7229  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 12717  722B  71 80             	or	f, 0x80	;select multiple RAM page mode
 12718                          	
 12719  722D  7C 7714           	xcall	___flunpack
 12720                          	
 12721  7230  70 CF             	and	f, 0xCF   ;select user reg space
 12722  7232  62 D0 00          	mov	reg[CUR_PP],0
 12723  7235  53 6C             	mov	[0+((___flmul@sign1)^0x0)],a
 12724                          	line	24
 12725                          ;flmul.c: 24: sign1 ^= __flunpack(&(*(unsigned long *)&f2), &cntr);
 12726  7237  50 62             	mov	a,<((___flmul@f2|8000h))
 12727  7239  70 CF             	and	f, 0xCF   ;select user reg space
 12728  723B  62 D0 00          	mov	reg[CUR_PP],0
 12729  723E  53 72             	mov	[1+((?___flunpack)^0x0)],a
 12730  7240  50 80             	mov	a,>((___flmul@f2|8000h))
 12731  7242  53 71             	mov	[0+((?___flunpack)^0x0)],a
 12732  7244  50 6A             	mov	a,<((___flmul@cntr|8000h))
 12733  7246  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 12734  7248  50 80             	mov	a,>((___flmul@cntr|8000h))
 12735  724A  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 12736  724C  71 80             	or	f, 0x80	;select multiple RAM page mode
 12737                          	
 12738  724E  7C 7714           	xcall	___flunpack
 12739                          	
 12740  7251  70 CF             	and	f, 0xCF   ;select user reg space
 12741  7253  62 D0 00          	mov	reg[CUR_PP],0
 12742  7256  53 6D             	mov	[(??___flmul^0x0)+7+0],a
 12743  7258  51 6C             	mov	a,[0+((___flmul@sign1)^0x0)]
 12744  725A  32 6D             	xor	a,[(??___flmul^0x0)+7+0]
 12745  725C  53 6C             	mov	[0+((___flmul@sign1)^0x0)],a
 12746                          	line	25
 12747                          ;flmul.c: 25: if(cntr == 0 || exp1 == 0)
 12748  725E  51 6A             	mov	a,[0+((___flmul@cntr)^0x0)]
 12749  7260  39 00             	cmp	a,(0)
 12750  7262  A00C              	jz	l600002279
 12751  7264  70 CF             	and	f, 0xCF   ;select user reg space
 12752  7266  62 D0 00          	mov	reg[CUR_PP],0
 12753  7269  51 6B             	mov	a,[0+((___flmul@exp1)^0x0)]
 12754  726B  39 00             	cmp	a,(0)
 12755  726D  B019              	jnz	l403
 12756                          ;			
 12757  726F                    l600002279:	
 12758                          	line	26
 12759  726F  70 CF             	and	f, 0xCF   ;select user reg space
 12760  7271  62 D0 00          	mov	reg[CUR_PP],0
 12761  7274  51 66             	mov	a,[0+((___flmul@f3)^0x0)]
 12762  7276  53 5E             	mov	[0+((?___flmul)^0x0)],a
 12763  7278  51 67             	mov	a,[1+((___flmul@f3)^0x0)]
 12764  727A  53 5F             	mov	[1+((?___flmul)^0x0)],a
 12765  727C  51 68             	mov	a,[2+((___flmul@f3)^0x0)]
 12766  727E  53 60             	mov	[2+((?___flmul)^0x0)],a
 12767  7280  51 69             	mov	a,[3+((___flmul@f3)^0x0)]
 12768  7282  53 61             	mov	[3+((?___flmul)^0x0)],a
 12769  7284  7D 7413           	xjmp	l402
 12770                          ;			
 12771  7287                    l403:	
 12772                          	line	27
 12773                          ;flmul.c: 27: exp1 += cntr-127-6;
 12774  7287  50 7B             	mov	a,<((07Bh))
 12775  7289  70 CF             	and	f, 0xCF   ;select user reg space
 12776  728B  62 D0 00          	mov	reg[CUR_PP],0
 12777  728E  02 6A             	add	a,[0+((___flmul@cntr)^0x0)]
 12778  7290  53 6D             	mov	[(??___flmul^0x0)+7+0],a
 12779  7292  51 6B             	mov	a,[0+((___flmul@exp1)^0x0)]
 12780  7294  02 6D             	add	a,[(??___flmul^0x0)+7+0]
 12781  7296  53 6B             	mov	[0+((___flmul@exp1)^0x0)],a
 12782                          	line	28
 12783                          ;flmul.c: 28: cntr = 7;
 12784  7298  50 07             	mov	a,<((07h))
 12785  729A  53 6A             	mov	[0+((___flmul@cntr)^0x0)],a
 12786                          	line	29
 12787                          ;flmul.c: 29: do {
 12788                          ;			
 12789  729C                    l406:	
 12790                          	line	30
 12791                          ;flmul.c: 30: if((*(unsigned long *)&f1) & 1)
 12792  729C  70 CF             	and	f, 0xCF   ;select user reg space
 12793  729E  62 D0 00          	mov	reg[CUR_PP],0
 12794  72A1  51 5E             	mov	a,[0+((___flmul@f1)^0x0)]
 12795  72A3  53 6D             	mov	[(??___flmul^0x0)+7+0],a
 12796  72A5  51 5F             	mov	a,[1+((___flmul@f1)^0x0)]
 12797  72A7  53 6E             	mov	[(??___flmul^0x0)+7+0+1],a
 12798  72A9  51 60             	mov	a,[2+((___flmul@f1)^0x0)]
 12799  72AB  53 6F             	mov	[(??___flmul^0x0)+7+0+2],a
 12800  72AD  51 61             	mov	a,[3+((___flmul@f1)^0x0)]
 12801  72AF  53 70             	mov	[(??___flmul^0x0)+7+0+3],a
 12802  72B1  50 01             	mov	a,<(01h)
 12803  72B3  24 70             	and	[(??___flmul^0x0)+7+3],a
 12804  72B5  50 00             	mov	a,<(01h>>8)
 12805  72B7  24 6F             	and	[(??___flmul^0x0)+7+2],a
 12806  72B9  50 00             	mov	a,<(01h>>16)
 12807  72BB  24 6E             	and	[(??___flmul^0x0)+7+1],a
 12808  72BD  50 00             	mov	a,<(01h>>24)
 12809  72BF  24 6D             	and	[(??___flmul^0x0)+7+0],a
 12810  72C1  51 6D             	mov	a,[(??___flmul^0x0)+7+0]
 12811  72C3  39 00             	cmp	a,<(0>>24)
 12812  72C5  B011              	jnz	u1943
 12813  72C7  51 6E             	mov	a,[(??___flmul^0x0)+7+1]
 12814  72C9  39 00             	cmp	a,<(0>>16)
 12815  72CB  B00B              	jnz	u1943
 12816  72CD  51 6F             	mov	a,[(??___flmul^0x0)+7+2]
 12817  72CF  39 00             	cmp	a,<(0>>8)
 12818  72D1  B005              	jnz	u1943
 12819  72D3  51 70             	mov	a,[(??___flmul^0x0)+7+3]
 12820  72D5  39 00             	cmp	a,<(0)
 12821  72D7                    u1943:
 12822  72D7  A016              	jz	l407
 12823                          	line	31
 12824                          ;flmul.c: 31: (*(unsigned long *)&f3) += (*(unsigned long *)&f2);
 12825  72D9  70 CF             	and	f, 0xCF   ;select user reg space
 12826  72DB  62 D0 00          	mov	reg[CUR_PP],0
 12827  72DE  51 65             	mov	a,[3+((___flmul@f2)^0x0)]
 12828  72E0  04 69             	add	[3+((___flmul@f3)^0x0)],a
 12829  72E2  51 64             	mov	a,[2+((___flmul@f2)^0x0)]
 12830  72E4  0C 68             	adc	[2+((___flmul@f3)^0x0)],a
 12831  72E6  51 63             	mov	a,[1+((___flmul@f2)^0x0)]
 12832  72E8  0C 67             	adc	[1+((___flmul@f3)^0x0)],a
 12833  72EA  51 62             	mov	a,[0+((___flmul@f2)^0x0)]
 12834  72EC  0C 66             	adc	[0+((___flmul@f3)^0x0)],a
 12835                          ;			
 12836  72EE                    l407:	
 12837                          	line	32
 12838                          ;flmul.c: 32: (*(unsigned long *)&f1) >>= 1;
 12839  72EE  50 01             	mov	a,<((01h))
 12840  72F0  7D 7302           	xjmp	u1953
 12841  72F3  70 FB             	clrc
 12842  72F5                    u1964:
 12843  72F5  70 CF             	and	f, 0xCF   ;select user reg space
 12844  72F7  62 D0 00          	mov	reg[CUR_PP],0
 12845  72FA  6E 5E             	rrc	[0+((___flmul@f1)^0x0)]
 12846  72FC  6E 5F             	rrc	[1+((___flmul@f1)^0x0)]
 12847  72FE  6E 60             	rrc	[2+((___flmul@f1)^0x0)]
 12848  7300  6E 61             	rrc	[3+((___flmul@f1)^0x0)]
 12849  7302                    u1953:
 12850  7302  78                	dec	a
 12851  7303  DFF1              	jnc	u1964
 12852                          	line	33
 12853                          ;flmul.c: 33: (*(unsigned long *)&f2) <<= 1;
 12854  7305  50 01             	mov	a,<((01h))
 12855  7307  7D 7317           	xjmp	u1973
 12856  730A                    u1984:
 12857  730A  70 CF             	and	f, 0xCF   ;select user reg space
 12858  730C  62 D0 00          	mov	reg[CUR_PP],0
 12859  730F  65 65             	asl	[3+((___flmul@f2)^0x0)]
 12860  7311  6B 64             	rlc	[2+((___flmul@f2)^0x0)]
 12861  7313  6B 63             	rlc	[1+((___flmul@f2)^0x0)]
 12862  7315  6B 62             	rlc	[0+((___flmul@f2)^0x0)]
 12863  7317                    u1973:
 12864  7317  78                	dec	a
 12865  7318  DFF1              	jnc	u1984
 12866                          	line	34
 12867                          ;flmul.c: 34: } while(--cntr != 0);
 12868  731A  70 CF             	and	f, 0xCF   ;select user reg space
 12869  731C  62 D0 00          	mov	reg[CUR_PP],0
 12870  731F  51 6A             	mov	a,[0+((___flmul@cntr)^0x0)]
 12871  7321  11 01             	sub	a,<((01h))
 12872  7323  53 6A             	mov	[0+((___flmul@cntr)^0x0)],a
 12873  7325  51 6A             	mov	a,[0+((___flmul@cntr)^0x0)]
 12874  7327  39 00             	cmp	a,(0)
 12875  7329  BF72              	jnz	l406
 12876                          ;			
 12877  732B                    l405:	
 12878                          	line	35
 12879                          ;flmul.c: 35: cntr = 17;
 12880  732B  50 11             	mov	a,<((011h))
 12881  732D  70 CF             	and	f, 0xCF   ;select user reg space
 12882  732F  62 D0 00          	mov	reg[CUR_PP],0
 12883  7332  53 6A             	mov	[0+((___flmul@cntr)^0x0)],a
 12884                          	line	36
 12885                          ;flmul.c: 36: do {
 12886                          ;			
 12887  7334                    l410:	
 12888                          	line	37
 12889                          ;flmul.c: 37: if((*(unsigned long *)&f1) & 1)
 12890  7334  70 CF             	and	f, 0xCF   ;select user reg space
 12891  7336  62 D0 00          	mov	reg[CUR_PP],0
 12892  7339  51 5E             	mov	a,[0+((___flmul@f1)^0x0)]
 12893  733B  53 6D             	mov	[(??___flmul^0x0)+7+0],a
 12894  733D  51 5F             	mov	a,[1+((___flmul@f1)^0x0)]
 12895  733F  53 6E             	mov	[(??___flmul^0x0)+7+0+1],a
 12896  7341  51 60             	mov	a,[2+((___flmul@f1)^0x0)]
 12897  7343  53 6F             	mov	[(??___flmul^0x0)+7+0+2],a
 12898  7345  51 61             	mov	a,[3+((___flmul@f1)^0x0)]
 12899  7347  53 70             	mov	[(??___flmul^0x0)+7+0+3],a
 12900  7349  50 01             	mov	a,<(01h)
 12901  734B  24 70             	and	[(??___flmul^0x0)+7+3],a
 12902  734D  50 00             	mov	a,<(01h>>8)
 12903  734F  24 6F             	and	[(??___flmul^0x0)+7+2],a
 12904  7351  50 00             	mov	a,<(01h>>16)
 12905  7353  24 6E             	and	[(??___flmul^0x0)+7+1],a
 12906  7355  50 00             	mov	a,<(01h>>24)
 12907  7357  24 6D             	and	[(??___flmul^0x0)+7+0],a
 12908  7359  51 6D             	mov	a,[(??___flmul^0x0)+7+0]
 12909  735B  39 00             	cmp	a,<(0>>24)
 12910  735D  B011              	jnz	u1993
 12911  735F  51 6E             	mov	a,[(??___flmul^0x0)+7+1]
 12912  7361  39 00             	cmp	a,<(0>>16)
 12913  7363  B00B              	jnz	u1993
 12914  7365  51 6F             	mov	a,[(??___flmul^0x0)+7+2]
 12915  7367  39 00             	cmp	a,<(0>>8)
 12916  7369  B005              	jnz	u1993
 12917  736B  51 70             	mov	a,[(??___flmul^0x0)+7+3]
 12918  736D  39 00             	cmp	a,<(0)
 12919  736F                    u1993:
 12920  736F  A016              	jz	l411
 12921                          	line	38
 12922                          ;flmul.c: 38: (*(unsigned long *)&f3) += (*(unsigned long *)&f2);
 12923  7371  70 CF             	and	f, 0xCF   ;select user reg space
 12924  7373  62 D0 00          	mov	reg[CUR_PP],0
 12925  7376  51 65             	mov	a,[3+((___flmul@f2)^0x0)]
 12926  7378  04 69             	add	[3+((___flmul@f3)^0x0)],a
 12927  737A  51 64             	mov	a,[2+((___flmul@f2)^0x0)]
 12928  737C  0C 68             	adc	[2+((___flmul@f3)^0x0)],a
 12929  737E  51 63             	mov	a,[1+((___flmul@f2)^0x0)]
 12930  7380  0C 67             	adc	[1+((___flmul@f3)^0x0)],a
 12931  7382  51 62             	mov	a,[0+((___flmul@f2)^0x0)]
 12932  7384  0C 66             	adc	[0+((___flmul@f3)^0x0)],a
 12933                          ;			
 12934  7386                    l411:	
 12935                          	line	39
 12936                          ;flmul.c: 39: (*(unsigned long *)&f1) >>= 1;
 12937  7386  50 01             	mov	a,<((01h))
 12938  7388  7D 739A           	xjmp	u2003
 12939  738B  70 FB             	clrc
 12940  738D                    u2014:
 12941  738D  70 CF             	and	f, 0xCF   ;select user reg space
 12942  738F  62 D0 00          	mov	reg[CUR_PP],0
 12943  7392  6E 5E             	rrc	[0+((___flmul@f1)^0x0)]
 12944  7394  6E 5F             	rrc	[1+((___flmul@f1)^0x0)]
 12945  7396  6E 60             	rrc	[2+((___flmul@f1)^0x0)]
 12946  7398  6E 61             	rrc	[3+((___flmul@f1)^0x0)]
 12947  739A                    u2003:
 12948  739A  78                	dec	a
 12949  739B  DFF1              	jnc	u2014
 12950                          	line	40
 12951                          ;flmul.c: 40: (*(unsigned long *)&f3) >>= 1;
 12952  739D  50 01             	mov	a,<((01h))
 12953  739F  7D 73B1           	xjmp	u2023
 12954  73A2  70 FB             	clrc
 12955  73A4                    u2034:
 12956  73A4  70 CF             	and	f, 0xCF   ;select user reg space
 12957  73A6  62 D0 00          	mov	reg[CUR_PP],0
 12958  73A9  6E 66             	rrc	[0+((___flmul@f3)^0x0)]
 12959  73AB  6E 67             	rrc	[1+((___flmul@f3)^0x0)]
 12960  73AD  6E 68             	rrc	[2+((___flmul@f3)^0x0)]
 12961  73AF  6E 69             	rrc	[3+((___flmul@f3)^0x0)]
 12962  73B1                    u2023:
 12963  73B1  78                	dec	a
 12964  73B2  DFF1              	jnc	u2034
 12965                          	line	41
 12966                          ;flmul.c: 41: } while(--cntr != 0);
 12967  73B4  70 CF             	and	f, 0xCF   ;select user reg space
 12968  73B6  62 D0 00          	mov	reg[CUR_PP],0
 12969  73B9  51 6A             	mov	a,[0+((___flmul@cntr)^0x0)]
 12970  73BB  11 01             	sub	a,<((01h))
 12971  73BD  53 6A             	mov	[0+((___flmul@cntr)^0x0)],a
 12972  73BF  51 6A             	mov	a,[0+((___flmul@cntr)^0x0)]
 12973  73C1  39 00             	cmp	a,(0)
 12974  73C3  BF70              	jnz	l410
 12975                          ;			
 12976  73C5                    l409:	
 12977                          	line	42
 12978                          ;flmul.c: 42: __flpack(&(*(unsigned long *)&f3), exp1);
 12979  73C5  50 66             	mov	a,<((___flmul@f3|8000h))
 12980  73C7  70 CF             	and	f, 0xCF   ;select user reg space
 12981  73C9  62 D0 00          	mov	reg[CUR_PP],0
 12982  73CC  53 72             	mov	[1+((?___flpack)^0x0)],a
 12983  73CE  50 80             	mov	a,>((___flmul@f3|8000h))
 12984  73D0  53 71             	mov	[0+((?___flpack)^0x0)],a
 12985  73D2  51 6B             	mov	a,[0+((___flmul@exp1)^0x0)]
 12986  73D4  53 73             	mov	[0+((0+?___flpack+02h)^0x0)],a
 12987  73D6  71 80             	or	f, 0x80	;select multiple RAM page mode
 12988                          	
 12989  73D8  7C 77F8           	xcall	___flpack
 12990                          	
 12991                          	line	43
 12992                          ;flmul.c: 43: if(sign1)
 12993  73DB  70 CF             	and	f, 0xCF   ;select user reg space
 12994  73DD  62 D0 00          	mov	reg[CUR_PP],0
 12995  73E0  51 6C             	mov	a,[0+((___flmul@sign1)^0x0)]
 12996  73E2  39 00             	cmp	a,(0)
 12997  73E4  A016              	jz	l412
 12998                          	line	44
 12999                          ;flmul.c: 44: (*(unsigned long *)&f3) |= 0x80000000;
 13000  73E6  50 00             	mov	a,<(-2147483648)
 13001  73E8  70 CF             	and	f, 0xCF   ;select user reg space
 13002  73EA  62 D0 00          	mov	reg[CUR_PP],0
 13003  73ED  2C 69             	or	[3+((___flmul@f3)^0x0)],a
 13004  73EF  50 00             	mov	a,<(-2147483648>>8)
 13005  73F1  2C 68             	or	[2+((___flmul@f3)^0x0)],a
 13006  73F3  50 00             	mov	a,<(-2147483648>>16)
 13007  73F5  2C 67             	or	[1+((___flmul@f3)^0x0)],a
 13008  73F7  50 80             	mov	a,<(-2147483648>>24)
 13009  73F9  2C 66             	or	[0+((___flmul@f3)^0x0)],a
 13010                          ;			
 13011  73FB                    l412:	
 13012                          	line	45
 13013  73FB  70 CF             	and	f, 0xCF   ;select user reg space
 13014  73FD  62 D0 00          	mov	reg[CUR_PP],0
 13015  7400  51 66             	mov	a,[0+((___flmul@f3)^0x0)]
 13016  7402  53 5E             	mov	[0+((?___flmul)^0x0)],a
 13017  7404  51 67             	mov	a,[1+((___flmul@f3)^0x0)]
 13018  7406  53 5F             	mov	[1+((?___flmul)^0x0)],a
 13019  7408  51 68             	mov	a,[2+((___flmul@f3)^0x0)]
 13020  740A  53 60             	mov	[2+((?___flmul)^0x0)],a
 13021  740C  51 69             	mov	a,[3+((___flmul@f3)^0x0)]
 13022  740E  53 61             	mov	[3+((?___flmul)^0x0)],a
 13023  7410  7D 7413           	xjmp	l402
 13024                          	line	46
 13025                          ;flmul.c: 46: }
 13026  7413                    l402:
 13027                          ;			
 13028  7413  70 CF             	and	f, 0xCF   ;select user reg space
 13029                          	
 13030  7415  7F                	ret
 13031                          GLOBAL __end_of___flmul
 13032  7416                    	__end_of___flmul:
 13033                          	FNSIZE	___flmul,11,8
 13034                          ; =============== function ___flmul ends ============
 13035                          
 13036                          	signat	___flmul,8316
 13037                          	global	___fladd
 13038                          	global	??___fladd
 13039                          	global	?___fladd
 13040                          	psect	text
 13041                          
 13042                          ; *************** function ___fladd *****************
 13043                          ; Defined at:
 13044                          ;		line 17 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fladd.c"
 13045                          ; Parameters:
 13046                          ;		f1          	offs:   0	type: unsigned char 
 13047                          ;		f2          	offs:   4	type: unsigned char 
 13048                          ; Auto variables:
 13049                          ;		exp1        	       	type: unsigned char 
 13050                          ;		exp2        	       	type: unsigned char 
 13051                          ;		sign1       	       	type: unsigned char 
 13052                          ;		sign2       	       	type: unsigned char 
 13053                          ;		cntr        	       	type: unsigned char 
 13054                          ; Return value:
 13055                          ;		type: unsigned char 
 13056                          ;		size: 4
 13057                          ; Registers used:
 13058                          ;		a, x, CUR_PP
 13059                          ; Tracked objects:
 13060                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13061                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13062                          ;		Unchanged: 
 13063                          ; Data sizes:
 13064                          ;		Autos:    5
 13065                          ;		Params:   8
 13066                          ;		Temp:     4
 13067                          ;		Total:   17
 13068                          ; This function calls:
 13069                          ;		___flunpack
 13070                          ;		___flpack
 13071                          ; This function is called by:
 13072                          ;		_calc_sth11
 13073                          ;		_calc_dewpoint
 13074                          ;		_printf
 13075                          ;		_log
 13076                          ;		___flsub
 13077                          ;		_eval_poly
 13078                          ; This function uses a non-reentrant model
 13079                          ; 
 13080                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fladd.c"
 13081                          	line	17
 13082  02C6                    	__size_of___fladd	equ	__end_of___fladd-___fladd
 13083                          ;fladd.c: 15: double
 13084                          ;fladd.c: 16: __fladd(double f1, double f2)
 13085                          ;fladd.c: 17: {
 13086                          ;			
 13087  7416                    ___fladd:	
 13088                          	opt	disable
 13089                          	line	20
 13090                          ;fladd.c: 18: unsigned char exp1, exp2, sign1, sign2, cntr;
 13091                          ;fladd.c: 20: if(sizeof((*(unsigned long *)&f1)) != 4)
 13092  7416  7D 7419           	xjmp	l367
 13093                          	line	21
 13094                          ;			
 13095  7419                    l367:	
 13096                          	line	22
 13097                          ;fladd.c: 22: sign1 = __flunpack(&(*(unsigned long *)&f1), &exp1);
 13098  7419  50 4D             	mov	a,<((___fladd@f1|8000h))
 13099  741B  70 CF             	and	f, 0xCF   ;select user reg space
 13100  741D  62 D0 00          	mov	reg[CUR_PP],0
 13101  7420  53 72             	mov	[1+((?___flunpack)^0x0)],a
 13102  7422  50 80             	mov	a,>((___fladd@f1|8000h))
 13103  7424  53 71             	mov	[0+((?___flunpack)^0x0)],a
 13104  7426  50 55             	mov	a,<((___fladd@exp1|8000h))
 13105  7428  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 13106  742A  50 80             	mov	a,>((___fladd@exp1|8000h))
 13107  742C  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 13108  742E  71 80             	or	f, 0x80	;select multiple RAM page mode
 13109                          	
 13110  7430  7C 7714           	xcall	___flunpack
 13111                          	
 13112  7433  70 CF             	and	f, 0xCF   ;select user reg space
 13113  7435  62 D0 00          	mov	reg[CUR_PP],0
 13114  7438  53 57             	mov	[0+((___fladd@sign1)^0x0)],a
 13115                          	line	23
 13116                          ;fladd.c: 23: if(exp1 == 0)
 13117  743A  70 CF             	and	f, 0xCF   ;select user reg space
 13118  743C  62 D0 00          	mov	reg[CUR_PP],0
 13119  743F  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13120  7441  39 00             	cmp	a,(0)
 13121  7443  B019              	jnz	l368
 13122                          	line	24
 13123  7445  70 CF             	and	f, 0xCF   ;select user reg space
 13124  7447  62 D0 00          	mov	reg[CUR_PP],0
 13125  744A  51 51             	mov	a,[0+((___fladd@f2)^0x0)]
 13126  744C  53 4D             	mov	[0+((?___fladd)^0x0)],a
 13127  744E  51 52             	mov	a,[1+((___fladd@f2)^0x0)]
 13128  7450  53 4E             	mov	[1+((?___fladd)^0x0)],a
 13129  7452  51 53             	mov	a,[2+((___fladd@f2)^0x0)]
 13130  7454  53 4F             	mov	[2+((?___fladd)^0x0)],a
 13131  7456  51 54             	mov	a,[3+((___fladd@f2)^0x0)]
 13132  7458  53 50             	mov	[3+((?___fladd)^0x0)],a
 13133  745A  7D 76D9           	xjmp	l366
 13134                          ;			
 13135  745D                    l368:	
 13136                          	line	25
 13137                          ;fladd.c: 25: sign2 = __flunpack(&(*(unsigned long *)&f2), &exp2);
 13138  745D  50 51             	mov	a,<((___fladd@f2|8000h))
 13139  745F  70 CF             	and	f, 0xCF   ;select user reg space
 13140  7461  62 D0 00          	mov	reg[CUR_PP],0
 13141  7464  53 72             	mov	[1+((?___flunpack)^0x0)],a
 13142  7466  50 80             	mov	a,>((___fladd@f2|8000h))
 13143  7468  53 71             	mov	[0+((?___flunpack)^0x0)],a
 13144  746A  50 56             	mov	a,<((___fladd@exp2|8000h))
 13145  746C  53 74             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 13146  746E  50 80             	mov	a,>((___fladd@exp2|8000h))
 13147  7470  53 73             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 13148  7472  71 80             	or	f, 0x80	;select multiple RAM page mode
 13149                          	
 13150  7474  7C 7714           	xcall	___flunpack
 13151                          	
 13152  7477  70 CF             	and	f, 0xCF   ;select user reg space
 13153  7479  62 D0 00          	mov	reg[CUR_PP],0
 13154  747C  53 59             	mov	[0+((___fladd@sign2)^0x0)],a
 13155                          	line	26
 13156                          ;fladd.c: 26: if(exp2 != 0) {
 13157  747E  70 CF             	and	f, 0xCF   ;select user reg space
 13158  7480  62 D0 00          	mov	reg[CUR_PP],0
 13159  7483  51 56             	mov	a,[0+((___fladd@exp2)^0x0)]
 13160  7485  39 00             	cmp	a,(0)
 13161  7487  A218              	jz	l369
 13162                          	line	27
 13163                          ;fladd.c: 27: cntr = 6;
 13164  7489  50 06             	mov	a,<((06h))
 13165  748B  70 CF             	and	f, 0xCF   ;select user reg space
 13166  748D  62 D0 00          	mov	reg[CUR_PP],0
 13167  7490  53 58             	mov	[0+((___fladd@cntr)^0x0)],a
 13168                          	line	29
 13169                          ;fladd.c: 29: if(exp1 < exp2) {
 13170  7492  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13171  7494  3A 56             	cmp	a,[0+((___fladd@exp2)^0x0)]
 13172  7496  D098              	jnc	l370
 13173                          	line	30
 13174                          ;fladd.c: 30: if((unsigned char)(exp2-exp1) > sizeof(f1)*8) {
 13175  7498  70 CF             	and	f, 0xCF   ;select user reg space
 13176  749A  62 D0 00          	mov	reg[CUR_PP],0
 13177  749D  51 56             	mov	a,[0+((___fladd@exp2)^0x0)]
 13178  749F  12 55             	sub	a,[0+((___fladd@exp1)^0x0)]
 13179  74A1  39 21             	cmp	a,<((021h))
 13180  74A3  C021              	jc	l375
 13181                          	line	32
 13182                          ;fladd.c: 32: (*(unsigned long *)&f1) = 0;
 13183  74A5  50 00             	mov	a,<(0>>24)
 13184  74A7  70 CF             	and	f, 0xCF   ;select user reg space
 13185  74A9  62 D0 00          	mov	reg[CUR_PP],0
 13186  74AC  53 4D             	mov	[0+((___fladd@f1)^0x0)],a
 13187  74AE  50 00             	mov	a,<(0>>16)
 13188  74B0  53 4E             	mov	[1+((___fladd@f1)^0x0)],a
 13189  74B2  50 00             	mov	a,<(0>>8)
 13190  74B4  53 4F             	mov	[2+((___fladd@f1)^0x0)],a
 13191  74B6  50 00             	mov	a,<(0)
 13192  74B8  53 50             	mov	[3+((___fladd@f1)^0x0)],a
 13193                          	line	33
 13194                          ;fladd.c: 33: exp1 = exp2;
 13195  74BA  51 56             	mov	a,[0+((___fladd@exp2)^0x0)]
 13196  74BC  53 55             	mov	[0+((___fladd@exp1)^0x0)],a
 13197                          	line	34
 13198                          ;fladd.c: 34: sign1 = sign2;
 13199  74BE  51 59             	mov	a,[0+((___fladd@sign2)^0x0)]
 13200  74C0  53 57             	mov	[0+((___fladd@sign1)^0x0)],a
 13201                          	line	35
 13202                          ;fladd.c: 35: } else {
 13203  74C2  7D 752C           	xjmp	l372
 13204                          	line	38
 13205                          ;fladd.c: 38: do {
 13206                          ;			
 13207  74C5                    l375:	
 13208                          	line	39
 13209                          ;fladd.c: 39: (*(unsigned long *)&f2) <<= 1;
 13210  74C5  50 01             	mov	a,<((01h))
 13211  74C7  7D 74D7           	xjmp	u1813
 13212  74CA                    u1824:
 13213  74CA  70 CF             	and	f, 0xCF   ;select user reg space
 13214  74CC  62 D0 00          	mov	reg[CUR_PP],0
 13215  74CF  65 54             	asl	[3+((___fladd@f2)^0x0)]
 13216  74D1  6B 53             	rlc	[2+((___fladd@f2)^0x0)]
 13217  74D3  6B 52             	rlc	[1+((___fladd@f2)^0x0)]
 13218  74D5  6B 51             	rlc	[0+((___fladd@f2)^0x0)]
 13219  74D7                    u1813:
 13220  74D7  78                	dec	a
 13221  74D8  DFF1              	jnc	u1824
 13222                          	line	40
 13223                          ;fladd.c: 40: exp2--;
 13224  74DA  70 CF             	and	f, 0xCF   ;select user reg space
 13225  74DC  62 D0 00          	mov	reg[CUR_PP],0
 13226  74DF  51 56             	mov	a,[0+((___fladd@exp2)^0x0)]
 13227  74E1  11 01             	sub	a,<((01h))
 13228  74E3  53 56             	mov	[0+((___fladd@exp2)^0x0)],a
 13229                          	line	41
 13230                          ;fladd.c: 41: } while(exp2 != exp1 && --cntr != 0);
 13231  74E5  51 56             	mov	a,[0+((___fladd@exp2)^0x0)]
 13232  74E7  3A 55             	cmp	a,[0+((___fladd@exp1)^0x0)]
 13233  74E9  A012              	jz	l374
 13234  74EB  70 CF             	and	f, 0xCF   ;select user reg space
 13235  74ED  62 D0 00          	mov	reg[CUR_PP],0
 13236  74F0  51 58             	mov	a,[0+((___fladd@cntr)^0x0)]
 13237  74F2  11 01             	sub	a,<((01h))
 13238  74F4  53 58             	mov	[0+((___fladd@cntr)^0x0)],a
 13239  74F6  51 58             	mov	a,[0+((___fladd@cntr)^0x0)]
 13240  74F8  39 00             	cmp	a,(0)
 13241  74FA  BFCA              	jnz	l375
 13242                          ;			
 13243  74FC                    l600002277:	
 13244                          ;			
 13245  74FC                    l374:	
 13246                          	line	42
 13247                          ;fladd.c: 42: while(exp1 != exp2) {
 13248  74FC  7D 7521           	xjmp	l376
 13249                          ;			
 13250  74FF                    l377:	
 13251                          	line	43
 13252                          ;fladd.c: 43: (*(unsigned long *)&f1) >>= 1;
 13253  74FF  50 01             	mov	a,<((01h))
 13254  7501  7D 7513           	xjmp	u1833
 13255  7504  70 FB             	clrc
 13256  7506                    u1844:
 13257  7506  70 CF             	and	f, 0xCF   ;select user reg space
 13258  7508  62 D0 00          	mov	reg[CUR_PP],0
 13259  750B  6E 4D             	rrc	[0+((___fladd@f1)^0x0)]
 13260  750D  6E 4E             	rrc	[1+((___fladd@f1)^0x0)]
 13261  750F  6E 4F             	rrc	[2+((___fladd@f1)^0x0)]
 13262  7511  6E 50             	rrc	[3+((___fladd@f1)^0x0)]
 13263  7513                    u1833:
 13264  7513  78                	dec	a
 13265  7514  DFF1              	jnc	u1844
 13266                          	line	44
 13267                          ;fladd.c: 44: exp1++;
 13268  7516  70 CF             	and	f, 0xCF   ;select user reg space
 13269  7518  62 D0 00          	mov	reg[CUR_PP],0
 13270  751B  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13271  751D  01 01             	add	a,<((01h))
 13272  751F  53 55             	mov	[0+((___fladd@exp1)^0x0)],a
 13273                          	line	45
 13274                          ;			
 13275  7521                    l376:	
 13276                          	line	42
 13277  7521  70 CF             	and	f, 0xCF   ;select user reg space
 13278  7523  62 D0 00          	mov	reg[CUR_PP],0
 13279  7526  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13280  7528  3A 56             	cmp	a,[0+((___fladd@exp2)^0x0)]
 13281  752A  BFD4              	jnz	l377
 13282                          ;			
 13283  752C                    l378:	
 13284                          	line	46
 13285                          ;			
 13286  752C                    l372:	
 13287                          	line	47
 13288                          ;fladd.c: 45: }
 13289                          ;fladd.c: 46: }
 13290                          ;fladd.c: 47: } else if(exp1 != exp2) {
 13291  752C  7D 75C6           	xjmp	l379
 13292                          ;			
 13293  752F                    l370:	
 13294  752F  70 CF             	and	f, 0xCF   ;select user reg space
 13295  7531  62 D0 00          	mov	reg[CUR_PP],0
 13296  7534  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13297  7536  3A 56             	cmp	a,[0+((___fladd@exp2)^0x0)]
 13298  7538  A08D              	jz	l379
 13299                          	line	48
 13300                          ;fladd.c: 48: if((unsigned char)(exp1-exp2) > sizeof(f1)*8)
 13301  753A  70 CF             	and	f, 0xCF   ;select user reg space
 13302  753C  62 D0 00          	mov	reg[CUR_PP],0
 13303  753F  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13304  7541  12 56             	sub	a,[0+((___fladd@exp2)^0x0)]
 13305  7543  39 21             	cmp	a,<((021h))
 13306  7545  C019              	jc	l385
 13307                          	line	49
 13308                          ;fladd.c: 49: (*(unsigned long *)&f2) = 0;
 13309  7547  50 00             	mov	a,<(0>>24)
 13310  7549  70 CF             	and	f, 0xCF   ;select user reg space
 13311  754B  62 D0 00          	mov	reg[CUR_PP],0
 13312  754E  53 51             	mov	[0+((___fladd@f2)^0x0)],a
 13313  7550  50 00             	mov	a,<(0>>16)
 13314  7552  53 52             	mov	[1+((___fladd@f2)^0x0)],a
 13315  7554  50 00             	mov	a,<(0>>8)
 13316  7556  53 53             	mov	[2+((___fladd@f2)^0x0)],a
 13317  7558  50 00             	mov	a,<(0)
 13318  755A  53 54             	mov	[3+((___fladd@f2)^0x0)],a
 13319  755C  7D 75C6           	xjmp	l379
 13320                          	line	53
 13321                          ;fladd.c: 50: else {
 13322                          ;fladd.c: 53: do {
 13323                          ;			
 13324  755F                    l385:	
 13325                          	line	54
 13326                          ;fladd.c: 54: (*(unsigned long *)&f1) <<= 1;
 13327  755F  50 01             	mov	a,<((01h))
 13328  7561  7D 7571           	xjmp	u1853
 13329  7564                    u1864:
 13330  7564  70 CF             	and	f, 0xCF   ;select user reg space
 13331  7566  62 D0 00          	mov	reg[CUR_PP],0
 13332  7569  65 50             	asl	[3+((___fladd@f1)^0x0)]
 13333  756B  6B 4F             	rlc	[2+((___fladd@f1)^0x0)]
 13334  756D  6B 4E             	rlc	[1+((___fladd@f1)^0x0)]
 13335  756F  6B 4D             	rlc	[0+((___fladd@f1)^0x0)]
 13336  7571                    u1853:
 13337  7571  78                	dec	a
 13338  7572  DFF1              	jnc	u1864
 13339                          	line	55
 13340                          ;fladd.c: 55: exp1--;
 13341  7574  70 CF             	and	f, 0xCF   ;select user reg space
 13342  7576  62 D0 00          	mov	reg[CUR_PP],0
 13343  7579  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13344  757B  11 01             	sub	a,<((01h))
 13345  757D  53 55             	mov	[0+((___fladd@exp1)^0x0)],a
 13346                          	line	56
 13347                          ;fladd.c: 56: } while(exp2 != exp1 && --cntr != 0);
 13348  757F  51 56             	mov	a,[0+((___fladd@exp2)^0x0)]
 13349  7581  3A 55             	cmp	a,[0+((___fladd@exp1)^0x0)]
 13350  7583  A012              	jz	l384
 13351  7585  70 CF             	and	f, 0xCF   ;select user reg space
 13352  7587  62 D0 00          	mov	reg[CUR_PP],0
 13353  758A  51 58             	mov	a,[0+((___fladd@cntr)^0x0)]
 13354  758C  11 01             	sub	a,<((01h))
 13355  758E  53 58             	mov	[0+((___fladd@cntr)^0x0)],a
 13356  7590  51 58             	mov	a,[0+((___fladd@cntr)^0x0)]
 13357  7592  39 00             	cmp	a,(0)
 13358  7594  BFCA              	jnz	l385
 13359                          ;			
 13360  7596                    l600002278:	
 13361                          ;			
 13362  7596                    l384:	
 13363                          	line	57
 13364                          ;fladd.c: 57: while(exp1 != exp2) {
 13365  7596  7D 75BB           	xjmp	l386
 13366                          ;			
 13367  7599                    l387:	
 13368                          	line	58
 13369                          ;fladd.c: 58: (*(unsigned long *)&f2) >>= 1;
 13370  7599  50 01             	mov	a,<((01h))
 13371  759B  7D 75AD           	xjmp	u1873
 13372  759E  70 FB             	clrc
 13373  75A0                    u1884:
 13374  75A0  70 CF             	and	f, 0xCF   ;select user reg space
 13375  75A2  62 D0 00          	mov	reg[CUR_PP],0
 13376  75A5  6E 51             	rrc	[0+((___fladd@f2)^0x0)]
 13377  75A7  6E 52             	rrc	[1+((___fladd@f2)^0x0)]
 13378  75A9  6E 53             	rrc	[2+((___fladd@f2)^0x0)]
 13379  75AB  6E 54             	rrc	[3+((___fladd@f2)^0x0)]
 13380  75AD                    u1873:
 13381  75AD  78                	dec	a
 13382  75AE  DFF1              	jnc	u1884
 13383                          	line	59
 13384                          ;fladd.c: 59: exp2++;
 13385  75B0  70 CF             	and	f, 0xCF   ;select user reg space
 13386  75B2  62 D0 00          	mov	reg[CUR_PP],0
 13387  75B5  51 56             	mov	a,[0+((___fladd@exp2)^0x0)]
 13388  75B7  01 01             	add	a,<((01h))
 13389  75B9  53 56             	mov	[0+((___fladd@exp2)^0x0)],a
 13390                          	line	60
 13391                          ;			
 13392  75BB                    l386:	
 13393                          	line	57
 13394  75BB  70 CF             	and	f, 0xCF   ;select user reg space
 13395  75BD  62 D0 00          	mov	reg[CUR_PP],0
 13396  75C0  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13397  75C2  3A 56             	cmp	a,[0+((___fladd@exp2)^0x0)]
 13398  75C4  BFD4              	jnz	l387
 13399                          ;			
 13400  75C6                    l388:	
 13401                          	line	61
 13402                          ;			
 13403  75C6                    l382:	
 13404                          	line	62
 13405                          ;			
 13406  75C6                    l380:	
 13407                          	line	63
 13408                          ;			
 13409  75C6                    l379:	
 13410                          ;fladd.c: 60: }
 13411                          ;fladd.c: 61: }
 13412                          ;fladd.c: 62: }
 13413                          ;fladd.c: 63: if(sign1 != 0) {
 13414  75C6  70 CF             	and	f, 0xCF   ;select user reg space
 13415  75C8  62 D0 00          	mov	reg[CUR_PP],0
 13416  75CB  51 57             	mov	a,[0+((___fladd@sign1)^0x0)]
 13417  75CD  39 00             	cmp	a,(0)
 13418  75CF  A026              	jz	l389
 13419                          	line	65
 13420                          ;fladd.c: 65: (*(unsigned long *)&f1) ^= 0xFFFFFFFFUL;
 13421  75D1  50 FF             	mov	a,<(-1)
 13422  75D3  70 CF             	and	f, 0xCF   ;select user reg space
 13423  75D5  62 D0 00          	mov	reg[CUR_PP],0
 13424  75D8  34 50             	xor	[3+((___fladd@f1)^0x0)],a
 13425  75DA  50 FF             	mov	a,<(-1>>8)
 13426  75DC  34 4F             	xor	[2+((___fladd@f1)^0x0)],a
 13427  75DE  50 FF             	mov	a,<(-1>>16)
 13428  75E0  34 4E             	xor	[1+((___fladd@f1)^0x0)],a
 13429  75E2  50 FF             	mov	a,<(-1>>24)
 13430  75E4  34 4D             	xor	[0+((___fladd@f1)^0x0)],a
 13431                          	line	66
 13432                          ;fladd.c: 66: (*(unsigned long *)&f1)++;
 13433  75E6  50 01             	mov	a,<(01h)
 13434  75E8  04 50             	add	[3+((___fladd@f1)^0x0)],a
 13435  75EA  50 00             	mov	a,<(01h>>8)
 13436  75EC  0C 4F             	adc	[2+((___fladd@f1)^0x0)],a
 13437  75EE  50 00             	mov	a,<(01h>>16)
 13438  75F0  0C 4E             	adc	[1+((___fladd@f1)^0x0)],a
 13439  75F2  50 00             	mov	a,<(01h>>24)
 13440  75F4  0C 4D             	adc	[0+((___fladd@f1)^0x0)],a
 13441                          	line	67
 13442                          ;			
 13443  75F6                    l389:	
 13444                          	line	68
 13445                          ;fladd.c: 67: }
 13446                          ;fladd.c: 68: if(sign2 != 0) {
 13447  75F6  70 CF             	and	f, 0xCF   ;select user reg space
 13448  75F8  62 D0 00          	mov	reg[CUR_PP],0
 13449  75FB  51 59             	mov	a,[0+((___fladd@sign2)^0x0)]
 13450  75FD  39 00             	cmp	a,(0)
 13451  75FF  A026              	jz	l390
 13452                          	line	70
 13453                          ;fladd.c: 70: (*(unsigned long *)&f2) ^= 0xFFFFFFFFUL;
 13454  7601  50 FF             	mov	a,<(-1)
 13455  7603  70 CF             	and	f, 0xCF   ;select user reg space
 13456  7605  62 D0 00          	mov	reg[CUR_PP],0
 13457  7608  34 54             	xor	[3+((___fladd@f2)^0x0)],a
 13458  760A  50 FF             	mov	a,<(-1>>8)
 13459  760C  34 53             	xor	[2+((___fladd@f2)^0x0)],a
 13460  760E  50 FF             	mov	a,<(-1>>16)
 13461  7610  34 52             	xor	[1+((___fladd@f2)^0x0)],a
 13462  7612  50 FF             	mov	a,<(-1>>24)
 13463  7614  34 51             	xor	[0+((___fladd@f2)^0x0)],a
 13464                          	line	71
 13465                          ;fladd.c: 71: (*(unsigned long *)&f2)++;
 13466  7616  50 01             	mov	a,<(01h)
 13467  7618  04 54             	add	[3+((___fladd@f2)^0x0)],a
 13468  761A  50 00             	mov	a,<(01h>>8)
 13469  761C  0C 53             	adc	[2+((___fladd@f2)^0x0)],a
 13470  761E  50 00             	mov	a,<(01h>>16)
 13471  7620  0C 52             	adc	[1+((___fladd@f2)^0x0)],a
 13472  7622  50 00             	mov	a,<(01h>>24)
 13473  7624  0C 51             	adc	[0+((___fladd@f2)^0x0)],a
 13474                          	line	72
 13475                          ;			
 13476  7626                    l390:	
 13477                          	line	73
 13478                          ;fladd.c: 72: }
 13479                          ;fladd.c: 73: sign1 = 0;
 13480  7626  50 00             	mov	a,<((0))
 13481  7628  70 CF             	and	f, 0xCF   ;select user reg space
 13482  762A  62 D0 00          	mov	reg[CUR_PP],0
 13483  762D  53 57             	mov	[0+((___fladd@sign1)^0x0)],a
 13484                          	line	74
 13485                          ;fladd.c: 74: (*(unsigned long *)&f1) += (*(unsigned long *)&f2);
 13486  762F  51 54             	mov	a,[3+((___fladd@f2)^0x0)]
 13487  7631  04 50             	add	[3+((___fladd@f1)^0x0)],a
 13488  7633  51 53             	mov	a,[2+((___fladd@f2)^0x0)]
 13489  7635  0C 4F             	adc	[2+((___fladd@f1)^0x0)],a
 13490  7637  51 52             	mov	a,[1+((___fladd@f2)^0x0)]
 13491  7639  0C 4E             	adc	[1+((___fladd@f1)^0x0)],a
 13492  763B  51 51             	mov	a,[0+((___fladd@f2)^0x0)]
 13493  763D  0C 4D             	adc	[0+((___fladd@f1)^0x0)],a
 13494                          	line	75
 13495                          ;fladd.c: 75: if((*(unsigned long *)&f1) & 0x80000000UL) {
 13496  763F  51 4D             	mov	a,[0+((___fladd@f1)^0x0)]
 13497  7641  53 5A             	mov	[(??___fladd^0x0)+5+0],a
 13498  7643  51 4E             	mov	a,[1+((___fladd@f1)^0x0)]
 13499  7645  53 5B             	mov	[(??___fladd^0x0)+5+0+1],a
 13500  7647  51 4F             	mov	a,[2+((___fladd@f1)^0x0)]
 13501  7649  53 5C             	mov	[(??___fladd^0x0)+5+0+2],a
 13502  764B  51 50             	mov	a,[3+((___fladd@f1)^0x0)]
 13503  764D  53 5D             	mov	[(??___fladd^0x0)+5+0+3],a
 13504  764F  50 00             	mov	a,<(-2147483648)
 13505  7651  24 5D             	and	[(??___fladd^0x0)+5+3],a
 13506  7653  50 00             	mov	a,<(-2147483648>>8)
 13507  7655  24 5C             	and	[(??___fladd^0x0)+5+2],a
 13508  7657  50 00             	mov	a,<(-2147483648>>16)
 13509  7659  24 5B             	and	[(??___fladd^0x0)+5+1],a
 13510  765B  50 80             	mov	a,<(-2147483648>>24)
 13511  765D  24 5A             	and	[(??___fladd^0x0)+5+0],a
 13512  765F  51 5A             	mov	a,[(??___fladd^0x0)+5+0]
 13513  7661  39 00             	cmp	a,<(0>>24)
 13514  7663  B011              	jnz	u1893
 13515  7665  51 5B             	mov	a,[(??___fladd^0x0)+5+1]
 13516  7667  39 00             	cmp	a,<(0>>16)
 13517  7669  B00B              	jnz	u1893
 13518  766B  51 5C             	mov	a,[(??___fladd^0x0)+5+2]
 13519  766D  39 00             	cmp	a,<(0>>8)
 13520  766F  B005              	jnz	u1893
 13521  7671  51 5D             	mov	a,[(??___fladd^0x0)+5+3]
 13522  7673  39 00             	cmp	a,<(0)
 13523  7675                    u1893:
 13524  7675  A02A              	jz	l369
 13525                          	line	76
 13526                          ;fladd.c: 76: (*(unsigned long *)&f1) ^= 0xFFFFFFFFUL;
 13527  7677  50 FF             	mov	a,<(-1)
 13528  7679  70 CF             	and	f, 0xCF   ;select user reg space
 13529  767B  62 D0 00          	mov	reg[CUR_PP],0
 13530  767E  34 50             	xor	[3+((___fladd@f1)^0x0)],a
 13531  7680  50 FF             	mov	a,<(-1>>8)
 13532  7682  34 4F             	xor	[2+((___fladd@f1)^0x0)],a
 13533  7684  50 FF             	mov	a,<(-1>>16)
 13534  7686  34 4E             	xor	[1+((___fladd@f1)^0x0)],a
 13535  7688  50 FF             	mov	a,<(-1>>24)
 13536  768A  34 4D             	xor	[0+((___fladd@f1)^0x0)],a
 13537                          	line	77
 13538                          ;fladd.c: 77: (*(unsigned long *)&f1)++;
 13539  768C  50 01             	mov	a,<(01h)
 13540  768E  04 50             	add	[3+((___fladd@f1)^0x0)],a
 13541  7690  50 00             	mov	a,<(01h>>8)
 13542  7692  0C 4F             	adc	[2+((___fladd@f1)^0x0)],a
 13543  7694  50 00             	mov	a,<(01h>>16)
 13544  7696  0C 4E             	adc	[1+((___fladd@f1)^0x0)],a
 13545  7698  50 00             	mov	a,<(01h>>24)
 13546  769A  0C 4D             	adc	[0+((___fladd@f1)^0x0)],a
 13547                          	line	78
 13548                          ;fladd.c: 78: sign1 = 1;
 13549  769C  50 01             	mov	a,<((01h))
 13550  769E  53 57             	mov	[0+((___fladd@sign1)^0x0)],a
 13551                          	line	79
 13552                          ;			
 13553  76A0                    l391:	
 13554                          	line	80
 13555                          ;			
 13556  76A0                    l369:	
 13557                          	line	81
 13558                          ;fladd.c: 79: }
 13559                          ;fladd.c: 80: }
 13560                          ;fladd.c: 81: __flpack(&(*(unsigned long *)&f1), exp1);
 13561  76A0  50 4D             	mov	a,<((___fladd@f1|8000h))
 13562  76A2  70 CF             	and	f, 0xCF   ;select user reg space
 13563  76A4  62 D0 00          	mov	reg[CUR_PP],0
 13564  76A7  53 72             	mov	[1+((?___flpack)^0x0)],a
 13565  76A9  50 80             	mov	a,>((___fladd@f1|8000h))
 13566  76AB  53 71             	mov	[0+((?___flpack)^0x0)],a
 13567  76AD  51 55             	mov	a,[0+((___fladd@exp1)^0x0)]
 13568  76AF  53 73             	mov	[0+((0+?___flpack+02h)^0x0)],a
 13569  76B1  71 80             	or	f, 0x80	;select multiple RAM page mode
 13570                          	
 13571  76B3  7C 77F8           	xcall	___flpack
 13572                          	
 13573                          	line	82
 13574                          ;fladd.c: 82: if(sign1)
 13575  76B6  70 CF             	and	f, 0xCF   ;select user reg space
 13576  76B8  62 D0 00          	mov	reg[CUR_PP],0
 13577  76BB  51 57             	mov	a,[0+((___fladd@sign1)^0x0)]
 13578  76BD  39 00             	cmp	a,(0)
 13579  76BF  A016              	jz	l392
 13580                          	line	83
 13581                          ;fladd.c: 83: (*(unsigned long *)&f1) ^= 0x80000000UL;
 13582  76C1  50 00             	mov	a,<(-2147483648)
 13583  76C3  70 CF             	and	f, 0xCF   ;select user reg space
 13584  76C5  62 D0 00          	mov	reg[CUR_PP],0
 13585  76C8  34 50             	xor	[3+((___fladd@f1)^0x0)],a
 13586  76CA  50 00             	mov	a,<(-2147483648>>8)
 13587  76CC  34 4F             	xor	[2+((___fladd@f1)^0x0)],a
 13588  76CE  50 00             	mov	a,<(-2147483648>>16)
 13589  76D0  34 4E             	xor	[1+((___fladd@f1)^0x0)],a
 13590  76D2  50 80             	mov	a,<(-2147483648>>24)
 13591  76D4  34 4D             	xor	[0+((___fladd@f1)^0x0)],a
 13592                          ;			
 13593  76D6                    l392:	
 13594                          	line	84
 13595  76D6  7D 76D9           	xjmp	l366
 13596                          	line	85
 13597                          ;fladd.c: 85: }
 13598  76D9                    l366:
 13599                          ;			
 13600  76D9  70 CF             	and	f, 0xCF   ;select user reg space
 13601                          	
 13602  76DB  7F                	ret
 13603                          GLOBAL __end_of___fladd
 13604  76DC                    	__end_of___fladd:
 13605                          	FNSIZE	___fladd,9,8
 13606                          ; =============== function ___fladd ends ============
 13607                          
 13608                          	signat	___fladd,8316
 13609                          	global	___flneg
 13610                          	global	??___flneg
 13611                          	global	?___flneg
 13612                          	psect	text
 13613                          
 13614                          ; *************** function ___flneg *****************
 13615                          ; Defined at:
 13616                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flneg.c"
 13617                          ; Parameters:
 13618                          ;		f1          	offs:   0	type: unsigned char 
 13619                          ; Auto variables:
 13620                          ;		None
 13621                          ; Return value:
 13622                          ;		type: unsigned char 
 13623                          ;		size: 4
 13624                          ; Registers used:
 13625                          ;		a, CUR_PP
 13626                          ; Tracked objects:
 13627                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13628                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13629                          ;		Unchanged: 
 13630                          ; Data sizes:
 13631                          ;		Autos:    0
 13632                          ;		Params:   4
 13633                          ;		Temp:     0
 13634                          ;		Total:    4
 13635                          ; This function calls:
 13636                          ;		Nothing
 13637                          ; This function is called by:
 13638                          ;		_printf
 13639                          ;		___awtofl
 13640                          ; This function uses a non-reentrant model
 13641                          ; 
 13642                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flneg.c"
 13643                          	line	16
 13644  0038                    	__size_of___flneg	equ	__end_of___flneg-___flneg
 13645                          ;flneg.c: 14: double
 13646                          ;flneg.c: 15: __flneg(double f1)
 13647                          ;flneg.c: 16: {
 13648                          ;			
 13649  76DC                    ___flneg:	
 13650                          	opt	disable
 13651                          	line	17
 13652                          ;flneg.c: 17: if(f1 != 0)
 13653  76DC  70 CF             	and	f, 0xCF   ;select user reg space
 13654  76DE  62 D0 00          	mov	reg[CUR_PP],0
 13655  76E1  51 4C             	mov	a,[0+((___flneg@f1)^0x0)]
 13656  76E3  39 00             	cmp	a,<(0x0>>24)
 13657  76E5  B011              	jnz	u2213
 13658  76E7  51 4D             	mov	a,[1+((___flneg@f1)^0x0)]
 13659  76E9  39 00             	cmp	a,<(0x0>>16)
 13660  76EB  B00B              	jnz	u2213
 13661  76ED  51 4E             	mov	a,[2+((___flneg@f1)^0x0)]
 13662  76EF  39 00             	cmp	a,<(0x0>>8)
 13663  76F1  B005              	jnz	u2213
 13664  76F3  51 4F             	mov	a,[3+((___flneg@f1)^0x0)]
 13665  76F5  39 00             	cmp	a,<(0x0)
 13666  76F7                    u2213:
 13667  76F7  A016              	jz	l466
 13668                          	line	18
 13669                          ;flneg.c: 18: (*(unsigned long *)&f1) ^= 0x80000000UL;
 13670  76F9  50 00             	mov	a,<(-2147483648)
 13671  76FB  70 CF             	and	f, 0xCF   ;select user reg space
 13672  76FD  62 D0 00          	mov	reg[CUR_PP],0
 13673  7700  34 4F             	xor	[3+((___flneg@f1)^0x0)],a
 13674  7702  50 00             	mov	a,<(-2147483648>>8)
 13675  7704  34 4E             	xor	[2+((___flneg@f1)^0x0)],a
 13676  7706  50 00             	mov	a,<(-2147483648>>16)
 13677  7708  34 4D             	xor	[1+((___flneg@f1)^0x0)],a
 13678  770A  50 80             	mov	a,<(-2147483648>>24)
 13679  770C  34 4C             	xor	[0+((___flneg@f1)^0x0)],a
 13680                          ;			
 13681  770E                    l466:	
 13682                          	line	19
 13683  770E  7D 7711           	xjmp	l465
 13684                          	line	20
 13685                          ;flneg.c: 20: }
 13686  7711                    l465:
 13687                          ;			
 13688  7711  70 CF             	and	f, 0xCF   ;select user reg space
 13689                          	
 13690  7713  7F                	ret
 13691                          GLOBAL __end_of___flneg
 13692  7714                    	__end_of___flneg:
 13693                          	FNSIZE	___flneg,0,4
 13694                          ; =============== function ___flneg ends ============
 13695                          
 13696                          	signat	___flneg,4220
 13697                          	global	___flunpack
 13698                          	global	??___flunpack
 13699                          	global	?___flunpack
 13700                          	psect	text
 13701                          
 13702                          ; *************** function ___flunpack *****************
 13703                          ; Defined at:
 13704                          ;		line 13 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\double.c"
 13705                          ; Parameters:
 13706                          ;		arg         	offs:   0	type: PTR unsigned long ; Largest target is 4
 13707                          ;		 -> _div_to_l_@f2(4), _div_to_l_@f1(4), __fltol@f1(4), __flmul@f2(4), 
 13708                          ;		 -> __flmul@f1(4), __fldiv@f2(4), __fldiv@f1(4), __fladd@f2(4), 
 13709                          ;		 -> __fladd@f1(4), 
 13710                          ;		exp         	offs:   2	type: PTR unsigned char ; Largest target is 1
 13711                          ;		 -> _div_to_l_@cntr(1), _div_to_l_@exp1(1), __fltol@exp1(1), __flmul@cntr(1), 
 13712                          ;		 -> __flmul@exp1(1), __fldiv@exp2(1), __fldiv@exp1(1), __fladd@exp2(1), 
 13713                          ;		 -> __fladd@exp1(1), 
 13714                          ; Auto variables:
 13715                          ;		sign        	       	type: unsigned char 
 13716                          ; Return value:
 13717                          ;		type: unsigned char 
 13718                          ;		size: 1
 13719                          ; Registers used:
 13720                          ;		a, x, CUR_PP
 13721                          ; Tracked objects:
 13722                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13723                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13724                          ;		Unchanged: 
 13725                          ; Data sizes:
 13726                          ;		Autos:    1
 13727                          ;		Params:   4
 13728                          ;		Temp:     6
 13729                          ;		Total:   11
 13730                          ; This function calls:
 13731                          ;		Nothing
 13732                          ; This function is called by:
 13733                          ;		___fladd
 13734                          ;		___fldiv
 13735                          ;		___flmul
 13736                          ;		___fltol
 13737                          ;		__div_to_l_
 13738                          ; This function uses a non-reentrant model
 13739                          ; 
 13740                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\double.c"
 13741                          	line	13
 13742  00E4                    	__size_of___flunpack	equ	__end_of___flunpack-___flunpack
 13743                          ;double.c: 11: unsigned char
 13744                          ;double.c: 12: __flunpack(unsigned long * arg, unsigned char * exp)
 13745                          ;double.c: 13: {
 13746                          ;			
 13747  7714                    ___flunpack:	
 13748                          	opt	disable
 13749                          	line	16
 13750                          ;double.c: 14: unsigned char sign;
 13751                          ;double.c: 16: *exp = sign = *arg >> 23;
 13752  7714  70 CF             	and	f, 0xCF   ;select user reg space
 13753  7716  62 D0 00          	mov	reg[CUR_PP],0
 13754  7719  51 71             	mov	a,[0+((___flunpack@arg)^0x0)]
 13755  771B  58 72             	mov	x,[1+((___flunpack@arg)^0x0)]
 13756  771D  60 D3             	mov	reg[0xd3],a
 13757  771F  52 01             	mov	a,[1+x]
 13758  7721  6A                	rlc	a
 13759  7722  52 00             	mov	a,[0+x]
 13760  7724  6A                	rlc	a
 13761  7725  53 75             	mov	[0+((___flunpack@sign)^0x0)],a
 13762  7727  08                	push	a
 13763  7728  51 73             	mov	a,[0+((___flunpack@exp)^0x0)]
 13764  772A  08                	push	a
 13765  772B  58 74             	mov	x,[1+((___flunpack@exp)^0x0)]
 13766  772D  18                	pop	a
 13767  772E  60 D3             	mov	reg[0xd3],a
 13768  7730  18                	pop	a
 13769  7731  54 00             	mov	[0+x],a
 13770                          	line	17
 13771                          ;double.c: 17: if(sign == 0) {
 13772  7733  70 CF             	and	f, 0xCF   ;select user reg space
 13773  7735  62 D0 00          	mov	reg[CUR_PP],0
 13774  7738  51 75             	mov	a,[0+((___flunpack@sign)^0x0)]
 13775  773A  39 00             	cmp	a,(0)
 13776  773C  B021              	jnz	l352
 13777                          	line	18
 13778                          ;double.c: 18: *arg = 0;
 13779  773E  70 CF             	and	f, 0xCF   ;select user reg space
 13780  7740  62 D0 00          	mov	reg[CUR_PP],0
 13781  7743  51 71             	mov	a,[0+((___flunpack@arg)^0x0)]
 13782  7745  58 72             	mov	x,[1+((___flunpack@arg)^0x0)]
 13783  7747  60 D3             	mov	reg[0xd3],a
 13784  7749  50 00             	mov	a,<(0>>24)
 13785  774B  54 00             	mov	[0+x],a
 13786  774D  50 00             	mov	a,<(0>>16)
 13787  774F  54 01             	mov	[1+x],a
 13788  7751  50 00             	mov	a,<(0>>8)
 13789  7753  54 02             	mov	[2+x],a
 13790  7755  50 00             	mov	a,<(0)
 13791  7757  54 03             	mov	[3+x],a
 13792                          	line	19
 13793                          ;double.c: 19: return 0;
 13794  7759  50 00             	mov	a,<((0))
 13795  775B  7D 77F5           	xjmp	l351
 13796                          	line	20
 13797                          ;			
 13798  775E                    l352:	
 13799                          	line	21
 13800                          ;double.c: 20: }
 13801                          ;double.c: 21: sign = 0;
 13802  775E  50 00             	mov	a,<((0))
 13803  7760  70 CF             	and	f, 0xCF   ;select user reg space
 13804  7762  62 D0 00          	mov	reg[CUR_PP],0
 13805  7765  53 75             	mov	[0+((___flunpack@sign)^0x0)],a
 13806                          	line	22
 13807                          ;double.c: 22: *arg |= 0x800000UL;
 13808  7767  70 CF             	and	f, 0xCF   ;select user reg space
 13809  7769  62 D0 00          	mov	reg[CUR_PP],0
 13810  776C  51 71             	mov	a,[0+((___flunpack@arg)^0x0)]
 13811  776E  58 72             	mov	x,[1+((___flunpack@arg)^0x0)]
 13812  7770  60 D3             	mov	reg[0xd3],a
 13813  7772  50 00             	mov	a,<(0800000h)
 13814  7774  2D 03             	or	[3+x],a
 13815  7776  50 00             	mov	a,<(0800000h>>8)
 13816  7778  2D 02             	or	[2+x],a
 13817  777A  50 80             	mov	a,<(0800000h>>16)
 13818  777C  2D 01             	or	[1+x],a
 13819  777E  50 00             	mov	a,<(0800000h>>24)
 13820  7780  2D 00             	or	[0+x],a
 13821                          	line	23
 13822                          ;double.c: 23: if(*arg & 0x80000000UL)
 13823  7782  70 CF             	and	f, 0xCF   ;select user reg space
 13824  7784  62 D0 00          	mov	reg[CUR_PP],0
 13825  7787  51 71             	mov	a,[0+((___flunpack@arg)^0x0)]
 13826  7789  58 72             	mov	x,[1+((___flunpack@arg)^0x0)]
 13827  778B  60 D3             	mov	reg[0xd3],a
 13828  778D  52 00             	mov	a,[x+0]
 13829  778F  53 76             	mov	[(??___flunpack^0x0)+1+0],a
 13830  7791  52 01             	mov	a,[x+1]
 13831  7793  53 77             	mov	[(??___flunpack^0x0)+1+0+1],a
 13832  7795  52 02             	mov	a,[x+2]
 13833  7797  53 78             	mov	[(??___flunpack^0x0)+1+0+2],a
 13834  7799  52 03             	mov	a,[x+3]
 13835  779B  53 79             	mov	[(??___flunpack^0x0)+1+0+3],a
 13836  779D  50 00             	mov	a,<(-2147483648)
 13837  779F  24 79             	and	[(??___flunpack^0x0)+1+3],a
 13838  77A1  50 00             	mov	a,<(-2147483648>>8)
 13839  77A3  24 78             	and	[(??___flunpack^0x0)+1+2],a
 13840  77A5  50 00             	mov	a,<(-2147483648>>16)
 13841  77A7  24 77             	and	[(??___flunpack^0x0)+1+1],a
 13842  77A9  50 80             	mov	a,<(-2147483648>>24)
 13843  77AB  24 76             	and	[(??___flunpack^0x0)+1+0],a
 13844  77AD  51 76             	mov	a,[(??___flunpack^0x0)+1+0]
 13845  77AF  39 00             	cmp	a,<(0>>24)
 13846  77B1  B011              	jnz	u1663
 13847  77B3  51 77             	mov	a,[(??___flunpack^0x0)+1+1]
 13848  77B5  39 00             	cmp	a,<(0>>16)
 13849  77B7  B00B              	jnz	u1663
 13850  77B9  51 78             	mov	a,[(??___flunpack^0x0)+1+2]
 13851  77BB  39 00             	cmp	a,<(0>>8)
 13852  77BD  B005              	jnz	u1663
 13853  77BF  51 79             	mov	a,[(??___flunpack^0x0)+1+3]
 13854  77C1  39 00             	cmp	a,<(0)
 13855  77C3                    u1663:
 13856  77C3  A00C              	jz	l353
 13857                          	line	24
 13858                          ;double.c: 24: sign++;
 13859  77C5  70 CF             	and	f, 0xCF   ;select user reg space
 13860  77C7  62 D0 00          	mov	reg[CUR_PP],0
 13861  77CA  51 75             	mov	a,[0+((___flunpack@sign)^0x0)]
 13862  77CC  01 01             	add	a,<((01h))
 13863  77CE  53 75             	mov	[0+((___flunpack@sign)^0x0)],a
 13864                          ;			
 13865  77D0                    l353:	
 13866                          	line	25
 13867                          ;double.c: 25: *arg &= 0xFFFFFFUL;
 13868  77D0  70 CF             	and	f, 0xCF   ;select user reg space
 13869  77D2  62 D0 00          	mov	reg[CUR_PP],0
 13870  77D5  51 71             	mov	a,[0+((___flunpack@arg)^0x0)]
 13871  77D7  58 72             	mov	x,[1+((___flunpack@arg)^0x0)]
 13872  77D9  60 D3             	mov	reg[0xd3],a
 13873  77DB  50 FF             	mov	a,<(0FFFFFFh)
 13874  77DD  25 03             	and	[3+x],a
 13875  77DF  50 FF             	mov	a,<(0FFFFFFh>>8)
 13876  77E1  25 02             	and	[2+x],a
 13877  77E3  50 FF             	mov	a,<(0FFFFFFh>>16)
 13878  77E5  25 01             	and	[1+x],a
 13879  77E7  50 00             	mov	a,<(0FFFFFFh>>24)
 13880  77E9  25 00             	and	[0+x],a
 13881                          	line	26
 13882                          ;double.c: 26: return sign;
 13883  77EB  70 CF             	and	f, 0xCF   ;select user reg space
 13884  77ED  62 D0 00          	mov	reg[CUR_PP],0
 13885  77F0  51 75             	mov	a,[0+((___flunpack@sign)^0x0)]
 13886  77F2  7D 77F5           	xjmp	l351
 13887                          	line	27
 13888                          ;double.c: 27: }
 13889  77F5                    l351:
 13890                          ;			
 13891  77F5  70 CF             	and	f, 0xCF   ;select user reg space
 13892                          	
 13893  77F7  7F                	ret
 13894                          GLOBAL __end_of___flunpack
 13895  77F8                    	__end_of___flunpack:
 13896                          	FNSIZE	___flunpack,7,4
 13897                          ; =============== function ___flunpack ends ============
 13898                          
 13899                          	signat	___flunpack,8313
 13900                          	global	___flpack
 13901                          	global	??___flpack
 13902                          	global	?___flpack
 13903                          	psect	text
 13904                          
 13905                          ; *************** function ___flpack *****************
 13906                          ; Defined at:
 13907                          ;		line 33 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\double.c"
 13908                          ; Parameters:
 13909                          ;		arg         	offs:   0	type: PTR unsigned long ; Largest target is 4
 13910                          ;		 -> __lttofl@f1(4), __attofl@f1(4), __lltofl@f1(4), __altofl@f1(4), 
 13911                          ;		 -> __lwtofl@f1(4), __awtofl@f1(4), __lbtofl@f1(4), __abtofl@f1(4), 
 13912                          ;		 -> __flmul@f3(4), __fldiv@f3(4), __fladd@f1(4), 
 13913                          ;		exp         	offs:   2	type: unsigned char 
 13914                          ; Auto variables:
 13915                          ;		None
 13916                          ; Return value:
 13917                          ;		type: void 
 13918                          ;		size: 0
 13919                          ; Registers used:
 13920                          ;		a, x, CUR_PP
 13921                          ; Tracked objects:
 13922                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13923                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13924                          ;		Unchanged: 
 13925                          ; Data sizes:
 13926                          ;		Autos:    0
 13927                          ;		Params:   3
 13928                          ;		Temp:     6
 13929                          ;		Total:    9
 13930                          ; This function calls:
 13931                          ;		Nothing
 13932                          ; This function is called by:
 13933                          ;		___fladd
 13934                          ;		___fldiv
 13935                          ;		___flmul
 13936                          ;		___awtofl
 13937                          ;		___lwtofl
 13938                          ;		___lltofl
 13939                          ; This function uses a non-reentrant model
 13940                          ; 
 13941                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\double.c"
 13942                          	line	33
 13943  022F                    	__size_of___flpack	equ	__end_of___flpack-___flpack
 13944                          ;double.c: 31: void
 13945                          ;double.c: 32: __flpack(unsigned long * arg, unsigned char exp)
 13946                          ;double.c: 33: {
 13947                          ;			
 13948  77F8                    ___flpack:	
 13949                          	opt	disable
 13950                          	line	34
 13951                          ;double.c: 34: if(exp == 0 || *arg == 0) {
 13952  77F8  70 CF             	and	f, 0xCF   ;select user reg space
 13953  77FA  62 D0 00          	mov	reg[CUR_PP],0
 13954  77FD  51 73             	mov	a,[0+((___flpack@exp)^0x0)]
 13955  77FF  39 00             	cmp	a,(0)
 13956  7801  A024              	jz	l600002276
 13957  7803  70 CF             	and	f, 0xCF   ;select user reg space
 13958  7805  62 D0 00          	mov	reg[CUR_PP],0
 13959  7808  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 13960  780A  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 13961  780C  60 D3             	mov	reg[0xd3],a
 13962  780E  52 00             	mov	a,[0+x]
 13963  7810  39 00             	cmp	a,<(0>>24)
 13964  7812  B011              	jnz	u1673
 13965  7814  52 01             	mov	a,[1+x]
 13966  7816  39 00             	cmp	a,<(0>>16)
 13967  7818  B00B              	jnz	u1673
 13968  781A  52 02             	mov	a,[2+x]
 13969  781C  39 00             	cmp	a,<(0>>8)
 13970  781E  B005              	jnz	u1673
 13971  7820  52 03             	mov	a,[3+x]
 13972  7822  39 00             	cmp	a,<(0)
 13973  7824                    u1673:
 13974  7824  B01F              	jnz	l355
 13975                          ;			
 13976  7826                    l600002276:	
 13977                          	line	35
 13978                          ;double.c: 35: *arg = 0;
 13979  7826  70 CF             	and	f, 0xCF   ;select user reg space
 13980  7828  62 D0 00          	mov	reg[CUR_PP],0
 13981  782B  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 13982  782D  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 13983  782F  60 D3             	mov	reg[0xd3],a
 13984  7831  50 00             	mov	a,<(0>>24)
 13985  7833  54 00             	mov	[0+x],a
 13986  7835  50 00             	mov	a,<(0>>16)
 13987  7837  54 01             	mov	[1+x],a
 13988  7839  50 00             	mov	a,<(0>>8)
 13989  783B  54 02             	mov	[2+x],a
 13990  783D  50 00             	mov	a,<(0)
 13991  783F  54 03             	mov	[3+x],a
 13992                          	line	36
 13993                          ;double.c: 36: return;
 13994  7841  7D 7A24           	xjmp	l354
 13995                          	line	37
 13996                          ;			
 13997  7844                    l355:	
 13998                          	line	38
 13999                          ;double.c: 37: }
 14000                          ;double.c: 38: while(*arg & ~0x1FFFFFFUL) {
 14001  7844  7D 7873           	xjmp	l356
 14002                          ;			
 14003  7847                    l357:	
 14004                          	line	39
 14005                          ;double.c: 39: exp++;
 14006  7847  70 CF             	and	f, 0xCF   ;select user reg space
 14007  7849  62 D0 00          	mov	reg[CUR_PP],0
 14008  784C  51 73             	mov	a,[0+((___flpack@exp)^0x0)]
 14009  784E  01 01             	add	a,<((01h))
 14010  7850  53 73             	mov	[0+((___flpack@exp)^0x0)],a
 14011                          	line	40
 14012                          ;double.c: 40: *arg >>= 1;
 14013  7852  50 01             	mov	a,<((01h))
 14014  7854  08                	push	a
 14015  7855  70 CF             	and	f, 0xCF   ;select user reg space
 14016  7857  62 D0 00          	mov	reg[CUR_PP],0
 14017  785A  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14018  785C  08                	push	a
 14019  785D  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14020  785F  18                	pop	a
 14021  7860  60 D3             	mov	reg[0xd3],a
 14022  7862  18                	pop	a
 14023  7863  7D 7870           	xjmp	u1683
 14024  7866  70 FB             	clrc
 14025  7868                    u1694:
 14026  7868  6F 00             	rrc	[0+x]
 14027  786A  6F 01             	rrc	[1+x]
 14028  786C  6F 02             	rrc	[2+x]
 14029  786E  6F 03             	rrc	[3+x]
 14030  7870                    u1683:
 14031  7870  78                	dec	a
 14032  7871  DFF6              	jnc	u1694
 14033                          	line	41
 14034                          ;			
 14035  7873                    l356:	
 14036                          	line	38
 14037  7873  70 CF             	and	f, 0xCF   ;select user reg space
 14038  7875  62 D0 00          	mov	reg[CUR_PP],0
 14039  7878  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14040  787A  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14041  787C  60 D3             	mov	reg[0xd3],a
 14042  787E  52 00             	mov	a,[x+0]
 14043  7880  53 74             	mov	[(??___flpack^0x0)+0+0],a
 14044  7882  52 01             	mov	a,[x+1]
 14045  7884  53 75             	mov	[(??___flpack^0x0)+0+0+1],a
 14046  7886  52 02             	mov	a,[x+2]
 14047  7888  53 76             	mov	[(??___flpack^0x0)+0+0+2],a
 14048  788A  52 03             	mov	a,[x+3]
 14049  788C  53 77             	mov	[(??___flpack^0x0)+0+0+3],a
 14050  788E  50 00             	mov	a,<(-33554432)
 14051  7890  24 77             	and	[(??___flpack^0x0)+0+3],a
 14052  7892  50 00             	mov	a,<(-33554432>>8)
 14053  7894  24 76             	and	[(??___flpack^0x0)+0+2],a
 14054  7896  50 00             	mov	a,<(-33554432>>16)
 14055  7898  24 75             	and	[(??___flpack^0x0)+0+1],a
 14056  789A  50 FE             	mov	a,<(-33554432>>24)
 14057  789C  24 74             	and	[(??___flpack^0x0)+0+0],a
 14058  789E  51 74             	mov	a,[(??___flpack^0x0)+0+0]
 14059  78A0  39 00             	cmp	a,<(0>>24)
 14060  78A2  B011              	jnz	u1703
 14061  78A4  51 75             	mov	a,[(??___flpack^0x0)+0+1]
 14062  78A6  39 00             	cmp	a,<(0>>16)
 14063  78A8  B00B              	jnz	u1703
 14064  78AA  51 76             	mov	a,[(??___flpack^0x0)+0+2]
 14065  78AC  39 00             	cmp	a,<(0>>8)
 14066  78AE  B005              	jnz	u1703
 14067  78B0  51 77             	mov	a,[(??___flpack^0x0)+0+3]
 14068  78B2  39 00             	cmp	a,<(0)
 14069  78B4                    u1703:
 14070  78B4  BF92              	jnz	l357
 14071                          ;			
 14072  78B6                    l358:	
 14073                          	line	42
 14074                          ;double.c: 41: }
 14075                          ;double.c: 42: while(*arg & ~0xFFFFFFUL) {
 14076  78B6  7D 7900           	xjmp	l359
 14077                          ;			
 14078  78B9                    l360:	
 14079                          	line	43
 14080                          ;double.c: 43: exp++;
 14081  78B9  70 CF             	and	f, 0xCF   ;select user reg space
 14082  78BB  62 D0 00          	mov	reg[CUR_PP],0
 14083  78BE  51 73             	mov	a,[0+((___flpack@exp)^0x0)]
 14084  78C0  01 01             	add	a,<((01h))
 14085  78C2  53 73             	mov	[0+((___flpack@exp)^0x0)],a
 14086                          	line	44
 14087                          ;double.c: 44: (*arg)++;
 14088  78C4  70 CF             	and	f, 0xCF   ;select user reg space
 14089  78C6  62 D0 00          	mov	reg[CUR_PP],0
 14090  78C9  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14091  78CB  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14092  78CD  60 D3             	mov	reg[0xd3],a
 14093  78CF  50 01             	mov	a,<(01h)
 14094  78D1  05 03             	add	[3+x],a
 14095  78D3  50 00             	mov	a,<(01h>>8)
 14096  78D5  0D 02             	adc	[2+x],a
 14097  78D7  50 00             	mov	a,<(01h>>16)
 14098  78D9  0D 01             	adc	[1+x],a
 14099  78DB  50 00             	mov	a,<(01h>>24)
 14100  78DD  0D 00             	adc	[0+x],a
 14101                          	line	45
 14102                          ;double.c: 45: *arg >>= 1;
 14103  78DF  50 01             	mov	a,<((01h))
 14104  78E1  08                	push	a
 14105  78E2  70 CF             	and	f, 0xCF   ;select user reg space
 14106  78E4  62 D0 00          	mov	reg[CUR_PP],0
 14107  78E7  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14108  78E9  08                	push	a
 14109  78EA  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14110  78EC  18                	pop	a
 14111  78ED  60 D3             	mov	reg[0xd3],a
 14112  78EF  18                	pop	a
 14113  78F0  7D 78FD           	xjmp	u1713
 14114  78F3  70 FB             	clrc
 14115  78F5                    u1724:
 14116  78F5  6F 00             	rrc	[0+x]
 14117  78F7  6F 01             	rrc	[1+x]
 14118  78F9  6F 02             	rrc	[2+x]
 14119  78FB  6F 03             	rrc	[3+x]
 14120  78FD                    u1713:
 14121  78FD  78                	dec	a
 14122  78FE  DFF6              	jnc	u1724
 14123                          	line	46
 14124                          ;			
 14125  7900                    l359:	
 14126                          	line	42
 14127  7900  70 CF             	and	f, 0xCF   ;select user reg space
 14128  7902  62 D0 00          	mov	reg[CUR_PP],0
 14129  7905  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14130  7907  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14131  7909  60 D3             	mov	reg[0xd3],a
 14132  790B  52 00             	mov	a,[x+0]
 14133  790D  53 74             	mov	[(??___flpack^0x0)+0+0],a
 14134  790F  52 01             	mov	a,[x+1]
 14135  7911  53 75             	mov	[(??___flpack^0x0)+0+0+1],a
 14136  7913  52 02             	mov	a,[x+2]
 14137  7915  53 76             	mov	[(??___flpack^0x0)+0+0+2],a
 14138  7917  52 03             	mov	a,[x+3]
 14139  7919  53 77             	mov	[(??___flpack^0x0)+0+0+3],a
 14140  791B  50 00             	mov	a,<(-16777216)
 14141  791D  24 77             	and	[(??___flpack^0x0)+0+3],a
 14142  791F  50 00             	mov	a,<(-16777216>>8)
 14143  7921  24 76             	and	[(??___flpack^0x0)+0+2],a
 14144  7923  50 00             	mov	a,<(-16777216>>16)
 14145  7925  24 75             	and	[(??___flpack^0x0)+0+1],a
 14146  7927  50 FF             	mov	a,<(-16777216>>24)
 14147  7929  24 74             	and	[(??___flpack^0x0)+0+0],a
 14148  792B  51 74             	mov	a,[(??___flpack^0x0)+0+0]
 14149  792D  39 00             	cmp	a,<(0>>24)
 14150  792F  B011              	jnz	u1733
 14151  7931  51 75             	mov	a,[(??___flpack^0x0)+0+1]
 14152  7933  39 00             	cmp	a,<(0>>16)
 14153  7935  B00B              	jnz	u1733
 14154  7937  51 76             	mov	a,[(??___flpack^0x0)+0+2]
 14155  7939  39 00             	cmp	a,<(0>>8)
 14156  793B  B005              	jnz	u1733
 14157  793D  51 77             	mov	a,[(??___flpack^0x0)+0+3]
 14158  793F  39 00             	cmp	a,<(0)
 14159  7941                    u1733:
 14160  7941  BF77              	jnz	l360
 14161                          ;			
 14162  7943                    l361:	
 14163                          	line	47
 14164                          ;double.c: 46: }
 14165                          ;double.c: 47: while(!(*arg & 0x800000UL)) {
 14166  7943  7D 7970           	xjmp	l362
 14167                          ;			
 14168  7946                    l363:	
 14169                          	line	48
 14170                          ;double.c: 48: exp--;
 14171  7946  70 CF             	and	f, 0xCF   ;select user reg space
 14172  7948  62 D0 00          	mov	reg[CUR_PP],0
 14173  794B  51 73             	mov	a,[0+((___flpack@exp)^0x0)]
 14174  794D  11 01             	sub	a,<((01h))
 14175  794F  53 73             	mov	[0+((___flpack@exp)^0x0)],a
 14176                          	line	49
 14177                          ;double.c: 49: *arg <<= 1;
 14178  7951  50 01             	mov	a,<((01h))
 14179  7953  08                	push	a
 14180  7954  70 CF             	and	f, 0xCF   ;select user reg space
 14181  7956  62 D0 00          	mov	reg[CUR_PP],0
 14182  7959  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14183  795B  08                	push	a
 14184  795C  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14185  795E  18                	pop	a
 14186  795F  60 D3             	mov	reg[0xd3],a
 14187  7961  18                	pop	a
 14188  7962  7D 796D           	xjmp	u1743
 14189  7965                    u1754:
 14190  7965  66 03             	asl	[3+x]
 14191  7967  6C 02             	rlc	[2+x]
 14192  7969  6C 01             	rlc	[1+x]
 14193  796B  6C 00             	rlc	[0+x]
 14194  796D                    u1743:
 14195  796D  78                	dec	a
 14196  796E  DFF6              	jnc	u1754
 14197                          	line	50
 14198                          ;			
 14199  7970                    l362:	
 14200                          	line	47
 14201  7970  70 CF             	and	f, 0xCF   ;select user reg space
 14202  7972  62 D0 00          	mov	reg[CUR_PP],0
 14203  7975  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14204  7977  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14205  7979  60 D3             	mov	reg[0xd3],a
 14206  797B  52 00             	mov	a,[x+0]
 14207  797D  53 74             	mov	[(??___flpack^0x0)+0+0],a
 14208  797F  52 01             	mov	a,[x+1]
 14209  7981  53 75             	mov	[(??___flpack^0x0)+0+0+1],a
 14210  7983  52 02             	mov	a,[x+2]
 14211  7985  53 76             	mov	[(??___flpack^0x0)+0+0+2],a
 14212  7987  52 03             	mov	a,[x+3]
 14213  7989  53 77             	mov	[(??___flpack^0x0)+0+0+3],a
 14214  798B  50 00             	mov	a,<(0800000h)
 14215  798D  24 77             	and	[(??___flpack^0x0)+0+3],a
 14216  798F  50 00             	mov	a,<(0800000h>>8)
 14217  7991  24 76             	and	[(??___flpack^0x0)+0+2],a
 14218  7993  50 80             	mov	a,<(0800000h>>16)
 14219  7995  24 75             	and	[(??___flpack^0x0)+0+1],a
 14220  7997  50 00             	mov	a,<(0800000h>>24)
 14221  7999  24 74             	and	[(??___flpack^0x0)+0+0],a
 14222  799B  51 74             	mov	a,[(??___flpack^0x0)+0+0]
 14223  799D  39 00             	cmp	a,<(0>>24)
 14224  799F  B011              	jnz	u1763
 14225  79A1  51 75             	mov	a,[(??___flpack^0x0)+0+1]
 14226  79A3  39 00             	cmp	a,<(0>>16)
 14227  79A5  B00B              	jnz	u1763
 14228  79A7  51 76             	mov	a,[(??___flpack^0x0)+0+2]
 14229  79A9  39 00             	cmp	a,<(0>>8)
 14230  79AB  B005              	jnz	u1763
 14231  79AD  51 77             	mov	a,[(??___flpack^0x0)+0+3]
 14232  79AF  39 00             	cmp	a,<(0)
 14233  79B1                    u1763:
 14234  79B1  AF94              	jz	l363
 14235                          ;			
 14236  79B3                    l364:	
 14237                          	line	51
 14238                          ;double.c: 50: }
 14239                          ;double.c: 51: if(!(exp & 1))
 14240  79B3  70 CF             	and	f, 0xCF   ;select user reg space
 14241  79B5  62 D0 00          	mov	reg[CUR_PP],0
 14242  79B8  51 73             	mov	a,[0+((___flpack@exp)^0x0)]
 14243  79BA  21 01             	and	a,<((01h))
 14244  79BC  39 00             	cmp	a,(0)
 14245  79BE  B01C              	jnz	l365
 14246                          	line	52
 14247                          ;double.c: 52: *arg &= ~0x800000UL;
 14248  79C0  70 CF             	and	f, 0xCF   ;select user reg space
 14249  79C2  62 D0 00          	mov	reg[CUR_PP],0
 14250  79C5  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14251  79C7  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14252  79C9  60 D3             	mov	reg[0xd3],a
 14253  79CB  50 FF             	mov	a,<(-8388609)
 14254  79CD  25 03             	and	[3+x],a
 14255  79CF  50 FF             	mov	a,<(-8388609>>8)
 14256  79D1  25 02             	and	[2+x],a
 14257  79D3  50 7F             	mov	a,<(-8388609>>16)
 14258  79D5  25 01             	and	[1+x],a
 14259  79D7  50 FF             	mov	a,<(-8388609>>24)
 14260  79D9  25 00             	and	[0+x],a
 14261                          ;			
 14262  79DB                    l365:	
 14263                          	line	53
 14264                          ;double.c: 53: exp >>= 1;
 14265  79DB  50 01             	mov	a,<((01h))
 14266  79DD  7D 79E9           	xjmp	u1773
 14267  79E0  70 FB             	clrc
 14268  79E2                    u1784:
 14269  79E2  70 CF             	and	f, 0xCF   ;select user reg space
 14270  79E4  62 D0 00          	mov	reg[CUR_PP],0
 14271  79E7  6E 73             	rrc	[0+((___flpack@exp)^0x0)]
 14272  79E9                    u1773:
 14273  79E9  78                	dec	a
 14274  79EA  DFF7              	jnc	u1784
 14275                          	line	54
 14276                          ;double.c: 54: *arg |= (unsigned long)exp << 24;
 14277  79EC  70 CF             	and	f, 0xCF   ;select user reg space
 14278  79EE  62 D0 00          	mov	reg[CUR_PP],0
 14279  79F1  51 73             	mov	a,[0+((___flpack@exp)^0x0)]
 14280  79F3  53 77             	mov	[(??___flpack^0x0)+0+0+3],a
 14281  79F5  55 76  00         	mov	[(??___flpack^0x0)+0+0+2],0
 14282  79F8  55 75  00         	mov	[(??___flpack^0x0)+0+0+1],0
 14283  79FB  55 74  00         	mov	[(??___flpack^0x0)+0+0+0],0
 14284  79FE  50 18             	mov	a,<((018h))
 14285  7A00  7D 7A0B           	xjmp	u1793
 14286  7A03                    u1804:
 14287  7A03  65 77             	asl	[(??___flpack^0x0)+0+3]
 14288  7A05  6B 76             	rlc	[(??___flpack^0x0)+0+2]
 14289  7A07  6B 75             	rlc	[(??___flpack^0x0)+0+1]
 14290  7A09  6B 74             	rlc	[(??___flpack^0x0)+0+0]
 14291  7A0B                    u1793:
 14292  7A0B  78                	dec	a
 14293  7A0C  DFF6              	jnc	u1804
 14294  7A0E  51 71             	mov	a,[0+((___flpack@arg)^0x0)]
 14295  7A10  58 72             	mov	x,[1+((___flpack@arg)^0x0)]
 14296  7A12  60 D3             	mov	reg[0xd3],a
 14297  7A14  51 77             	mov	a,[(??___flpack^0x0)+0+3]
 14298  7A16  2D 03             	or	[3+x],a
 14299  7A18  51 76             	mov	a,[(??___flpack^0x0)+0+2]
 14300  7A1A  2D 02             	or	[2+x],a
 14301  7A1C  51 75             	mov	a,[(??___flpack^0x0)+0+1]
 14302  7A1E  2D 01             	or	[1+x],a
 14303  7A20  51 74             	mov	a,[(??___flpack^0x0)+0+0]
 14304  7A22  2D 00             	or	[0+x],a
 14305                          	line	55
 14306                          ;double.c: 55: }
 14307  7A24                    l354:
 14308                          ;			
 14309  7A24  70 CF             	and	f, 0xCF   ;select user reg space
 14310                          	
 14311  7A26  7F                	ret
 14312                          GLOBAL __end_of___flpack
 14313  7A27                    	__end_of___flpack:
 14314                          	FNSIZE	___flpack,6,3
 14315                          ; =============== function ___flpack ends ============
 14316                          
 14317                          	signat	___flpack,8312
 14318                          	global	_Ticker_ISR
 14319                          	global	??_Ticker_ISR
 14320                          	global	?_Ticker_ISR
 14321                          	psect	intrtext,class=CODE,space=0
 14322                          
 14323                          ; *************** function _Ticker_ISR *****************
 14324                          ; Defined at:
 14325                          ;		line 30 in file "./main.c"
 14326                          ; Parameters:
 14327                          ;		None
 14328                          ; Auto variables:
 14329                          ;		None
 14330                          ; Return value:
 14331                          ;		type: void 
 14332                          ;		size: 0
 14333                          ; Registers used:
 14334                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
 14335                          ; Tracked objects:
 14336                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=0 MVR_PP? MVW_PP? 
 14337                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 14338                          ;		Unchanged: 
 14339                          ; Data sizes:
 14340                          ;		Autos:    0
 14341                          ;		Params:   0
 14342                          ;		Temp:    10
 14343                          ;		Total:   10
 14344                          ; This function calls:
 14345                          ;		_LED1_Invert
 14346                          ; This function is called by:
 14347                          ;		Interrupt level 1
 14348                          ; This function uses a non-reentrant model
 14349                          ; 
 14350                          	file	"./main.c"
 14351                          	line	30
 14352  0041                    	__size_of_Ticker_ISR	equ	__end_of_Ticker_ISR-_Ticker_ISR
 14353                          ;main.c: 29: void Ticker_ISR()
 14354                          ;main.c: 30: {
 14355  7B88                    _Ticker_ISR:
 14356  7B88                    Ticker_ISR:
 14357                          	global	Ticker_ISR ; in case PD tries to call an assembler ISR by this name
 14358                          
 14359                          	opt	disable
 14360  7B88  08                	push	a
 14361  7B89  10                	push	x
 14362  7B8A  5D 6C             	mov a,reg[TMP_DR0]
 14363  7B8C  08                	push	a
 14364  7B8D  5D 6D             	mov a,reg[TMP_DR1]
 14365  7B8F  08                	push	a
 14366  7B90  5D 6E             	mov a,reg[TMP_DR2]
 14367  7B92  08                	push	a
 14368  7B93  5D 6F             	mov a,reg[TMP_DR3]
 14369  7B95  08                	push	a
 14370  7B96  5D D0             	mov a,reg[CUR_PP]
 14371  7B98  08                	push	a
 14372  7B99  5D D3             	mov a,reg[IDX_PP]
 14373  7B9B  08                	push	a
 14374  7B9C  5D D4             	mov a,reg[MVR_PP]
 14375  7B9E  08                	push	a
 14376  7B9F  5D D5             	mov a,reg[MVW_PP]
 14377  7BA1  08                	push	a
 14378                          	line	31
 14379                          ;main.c: 31: LED1_Invert();
 14380  7BA2  71 80             	or	f, 0x80	;select multiple RAM page mode
 14381                          	
 14382  7BA4  7C 3759           	xcall	_LED1_Invert
 14383                          	
 14384  7BA7  38 00             	add	sp,0
 14385                          	line	33
 14386                          ;main.c: 33: return;
 14387  7BA9  7D 7BAC           	xjmp	l3
 14388                          	line	34
 14389                          ;main.c: 34: }
 14390  7BAC                    l3:
 14391                          ;			
 14392  7BAC  70 CF             	and	f, 0xCF   ;select user reg space
 14393                          	
 14394  7BAE  18                	pop	a
 14395  7BAF  60 D5             	mov reg[MVW_PP],a
 14396  7BB1  18                	pop	a
 14397  7BB2  60 D4             	mov reg[MVR_PP],a
 14398  7BB4  18                	pop	a
 14399  7BB5  60 D3             	mov reg[IDX_PP],a
 14400  7BB7  18                	pop	a
 14401  7BB8  60 D0             	mov reg[CUR_PP],a
 14402  7BBA  18                	pop	a
 14403  7BBB  60 6F             	mov reg[TMP_DR3],a
 14404  7BBD  18                	pop	a
 14405  7BBE  60 6E             	mov reg[TMP_DR2],a
 14406  7BC0  18                	pop	a
 14407  7BC1  60 6D             	mov reg[TMP_DR1],a
 14408  7BC3  18                	pop	a
 14409  7BC4  60 6C             	mov reg[TMP_DR0],a
 14410  7BC6  20                	pop	x
 14411  7BC7  18                	pop	a
 14412  7BC8  7E                	reti
 14413                          GLOBAL __end_of_Ticker_ISR
 14414  7BC9                    	__end_of_Ticker_ISR:
 14415                          	FNSIZE	_Ticker_ISR,10,0
 14416                          ; =============== function _Ticker_ISR ends ============
 14417                          
 14418                          	signat	_Ticker_ISR,88
 14419                          	global	_LED1_Invert
 14420                          	FNCALL	_main,_hardware_init
 14421                          	FNCALL	_main,_print_help
 14422                          	FNCALL	_main,_LTRX_bCmdCheck
 14423                          	FNCALL	_main,_LTRX_szGetParam
 14424                          	FNCALL	_main,_print_header
 14425                          	FNCALL	_main,_printf
 14426                          	FNCALL	_main,_oo_report
 14427                          	FNCALL	_main,_s_do_measure
 14428                          	FNCALL	_main,_strcmp
 14429                          	FNCALL	_main,_orcon_low
 14430                          	FNCALL	_main,_orcon_med
 14431                          	FNCALL	_main,_orcon_high
 14432                          	FNCALL	_main,_LTRX_CmdReset
 14433                          	FNCALL	_oo_report,_OneWire_fReset
 14434                          	FNCALL	_oo_report,_LTRX_CPutString
 14435                          	FNCALL	_oo_report,_LTRX_PutCRLF
 14436                          	FNCALL	_oo_report,_oo_start_conversion
 14437                          	FNCALL	_oo_report,_oo_wait_for_completion
 14438                          	FNCALL	_oo_report,_OneWire_fFindFirst
 14439                          	FNCALL	_oo_report,_oo_read_device
 14440                          	FNCALL	_oo_report,_oo_print_data
 14441                          	FNCALL	_oo_report,_OneWire_fFindNext
 14442                          	FNCALL	_s_do_measure,_s_connectionreset
 14443                          	FNCALL	_s_do_measure,_s_measure
 14444                          	FNCALL	_s_do_measure,_LTRX_CPutString
 14445                          	FNCALL	_s_do_measure,_LTRX_PutSHexByte
 14446                          	FNCALL	_s_do_measure,___lwtofl
 14447                          	FNCALL	_s_do_measure,_calc_sth11
 14448                          	FNCALL	_s_do_measure,_calc_dewpoint
 14449                          	FNCALL	_s_do_measure,_printf
 14450                          	FNCALL	_print_help,_print_header
 14451                          	FNCALL	_print_help,_printf
 14452                          	FNCALL	_hardware_init,_Counter8_ltrx_Start
 14453                          	FNCALL	_hardware_init,_LED1_Start
 14454                          	FNCALL	_hardware_init,_Ticker_Start
 14455                          	FNCALL	_hardware_init,_OneWire_Start
 14456                          	FNCALL	_hardware_init,_s_Start
 14457                          	FNCALL	_hardware_init,_orcon_Start
 14458                          	FNCALL	_hardware_init,_LTRX_CmdReset
 14459                          	FNCALL	_hardware_init,_LTRX_EnableInt
 14460                          	FNCALL	_hardware_init,_LTRX_Start
 14461                          	FNCALL	_hardware_init,_Ticker_EnableInt
 14462                          	FNCALL	_orcon_high,_printf
 14463                          	FNCALL	_orcon_high,_orcon_delay
 14464                          	FNCALL	_orcon_med,_printf
 14465                          	FNCALL	_orcon_med,_orcon_delay
 14466                          	FNCALL	_orcon_low,_printf
 14467                          	FNCALL	_orcon_low,_orcon_delay
 14468                          	FNCALL	_oo_read_device,_OneWire_GetROM
 14469                          	FNCALL	_oo_read_device,_oo_busreset
 14470                          	FNCALL	_oo_read_device,_OneWire_SetROM
 14471                          	FNCALL	_oo_read_device,_OneWire_fVerify
 14472                          	FNCALL	_oo_read_device,_oo_read_scratchpad
 14473                          	FNCALL	_oo_start_conversion,_oo_tx_byte
 14474                          	FNCALL	_oo_wait_for_completion,_delay_10ms
 14475                          	FNCALL	_oo_wait_for_completion,_oo_conversion_busy
 14476                          	FNCALL	_oo_print_data,_LTRX_CPutString
 14477                          	FNCALL	_oo_print_data,_LTRX_PutSHexByte
 14478                          	FNCALL	_oo_print_data,_LTRX_PutChar
 14479                          	FNCALL	_oo_print_data,_LTRX_PutCRLF
 14480                          	FNCALL	_calc_sth11,___flmul
 14481                          	FNCALL	_calc_sth11,___fladd
 14482                          	FNCALL	_calc_sth11,___flge
 14483                          	FNCALL	_calc_dewpoint,___flmul
 14484                          	FNCALL	_calc_dewpoint,_log10
 14485                          	FNCALL	_calc_dewpoint,___fladd
 14486                          	FNCALL	_calc_dewpoint,___fldiv
 14487                          	FNCALL	_calc_dewpoint,___flsub
 14488                          	FNCALL	_orcon_delay,_orcon_delay_5us
 14489                          	FNCALL	___lwtofl,___flpack
 14490                          	FNCALL	_s_connectionreset,_delay_5us
 14491                          	FNCALL	_s_connectionreset,_s_transstart
 14492                          	FNCALL	_s_measure,_s_transstart
 14493                          	FNCALL	_s_measure,_s_write_byte
 14494                          	FNCALL	_s_measure,_delay_5us
 14495                          	FNCALL	_s_measure,_s_read_byte
 14496                          	FNCALL	_printf,_putch
 14497                          	FNCALL	_printf,_isdigit
 14498                          	FNCALL	_printf,___wmul
 14499                          	FNCALL	_printf,___flge
 14500                          	FNCALL	_printf,___flneg
 14501                          	FNCALL	_printf,___awdiv
 14502                          	FNCALL	_printf,_scale
 14503                          	FNCALL	_printf,___flmul
 14504                          	FNCALL	_printf,_fround
 14505                          	FNCALL	_printf,___fladd
 14506                          	FNCALL	_printf,___fltol
 14507                          	FNCALL	_printf,__div_to_l_
 14508                          	FNCALL	_printf,___lltofl
 14509                          	FNCALL	_printf,___flsub
 14510                          	FNCALL	_printf,___lldiv
 14511                          	FNCALL	_printf,___llmod
 14512                          	FNCALL	_print_header,_LTRX_PutCRLF
 14513                          	FNCALL	_print_header,_LTRX_CPutString
 14514                          	FNCALL	_oo_read_scratchpad,_oo_tx_byte
 14515                          	FNCALL	_oo_read_scratchpad,_oo_crc_init
 14516                          	FNCALL	_oo_read_scratchpad,_oo_rx_byte
 14517                          	FNCALL	_oo_busreset,_OneWire_fReset
 14518                          	FNCALL	_putch,_LTRX_PutChar
 14519                          	FNCALL	_log10,_log
 14520                          	FNCALL	_log10,___flmul
 14521                          	FNCALL	_s_transstart,_delay_5us
 14522                          	FNCALL	_s_write_byte,_delay_5us
 14523                          	FNCALL	_s_read_byte,_delay_5us
 14524                          	FNCALL	___fldiv,___flunpack
 14525                          	FNCALL	___fldiv,___flpack
 14526                          	FNCALL	___flsub,___fladd
 14527                          	FNCALL	___lltofl,___flpack
 14528                          	FNCALL	_fround,___awdiv
 14529                          	FNCALL	_fround,___awmod
 14530                          	FNCALL	_fround,___flmul
 14531                          	FNCALL	_scale,___awdiv
 14532                          	FNCALL	_scale,___awmod
 14533                          	FNCALL	_scale,___flmul
 14534                          	FNCALL	__div_to_l_,___flunpack
 14535                          	FNCALL	___fltol,___flunpack
 14536                          	FNCALL	_oo_conversion_busy,_oo_rx_byte
 14537                          	FNCALL	_oo_tx_byte,_OneWire_WriteByte
 14538                          	FNCALL	_oo_rx_byte,_OneWire_bReadByte
 14539                          	FNCALL	_oo_rx_byte,_oo_crc_shuffle_byte
 14540                          	FNCALL	_log,___flge
 14541                          	FNCALL	_log,_frexp
 14542                          	FNCALL	_log,___flmul
 14543                          	FNCALL	_log,___fladd
 14544                          	FNCALL	_log,_eval_poly
 14545                          	FNCALL	_log,___awtofl
 14546                          	FNCALL	___awtofl,___flpack
 14547                          	FNCALL	___awtofl,___flneg
 14548                          	FNCALL	_eval_poly,___flmul
 14549                          	FNCALL	_eval_poly,___fladd
 14550                          	FNCALL	___flmul,___flunpack
 14551                          	FNCALL	___flmul,___flpack
 14552                          	FNCALL	___fladd,___flunpack
 14553                          	FNCALL	___fladd,___flpack
 14554                          	FNROOT	_main
 14555                          	FNCALL	_Ticker_ISR,_LED1_Invert
 14556                          	FNCALL	intlevel1,_Ticker_ISR
 14557                          	global	intlevel1
 14558                          	FNROOT	intlevel1
 14559                          	global	_crc_rom
 14560                          	psect	ramdata1,class=RAM,space=1
 14561  0100                    _crc_rom:
 14562  0100                    	blk	256
 14563                          	psect	romdata1,class=BANKROM,space=0
 14564                          	file	"./oo.c"
 14565                          	line	29
 14566                          
 14567                          ;initializer for _crc_rom
 14568  0100  00                	db	(0)
 14569  0101  5E                	db	(05Eh)
 14570  0102  BC                	db	(0BCh)
 14571  0103  E2                	db	(0E2h)
 14572  0104  61                	db	(061h)
 14573  0105  3F                	db	(03Fh)
 14574  0106  DD                	db	(0DDh)
 14575  0107  83                	db	(083h)
 14576  0108  C2                	db	(0C2h)
 14577  0109  9C                	db	(09Ch)
 14578  010A  7E                	db	(07Eh)
 14579  010B  20                	db	(020h)
 14580  010C  A3                	db	(0A3h)
 14581  010D  FD                	db	(0FDh)
 14582  010E  1F                	db	(01Fh)
 14583  010F  41                	db	(041h)
 14584  0110  9D                	db	(09Dh)
 14585  0111  C3                	db	(0C3h)
 14586  0112  21                	db	(021h)
 14587  0113  7F                	db	(07Fh)
 14588  0114  FC                	db	(0FCh)
 14589  0115  A2                	db	(0A2h)
 14590  0116  40                	db	(040h)
 14591  0117  1E                	db	(01Eh)
 14592  0118  5F                	db	(05Fh)
 14593  0119  01                	db	(01h)
 14594  011A  E3                	db	(0E3h)
 14595  011B  BD                	db	(0BDh)
 14596  011C  3E                	db	(03Eh)
 14597  011D  60                	db	(060h)
 14598  011E  82                	db	(082h)
 14599  011F  DC                	db	(0DCh)
 14600  0120  23                	db	(023h)
 14601  0121  7D                	db	(07Dh)
 14602  0122  9F                	db	(09Fh)
 14603  0123  C1                	db	(0C1h)
 14604  0124  42                	db	(042h)
 14605  0125  1C                	db	(01Ch)
 14606  0126  FE                	db	(0FEh)
 14607  0127  A0                	db	(0A0h)
 14608  0128  E1                	db	(0E1h)
 14609  0129  BF                	db	(0BFh)
 14610  012A  5D                	db	(05Dh)
 14611  012B  03                	db	(03h)
 14612  012C  80                	db	(080h)
 14613  012D  DE                	db	(0DEh)
 14614  012E  3C                	db	(03Ch)
 14615  012F  62                	db	(062h)
 14616  0130  BE                	db	(0BEh)
 14617  0131  E0                	db	(0E0h)
 14618  0132  02                	db	(02h)
 14619  0133  5C                	db	(05Ch)
 14620  0134  DF                	db	(0DFh)
 14621  0135  81                	db	(081h)
 14622  0136  63                	db	(063h)
 14623  0137  3D                	db	(03Dh)
 14624  0138  7C                	db	(07Ch)
 14625  0139  22                	db	(022h)
 14626  013A  C0                	db	(0C0h)
 14627  013B  9E                	db	(09Eh)
 14628  013C  1D                	db	(01Dh)
 14629  013D  43                	db	(043h)
 14630  013E  A1                	db	(0A1h)
 14631  013F  FF                	db	(0FFh)
 14632  0140  46                	db	(046h)
 14633  0141  18                	db	(018h)
 14634  0142  FA                	db	(0FAh)
 14635  0143  A4                	db	(0A4h)
 14636  0144  27                	db	(027h)
 14637  0145  79                	db	(079h)
 14638  0146  9B                	db	(09Bh)
 14639  0147  C5                	db	(0C5h)
 14640  0148  84                	db	(084h)
 14641  0149  DA                	db	(0DAh)
 14642  014A  38                	db	(038h)
 14643  014B  66                	db	(066h)
 14644  014C  E5                	db	(0E5h)
 14645  014D  BB                	db	(0BBh)
 14646  014E  59                	db	(059h)
 14647  014F  07                	db	(07h)
 14648  0150  DB                	db	(0DBh)
 14649  0151  85                	db	(085h)
 14650  0152  67                	db	(067h)
 14651  0153  39                	db	(039h)
 14652  0154  BA                	db	(0BAh)
 14653  0155  E4                	db	(0E4h)
 14654  0156  06                	db	(06h)
 14655  0157  58                	db	(058h)
 14656  0158  19                	db	(019h)
 14657  0159  47                	db	(047h)
 14658  015A  A5                	db	(0A5h)
 14659  015B  FB                	db	(0FBh)
 14660  015C  78                	db	(078h)
 14661  015D  26                	db	(026h)
 14662  015E  C4                	db	(0C4h)
 14663  015F  9A                	db	(09Ah)
 14664  0160  65                	db	(065h)
 14665  0161  3B                	db	(03Bh)
 14666  0162  D9                	db	(0D9h)
 14667  0163  87                	db	(087h)
 14668  0164  04                	db	(04h)
 14669  0165  5A                	db	(05Ah)
 14670  0166  B8                	db	(0B8h)
 14671  0167  E6                	db	(0E6h)
 14672  0168  A7                	db	(0A7h)
 14673  0169  F9                	db	(0F9h)
 14674  016A  1B                	db	(01Bh)
 14675  016B  45                	db	(045h)
 14676  016C  C6                	db	(0C6h)
 14677  016D  98                	db	(098h)
 14678  016E  7A                	db	(07Ah)
 14679  016F  24                	db	(024h)
 14680  0170  F8                	db	(0F8h)
 14681  0171  A6                	db	(0A6h)
 14682  0172  44                	db	(044h)
 14683  0173  1A                	db	(01Ah)
 14684  0174  99                	db	(099h)
 14685  0175  C7                	db	(0C7h)
 14686  0176  25                	db	(025h)
 14687  0177  7B                	db	(07Bh)
 14688  0178  3A                	db	(03Ah)
 14689  0179  64                	db	(064h)
 14690  017A  86                	db	(086h)
 14691  017B  D8                	db	(0D8h)
 14692  017C  5B                	db	(05Bh)
 14693  017D  05                	db	(05h)
 14694  017E  E7                	db	(0E7h)
 14695  017F  B9                	db	(0B9h)
 14696  0180  8C                	db	(08Ch)
 14697  0181  D2                	db	(0D2h)
 14698  0182  30                	db	(030h)
 14699  0183  6E                	db	(06Eh)
 14700  0184  ED                	db	(0EDh)
 14701  0185  B3                	db	(0B3h)
 14702  0186  51                	db	(051h)
 14703  0187  0F                	db	(0Fh)
 14704  0188  4E                	db	(04Eh)
 14705  0189  10                	db	(010h)
 14706  018A  F2                	db	(0F2h)
 14707  018B  AC                	db	(0ACh)
 14708  018C  2F                	db	(02Fh)
 14709  018D  71                	db	(071h)
 14710  018E  93                	db	(093h)
 14711  018F  CD                	db	(0CDh)
 14712  0190  11                	db	(011h)
 14713  0191  4F                	db	(04Fh)
 14714  0192  AD                	db	(0ADh)
 14715  0193  F3                	db	(0F3h)
 14716  0194  70                	db	(070h)
 14717  0195  2E                	db	(02Eh)
 14718  0196  CC                	db	(0CCh)
 14719  0197  92                	db	(092h)
 14720  0198  D3                	db	(0D3h)
 14721  0199  8D                	db	(08Dh)
 14722  019A  6F                	db	(06Fh)
 14723  019B  31                	db	(031h)
 14724  019C  B2                	db	(0B2h)
 14725  019D  EC                	db	(0ECh)
 14726  019E  0E                	db	(0Eh)
 14727  019F  50                	db	(050h)
 14728  01A0  AF                	db	(0AFh)
 14729  01A1  F1                	db	(0F1h)
 14730  01A2  13                	db	(013h)
 14731  01A3  4D                	db	(04Dh)
 14732  01A4  CE                	db	(0CEh)
 14733  01A5  90                	db	(090h)
 14734  01A6  72                	db	(072h)
 14735  01A7  2C                	db	(02Ch)
 14736  01A8  6D                	db	(06Dh)
 14737  01A9  33                	db	(033h)
 14738  01AA  D1                	db	(0D1h)
 14739  01AB  8F                	db	(08Fh)
 14740  01AC  0C                	db	(0Ch)
 14741  01AD  52                	db	(052h)
 14742  01AE  B0                	db	(0B0h)
 14743  01AF  EE                	db	(0EEh)
 14744  01B0  32                	db	(032h)
 14745  01B1  6C                	db	(06Ch)
 14746  01B2  8E                	db	(08Eh)
 14747  01B3  D0                	db	(0D0h)
 14748  01B4  53                	db	(053h)
 14749  01B5  0D                	db	(0Dh)
 14750  01B6  EF                	db	(0EFh)
 14751  01B7  B1                	db	(0B1h)
 14752  01B8  F0                	db	(0F0h)
 14753  01B9  AE                	db	(0AEh)
 14754  01BA  4C                	db	(04Ch)
 14755  01BB  12                	db	(012h)
 14756  01BC  91                	db	(091h)
 14757  01BD  CF                	db	(0CFh)
 14758  01BE  2D                	db	(02Dh)
 14759  01BF  73                	db	(073h)
 14760  01C0  CA                	db	(0CAh)
 14761  01C1  94                	db	(094h)
 14762  01C2  76                	db	(076h)
 14763  01C3  28                	db	(028h)
 14764  01C4  AB                	db	(0ABh)
 14765  01C5  F5                	db	(0F5h)
 14766  01C6  17                	db	(017h)
 14767  01C7  49                	db	(049h)
 14768  01C8  08                	db	(08h)
 14769  01C9  56                	db	(056h)
 14770  01CA  B4                	db	(0B4h)
 14771  01CB  EA                	db	(0EAh)
 14772  01CC  69                	db	(069h)
 14773  01CD  37                	db	(037h)
 14774  01CE  D5                	db	(0D5h)
 14775  01CF  8B                	db	(08Bh)
 14776  01D0  57                	db	(057h)
 14777  01D1  09                	db	(09h)
 14778  01D2  EB                	db	(0EBh)
 14779  01D3  B5                	db	(0B5h)
 14780  01D4  36                	db	(036h)
 14781  01D5  68                	db	(068h)
 14782  01D6  8A                	db	(08Ah)
 14783  01D7  D4                	db	(0D4h)
 14784  01D8  95                	db	(095h)
 14785  01D9  CB                	db	(0CBh)
 14786  01DA  29                	db	(029h)
 14787  01DB  77                	db	(077h)
 14788  01DC  F4                	db	(0F4h)
 14789  01DD  AA                	db	(0AAh)
 14790  01DE  48                	db	(048h)
 14791  01DF  16                	db	(016h)
 14792  01E0  E9                	db	(0E9h)
 14793  01E1  B7                	db	(0B7h)
 14794  01E2  55                	db	(055h)
 14795  01E3  0B                	db	(0Bh)
 14796  01E4  88                	db	(088h)
 14797  01E5  D6                	db	(0D6h)
 14798  01E6  34                	db	(034h)
 14799  01E7  6A                	db	(06Ah)
 14800  01E8  2B                	db	(02Bh)
 14801  01E9  75                	db	(075h)
 14802  01EA  97                	db	(097h)
 14803  01EB  C9                	db	(0C9h)
 14804  01EC  4A                	db	(04Ah)
 14805  01ED  14                	db	(014h)
 14806  01EE  F6                	db	(0F6h)
 14807  01EF  A8                	db	(0A8h)
 14808  01F0  74                	db	(074h)
 14809  01F1  2A                	db	(02Ah)
 14810  01F2  C8                	db	(0C8h)
 14811  01F3  96                	db	(096h)
 14812  01F4  15                	db	(015h)
 14813  01F5  4B                	db	(04Bh)
 14814  01F6  A9                	db	(0A9h)
 14815  01F7  F7                	db	(0F7h)
 14816  01F8  B6                	db	(0B6h)
 14817  01F9  E8                	db	(0E8h)
 14818  01FA  0A                	db	(0Ah)
 14819  01FB  54                	db	(054h)
 14820  01FC  D7                	db	(0D7h)
 14821  01FD  89                	db	(089h)
 14822  01FE  6B                	db	(06Bh)
 14823  01FF  35                	db	(035h)
 14824                          	psect	cdata,class=ROM,space=0,reloc=256
 14825                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
 14826                          	line	376
 14827  7C00                    __npowers_:
 14828                          ;powers.c: 7: const double _powers_[] =
 14829                          ;powers.c: 8: {
 14830                          ;powers.c: 9: 1e0,
 14831                          ;powers.c: 10: 1e1,
 14832                          ;powers.c: 11: 1e2,
 14833                          ;powers.c: 12: 1e3,
 14834                          ;powers.c: 13: 1e4,
 14835                          ;powers.c: 14: 1e5,
 14836                          ;powers.c: 15: 1e6,
 14837                          ;powers.c: 16: 1e7,
 14838                          ;powers.c: 17: 1e8,
 14839                          ;powers.c: 18: 1e9,
 14840                          ;powers.c: 19: 1e10,
 14841                          ;powers.c: 21: 1e20,
 14842                          ;powers.c: 22: 1e30,
 14843                          ;powers.c: 37: };
 14844  7C00  3F80              	dw	0x3f800000>>16
 14845  7C02  0000              	dw	0x3f800000&0xffff
 14846                          ;powers.c: 7: const double _powers_[] =
 14847                          ;powers.c: 8: {
 14848                          ;powers.c: 9: 1e0,
 14849                          ;powers.c: 10: 1e1,
 14850                          ;powers.c: 11: 1e2,
 14851                          ;powers.c: 12: 1e3,
 14852                          ;powers.c: 13: 1e4,
 14853                          ;powers.c: 14: 1e5,
 14854                          ;powers.c: 15: 1e6,
 14855                          ;powers.c: 16: 1e7,
 14856                          ;powers.c: 17: 1e8,
 14857                          ;powers.c: 18: 1e9,
 14858                          ;powers.c: 19: 1e10,
 14859                          ;powers.c: 21: 1e20,
 14860                          ;powers.c: 22: 1e30,
 14861                          ;powers.c: 37: };
 14862  7C04  3DCC              	dw	0x3dcccccd>>16
 14863  7C06  CCCD              	dw	0x3dcccccd&0xffff
 14864                          ;powers.c: 7: const double _powers_[] =
 14865                          ;powers.c: 8: {
 14866                          ;powers.c: 9: 1e0,
 14867                          ;powers.c: 10: 1e1,
 14868                          ;powers.c: 11: 1e2,
 14869                          ;powers.c: 12: 1e3,
 14870                          ;powers.c: 13: 1e4,
 14871                          ;powers.c: 14: 1e5,
 14872                          ;powers.c: 15: 1e6,
 14873                          ;powers.c: 16: 1e7,
 14874                          ;powers.c: 17: 1e8,
 14875                          ;powers.c: 18: 1e9,
 14876                          ;powers.c: 19: 1e10,
 14877                          ;powers.c: 21: 1e20,
 14878                          ;powers.c: 22: 1e30,
 14879                          ;powers.c: 37: };
 14880  7C08  3C23              	dw	0x3c23d70a>>16
 14881  7C0A  D70A              	dw	0x3c23d70a&0xffff
 14882                          ;powers.c: 7: const double _powers_[] =
 14883                          ;powers.c: 8: {
 14884                          ;powers.c: 9: 1e0,
 14885                          ;powers.c: 10: 1e1,
 14886                          ;powers.c: 11: 1e2,
 14887                          ;powers.c: 12: 1e3,
 14888                          ;powers.c: 13: 1e4,
 14889                          ;powers.c: 14: 1e5,
 14890                          ;powers.c: 15: 1e6,
 14891                          ;powers.c: 16: 1e7,
 14892                          ;powers.c: 17: 1e8,
 14893                          ;powers.c: 18: 1e9,
 14894                          ;powers.c: 19: 1e10,
 14895                          ;powers.c: 21: 1e20,
 14896                          ;powers.c: 22: 1e30,
 14897                          ;powers.c: 37: };
 14898  7C0C  3A83              	dw	0x3a83126f>>16
 14899  7C0E  126F              	dw	0x3a83126f&0xffff
 14900                          ;powers.c: 7: const double _powers_[] =
 14901                          ;powers.c: 8: {
 14902                          ;powers.c: 9: 1e0,
 14903                          ;powers.c: 10: 1e1,
 14904                          ;powers.c: 11: 1e2,
 14905                          ;powers.c: 12: 1e3,
 14906                          ;powers.c: 13: 1e4,
 14907                          ;powers.c: 14: 1e5,
 14908                          ;powers.c: 15: 1e6,
 14909                          ;powers.c: 16: 1e7,
 14910                          ;powers.c: 17: 1e8,
 14911                          ;powers.c: 18: 1e9,
 14912                          ;powers.c: 19: 1e10,
 14913                          ;powers.c: 21: 1e20,
 14914                          ;powers.c: 22: 1e30,
 14915                          ;powers.c: 37: };
 14916  7C10  38D1              	dw	0x38d1b717>>16
 14917  7C12  B717              	dw	0x38d1b717&0xffff
 14918                          ;powers.c: 7: const double _powers_[] =
 14919                          ;powers.c: 8: {
 14920                          ;powers.c: 9: 1e0,
 14921                          ;powers.c: 10: 1e1,
 14922                          ;powers.c: 11: 1e2,
 14923                          ;powers.c: 12: 1e3,
 14924                          ;powers.c: 13: 1e4,
 14925                          ;powers.c: 14: 1e5,
 14926                          ;powers.c: 15: 1e6,
 14927                          ;powers.c: 16: 1e7,
 14928                          ;powers.c: 17: 1e8,
 14929                          ;powers.c: 18: 1e9,
 14930                          ;powers.c: 19: 1e10,
 14931                          ;powers.c: 21: 1e20,
 14932                          ;powers.c: 22: 1e30,
 14933                          ;powers.c: 37: };
 14934  7C14  3727              	dw	0x3727c5ac>>16
 14935  7C16  C5AC              	dw	0x3727c5ac&0xffff
 14936                          ;powers.c: 7: const double _powers_[] =
 14937                          ;powers.c: 8: {
 14938                          ;powers.c: 9: 1e0,
 14939                          ;powers.c: 10: 1e1,
 14940                          ;powers.c: 11: 1e2,
 14941                          ;powers.c: 12: 1e3,
 14942                          ;powers.c: 13: 1e4,
 14943                          ;powers.c: 14: 1e5,
 14944                          ;powers.c: 15: 1e6,
 14945                          ;powers.c: 16: 1e7,
 14946                          ;powers.c: 17: 1e8,
 14947                          ;powers.c: 18: 1e9,
 14948                          ;powers.c: 19: 1e10,
 14949                          ;powers.c: 21: 1e20,
 14950                          ;powers.c: 22: 1e30,
 14951                          ;powers.c: 37: };
 14952  7C18  3586              	dw	0x358637bd>>16
 14953  7C1A  37BD              	dw	0x358637bd&0xffff
 14954                          ;powers.c: 7: const double _powers_[] =
 14955                          ;powers.c: 8: {
 14956                          ;powers.c: 9: 1e0,
 14957                          ;powers.c: 10: 1e1,
 14958                          ;powers.c: 11: 1e2,
 14959                          ;powers.c: 12: 1e3,
 14960                          ;powers.c: 13: 1e4,
 14961                          ;powers.c: 14: 1e5,
 14962                          ;powers.c: 15: 1e6,
 14963                          ;powers.c: 16: 1e7,
 14964                          ;powers.c: 17: 1e8,
 14965                          ;powers.c: 18: 1e9,
 14966                          ;powers.c: 19: 1e10,
 14967                          ;powers.c: 21: 1e20,
 14968                          ;powers.c: 22: 1e30,
 14969                          ;powers.c: 37: };
 14970  7C1C  33D6              	dw	0x33d6bf95>>16
 14971  7C1E  BF95              	dw	0x33d6bf95&0xffff
 14972                          ;powers.c: 7: const double _powers_[] =
 14973                          ;powers.c: 8: {
 14974                          ;powers.c: 9: 1e0,
 14975                          ;powers.c: 10: 1e1,
 14976                          ;powers.c: 11: 1e2,
 14977                          ;powers.c: 12: 1e3,
 14978                          ;powers.c: 13: 1e4,
 14979                          ;powers.c: 14: 1e5,
 14980                          ;powers.c: 15: 1e6,
 14981                          ;powers.c: 16: 1e7,
 14982                          ;powers.c: 17: 1e8,
 14983                          ;powers.c: 18: 1e9,
 14984                          ;powers.c: 19: 1e10,
 14985                          ;powers.c: 21: 1e20,
 14986                          ;powers.c: 22: 1e30,
 14987                          ;powers.c: 37: };
 14988  7C20  322B              	dw	0x322bcc77>>16
 14989  7C22  CC77              	dw	0x322bcc77&0xffff
 14990                          ;powers.c: 7: const double _powers_[] =
 14991                          ;powers.c: 8: {
 14992                          ;powers.c: 9: 1e0,
 14993                          ;powers.c: 10: 1e1,
 14994                          ;powers.c: 11: 1e2,
 14995                          ;powers.c: 12: 1e3,
 14996                          ;powers.c: 13: 1e4,
 14997                          ;powers.c: 14: 1e5,
 14998                          ;powers.c: 15: 1e6,
 14999                          ;powers.c: 16: 1e7,
 15000                          ;powers.c: 17: 1e8,
 15001                          ;powers.c: 18: 1e9,
 15002                          ;powers.c: 19: 1e10,
 15003                          ;powers.c: 21: 1e20,
 15004                          ;powers.c: 22: 1e30,
 15005                          ;powers.c: 37: };
 15006  7C24  3089              	dw	0x3089705f>>16
 15007  7C26  705F              	dw	0x3089705f&0xffff
 15008                          ;powers.c: 7: const double _powers_[] =
 15009                          ;powers.c: 8: {
 15010                          ;powers.c: 9: 1e0,
 15011                          ;powers.c: 10: 1e1,
 15012                          ;powers.c: 11: 1e2,
 15013                          ;powers.c: 12: 1e3,
 15014                          ;powers.c: 13: 1e4,
 15015                          ;powers.c: 14: 1e5,
 15016                          ;powers.c: 15: 1e6,
 15017                          ;powers.c: 16: 1e7,
 15018                          ;powers.c: 17: 1e8,
 15019                          ;powers.c: 18: 1e9,
 15020                          ;powers.c: 19: 1e10,
 15021                          ;powers.c: 21: 1e20,
 15022                          ;powers.c: 22: 1e30,
 15023                          ;powers.c: 37: };
 15024  7C28  2EDB              	dw	0x2edbe6ff>>16
 15025  7C2A  E6FF              	dw	0x2edbe6ff&0xffff
 15026                          ;powers.c: 7: const double _powers_[] =
 15027                          ;powers.c: 8: {
 15028                          ;powers.c: 9: 1e0,
 15029                          ;powers.c: 10: 1e1,
 15030                          ;powers.c: 11: 1e2,
 15031                          ;powers.c: 12: 1e3,
 15032                          ;powers.c: 13: 1e4,
 15033                          ;powers.c: 14: 1e5,
 15034                          ;powers.c: 15: 1e6,
 15035                          ;powers.c: 16: 1e7,
 15036                          ;powers.c: 17: 1e8,
 15037                          ;powers.c: 18: 1e9,
 15038                          ;powers.c: 19: 1e10,
 15039                          ;powers.c: 21: 1e20,
 15040                          ;powers.c: 22: 1e30,
 15041                          ;powers.c: 37: };
 15042  7C2C  1E3C              	dw	0x1e3ce508>>16
 15043  7C2E  E508              	dw	0x1e3ce508&0xffff
 15044                          ;powers.c: 7: const double _powers_[] =
 15045                          ;powers.c: 8: {
 15046                          ;powers.c: 9: 1e0,
 15047                          ;powers.c: 10: 1e1,
 15048                          ;powers.c: 11: 1e2,
 15049                          ;powers.c: 12: 1e3,
 15050                          ;powers.c: 13: 1e4,
 15051                          ;powers.c: 14: 1e5,
 15052                          ;powers.c: 15: 1e6,
 15053                          ;powers.c: 16: 1e7,
 15054                          ;powers.c: 17: 1e8,
 15055                          ;powers.c: 18: 1e9,
 15056                          ;powers.c: 19: 1e10,
 15057                          ;powers.c: 21: 1e20,
 15058                          ;powers.c: 22: 1e30,
 15059                          ;powers.c: 37: };
 15060  7C30  0DA2              	dw	0xda24260>>16
 15061  7C32  4260              	dw	0xda24260&0xffff
 15062  7C34                    __powers_:
 15063  7C34  3F80              	dw	0x3f800000>>16
 15064  7C36  0000              	dw	0x3f800000&0xffff
 15065  7C38  4120              	dw	0x41200000>>16
 15066  7C3A  0000              	dw	0x41200000&0xffff
 15067  7C3C  42C8              	dw	0x42c80000>>16
 15068  7C3E  0000              	dw	0x42c80000&0xffff
 15069  7C40  447A              	dw	0x447a0000>>16
 15070  7C42  0000              	dw	0x447a0000&0xffff
 15071  7C44  461C              	dw	0x461c4000>>16
 15072  7C46  4000              	dw	0x461c4000&0xffff
 15073  7C48  47C3              	dw	0x47c35000>>16
 15074  7C4A  5000              	dw	0x47c35000&0xffff
 15075  7C4C  4974              	dw	0x49742400>>16
 15076  7C4E  2400              	dw	0x49742400&0xffff
 15077  7C50  4B18              	dw	0x4b189680>>16
 15078  7C52  9680              	dw	0x4b189680&0xffff
 15079  7C54  4CBE              	dw	0x4cbebc20>>16
 15080  7C56  BC20              	dw	0x4cbebc20&0xffff
 15081  7C58  4E6E              	dw	0x4e6e6b28>>16
 15082  7C5A  6B28              	dw	0x4e6e6b28&0xffff
 15083  7C5C  5015              	dw	0x501502f9>>16
 15084  7C5E  02F9              	dw	0x501502f9&0xffff
 15085  7C60  60AD              	dw	0x60ad78ec>>16
 15086  7C62  78EC              	dw	0x60ad78ec&0xffff
 15087  7C64  7149              	dw	0x7149f2ca>>16
 15088  7C66  F2CA              	dw	0x7149f2ca&0xffff
 15089                          	line	342
 15090  7C68                    _dpowers:
 15091  7C68  0000              	dw	01h>>16
 15092  7C6A  0001              	dw	01h&0xffff
 15093  7C6C  0000              	dw	0Ah>>16
 15094  7C6E  000A              	dw	0Ah&0xffff
 15095  7C70  0000              	dw	064h>>16
 15096  7C72  0064              	dw	064h&0xffff
 15097  7C74  0000              	dw	03E8h>>16
 15098  7C76  03E8              	dw	03E8h&0xffff
 15099  7C78  0000              	dw	02710h>>16
 15100  7C7A  2710              	dw	02710h&0xffff
 15101  7C7C  0001              	dw	0186A0h>>16
 15102  7C7E  86A0              	dw	0186A0h&0xffff
 15103  7C80  000F              	dw	0F4240h>>16
 15104  7C82  4240              	dw	0F4240h&0xffff
 15105  7C84  0098              	dw	0989680h>>16
 15106  7C86  9680              	dw	0989680h&0xffff
 15107  7C88  05F5              	dw	05F5E100h>>16
 15108  7C8A  E100              	dw	05F5E100h&0xffff
 15109  7C8C  3B9A              	dw	03B9ACA00h>>16
 15110  7C8E  CA00              	dw	03B9ACA00h&0xffff
 15111                          	file	"./shtxx.c"
 15112                          	line	225
 15113  7C90                    F815:
 15114  7C90  C080              	dw	0xc0800000>>16
 15115  7C92  0000              	dw	0xc0800000&0xffff
 15116                          	line	226
 15117  7C94                    F816:
 15118  7C94  3D25              	dw	0x3d25e354>>16
 15119  7C96  E354              	dw	0x3d25e354&0xffff
 15120                          	line	228
 15121  7C98                    F818:
 15122  7C98  3C23              	dw	0x3c23d70a>>16
 15123  7C9A  D70A              	dw	0x3c23d70a&0xffff
 15124                          	line	229
 15125  7C9C                    F819:
 15126  7C9C  38A7              	dw	0x38a7c5ac>>16
 15127  7C9E  C5AC              	dw	0x38a7c5ac&0xffff
 15128                          	file	"output\__custom.c"
 15129                          	line	2
 15130  7CA0                    __flash_size:
 15131  7CA0  8000              	dw	08000h
 15132                          	line	1
 15133  7CA2                    __flash_banks:
 15134  7CA2  04                	db	(04h)
 15135                          	line	3
 15136  7CA3                    __flash_blocksize:
 15137  7CA3  40                	db	(040h)
 15138                          	file	"../common/log.c"
 15139                          	line	9
 15140  7CA4                    F64:
 15141  7CA4  0000              	dw	0x0>>16
 15142  7CA6  0000              	dw	0x0&0xffff
 15143  7CA8  3F7F              	dw	0x3f7fffc4>>16
 15144  7CAA  FFC4              	dw	0x3f7fffc4&0xffff
 15145  7CAC  BEFF              	dw	0xbeffef80>>16
 15146  7CAE  EF80              	dw	0xbeffef80&0xffff
 15147  7CB0  3EA9              	dw	0x3ea9e190>>16
 15148  7CB2  E190              	dw	0x3ea9e190&0xffff
 15149  7CB4  BE76              	dw	0xbe7682ec>>16
 15150  7CB6  82EC              	dw	0xbe7682ec&0xffff
 15151  7CB8  3E2B              	dw	0x3e2bad82>>16
 15152  7CBA  AD82              	dw	0x3e2bad82&0xffff
 15153  7CBC  BDC3              	dw	0xbdc33c0e>>16
 15154  7CBE  3C0E              	dw	0xbdc33c0e&0xffff
 15155  7CC0  3D13              	dw	0x3d13d187>>16
 15156  7CC2  D187              	dw	0x3d13d187&0xffff
 15157  7CC4  BBD3              	dw	0xbbd37841>>16
 15158  7CC6  7841              	dw	0xbbd37841&0xffff
 15159                          	file	"./shtxx.c"
 15160                          	line	227
 15161  7CC8                    F817:
 15162  7CC8  B63B              	dw	0xb63be7a2>>16
 15163  7CCA  E7A2              	dw	0xb63be7a2&0xffff
 15164                          	global	__npowers_
 15165                          	global	__powers_
 15166                          	global	_dpowers
 15167                          	global	F815
 15168                          	global	F816
 15169                          	global	F818
 15170                          	global	F819
 15171                          	global	__flash_size
 15172                          	global	__flash_banks
 15173                          	global	__flash_blocksize
 15174                          	global	F64
 15175                          	global	F817
 15176                          	global	__npowers_
 15177                          	global	__powers_
 15178                          	global	_dpowers
 15179                          	global	F815
 15180                          	global	F816
 15181                          	global	F818
 15182                          	global	F819
 15183                          	global	__flash_size
 15184                          	global	__flash_banks
 15185                          	global	__flash_blocksize
 15186                          	global	F64
 15187                          	global	F817
 15188                          	global	_oo_scratchpad
 15189                          	psect	bss2,class=RAM,space=1
 15190  0200                    _oo_scratchpad:
 15191  0200                    	blk	9
 15192                          	global	_id
 15193  0209                    _id:
 15194  0209                    	blk	8
 15195                          	global	_errno
 15196  0211                    _errno:
 15197  0211                    	blk	2
 15198                          	global	_conflict
 15199  0213                    _conflict:
 15200  0213                    	blk	1
 15201                          	global	_crc
 15202  0214                    _crc:
 15203  0214                    	blk	1
 15204                          	global	_new_conflict
 15205                          	psect	rbit0,class=RAM,bit,space=1
 15206  0000                    _new_conflict:
 15207  0000                    	blk	1
 15208                          	psect	strings,class=ROM,space=0,reloc=256
 15209                          ;			XIO=0 
 15210  7D00                    STR_5:	
 15211  7D00  4F                	db	79	;'O'
 15212  7D01  72                	db	114	;'r'
 15213  7D02  20                	db	32
 15214  7D03  65                	db	101	;'e'
 15215  7D04  6E                	db	110	;'n'
 15216  7D05  74                	db	116	;'t'
 15217  7D06  65                	db	101	;'e'
 15218  7D07  72                	db	114	;'r'
 15219  7D08  20                	db	32
 15220  7D09  27                	db	39	;'''
 15221  7D0A  76                	db	118	;'v'
 15222  7D0B  65                	db	101	;'e'
 15223  7D0C  6E                	db	110	;'n'
 15224  7D0D  74                	db	116	;'t'
 15225  7D0E  69                	db	105	;'i'
 15226  7D0F  27                	db	39	;'''
 15227  7D10  0D                	db	13
 15228  7D11  0A                	db	10
 15229  7D12  20                	db	32
 15230  7D13  66                	db	102	;'f'
 15231  7D14  6F                	db	111	;'o'
 15232  7D15  6C                	db	108	;'l'
 15233  7D16  6C                	db	108	;'l'
 15234  7D17  6F                	db	111	;'o'
 15235  7D18  77                	db	119	;'w'
 15236  7D19  65                	db	101	;'e'
 15237  7D1A  64                	db	100	;'d'
 15238  7D1B  20                	db	32
 15239  7D1C  62                	db	98	;'b'
 15240  7D1D  79                	db	121	;'y'
 15241  7D1E  20                	db	32
 15242  7D1F  27                	db	39	;'''
 15243  7D20  6C                	db	108	;'l'
 15244  7D21  6F                	db	111	;'o'
 15245  7D22  77                	db	119	;'w'
 15246  7D23  27                	db	39	;'''
 15247  7D24  2C                	db	44	;','
 15248  7D25  20                	db	32
 15249  7D26  27                	db	39	;'''
 15250  7D27  6E                	db	110	;'n'
 15251  7D28  6F                	db	111	;'o'
 15252  7D29  72                	db	114	;'r'
 15253  7D2A  6D                	db	109	;'m'
 15254  7D2B  61                	db	97	;'a'
 15255  7D2C  6C                	db	108	;'l'
 15256  7D2D  27                	db	39	;'''
 15257  7D2E  20                	db	32
 15258  7D2F  6F                	db	111	;'o'
 15259  7D30  72                	db	114	;'r'
 15260  7D31  20                	db	32
 15261  7D32  27                	db	39	;'''
 15262  7D33  68                	db	104	;'h'
 15263  7D34  69                	db	105	;'i'
 15264  7D35  67                	db	103	;'g'
 15265  7D36  68                	db	104	;'h'
 15266  7D37  27                	db	39	;'''
 15267  7D38  0D                	db	13
 15268  7D39  0A                	db	10
 15269  7D3A  20                	db	32
 15270  7D3B  74                	db	116	;'t'
 15271  7D3C  6F                	db	111	;'o'
 15272  7D3D  20                	db	32
 15273  7D3E  63                	db	99	;'c'
 15274  7D3F  6F                	db	111	;'o'
 15275  7D40  6E                	db	110	;'n'
 15276  7D41  74                	db	116	;'t'
 15277  7D42  72                	db	114	;'r'
 15278  7D43  6F                	db	111	;'o'
 15279  7D44  6C                	db	108	;'l'
 15280  7D45  20                	db	32
 15281  7D46  74                	db	116	;'t'
 15282  7D47  68                	db	104	;'h'
 15283  7D48  65                	db	101	;'e'
 15284  7D49  20                	db	32
 15285  7D4A  76                	db	118	;'v'
 15286  7D4B  65                	db	101	;'e'
 15287  7D4C  6E                	db	110	;'n'
 15288  7D4D  74                	db	116	;'t'
 15289  7D4E  69                	db	105	;'i'
 15290  7D4F  6C                	db	108	;'l'
 15291  7D50  61                	db	97	;'a'
 15292  7D51  74                	db	116	;'t'
 15293  7D52  69                	db	105	;'i'
 15294  7D53  6F                	db	111	;'o'
 15295  7D54  6E                	db	110	;'n'
 15296  7D55  20                	db	32
 15297  7D56  73                	db	115	;'s'
 15298  7D57  79                	db	121	;'y'
 15299  7D58  73                	db	115	;'s'
 15300  7D59  74                	db	116	;'t'
 15301  7D5A  65                	db	101	;'e'
 15302  7D5B  6D                	db	109	;'m'
 15303  7D5C  20                	db	32
 15304  7D5D  73                	db	115	;'s'
 15305  7D5E  70                	db	112	;'p'
 15306  7D5F  65                	db	101	;'e'
 15307  7D60  65                	db	101	;'e'
 15308  7D61  64                	db	100	;'d'
 15309  7D62  0D                	db	13
 15310  7D63  0A                	db	10
 15311  7D64  00                	db	0
 15312                          ;			XIO=0 
 15313  7D65                    STR_4:	
 15314  7D65  50                	db	80	;'P'
 15315  7D66  72                	db	114	;'r'
 15316  7D67  65                	db	101	;'e'
 15317  7D68  73                	db	115	;'s'
 15318  7D69  73                	db	115	;'s'
 15319  7D6A  20                	db	32
 15320  7D6B  27                	db	39	;'''
 15321  7D6C  3F                	db	63	;'?'
 15322  7D6D  27                	db	39	;'''
 15323  7D6E  20                	db	32
 15324  7D6F  74                	db	116	;'t'
 15325  7D70  6F                	db	111	;'o'
 15326  7D71  20                	db	32
 15327  7D72  61                	db	97	;'a'
 15328  7D73  63                	db	99	;'c'
 15329  7D74  71                	db	113	;'q'
 15330  7D75  75                	db	117	;'u'
 15331  7D76  69                	db	105	;'i'
 15332  7D77  72                	db	114	;'r'
 15333  7D78  65                	db	101	;'e'
 15334  7D79  20                	db	32
 15335  7D7A  73                	db	115	;'s'
 15336  7D7B  65                	db	101	;'e'
 15337  7D7C  6E                	db	110	;'n'
 15338  7D7D  73                	db	115	;'s'
 15339  7D7E  6F                	db	111	;'o'
 15340  7D7F  72                	db	114	;'r'
 15341  7D80  20                	db	32
 15342  7D81  76                	db	118	;'v'
 15343  7D82  61                	db	97	;'a'
 15344  7D83  6C                	db	108	;'l'
 15345  7D84  75                	db	117	;'u'
 15346  7D85  65                	db	101	;'e'
 15347  7D86  73                	db	115	;'s'
 15348  7D87  20                	db	32
 15349  7D88  61                	db	97	;'a'
 15350  7D89  6E                	db	110	;'n'
 15351  7D8A  64                	db	100	;'d'
 15352  7D8B  20                	db	32
 15353  7D8C  74                	db	116	;'t'
 15354  7D8D  6F                	db	111	;'o'
 15355  7D8E  20                	db	32
 15356  7D8F  67                	db	103	;'g'
 15357  7D90  65                	db	101	;'e'
 15358  7D91  6E                	db	110	;'n'
 15359  7D92  65                	db	101	;'e'
 15360  7D93  72                	db	114	;'r'
 15361  7D94  61                	db	97	;'a'
 15362  7D95  74                	db	116	;'t'
 15363  7D96  65                	db	101	;'e'
 15364  7D97  20                	db	32
 15365  7D98  61                	db	97	;'a'
 15366  7D99  20                	db	32
 15367  7D9A  72                	db	114	;'r'
 15368  7D9B  65                	db	101	;'e'
 15369  7D9C  70                	db	112	;'p'
 15370  7D9D  6F                	db	111	;'o'
 15371  7D9E  72                	db	114	;'r'
 15372  7D9F  74                	db	116	;'t'
 15373  7DA0  0D                	db	13
 15374  7DA1  0A                	db	10
 15375  7DA2  00                	db	0
 15376                          ;			XIO=0 
 15377  7DA3                    STR_11:	
 15378  7DA3  45                	db	69	;'E'
 15379  7DA4  6E                	db	110	;'n'
 15380  7DA5  74                	db	116	;'t'
 15381  7DA6  65                	db	101	;'e'
 15382  7DA7  72                	db	114	;'r'
 15383  7DA8  20                	db	32
 15384  7DA9  27                	db	39	;'''
 15385  7DAA  76                	db	118	;'v'
 15386  7DAB  65                	db	101	;'e'
 15387  7DAC  6E                	db	110	;'n'
 15388  7DAD  74                	db	116	;'t'
 15389  7DAE  69                	db	105	;'i'
 15390  7DAF  27                	db	39	;'''
 15391  7DB0  20                	db	32
 15392  7DB1  66                	db	102	;'f'
 15393  7DB2  6F                	db	111	;'o'
 15394  7DB3  6C                	db	108	;'l'
 15395  7DB4  6C                	db	108	;'l'
 15396  7DB5  6F                	db	111	;'o'
 15397  7DB6  77                	db	119	;'w'
 15398  7DB7  65                	db	101	;'e'
 15399  7DB8  64                	db	100	;'d'
 15400  7DB9  20                	db	32
 15401  7DBA  62                	db	98	;'b'
 15402  7DBB  79                	db	121	;'y'
 15403  7DBC  20                	db	32
 15404  7DBD  27                	db	39	;'''
 15405  7DBE  6C                	db	108	;'l'
 15406  7DBF  6F                	db	111	;'o'
 15407  7DC0  77                	db	119	;'w'
 15408  7DC1  27                	db	39	;'''
 15409  7DC2  2C                	db	44	;','
 15410  7DC3  20                	db	32
 15411  7DC4  27                	db	39	;'''
 15412  7DC5  6E                	db	110	;'n'
 15413  7DC6  6F                	db	111	;'o'
 15414  7DC7  72                	db	114	;'r'
 15415  7DC8  6D                	db	109	;'m'
 15416  7DC9  61                	db	97	;'a'
 15417  7DCA  6C                	db	108	;'l'
 15418  7DCB  27                	db	39	;'''
 15419  7DCC  20                	db	32
 15420  7DCD  6F                	db	111	;'o'
 15421  7DCE  72                	db	114	;'r'
 15422  7DCF  20                	db	32
 15423  7DD0  27                	db	39	;'''
 15424  7DD1  68                	db	104	;'h'
 15425  7DD2  69                	db	105	;'i'
 15426  7DD3  67                	db	103	;'g'
 15427  7DD4  68                	db	104	;'h'
 15428  7DD5  27                	db	39	;'''
 15429  7DD6  0D                	db	13
 15430  7DD7  0A                	db	10
 15431  7DD8  00                	db	0
 15432                          ;			XIO=0 
 15433  7DD9                    STR_15:	
 15434  7DD9  4E                	db	78	;'N'
 15435  7DDA  6F                	db	111	;'o'
 15436  7DDB  20                	db	32
 15437  7DDC  4F                	db	79	;'O'
 15438  7DDD  6E                	db	110	;'n'
 15439  7DDE  65                	db	101	;'e'
 15440  7DDF  57                	db	87	;'W'
 15441  7DE0  69                	db	105	;'i'
 15442  7DE1  72                	db	114	;'r'
 15443  7DE2  65                	db	101	;'e'
 15444  7DE3  20                	db	32
 15445  7DE4  64                	db	100	;'d'
 15446  7DE5  65                	db	101	;'e'
 15447  7DE6  76                	db	118	;'v'
 15448  7DE7  69                	db	105	;'i'
 15449  7DE8  63                	db	99	;'c'
 15450  7DE9  65                	db	101	;'e'
 15451  7DEA  73                	db	115	;'s'
 15452  7DEB  20                	db	32
 15453  7DEC  66                	db	102	;'f'
 15454  7DED  6F                	db	111	;'o'
 15455  7DEE  75                	db	117	;'u'
 15456  7DEF  6E                	db	110	;'n'
 15457  7DF0  64                	db	100	;'d'
 15458  7DF1  20                	db	32
 15459  7DF2  6F                	db	111	;'o'
 15460  7DF3  6E                	db	110	;'n'
 15461  7DF4  20                	db	32
 15462  7DF5  74                	db	116	;'t'
 15463  7DF6  68                	db	104	;'h'
 15464  7DF7  65                	db	101	;'e'
 15465  7DF8  20                	db	32
 15466  7DF9  62                	db	98	;'b'
 15467  7DFA  75                	db	117	;'u'
 15468  7DFB  73                	db	115	;'s'
 15469  7DFC  21                	db	33	;'!'
 15470  7DFD  00                	db	0
 15471  7DFE  00                	db	(0)
 15472  7DFF  00                	db	(0)
 15473                          ;			XIO=0 
 15474  7E00                    STR_25:	
 15475  7E00  53                	db	83	;'S'
 15476  7E01  48                	db	72	;'H'
 15477  7E02  54                	db	84	;'T'
 15478  7E03  78                	db	120	;'x'
 15479  7E04  78                	db	120	;'x'
 15480  7E05  20                	db	32
 15481  7E06  54                	db	84	;'T'
 15482  7E07  3A                	db	58	;':'
 15483  7E08  25                	db	37	;'%'
 15484  7E09  35                	db	53	;'5'
 15485  7E0A  2E                	db	46	;'.'
 15486  7E0B  31                	db	49	;'1'
 15487  7E0C  66                	db	102	;'f'
 15488  7E0D  20                	db	32
 15489  7E0E  43                	db	67	;'C'
 15490  7E0F  20                	db	32
 15491  7E10  52                	db	82	;'R'
 15492  7E11  48                	db	72	;'H'
 15493  7E12  3A                	db	58	;':'
 15494  7E13  25                	db	37	;'%'
 15495  7E14  35                	db	53	;'5'
 15496  7E15  2E                	db	46	;'.'
 15497  7E16  31                	db	49	;'1'
 15498  7E17  66                	db	102	;'f'
 15499  7E18  25                	db	37	;'%'
 15500  7E19  25                	db	37	;'%'
 15501  7E1A  20                	db	32
 15502  7E1B  44                	db	68	;'D'
 15503  7E1C  65                	db	101	;'e'
 15504  7E1D  77                	db	119	;'w'
 15505  7E1E  50                	db	80	;'P'
 15506  7E1F  74                	db	116	;'t'
 15507  7E20  3A                	db	58	;':'
 15508  7E21  25                	db	37	;'%'
 15509  7E22  35                	db	53	;'5'
 15510  7E23  2E                	db	46	;'.'
 15511  7E24  31                	db	49	;'1'
 15512  7E25  66                	db	102	;'f'
 15513  7E26  20                	db	32
 15514  7E27  43                	db	67	;'C'
 15515  7E28  0D                	db	13
 15516  7E29  0A                	db	10
 15517  7E2A  00                	db	0
 15518                          ;			XIO=0 
 15519  7E2B                    STR_17:	
 15520  7E2B  50                	db	80	;'P'
 15521  7E2C  72                	db	114	;'r'
 15522  7E2D  6F                	db	111	;'o'
 15523  7E2E  62                	db	98	;'b'
 15524  7E2F  6C                	db	108	;'l'
 15525  7E30  65                	db	101	;'e'
 15526  7E31  6D                	db	109	;'m'
 15527  7E32  20                	db	32
 15528  7E33  64                	db	100	;'d'
 15529  7E34  65                	db	101	;'e'
 15530  7E35  74                	db	116	;'t'
 15531  7E36  65                	db	101	;'e'
 15532  7E37  63                	db	99	;'c'
 15533  7E38  74                	db	116	;'t'
 15534  7E39  69                	db	105	;'i'
 15535  7E3A  6E                	db	110	;'n'
 15536  7E3B  67                	db	103	;'g'
 15537  7E3C  20                	db	32
 15538  7E3D  66                	db	102	;'f'
 15539  7E3E  69                	db	105	;'i'
 15540  7E3F  72                	db	114	;'r'
 15541  7E40  73                	db	115	;'s'
 15542  7E41  74                	db	116	;'t'
 15543  7E42  20                	db	32
 15544  7E43  64                	db	100	;'d'
 15545  7E44  65                	db	101	;'e'
 15546  7E45  76                	db	118	;'v'
 15547  7E46  69                	db	105	;'i'
 15548  7E47  63                	db	99	;'c'
 15549  7E48  65                	db	101	;'e'
 15550  7E49  20                	db	32
 15551  7E4A  6F                	db	111	;'o'
 15552  7E4B  6E                	db	110	;'n'
 15553  7E4C  20                	db	32
 15554  7E4D  74                	db	116	;'t'
 15555  7E4E  68                	db	104	;'h'
 15556  7E4F  65                	db	101	;'e'
 15557  7E50  20                	db	32
 15558  7E51  62                	db	98	;'b'
 15559  7E52  75                	db	117	;'u'
 15560  7E53  73                	db	115	;'s'
 15561  7E54  00                	db	0
 15562                          ;			XIO=0 
 15563  7E55                    STR_16:	
 15564  7E55  54                	db	84	;'T'
 15565  7E56  69                	db	105	;'i'
 15566  7E57  6D                	db	109	;'m'
 15567  7E58  65                	db	101	;'e'
 15568  7E59  64                	db	100	;'d'
 15569  7E5A  20                	db	32
 15570  7E5B  6F                	db	111	;'o'
 15571  7E5C  75                	db	117	;'u'
 15572  7E5D  74                	db	116	;'t'
 15573  7E5E  20                	db	32
 15574  7E5F  77                	db	119	;'w'
 15575  7E60  68                	db	104	;'h'
 15576  7E61  69                	db	105	;'i'
 15577  7E62  6C                	db	108	;'l'
 15578  7E63  65                	db	101	;'e'
 15579  7E64  20                	db	32
 15580  7E65  77                	db	119	;'w'
 15581  7E66  61                	db	97	;'a'
 15582  7E67  69                	db	105	;'i'
 15583  7E68  74                	db	116	;'t'
 15584  7E69  69                	db	105	;'i'
 15585  7E6A  6E                	db	110	;'n'
 15586  7E6B  67                	db	103	;'g'
 15587  7E6C  20                	db	32
 15588  7E6D  66                	db	102	;'f'
 15589  7E6E  6F                	db	111	;'o'
 15590  7E6F  72                	db	114	;'r'
 15591  7E70  20                	db	32
 15592  7E71  63                	db	99	;'c'
 15593  7E72  6F                	db	111	;'o'
 15594  7E73  6E                	db	110	;'n'
 15595  7E74  76                	db	118	;'v'
 15596  7E75  65                	db	101	;'e'
 15597  7E76  72                	db	114	;'r'
 15598  7E77  73                	db	115	;'s'
 15599  7E78  69                	db	105	;'i'
 15600  7E79  6F                	db	111	;'o'
 15601  7E7A  6E                	db	110	;'n'
 15602  7E7B  21                	db	33	;'!'
 15603  7E7C  00                	db	0
 15604                          ;			XIO=0 
 15605  7E7D                    STR_10:	
 15606  7E7D  20                	db	32
 15607  7E7E  21                	db	33	;'!'
 15608  7E7F  20                	db	32
 15609  7E80  55                	db	85	;'U'
 15610  7E81  6E                	db	110	;'n'
 15611  7E82  6B                	db	107	;'k'
 15612  7E83  6E                	db	110	;'n'
 15613  7E84  6F                	db	111	;'o'
 15614  7E85  77                	db	119	;'w'
 15615  7E86  6E                	db	110	;'n'
 15616  7E87  20                	db	32
 15617  7E88  70                	db	112	;'p'
 15618  7E89  61                	db	97	;'a'
 15619  7E8A  72                	db	114	;'r'
 15620  7E8B  61                	db	97	;'a'
 15621  7E8C  6D                	db	109	;'m'
 15622  7E8D  65                	db	101	;'e'
 15623  7E8E  74                	db	116	;'t'
 15624  7E8F  65                	db	101	;'e'
 15625  7E90  72                	db	114	;'r'
 15626  7E91  0D                	db	13
 15627  7E92  0A                	db	10
 15628  7E93  00                	db	0
 15629                          ;			XIO=0 
 15630  7E94                    STR_3:	
 15631  7E94  4C                	db	76	;'L'
 15632  7E95  69                	db	105	;'i'
 15633  7E96  65                	db	101	;'e'
 15634  7E97  76                	db	118	;'v'
 15635  7E98  65                	db	101	;'e'
 15636  7E99  6E                	db	110	;'n'
 15637  7E9A  20                	db	32
 15638  7E9B  48                	db	72	;'H'
 15639  7E9C  6F                	db	111	;'o'
 15640  7E9D  6C                	db	108	;'l'
 15641  7E9E  6C                	db	108	;'l'
 15642  7E9F  65                	db	101	;'e'
 15643  7EA0  76                	db	118	;'v'
 15644  7EA1  6F                	db	111	;'o'
 15645  7EA2  65                	db	101	;'e'
 15646  7EA3  74                	db	116	;'t'
 15647  7EA4  2C                	db	44	;','
 15648  7EA5  20                	db	32
 15649  7EA6  32                	db	50	;'2'
 15650  7EA7  30                	db	48	;'0'
 15651  7EA8  30                	db	48	;'0'
 15652  7EA9  39                	db	57	;'9'
 15653  7EAA  00                	db	0
 15654                          ;			XIO=0 
 15655  7EAB                    STR_6:	
 15656  7EAB  2D                	db	45	;'-'
 15657  7EAC  3E                	db	62	;'>'
 15658  7EAD  20                	db	32
 15659  7EAE  4F                	db	79	;'O'
 15660  7EAF  6E                	db	110	;'n'
 15661  7EB0  65                	db	101	;'e'
 15662  7EB1  57                	db	87	;'W'
 15663  7EB2  69                	db	105	;'i'
 15664  7EB3  72                	db	114	;'r'
 15665  7EB4  65                	db	101	;'e'
 15666  7EB5  20                	db	32
 15667  7EB6  64                	db	100	;'d'
 15668  7EB7  65                	db	101	;'e'
 15669  7EB8  76                	db	118	;'v'
 15670  7EB9  69                	db	105	;'i'
 15671  7EBA  63                	db	99	;'c'
 15672  7EBB  65                	db	101	;'e'
 15673  7EBC  73                	db	115	;'s'
 15674  7EBD  0D                	db	13
 15675  7EBE  0A                	db	10
 15676  7EBF  00                	db	0
 15677                          ;			XIO=0 
 15678  7EC0                    STR_7:	
 15679  7EC0  2D                	db	45	;'-'
 15680  7EC1  3E                	db	62	;'>'
 15681  7EC2  20                	db	32
 15682  7EC3  53                	db	83	;'S'
 15683  7EC4  48                	db	72	;'H'
 15684  7EC5  54                	db	84	;'T'
 15685  7EC6  78                	db	120	;'x'
 15686  7EC7  78                	db	120	;'x'
 15687  7EC8  20                	db	32
 15688  7EC9  73                	db	115	;'s'
 15689  7ECA  65                	db	101	;'e'
 15690  7ECB  6E                	db	110	;'n'
 15691  7ECC  73                	db	115	;'s'
 15692  7ECD  6F                	db	111	;'o'
 15693  7ECE  72                	db	114	;'r'
 15694  7ECF  73                	db	115	;'s'
 15695  7ED0  0D                	db	13
 15696  7ED1  0A                	db	10
 15697  7ED2  00                	db	0
 15698                          ;			XIO=0 
 15699  7ED3                    STR_1:	
 15700  7ED3  53                	db	83	;'S'
 15701  7ED4  65                	db	101	;'e'
 15702  7ED5  6E                	db	110	;'n'
 15703  7ED6  73                	db	115	;'s'
 15704  7ED7  6F                	db	111	;'o'
 15705  7ED8  72                	db	114	;'r'
 15706  7ED9  20                	db	32
 15707  7EDA  67                	db	103	;'g'
 15708  7EDB  61                	db	97	;'a'
 15709  7EDC  74                	db	116	;'t'
 15710  7EDD  65                	db	101	;'e'
 15711  7EDE  77                	db	119	;'w'
 15712  7EDF  61                	db	97	;'a'
 15713  7EE0  79                	db	121	;'y'
 15714  7EE1  20                	db	32
 15715  7EE2  76                	db	118	;'v'
 15716  7EE3  2E                	db	46	;'.'
 15717  7EE4  00                	db	0
 15718                          ;			XIO=0 
 15719  7EE5                    STR_21:	
 15720  7EE5  74                	db	116	;'t'
 15721  7EE6  6F                	db	111	;'o'
 15722  7EE7  20                	db	32
 15723  7EE8  6D                	db	109	;'m'
 15724  7EE9  6F                	db	111	;'o'
 15725  7EEA  64                	db	100	;'d'
 15726  7EEB  65                	db	101	;'e'
 15727  7EEC  20                	db	32
 15728  7EED  4E                	db	78	;'N'
 15729  7EEE  4F                	db	79	;'O'
 15730  7EEF  52                	db	82	;'R'
 15731  7EF0  4D                	db	77	;'M'
 15732  7EF1  41                	db	65	;'A'
 15733  7EF2  4C                	db	76	;'L'
 15734  7EF3  0D                	db	13
 15735  7EF4  0A                	db	10
 15736  7EF5  00                	db	0
 15737                          ;			XIO=0 
 15738  7EF6                    STR_8:	
 15739  7EF6  2D                	db	45	;'-'
 15740  7EF7  3E                	db	62	;'>'
 15741  7EF8  20                	db	32
 15742  7EF9  45                	db	69	;'E'
 15743  7EFA  4F                	db	79	;'O'
 15744  7EFB  54                	db	84	;'T'
 15745  7EFC  0D                	db	13
 15746  7EFD  0A                	db	10
 15747  7EFE  00                	db	0
 15748  7EFF  00                	db	(0)
 15749                          ;			XIO=0 
 15750  7F00                    STR_20:	
 15751  7F00  53                	db	83	;'S'
 15752  7F01  77                	db	119	;'w'
 15753  7F02  69                	db	105	;'i'
 15754  7F03  74                	db	116	;'t'
 15755  7F04  63                	db	99	;'c'
 15756  7F05  68                	db	104	;'h'
 15757  7F06  69                	db	105	;'i'
 15758  7F07  6E                	db	110	;'n'
 15759  7F08  67                	db	103	;'g'
 15760  7F09  20                	db	32
 15761  7F0A  4F                	db	79	;'O'
 15762  7F0B  72                	db	114	;'r'
 15763  7F0C  63                	db	99	;'c'
 15764  7F0D  6F                	db	111	;'o'
 15765  7F0E  6E                	db	110	;'n'
 15766  7F0F  20                	db	32
 15767  7F10  00                	db	0
 15768                          ;			XIO=0 
 15769  7F11                    STR_23:	
 15770  7F11  74                	db	116	;'t'
 15771  7F12  6F                	db	111	;'o'
 15772  7F13  20                	db	32
 15773  7F14  6D                	db	109	;'m'
 15774  7F15  6F                	db	111	;'o'
 15775  7F16  64                	db	100	;'d'
 15776  7F17  65                	db	101	;'e'
 15777  7F18  20                	db	32
 15778  7F19  48                	db	72	;'H'
 15779  7F1A  49                	db	73	;'I'
 15780  7F1B  47                	db	71	;'G'
 15781  7F1C  48                	db	72	;'H'
 15782  7F1D  0D                	db	13
 15783  7F1E  0A                	db	10
 15784  7F1F  00                	db	0
 15785                          ;			XIO=0 
 15786  7F20                    STR_24:	
 15787  7F20  53                	db	83	;'S'
 15788  7F21  48                	db	72	;'H'
 15789  7F22  54                	db	84	;'T'
 15790  7F23  78                	db	120	;'x'
 15791  7F24  78                	db	120	;'x'
 15792  7F25  20                	db	32
 15793  7F26  65                	db	101	;'e'
 15794  7F27  72                	db	114	;'r'
 15795  7F28  72                	db	114	;'r'
 15796  7F29  6F                	db	111	;'o'
 15797  7F2A  72                	db	114	;'r'
 15798  7F2B  3A                	db	58	;':'
 15799  7F2C  20                	db	32
 15800  7F2D  00                	db	0
 15801                          ;			XIO=0 
 15802  7F2E                    STR_19:	
 15803  7F2E  74                	db	116	;'t'
 15804  7F2F  6F                	db	111	;'o'
 15805  7F30  20                	db	32
 15806  7F31  6D                	db	109	;'m'
 15807  7F32  6F                	db	111	;'o'
 15808  7F33  64                	db	100	;'d'
 15809  7F34  65                	db	101	;'e'
 15810  7F35  20                	db	32
 15811  7F36  4C                	db	76	;'L'
 15812  7F37  4F                	db	79	;'O'
 15813  7F38  57                	db	87	;'W'
 15814  7F39  0D                	db	13
 15815  7F3A  0A                	db	10
 15816  7F3B  00                	db	0
 15817                          ;			XIO=0 
 15818  7F3C                    STR_12:	
 15819  7F3C  4F                	db	79	;'O'
 15820  7F3D  6E                	db	110	;'n'
 15821  7F3E  65                	db	101	;'e'
 15822  7F3F  57                	db	87	;'W'
 15823  7F40  69                	db	105	;'i'
 15824  7F41  72                	db	114	;'r'
 15825  7F42  65                	db	101	;'e'
 15826  7F43  20                	db	32
 15827  7F44  00                	db	0
 15828                          ;			XIO=0 
 15829  7F45                    STR_9:	
 15830  7F45  76                	db	118	;'v'
 15831  7F46  65                	db	101	;'e'
 15832  7F47  6E                	db	110	;'n'
 15833  7F48  74                	db	116	;'t'
 15834  7F49  69                	db	105	;'i'
 15835  7F4A  00                	db	0
 15836                          ;			XIO=0 
 15837  7F4B                    STR_2:	
 15838  7F4B  31                	db	49	;'1'
 15839  7F4C  2E                	db	46	;'.'
 15840  7F4D  30                	db	48	;'0'
 15841  7F4E  2E                	db	46	;'.'
 15842  7F4F  32                	db	50	;'2'
 15843  7F50  00                	db	0
 15844                          ;			XIO=0 
 15845  7F51                    STR_14:	
 15846  7F51  20                	db	32
 15847  7F52  2D                	db	45	;'-'
 15848  7F53  20                	db	32
 15849  7F54  00                	db	0
 15850  7F00                    STR_22	equ	STR_20+0
 15851  7F00                    STR_18	equ	STR_20+0
 15852  7F51                    STR_13	equ	STR_14+0
 15853                          	file "(null)"
 15854                          	line	1
 15855                          	psect	text
 15856                          	global	___end_of_c_program_code,___start_of_c_program_code
 15857  7A27                    ___end_of_c_program_code:


HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:50 2009

           ?_oo_crc_shuffle_byte 0035        __end_of_s_connectionreset 4A2B                 ___awdiv@dividend 005E  
                              l3 7BAC                                l4 57CC                                l5 3FEE  
                              l6 4047                                l8 7B82                                l9 7A31  
          ??_oo_crc_shuffle_byte 0036                               F64 7CA4                      _oo_busreset 5831  
         _oo_wait_for_completion 41FA                               l11 7B82                               l20 7B1B  
                             l12 7B79                               l21 7B23                               l13 7AC0  
                             l30 582E                               l14 7B79                               l22 7B2B  
                             l31 5817                               l23 7B71                               l15 7B74  
                             l40 69C7                               l32 57F9                               l24 7B79  
                             l16 7B5F                               l41 69A9                               l25 5851  
                             l33 5822                               l17 7B5C                               l50 717A  
                             l42 69C7                               l18 7B40                               l27 583D  
                             l19 7B13                               l28 69F1                               l36 69DD  
                             l44 422F                               l52 41D5                               l60 3DBB  
                             l29 6A25                               l37 69D8                               l45 4221  
                             l53 415E                               l61 3DE2                               l70 4946  
                             l46 4206                               l54 41B6                               l62 3DF2  
                             l71 4867                               l55 42CE                               l47 422A  
                             l39 41F7                               l80 4921                               l72 4889  
                             l56 4256                               l49 6E91                               l81 4943  
                             l57 427F                               l65 3E4F                               l90 5928  
                             l74 48A5                               l66 3E0B                               l91 5979  
                             l75 48C7                               l83 40FB                               l59 3E4F  
                             l68 4B64                               l84 40BF                               l69 5A6B  
                             l93 5940                               l77 48E3                               l85 4083  
                             l94 5948                               l78 4905                               l95 5A51  
                             l96 59D4                               l88 57D7                               l97 5A0E  
                             l89 59A9                               l99 59EE                 calc_sth11@rh_lin 0025  
                             _id 0209              __end_of_oo_busreset 5840                        l400002280 7070  
                      l400002281 7072                        l400002265 6985                        l400002266 6987  
                     _oo_rx_byte 69F4                              F815 7C90                              F816 7C94  
                            F817 7CC8                              F818 7C98                              F819 7C9C  
                   calc_sth11@rh 001D                       _Ticker_ISR 7B88                       _oo_tx_byte 69E0  
             __end_of_oo_rx_byte 6A28                   calc_dewpoint@h 0015                   calc_dewpoint@t 0019  
                       ___flpack 77F8               __end_of_Ticker_ISR 7BC9                              l100 5A24  
                            l101 5A2C                              l102 590F                              l110 4B59  
                            l111 4A9A                              l103 4A28                              l200 541E  
                            l120 4AF3                              l112 4A8B                              l104 49F3  
                            l201 5547                              l113 4A40                              l105 4A23  
                            l121 4634                              l210 5633                              l202 5488  
                            l114 4A64                              l122 45C2                              l211 5672  
                            l203 5558                              l115 4A88                              l123 4603  
                            l140 6421                              l220 575F                              l212 569D  
                            l204 557A                              l116 4AB6                              l124 4848  
                            l221 698A                              l141 6348                              l213 56AA  
                            l205 555B                              l117 4ADB                              l125 3FC2  
                            l222 6D2A                              l142 63FB                              l214 56EB  
                            l206 558B                              l150 575F                              l126 3EDF  
                            l223 6B8D                              l135 61E8                              l215 56F8  
                            l207 55CD                              l151 4B7B                              l119 4AB9  
                            l127 3FC2                              l232 71FE                              l224 6BCF  
                            l144 656B                              l136 60BF                              l400 5B77  
                            l152 5778                              l216 5734                              l208 5604  
                            l160 4C51                              l233 71C5                              l129 6E83  
                            l145 661E                              l137 6198                              l401 5BD3  
                            l225 58B0                              l209 5633                              l161 4CB0  
                            l153 4B97                              l410 7334                              l402 7413  
                            l250 5D7F                              l218 5734                              l170 4D54  
                            l162 4CCC                              l154 4C2B                              l226 3D92  
                            l411 7386                              l403 7287                              l139 6644  
                            l251 5DAD                              l219 5709                              l171 4DE3  
                            l163 4D0A                              l227 3D47                              l412 73FB  
                            l180 50B6                              l172 4F88                              l164 4CE9  
                            l156 4C2B                              l228 3D44                              l405 732B  
                            l413 7075                              l149 577B                              l181 51C4  
                            l173 4EB3                              l165 4CCF                              l157 4BCC  
                            l229 3D80                              l406 729C                              l414 6FDA  
             __end_of_oo_tx_byte 69F4                              l190 52D6                              l182 51DB  
                            l174 4F4B                              l166 5778                              l158 4CB3  
                            l351 77F5                              l407 72EE                              l415 7034  
                            l247 5DEE                              l191 5301                              l183 5224  
                            l175 4F88                              l167 4CD2                              l159 4C9D  
                            l360 78B9                              l352 775E                              l192 5376  
                            l176 4F88                              l168 4CE6                              l361 7943  
                            l353 77D0                              l409 73C5                              l601 5F4D  
                            l249 5DE2                              l193 5304                              l185 5213  
                            l177 4FEF                              l169 558E                              l362 7970  
                            l354 7A24                              l370 752F                              l442 6E69  
                            l450 6E40                              l522 6B39                              l530 6B10  
                            l610 6699                              l602 5F06                              l194 5387  
                            l186 5275                              l178 5134                              l363 7946  
                            l355 7844                              l451 6DDF                              l443 6D58  
                            l531 6ACC                              l523 6A53                              l611 66D6  
                            l195 53A9                              l187 52A3                              l179 50A5  
                            l364 79B3                              l356 7873                              l380 75C6  
                            l372 752C                              l452 6E1C                              l444 6D81  
                            l532 6AEC                              l524 6A76                              l620 679A  
                            l460 5ECB                              l196 538A                              l188 52C5  
                            l365 79DB                              l357 7847                              l453 6E5D  
                            l445 6E40                              l533 6B2D                              l525 6B10  
                            l621 6816                              l613 6768                              l461 5E77  
                            l197 53BA                              l189 52A6                              l358 78B6  
                            l390 7626                              l382 75C6                              l374 74FC  
                            l366 76D9                              l446 6DC2                              l526 6AAF  
                            l622 67E8                              l614 66F1                              l454 5ECE  
                            l462 5EA3                              l198 53D7                              l359 7900  
                            l391 76A0                              l375 74C5                              l367 7419  
                            l447 6DA6                              l527 6A93                              l471 68CC  
                            l623 680B                              l615 6742                              l455 5ECB  
                            l199 53E9                              l392 76D6                              l384 7596  
                            l376 7521                              l368 745D                              l448 6DDF  
                            l528 6ACC                              l472 68A4                              l624 67EB  
                            l616 67C5                              l456 5E3A                              l536 49BF  
                            l465 7711                              l385 755F                              l377 74FF  
                            l369 76A0                              l473 6920                              l625 6816  
                            l609 682E                              l457 5E1A                              l393 5D6F  
                            l537 4972                              l466 770E                              l386 75BB  
                            l378 752C                              l474 68F2                              l458 5E77  
                            l490 5CFD                              l394 5BEB                              l387 7599  
                            l379 75C6                              l475 6915                              l467 6967  
                            l619 67C2                              l491 5C47                              l395 5AC7  
                            l388 75C6                              l476 68F5                              l468 68CF  
                            l492 5C27                              l396 5B0B                              l389 75F6  
                            l485 6F7D                              l477 6920                              l493 5C84  
                            l486 6EBD                              l478 694F                              l398 5B9D  
                            l487 6F0F                              l495 5CFD                              l399 5B26  
                            l488 6F65                              l496 5C84                              l673 7157  
                            l489 5D15                              l497 5CD5                              l674 712E  
                            l675 70A9                              l676 713F                         ___awtofl 6E94  
                 _OneWire_GetROM 3A77                     ___fladd@exp1 0055                     ___fladd@exp2 0056  
                      l600002253 5065                        ?___flpack 0071                        l600002267 6980  
                      l600002275 3D80                        l600002276 7826                        l600002277 74FC  
                      l600002278 7596                     ___fladd@cntr 0058                        l600002279 726F  
                       ___lltofl 5ED1                oo_print_data@data 0015                calc_sth11@rh_true 0019  
                            _crc 0214                oo_print_data@cntr 0022                _OneWire_WriteByte 3A27  
                      ?___awtofl 0040                              _log 6B3C                         ___lwtofl 4949  
                   ?_s_read_byte 0022                        printf@exp 0031                   s_read_byte@ack 0022  
                     _orcon_high 404A                   _OneWire_SetROM 3AA1                        ?___lltofl 0041  
                 s_read_byte@val 0024                  __div_to_l_@exp1 004D                  __div_to_l_@cntr 004E  
             __end_of_orcon_high 4086                        ?___lwtofl 0015                       ??___flpack 0074  
                __div_to_l_@quot 0049                    calc_sth11@t_C 0021                       ??___awtofl 0044  
                 _OneWire_fReset 39F1                      ?_oo_tx_byte 0034                oo_read_device@crc 002F  
                     ??___lltofl 0045              _Counter8_ltrx_Start 36F4                       ??___lwtofl 0019  
                        ??_frexp 0046                          ??_scale 0045                             ?_log 0039  
                 ?_calc_dewpoint 0015                             STR_1 7ED3                             STR_2 7F4B  
                           STR_3 7E94                             STR_4 7D65                             STR_5 7D00  
                           STR_6 7EAB                             STR_7 7EC0                             STR_8 7EF6  
                           STR_9 7F45                             u2003 739A                             u2014 738D  
                           u2023 73B1                             u2103 6DED                             u2034 73A4  
                           u2114 6DE4                             u2043 6FBB                             u2123 6DFD  
                           u1403 4D45                             u2204 5EAA                             u2213 76F7  
                           u2053 7015                             u2133 6E2C                             u1333 596B  
                           u1413 4E0B                             u2063 6D98                             u2223 68B8  
                           u2303 5C82                             u1503 559D                             u1423 4E31  
                           u2144 6E23                             u1344 5964                             u2073 6DB4  
                           u2153 5E0C                             u2313 5C96                             u1353 5A02  
                           u1513 55BA                             u2234 68AB                             u1434 4E29  
                           u2403 6AFC                             u2243 6907                             u2163 5E2C  
                           u1603 5D9A                             u1523 5623                             u1443 501B  
                           u2084 6DAB                             u2324 5C89                             u1364 59FD  
                           u2093 6DDD                             u1613 5DBB                             u2333 5CE9  
                           u1533 5642                             u1453 5052                             u1373 4AB1  
                           u2414 6AF3                             u2254 68FA                             u2174 5E1F  
                           u1703 78B4                             u2263 6EA3                             u2503 67FD  
                           u2183 5E75                             u1543 565F                             u1463 5262  
                           u1383 4AD9                             u2423 4958                             u1624 5DB2  
                           u2344 5CDC                             u1713 78FD                             u2353 6A85  
                           u2433 5EEC                             u2193 5EB7                             u1633 5DCE  
                           u2273 5C19                             u1553 5707                             u1473 5290  
                           u1393 4D25                             u2514 67F0                             u2523 713D  
                           u2363 6AA1                             u2443 6703                             u2283 5C39  
                           u1563 5732                             u1483 52F1                             u1804 7A03  
                           u1724 78F5                             u1644 5DC5                             u1733 7941  
                           u1813 74D7                             u1653 5DE0                             u1573 574F  
                           u1493 5589                             u2533 4153                             u2374 6A98  
                           u2454 66F6                             u2294 5C2C                             u1743 796D  
                           u1663 77C3                             u1583 6BA8                             u2383 6ACA  
                           u2463 6754                             u1903 5B38                             u2543 41CA  
                           u1824 74CA                             u1673 7824                             u1833 7513  
                           u1593 7198                             u2393 6AD9                             u2553 3E24  
                           u1754 7965                             u2474 6747                             u1914 5B2B  
                           u1763 79B1                             u1683 7870                             u2483 67AE  
                           u1923 5B89                             u2563 3E35                             u1844 7506  
                           u1773 79E9                             u1853 7571                             u2573 7A65  
                           u1694 7868                             u2494 67A1                             u1934 5B7C  
                           u1943 72D7                             u2583 7B0E                             u1784 79E2  
                           u1864 7564                             u1793 7A0B                             u1873 75AD  
                           u1953 7302                             u1884 75A0                             u1964 72F5  
                           u1893 7675                             u1973 7317                             u1984 730A  
                           u1993 736F                     ___fldiv@exp1 0042                     ___fldiv@exp2 0044  
               ___awdiv@quotient 0062                         __powers_ 7C34                  ??_calc_dewpoint 001D  
                       _conflict 0213                    ___fladd@sign1 0057                    ___fladd@sign2 0059  
                   ___awdiv@sign 0064                       _print_help 3FC5                             _main 7A27  
                    _orcon_Start 4B5C               calc_dewpoint@logEx 001D               __end_of_print_help 3FF1  
                     printf@_val 0027                       printf@flag 0035                             log@x 0039  
                     printf@fval 0023                      _orcon_delay 484B                       printf@prec 002F  
                 ??_s_write_byte 0023                     ___flpack@arg 0071                     orcon_delay@i 0005  
                   ___flpack@exp 0073              __end_of_orcon_Start 4B67           calc_dewpoint@dew_point 0021  
        ___end_of_c_program_code 7A27              s_measure@p_checksum 0017              __end_of_orcon_delay 4949  
                     _LTRX_Start 379D                     ___awmod@sign 0062                     ??_oo_rx_byte 0034  
                     ___fladd@f1 004D                       ___fladd@f2 0051                          ?___flge 0041  
                   ___flmul@exp1 006B                     ___flmul@cntr 006A                       ___flge@ff1 0041  
                     ___flge@ff2 0045               oo_read_device@data 0022                     s_read_byte@i 0023  
       ??_oo_wait_for_completion 0015                  _OneWire_fVerify 3C02                         ??___flge 0049  
                        ?___wmul 0041                        _delay_5us 6E6C                  __end_of___fladd 76DC  
              __end_of_delay_5us 6E86                  __end_of___fldiv 5BEE                       ___fldiv@f1 0035  
                     ___fldiv@f2 0039                  __end_of___awdiv 6E6C                       ___fldiv@f3 003D  
                __end_of___flneg 7714                            ??_log 003D                         ??___wmul 0045  
                __end_of___awmod 6B3C                  __end_of___flmul 7416                  __end_of___flsub 5D72  
                __end_of___fltol 696A                  __end_of___lldiv 5D18                  __end_of___llmod 5ED1  
                     ___flneg@f1 004C                            IDX_PP 00D3                     ___fltol@exp1 0049  
                          CUR_PP 00D0                     ___fltol@lval 0045                   ___wmul@product 0045  
                        ?_fround 0041                       ___flmul@f1 005E                       ___flmul@f2 0062  
                     ___flmul@f3 0066                     _Ticker_Start 3CE7                    s_measure@mode 0019  
                       ??_fround 0045                       ___flsub@f1 0041                       ___flsub@f2 0045  
                     ___fltol@f1 0041                     _s_transstart 58B3                            MVR_PP 00D4  
                          MVW_PP 00D5                          ?_printf 0015                            STR_10 7E7D  
                          STR_11 7DA3                            STR_12 7F3C                            STR_20 7F00  
                          STR_13 7F51                            STR_21 7EE5                            STR_14 7F51  
                          STR_22 7F00                            STR_23 7F11                            STR_15 7DD9  
                          STR_24 7F20                            STR_16 7E55                            STR_25 7E00  
                          STR_17 7E2B                            STR_18 7F00                            STR_19 7F2E  
                  __end_of_log10 58B3                       ___awtofl@c 0040                        __npowers_ 7C00  
                     ___flunpack 7714                         ??_printf 0023                    _oo_scratchpad 0200  
                        ?_strcmp 0005                    __end_of_frexp 7201                    __end_of_scale 6647  
                 _oo_read_device 40FE                         ??_strcmp 0009               __end_of___flunpack 77F8  
                  __end_of_putch 5854                  __end_of_s_Start 57DA                    ___fldiv@sign1 0043  
                  ___fldiv@sign2 0041                    ??_s_read_byte 0023                  ?_oo_read_device 0015  
           __end_of_s_transstart 5912                  __end_of_isdigit 698D                   ___flunpack@arg 0071  
                 ___flunpack@exp 0073                       ___lltofl@c 0041                 ??_oo_read_device 0022  
                          _log10 5854                _s_connectionreset 49C2                      ?___flunpack 0071  
            _oo_start_conversion 41D8                            _frexp 717D                            _errno 0211  
                ___llmod@divisor 0045                            _scale 61EB                        _eval_poly 7078  
                ___llmod@counter 0049                            _putch 5840                __end_of_eval_poly 715A  
                       isdigit@c 0041                       ___lwtofl@c 0015                         scale@scl 0041  
        calc_sth11@p_temperature 0017                      printf@integ 002B                      printf@width 0033  
                     ?_eval_poly 0040                  _orcon_delay_5us 5A54                       __div_to_l_ 6647  
              s_do_measure@error 0011                         intlevel1 00A6               __end_of__div_to_l_ 6831  
                  _oo_print_data 4232                     _s_write_byte 5912                      _LED1_Invert 3759  
                  oo_report@data 0005             s_do_measure@checksum 0012                   ??_s_do_measure 0005  
                     _calc_sth11 42D1                ___wmul@multiplier 0041               __end_of_calc_sth11 4637  
                     eval_poly@d 0044                       eval_poly@n 0046                       eval_poly@x 0040  
                 oo_rx_byte@data 0034       __end_of_oo_conversion_busy 69E0                        _s_measure 4A2B  
              __end_of_s_measure 4B5C                 _LTRX_PutSHexByte 37F7             __end_of_s_write_byte 59AC  
            _oo_crc_shuffle_byte 715A                      ??_eval_poly 0048      __end_of_oo_start_conversion 41FA  
                    ?__div_to_l_ 0041           __end_of_oo_read_device 41D8                     ___lltofl@exp 0049  
     __end_of_oo_read_scratchpad 5831                  ___awdiv@divisor 0060                       ?_s_measure 0015  
                      _oo_report 3D95                  ___awdiv@counter 0065                    __div_to_l_@f1 0041  
                  __div_to_l_@f2 0045                      ?_calc_sth11 0015                     ??___flunpack 0075  
              __end_of_oo_report 3E52                      calc_sth11@t 0029            __end_of_oo_print_data 42D1  
                        ___fladd 7416                          ___fldiv 5A6E                          ___awdiv 6D2D  
                        ___flneg 76DC                          ___awmod 6A28                          ___flmul 7201  
                        ___flsub 5D18                          ___fltol 6831                         ?___fladd 004D  
                        ___lldiv 5BEE                          ___llmod 5DF1                         ?___fldiv 0035  
                  s_write_byte@i 0023                         ?___awdiv 005E                         ?___flneg 004C  
               s_measure@p_value 0015                       _delay_10ms 698D                       frexp@value 0040  
                       ?___awmod 005E                         ?___flmul 005E                         ?___flsub 0041  
                       ?___fltol 0041                         ?___lldiv 0041                         printf@ap 0037  
                       ?___llmod 0041                    ___flmul@sign1 006C                        _orcon_med 4086  
                      _orcon_low 40C2               __end_of_delay_10ms 69CA                        ??___fladd 0055  
              __end_of_orcon_med 40C2                        ??___fldiv 003D                        ??___awdiv 0062  
              __end_of_orcon_low 40FE                        ??___awmod 0062                        ??___flmul 0066  
                  _OneWire_Start 39D9                        ??___fltol 0045                        ??___lldiv 0049  
           s_do_measure@humi_val 0009                        ??___llmod 0049                           ??_main 0001  
               __end_of___flpack 7A27                      ??_s_measure 001A                          _crc_rom 0100  
               __end_of___awtofl 6F80                    ??_orcon_delay 0005                 __end_of___lltofl 5F50  
                        _s_Start 57CF      __end_of_oo_crc_shuffle_byte 717D                delay_10ms@counter 0016  
                        _dpowers 7C68             s_do_measure@temp_val 0005                 __end_of___lwtofl 49C2  
                        _isdigit 696A                    ___fltol@sign1 004A                      ??_oo_report 0005  
                       ?_isdigit 0041                   _LTRX_EnableInt 377D                         strcmp@s1 0005  
                       strcmp@s2 0007                     ??__div_to_l_ 0049                   s_measure@error 001A  
           calc_sth11@p_humidity 0015                   __end_of___flge 7078                           ?_log10 0035  
                         TMP_DR0 006C                           TMP_DR1 006D                           TMP_DR2 006E  
                   ??_calc_sth11 0019                           TMP_DR3 006F                           ?_frexp 0040  
                 __end_of___wmul 5DF1                    _calc_dewpoint 4637                           ?_scale 0041  
                    ___awtofl@f1 0044                           ?_putch 0041        oo_read_scratchpad@counter 0033  
                   __end_of_main 7B88                   __end_of_fround 61EB                   __end_of_printf 577E  
                     fround@prec 0041                     _s_do_measure 3E52                    _hardware_init 3FF1  
                  ?_s_write_byte 0022                   __end_of_strcmp 3D95                  _LTRX_szGetParam 38FC  
           ??_oo_read_scratchpad 0033                  _calc_sth11$3252 0031                  _calc_sth11$3253 0035  
                _calc_sth11$3259 002D                   oo_tx_byte@data 0034            __end_of_calc_dewpoint 484B  
                   ??_delay_10ms 0016                       _LED1_Start 373D                     __flash_banks 7CA2  
               _Ticker_EnableInt 3CDF             __end_of_s_do_measure 3FC5                s_write_byte@error 0024  
                    ___lltofl@f1 0045                  ___flunpack@sign 0075                s_write_byte@value 0022  
                 _LTRX_bCmdCheck 38E3          __end_of_orcon_delay_5us 5A6E                           ___flge 6F80  
                      frexp@eptr 0044                           ___exit 7B85                          printf@c 0039  
                        printf@f 0015                      _fround$3284 004D                      _fround$3292 0045  
                    _fround$3285 004B                      _fround$3286 004F                      _fround$3287 0047  
            ??_s_connectionreset 0015                           ___wmul 5D72                     _print_header 577E  
                  _LTRX_CmdReset 38CD                       s_measure@i 001C            __end_of_hardware_init 404A  
               ___llmod@dividend 0041                           _fround 5F50               s_connectionreset@i 0015  
                        strcmp@r 0009                           log10@x 0035                           _printf 4B67  
           __end_of_print_header 57CF                           _strcmp 3D41    oo_wait_for_completion@counter 0015  
                    __end_of_log 6D2D                 ___lldiv@dividend 0041                      ___lwtofl@f1 0019  
                         log@exp 003D                       _scale$3300 005B                       _scale$3301 0059  
                     _scale$3302 0057                       _scale$3303 0053                       _scale$3321 0045  
                     _scale$3314 004F                       _scale$3307 0051                       _scale$3315 004D  
                     _scale$3316 004B                       _scale$3317 0047                     _new_conflict 0000  
                   main@UART_bfr 0001   __end_of_oo_wait_for_completion 4232                      __flash_size 7CA0  
            ___wmul@multiplicand 0043                           putch@c 0041                     eval_poly@res 0048  
             _calc_dewpoint$3273 0029               _calc_dewpoint$3274 0025               _calc_dewpoint$3267 0031  
             _calc_dewpoint$3268 002D                 __flash_blocksize 7CA3                  _LTRX_CPutString 38B2  
                ___lldiv@divisor 0045         oo_crc_shuffle_byte@input 0035               _oo_conversion_busy 69CA  
                ___lldiv@counter 004D               _OneWire_fFindFirst 3ACB                     _LTRX_PutCRLF 38C4  
             _oo_read_scratchpad 57DA                   ?_oo_print_data 0015                _OneWire_bReadByte 3A42  
                   _LTRX_PutChar 3811                _OneWire_fFindNext 3AE0                  ??_oo_print_data 0022  
                    _s_read_byte 59AC                 ___awmod@dividend 005E                      _oo_crc_init 6E86  
          s_do_measure@dew_point 000D                 ___lldiv@quotient 0049                        Ticker_ISR 7B88  
      ___start_of_c_program_code 3D41                  ___awmod@divisor 0060              __end_of_s_read_byte 5A54  
            __end_of_oo_crc_init 6E94                  ___awmod@counter 0063  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:42 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter8 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Counter8_ltrx API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Counter8_ltrx_CONTROL_REG_START_BIT:       equ 0x01    ; Control register start bit
    22  00E1                    Counter8_ltrx_INT_REG:                     equ 0x0e1
    23  0010                    Counter8_ltrx_INT_MASK:                    equ 0x10
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Counter8_ltrx user defined values
    28                          ;--------------------------------------------------
    29                          
    30  0027                    Counter8_ltrx_PERIOD:                      equ 0x27
    31  0013                    Counter8_ltrx_COMPARE_VALUE:               equ 0x13
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Counter8_ltrx
    36                          ;--------------------------------------------------
    37                          
    38  0030                    Counter8_ltrx_COUNTER_REG:             equ 0x30   ; DR0 Counter register
    39  0031                    Counter8_ltrx_PERIOD_REG:              equ 0x31   ; DR1 Period register
    40  0032                    Counter8_ltrx_COMPARE_REG:             equ 0x32   ; DR2 CompareValue register
    41  0033                    Counter8_ltrx_CONTROL_REG:             equ 0x33   ; Control register
    42  0030                    Counter8_ltrx_FUNC_REG:                equ 0x30   ; Function register
    43  0031                    Counter8_ltrx_INPUT_REG:               equ 0x31   ; Input register
    44  0032                    Counter8_ltrx_OUTPUT_REG:              equ 0x32   ; Output register
    45                          
    46                          
    47                          ;--------------------------------------------------
    48                          ; Counter8_ltrx Macro 'Functions'
    49                          ;--------------------------------------------------
    50                          
    51                             macro Counter8_ltrx_Start_M
    52                             or    reg[Counter8_ltrx_CONTROL_REG],  Counter8_ltrx_CONTROL_REG_START_BIT
    53  7A27                       endm
    54                          
    55                             macro Counter8_ltrx_Stop_M
    56                             and   reg[Counter8_ltrx_CONTROL_REG], ~Counter8_ltrx_CONTROL_REG_START_BIT
    57  7A27                       endm
    58                          
    59                             macro Counter8_ltrx_EnableInt_M
    60                             M8C_EnableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    61  7A27                       endm
    62                          
    63                             macro Counter8_ltrx_DisableInt_M
    64                             M8C_DisableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    65  7A27                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter8 User Module software implementation file
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "Counter8_ltrx.inc"
    26                          
    27                          ;-----------------------------------------------
    28                          ;  Global Symbols
    29                          ;-----------------------------------------------
    30                          export  Counter8_ltrx_EnableInt
    31                          export _Counter8_ltrx_EnableInt
    32                          export  Counter8_ltrx_DisableInt
    33                          export _Counter8_ltrx_DisableInt
    34                          export  Counter8_ltrx_Start
    35                          export _Counter8_ltrx_Start
    36                          export  Counter8_ltrx_Stop
    37                          export _Counter8_ltrx_Stop
    38                          export  Counter8_ltrx_WritePeriod
    39                          export _Counter8_ltrx_WritePeriod
    40                          export  Counter8_ltrx_WriteCompareValue
    41                          export _Counter8_ltrx_WriteCompareValue
    42                          export  Counter8_ltrx_bReadCompareValue
    43                          export _Counter8_ltrx_bReadCompareValue
    44                          export  Counter8_ltrx_bReadCounter
    45                          export _Counter8_ltrx_bReadCounter
    46                          
    47                          ; The following functions are deprecated and subject to omission in future releases
    48                          ;
    49                          export  bCounter8_ltrx_ReadCompareValue  ; deprecated
    50                          export _bCounter8_ltrx_ReadCompareValue  ; deprecated
    51                          export  bCounter8_ltrx_ReadCounter       ; deprecated
    52                          export _bCounter8_ltrx_ReadCounter       ; deprecated
    53                          
    54                          
    55                          AREA sensor_gateway_RAM (RAM,REL)
    56                          
    57                          ;-----------------------------------------------
    58                          ;  Constant Definitions
    59                          ;-----------------------------------------------
    60                          
    61  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    62                          
    63                          
    64                          ;-----------------------------------------------
    65                          ; Variable Allocation
    66                          ;-----------------------------------------------
    67                          
    68                          
    69                          AREA UserModules (ROM, REL)
    70                          
    71                          .SECTION
    72                          ;-----------------------------------------------------------------------------
    73                          ;  FUNCTION NAME: Counter8_ltrx_EnableInt
    74                          ;
    75                          ;  DESCRIPTION:
    76                          ;     Enables this counter's interrupt by setting the interrupt enable mask bit
    77                          ;     associated with this User Module. This function has no effect until and
    78                          ;     unless the global interrupts are enabled (for example by using the
    79                          ;     macro M8C_EnableGInt).
    80                          ;-----------------------------------------------------------------------------
    81                          ;
    82                          ;  ARGUMENTS:    None.
    83                          ;  RETURNS:      Nothing.
    84                          ;  SIDE EFFECTS: 
    85                          ;    The A and X registers may be modified by this or future implementations
    86                          ;    of this function.  The same is true for all RAM page pointer registers in
    87                          ;    the Large Memory Model.  When necessary, it is the calling function's
    88                          ;    responsibility to perserve their values across calls to fastcall16 
    89                          ;    functions.
    90                          ;
    91  36EC                     Counter8_ltrx_EnableInt:
    92  36EC                    _Counter8_ltrx_EnableInt:
    93                             RAM_PROLOGUE RAM_USE_CLASS_1
    94  36EC  43 E1 10             Counter8_ltrx_EnableInt_M
    95                             RAM_EPILOGUE RAM_USE_CLASS_1
    96  36EF  7F                   ret
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: Counter8_ltrx_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this counter's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS: 
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  36F0                     Counter8_ltrx_DisableInt:
   119  36F0                    _Counter8_ltrx_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  36F0  41 E1 EF             Counter8_ltrx_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  36F3  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: Counter8_ltrx_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     counter will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS: 
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  36F4                     Counter8_ltrx_Start:
   148  36F4                    _Counter8_ltrx_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  36F4  43 33 01             Counter8_ltrx_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  36F7  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: Counter8_ltrx_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables counter operation by clearing the start bit in the Control
   163                          ;     register.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  36F8                     Counter8_ltrx_Stop:
   176  36F8                    _Counter8_ltrx_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  36F8  41 33 FE             Counter8_ltrx_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  36FB  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: Counter8_ltrx_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 8-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the counter user module is stopped, then this value will also be
   197                          ;    latched into the Count register (DR0).
   198                          ;     
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  36FC                     Counter8_ltrx_WritePeriod:
   206  36FC                    _Counter8_ltrx_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  36FC  60 31                mov   reg[Counter8_ltrx_PERIOD_REG], A
   209                             RAM_EPILOGUE RAM_USE_CLASS_1
   210  36FE  7F                   ret
   211                          
   212                          
   213                          .ENDSECTION
   214                          
   215                          .SECTION
   216                          ;-----------------------------------------------------------------------------
   217                          ;  FUNCTION NAME: Counter8_ltrx_WriteCompareValue
   218                          ;
   219                          ;  DESCRIPTION:
   220                          ;     Writes compare value into the Compare register (DR2).
   221                          ;-----------------------------------------------------------------------------
   222                          ;
   223                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   224                          ;  RETURNS:      Nothing
   225                          ;  SIDE EFFECTS: 
   226                          ;    The A and X registers may be modified by this or future implementations
   227                          ;    of this function.  The same is true for all RAM page pointer registers in
   228                          ;    the Large Memory Model.  When necessary, it is the calling function's
   229                          ;    responsibility to perserve their values across calls to fastcall16 
   230                          ;    functions.
   231                          ;
   232  36FF                     Counter8_ltrx_WriteCompareValue:
   233  36FF                    _Counter8_ltrx_WriteCompareValue:
   234                             RAM_PROLOGUE RAM_USE_CLASS_1
   235  36FF  60 32                mov   reg[Counter8_ltrx_COMPARE_REG], A
   236                             RAM_EPILOGUE RAM_USE_CLASS_1
   237  3701  7F                   ret
   238                          
   239                          
   240                          .ENDSECTION
   241                          
   242                          .SECTION
   243                          ;-----------------------------------------------------------------------------
   244                          ;  FUNCTION NAME: Counter8_ltrx_bReadCompareValue
   245                          ;
   246                          ;  DESCRIPTION:
   247                          ;     Reads the Compare register.
   248                          ;-----------------------------------------------------------------------------
   249                          ;
   250                          ;  ARGUMENTS:    None
   251                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   252                          ;  SIDE EFFECTS: 
   253                          ;    The A and X registers may be modified by this or future implementations
   254                          ;    of this function.  The same is true for all RAM page pointer registers in
   255                          ;    the Large Memory Model.  When necessary, it is the calling function's
   256                          ;    responsibility to perserve their values across calls to fastcall16 
   257                          ;    functions.
   258                          ;
   259  3702                     Counter8_ltrx_bReadCompareValue:
   260  3702                    _Counter8_ltrx_bReadCompareValue:
   261  3702                     bCounter8_ltrx_ReadCompareValue:                ; this name deprecated
   262  3702                    _bCounter8_ltrx_ReadCompareValue:                ; this name deprecated
   263                             RAM_PROLOGUE RAM_USE_CLASS_1
   264  3702  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]
   265                             RAM_EPILOGUE RAM_USE_CLASS_1
   266  3704  7F                   ret
   267                          
   268                          
   269                          .ENDSECTION
   270                          
   271                          .SECTION
   272                          ;-----------------------------------------------------------------------------
   273                          ;  FUNCTION NAME: Counter8_ltrx_bReadCounter
   274                          ;
   275                          ;  DESCRIPTION:
   276                          ;     Returns the value in the Count register (DR0), preserving the value in
   277                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   278                          ;     from the Count to the Compare registers by holding the clock low in
   279                          ;     the PSoC block.
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS: None
   283                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   284                          ;  SIDE EFFECTS:
   285                          ;     1) If running, the user module is stopped momentarily and one or more
   286                          ;        counts may be missed.
   287                          ;     2) The A and X registers may be modified by this or future implementations
   288                          ;        of this function.  The same is true for all RAM page pointer registers in
   289                          ;        the Large Memory Model.  When necessary, it is the calling function's
   290                          ;        responsibility to perserve their values across calls to fastcall16 
   291                          ;        functions.
   292                          ;
   293  3705                     Counter8_ltrx_bReadCounter:
   294  3705                    _Counter8_ltrx_bReadCounter:
   295  3705                     bCounter8_ltrx_ReadCounter:                     ; this name deprecated
   296  3705                    _bCounter8_ltrx_ReadCounter:                     ; this name deprecated
   297                          
   298  0000                       bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
   299  0001                       bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
   300  0002                       bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
   301  0003                       wCounter:               EQU   3               ; Frame offset to temp Count   store
   302  0004                       STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
   303                          
   304  3705  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   305  3707  4F                   mov   X, SP                                   ; X <- stack frame pointer
   306  3708  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]       ; Save the Compare register on the stack
   307  370A  08                   push  A                                       ;
   308  370B  5D 33                mov   A, reg[Counter8_ltrx_CONTROL_REG]       ; Save CR0 (running or stopped state)
   309  370D  08                   push  A                                       ;
   310  370E  41 33 FE             Counter8_ltrx_Stop_M                          ; Disable (stop) the Counter if running
   311  3711  71 10                M8C_SetBank1                                  ;
   312  3713  5D 31                mov   A, reg[Counter8_ltrx_INPUT_REG]         ; save the clock input setting
   313  3715  08                   push  A                                       ;   on the stack (now 2 bytes) and ...
   314                                                                           ;   hold the clock low:
   315  3716  62 31 00             mov   reg[Counter8_ltrx_INPUT_REG], INPUT_REG_NULL
   316  3719  70 EF                M8C_SetBank0
   317                                                                           ; Extract the Count via DR2 register
   318  371B  5D 30                mov   A, reg[Counter8_ltrx_COUNTER_REG]       ; DR2 <- DR0
   319  371D  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]       ; Stash the Count on the stack
   320  371F  08                   push  A                                       ;  -stack frame is now 3 bytes
   321  3720  52 00                mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
   322  3722  60 32                mov   reg[Counter8_ltrx_COMPARE_REG], A
   323  3724  71 10                M8C_SetBank1                                  ; Restore the counter operation:
   324  3726  52 02                mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
   325  3728  60 31                mov   reg[Counter8_ltrx_INPUT_REG], A         ;
   326  372A  70 EF                M8C_SetBank0                                  ;   then re-enable (start) the counter
   327  372C  52 01                mov   A, [X+bOrigControlReg]                  ;     if it was running when
   328  372E  60 33                mov   reg[Counter8_ltrx_CONTROL_REG], A       ;     this function was first called
   329  3730  18                   pop   A                                       ; Setup the return value
   330  3731  38 FD                ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
   331  3733  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   332  3737  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:42 2009
           Counter8_ltrx_PERIOD_REG 0031             _Counter8_ltrx_EnableInt 36EC                  _Counter8_ltrx_Stop 36F8  
         _Counter8_ltrx_WritePeriod 36FC           bCounter8_ltrx_ReadCounter 3705          _Counter8_ltrx_bReadCounter 3705  
                           MAC0_CL0 00EE                             MAC0_CL1 00EF                             MAC1_CL0 00AE  
                           MAC1_CL1 00AF                 _Counter8_ltrx_Start 36F4                                MAC_X 00EC  
                              MAC_Y 00ED            _Counter8_ltrx_DisableInt 36F0      Counter8_ltrx_bReadCompareValue 3702  
                  bOrigClockSetting 0002                               MAC0_X 00EC                               MAC0_Y 00ED  
                             MAC1_X 00AC                               MAC1_Y 00AD                               HITECH 0002  
                    FLAG_PGMODE_01b 0040                      FLAG_PGMODE_10b 0080      bCounter8_ltrx_ReadCompareValue 3702  
              Counter8_ltrx_INT_REG 00E1                  Counter8_ltrx_Start 36F4     _Counter8_ltrx_WriteCompareValue 36FF  
Counter8_ltrx_CONTROL_REG_START_BIT 0001          _bCounter8_ltrx_ReadCounter 3705                       INPUT_REG_NULL 0000  
          Counter8_ltrx_COMPARE_REG 0032            SYSTEM_LARGE_MEMORY_MODEL 0001              Counter8_ltrx_INPUT_REG 0031  
                            MAC_CL0 00EE                              MAC_CL1 00EF            Counter8_ltrx_CONTROL_REG 0033  
                  bOrigCompareValue 0000                     FLAG_PGMODE_MASK 00C0                      RAM_USE_CLASS_1 0001  
                    RAM_USE_CLASS_2 0002                      RAM_USE_CLASS_3 0004                      RAM_USE_CLASS_4 0008  
          Counter8_ltrx_COUNTER_REG 0030             Counter8_ltrx_DisableInt 36F0                   Counter8_ltrx_Stop 36F8  
                    bOrigControlReg 0001      Counter8_ltrx_WriteCompareValue 36FF               Counter8_ltrx_INT_MASK 0010  
                   STACK_FRAME_SIZE 0004            Counter8_ltrx_WritePeriod 36FC              Counter8_ltrx_EnableInt 36EC  
   _Counter8_ltrx_bReadCompareValue 3702           Counter8_ltrx_bReadCounter 3705                        FLAG_XIO_MASK 0010  
         SYSTEM_IDXPG_TRACKS_IDX_PP 0001           SYSTEM_IDXPG_TRACKS_STK_PP 0000     _bCounter8_ltrx_ReadCompareValue 3702  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:42 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter8 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Counter8_ltrx API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Counter8_ltrx_CONTROL_REG_START_BIT:       equ 0x01    ; Control register start bit
    22  00E1                    Counter8_ltrx_INT_REG:                     equ 0x0e1
    23  0010                    Counter8_ltrx_INT_MASK:                    equ 0x10
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Counter8_ltrx user defined values
    28                          ;--------------------------------------------------
    29                          
    30  0027                    Counter8_ltrx_PERIOD:                      equ 0x27
    31  0013                    Counter8_ltrx_COMPARE_VALUE:               equ 0x13
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Counter8_ltrx
    36                          ;--------------------------------------------------
    37                          
    38  0030                    Counter8_ltrx_COUNTER_REG:             equ 0x30   ; DR0 Counter register
    39  0031                    Counter8_ltrx_PERIOD_REG:              equ 0x31   ; DR1 Period register
    40  0032                    Counter8_ltrx_COMPARE_REG:             equ 0x32   ; DR2 CompareValue register
    41  0033                    Counter8_ltrx_CONTROL_REG:             equ 0x33   ; Control register
    42  0030                    Counter8_ltrx_FUNC_REG:                equ 0x30   ; Function register
    43  0031                    Counter8_ltrx_INPUT_REG:               equ 0x31   ; Input register
    44  0032                    Counter8_ltrx_OUTPUT_REG:              equ 0x32   ; Output register
    45                          
    46                          
    47                          ;--------------------------------------------------
    48                          ; Counter8_ltrx Macro 'Functions'
    49                          ;--------------------------------------------------
    50                          
    51                             macro Counter8_ltrx_Start_M
    52                             or    reg[Counter8_ltrx_CONTROL_REG],  Counter8_ltrx_CONTROL_REG_START_BIT
    53  7A27                       endm
    54                          
    55                             macro Counter8_ltrx_Stop_M
    56                             and   reg[Counter8_ltrx_CONTROL_REG], ~Counter8_ltrx_CONTROL_REG_START_BIT
    57  7A27                       endm
    58                          
    59                             macro Counter8_ltrx_EnableInt_M
    60                             M8C_EnableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    61  7A27                       endm
    62                          
    63                             macro Counter8_ltrx_DisableInt_M
    64                             M8C_DisableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    65  7A27                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrxINT.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Counter8_ltrx.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Counter8_ltrx_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Counter8_ltrx_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  3738                    _Counter8_ltrx_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                          
    71                             ;---------------------------------------------------
    72                             ; Insert your custom code above this banner
    73                             ;---------------------------------------------------
    74                             ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76  3738  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:42 2009
                 _Counter8_ltrx_ISR 3738                             MAC0_CL0 00EE                             MAC0_CL1 00EF  
                           MAC1_CL0 00AE                             MAC1_CL1 00AF                                MAC_X 00EC  
                              MAC_Y 00ED                               MAC0_X 00EC                               MAC0_Y 00ED  
                             MAC1_X 00AC                               MAC1_Y 00AD                               HITECH 0002  
                            MAC_CL0 00EE                              MAC_CL1 00EF  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:42 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LED1.inc
     4                          ;;  Version: 1.2, Updated on 2008/6/23 at 12:24:56
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the LED user module interface
     8                          ;;                for the 22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2006. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16  0003                    LED1_Port:      equ   0x3
    17                          
    18                          
    19  000C                    LED1_PortDR:    equ   PRT3DR
    20                          
    21  0080                    LED1_PinMask:   equ  0x80
    22                          
    23  0000                    LED1_Drive:     equ   0
    24                          
    25  0000                    LED1_ON:        equ   0
    26  0001                    LED1_OFF:       equ   1
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LED1.asm
     4                          ;;  Version: 1.2, Updated on 2008/6/23 at 12:24:56
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: LED user module for 22/24/27/29xxx PSoC family of devices.
     8                          ;;
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2005. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "LED1.inc"
    24                          include "memory.inc"
    25                          
    26                          export _LED1_Start
    27                          export  LED1_Start
    28                          
    29                          export _LED1_Stop
    30                          export  LED1_Stop
    31                          
    32                          export _LED1_On
    33                          export  LED1_On
    34                          
    35                          export _LED1_Off
    36                          export  LED1_Off
    37                          
    38                          export _LED1_Switch
    39                          export  LED1_Switch
    40                          
    41                          export _LED1_Invert
    42                          export  LED1_Invert
    43                          
    44                          export _LED1_GetState
    45                          export  LED1_GetState
    46                          
    47                          
    48                          AREA UserModules (ROM, REL)
    49                          
    50                          
    51                          .SECTION
    52                          ;-----------------------------------------------------------------------------
    53                          ;  FUNCTION NAME: LED1_Start(void)
    54                          ;  FUNCTION NAME: LED1_Stop(void)
    55                          ;
    56                          ;  FUNCTION NAME: LED1_Switch(void)
    57                          ;
    58                          ;  DESCRIPTION: ( Switch )
    59                          ;     Turn LED on or off     
    60                          ;
    61                          ;  DESCRIPTION: ( Start, Stop )
    62                          ;     Turn LED off                       
    63                          ;
    64                          ;-----------------------------------------------------------------------------
    65                          ;
    66                          ;  ARGUMENTS:  ( Switch )
    67                          ;     A => If 0, turn off LED, if > 0 turn on LED
    68                          ;
    69                          ;  ARGUMENTS:  ( Start, Stop )
    70                          ;      None
    71                          ;
    72                          ;  RETURNS:  none
    73                          ;
    74                          ;  SIDE EFFECTS:
    75                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
    76                          ;
    77                          ;-----------------------------------------------------------------------------
    78  3739                    _LED1_On:
    79  3739                     LED1_On:
    80  3739  50 01                mov  A,0x01
    81  373B  8003                 jmp  LED1_Switch 
    82                          
    83  373D                    _LED1_Start:
    84  373D                     LED1_Start:
    85  373D                    _LED1_Stop:
    86  373D                     LED1_Stop:
    87  373D                    _LED1_Off:
    88  373D                     LED1_Off:
    89  373D  50 00                mov  A,0x00
    90                          
    91  373F                    _LED1_Switch:
    92  373F                     LED1_Switch:
    93                             RAM_PROLOGUE RAM_USE_CLASS_4
    94  373F  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
    95  3741  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
    96                          
    97  3744  29 00                or   A,0x00                                   ; Check mode
    98  3746  A006                 jz   .Turn_Off_LED
    99                          
   100  3748                    .Turn_On_LED:
   101                          IF(0)                                            ; Active High Digit Drive
   102                             or   [Port_3_Data_SHADE],LED1_PinMask
   103                          ELSE                                             ; Active Low Digit Drive
   104  3748  26 88  7F            and  [Port_3_Data_SHADE],~LED1_PinMask
   105                          ENDIF
   106  374B  8004                 jmp  .Switch_LED
   107                          
   108  374D                    .Turn_Off_LED:
   109                          IF(0)                      ; Active High Digit Drive
   110                             and  [Port_3_Data_SHADE],~LED1_PinMask
   111                          ELSE                              ; Active Low Digit Drive
   112  374D  2E 88  80            or   [Port_3_Data_SHADE],LED1_PinMask
   113                          ENDIF
   114                          
   115  3750                    .Switch_LED:
   116  3750  51 88                mov  A,[Port_3_Data_SHADE]
   117  3752  60 0C                mov  reg[LED1_PortDR],A
   118                          
   119  3754  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   120                             RAM_EPILOGUE RAM_USE_CLASS_4
   121  3758  7F                   ret
   122                          .ENDSECTION
   123                          
   124                          
   125                          
   126                          .SECTION
   127                          ;-----------------------------------------------------------------------------
   128                          ;  FUNCTION NAME: LED1_Invert(void)
   129                          ;
   130                          ;  DESCRIPTION:
   131                          ;     Invert state of LED                               
   132                          ;
   133                          ;-----------------------------------------------------------------------------
   134                          ;
   135                          ;  ARGUMENTS: none
   136                          ;
   137                          ;  RETURNS:  none
   138                          ;
   139                          ;  SIDE EFFECTS:
   140                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
   141                          ;
   142                          ;-----------------------------------------------------------------------------
   143  3759                    _LED1_Invert:
   144  3759                     LED1_Invert:
   145                             RAM_PROLOGUE RAM_USE_CLASS_4
   146  3759  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   147  375B  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
   148                          
   149  375E  36 88  80            xor  [Port_3_Data_SHADE],LED1_PinMask
   150  3761  51 88                mov  A,[Port_3_Data_SHADE]
   151  3763  60 0C                mov  reg[LED1_PortDR],A
   152                          
   153  3765  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   154                             RAM_EPILOGUE RAM_USE_CLASS_4
   155  3769  7F                   ret
   156                          .ENDSECTION
   157                          
   158                          .SECTION
   159                          ;-----------------------------------------------------------------------------
   160                          ;  FUNCTION NAME: LED1_GetState(void)
   161                          ;
   162                          ;  DESCRIPTION:
   163                          ;     Get state of LED
   164                          ;
   165                          ;-----------------------------------------------------------------------------
   166                          ;
   167                          ;  ARGUMENTS: none
   168                          ;
   169                          ;  RETURNS:  
   170                          ;    State of LED   1 = ON,  0 = OFF
   171                          ;
   172                          ;  SIDE EFFECTS:
   173                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
   174                          ;
   175                          ;-----------------------------------------------------------------------------
   176  376A                    _LED1_GetState:
   177  376A                     LED1_GetState:
   178                             RAM_PROLOGUE RAM_USE_CLASS_4
   179  376A  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   180  376C  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
   181                          
   182  376F  51 88                mov   A,[Port_3_Data_SHADE]         ; Get shade value
   183                          IF(0)                                  ; Active High Digit Drive
   184                             // Nothing for now
   185                          ELSE                                   ; Active Low Digit Drive
   186  3771  73                   cpl   A                             ; Invert bit if Active low
   187                          ENDIF
   188  3772  21 80                and   A,LED1_PinMask                ; Mask off the trash
   189  3774  A003                 jz    .End_LED_GS                   ; If zero, we're done
   190  3776  50 01                mov   A,0x01                        ; Return a 1 no mater what the mask is.
   191                          
   192  3778                    .End_LED_GS:
   193  3778  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   194                             RAM_EPILOGUE RAM_USE_CLASS_4
   195  377C  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:42 2009
             LED1_GetState 376A                    MAC0_CL0 00EE                    MAC0_CL1 00EF                    MAC1_CL0 00AE  
                  MAC1_CL1 00AF                       MAC_X 00EC                       MAC_Y 00ED                    LED1_Off 373D  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
                    HITECH 0002                 LED1_Invert 3759             FLAG_PGMODE_01b 0040             FLAG_PGMODE_10b 0080  
                    CUR_PP 00D0                 LED1_PortDR 000C                      PRT3DR 000C                 LED1_Switch 373F  
                 LED1_Stop 373D                    _LED1_On 3739                  _LED1_Stop 373D           Port_3_Data_SHADE 0088  
              _LED1_Invert 3759                _LED1_Switch 373F   SYSTEM_LARGE_MEMORY_MODEL 0001                     LED1_On 3739  
                   MAC_CL0 00EE                     MAC_CL1 00EF                LED1_PinMask 0080            FLAG_PGMODE_MASK 00C0  
           RAM_USE_CLASS_1 0001             RAM_USE_CLASS_2 0002             RAM_USE_CLASS_3 0004             RAM_USE_CLASS_4 0008  
                LED1_Start 373D                   _LED1_Off 373D                 _LED1_Start 373D              _LED1_GetState 376A  
SYSTEM_IDXPG_TRACKS_IDX_PP 0001  SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:42 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183+ 0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRX.inc
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module for the
     8                          ;;                22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          ;--------------------------------------------------
    15                          ; Constants for LTRX API's
    16                          ;--------------------------------------------------
    17                          
    18                          ;mask value for global int reg bit for TX instance
    19  0040                    LTRX_TX_INT_MASK:                            equ 0x40
    20  00E1                    LTRX_TX_INT_REG:                             equ 0x0e1  ;TX interrupt address
    21  0080                    LTRX_RX_INT_MASK:                            equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    22  00E1                    LTRX_RX_INT_REG:                             equ 0x0e1  ;RX interrupt address
    23                          
    24  0001                    LTRX_RXBUF_ENABLE:                           equ 1
    25                          
    26                          ; Interrupt control masks
    27  0001                    LTRX_ENABLE_RX_INT:                          equ 0x01
    28  0000                    LTRX_DISABLE_RX_INT:                         equ 0x00
    29  0002                    LTRX_ENABLE_TX_INT:                          equ 0x02
    30  0000                    LTRX_DISABLE_TX_INT:                         equ 0x00
    31                          
    32  0000                    LTRX_INT_MODE_TX_REG_EMPTY:                  equ 0x00
    33  0001                    LTRX_INT_MODE_TX_COMPLETE:                   equ 0x01
    34                          
    35  0020                    LTRX_RX_IGNORE_BELOW:                        equ 0x20
    36  0010                    LTRX_RX_BUFFER_SIZE:                         equ 0x10
    37  000D                    LTRX_CMD_TERM:                               equ 0xd
    38  0020                    LTRX_DELIMITER:                              equ 0x20
    39  0000                    LTRX_BACKSPACE_ENABLE:                       equ 0x0
    40                          
    41                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                          ;       WARNING WARNING WARNING
    43                          ; The following equates are for backwards
    44                          ; compatibility only and should not be used
    45                          ; for new designs.
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;------------------------------------
    49                          ;  Parity masks
    50                          ;------------------------------------
    51  0000                    UART_PARITY_NONE:       equ   00h
    52  0002                    UART_PARITY_EVEN:       equ   02h
    53  0006                    UART_PARITY_ODD:        equ   06h
    54                          
    55                          ;------------------------------------
    56                          ;  TX Status Register masks
    57                          ;------------------------------------
    58  0020                    UART_TX_COMPLETE:       equ   20h
    59  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    60                          
    61                          ;------------------------------------
    62                          ;  RX Status Register masks
    63                          ;------------------------------------
    64  0010                    UART_RX_ACTIVE:         equ   10h
    65  0008                    UART_RX_COMPLETE:       equ   08h
    66  0080                    UART_RX_PARITY_ERROR:   equ   80h
    67  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    68  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    69  00E0                    UART_RX_NO_ERROR:       equ   E0h
    70                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    71                          ;             END WARNING
    72                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    73                          
    74                          
    75                          
    76                          ;------------------------------------
    77                          ;  Parity masks
    78                          ;------------------------------------
    79  0000                    LTRX_PARITY_NONE:                       equ   00h
    80  0002                    LTRX_PARITY_EVEN:                       equ   02h
    81  0006                    LTRX_PARITY_ODD:                        equ   06h
    82                          
    83                          ;------------------------------------
    84                          ;  TX Status Register masks
    85                          ;------------------------------------
    86  0020                    LTRX_TX_COMPLETE:                       equ   20h
    87  0010                    LTRX_TX_BUFFER_EMPTY:                   equ   10h
    88                          
    89                          ;------------------------------------
    90                          ;  RX Status Register masks
    91                          ;------------------------------------
    92  0010                    LTRX_RX_ACTIVE:                         equ   10h
    93  0008                    LTRX_RX_COMPLETE:                       equ   08h
    94  0008                    LTRX_RX_REG_FULL:                       equ   08h
    95  0080                    LTRX_RX_PARITY_ERROR:                   equ   80h
    96  0040                    LTRX_RX_OVERRUN_ERROR:                  equ   40h
    97  0020                    LTRX_RX_FRAMING_ERROR:                  equ   20h
    98  00E0                    LTRX_RX_ERROR:                          equ   E0h
    99  0001                    LTRX_RX_ENABLE:                         equ   01h
   100                          
   101  00F0                    LTRX_RX_BUF_ERROR:                      equ   F0h  ; Mask for any Rx that may occur.
   102  0010                    LTRX_RX_BUF_OVERRUN:                    equ   10h  ; This indicates the software buffer has
   103                                                                                  ; been over run.
   104  0001                    LTRX_RX_BUF_CMDTERM:                    equ   01h  ; Command terminator has been received.
   105                          
   106  0001                    LTRX_RX_NO_DATA:                        equ   01h
   107  00E0                    LTRX_RX_NO_ERROR:                       equ   E0h
   108                          
   109                          
   110                          ;--------------------------------------------------
   111                          ; Registers Address Constants for LTRX
   112                          ;--------------------------------------------------
   113                          ;---------------------------------
   114                          ;  Registers used by TX
   115                          ;---------------------------------
   116  003B                    LTRX_TX_CONTROL_REG:    equ 3bh            ; Control register
   117  0038                    LTRX_TX_SHIFT_REG:  equ 38h               ; TX Shift Register register
   118  0039                    LTRX_TX_BUFFER_REG: equ 39h               ; TX Buffer Register
   119  0038                    LTRX_TX_FUNC_REG:   equ 38h             ; Function register
   120  0039                    LTRX_TX_INPUT_REG:  equ 39h             ; Input register
   121  003A                    LTRX_TX_OUTPUT_REG: equ 3ah             ; Output register
   122                          
   123                          ;---------------------------------
   124                          ;  Registers used by RX
   125                          ;---------------------------------
   126  003F                    LTRX_RX_CONTROL_REG:    equ 3fh            ; Control register
   127  003C                    LTRX_RX_SHIFT_REG:  equ 3ch               ; RX Shift Register register
   128  003E                    LTRX_RX_BUFFER_REG: equ 3eh               ; RX Buffer Register
   129  003C                    LTRX_RX_FUNC_REG:   equ 3ch             ; Function register
   130  003D                    LTRX_RX_INPUT_REG:  equ 3dh             ; Input register
   131  003E                    LTRX_RX_OUTPUT_REG: equ 3eh             ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   LTRX.asm
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "LTRX.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  LTRX_SetTxIntMode
    41                          export _LTRX_SetTxIntMode
    42                          export  LTRX_EnableInt
    43                          export _LTRX_EnableInt
    44                          export  LTRX_DisableInt
    45                          export _LTRX_DisableInt
    46                          
    47                          export  LTRX_Start
    48                          export _LTRX_Start
    49                          export  LTRX_Stop
    50                          export _LTRX_Stop
    51                          export  LTRX_SendData
    52                          export _LTRX_SendData
    53                          export  LTRX_bReadTxStatus
    54                          export _LTRX_bReadTxStatus
    55                          export  LTRX_bReadRxData
    56                          export _LTRX_bReadRxData
    57                          export  LTRX_bReadRxStatus
    58                          export _LTRX_bReadRxStatus
    59                          
    60                          export  LTRX_IntCntl
    61                          export _LTRX_IntCntl
    62                          
    63                          export  LTRX_TxIntMode
    64                          export _LTRX_TxIntMode
    65                          
    66                          export  LTRX_PutSHexByte
    67                          export _LTRX_PutSHexByte
    68                          export  LTRX_PutSHexInt
    69                          export _LTRX_PutSHexInt
    70                          
    71                          export  LTRX_CPutString
    72                          export _LTRX_CPutString
    73                          export  LTRX_PutString
    74                          export _LTRX_PutString
    75                          export  LTRX_PutChar
    76                          export _LTRX_PutChar
    77                          export  LTRX_Write
    78                          export _LTRX_Write
    79                          export  LTRX_CWrite
    80                          export _LTRX_CWrite
    81                          
    82                          export  LTRX_cGetChar
    83                          export _LTRX_cGetChar
    84                          export  LTRX_cReadChar
    85                          export _LTRX_cReadChar
    86                          export  LTRX_iReadChar
    87                          export _LTRX_iReadChar
    88                          export  LTRX_PutCRLF
    89                          export _LTRX_PutCRLF
    90                          
    91                          IF (LTRX_RXBUF_ENABLE)
    92                          export  LTRX_CmdReset
    93                          export _LTRX_CmdReset
    94                          export  LTRX_bCmdCheck
    95                          export _LTRX_bCmdCheck
    96                          export  LTRX_bCmdLength
    97                          export _LTRX_bCmdLength
    98                          export  LTRX_bErrCheck
    99                          export _LTRX_bErrCheck
   100                          
   101                          export  LTRX_szGetParam
   102                          export _LTRX_szGetParam
   103                          export  LTRX_szGetRestOfParams
   104                          export _LTRX_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bLTRX_ReadTxStatus
   114                          export _bLTRX_ReadTxStatus
   115                          export  bLTRX_ReadRxData
   116                          export _bLTRX_ReadRxData
   117                          export  bLTRX_ReadRxStatus
   118                          export _bLTRX_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (LTRX_RXBUF_ENABLE)
   128                              
   129                          area LTRX_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: LTRX_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  377D                     LTRX_EnableInt:
   177  377D                    _LTRX_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  377D  43 E1 40             M8C_EnableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   180  3780  43 E1 80             M8C_EnableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  3783  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: LTRX_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  3784                     LTRX_DisableInt:
   209  3784                    _LTRX_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  3784  41 E1 BF             M8C_DisableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   212  3787  41 E1 7F             M8C_DisableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  378A  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: LTRX_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  378B                     LTRX_SetTxIntMode:
   245  378B                    _LTRX_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  378B  71 10                M8C_SetBank1
   248  378D  21 01                and   A, LTRX_INT_MODE_TX_COMPLETE
   249  378F  A007                 jz    .SetModeRegEmpty
   250  3791  43 38 10             or    REG[LTRX_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  3794  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  3796  7F                   ret
   254                          
   255  3797                    .SetModeRegEmpty:
   256  3797  41 38 EF             and   REG[LTRX_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  379A  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  379C  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: LTRX_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  379D                     LTRX_Start:
   286  379D                    _LTRX_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  379D  29 01                or    A, bfCONTROL_REG_START_BIT
   291  379F  60 3B                mov   REG[LTRX_TX_CONTROL_REG], A
   292  37A1  60 3F                mov   REG[LTRX_RX_CONTROL_REG], A
   293                          IF ( LTRX_RXBUF_ENABLE )
   294  37A3  9128                 call  _LTRX_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  37A5  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: LTRX_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  37A6                     LTRX_Stop:
   323  37A6                    _LTRX_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  37A6  41 3B FE             and   REG[LTRX_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  37A9  41 3F FE             and   REG[LTRX_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  37AC  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: LTRX_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  37AD                     LTRX_SendData:
   354  37AD                    _LTRX_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  37AD  60 39                mov REG[LTRX_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  37AF  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: LTRX_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  37B0                     LTRX_bReadTxStatus:
   385  37B0                    _LTRX_bReadTxStatus:
   386  37B0                     bLTRX_ReadTxStatus:                             ; For backwards compatibility only
   387  37B0                    _bLTRX_ReadTxStatus:                             ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  37B0  5D 3B                mov A,  REG[LTRX_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  37B2  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: LTRX_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  37B3                     LTRX_bReadRxData:
   418  37B3                    _LTRX_bReadRxData:
   419  37B3                     bLTRX_ReadRxData:                               ; For backwards compatibility only
   420  37B3                    _bLTRX_ReadRxData:                               ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  37B3  5D 3E                mov A, REG[LTRX_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  37B5  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: LTRX_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  37B6                     LTRX_bReadRxStatus:
   452  37B6                    _LTRX_bReadRxStatus:
   453  37B6                     bLTRX_ReadRxStatus:                             ; For backwards compatibility only
   454  37B6                    _bLTRX_ReadRxStatus:                             ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  37B6  5D 3F                mov A,  REG[LTRX_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  37B8  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: LTRX_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  37B9                     LTRX_TxIntMode:
   486  37B9                    _LTRX_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  37B9  21 01                and  A,LTRX_INT_MODE_TX_COMPLETE
   490  37BB  71 10                M8C_SetBank1
   491  37BD  39 01                cmp  A,LTRX_INT_MODE_TX_COMPLETE
   492  37BF  A006                 jz   .SetTxCmpMode
   493                          
   494  37C1  41 38 EF             and  reg[LTRX_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
   495  37C4  8004                 jmp  .TxIntMode_End
   496                          
   497  37C6                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  37C6  43 38 10             or   reg[LTRX_TX_FUNC_REG],0x10
   499                          
   500  37C9                    .TxIntMode_End:
   501  37C9  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  37CB  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: LTRX_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  37CC                     LTRX_IntCntl:
   533  37CC                    _LTRX_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  37CC  08                   push A
   537  37CD  21 01                and  A,LTRX_ENABLE_RX_INT
   538  37CF  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  37D1  43 E1 80             M8C_EnableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   541  37D4  8004                 jmp  .CheckTxInt
   542  37D6                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  37D6  41 E1 7F             M8C_DisableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   545                          
   546  37D9                    .CheckTxInt:
   547  37D9  18                   pop  A
   548  37DA  21 02                and  A,LTRX_ENABLE_TX_INT
   549  37DC  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  37DE  43 E1 40             M8C_EnableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   552  37E1  8004                 jmp  .End_IntCntl
   553  37E3                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  37E3  41 E1 BF             M8C_DisableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   556                          
   557  37E6                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  37E6  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: LTRX_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  37E7                    LTRX_HEX_STR:
   594  37E7  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  37F7                     LTRX_PutSHexByte:
   599  37F7                    _LTRX_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  37F7  08                   push  A                             ; Save lower nibble
   602  37F8  67                   asr   A                             ; Shift high nibble to right
   603  37F9  67                   asr   A
   604  37FA  67                   asr   A
   605  37FB  67                   asr   A
   606  37FC  21 0F                and   A,0Fh                         ; Mask off nibble
   607  37FE  FFE7                 index LTRX_HEX_STR                  ; Get Hex value
   608  3800  900F                 call  LTRX_PutChar                  ; Write data to screen
   609  3802  18                   pop   A                             ; Restore value
   610  3803  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  3805  FFE0                 index LTRX_HEX_STR                  ; Get Hex value
   612  3807  9008                 call  LTRX_PutChar                  ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  3809  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: LTRX_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  380A                     LTRX_PutSHexInt:
   643  380A                    _LTRX_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  380A  4B                   swap  A,X
   646  380B  9FEA                 call  LTRX_PutSHexByte              ; Print MSB
   647  380D  5B                   mov   A,X                           ; Move LSB into position
   648  380E  9FE7                 call  LTRX_PutSHexByte              ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  3810  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: LTRX_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[LTRX_TX_CONTROL_REG], LTRX_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[LTRX_TX_BUFFER_REG], @Source          ; Write data to Tx Port
   681  3811                       endm
   682                          
   683  3811                     LTRX_PutChar:
   684  3811                    _LTRX_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686  3811                       InLinePutChar A
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  3818  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: LTRX_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  3819                     LTRX_cGetChar:
   718  3819                    _LTRX_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  3819  49 3F 08             tst REG[LTRX_RX_CONTROL_REG],LTRX_RX_REG_FULL    ; Check if a character is ready
   721  381C  AFFC                 jz  LTRX_cGetChar                             ; If not loop
   722  381E  5D 3E                mov A, REG[LTRX_RX_BUFFER_REG]                ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  3820  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: LTRX_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  3821                     LTRX_cReadChar:
   753  3821                    _LTRX_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  3821  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Get Status of RX
   756  3823  08                   push A
   757  3824  21 08                and  A,LTRX_RX_COMPLETE                                 ; Check if a character is ready
   758  3826  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  3828  18                   pop  A
   760  3829  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  382B                    .RX_DATA_RDY:
   763  382B  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]          
   764  382D  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  382E  18                   pop  A                                                  ; Check for errors
   767  382F  21 A0                and  A,(LTRX_RX_PARITY_ERROR | LTRX_RX_FRAMING_ERROR)
   768  3831  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  3833  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  3834  7F                   ret
   772                          
   773  3835                    .RX_NO_VALID_CHAR:
   774  3835  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  3837                     End_LTRX_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  3837  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: LTRX_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  3838                     LTRX_iReadChar:
   814  3838                    _LTRX_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  3838  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  383A  21 E8                and  A,(LTRX_RX_ERROR|LTRX_RX_REG_FULL)
   819  383C  08                   push A
   820  383D  21 08                and  A,LTRX_RX_COMPLETE                                 ; Check if a character is ready
   821  383F  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  3841  18                   pop  A
   823  3842  29 01                or   A,LTRX_RX_NO_DATA                                  ; Add no data flag
   824  3844  4B                   swap A,X
   825  3845  8007                 jmp  End_LTRX_iReadChar
   826                          
   827  3847                    .RX_GET_DATA:
   828  3847  18                   pop  A
   829  3848  21 E0                and  A,LTRX_RX_ERROR
   830  384A  4B                   swap A,X
   831  384B  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]                         ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  384D                     End_LTRX_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  384D  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: LTRX_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  384E                     LTRX_PutString:
   867  384E                    _LTRX_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  384E  60 D3                RAM_SETPAGE_IDX A
   870  3850                    .PutStringLoop:
   871  3850  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  3852  A006                 jz    End_PutString                           ; Check for end of string
   873  3854  9FBB                 call  LTRX_PutChar                            ; Send character to Tx port
   874  3856  75                   inc   X                                       ; Advance pointer to next character
   875  3857  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  3859                    End_PutString:
   878  3859  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
   879  385D  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: LTRX_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  385E                     LTRX_Write:
   914  385E                    _LTRX_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  385E  62 D3 07             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  3861  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  3862                    .NextByteLoop:
   920  3862  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  3864  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  3866  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  3868  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  386A  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  386C  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  386E  52 00                mov   A, [X]                                  ; Grab the data
   931  3870                       InLinePutChar A                               ; Put data in empty TX buf reg
   932  3877  4F                   mov   X, SP                                   ; Recover frame pointer
   933  3878  62 D3 07             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  387B  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  387D  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  387F                    .End_Write:
   938  387F  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
   939  3883  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: LTRX_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  3884                     LTRX_CWrite:
   975  3884                    _LTRX_CWrite:
   976  3884  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  3886  4F                   mov   X,SP
   978  3887                    .CW_Loop:
   979  3887  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  388A  B006                 jnz   .CW_WRITEIT
   981  388C  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  388F  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  3891                    .CW_WRITEIT:                                
   985  3891  10                   push  X                                  ; Save frame pointer
   986  3892  52 FC                mov   A,[X+CSTR_MSB]
   987  3894  59 FD                mov   X,[X+CSTR_LSB]
   988  3896  28                   romx                                     ; Get character from ROM
   989  3897                       InLinePutChar A                          ; Put data in empty TX buf reg
   990  389E  20                   pop   X                                  ; Restore frame pointer
   991  389F  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  38A2  0F FC 00             adc   [X+CSTR_MSB],0
   993  38A5  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  38A8  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  38AB  8FDB                 jmp   .CW_Loop
   996                          
   997  38AD                    .End_CWrite:
   998  38AD  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   999  38B1  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: LTRX_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  38B2                     LTRX_CPutString:
  1027  38B2                    _LTRX_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  38B2  08                   push  A                                       ; Store ROM pointer
  1030  38B3  10                   push  X
  1031  38B4  28                   romx                                          ; Get character from ROM
  1032  38B5  A00B                 jz    .End_CPutString
  1033  38B7  9F58                 call  LTRX_PutChar                            ; Print character
  1034  38B9  20                   pop   X
  1035  38BA  18                   pop   A
  1036  38BB  75                   inc   X                                       ; Inc LSB of pointer
  1037  38BC  DFF5                 jnc   LTRX_CPutString                         ; Check for carry
  1038  38BE  74                   inc   A                                       ; Inc MSB of pointer
  1039  38BF  8FF2                 jmp   LTRX_CPutString
  1040                          
  1041                          
  1042  38C1                    .End_CPutString:
  1043  38C1  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  38C3  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: LTRX_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  38C4                     LTRX_PutCRLF:
  1071  38C4                    _LTRX_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  38C4  50 0D                mov  A,0x0D                        ; Send CR
  1074  38C6  9F49                 call LTRX_PutChar
  1075  38C8  50 0A                mov  A,0x0A                        ; Send LF
  1076  38CA  9F45                 call LTRX_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  38CC  7F                   ret
  1079                          .ENDSECTION
  1080                          
  1081                          
  1082                          IF (LTRX_RXBUF_ENABLE)
  1083                          ;=============================================================================
  1084                          ;=============================================================================
  1085                          ;
  1086                          ;     Command Buffer commands
  1087                          ;
  1088                          ;=============================================================================
  1089                          ;=============================================================================
  1090                          
  1091                          .SECTION
  1092                          ;-----------------------------------------------------------------------------
  1093                          ;  FUNCTION NAME: LTRX_CmdReset
  1094                          ;
  1095                          ;  DESCRIPTION:
  1096                          ;     Reset command string and status flags
  1097                          ;-----------------------------------------------------------------------------
  1098                          ;
  1099                          ;  ARGUMENTS:
  1100                          ;     none.
  1101                          ;
  1102                          ;  RETURNS:
  1103                          ;     none.
  1104                          ;
  1105                          ;  SIDE EFFECTS:
  1106                          ;    The A and X registers may be modified by this or future implementations
  1107                          ;    of this function.  The same is true for all RAM page pointer registers in
  1108                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1109                          ;    responsibility to perserve their values across calls to fastcall16 
  1110                          ;    functions.
  1111                          ;          
  1112                          ;    Currently only the page pointer registers listed below are modified: 
  1113                          ;          CUR_PP
  1114                          ;
  1115                          ;  THEORY of OPERATION or PROCEDURE:
  1116                          ;     Clear the command buffer, command counter, and flag.
  1117                          ;
  1118  38CD                     LTRX_CmdReset:
  1119  38CD                    _LTRX_CmdReset:
  1120                             RAM_PROLOGUE RAM_USE_CLASS_4
  1121  38CD  62 D0 00             RAM_SETPAGE_CUR >LTRX_aRxBuffer
  1122  38D0  55 89  00            mov [LTRX_aRxBuffer], 0x00
  1123  38D3  62 D0 00             RAM_SETPAGE_CUR >LTRX_bRxCnt
  1124  38D6  55 87  00            mov [LTRX_bRxCnt], 0x00
  1125  38D9  26 86  00            and [LTRX_fStatus], 0x00
  1126  38DC  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1127  38DF  55 A5  00            mov [ptrParam],0x00
  1128                             RAM_EPILOGUE RAM_USE_CLASS_4
  1129  38E2  7F                   ret
  1130                          .ENDSECTION
  1131                          
  1132                          
  1133                          .SECTION
  1134                          ;-----------------------------------------------------------------------------
  1135                          ;  FUNCTION NAME: LTRX_bCmdCheck
  1136                          ;
  1137                          ;  DESCRIPTION:
  1138                          ;     Check to see if valid command in buffer.
  1139                          ;-----------------------------------------------------------------------------
  1140                          ;
  1141                          ;  ARGUMENTS:
  1142                          ;     none.
  1143                          ;
  1144                          ;  RETURNS:
  1145                          ;     BYTE  fStatus - Status of command receive buffer.
  1146                          ;                     Returns non-zero value in A if command is valid.
  1147                          ;
  1148                          ;  SIDE EFFECTS:
  1149                          ;    The A and X registers may be modified by this or future implementations
  1150                          ;    of this function.  The same is true for all RAM page pointer registers in
  1151                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1152                          ;    responsibility to perserve their values across calls to fastcall16 
  1153                          ;    functions.
  1154                          ;          
  1155                          ;    Currently only the page pointer registers listed below are modified: 
  1156                          ;          CUR_PP
  1157                          ;
  1158                          ;  THEORY of OPERATION or PROCEDURE:
  1159                          ;     Read the status and control register.
  1160                          ;
  1161  38E3                     LTRX_bCmdCheck:
  1162  38E3                    _LTRX_bCmdCheck:
  1163                             RAM_PROLOGUE RAM_USE_CLASS_4
  1164  38E3  62 D0 00             RAM_SETPAGE_CUR >LTRX_fStatus
  1165  38E6  51 86                mov A,  [LTRX_fStatus]
  1166  38E8  21 01                and A, LTRX_RX_BUF_CMDTERM                    ; Mask off Command status
  1167                             RAM_EPILOGUE RAM_USE_CLASS_4
  1168  38EA  7F                   ret
  1169                          .ENDSECTION
  1170                              
  1171                          
  1172                          .SECTION
  1173                          ;-----------------------------------------------------------------------------
  1174                          ;  FUNCTION NAME: LTRX_bErrCheck
  1175                          ;
  1176                          ;  DESCRIPTION:
  1177                          ;     Check to see if an error has occured since last CmdReset
  1178                          ;-----------------------------------------------------------------------------
  1179                          ;
  1180                          ;  ARGUMENTS:
  1181                          ;     none.
  1182                          ;
  1183                          ;  RETURNS:
  1184                          ;     BYTE  fStatus - Status of command receive buffer.
  1185                          ;                     Returns non-zero value in A if command is valid.
  1186                          ;           0x80 => Parity Error
  1187                          ;           0x40 => OverRun Error
  1188                          ;           0x20 => Framing Error
  1189                          ;           0x10 => Software Buffer OverRun
  1190                          ;
  1191                          ;  SIDE EFFECTS:
  1192                          ;    The A and X registers may be modified by this or future implementations
  1193                          ;    of this function.  The same is true for all RAM page pointer registers in
  1194                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1195                          ;    responsibility to perserve their values across calls to fastcall16 
  1196                          ;    functions.
  1197                          ;          
  1198                          ;    Currently only the page pointer registers listed below are modified: 
  1199                          ;          CUR_PP
  1200                          ;     Error Status is clear when read.
  1201                          ;
  1202                          ;  THEORY of OPERATION or PROCEDURE:
  1203                          ;     Read RX buffer error status and clear status
  1204                          ;
  1205  38EB                     LTRX_bErrCheck:
  1206  38EB                    _LTRX_bErrCheck:
  1207                             RAM_PROLOGUE RAM_USE_CLASS_4
  1208  38EB  62 D0 00             RAM_SETPAGE_CUR >LTRX_fStatus
  1209  38EE  51 86                mov A,  [LTRX_fStatus]
  1210  38F0  21 F0                and A, LTRX_RX_BUF_ERROR                      ; Mask off Error status
  1211  38F2  26 86  0F            and [LTRX_fStatus], ~LTRX_RX_BUF_ERROR
  1212                             RAM_EPILOGUE RAM_USE_CLASS_4
  1213  38F5  7F                   ret
  1214                          .ENDSECTION
  1215                          
  1216                          .SECTION
  1217                          ;-----------------------------------------------------------------------------
  1218                          ;  FUNCTION NAME: LTRX_bCmdLength
  1219                          ;
  1220                          ;  DESCRIPTION:
  1221                          ;     Get length of command string
  1222                          ;-----------------------------------------------------------------------------
  1223                          ;
  1224                          ;  ARGUMENTS:
  1225                          ;     none.
  1226                          ;
  1227                          ;  RETURNS:
  1228                          ;     BYTE  bRxCnt    Returns the command length in A.
  1229                          ;
  1230                          ;  SIDE EFFECTS:
  1231                          ;    The A and X registers may be modified by this or future implementations
  1232                          ;    of this function.  The same is true for all RAM page pointer registers in
  1233                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1234                          ;    responsibility to perserve their values across calls to fastcall16 
  1235                          ;    functions.
  1236                          ;          
  1237                          ;    Currently only the page pointer registers listed below are modified: 
  1238                          ;          CUR_PP
  1239                          ;
  1240  38F6                     LTRX_bCmdLength:
  1241  38F6                    _LTRX_bCmdLength:
  1242                             RAM_PROLOGUE RAM_USE_CLASS_4
  1243  38F6  62 D0 00             RAM_SETPAGE_CUR >LTRX_bRxCnt
  1244  38F9  51 87                mov A,  [LTRX_bRxCnt]
  1245                             RAM_EPILOGUE RAM_USE_CLASS_4
  1246  38FB  7F                   ret
  1247                          .ENDSECTION
  1248                          
  1249                          
  1250                          .SECTION
  1251                          ;-----------------------------------------------------------------------------
  1252                          ;  FUNCTION NAME: LTRX_szGetParam
  1253                          ;
  1254                          ;  DESCRIPTION:
  1255                          ;      Return next parameter from LTRX Rx buffer
  1256                          ;-----------------------------------------------------------------------------
  1257                          ;
  1258                          ;  ARGUMENTS:  none
  1259                          ;
  1260                          ;  RETURNS:
  1261                          ;     A => MSB of parameter address
  1262                          ;     X => LSB of parameter address
  1263                          ;
  1264                          ;  SIDE EFFECTS:
  1265                          ;    The A and X registers may be modified by this or future implementations
  1266                          ;    of this function.  The same is true for all RAM page pointer registers in
  1267                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1268                          ;    responsibility to perserve their values across calls to fastcall16 
  1269                          ;    functions.
  1270                          ;          
  1271                          ;    Currently only the page pointer registers listed below are modified: 
  1272                          ;          CUR_PP
  1273                          ;          IDX_PP
  1274                          ;
  1275                          ;     The receive string is modified by placing Null characters at the end
  1276                          ;     of each parameter as they are recovered.
  1277                          ;
  1278                          ;  THEORY OF OPERATION:
  1279                          ;     This function is a stateful generator of addresses to the "parameters"
  1280                          ;     of an input "Command". It scans the (optional) input buffer and breaks
  1281                          ;     each lexically distinct element into a null-terminated string by replacing
  1282                          ;     delimiters with nulls, as appropriate. The state of the generator is 
  1283                          ;     maintained by the private variable ptrParam, which is a buffer-relative
  1284                          ;     offset. The generator is initialized by a call to the function
  1285                          ;     LTRX_CmdReset which resets the entire buffer to the 'empty'
  1286                          ;     state. Typically this function, LTRX_szGetParam, is
  1287                          ;     not called until the buffer has been loaded with an entire command
  1288                          ;     (See LTRX_bCmdCheck).
  1289                          ;
  1290                          ;     Note, there is no special distinction between the "command" and the 
  1291                          ;     "parameters". The first non-delimiter character of the buffer---the first
  1292                          ;     character of the "command"---is also, for the purposes of this function,
  1293                          ;     the first "parameter" to which it returns an address.
  1294                          ;
  1295                          ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
  1296                          ;     is determined at configuration time by a user module parameter.
  1297                          ;
  1298  38FC                     LTRX_szGetParam:
  1299  38FC                    _LTRX_szGetParam:
  1300                             RAM_PROLOGUE RAM_USE_CLASS_4
  1301                             RAM_PROLOGUE RAM_USE_CLASS_3
  1302                              
  1303  38FC  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1304  38FF  50 89                mov   A, <LTRX_aRxBuffer                 ; Get address to receive buffer
  1305  3901  02 A5                add   A, [ptrParam]                      ; Add string offset
  1306  3903  5C                   mov   X, A
  1307  3904  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer
  1308  3907  52 00                mov   A, [X]                             ; Get character pointed by X
  1309  3909  B004                 jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
  1310  390B  10                   push  X                                  ;       Yes, Save LSB of current pointer
  1311  390C  8033                 jmp   .End_GetNextParam
  1312                                                                      ; Check for delimiter and keep looping until
  1313                                                                      ; all leading delimiters have been found.
  1314  390E                    .SkipOverDelimitersLoop:
  1315  390E  39 20                cmp   A, LTRX_DELIMITER                  ; Do we have a delimiter?
  1316  3910  B011                 jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
  1317  3912  75                   inc   X                                  ;   Yes, Increment both index and...
  1318  3913  76 A5                inc   [ptrParam]                         ;          the stored pointer.
  1319  3915  52 00                mov   A, [X]                             ; Get character pointed by X
  1320  3917  3C A5  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; End of buffer?
  1321  391A  BFF3                 jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
  1322                          
  1323  391C                    .EndOfString:                               ;   Yes, end of string found...
  1324  391C  10                   push  X                                  ;        Save ptr
  1325  391D                    .TerminateString:
  1326  391D  56 00 00             mov   [X], 0x00                          ; Make sure string is zero
  1327  3920  801F                 jmp   .End_GetNextParam
  1328                          
  1329  3922                    .ParamStartFound:
  1330  3922  10                   push  X                                  ; Beginning of parameter found, save pointer
  1331                          
  1332  3923                    .ParamLoop:                                 ; Now loop until end of parameter found.
  1333  3923  75                   inc   X                                  ; Advance pointers.
  1334  3924  76 A5                inc   [ptrParam]
  1335  3926  3C A5  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
  1336  3929  AFF3                 jz    .TerminateString
  1337  392B  52 00                mov   A, [X]                             ; Get next character
  1338  392D  A012                 jz    .End_GetNextParam
  1339  392F  39 20                cmp   A, LTRX_DELIMITER                  ; Check if we have a delimiter
  1340  3931  BFF1                 jnz   .ParamLoop                         ; Still no delimiter, loop again
  1341  3933  56 00 00             mov   [X], 0x00                          ; Replace delimiter with null for end of substring
  1342  3936  76 A5                inc   [ptrParam]
  1343  3938  3C A5  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
  1344  393B  B004                 jnz   .End_GetNextParam                  ; If not end of string leave
  1345  393D  55 A5  0F            mov   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
  1346                          
  1347  3940                    .End_GetNextParam:
  1348  3940  20                   pop   X
  1349  3941  10                   push  X
  1350  3942  3D 00 00             cmp   [X], 0x00
  1351  3945  B00B                 jnz   .NotNullString
  1352  3947  20                   pop   X
  1353  3948  57 00                mov   X, 0x00
  1354  394A  50 00                mov   A, >LTRX_aRxBuffer
  1355  394C  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
  1356                             RAM_EPILOGUE RAM_USE_CLASS_4
  1357  3950  7F                   ret
  1358                          
  1359  3951                    .NotNullString:
  1360  3951  20                   pop  X
  1361  3952  50 00                mov  A, >LTRX_aRxBuffer                  ; Return pointer
  1362  3954  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
  1363                             RAM_EPILOGUE RAM_USE_CLASS_4
  1364  3958  7F                   ret
  1365                          .ENDSECTION
  1366                          
  1367                          
  1368                          .SECTION
  1369                          ;-----------------------------------------------------------------------------
  1370                          ;  FUNCTION NAME: LTRX_szGetRestOfParams
  1371                          ;
  1372                          ;  DESCRIPTION:
  1373                          ;      Returns a pointer to the rest of the UART RX buffer
  1374                          ;-----------------------------------------------------------------------------
  1375                          ;
  1376                          ;  ARGUMENTS:  none
  1377                          ;
  1378                          ;  RETURNS:
  1379                          ;     A => MSB of parameter
  1380                          ;     X => LSB of parameter
  1381                          ;
  1382                          ;  SIDE EFFECTS:
  1383                          ;    The A and X registers may be modified by this or future implementations
  1384                          ;    of this function.  The same is true for all RAM page pointer registers in
  1385                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1386                          ;    responsibility to perserve their values across calls to fastcall16 
  1387                          ;    functions.
  1388                          ;          
  1389                          ;    Currently only the page pointer registers listed below are modified: 
  1390                          ;          CUR_PP
  1391                          ;
  1392  3959                     LTRX_szGetRestOfParams:
  1393  3959                    _LTRX_szGetRestOfParams:
  1394                             RAM_PROLOGUE RAM_USE_CLASS_4
  1395  3959  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1396  395C  50 89                mov  A, <LTRX_aRxBuffer                  ; Get address to receive buffer
  1397  395E  02 A5                add  A, [ptrParam]                       ; Add string offset
  1398  3960  5C                   mov  X,A
  1399  3961  50 00                mov  A,>LTRX_aRxBuffer                   ; Return pointer
  1400                             RAM_EPILOGUE RAM_USE_CLASS_4
  1401  3963  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:42 2009
              LTRX_RX_COMPLETE 0008          LTRX_szGetRestOfParams 3959                LTRX_RX_INT_MASK 0080  
                 LTRX_RX_ERROR 00E0                        MAC0_CL0 00EE                        MAC0_CL1 00EF  
                      MAC1_CL0 00AE                        MAC1_CL1 00AF                        CLEN_LSB FFFFFFFB  
                      CLEN_MSB FFFFFFFA                LTRX_RX_REG_FULL 0008                   LTRX_CmdReset 38CD  
                         MAC_X 00EC                           MAC_Y 00ED               LTRX_RX_BUF_ERROR 00F0  
                    LTRX_Start 379D                      LTRX_Write 385E                 LTRX_szGetParam 38FC  
               LTRX_PutSHexInt 380A                        CSTR_LSB FFFFFFFD                        CSTR_MSB FFFFFFFC  
       bfCONTROL_REG_START_BIT 0001         _LTRX_szGetRestOfParams 3959              LTRX_RX_BUFFER_REG 003E  
              LTRX_TX_FUNC_REG 0038           LTRX_RX_FRAMING_ERROR 0020                          ??0000 3811  
                        ??0001 3870                          ??0002 3897                     _LTRX_Start 379D  
                   _LTRX_Write 385E                   End_PutString 3859                   LTRX_SendData 37AD  
              LTRX_TX_INT_MASK 0040                   LTRX_cGetChar 3819                _LTRX_DisableInt 3784  
                   LTRX_CWrite 3884                          MAC0_X 00EC                          MAC0_Y 00ED  
                        MAC1_X 00AC                          MAC1_Y 00AD                          HITECH 0002  
               FLAG_PGMODE_01b 0040                 FLAG_PGMODE_10b 0080                          IDX_PP 00D3  
                        CUR_PP 00D0                     LTRX_bRxCnt 0087                  LTRX_EnableInt 377D  
              LTRX_bReadRxData 37B3                 LTRX_CPutString 38B2                LTRX_PutSHexByte 37F7  
            End_LTRX_cReadChar 3837             LTRX_RX_BUFFER_SIZE 0010                    _LTRX_CWrite 3884  
             LTRX_SetTxIntMode 378B               LTRX_RXBUF_ENABLE 0001               _LTRX_bReadRxData 37B3  
                LTRX_bCmdCheck 38E3               _LTRX_PutSHexByte 37F7                    LTRX_HEX_STR 37E7  
     SYSTEM_LARGE_MEMORY_MODEL 0001              End_LTRX_iReadChar 384D              LTRX_bReadRxStatus 37B6  
        SYSTEM_MULTIPAGE_STACK 0000                _LTRX_bCmdLength 38F6                  LTRX_bErrCheck 38EB  
            LTRX_bReadTxStatus 37B0                 LTRX_RX_INT_REG 00E1             LTRX_RX_CONTROL_REG 003F  
            bLTRX_ReadRxStatus 37B6                       LTRX_Stop 37A6                 LTRX_RX_NO_DATA 0001  
                       MAC_CL0 00EE                         MAC_CL1 00EF             LTRX_RX_BUF_CMDTERM 0001  
                       CNT_LEN FFFFFFFB              bLTRX_ReadTxStatus 37B0                  LTRX_cReadChar 3821  
                LTRX_TxIntMode 37B9             LTRX_TX_CONTROL_REG 003B                    LTRX_IntCntl 37CC  
                LTRX_aRxBuffer 0089                FLAG_PGMODE_MASK 00C0                      _LTRX_Stop 37A6  
               _LTRX_EnableInt 377D                 LTRX_TX_INT_REG 00E1                bLTRX_ReadRxData 37B3  
               RAM_USE_CLASS_1 0001                 RAM_USE_CLASS_2 0002                 RAM_USE_CLASS_3 0004  
               RAM_USE_CLASS_4 0008                    LTRX_PutCRLF 38C4              _LTRX_SetTxIntMode 378B  
                  LTRX_PutChar 3811                  LTRX_PutString 384E              LTRX_ENABLE_RX_INT 0001  
                       STR_LSB FFFFFFFD                         STR_MSB FFFFFFFC              LTRX_ENABLE_TX_INT 0002  
                  LTRX_fStatus 0086  bfFUNCTION_REG_TX_INT_MODE_BIT 0010                  LTRX_iReadChar 3838  
               LTRX_DisableInt 3784                _LTRX_szGetParam 38FC              LTRX_TX_BUFFER_REG 0039  
             _bLTRX_ReadRxData 37B3                _LTRX_PutSHexInt 380A                 _LTRX_bCmdCheck 38E3  
                      ptrParam 00A5                  _LTRX_CmdReset 38CD                  LTRX_DELIMITER 0020  
               _LTRX_bErrCheck 38EB                 _LTRX_cReadChar 3821                 _LTRX_TxIntMode 37B9  
                _LTRX_SendData 37AD       LTRX_INT_MODE_TX_COMPLETE 0001                  _LTRX_cGetChar 3819  
             SYSTEM_STACK_PAGE 0007            LTRX_TX_BUFFER_EMPTY 0010             _LTRX_bReadRxStatus 37B6  
              _LTRX_CPutString 38B2                   FLAG_XIO_MASK 0010                 _LTRX_PutString 384E  
                 _LTRX_IntCntl 37CC             _LTRX_bReadTxStatus 37B0      SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
          LTRX_RX_PARITY_ERROR 0080                   _LTRX_PutCRLF 38C4      SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           _bLTRX_ReadRxStatus 37B6                   _LTRX_PutChar 3811                 _LTRX_iReadChar 3838  
           _bLTRX_ReadTxStatus 37B0                 LTRX_bCmdLength 38F6  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:42 2009
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRX.inc
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module for the
     8                          ;;                22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          ;--------------------------------------------------
    15                          ; Constants for LTRX API's
    16                          ;--------------------------------------------------
    17                          
    18                          ;mask value for global int reg bit for TX instance
    19  0040                    LTRX_TX_INT_MASK:                            equ 0x40
    20  00E1                    LTRX_TX_INT_REG:                             equ 0x0e1  ;TX interrupt address
    21  0080                    LTRX_RX_INT_MASK:                            equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    22  00E1                    LTRX_RX_INT_REG:                             equ 0x0e1  ;RX interrupt address
    23                          
    24  0001                    LTRX_RXBUF_ENABLE:                           equ 1
    25                          
    26                          ; Interrupt control masks
    27  0001                    LTRX_ENABLE_RX_INT:                          equ 0x01
    28  0000                    LTRX_DISABLE_RX_INT:                         equ 0x00
    29  0002                    LTRX_ENABLE_TX_INT:                          equ 0x02
    30  0000                    LTRX_DISABLE_TX_INT:                         equ 0x00
    31                          
    32  0000                    LTRX_INT_MODE_TX_REG_EMPTY:                  equ 0x00
    33  0001                    LTRX_INT_MODE_TX_COMPLETE:                   equ 0x01
    34                          
    35  0020                    LTRX_RX_IGNORE_BELOW:                        equ 0x20
    36  0010                    LTRX_RX_BUFFER_SIZE:                         equ 0x10
    37  000D                    LTRX_CMD_TERM:                               equ 0xd
    38  0020                    LTRX_DELIMITER:                              equ 0x20
    39  0000                    LTRX_BACKSPACE_ENABLE:                       equ 0x0
    40                          
    41                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                          ;       WARNING WARNING WARNING
    43                          ; The following equates are for backwards
    44                          ; compatibility only and should not be used
    45                          ; for new designs.
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;------------------------------------
    49                          ;  Parity masks
    50                          ;------------------------------------
    51  0000                    UART_PARITY_NONE:       equ   00h
    52  0002                    UART_PARITY_EVEN:       equ   02h
    53  0006                    UART_PARITY_ODD:        equ   06h
    54                          
    55                          ;------------------------------------
    56                          ;  TX Status Register masks
    57                          ;------------------------------------
    58  0020                    UART_TX_COMPLETE:       equ   20h
    59  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    60                          
    61                          ;------------------------------------
    62                          ;  RX Status Register masks
    63                          ;------------------------------------
    64  0010                    UART_RX_ACTIVE:         equ   10h
    65  0008                    UART_RX_COMPLETE:       equ   08h
    66  0080                    UART_RX_PARITY_ERROR:   equ   80h
    67  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    68  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    69  00E0                    UART_RX_NO_ERROR:       equ   E0h
    70                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    71                          ;             END WARNING
    72                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    73                          
    74                          
    75                          
    76                          ;------------------------------------
    77                          ;  Parity masks
    78                          ;------------------------------------
    79  0000                    LTRX_PARITY_NONE:                       equ   00h
    80  0002                    LTRX_PARITY_EVEN:                       equ   02h
    81  0006                    LTRX_PARITY_ODD:                        equ   06h
    82                          
    83                          ;------------------------------------
    84                          ;  TX Status Register masks
    85                          ;------------------------------------
    86  0020                    LTRX_TX_COMPLETE:                       equ   20h
    87  0010                    LTRX_TX_BUFFER_EMPTY:                   equ   10h
    88                          
    89                          ;------------------------------------
    90                          ;  RX Status Register masks
    91                          ;------------------------------------
    92  0010                    LTRX_RX_ACTIVE:                         equ   10h
    93  0008                    LTRX_RX_COMPLETE:                       equ   08h
    94  0008                    LTRX_RX_REG_FULL:                       equ   08h
    95  0080                    LTRX_RX_PARITY_ERROR:                   equ   80h
    96  0040                    LTRX_RX_OVERRUN_ERROR:                  equ   40h
    97  0020                    LTRX_RX_FRAMING_ERROR:                  equ   20h
    98  00E0                    LTRX_RX_ERROR:                          equ   E0h
    99  0001                    LTRX_RX_ENABLE:                         equ   01h
   100                          
   101  00F0                    LTRX_RX_BUF_ERROR:                      equ   F0h  ; Mask for any Rx that may occur.
   102  0010                    LTRX_RX_BUF_OVERRUN:                    equ   10h  ; This indicates the software buffer has
   103                                                                                  ; been over run.
   104  0001                    LTRX_RX_BUF_CMDTERM:                    equ   01h  ; Command terminator has been received.
   105                          
   106  0001                    LTRX_RX_NO_DATA:                        equ   01h
   107  00E0                    LTRX_RX_NO_ERROR:                       equ   E0h
   108                          
   109                          
   110                          ;--------------------------------------------------
   111                          ; Registers Address Constants for LTRX
   112                          ;--------------------------------------------------
   113                          ;---------------------------------
   114                          ;  Registers used by TX
   115                          ;---------------------------------
   116  003B                    LTRX_TX_CONTROL_REG:    equ 3bh            ; Control register
   117  0038                    LTRX_TX_SHIFT_REG:  equ 38h               ; TX Shift Register register
   118  0039                    LTRX_TX_BUFFER_REG: equ 39h               ; TX Buffer Register
   119  0038                    LTRX_TX_FUNC_REG:   equ 38h             ; Function register
   120  0039                    LTRX_TX_INPUT_REG:  equ 39h             ; Input register
   121  003A                    LTRX_TX_OUTPUT_REG: equ 3ah             ; Output register
   122                          
   123                          ;---------------------------------
   124                          ;  Registers used by RX
   125                          ;---------------------------------
   126  003F                    LTRX_RX_CONTROL_REG:    equ 3fh            ; Control register
   127  003C                    LTRX_RX_SHIFT_REG:  equ 3ch               ; RX Shift Register register
   128  003E                    LTRX_RX_BUFFER_REG: equ 3eh               ; RX Buffer Register
   129  003C                    LTRX_RX_FUNC_REG:   equ 3ch             ; Function register
   130  003D                    LTRX_RX_INPUT_REG:  equ 3dh             ; Input register
   131  003E                    LTRX_RX_OUTPUT_REG: equ 3eh             ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202+ 0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRXINT.asm
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "LTRX.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _LTRX_TX_ISR
    22                          export  _LTRX_RX_ISR
    23                          
    24                          IF (LTRX_RXBUF_ENABLE)
    25                          export  LTRX_aRxBuffer
    26                          export _LTRX_aRxBuffer
    27                          export  LTRX_bRxCnt
    28                          export _LTRX_bRxCnt
    29                          export  LTRX_fStatus
    30                          export _LTRX_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (LTRX_RXBUF_ENABLE)
    40  0086                     LTRX_fStatus:
    41  0086                    _LTRX_fStatus:      BLK  1
    42  0087                     LTRX_bRxCnt:
    43  0087                    _LTRX_bRxCnt:       BLK  1
    44                          AREA LTRX_RAM (RAM, REL, CON)
    45  0089                     LTRX_aRxBuffer:
    46  0089                    _LTRX_aRxBuffer:    BLK LTRX_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _LTRX_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance LTRX.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  3964                    _LTRX_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom code above this banner
    99                             ;---------------------------------------------------
   100                             ;@PSoC_UserCode_END@ (Do not change this line.)
   101  3964  7E                   reti
   102                          
   103                          
   104                          ;-----------------------------------------------------------------------------
   105                          ;  FUNCTION NAME: _LTRX_RX_ISR
   106                          ;
   107                          ;  DESCRIPTION:
   108                          ;     UART RX interrupt handler for instance LTRX.
   109                          ;     This ISR handles the background processing of received characters if
   110                          ;     the buffer is enabled.
   111                          ;
   112                          ;
   113                          ;  The following assumes that the RX buffer feature has been enabled.
   114                          ;
   115                          ;  SIDE EFFECTS:
   116                          ;     There are 3 posible errors that may occur with the serial port.
   117                          ;      1) Parity Error
   118                          ;      2) Framing Error
   119                          ;      3) OverRun Error
   120                          ;
   121                          ;  This user module check for parity and framing error.  If either of these
   122                          ;  two errors are detected, the data is read and ignored.  When an overRun
   123                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   124                          ;  this reason this error is ignored at this time.  Code could be added to
   125                          ;  this ISR to set a flag if an error condition occurs.
   126                          ;
   127                          ;  THEORY of OPERATION:
   128                          ;     When using the RX buffer feature, the ISR collects received characters
   129                          ;     in a buffer until the user defined command terminator is detected.  After
   130                          ;     the command terminator is detected, the command bit is set and all other
   131                          ;     characters will be ignored until the command bit is reset.  Up to
   132                          ;     buffer_size - 1 characters will be collected waiting for a command
   133                          ;     terminator.  After that, the characters will be discarded, although
   134                          ;     a command determinator will still cause the command bit to be set.
   135                          ;
   136                          ;-----------------------------------------------------------------------------
   137  3965                    _LTRX_RX_ISR:
   138                          
   139                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   140                             ;---------------------------------------------------
   141                             ; Insert your custom code below this banner
   142                             ;---------------------------------------------------
   143                             ;   NOTE: interrupt service routines must preserve
   144                             ;   the values of the A and X CPU registers.
   145                          
   146                             ;---------------------------------------------------
   147                             ; Insert your custom code above this banner
   148                             ;---------------------------------------------------
   149                             ;@PSoC_UserCode_END@ (Do not change this line.)
   150                          
   151                          IF (LTRX_RXBUF_ENABLE)
   152  3965  08                   push A
   153  3966  10                   push X
   154                             
   155                             IF SYSTEM_LARGE_MEMORY_MODEL
   156  3967  5D D3                   REG_PRESERVE IDX_PP
   157                             ENDIF
   158                             
   159  396A  58 87                mov  X,[LTRX_bRxCnt]                                    ; Load X with byte counter
   160  396C  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Read the control register
   161  396E  08                   push A                                                  ; Store copy for later test
   162                                                                                     ; IF real RX interrupt
   163  396F  21 08                and  A,LTRX_RX_REG_FULL                                 ; Did really really get an IRQ
   164  3971  B004                 jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   165  3973  18                   pop  A                                                  ; Restore stack
   166  3974  805E                 jmp  .RESTORE_IDX_PP
   167                          
   168  3976                    .UARTRX_ReadRx:
   169  3976  18                   pop  A                                                  ; Restore status flags
   170                                                                                     ; IF there is no error, get data
   171                                                                                     ; Check for parity or framing error
   172  3977  21 E0                and  A,LTRX_RX_ERROR
   173  3979  A012                 jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   174                          
   175  397B  2C 86                or   [LTRX_fStatus],A                                   ; Set error flags (parity,framing,overrun
                                ) bits
   176  397D  49 3E 00             tst  REG[LTRX_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
   177  3980  21 20                and  A,LTRX_RX_FRAMING_ERROR                            ; Check for framing error special case
   178  3982  A050                 jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   179                          
   180                                                                                     ; Disable and re-enable RX to reset after
   181                                                                                     ; framing error.
   182  3984  41 3F FE             and   REG[LTRX_RX_CONTROL_REG], ~LTRX_RX_ENABLE         ; Disable RX
   183  3987  43 3F 01             or    REG[LTRX_RX_CONTROL_REG],  LTRX_RX_ENABLE         ; Enable RX
   184  398A  8048                 jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   185                          
   186                          
   187  398C                    .UARTRX_NO_ERROR:
   188  398C  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]                         ; Read the data buffer
   189                          
   190                                                                                     ; IF buffer not full
   191  398E  47 86  01            tst  [LTRX_fStatus],LTRX_RX_BUF_CMDTERM                 ; Check for buffer full
   192  3991  B041                 jnz  .RESTORE_IDX_PP                                    ; All done
   193                          
   194  3993  39 0D                cmp  A,LTRX_CMD_TERM                                    ; Check for End of command
   195  3995  B014                 jnz  .UARTRX_CHK_BACKSPACE
   196  3997  2E 86  01            or   [LTRX_fStatus],LTRX_RX_BUF_CMDTERM                 ; Set command ready bit
   197                          
   198                          
   199                          
   200  399A  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer
   201  399D  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   202  39A1  56 89  00            mov  [X + LTRX_aRxBuffer],00h                           ; Zero out last data
   203  39A4  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   204  39A8  802A                 jmp  .RESTORE_IDX_PP
   205                          
   206  39AA                    .UARTRX_CHK_BACKSPACE:                                     ; 
   207                          IF(LTRX_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
   208                             cmp  A,LTRX_BACKSPACE_ENABLE                            ; Check for backspace character
   209                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   210                             cmp  [LTRX_bRxCnt],00h                                  ; Check if buffer empty
   211                             jz   .RESTORE_IDX_PP                                    ; 
   212                             dec  [LTRX_bRxCnt]                                      ; Decrement buffer count by one.
   213                             jmp  .RESTORE_IDX_PP
   214                          ENDIF                                                      ; 
   215                          
   216  39AA                    .UARTRX_IGNORE:
   217                          IF(LTRX_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
   218  39AA  39 20                cmp  A,LTRX_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
   219  39AC  C026                 jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   220                          ENDIF
   221                          
   222  39AE                    .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   223                          	
   224  39AE  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer                         ;   using idexed address mode
   225  39B1  3C 87  0F            cmp  [LTRX_bRxCnt],(LTRX_RX_BUFFER_SIZE - 1)
   226  39B4  C011                 jc   .UARTRX_ISR_GETDATA
   227  39B6  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   228  39BA  56 89  00            mov  [X + LTRX_aRxBuffer],00h                           ; Zero out last data in the buffer
   229  39BD  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   230  39C1  2E 86  10            or   [LTRX_fStatus],LTRX_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun
                                ) bits
   231  39C4  800E                 jmp  .RESTORE_IDX_PP
   232                          
   233  39C6                    .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   234                                                                                     ; X is already loaded with pointer
   235  39C6  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   236  39CA  54 89                mov  [X+LTRX_aRxBuffer],A                               ; store data in array
   237  39CC  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   238  39D0  75                   inc  X                                                  ; Inc the pointer
   239  39D1  5A 87                mov  [LTRX_bRxCnt],X                                    ; Restore the pointer
   240                                                                                     ; ENDIF max string size
   241  39D3                    .RESTORE_IDX_PP:
   242                             IF SYSTEM_LARGE_MEMORY_MODEL
   243  39D3  18                      REG_RESTORE IDX_PP
   244                             ENDIF
   245                          
   246  39D6                    .END_UARTRX_ISR:
   247  39D6  20                   pop  X
   248  39D7  18                   pop  A
   249                          
   250                          ENDIF
   251                          
   252  39D8                    LTRX_RX_ISR_END:
   253  39D8  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:42 2009
             _LTRX_fStatus 0086               LTRX_RX_ERROR 00E0                    MAC0_CL0 00EE                    MAC0_CL1 00EF  
                  MAC1_CL0 00AE                    MAC1_CL1 00AF            LTRX_RX_REG_FULL 0008                       MAC_X 00EC  
                     MAC_Y 00ED          LTRX_RX_BUFFER_REG 003E       LTRX_RX_FRAMING_ERROR 0020              LTRX_RX_ENABLE 0001  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
                    HITECH 0002             FLAG_PGMODE_00b 0000             FLAG_PGMODE_10b 0080        LTRX_RX_IGNORE_BELOW 0020  
                    IDX_PP 00D3                 LTRX_bRxCnt 0087         LTRX_RX_BUFFER_SIZE 0010       LTRX_BACKSPACE_ENABLE 0000  
              _LTRX_RX_ISR 3965                _LTRX_TX_ISR 3964           LTRX_RXBUF_ENABLE 0001                _LTRX_bRxCnt 0087  
 SYSTEM_LARGE_MEMORY_MODEL 0001             LTRX_RX_ISR_END 39D8         LTRX_RX_CONTROL_REG 003F                     MAC_CL0 00EE  
                   MAC_CL1 00EF         LTRX_RX_BUF_CMDTERM 0001              LTRX_aRxBuffer 0089            FLAG_PGMODE_MASK 00C0  
       LTRX_RX_BUF_OVERRUN 0010                LTRX_fStatus 0086             _LTRX_aRxBuffer 0089               LTRX_CMD_TERM 000D  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:43 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.inc
     4                          ;;  Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the OneWire user module interface
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          
    13                          ;;*****************************************************************************
    14                          
    15                          ;--------------------------------
    16                          ;  Interrupt registers and masks
    17                          ;--------------------------------
    18  0040                    OneWire_BIT_INT_MASK:                   equ 0x40
    19  00DF                    OneWire_BIT_INT_REG:                    equ 0x0df
    20                          
    21                          IF (OneWire_BIT_INT_REG - INT_MSK1)
    22  00DC                    OneWire_BIT_INT_CLR:                    equ INT_CLR2
    23                          ELSE
    24                          OneWire_BIT_INT_CLR:                    equ INT_CLR1
    25                          ENDIF
    26                          
    27                          ;--------------------------------
    28                          ;  Parasite Power Pin selected
    29                          ;--------------------------------
    30  0001                    OneWire_OUT_PORT_DM1:                   equ PRT0DM1
    31  0001                    OneWire_OUT_PORT_MASK:                  equ 0x1
    32                          
    33                          ;---------------------------
    34                          ; One Wire constants and masks
    35                          ;---------------------------
    36  0000                    OneWire_CRC16_ENABLE:                   equ   0
    37  0001                    OneWire_SEARCH_ENABLE:                  equ   1
    38  0000                    OneWire_OVERDRIVE_ENABLE:               equ   0
    39  0000                    OneWire_PARASITE_ENABLE:                equ   0
    40                          
    41                          ;-----------------------------------------------
    42                          ;  Registers used by OneWire
    43                          ;-----------------------------------------------
    44  0054                    OneWire_BITCLK_FUNC_REG:    equ 54h              ;Function register
    45  0055                    OneWire_BITCLK_INPUT_REG:   equ 55h              ;Input register
    46  0056                    OneWire_BITCLK_OUTPUT_REG:  equ 56h              ;Output register
    47  0057                    OneWire_BITCLK_CONTROL_REG: equ 57h              ;Control register
    48  0054                    OneWire_BITCLK_COUNTER_REG: equ 54h              ;Counter register
    49  0055                    OneWire_BITCLK_PERIOD_REG:  equ 55h              ;Period register
    50  0056                    OneWire_BITCLK_COMPARE_REG: equ 56h              ;Compare register
    51  0058                    OneWire_XCVR_FUNC_REG:  equ 58h                  ;Function register
    52  0059                    OneWire_XCVR_INPUT_REG: equ 59h                  ;Input register
    53  005A                    OneWire_XCVR_OUTPUT_REG:    equ 5ah              ;Output register
    54  005B                    OneWire_XCVR_CONTROL_REG:   equ 5bh              ;Control register
    55  0058                    OneWire_XCVR_SHIFT_REG: equ 58h                  ;Counter register
    56  0059                    OneWire_XCVR_TX_BUFFER_REG: equ 59h              ;Period register
    57  005A                    OneWire_XCVR_RX_BUFFER_REG: equ 5ah              ;Compare register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.asm
     4                          ;;   Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: OneWire User Module software implementation file
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API function
    14                          ;;        returns. For Large Memory Model devices it is also the caller's
    15                          ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;   Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "OneWire.inc"
    26                          
    27                          export  OneWire_Start
    28                          export _OneWire_Start
    29                          export  OneWire_Stop
    30                          export _OneWire_Stop
    31                          
    32                          export  OneWire_fReset
    33                          export _OneWire_fReset
    34                          export  OneWire_WriteBit
    35                          export _OneWire_WriteBit
    36                          export  OneWire_bReadBit
    37                          export _OneWire_bReadBit
    38                          export  OneWire_WriteByte
    39                          export _OneWire_WriteByte
    40                          export  OneWire_bReadByte
    41                          export _OneWire_bReadByte
    42                          export  OneWire_ClearCRC8
    43                          export _OneWire_ClearCRC8
    44                          export  OneWire_bCRC8
    45                          export _OneWire_bCRC8
    46                          
    47                          export  OneWire_bCRC8Value
    48                          export _OneWire_bCRC8Value
    49                          IF (OneWire_CRC16_ENABLE)
    50                          export  OneWire_ClearCRC16
    51                          export _OneWire_ClearCRC16
    52                          export  OneWire_wCRC16
    53                          export _OneWire_wCRC16
    54                          export  OneWire_wCRC16Value
    55                          export _OneWire_wCRC16Value
    56                          ENDIF
    57                          
    58                          IF (OneWire_SEARCH_ENABLE)
    59                          export   OneWire_GetROM
    60                          export  _OneWire_GetROM
    61                          export   OneWire_SetROM
    62                          export  _OneWire_SetROM
    63                          export   OneWire_fFindFirst
    64                          export  _OneWire_fFindFirst
    65                          export   OneWire_fFindNext
    66                          export  _OneWire_fFindNext
    67                          export   OneWire_fVerify
    68                          export  _OneWire_fVerify
    69                          export   OneWire_FamilyTargetSetup
    70                          export  _OneWire_FamilyTargetSetup
    71                          export   OneWire_FamilySkipSetup
    72                          export  _OneWire_FamilySkipSetup
    73                          ENDIF
    74                          
    75                          IF (OneWire_OVERDRIVE_ENABLE)
    76                          export  OneWire_SetOverdrive
    77                          export _OneWire_SetOverdrive
    78                          export  OneWire_ClearOverdrive
    79                          export _OneWire_ClearOverdrive
    80                          ENDIF
    81                          
    82                          IF (OneWire_PARASITE_ENABLE)
    83                          export  OneWire_WriteByteStrong
    84                          export _OneWire_WriteByteStrong
    85                          export  OneWire_SetResistive
    86                          export _OneWire_SetResistive
    87                          ENDIF
    88                          
    89                          AREA bss
    90                          
    91  0099                    _OneWire_bCRC8Value:
    92  0099                     OneWire_bCRC8Value:                             blk   1
    93                          
    94                          IF (OneWire_CRC16_ENABLE)
    95                          _OneWire_wCRC16Value:
    96                           OneWire_wCRC16Value:                            blk   2
    97                          ENDIF
    98                          
    99                          IF (OneWire_SEARCH_ENABLE)
   100  009A                    OneWire_ROM:                                     blk   8
   101  00A2                    OneWire_LastDiscrepancy:                         blk   1
   102  00A3                    OneWire_LastFamilyDiscrepancy:                   blk   1
   103  00A4                    OneWire_LastDeviceFlag:                          blk   1
   104                          ENDIF
   105                          
   106                          IF (OneWire_OVERDRIVE_ENABLE )
   107                          OneWire_bMode:                                   blk   1
   108                          ENDIF
   109                          
   110                          AREA UserModules (ROM, REL)
   111                          
   112  00F1                    RESET_PATTERN:                          equ   F1h
   113  0001                    ZERO_PATTERN:                           equ   01h
   114  00FD                    ONE_PATTERN:                            equ   FDh
   115  000F                    INIT_PERIOD:                            equ   0Fh
   116  00F9                    RESET_PERIOD:                           equ   F9h      ;Divide by 250 (249+1)
   117  000D                    BIT_PERIOD:                             equ   0Dh      ;Divide by 14 (13+1)
   118  0019                    OD_RESET_PERIOD:                        equ   19h      ;Divide by 26 (25+1)
   119  0001                    OD_BIT_PERIOD:                          equ   01h      ;Divide by 2 (1+1)
   120                          
   121  0020                    SPIM_SPI_COMPLETE:              equ 0x20    ;SPI Tx/Rx cycle has completed
   122  0000                    SPIM_MODE_0:                   equ 0x00    ; MODE 0 - Leading edge latches data - pos clock
   123  0080                    SPIM_LSB_FIRST:                equ 0x80    ; LSB bit transmitted/received first
   124  0001                    CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
   125  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
   126  000F                    INPUT_REG_CLOCK_MASK:          equ 0x0F    ; Input register clock mask
   127  0001                    OD_MODE:                       equ 0x01    ;OverDrive
   128                          
   129                          .SECTION
   130                          ;-----------------------------------------------------------------------------
   131                          ;  FUNCTION NAME: OneWire_Start
   132                          ;
   133                          ;  DESCRIPTION:
   134                          ;     Enables the clock divider and tranceiver blocks.  Initializes the
   135                          ;     OneWireOut pin to high.  Sets the clock divider period.
   136                          ;-----------------------------------------------------------------------------
   137                          ;  ARGUMENTS:
   138                          ;     none.
   139                          ;
   140                          ;  RETURNS:
   141                          ;     none.
   142                          ;
   143                          ;  SIDE EFFECTS:
   144                          ;    The A and X registers may be modified by this or future implementations
   145                          ;    of this function.  The same is true for all RAM page pointer registers in
   146                          ;    the Large Memory Model.  When necessary, it is the calling function's
   147                          ;    responsibility to perserve their values across calls to fastcall16
   148                          ;    functions.   Currently only the page pointer registers listed below are modified:
   149                          ;       CUR_PP
   150                          ;
   151                          ;  THEORY of OPERATION:
   152                          ;     Set the start bit in the Control register.
   153                          ;-----------------------------------------------------------------------------
   154  39D9                     OneWire_Start:
   155  39D9                    _OneWire_Start:
   156                             RAM_PROLOGUE RAM_USE_CLASS_4
   157                          
   158                          IF (OneWire_OVERDRIVE_ENABLE | OneWire_PARASITE_ENABLE)
   159                              RAM_SETPAGE_CUR >OneWire_bMode
   160                              mov   [OneWire_bMode], 00h
   161                          ENDIF
   162  39D9  62 55 0F              mov   reg[OneWire_BITCLK_PERIOD_REG], INIT_PERIOD        ; Set divider period to initialize OneW
                                ireOut
   163  39DC  43 57 01              or    reg[OneWire_BITCLK_CONTROL_REG], CONTROL_REG_START_BIT  ; Start the clock divider
   164  39DF  62 5B 81              mov   reg[OneWire_XCVR_CONTROL_REG], SPIM_MODE_0|SPIM_LSB_FIRST|CONTROL_REG_START_BIT
   165  39E2  50 FF                 mov   A, FFh                                 ; Initialize OneWireOut to high
   166  39E4  92EF                  call  OneWire_SendTxDataWait
   167  39E6  62 55 0D              mov   reg[OneWire_BITCLK_PERIOD_REG], BIT_PERIOD
   168                          
   169                              RAM_EPILOGUE RAM_USE_CLASS_4
   170  39E9  7F                    ret
   171                          .ENDSECTION
   172                          
   173                          .SECTION
   174                          ;-----------------------------------------------------------------------------
   175                          ;  FUNCTION NAME: OneWire_Stop
   176                          ;
   177                          ;  DESCRIPTION:
   178                          ;     Disables BitClk and XCVR operation.
   179                          ;-----------------------------------------------------------------------------
   180                          ;  ARGUMENTS:
   181                          ;     none.
   182                          ;
   183                          ;  RETURNS:
   184                          ;     none.
   185                          ;
   186                          ;  SIDE EFFECTS:
   187                          ;    The A and X registers may be modified by this or future implementations
   188                          ;    of this function.  The same is true for all RAM page pointer registers in
   189                          ;    the Large Memory Model.  When necessary, it is the calling function's
   190                          ;    responsibility to preserve their values across calls to fastcall16
   191                          ;    functions.
   192                          ;
   193                          ;  THEORY of OPERATION:
   194                          ;     Clear the start bits in the Control registers.
   195                          ;-----------------------------------------------------------------------------
   196  39EA                     OneWire_Stop:
   197  39EA                    _OneWire_Stop:
   198                              RAM_PROLOGUE RAM_USE_CLASS_1
   199                          
   200  39EA  41 57 FE              and   reg[OneWire_BITCLK_CONTROL_REG], ~CONTROL_REG_START_BIT
   201  39ED  41 5B FE              and   reg[OneWire_XCVR_CONTROL_REG], ~CONTROL_REG_START_BIT
   202                          
   203                              RAM_EPILOGUE RAM_USE_CLASS_1
   204  39F0  7F                    ret
   205                          .ENDSECTION
   206                          
   207                          .SECTION
   208                          ;-----------------------------------------------------------------------------
   209                          ;  FUNCTION NAME: OneWire_fReset
   210                          ;
   211                          ;  DESCRIPTION:
   212                          ;     Reset the OneWireOut pin
   213                          ;-----------------------------------------------------------------------------
   214                          ;
   215                          ;  ARGUMENTS:
   216                          ;     none.
   217                          ;
   218                          ;  RETURNS:
   219                          ;     A = 01h if one or more devices responded.
   220                          ;
   221                          ;  SIDE EFFECTS:
   222                          ;    The A and X registers may be modified by this or future implementations
   223                          ;    of this function.  The same is true for all RAM page pointer registers in
   224                          ;    the Large Memory Model.  When necessary, it is the calling function's
   225                          ;    responsibility to preserve their values across calls to fastcall16
   226                          ;    functions. Currently only the page pointer registers listed below
   227                          ;    are modified: CUR_PP
   228                          ;
   229                          ;-----------------------------------------------------------------------------
   230  39F1                     OneWire_fReset:
   231  39F1                    _OneWire_fReset:
   232                              RAM_PROLOGUE RAM_USE_CLASS_4
   233                          
   234                          IF (OneWire_OVERDRIVE_ENABLE)
   235                              RAM_SETPAGE_CUR >OneWire_bMode
   236                          ENDIF
   237  39F1  50 F9                 mov   A, RESET_PERIOD                        ; Reset period
   238                          IF (OneWire_OVERDRIVE_ENABLE)
   239                              tst   [OneWire_bMode],OD_MODE                ; Test for OverDrive mode
   240                              jz    .Reset_Normal
   241                              mov   reg[OneWire_BITCLK_PERIOD_REG], OD_RESET_PERIOD  ; OverDrive Reset period
   242                              mov   A, RESET_PATTERN                       ; Reset bit pattern
   243                              call  OneWire_SendTxDataWait
   244                              mov   A, OD_BIT_PERIOD                       ; OverDrive Bit period
   245                              jmp   .Reset_WriteBitPeriod
   246                          ENDIF
   247  39F3                    .Reset_Normal:
   248  39F3  60 55                 mov   reg[OneWire_BITCLK_PERIOD_REG], A
   249  39F5  50 F1                 mov   A, RESET_PATTERN                       ; Reset bit pattern
   250  39F7  92DC                  call  OneWire_SendTxDataWait
   251  39F9  50 0D                 mov   A, BIT_PERIOD                          ; Bit period
   252  39FB                    .Reset_WriteBitPeriod:
   253  39FB  60 55                 mov   reg[OneWire_BITCLK_PERIOD_REG], A
   254  39FD  5D 5A                 mov   A, reg[OneWire_XCVR_RX_BUFFER_REG]
   255  39FF  39 F1                 cmp   A, RESET_PATTERN
   256  3A01  D005                  jnc   .Reset_NoResponse
   257  3A03  50 01                 mov   A,01h
   258  3A05  8003                  jmp   .Reset_done
   259  3A07                    .Reset_NoResponse:
   260  3A07  50 00                 mov   A,00h
   261  3A09                    .Reset_done:
   262                          
   263                              RAM_EPILOGUE RAM_USE_CLASS_4
   264  3A09  7F                    ret
   265                          .ENDSECTION
   266                          
   267                          .SECTION
   268                          ;-----------------------------------------------------------------------------
   269                          ;  FUNCTION NAME: OneWire_WriteBit
   270                          ;
   271                          ;  DESCRIPTION:
   272                          ;     Write a bit to the OneWireOut pin.
   273                          ;-----------------------------------------------------------------------------
   274                          ;  ARGUMENTS:
   275                          ;     A  => less significant bit is output to OneWireOut pin
   276                          ;
   277                          ;  RETURNS:
   278                          ;     none.
   279                          ;
   280                          ;  SIDE EFFECTS:
   281                          ;    The A and X registers may be modified by this or future implementations
   282                          ;    of this function.  The same is true for all RAM page pointer registers in
   283                          ;    the Large Memory Model.  When necessary, it is the calling function's
   284                          ;    responsibility to preserve their values across calls to fastcall16
   285                          ;    functions.
   286                          ;
   287                          ;-----------------------------------------------------------------------------
   288  3A0A                     OneWire_WriteBit:
   289  3A0A                    _OneWire_WriteBit:
   290                              RAM_PROLOGUE RAM_USE_CLASS_1
   291                          
   292  3A0A  6D                    rrc   A                                      ; Rotate LSB into CF to test
   293  3A0B  C005                  jc    .WriteBit_1                            ; LSB is 1
   294  3A0D  50 01                 mov   A, ZERO_PATTERN                        ; "0" bit pattern
   295  3A0F  8003                  jmp   .WriteBit_Send
   296  3A11                    .WriteBit_1:
   297  3A11  50 FD                 mov   A, ONE_PATTERN                         ; "1" bit pattern
   298  3A13                    .WriteBit_Send:
   299  3A13  92C0                  call  OneWire_SendTxDataWait
   300                          
   301                              RAM_EPILOGUE RAM_USE_CLASS_1
   302  3A15  7F                    ret
   303                          .ENDSECTION
   304                          
   305                          
   306                          .SECTION
   307                          ;-----------------------------------------------------------------------------
   308                          ;  FUNCTION NAME: OneWire_bReadBit
   309                          ;
   310                          ;  DESCRIPTION:
   311                          ;     Read the OneWireIn pin
   312                          ;-----------------------------------------------------------------------------
   313                          ;
   314                          ;  ARGUMENTS:
   315                          ;     none.
   316                          ;
   317                          ;  RETURNS:
   318                          ;     the less significant bit of A returns value read from OneWire pin.
   319                          ;
   320                          ;  SIDE EFFECTS:
   321                          ;    The A and X registers may be modified by this or future implementations
   322                          ;    of this function.  The same is true for all RAM page pointer registers in
   323                          ;    the Large Memory Model.  When necessary, it is the calling function's
   324                          ;    responsibility to preserve their values across calls to fastcall16
   325                          ;    functions.
   326                          ;
   327                          ;-----------------------------------------------------------------------------
   328  3A16                     OneWire_bReadBit:
   329  3A16                    _OneWire_bReadBit:
   330                              RAM_PROLOGUE RAM_USE_CLASS_1
   331                          
   332  3A16  50 FD                 mov    A, ONE_PATTERN
   333  3A18  92BB                  call   OneWire_SendTxDataWait
   334  3A1A  5D 5A                 mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
   335  3A1C  39 FD                 cmp    A, ONE_PATTERN
   336  3A1E  D005                  jnc    .ReadBit_One
   337  3A20  50 00                 mov    A, 00h
   338  3A22  8003                  jmp    .Done
   339  3A24                    .ReadBit_One:
   340  3A24  50 01                 mov    A, 01h
   341  3A26                    .Done:
   342                          
   343                              RAM_EPILOGUE RAM_USE_CLASS_1
   344  3A26  7F                    ret
   345                          .ENDSECTION
   346                          
   347                          .SECTION
   348                          ;-----------------------------------------------------------------------------
   349                          ;  FUNCTION NAME: OneWire_WriteByte
   350                          ;
   351                          ;  DESCRIPTION:
   352                          ;     Write a byte to the OneWireOut pin
   353                          ;-----------------------------------------------------------------------------
   354                          ;
   355                          ;  ARGUMENTS:
   356                          ;     A => byte output to the OneWireOut pin
   357                          ;
   358                          ;  RETURNS:
   359                          ;     none.
   360                          ;
   361                          ;  SIDE EFFECTS:
   362                          ;    The A and X registers may be modified by this or future implementations
   363                          ;    of this function.  The same is true for all RAM page pointer registers in
   364                          ;    the Large Memory Model.  When necessary, it is the calling function's
   365                          ;    responsibility to preserve their values across calls to fastcall16
   366                          ;    functions.
   367                          ;
   368                          ;-----------------------------------------------------------------------------
   369  3A27                     OneWire_WriteByte:
   370  3A27                    _OneWire_WriteByte:
   371                              RAM_PROLOGUE RAM_USE_CLASS_1
   372                              
   373  3A27  08                    push   A
   374  3A28  57 08                 mov    X, 08h
   375  3A2A                    .ByteLoop:
   376  3A2A  18                    pop    A
   377  3A2B  6D                    rrc    A
   378  3A2C  08                    push   A
   379  3A2D  C005                  jc     .LoadPattern_1
   380  3A2F  50 01                 mov    A, ZERO_PATTERN
   381  3A31  8003                  jmp    .SendPattern
   382  3A33                    .LoadPattern_1:
   383  3A33  50 FD                 mov    A, ONE_PATTERN
   384  3A35                    .SendPattern:
   385  3A35  60 59             	mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
   386  3A37                    .WaitForEmptyBuf:
   387  3A37  5D 5B                 mov    A, reg[OneWire_XCVR_CONTROL_REG]
   388  3A39  21 20                 and    A, SPIM_SPI_COMPLETE
   389  3A3B  AFFB                  jz     .WaitForEmptyBuf
   390  3A3D  79                    dec    X
   391  3A3E  BFEB                  jnz    .ByteLoop
   392  3A40  18                    pop    A
   393                          
   394                              RAM_EPILOGUE RAM_USE_CLASS_1
   395  3A41  7F                    ret
   396                          .ENDSECTION
   397                          
   398                          .SECTION
   399                          ;-----------------------------------------------------------------------------
   400                          ;  FUNCTION NAME: OneWire_bReadByte
   401                          ;
   402                          ;  DESCRIPTION:
   403                          ;     Read a byte from the OneWireIn pin
   404                          ;-----------------------------------------------------------------------------
   405                          ;
   406                          ;  ARGUMENTS:
   407                          ;     none.
   408                          ;
   409                          ;  RETURNS:
   410                          ;     A returns byte read from OneWireIn pin.
   411                          ;
   412                          ;  SIDE EFFECTS:
   413                          ;    The A and X registers may be modified by this or future implementations
   414                          ;    of this function.  The same is true for all RAM page pointer registers in
   415                          ;    the Large Memory Model.  When necessary, it is the calling function's
   416                          ;    responsibility to perserve their values across calls to fastcall16
   417                          ;    functions.
   418                          ;
   419                          ;-----------------------------------------------------------------------------
   420  3A42                     OneWire_bReadByte:
   421  3A42                    _OneWire_bReadByte:
   422                              RAM_PROLOGUE RAM_USE_CLASS_1
   423                              
   424  3A42  08                    push   A
   425  3A43  57 08                 mov    X,08h
   426  3A45                    .ByteLoop:
   427  3A45  50 FD                 mov    A, ONE_PATTERN
   428  3A47  928C                  call   OneWire_SendTxDataWait
   429  3A49  5D 5A                 mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
   430  3A4B  39 FD                 cmp    A, ONE_PATTERN
   431  3A4D  18                    pop    A
   432  3A4E  6D                    rrc    A
   433  3A4F  08                    push   A
   434  3A50  79                    dec    X
   435  3A51  BFF3                  jnz    .ByteLoop
   436  3A53  18                    pop    A
   437  3A54  73                	cpl    A
   438                              RAM_EPILOGUE RAM_USE_CLASS_1
   439                              
   440  3A55  7F                    ret
   441                          .ENDSECTION
   442                          
   443                          .SECTION
   444                          ;-----------------------------------------------------------------------------
   445                          ;  FUNCTION NAME: OneWire_ClearCRC8
   446                          ;
   447                          ;  DESCRIPTION:
   448                          ;     Clear the CRC8 RAM location
   449                          ;-----------------------------------------------------------------------------
   450                          ;
   451                          ;  ARGUMENTS:
   452                          ;     none.
   453                          ;
   454                          ;  RETURNS:
   455                          ;     none.
   456                          ;
   457                          ;  SIDE EFFECTS:
   458                          ;    The A and X registers may be modified by this or future implementations
   459                          ;    of this function.  The same is true for all RAM page pointer registers in
   460                          ;    the Large Memory Model.  When necessary, it is the calling function's
   461                          ;    responsibility to preserve their values across calls to fastcall16
   462                          ;    functions.   Currently only the page pointer registers listed below are modified:
   463                          ;    CUR_PP
   464                          ;
   465                          ;-----------------------------------------------------------------------------
   466  3A56                     OneWire_ClearCRC8:
   467  3A56                    _OneWire_ClearCRC8:
   468                              RAM_PROLOGUE RAM_USE_CLASS_4
   469  3A56  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   470                              
   471  3A59  55 99  00             mov   [OneWire_bCRC8Value], 00h
   472                              
   473                              RAM_EPILOGUE RAM_USE_CLASS_4
   474  3A5C  7F                    ret
   475                          .ENDSECTION
   476                          
   477                          .SECTION
   478                          ;-----------------------------------------------------------------------------
   479                          ;  FUNCTION NAME: OneWire_bCRC8
   480                          ;
   481                          ;  DESCRIPTION:
   482                          ;     CRC for One Wire
   483                          ;-----------------------------------------------------------------------------
   484                          ;
   485                          ;  ARGUMENTS:
   486                          ;     A contains the byte to CRC.
   487                          ;
   488                          ;  RETURNS:
   489                          ;     A contains current CRC value.
   490                          ;
   491                          ;  SIDE EFFECTS:
   492                          ;    The A and X registers may be modified by this or future implementations
   493                          ;    of this function.  The same is true for all RAM page pointer registers in
   494                          ;    the Large Memory Model.  When necessary, it is the calling function's
   495                          ;    responsibility to preserve their values across calls to fastcall16
   496                          ;    functions. Currently only the page pointer registers listed below are modified:
   497                          ;     CUR_PP
   498                          ;-----------------------------------------------------------------------------
   499  3A5D                     OneWire_bCRC8:
   500  3A5D                    _OneWire_bCRC8:
   501                              RAM_PROLOGUE RAM_USE_CLASS_4
   502  3A5D  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   503                              
   504  3A60  08                    push  A                                      ; Save the bits to shift
   505  3A61  57 08                 mov   X, 08h                                 ; Set up to shift one byte
   506  3A63                    .OW_crc8_loop:
   507  3A63  32 99                 xor   A, [OneWire_bCRC8Value]                ; Determine feedback
   508  3A65  6D                    rrc   A                                      ; Move it into CF
   509  3A66  D004                  jnc   .OW_crc8_FB_zero                       ; If feedback is 0, no XOR of the byte needed
   510  3A68  36 99  18             xor   [OneWire_bCRC8Value],18h               ; XOR the CRC byte
   511  3A6B                    .OW_crc8_FB_zero:
   512  3A6B  6E 99                 rrc   [OneWire_bCRC8Value]                   ; Rotate CF into the CRC byte
   513  3A6D  18                    pop   A                                      ; Restore the remaining bits
   514  3A6E  6D                    rrc   A                                      ; Rotate for the next bit
   515  3A6F  08                    push  A                                      ; Save the remaining bits
   516  3A70  79                    dec   X                                      
   517  3A71  BFF1                  jnz   .OW_crc8_loop                          ; Loop until whole input byte is shifted
   518  3A73  18                    pop   A                                      ; Clean up stack
   519  3A74  51 99                 mov   A, [OneWire_bCRC8Value]                ; Load computed CRC byte into A
   520                              
   521                              RAM_EPILOGUE RAM_USE_CLASS_4
   522  3A76  7F                    ret
   523                          .ENDSECTION
   524                          
   525                          IF (OneWire_CRC16_ENABLE)
   526                          .SECTION
   527                          ;-----------------------------------------------------------------------------
   528                          ;  FUNCTION NAME: OneWire_ClearCRC16
   529                          ;
   530                          ;  DESCRIPTION:
   531                          ;     Clear the CRC16 RAM locations
   532                          ;-----------------------------------------------------------------------------
   533                          ;  ARGUMENTS:
   534                          ;     none.
   535                          ;
   536                          ;  RETURNS:
   537                          ;     none.
   538                          ;
   539                          ;  SIDE EFFECTS:
   540                          ;    The A and X registers may be modified by this or future implementations
   541                          ;    of this function.  The same is true for all RAM page pointer registers in
   542                          ;    the Large Memory Model.  When necessary, it is the calling function's
   543                          ;    responsibility to preserve their values across calls to fastcall16
   544                          ;    functions. Currently only the page pointer registers listed below are modified:
   545                          ;     CUR_PP
   546                          ;
   547                          ;-----------------------------------------------------------------------------
   548                           OneWire_ClearCRC16:
   549                          _OneWire_ClearCRC16:
   550                              RAM_PROLOGUE RAM_USE_CLASS_4
   551                              RAM_SETPAGE_CUR >OneWire_wCRC16Value
   552                              
   553                              mov   [OneWire_wCRC16Value+0],00h
   554                              mov   [OneWire_wCRC16Value+1],00h
   555                                  
   556                              RAM_EPILOGUE RAM_USE_CLASS_4
   557                              ret
   558                          .ENDSECTION
   559                          
   560                          .SECTION
   561                          ;-----------------------------------------------------------------------------
   562                          ;  FUNCTION NAME: OneWire_wCRC16
   563                          ;
   564                          ;  DESCRIPTION:
   565                          ;     CRC-16 for One Wire
   566                          ;-----------------------------------------------------------------------------
   567                          ;  ARGUMENTS:
   568                          ;     A contains the byte to CRC.
   569                          ;
   570                          ;  RETURNS:
   571                          ;     A contains current CRC LO byte value.
   572                          ;     X contains current CRC HI byte value.
   573                          ;     This returns as an unsigned integer in C.
   574                          ;
   575                          ;  SIDE EFFECTS:
   576                          ;    The A and X registers may be modified by this or future implementations
   577                          ;    of this function.  The same is true for all RAM page pointer registers in
   578                          ;    the Large Memory Model.  When necessary, it is the calling function's
   579                          ;    responsibility to preserve their values across calls to fastcall16
   580                          ;    functions.  Currently only the page pointer registers listed below are modified:
   581                          ;     CUR_PP
   582                          ;
   583                          ;-----------------------------------------------------------------------------
   584                           OneWire_wCRC16:
   585                          _OneWire_wCRC16:
   586                              RAM_PROLOGUE RAM_USE_CLASS_4
   587                              RAM_SETPAGE_CUR >OneWire_wCRC16Value
   588                              
   589                              push  A                                      ; Save the bits to shift
   590                              mov   X,08h                                  ; Set up to shift one byte
   591                          .CRC16_loop:
   592                              xor   A,[OneWire_wCRC16Value+1]              ; Determine feedback
   593                              rrc   A                                      ; Move it into CF
   594                              jnc   .CRC16_FB_zero                         ; If feedback is 0, no XOR of the byte needed
   595                              xor   [OneWire_wCRC16Value+0],40h            ; XOR the CRC HI byte
   596                              xor   [OneWire_wCRC16Value+1],02h            ; XOR the CRC LO byte
   597                          .CRC16_FB_zero:
   598                              rrc   [OneWire_wCRC16Value+0]                ; Rotate CF into the CRC HI byte
   599                              rrc   [OneWire_wCRC16Value+1]                ; Rotate CF into the CRC LO byte
   600                              pop   A                                      ; Restore the remaining bits
   601                              rrc   A                                      ; Rotate for the next bit
   602                              push  A                                      ; Save the remaining bits
   603                              dec   X
   604                              jnz   .CRC16_loop                            ; Loop until whole input byte is shifted
   605                              pop   A                                      ; Clean up stack
   606                              mov   X,[OneWire_wCRC16Value+0]              ; Load computed CRC HI byte into X
   607                              mov   A,[OneWire_wCRC16Value+1]              ; Load computed CRC LO byte into A
   608                          
   609                              RAM_EPILOGUE RAM_USE_CLASS_4
   610                              ret
   611                          .ENDSECTION
   612                          ENDIF
   613                          
   614                          IF (OneWire_SEARCH_ENABLE)
   615                          .SECTION
   616                          ;-----------------------------------------------------------------------------
   617                          ;  FUNCTION NAME: OneWire_GetROM
   618                          ;
   619                          ;  DESCRIPTION:
   620                          ;     Takes the RAM defined for holding a 64-bit 1-Wire ROM number and
   621                          ;     passes it via a pointer in A and X.
   622                          ;-----------------------------------------------------------------------------
   623                          ;
   624                          ;  ARGUMENTS:
   625                          ;     A:X - contains pointer
   626                          ;       X - contains LSB of the pointer to the RAM buffer
   627                          ;       A - contains MSB or page of the pointer to the RAM buffer
   628                          ;
   629                          ;  RAM BUFFER CONTENTS:
   630                          ;     OneWire_ROM = ROM number of 1-Wire device
   631                          ;
   632                          ;  RETURNS:
   633                          ;     none.
   634                          ;
   635                          ;  SIDE EFFECTS:
   636                          ;    The A and X registers may be modified by this or future implementations
   637                          ;    of this function.  The same is true for all RAM page pointer registers in
   638                          ;    the Large Memory Model.  When necessary, it is the calling function's
   639                          ;    responsibility to perserve their values across calls to fastcall16
   640                          ;    functions.  Currently only the page pointer registers listed below are modified:
   641                          ;     CUR_PP
   642                          ;     IDX_PP
   643                          ;-----------------------------------------------------------------------------
   644  3A77                     OneWire_GetROM:
   645  3A77                    _OneWire_GetROM:
   646                              RAM_PROLOGUE RAM_USE_CLASS_4
   647                              RAM_PROLOGUE RAM_USE_CLASS_3
   648  3A77  60 D3                 RAM_SETPAGE_IDX A
   649  3A79  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   650                              
   651  3A7C  51 9A                 mov    A,[OneWire_ROM+0]
   652  3A7E  54 00                 mov    [X+0],A
   653  3A80  51 9B                 mov    A,[OneWire_ROM+1]
   654  3A82  54 01                 mov    [X+1],A
   655  3A84  51 9C                 mov    A,[OneWire_ROM+2]
   656  3A86  54 02                 mov    [X+2],A
   657  3A88  51 9D                 mov    A,[OneWire_ROM+3]
   658  3A8A  54 03                 mov    [X+3],A
   659  3A8C  51 9E                 mov    A,[OneWire_ROM+4]
   660  3A8E  54 04                 mov    [X+4],A
   661  3A90  51 9F                 mov    A,[OneWire_ROM+5]
   662  3A92  54 05                 mov    [X+5],A
   663  3A94  51 A0                 mov    A,[OneWire_ROM+6]
   664  3A96  54 06                 mov    [X+6],A
   665  3A98  51 A1                 mov    A,[OneWire_ROM+7]
   666  3A9A  54 07                 mov    [X+7],A
   667                              
   668  3A9C  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   669                              RAM_EPILOGUE RAM_USE_CLASS_4
   670  3AA0  7F                    ret
   671                          .ENDSECTION
   672                          
   673                          
   674                          .SECTION
   675                          ;-----------------------------------------------------------------------------
   676                          ;  FUNCTION NAME: OneWire_SetROM
   677                          ;
   678                          ;  DESCRIPTION:
   679                          ;     Takes the array passed via a pointer in A and X and puts it
   680                          ;     into the RAM defined for holding a 64-bit 1-Wire ROM number.
   681                          ;-----------------------------------------------------------------------------
   682                          ;  ARGUMENTS:
   683                          ;     A:X - contains pointer
   684                          ;       X - contains LSB of the pointer to the RAM buffer
   685                          ;       A - contains MSB or page of the pointer to the RAM buffer
   686                          ;
   687                          ;  RAM BUFFER CONTENTS:
   688                          ;     OneWire_ROM = ROM number of 1-Wire device
   689                          ;
   690                          ;  RETURNS:
   691                          ;     none.
   692                          ;
   693                          ;  SIDE EFFECTS:
   694                          ;    The A and X registers may be modified by this or future implementations
   695                          ;    of this function.  The same is true for all RAM page pointer registers in
   696                          ;    the Large Memory Model.  When necessary, it is the calling function's
   697                          ;    responsibility to preserve their values across calls to fastcall16
   698                          ;    functions.  Currently only the page pointer registers listed below are modified:
   699                          ;     CUR_PP
   700                          ;     IDX_PP
   701                          ;-----------------------------------------------------------------------------
   702  3AA1                     OneWire_SetROM:
   703  3AA1                    _OneWire_SetROM:
   704                              RAM_PROLOGUE RAM_USE_CLASS_4
   705                              RAM_PROLOGUE RAM_USE_CLASS_3
   706  3AA1  60 D3                 RAM_SETPAGE_IDX A
   707  3AA3  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   708                              
   709  3AA6  52 00                 mov    A,[X+0]
   710  3AA8  53 9A                 mov    [OneWire_ROM+0], A
   711  3AAA  52 01                 mov    A,[X+1]
   712  3AAC  53 9B                 mov    [OneWire_ROM+1], A
   713  3AAE  52 02                 mov    A,[X+2]
   714  3AB0  53 9C                 mov    [OneWire_ROM+2], A
   715  3AB2  52 03                 mov    A,[X+3]
   716  3AB4  53 9D                 mov    [OneWire_ROM+3], A
   717  3AB6  52 04                 mov    A,[X+4]
   718  3AB8  53 9E                 mov    [OneWire_ROM+4], A
   719  3ABA  52 05                 mov    A,[X+5]
   720  3ABC  53 9F                 mov    [OneWire_ROM+5], A
   721  3ABE  52 06                 mov    A,[X+6]
   722  3AC0  53 A0                 mov    [OneWire_ROM+6], A
   723  3AC2  52 07                 mov    A,[X+7]
   724  3AC4  53 A1                 mov    [OneWire_ROM+7], A
   725                              
   726  3AC6  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   727                              RAM_EPILOGUE RAM_USE_CLASS_4
   728  3ACA  7F                    ret
   729                          .ENDSECTION
   730                          
   731                          .SECTION
   732                          ;-----------------------------------------------------------------------------
   733                          ;  FUNCTION NAME: OneWire_fFindFirst
   734                          ;
   735                          ;  DESCRIPTION:
   736                          ;     Find the first device on the 1-Wire bus.
   737                          ;-----------------------------------------------------------------------------
   738                          ;  ARGUMENTS:
   739                          ;     none.
   740                          ;
   741                          ;  RAM BUFFER CONTENTS:
   742                          ;     OneWire_ROM = ROM number of 1-Wire device
   743                          ;
   744                          ;  RETURNS:
   745                          ;     A = 01h if device found
   746                          ;     A = 00h if device not found
   747                          ;
   748                          ;  SIDE EFFECTS:
   749                          ;    The A and X registers may be modified by this or future implementations
   750                          ;    of this function.  The same is true for all RAM page pointer registers in
   751                          ;    the Large Memory Model.  When necessary, it is the calling function's
   752                          ;    responsibility to preserve their values across calls to fastcall16
   753                          ;    functions.  Currently only the page pointer registers listed below are modified:
   754                          ;    CUR_PP
   755                          ;    IDX_PP
   756                          ;-----------------------------------------------------------------------------
   757  3ACB                     OneWire_fFindFirst:
   758  3ACB                    _OneWire_fFindFirst:
   759                              RAM_PROLOGUE RAM_USE_CLASS_4
   760                              
   761  3ACB  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   762  3ACE  55 A2  00             mov   [OneWire_LastDiscrepancy], 00h
   763  3AD1  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   764  3AD4  55 A4  00             mov   [OneWire_LastDeviceFlag], 00h
   765  3AD7  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   766  3ADA  55 A3  00             mov   [OneWire_LastFamilyDiscrepancy], 00h
   767  3ADD  9004                  call  OneWire_Search
   768                          
   769                              RAM_EPILOGUE RAM_USE_CLASS_4
   770  3ADF  7F                    ret
   771                          .ENDSECTION
   772                          
   773                          .SECTION
   774                          ;-----------------------------------------------------------------------------
   775                          ;  FUNCTION NAME: OneWire_fFindNext
   776                          ;
   777                          ;  DESCRIPTION:
   778                          ;     Find the first device on the 1-Wire bus.
   779                          ;-----------------------------------------------------------------------------
   780                          ;
   781                          ;  ARGUMENTS:
   782                          ;     none.
   783                          ;
   784                          ;  RAM BUFFER CONTENTS:
   785                          ;     OneWire_ROM = ROM number of 1-Wire device
   786                          ;
   787                          ;  RETURNS:
   788                          ;     A = 01h if device found
   789                          ;     A = 00h if device not found, end of search
   790                          ;
   791                          ;  SIDE EFFECTS:
   792                          ;    The A and X registers may be modified by this or future implementations
   793                          ;    of this function.  The same is true for all RAM page pointer registers in
   794                          ;    the Large Memory Model.  When necessary, it is the calling function's
   795                          ;    responsibility to preserve their values across calls to fastcall16
   796                          ;    functions.  Currently only the page pointer registers listed below are modified:
   797                          ;    CUR_PP
   798                          ;    IDX_PP
   799                          ;-----------------------------------------------------------------------------
   800  3AE0                     OneWire_fFindNext:
   801  3AE0                    _OneWire_fFindNext:
   802                              RAM_PROLOGUE RAM_USE_CLASS_4
   803                              
   804  3AE0  9001                  call  OneWire_Search
   805                              
   806                              RAM_EPILOGUE RAM_USE_CLASS_4
   807  3AE2  7F                    ret
   808                          .ENDSECTION
   809                          
   810                          .SECTION
   811                          ;-----------------------------------------------------------------------------
   812                          ;  FUNCTION NAME: OneWire_Search
   813                          ;
   814                          ;  DESCRIPTION:
   815                          ;     Perform the 1-Wire search algorithm with the current search state.
   816                          ;-----------------------------------------------------------------------------
   817                          ;  ARGUMENTS:
   818                          ;     none.
   819                          ;
   820                          ;  RAM BUFFER CONTENTS:
   821                          ;     OneWire_ROM = ROM number of 1-Wire device
   822                          ;
   823                          ;  RETURNS:
   824                          ;     A = 01h if device found
   825                          ;     A = 00h if device not found, end of search
   826                          ;
   827                          ;  SIDE EFFECTS:
   828                          ;    The A and X registers may be modified by this or future implementations
   829                          ;    of this function.  The same is true for all RAM page pointer registers in
   830                          ;    the Large Memory Model.  When necessary, it is the calling function's
   831                          ;    responsibility to perserve their values across calls to fastcall16
   832                          ;    functions. Currently only the page pointer registers listed below are modified:
   833                          ;    CUR_PP
   834                          ;    IDX_PP
   835                          ;-----------------------------------------------------------------------------
   836  0000                    ID_BIT_NUMBER:              equ   0
   837  0001                    LAST_ZERO:                  equ   1
   838  0002                    ROM_BYTE_NUMBER:            equ   2
   839  0003                    SEARCH_RESULT:              equ   3
   840  0004                    ID_BIT:                     equ   4
   841  0005                    CMP_ID_BIT:                 equ   5
   842  0006                    ROM_BYTE_MASK:              equ   6
   843  0007                    SEARCH_DIRECTION:           equ   7
   844                          
   845  3AE3                     OneWire_Search:
   846  3AE3                    _OneWire_Search:
   847                              RAM_PROLOGUE RAM_USE_CLASS_4
   848                              RAM_PROLOGUE RAM_USE_CLASS_3
   849                              
   850  3AE3  4F                    mov   X,SP                                   ; Get location of stack
   851  3AE4  38 08                 add   SP,08h                                 ; Make locations for local variables
   852  3AE6  62 D3 07              RAM_SETPAGE_IDX2STK
   853  3AE9  56 00 01              mov   [X+ID_BIT_NUMBER],01h                  ; Initialize for search
   854  3AEC  56 01 00              mov   [X+LAST_ZERO],00h
   855  3AEF  56 02 00              mov   [X+ROM_BYTE_NUMBER],00h
   856  3AF2  56 06 01              mov   [X+ROM_BYTE_MASK],01h
   857  3AF5  56 03 00              mov   [X+SEARCH_RESULT],00h
   858  3AF8  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   859  3AFB  55 99  00             mov   [OneWire_bCRC8Value],00h
   860  3AFE  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   861  3B01  51 A4                 mov   A,[OneWire_LastDeviceFlag]
   862  3B03  B0D4                  jnz   .check_result
   863  3B05  9EEA                  call  OneWire_fReset
   864  3B07  A0DF                  jz    .search_return_false
   865                          
   866  3B09  50 F0                 mov   A,F0h                                  ; Search command
   867  3B0B  10                    push  X
   868  3B0C  9F19                  call  OneWire_WriteByte
   869  3B0E  20                    pop   X
   870  3B0F                    .search_loop:
   871  3B0F  9F05                  call  OneWire_bReadBit
   872  3B11  54 04                 mov   [X+ID_BIT],A
   873  3B13  9F01                  call  OneWire_bReadBit
   874  3B15  54 05                 mov   [X+CMP_ID_BIT],A
   875  3B17  21 01                 and   A,01h
   876  3B19  23 04                 and   A,[X+ID_BIT]
   877  3B1B  B09D                  jnz   .check_search
   878                          
   879  3B1D                    .search_else_1:
   880  3B1D  52 04                 mov   A,[X+ID_BIT]                           ; If ID_BIT != CMP_ID_BIT
   881  3B1F  3B 05                 cmp   A,[X+CMP_ID_BIT]
   882  3B21  A007                  jz    .search_else_2
   883  3B23  52 04                 mov   A,[X+ID_BIT]
   884  3B25  54 07                 mov   [X+SEARCH_DIRECTION],A
   885  3B27  8048                  jmp   .search_set_or_clear
   886  3B29                    .search_else_2:
   887  3B29  52 00                 mov   A,[X+ID_BIT_NUMBER]
   888  3B2B  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   889  3B2E  3A A2                 cmp   A,[OneWire_LastDiscrepancy]
   890  3B30  D01B                  jnc   .search_else_3
   891  3B32  10                    push  X
   892  3B33  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   893  3B35  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   894  3B38  52 9A                 mov   A,[X+OneWire_ROM]
   895  3B3A  62 D3 07              RAM_SETPAGE_IDX2STK
   896  3B3D  20                    pop   X
   897  3B3E  23 06                 and   A,[X+ROM_BYTE_MASK]
   898  3B40  B006                  jnz   .search_dir_1
   899  3B42  56 07 00              mov   [X+SEARCH_DIRECTION],00h
   900  3B45  8017                  jmp   .search_is_dir_0
   901  3B47                    .search_dir_1:
   902  3B47  56 07 01              mov   [X+SEARCH_DIRECTION],01h
   903  3B4A  8012                  jmp   .search_is_dir_0
   904  3B4C                    .search_else_3:
   905  3B4C  52 00                 mov   A,[X+ID_BIT_NUMBER]
   906  3B4E  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   907  3B51  3A A2                 cmp   A,[OneWire_LastDiscrepancy]            ;SEARCH_DIRECTION = (ID_BIT_NUMBER == LastDiscrepan
                                cy search_direction)
   908  3B53  B006                  jnz   .search_dir_1_2
   909  3B55  56 07 01              mov   [X+SEARCH_DIRECTION],01h
   910  3B58  8004                  jmp   .search_is_dir_0
   911  3B5A                    .search_dir_1_2:
   912  3B5A  56 07 00              mov   [X+SEARCH_DIRECTION],00h
   913  3B5D                    .search_is_dir_0:
   914  3B5D  52 07                 mov   A,[X+SEARCH_DIRECTION]
   915  3B5F  B010                  jnz   .search_set_or_clear
   916  3B61  52 00                 mov   A,[X+ID_BIT_NUMBER]
   917  3B63  54 01                 mov   [X+LAST_ZERO],A
   918  3B65  39 09                 cmp   A,09h
   919  3B67  D008                  jnc   .search_set_or_clear
   920  3B69  52 01                 mov   A,[X+LAST_ZERO]
   921  3B6B  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   922  3B6E  53 A3                 mov   [OneWire_LastFamilyDiscrepancy],A
   923  3B70                    .search_set_or_clear:
   924  3B70  3D 07 01              cmp   [X+SEARCH_DIRECTION],01h
   925  3B73  B011                  jnz   .search_else_4
   926  3B75  52 06                 mov   A,[X+ROM_BYTE_MASK]
   927  3B77  10                    push  X
   928  3B78  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   929  3B7A  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   930  3B7D  2D 9A                 or    [X+OneWire_ROM],A
   931  3B7F  62 D3 07              RAM_SETPAGE_IDX2STK
   932  3B82  20                    pop   X
   933  3B83  8010                  jmp   .search_write_direction
   934  3B85                    .search_else_4:
   935  3B85  52 06                 mov   A,[X+ROM_BYTE_MASK]
   936  3B87  10                    push  X
   937  3B88  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   938  3B8A  73                    cpl   A
   939  3B8B  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   940  3B8E  25 9A                 and   [X+OneWire_ROM],A
   941  3B90  62 D3 07              RAM_SETPAGE_IDX2STK
   942  3B93  20                    pop   X
   943  3B94                    .search_write_direction:
   944  3B94  52 07                 mov   A,[X+SEARCH_DIRECTION]
   945  3B96  9E72                  call  OneWire_WriteBit
   946  3B98  77 00                 inc   [X+ID_BIT_NUMBER]
   947  3B9A  66 06                 asl   [X+ROM_BYTE_MASK]
   948  3B9C  3D 06 00              cmp   [X+ROM_BYTE_MASK],00h
   949  3B9F  B014                  jnz   .check_if_loop
   950  3BA1  10                    push  X
   951  3BA2  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   952  3BA4  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   953  3BA7  52 9A                 mov   A,[X+OneWire_ROM]
   954  3BA9  62 D3 07              RAM_SETPAGE_IDX2STK
   955  3BAC  9EAF                  call  OneWire_bCRC8
   956                              RAM_PROLOGUE RAM_USE_CLASS_4
   957  3BAE  20                    pop   X
   958  3BAF  77 02                 inc   [X+ROM_BYTE_NUMBER]
   959  3BB1  56 06 01              mov   [X+ROM_BYTE_MASK],01h
   960  3BB4                    .check_if_loop:
   961  3BB4  3D 02 08              cmp   [X+ROM_BYTE_NUMBER],08h
   962  3BB7  CF57                  jc    .search_loop
   963  3BB9                    .check_search:
   964  3BB9  3D 00 41              cmp   [X+ID_BIT_NUMBER],41h
   965  3BBC  C01B                  jc    .check_result
   966  3BBE  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   967  3BC1  3C 99  00             cmp   [OneWire_bCRC8Value],00h
   968  3BC4  B013                  jnz   .check_result
   969  3BC6  52 01                 mov   A,[X+LAST_ZERO]
   970  3BC8  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   971  3BCB  53 A2                 mov   [OneWire_LastDiscrepancy],A
   972  3BCD  B007                  jnz   .search_not_last
   973  3BCF  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   974  3BD2  55 A4  01             mov   [OneWire_LastDeviceFlag],01h
   975  3BD5                    .search_not_last:
   976  3BD5  56 03 01              mov   [X+SEARCH_RESULT],01h
   977                          ; If no device found then reset counter so next search will be like a first
   978  3BD8                    .check_result:
   979  3BD8  52 03                 mov   A,[X+SEARCH_RESULT]
   980  3BDA  A00C                  jz    .search_return_false
   981  3BDC  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   982  3BDF  51 9A                 mov   A,[OneWire_ROM+0]
   983  3BE1  A005                  jz    .search_return_false
   984  3BE3                    .search_return_true:
   985  3BE3  50 01                 mov   A,01h
   986  3BE5  8015                  jmp   .search_clean_up
   987  3BE7                    .search_return_false:
   988  3BE7  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   989  3BEA  55 A2  00             mov   [OneWire_LastDiscrepancy],00h
   990  3BED  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   991  3BF0  55 A4  00             mov   [OneWire_LastDeviceFlag],00h
   992  3BF3  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   993  3BF6  55 A3  00             mov   [OneWire_LastFamilyDiscrepancy],00h
   994  3BF9  50 00                 mov   A,00h
   995  3BFB                    .search_clean_up:
   996  3BFB  38 F8                 add   SP,-08h                                ; Restore SP
   997                          
   998  3BFD  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   999                              RAM_EPILOGUE RAM_USE_CLASS_4
  1000  3C01  7F                    ret
  1001                          .ENDSECTION
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: OneWire_fVerify
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Verify the device with the ROM number in OneWire_ROM is present.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;  ARGUMENTS:
  1011                          ;     none.
  1012                          ;
  1013                          ;  RAM BUFFER CONTENTS:
  1014                          ;     OneWire_ROM = ROM number of 1-Wire device
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     A = 01h if device found
  1018                          ;     A = 00h if device not found
  1019                          ;
  1020                          ;  SIDE EFFECTS:
  1021                          ;    The A and X registers may be modified by this or future implementations
  1022                          ;    of this function.  The same is true for all RAM page pointer registers in
  1023                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1024                          ;    responsibility to perserve their values across calls to fastcall16
  1025                          ;    functions. Currently only the page pointer registers listed below are modified:
  1026                          ;    CUR_PP, IDX_PP
  1027                          ;-----------------------------------------------------------------------------
  1028  0000                    ROM_BACKUP:                 equ   0
  1029  0008                    LD_BACKUP:                  equ   8
  1030  0009                    LDF_BACKUP:                 equ   9
  1031  000A                    LFD_BACKUP:                 equ   0x0A
  1032                          
  1033  3C02                     OneWire_fVerify:
  1034  3C02                    _OneWire_fVerify:
  1035                              RAM_PROLOGUE RAM_USE_CLASS_4
  1036                              RAM_PROLOGUE RAM_USE_CLASS_3
  1037                              
  1038  3C02  4F                    mov   X, SP                                  ; Get location of stack
  1039  3C03  38 0B                 add   SP, 0Bh                                ; Make locations for local variables
  1040                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
  1041  3C05  5D D1                 mov   A, reg[STK_PP]                         ; Set A to right page to back up ROM to stack
  1042                          ELSE
  1043                              mov   A, 00h
  1044                          ENDIF
  1045  3C07  9E6E                  call  OneWire_GetROM
  1046                              RAM_PROLOGUE RAM_USE_CLASS_4
  1047                              RAM_PROLOGUE RAM_USE_CLASS_3
  1048  3C09  62 D3 07              RAM_SETPAGE_IDX2STK
  1049  3C0C  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1050  3C0F  51 A2                 mov   A,[OneWire_LastDiscrepancy]
  1051  3C11  54 08                 mov   [X+LD_BACKUP],A
  1052  3C13  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1053  3C16  51 A4                 mov   A,[OneWire_LastDeviceFlag]
  1054  3C18  54 09                 mov   [X+LDF_BACKUP],A
  1055  3C1A  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1056  3C1D  51 A3                 mov   A,[OneWire_LastFamilyDiscrepancy]
  1057  3C1F  54 0A                 mov   [X+LFD_BACKUP],A
  1058  3C21  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1059  3C24  55 A2  40             mov   [OneWire_LastDiscrepancy],40h
  1060  3C27  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1061  3C2A  55 A4  00             mov   [OneWire_LastDeviceFlag],00h
  1062  3C2D  10                    push  X                                      ; Search does not preserve X
  1063  3C2E  9EB3                  call  OneWire_Search
  1064  3C30  20                    pop   X
  1065  3C31  08                    push  A                                      ; Save result
  1066  3C32  70 BF                 RAM_X_POINTS_TO_INDEXPAGE
  1067  3C34  A03B                  jz    .Verify_End
  1068  3C36  62 D3 07              RAM_SETPAGE_IDX2STK
  1069  3C39  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
  1070  3C3C  51 9A                 mov   A,[OneWire_ROM+0]
  1071  3C3E  3B 00                 cmp   A,[X+ROM_BACKUP]
  1072  3C40  B02B                  jnz   .Verify_Fail
  1073  3C42  51 9B                 mov   A,[OneWire_ROM+1]
  1074  3C44  3B 01                 cmp   A,[X+ROM_BACKUP+1]
  1075  3C46  B025                  jnz   .Verify_Fail
  1076  3C48  51 9C                 mov   A,[OneWire_ROM+2]
  1077  3C4A  3B 02                 cmp   A,[X+ROM_BACKUP+2]
  1078  3C4C  B01F                  jnz   .Verify_Fail
  1079  3C4E  51 9D                 mov   A,[OneWire_ROM+3]
  1080  3C50  3B 03                 cmp   A,[X+ROM_BACKUP+3]
  1081  3C52  B019                  jnz   .Verify_Fail
  1082  3C54  51 9E                 mov   A,[OneWire_ROM+4]
  1083  3C56  3B 04                 cmp   A,[X+ROM_BACKUP+4]
  1084  3C58  B013                  jnz   .Verify_Fail
  1085  3C5A  51 9F                 mov   A,[OneWire_ROM+5]
  1086  3C5C  3B 05                 cmp   A,[X+ROM_BACKUP+5]
  1087  3C5E  B00D                  jnz   .Verify_Fail
  1088  3C60  51 A0                 mov   A,[OneWire_ROM+6]
  1089  3C62  3B 06                 cmp   A,[X+ROM_BACKUP+6]
  1090  3C64  B007                  jnz   .Verify_Fail
  1091  3C66  51 A1                 mov   A,[OneWire_ROM+7]
  1092  3C68  3B 07                 cmp   A,[X+ROM_BACKUP+7]
  1093  3C6A  A005                  jz    .Verify_End
  1094  3C6C                    .Verify_Fail:
  1095  3C6C  18                    pop   A                                      ; Replace result
  1096  3C6D  50 00                 mov   A,00h
  1097  3C6F  08                    push  A
  1098  3C70                    .Verify_End:
  1099                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
  1100  3C70  5D D1                 mov   A, reg[STK_PP]                         ; Set A to right page to recover ROM from stack
  1101                          ELSE
  1102                              mov   A, 00h
  1103                          ENDIF
  1104  3C72  9E2D                  call  OneWire_SetROM
  1105  3C74  70 BF                 RAM_X_POINTS_TO_INDEXPAGE
  1106  3C76  62 D3 07              RAM_SETPAGE_IDX2STK
  1107  3C79  52 08                 mov   A, [X+LD_BACKUP]
  1108  3C7B  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1109  3C7E  53 A2                 mov   [OneWire_LastDiscrepancy], A
  1110  3C80  52 09                 mov   A, [X+LDF_BACKUP]
  1111  3C82  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1112  3C85  53 A4                 mov   [OneWire_LastDeviceFlag], A
  1113  3C87  52 0A                 mov   A, [X+LFD_BACKUP]
  1114  3C89  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1115  3C8C  53 A3                 mov   [OneWire_LastFamilyDiscrepancy], A
  1116  3C8E  18                    pop   A                                      ; Restore result
  1117  3C8F  38 F5                 add   SP, -0Bh                               ; Restore SP
  1118                          
  1119  3C91  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
  1120                              RAM_EPILOGUE RAM_USE_CLASS_4
  1121  3C95  7F                    ret
  1122                          .ENDSECTION
  1123                          
  1124                          .SECTION
  1125                          ;-----------------------------------------------------------------------------
  1126                          ;  FUNCTION NAME: OneWire_FamilyTargetSetup
  1127                          ;
  1128                          ;  DESCRIPTION:
  1129                          ;     Setup the search to find the device type family code on the next call
  1130                          ;     to OneWire_Next().
  1131                          ;-----------------------------------------------------------------------------
  1132                          ;  ARGUMENTS:
  1133                          ;     A contains family code.
  1134                          ;
  1135                          ;  RAM BUFFER CONTENTS:
  1136                          ;     OneWire_ROM = ROM number of 1-Wire device
  1137                          ;
  1138                          ;  RETURNS:
  1139                          ;     none.
  1140                          ;
  1141                          ;  SIDE EFFECTS:
  1142                          ;    The A and X registers may be modified by this or future implementations
  1143                          ;    of this function.  The same is true for all RAM page pointer registers in
  1144                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1145                          ;    responsibility to preserve their values across calls to fastcall16
  1146                          ;    functions.  Currently only the page pointer registers listed below are modified:
  1147                          ;    CUR_PP
  1148                          ;    IDX_PP
  1149                          ;-----------------------------------------------------------------------------
  1150  3C96                     OneWire_FamilyTargetSetup:
  1151  3C96                    _OneWire_FamilyTargetSetup:
  1152                              RAM_PROLOGUE RAM_USE_CLASS_4
  1153                              RAM_PROLOGUE RAM_USE_CLASS_3
  1154  3C96  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
  1155  3C99  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
  1156                              
  1157  3C9C  53 9A                 mov   [OneWire_ROM+0], A
  1158  3C9E  10                    push  X
  1159  3C9F  57 07                 mov   X, 07h
  1160  3CA1                    .loop:
  1161  3CA1  56 9A  00             mov   [X+OneWire_ROM], 00h
  1162  3CA4  79                    dec   X
  1163  3CA5  BFFB                  jnz   .loop
  1164  3CA7  20                    pop   X
  1165  3CA8  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1166  3CAB  55 A2  40             mov   [OneWire_LastDiscrepancy], 40h
  1167  3CAE  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1168  3CB1  55 A3  00             mov   [OneWire_LastFamilyDiscrepancy], 00h
  1169  3CB4  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1170  3CB7  55 A4  00             mov   [OneWire_LastDeviceFlag], 00h
  1171                              
  1172  3CBA  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
  1173                              RAM_EPILOGUE RAM_USE_CLASS_4
  1174  3CBE  7F                    ret
  1175                          .ENDSECTION
  1176                          
  1177                          .SECTION
  1178                          ;-----------------------------------------------------------------------------
  1179                          ;  FUNCTION NAME: OneWire_FamilySkipSetup
  1180                          ;
  1181                          ;  DESCRIPTION:
  1182                          ;     Setup the search to skip the current device type on the next call
  1183                          ;     to OneWire_fFindNext().
  1184                          ;-----------------------------------------------------------------------------
  1185                          ;  ARGUMENTS:
  1186                          ;     None.
  1187                          ;
  1188                          ;  RAM BUFFER CONTENTS:
  1189                          ;     OneWire_ROM = ROM number of 1-Wire device
  1190                          ;
  1191                          ;  RETURNS:
  1192                          ;     none.
  1193                          ;
  1194                          ;  SIDE EFFECTS:
  1195                          ;    The A and X registers may be modified by this or future implementations
  1196                          ;    of this function.  The same is true for all RAM page pointer registers in
  1197                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1198                          ;    responsibility to preserve their values across calls to fastcall16
  1199                          ;    functions.  Currently only the page pointer registers listed below are modified:
  1200                          ;     CUR_PP
  1201                          ;-----------------------------------------------------------------------------
  1202  3CBF                     OneWire_FamilySkipSetup:
  1203  3CBF                    _OneWire_FamilySkipSetup:
  1204                              RAM_PROLOGUE RAM_USE_CLASS_4
  1205                              
  1206  3CBF  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1207  3CC2  51 A3                 mov   A,[OneWire_LastFamilyDiscrepancy]
  1208  3CC4  55 A3  00             mov   [OneWire_LastFamilyDiscrepancy],00h
  1209  3CC7  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1210  3CCA  53 A2                 mov   [OneWire_LastDiscrepancy],A
  1211  3CCC  B007                  jnz   .EndOfList
  1212  3CCE  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1213  3CD1  55 A4  01             mov   [OneWire_LastDeviceFlag],01h
  1214  3CD4                    .EndOfList:
  1215                          
  1216                              RAM_EPILOGUE RAM_USE_CLASS_4
  1217  3CD4  7F                    ret
  1218                          .ENDSECTION
  1219                          ENDIF
  1220                          
  1221                          .SECTION
  1222                          ;-----------------------------------------------------------------------------
  1223                          ;  FUNCTION NAME: OneWire_SendTxDataWait
  1224                          ;
  1225                          ;  DESCRIPTION:
  1226                          ;     Initiates an XCVR data transfer and waits for it to complete.
  1227                          ;
  1228                          ;-----------------------------------------------------------------------------
  1229                          ;  ARGUMENTS:
  1230                          ;     BYTE  bTxData - data to transmit.
  1231                          ;        Passed in Accumulator.
  1232                          ;
  1233                          ;  RETURNS:
  1234                          ;     none.
  1235                          ;
  1236                          ;  SIDE EFFECTS:
  1237                          ;    The A and X registers may be modified by this or future implementations
  1238                          ;    of this function.  The same is true for all RAM page pointer registers in
  1239                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1240                          ;    responsibility to preserve their values across calls to fastcall16
  1241                          ;    functions.
  1242                          ;
  1243                          ;  THEORY of OPERATION:
  1244                          ;     Writes data to the TX buffer register.
  1245                          ;-----------------------------------------------------------------------------
  1246  3CD5                     OneWire_SendTxDataWait:
  1247  3CD5                    _OneWire_SendTxDataWait:
  1248                              RAM_PROLOGUE RAM_USE_CLASS_1
  1249                          
  1250  3CD5  60 59                 mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
  1251  3CD7                    .WaitForTxComplete:
  1252  3CD7  5D 5B                 mov    A,  reg[OneWire_XCVR_CONTROL_REG]
  1253  3CD9  21 20                 and    A, SPIM_SPI_COMPLETE
  1254  3CDB  AFFB                  jz     .WaitForTxComplete
  1255                          
  1256                              RAM_EPILOGUE RAM_USE_CLASS_1
  1257  3CDD  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:43 2009
   OneWire_XCVR_RX_BUFFER_REG 005A              SPIM_SPI_COMPLETE 0020                    ONE_PATTERN 00FD  
                 RESET_PERIOD 00F9                  RESET_PATTERN 00F1      OneWire_BITCLK_PERIOD_REG 0055  
              _OneWire_GetROM 3A77             _OneWire_WriteByte 3A27                _OneWire_SetROM 3AA1  
              _OneWire_Search 3AE3                  ID_BIT_NUMBER 0000                _OneWire_fReset 39F1  
                     MAC0_CL0 00EE                       MAC0_CL1 00EF                       MAC1_CL0 00AE  
                     MAC1_CL1 00AF                          MAC_X 00EC         OneWire_SendTxDataWait 3CD5  
                        MAC_Y 00ED                     ROM_BACKUP 0000          CONTROL_REG_START_BIT 0001  
                 ZERO_PATTERN 0001        OneWire_FamilySkipSetup 3CBF                  SEARCH_RESULT 0003  
                     INT_CLR2 00DC                       INT_MSK1 00E1        _OneWire_SendTxDataWait 3CD5  
             _OneWire_fVerify 3C02                         MAC0_X 00EC                         MAC0_Y 00ED  
                       MAC1_X 00AC                         MAC1_Y 00AD                         HITECH 0002  
                       ID_BIT 0004                FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080  
                       IDX_PP 00D3                         CUR_PP 00D0            OneWire_BIT_INT_REG 00DF  
                       STK_PP 00D1            _OneWire_bCRC8Value 0099                    SPIM_MODE_0 0000  
        OneWire_SEARCH_ENABLE 0001               OneWire_bReadBit 3A16               SEARCH_DIRECTION 0007  
                    LD_BACKUP 0008                      LAST_ZERO 0001        OneWire_PARASITE_ENABLE 0000  
     _OneWire_FamilySkipSetup 3CBF               OneWire_WriteBit 3A0A                   OneWire_Stop 39EA  
     OneWire_OVERDRIVE_ENABLE 0000              _OneWire_bReadBit 3A16              OneWire_ClearCRC8 3A56  
                ROM_BYTE_MASK 0006      SYSTEM_LARGE_MEMORY_MODEL 0001     OneWire_XCVR_TX_BUFFER_REG 0059  
               _OneWire_bCRC8 3A5D         SYSTEM_MULTIPAGE_STACK 0000              _OneWire_WriteBit 3A0A  
           OneWire_fFindFirst 3ACB                 _OneWire_Start 39D9                        MAC_CL0 00EE  
                      MAC_CL1 00EF               FLAG_PGMODE_MASK 00C0                        PRT0DM1 0001  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008                     BIT_PERIOD 000D             _OneWire_ClearCRC8 3A56  
    OneWire_FamilyTargetSetup 3C96                     CMP_ID_BIT 0005                    INIT_PERIOD 000F  
OneWire_LastFamilyDiscrepancy 00A3        OneWire_LastDiscrepancy 00A2                    OneWire_ROM 009A  
                   LDF_BACKUP 0009                OneWire_fVerify 3C02                     LFD_BACKUP 000A  
               SPIM_LSB_FIRST 0080              OneWire_bReadByte 3A42                  _OneWire_Stop 39EA  
       OneWire_LastDeviceFlag 00A4              OneWire_fFindNext 3AE0                 OneWire_GetROM 3A77  
     OneWire_XCVR_CONTROL_REG 005B                 OneWire_SetROM 3AA1                 OneWire_Search 3AE3  
               OneWire_fReset 39F1                  OneWire_bCRC8 3A5D              SYSTEM_STACK_PAGE 0007  
            OneWire_WriteByte 3A27                  OneWire_Start 39D9     SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
         OneWire_CRC16_ENABLE 0000                ROM_BYTE_NUMBER 0002            _OneWire_fFindFirst 3ACB  
           OneWire_bCRC8Value 0099             _OneWire_bReadByte 3A42     SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           _OneWire_fFindNext 3AE0     _OneWire_FamilyTargetSetup 3C96     OneWire_BITCLK_CONTROL_REG 0057  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:43 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.inc
     4                          ;;  Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the OneWire user module interface
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          
    13                          ;;*****************************************************************************
    14                          
    15                          ;--------------------------------
    16                          ;  Interrupt registers and masks
    17                          ;--------------------------------
    18  0040                    OneWire_BIT_INT_MASK:                   equ 0x40
    19  00DF                    OneWire_BIT_INT_REG:                    equ 0x0df
    20                          
    21                          IF (OneWire_BIT_INT_REG - INT_MSK1)
    22  00DC                    OneWire_BIT_INT_CLR:                    equ INT_CLR2
    23                          ELSE
    24                          OneWire_BIT_INT_CLR:                    equ INT_CLR1
    25                          ENDIF
    26                          
    27                          ;--------------------------------
    28                          ;  Parasite Power Pin selected
    29                          ;--------------------------------
    30  0001                    OneWire_OUT_PORT_DM1:                   equ PRT0DM1
    31  0001                    OneWire_OUT_PORT_MASK:                  equ 0x1
    32                          
    33                          ;---------------------------
    34                          ; One Wire constants and masks
    35                          ;---------------------------
    36  0000                    OneWire_CRC16_ENABLE:                   equ   0
    37  0001                    OneWire_SEARCH_ENABLE:                  equ   1
    38  0000                    OneWire_OVERDRIVE_ENABLE:               equ   0
    39  0000                    OneWire_PARASITE_ENABLE:                equ   0
    40                          
    41                          ;-----------------------------------------------
    42                          ;  Registers used by OneWire
    43                          ;-----------------------------------------------
    44  0054                    OneWire_BITCLK_FUNC_REG:    equ 54h              ;Function register
    45  0055                    OneWire_BITCLK_INPUT_REG:   equ 55h              ;Input register
    46  0056                    OneWire_BITCLK_OUTPUT_REG:  equ 56h              ;Output register
    47  0057                    OneWire_BITCLK_CONTROL_REG: equ 57h              ;Control register
    48  0054                    OneWire_BITCLK_COUNTER_REG: equ 54h              ;Counter register
    49  0055                    OneWire_BITCLK_PERIOD_REG:  equ 55h              ;Period register
    50  0056                    OneWire_BITCLK_COMPARE_REG: equ 56h              ;Compare register
    51  0058                    OneWire_XCVR_FUNC_REG:  equ 58h                  ;Function register
    52  0059                    OneWire_XCVR_INPUT_REG: equ 59h                  ;Input register
    53  005A                    OneWire_XCVR_OUTPUT_REG:    equ 5ah              ;Output register
    54  005B                    OneWire_XCVR_CONTROL_REG:   equ 5bh              ;Control register
    55  0058                    OneWire_XCVR_SHIFT_REG: equ 58h                  ;Counter register
    56  0059                    OneWire_XCVR_TX_BUFFER_REG: equ 59h              ;Period register
    57  005A                    OneWire_XCVR_RX_BUFFER_REG: equ 5ah              ;Compare register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWireINT.asm
     4                          ;;   Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: OneWire Interrupt Service Routine
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;
    10                          ;;-----------------------------------------------------------------------------
    11                          ;;   Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    12                          ;;*****************************************************************************
    13                          ;;*****************************************************************************
    14                          
    15                          include "m8c.inc"
    16                          include "OneWire.inc"
    17                          
    18                          
    19                          ;-----------------------------------------------
    20                          ;  Global Symbols
    21                          ;-----------------------------------------------
    22                          export  _OneWire_ISR
    23                          
    24                          AREA UserModules (ROM, REL)
    25                          
    26                          ;-----------------------------------------------------------------------------
    27                          ;  FUNCTION NAME: _OneWire_ISR
    28                          ;
    29                          ;  DESCRIPTION: With ParasitePower enabled this ISR sets TX pin to strong
    30                          ;               drive mode immediately after transmission of last data bit.
    31                          ;-----------------------------------------------------------------------------
    32                          
    33  3CDE                    _OneWire_ISR:
    34                          IF (OneWire_PARASITE_ENABLE)
    35                              M8C_SetBank1
    36                              and   REG[OneWire_OUT_PORT_DM1],~OneWire_OUT_PORT_MASK
    37                              M8C_SetBank0
    38                          ENDIF
    39  3CDE  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:43 2009
                  MAC0_CL0 00EE                    MAC0_CL1 00EF                    MAC1_CL0 00AE                    MAC1_CL1 00AF  
                     MAC_X 00EC                       MAC_Y 00ED                    INT_CLR2 00DC                    INT_MSK1 00E1  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
       OneWire_BIT_INT_REG 00DF     OneWire_PARASITE_ENABLE 0000                     MAC_CL0 00EE                     MAC_CL1 00EF  
                   PRT0DM1 0001                _OneWire_ISR 3CDE  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:43 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       2 August 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C29566
    11                          ;
    12                          ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h		;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h		;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31  0000                    SLEEP_TIMER:			equ	0h		;Sleep Timer value
    32  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    33  0000                    SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
    34  0001                    SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
    35  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
    36  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    37  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    38  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    39  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    40  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    41  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    42  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    43                          
    44  0008                    POWER_SETTING:			equ	8h
    45  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    46  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    47  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    48  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    49  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    50  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    51  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    52  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    53  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    54  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    55                          
    56  0001                    COMM_RX_PRESENT:		equ	1		;1 = TRUE
    57  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    58                          
    59  0003                    CLOCK_DIV_VC1:			equ	3h	;VC1 clock divider
    60  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    61  0030                    CLOCK_DIV_VC1_JUST:		equ	30h	;VC1 clock divider justified
    62  0000                    CLOCK_DIV_VC2:			equ	0h	;VC2 clock divider
    63  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    64  0000                    CLOCK_DIV_VC2_JUST:		equ	0h	;VC2 clock divider justified
    65  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    66  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    67  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    68  0001                    CLOCK_DIV_VC3:			equ	1h	;VC3 clock divider
    69  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    70  0001                    CLOCK_DIV_VC3_JUST:		equ	1h	;VC3 clock divider justified
    71  0000                    ANALOG_BUFFER_PWR:		equ	0h	;Analog buffer power level
    72  0001                    ANALOG_BUFFER_PWR_MASK:	equ	1h	;Analog buffer power level mask
    73  0000                    ANALOG_BUFFER_PWR_JUST:	equ	0h	;Analog buffer power level justified
    74  0005                    ANALOG_POWER:			equ	5h	;Analog power control
    75  0007                    ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
    76  0005                    ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
    77  0000                    OP_AMP_BIAS:			equ	0h	;Op amp bias level
    78  0040                    OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
    79  0000                    OP_AMP_BIAS_JUST:		equ	0h	;Op amp bias level justified
    80  0000                    REF_MUX:				equ	0h	;Ref mux setting
    81  0038                    REF_MUX_MASK:			equ	38h	;Ref mux setting mask
    82  0000                    REF_MUX_JUST:			equ	0h	;Ref mux setting justified
    83  0000                    AGND_BYPASS:				equ	0h	;AGndBypass setting
    84  0040                    AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
    85  0000                    AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
    86  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    87  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    88  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    89  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    90  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    91  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    92                          ;
    93                          ; register initial values
    94                          ;
    95  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    96  0005                    PORT_0_GLOBAL_SELECT:	equ 5h	;Port 0 global select register (PRT0GS)
    97  002E                    PORT_0_DRIVE_0:			equ 2eh	;Port 0 drive mode 0 register (PRT0DM0)
    98  00FB                    PORT_0_DRIVE_1:			equ fbh	;Port 0 drive mode 1 register (PRT0DM1)
    99  00D0                    PORT_0_DRIVE_2:			equ d0h	;Port 0 drive mode 2 register (PRT0DM2)
   100  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
   101  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
   102  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
   103  0044                    PORT_1_GLOBAL_SELECT:	equ 44h	;Port 1 global select register (PRT1GS)
   104  0040                    PORT_1_DRIVE_0:			equ 40h	;Port 1 drive mode 0 register (PRT1DM0)
   105  00BF                    PORT_1_DRIVE_1:			equ bfh	;Port 1 drive mode 1 register (PRT1DM1)
   106  00BB                    PORT_1_DRIVE_2:			equ bbh	;Port 1 drive mode 2 register (PRT1DM2)
   107  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
   108  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   109  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   110  0028                    PORT_2_GLOBAL_SELECT:	equ 28h	;Port 2 global select register (PRT2GS)
   111  0062                    PORT_2_DRIVE_0:			equ 62h	;Port 2 drive mode 0 register (PRT2DM0)
   112  009F                    PORT_2_DRIVE_1:			equ 9fh	;Port 2 drive mode 1 register (PRT2DM1)
   113  00F7                    PORT_2_DRIVE_2:			equ f7h	;Port 2 drive mode 2 register (PRT2DM2)
   114  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   115  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   116  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   117  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   118  0080                    PORT_3_DRIVE_0:			equ 80h	;Port 3 drive mode 0 register (PRT3DM0)
   119  007F                    PORT_3_DRIVE_1:			equ 7fh	;Port 3 drive mode 1 register (PRT3DM1)
   120  007F                    PORT_3_DRIVE_2:			equ 7fh	;Port 3 drive mode 2 register (PRT3DM2)
   121  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   122  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   123  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
   124  0000                    PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
   125  0085                    PORT_4_DRIVE_0:			equ 85h	;Port 4 drive mode 0 register (PRT4DM0)
   126  007B                    PORT_4_DRIVE_1:			equ 7bh	;Port 4 drive mode 1 register (PRT4DM1)
   127  00FF                    PORT_4_DRIVE_2:			equ ffh	;Port 4 drive mode 2 register (PRT4DM2)
   128  0000                    PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
   129  0000                    PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
   130  0000                    PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
   131  0000                    PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
   132  0000                    PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
   133  0000                    PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
   134  0000                    PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
   135  0000                    PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
   136  0000                    PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
   137  0000                    PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
   138  0000                    PORT_6_GLOBAL_SELECT:	equ 0h	;Port 6 global select register (PRT6GS)
   139  0000                    PORT_6_DRIVE_0:			equ 0h	;Port 6 drive mode 0 register (PRT6DM0)
   140  0000                    PORT_6_DRIVE_1:			equ 0h	;Port 6 drive mode 1 register (PRT6DM1)
   141  0000                    PORT_6_DRIVE_2:			equ 0h	;Port 6 drive mode 2 register (PRT6DM2)
   142  0000                    PORT_6_INTENABLE:		equ 0h	;Port 6 interrupt enable register (PRT6IE)
   143  0000                    PORT_6_INTCTRL_0:		equ 0h	;Port 6 interrupt control 0 register (PRT6IC0)
   144  0000                    PORT_6_INTCTRL_1:		equ 0h	;Port 6 interrupt control 1 register (PRT6IC1)
   145  0000                    PORT_7_GLOBAL_SELECT:	equ 0h	;Port 7 global select register (PRT7GS)
   146  0000                    PORT_7_DRIVE_0:			equ 0h	;Port 7 drive mode 0 register (PRT7DM0)
   147  0000                    PORT_7_DRIVE_1:			equ 0h	;Port 7 drive mode 1 register (PRT7DM1)
   148  0000                    PORT_7_DRIVE_2:			equ 0h	;Port 7 drive mode 2 register (PRT7DM2)
   149  0000                    PORT_7_INTENABLE:		equ 0h	;Port 7 interrupt enable register (PRT7IE)
   150  0000                    PORT_7_INTCTRL_0:		equ 0h	;Port 7 interrupt control 0 register (PRT7IC0)
   151  0000                    PORT_7_INTCTRL_1:		equ 0h	;Port 7 interrupt control 1 register (PRT7IC1)
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;==========================================================================
     4                          ;  PSoCConfig.asm
     5                          ;  @PSOC_VERSION
     6                          ;
     7                          ;  Version: 0.85
     8                          ;  Revised: June 22, 2004
     9                          ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;
    11                          ;  This file is generated by the Device Editor on Application Generation.
    12                          ;  It contains code which loads the configuration data table generated in
    13                          ;  the file PSoCConfigTBL.asm
    14                          ;
    15                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    16                          ;  Edits to this file will not be preserved.
    17                          ;==========================================================================
    18                          ;
    19                          include "m8c.inc"
    20                          include "memory.inc"
    21                          include "GlobalParams.inc"
    22                          
    23                          export LoadConfigInit
    24                          export _LoadConfigInit
    25                          export LoadConfig_sensor_gateway
    26                          export _LoadConfig_sensor_gateway
    27                          export Port_3_Data_SHADE
    28                          export _Port_3_Data_SHADE
    29                          
    30                          
    31                          export NO_SHADOW
    32                          export _NO_SHADOW
    33                          
    34  0010                    FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
    35  00FF                    END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
    36                          
    37                          AREA psoc_config(rom, rel)
    38                          
    39                          ;---------------------------------------------------------------------------
    40                          ; LoadConfigInit - Establish the start-up configuration (except for a few
    41                          ;                  parameters handled by boot code, like CPU speed). This
    42                          ;                  function can be called from user code, but typically it
    43                          ;                  is only called from boot.
    44                          ;
    45                          ;       INPUTS: None.
    46                          ;      RETURNS: Nothing.
    47                          ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
    48                          ;               In the large memory model currently only the page
    49                          ;               pointer registers listed below are modified.  This does
    50                          ;               not guarantee that in future implementations of this
    51                          ;               function other page pointer registers will not be
    52                          ;               modified.
    53                          ;          
    54                          ;               Page Pointer Registers Modified: 
    55                          ;               CUR_PP
    56                          ;
    57  03B1                    _LoadConfigInit:
    58  03B1                     LoadConfigInit:
    59                              RAM_PROLOGUE RAM_USE_CLASS_4
    60                              
    61  03B1  55 88  00         	mov		[Port_3_Data_SHADE], 0h
    62                          
    63  03B4  7C 0200           	lcall	LoadConfigTBL_sensor_gateway_Ordered
    64  03B7  7C 03BB           	lcall	LoadConfig_sensor_gateway
    65                          
    66                          
    67                              RAM_EPILOGUE RAM_USE_CLASS_4
    68  03BA  7F                    ret
    69                          
    70                          ;---------------------------------------------------------------------------
    71                          ; Load Configuration sensor_gateway
    72                          ;
    73                          ;    Load configuration registers for sensor_gateway.
    74                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
    75                          ;
    76                          ;       INPUTS: None.
    77                          ;      RETURNS: Nothing.
    78                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
    79                          ;               modified as may the Page Pointer registers!
    80                          ;               In the large memory model currently only the page
    81                          ;               pointer registers listed below are modified.  This does
    82                          ;               not guarantee that in future implementations of this
    83                          ;               function other page pointer registers will not be
    84                          ;               modified.
    85                          ;          
    86                          ;               Page Pointer Registers Modified: 
    87                          ;               CUR_PP
    88                          ;
    89  03BB                    _LoadConfig_sensor_gateway:
    90  03BB                     LoadConfig_sensor_gateway:
    91                              RAM_PROLOGUE RAM_USE_CLASS_4
    92                          
    93  03BB  10                	push	x
    94  03BC  70 EF                 M8C_SetBank0                    ; Force bank 0
    95  03BE  50 00                 mov     a, 0                    ; Specify bank 0
    96  03C0  67                    asr     a                       ; Store in carry flag
    97                                                              ; Load bank 0 table:
    98  03C1  50 02                 mov     A, >LoadConfigTBL_sensor_gateway_Bank0
    99  03C3  57 E9                 mov     X, <LoadConfigTBL_sensor_gateway_Bank0
   100  03C5  7C 03D6               lcall   LoadConfig              ; Load the bank 0 values
   101                          
   102  03C8  50 01                 mov     a, 1                    ; Specify bank 1
   103  03CA  67                    asr     a                       ; Store in carry flag
   104                                                              ; Load bank 1 table:
   105  03CB  50 03                 mov     A, >LoadConfigTBL_sensor_gateway_Bank1
   106  03CD  57 62                 mov     X, <LoadConfigTBL_sensor_gateway_Bank1
   107  03CF  7C 03D6               lcall   LoadConfig              ; Load the bank 1 values
   108                          
   109  03D2  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   110  03D4  20                	pop		x
   111                          
   112                              RAM_EPILOGUE RAM_USE_CLASS_4
   113  03D5  7F                    ret
   114                          
   115                          
   116                          
   117                          
   118                          ;---------------------------------------------------------------------------
   119                          ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
   120                          ;              pairs. Terminate on address=0xFF.
   121                          ;
   122                          ;  INPUTS:  [A,X] points to the table to be loaded
   123                          ;           Flag Register Carry bit encodes the Register Bank
   124                          ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
   125                          ;
   126                          ;  RETURNS: nothing.
   127                          ;
   128                          ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
   129                          ;                X-3 Temporary store for register address
   130                          ;                X-2 LSB of config table address
   131                          ;                X-1 MSB of config table address
   132                          ;
   133  03D6                    LoadConfig:
   134  03D6  71 40                 RAM_PROLOGUE RAM_USE_CLASS_2
   135  03D8  38 02                 add     SP, 2                   ; Set up local vars
   136  03DA  10                    push    X                       ; Save config table address on stack
   137  03DB  08                    push    A
   138  03DC  4F                    mov     X, SP
   139  03DD  56 FC 00              mov     [X-4], 0                ; Set default Destination to Bank 0
   140  03E0  D004                  jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
   141  03E2  56 FC 01              mov     [X-4], 1                ; No Carry: default to Bank 1
   142  03E5                    .BankSelectSaved:
   143  03E5  18                    pop     A
   144  03E6  20                    pop     X
   145                          
   146  03E7                    LoadConfigLp:
   147  03E7  70 EF                 M8C_SetBank0                    ; Switch to bank 0
   148  03E9  62 E3 00              M8C_ClearWDT                    ; Clear the watchdog for long inits
   149  03EC  10                    push    X                       ; Preserve the config table address
   150  03ED  08                    push    A
   151  03EE  28                    romx                            ; Load register address from table
   152  03EF  39 FF                 cmp     A, END_CONFIG_TABLE     ; End of table?
   153  03F1  A01F                  jz      EndLoadConfig           ;   Yes, go wrap it up
   154  03F3  4F                    mov     X, SP                   ;
   155  03F4  48 FC 01              tst     [X-4], 1                ; Loading IO Bank 1?
   156  03F7  A003                  jz      .IOBankNowSet           ;    No, Bank 0 is fine
   157  03F9  71 10                 M8C_SetBank1                    ;   Yes, switch to Bank 1
   158  03FB                    .IOBankNowSet:
   159  03FB  54 FD                 mov     [X-3], A                ; Stash the register address
   160  03FD  18                    pop     A                       ; Retrieve the table address
   161  03FE  20                    pop     X
   162  03FF  75                    inc     X                       ; Advance to the data byte
   163  0400  09 00                 adc     A, 0
   164  0402  10                    push    X                       ; Save the config table address again
   165  0403  08                    push    A
   166  0404  28                    romx                            ; load config data from the table
   167  0405  4F                    mov     X, SP                   ; retrieve the register address
   168  0406  59 FD                 mov     X, [X-3]
   169  0408  61 00                 mov     reg[X], A               ; Configure the register
   170  040A  18                    pop     A                       ; retrieve the table address
   171  040B  20                    pop     X
   172  040C  75                    inc     X                       ; advance to next table entry
   173  040D  09 00                 adc     A, 0
   174  040F  8FD7                  jmp     LoadConfigLp            ; loop to configure another register
   175  0411                    EndLoadConfig:
   176  0411  38 FC                 add     SP, -4
   177  0413  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_2
   178  0417  7F                    ret
   179                          
   180                          AREA InterruptRAM(ram, rel)
   181                          
   182  0088                    NO_SHADOW:
   183  0088                    _NO_SHADOW:
   184                          ; write only register shadows
   185  0088                    _Port_3_Data_SHADE:
   186  0088                    Port_3_Data_SHADE:	BLK	1
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:43 2009
                     _LoadConfigInit 03B1                              MAC0_CL0 00EE                              MAC0_CL1 00EF  
                            MAC1_CL0 00AE                              MAC1_CL1 00AF                                 MAC_X 00EC  
                               MAC_Y 00ED                                MAC0_X 00EC                                MAC0_Y 00ED  
                              MAC1_X 00AC                                MAC1_Y 00AD                                HITECH 0002  
                     FLAG_PGMODE_01b 0040                       FLAG_PGMODE_10b 0080    LoadConfigTBL_sensor_gateway_Bank0 02E9  
  LoadConfigTBL_sensor_gateway_Bank1 0362                     Port_3_Data_SHADE 0088             SYSTEM_LARGE_MEMORY_MODEL 0001  
                           NO_SHADOW 0088                               MAC_CL0 00EE                               MAC_CL1 00EF  
           LoadConfig_sensor_gateway 03BB                    _Port_3_Data_SHADE 0088                            _NO_SHADOW 0088  
                    FLAG_PGMODE_MASK 00C0                               RES_WDT 00E3                       RAM_USE_CLASS_1 0001  
                     RAM_USE_CLASS_2 0002                       RAM_USE_CLASS_3 0004                       RAM_USE_CLASS_4 0008  
                          LoadConfig 03D6                        LoadConfigInit 03B1                      END_CONFIG_TABLE 00FF  
                       EndLoadConfig 0411            _LoadConfig_sensor_gateway 03BB                         FLAG_XIO_MASK 0010  
          SYSTEM_IDXPG_TRACKS_IDX_PP 0001                          LoadConfigLp 03E7            SYSTEM_IDXPG_TRACKS_STK_PP 0000  
LoadConfigTBL_sensor_gateway_Ordered 0200  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:43 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          include "m8c.inc"
     4                          ;  Personalization tables 
     5                          export LoadConfigTBL_sensor_gateway_Bank1
     6                          export LoadConfigTBL_sensor_gateway_Bank0
     7                          export LoadConfigTBL_sensor_gateway_Ordered
     8                          AREA lit(rom, rel)
     9  0200                    LoadConfigTBL_sensor_gateway_Ordered:
    10                          ;  Ordered Global Register values
    11  0200  71 10             	M8C_SetBank1
    12  0202  62 00 2E          	mov	reg[00h], 2eh		; Port_0_DriveMode_0 register (PRT0DM0)
    13  0205  62 01 FB          	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
    14  0208  70 EF             	M8C_SetBank0
    15  020A  62 03 D0          	mov	reg[03h], d0h		; Port_0_DriveMode_2 register (PRT0DM2)
    16  020D  62 02 05          	mov	reg[02h], 05h		; Port_0_GlobalSelect register (PRT0GS)
    17  0210  71 10             	M8C_SetBank1
    18  0212  62 02 00          	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
    19  0215  62 03 00          	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
    20  0218  70 EF             	M8C_SetBank0
    21  021A  62 01 00          	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
    22  021D  71 10             	M8C_SetBank1
    23  021F  62 04 40          	mov	reg[04h], 40h		; Port_1_DriveMode_0 register (PRT1DM0)
    24  0222  62 05 BF          	mov	reg[05h], bfh		; Port_1_DriveMode_1 register (PRT1DM1)
    25  0225  70 EF             	M8C_SetBank0
    26  0227  62 07 BB          	mov	reg[07h], bbh		; Port_1_DriveMode_2 register (PRT1DM2)
    27  022A  62 06 44          	mov	reg[06h], 44h		; Port_1_GlobalSelect register (PRT1GS)
    28  022D  71 10             	M8C_SetBank1
    29  022F  62 06 00          	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
    30  0232  62 07 00          	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
    31  0235  70 EF             	M8C_SetBank0
    32  0237  62 05 00          	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
    33  023A  71 10             	M8C_SetBank1
    34  023C  62 08 62          	mov	reg[08h], 62h		; Port_2_DriveMode_0 register (PRT2DM0)
    35  023F  62 09 9F          	mov	reg[09h], 9fh		; Port_2_DriveMode_1 register (PRT2DM1)
    36  0242  70 EF             	M8C_SetBank0
    37  0244  62 0B F7          	mov	reg[0bh], f7h		; Port_2_DriveMode_2 register (PRT2DM2)
    38  0247  62 0A 28          	mov	reg[0ah], 28h		; Port_2_GlobalSelect register (PRT2GS)
    39  024A  71 10             	M8C_SetBank1
    40  024C  62 0A 00          	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
    41  024F  62 0B 00          	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
    42  0252  70 EF             	M8C_SetBank0
    43  0254  62 09 00          	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
    44  0257  71 10             	M8C_SetBank1
    45  0259  62 0C 80          	mov	reg[0ch], 80h		; Port_3_DriveMode_0 register (PRT3DM0)
    46  025C  62 0D 7F          	mov	reg[0dh], 7fh		; Port_3_DriveMode_1 register (PRT3DM1)
    47  025F  70 EF             	M8C_SetBank0
    48  0261  62 0F 7F          	mov	reg[0fh], 7fh		; Port_3_DriveMode_2 register (PRT3DM2)
    49  0264  62 0E 00          	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
    50  0267  71 10             	M8C_SetBank1
    51  0269  62 0E 00          	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
    52  026C  62 0F 00          	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
    53  026F  70 EF             	M8C_SetBank0
    54  0271  62 0D 00          	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
    55  0274  71 10             	M8C_SetBank1
    56  0276  62 10 85          	mov	reg[10h], 85h		; Port_4_DriveMode_0 register (PRT4DM0)
    57  0279  62 11 7B          	mov	reg[11h], 7bh		; Port_4_DriveMode_1 register (PRT4DM1)
    58  027C  70 EF             	M8C_SetBank0
    59  027E  62 13 FF          	mov	reg[13h], ffh		; Port_4_DriveMode_2 register (PRT4DM2)
    60  0281  62 12 00          	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
    61  0284  71 10             	M8C_SetBank1
    62  0286  62 12 00          	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
    63  0289  62 13 00          	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
    64  028C  70 EF             	M8C_SetBank0
    65  028E  62 11 00          	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
    66  0291  71 10             	M8C_SetBank1
    67  0293  62 14 00          	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
    68  0296  62 15 00          	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
    69  0299  70 EF             	M8C_SetBank0
    70  029B  62 17 00          	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
    71  029E  62 16 00          	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
    72  02A1  71 10             	M8C_SetBank1
    73  02A3  62 16 00          	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
    74  02A6  62 17 00          	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
    75  02A9  70 EF             	M8C_SetBank0
    76  02AB  62 15 00          	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
    77  02AE  71 10             	M8C_SetBank1
    78  02B0  62 18 00          	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
    79  02B3  62 19 00          	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
    80  02B6  70 EF             	M8C_SetBank0
    81  02B8  62 1B 00          	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
    82  02BB  62 1A 00          	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
    83  02BE  71 10             	M8C_SetBank1
    84  02C0  62 1A 00          	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
    85  02C3  62 1B 00          	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
    86  02C6  70 EF             	M8C_SetBank0
    87  02C8  62 19 00          	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
    88  02CB  71 10             	M8C_SetBank1
    89  02CD  62 1C 00          	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
    90  02D0  62 1D 00          	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
    91  02D3  70 EF             	M8C_SetBank0
    92  02D5  62 1F 00          	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
    93  02D8  62 1E 00          	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
    94  02DB  71 10             	M8C_SetBank1
    95  02DD  62 1E 00          	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
    96  02E0  62 1F 00          	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
    97  02E3  70 EF             	M8C_SetBank0
    98  02E5  62 1D 00          	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
    99  02E8  7F                	ret
   100  02E9                    LoadConfigTBL_sensor_gateway_Bank0:
   101                          ;  Global Register values
   102  02E9  60 28             	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
   103  02EB  66 00             	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
   104  02ED  63 05             	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
   105  02EF  65 00             	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
   106  02F1  E6 00             	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
   107  02F3  E7 00             	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
   108  02F5  D6 00             	db		d6h, 00h		; I2CConfig register (I2CCFG)
   109  02F7  B0 01             	db		b0h, 01h		; Row_0_InputMux register (RDI0RI)
   110  02F9  B1 00             	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
   111  02FB  B2 00             	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
   112  02FD  B3 33             	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
   113  02FF  B4 33             	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
   114  0301  B5 00             	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
   115  0303  B6 00             	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
   116  0305  B8 65             	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
   117  0307  B9 00             	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
   118  0309  BA 10             	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
   119  030B  BB 33             	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
   120  030D  BC 33             	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
   121  030F  BD 00             	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
   122  0311  BE 08             	db		beh, 08h		; Row_1_OutputDrive_1 register (RDI1SRO1)
   123  0313  C0 00             	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
   124  0315  C1 00             	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
   125  0317  C2 20             	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
   126  0319  C3 33             	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
   127  031B  C4 33             	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
   128  031D  C5 00             	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
   129  031F  C6 00             	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
   130  0321  C8 14             	db		c8h, 14h		; Row_3_InputMux register (RDI3RI)
   131  0323  C9 00             	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
   132  0325  CA 30             	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
   133  0327  CB 33             	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
   134  0329  CC 33             	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
   135  032B  CD 20             	db		cdh, 20h		; Row_3_OutputDrive_0 register (RDI3SRO0)
   136  032D  CE 00             	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
   137  032F  6C 00             	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
   138  0331  6D 00             	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
   139  0333  6E 00             	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
   140  0335  6F 00             	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
   141                          ;  Instance name Counter8_ltrx, User Module Counter8
   142                          ;       Instance name Counter8_ltrx, Block Name CNTR8(DBB10)
   143  0337  33 00             	db		33h, 00h		;Counter8_ltrx_CONTROL_REG(DBB10CR0)
   144  0339  31 27             	db		31h, 27h		;Counter8_ltrx_PERIOD_REG(DBB10DR1)
   145  033B  32 13             	db		32h, 13h		;Counter8_ltrx_COMPARE_REG(DBB10DR2)
   146                          ;  Instance name LED1, User Module LED
   147                          ;  Instance name LTRX, User Module UART
   148                          ;       Instance name LTRX, Block Name RX(DCB13)
   149  033D  3F 00             	db		3fh, 00h		;LTRX_RX_CONTROL_REG(DCB13CR0)
   150  033F  3D 00             	db		3dh, 00h		;LTRX_(DCB13DR1)
   151  0341  3E 00             	db		3eh, 00h		;LTRX_RX_BUFFER_REG (DCB13DR2)
   152                          ;       Instance name LTRX, Block Name TX(DCB12)
   153  0343  3B 00             	db		3bh, 00h		;LTRX_TX_CONTROL_REG(DCB12CR0)
   154  0345  39 00             	db		39h, 00h		;LTRX_TX_BUFFER_REG (DCB12DR1)
   155  0347  3A 00             	db		3ah, 00h		;LTRX_(DCB12DR2)
   156                          ;  Instance name OneWire, User Module OneWire
   157                          ;       Instance name OneWire, Block Name BitClk(DBB31)
   158  0349  57 00             	db		57h, 00h		;OneWire_BITCLK_CONTROL_REG(DBB31CR0)
   159  034B  55 00             	db		55h, 00h		;OneWire_BITCLK_PERIOD_REG (DBB31DR1)
   160  034D  56 00             	db		56h, 00h		;OneWire_BITCLK_COMPARE_REG(DBB31DR2)
   161                          ;       Instance name OneWire, Block Name XCVR(DCB32)
   162  034F  5B 00             	db		5bh, 00h		;OneWire_XCVR_CONTROL_REG(DCB32CR0)
   163  0351  59 00             	db		59h, 00h		;OneWire_XCVR_TX_BUFFER_REG(DCB32DR1)
   164  0353  5A 00             	db		5ah, 00h		;OneWire_XCVR_RX_BUFFER_REG(DCB32DR2)
   165                          ;  Instance name Ticker, User Module Counter16
   166                          ;       Instance name Ticker, Block Name CNTR16_LSB(DCB22)
   167  0355  4B 00             	db		4bh, 00h		;Ticker_CONTROL_LSB_REG(DCB22CR0)
   168  0357  49 FF             	db		49h, ffh		;Ticker_PERIOD_LSB_REG(DCB22DR1)
   169  0359  4A 01             	db		4ah, 01h		;Ticker_COMPARE_LSB_REG(DCB22DR2)
   170                          ;       Instance name Ticker, Block Name CNTR16_MSB(DCB23)
   171  035B  4F 00             	db		4fh, 00h		;Ticker_CONTROL_MSB_REG(DCB23CR0)
   172  035D  4D FF             	db		4dh, ffh		;Ticker_PERIOD_MSB_REG(DCB23DR1)
   173  035F  4E 00             	db		4eh, 00h		;Ticker_COMPARE_MSB_REG(DCB23DR2)
   174  0361  FF                	db		ffh
   175  0362                    LoadConfigTBL_sensor_gateway_Bank1:
   176                          ;  Global Register values
   177  0362  61 00             	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
   178  0364  69 00             	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
   179  0366  60 00             	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
   180  0368  62 00             	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
   181  036A  67 33             	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
   182  036C  68 33             	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
   183  036E  63 00             	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
   184  0370  66 00             	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
   185  0372  D1 00             	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
   186  0374  D3 00             	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
   187  0376  D0 00             	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
   188  0378  D2 00             	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
   189  037A  E1 30             	db		e1h, 30h		; OscillatorControl_1 register (OSC_CR1)
   190  037C  E2 00             	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
   191  037E  DF 01             	db		dfh, 01h		; OscillatorControl_3 register (OSC_CR3)
   192  0380  DE 01             	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
   193  0382  DD 00             	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
   194  0384  E7 00             	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
   195                          ;  Instance name Counter8_ltrx, User Module Counter8
   196                          ;       Instance name Counter8_ltrx, Block Name CNTR8(DBB10)
   197  0386  30 61             	db		30h, 61h		;Counter8_ltrx_FUNC_REG(DBB10FN)
   198  0388  31 15             	db		31h, 15h		;Counter8_ltrx_INPUT_REG(DBB10IN)
   199  038A  32 40             	db		32h, 40h		;Counter8_ltrx_OUTPUT_REG(DBB10OU)
   200                          ;  Instance name LED1, User Module LED
   201                          ;  Instance name LTRX, User Module UART
   202                          ;       Instance name LTRX, Block Name RX(DCB13)
   203  038C  3C 05             	db		3ch, 05h		;LTRX_RX_FUNC_REG   (DCB13FN)
   204  038E  3D E2             	db		3dh, e2h		;LTRX_RX_INPUT_REG  (DCB13IN)
   205  0390  3E 40             	db		3eh, 40h		;LTRX_RX_OUTPUT_REG (DCB13OU)
   206                          ;       Instance name LTRX, Block Name TX(DCB12)
   207  0392  38 1D             	db		38h, 1dh		;LTRX_TX_FUNC_REG   (DCB12FN)
   208  0394  39 02             	db		39h, 02h		;LTRX_TX_INPUT_REG  (DCB12IN)
   209  0396  3A 46             	db		3ah, 46h		;LTRX_TX_OUTPUT_REG (DCB12OU)
   210                          ;  Instance name OneWire, User Module OneWire
   211                          ;       Instance name OneWire, Block Name BitClk(DBB31)
   212  0398  54 21             	db		54h, 21h		;OneWire_BITCLK_FUNC_REG(DBB31FN)
   213  039A  55 11             	db		55h, 11h		;OneWire_BITCLK_INPUT_REG(DBB31IN)
   214  039C  56 40             	db		56h, 40h		;OneWire_BITCLK_OUTPUT_REG(DBB31OU)
   215                          ;       Instance name OneWire, Block Name XCVR(DCB32)
   216  039E  58 16             	db		58h, 16h		;OneWire_XCVR_FUNC_REG(DCB32FN)
   217  03A0  59 F3             	db		59h, f3h		;OneWire_XCVR_INPUT_REG(DCB32IN)
   218  03A2  5A 45             	db		5ah, 45h		;OneWire_XCVR_OUTPUT_REG(DCB32OU)
   219                          ;  Instance name Ticker, User Module Counter16
   220                          ;       Instance name Ticker, Block Name CNTR16_LSB(DCB22)
   221  03A4  48 01             	db		48h, 01h		;Ticker_FUNC_LSB_REG(DCB22FN)
   222  03A6  49 17             	db		49h, 17h		;Ticker_INPUT_LSB_REG(DCB22IN)
   223  03A8  4A 40             	db		4ah, 40h		;Ticker_OUTPUT_LSB_REG(DCB22OU)
   224                          ;       Instance name Ticker, Block Name CNTR16_MSB(DCB23)
   225  03AA  4C 21             	db		4ch, 21h		;Ticker_FUNC_MSB_REG(DCB23FN)
   226  03AC  4D 37             	db		4dh, 37h		;Ticker_INPUT_MSB_REG(DCB23IN)
   227  03AE  4E 40             	db		4eh, 40h		;Ticker_OUTPUT_MSB_REG(DCB23OU)
   228  03B0  FF                	db		ffh
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:43 2009
                            MAC0_CL0 00EE                              MAC0_CL1 00EF                              MAC1_CL0 00AE  
                            MAC1_CL1 00AF                                 MAC_X 00EC                                 MAC_Y 00ED  
                              MAC0_X 00EC                                MAC0_Y 00ED                                MAC1_X 00AC  
                              MAC1_Y 00AD    LoadConfigTBL_sensor_gateway_Bank0 02E9    LoadConfigTBL_sensor_gateway_Bank1 0362  
                             MAC_CL0 00EE                               MAC_CL1 00EF                         FLAG_XIO_MASK 0010  
LoadConfigTBL_sensor_gateway_Ordered 0200  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:44 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter16 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Ticker API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Ticker_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    22  00DF                    Ticker_INT_REG:                            equ 0x0df
    23  0008                    Ticker_INT_MASK:                           equ 0x08
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Ticker user defined values
    28                          ;--------------------------------------------------
    29                          
    30  FFFF                    Ticker_PERIOD:                             equ 0xffff
    31  0001                    Ticker_COMPARE_VALUE:                      equ 0x1
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Ticker
    36                          ;--------------------------------------------------
    37                          
    38  0048                    Ticker_COUNTER_LSB_REG:                equ 0x48   ; DR0 Counter register
    39  004C                    Ticker_COUNTER_MSB_REG:                equ 0x4c
    40  0049                    Ticker_PERIOD_LSB_REG:                 equ 0x49   ; DR1 Period register
    41  004D                    Ticker_PERIOD_MSB_REG:                 equ 0x4d
    42  004A                    Ticker_COMPARE_LSB_REG:                equ 0x4a   ; DR2 CompareValue register
    43  004E                    Ticker_COMPARE_MSB_REG:                equ 0x4e
    44  004B                    Ticker_CONTROL_LSB_REG:                equ 0x4b   ; Control register
    45  004F                    Ticker_CONTROL_MSB_REG:                equ 0x4f
    46  0048                    Ticker_FUNC_LSB_REG:                   equ 0x48   ; Function register
    47  004C                    Ticker_FUNC_MSB_REG:                   equ 0x4c
    48  0049                    Ticker_INPUT_LSB_REG:                  equ 0x49   ; Input register
    49  004D                    Ticker_INPUT_MSB_REG:                  equ 0x4d
    50  004A                    Ticker_OUTPUT_LSB_REG:                 equ 0x4a   ; Output register
    51  004E                    Ticker_OUTPUT_MSB_REG:                 equ 0x4e
    52                          
    53                          
    54                          ;--------------------------------------------------
    55                          ; Ticker Macro 'Functions'
    56                          ;--------------------------------------------------
    57                          
    58                             macro Ticker_Start_M
    59                             or    reg[Ticker_CONTROL_LSB_REG],  Ticker_CONTROL_REG_START_BIT
    60  7A27                       endm
    61                          
    62                             macro Ticker_Stop_M
    63                             and   reg[Ticker_CONTROL_LSB_REG], ~Ticker_CONTROL_REG_START_BIT
    64  7A27                       endm
    65                          
    66                             macro Ticker_EnableInt_M
    67                             M8C_EnableIntMask Ticker_INT_REG, Ticker_INT_MASK
    68  7A27                       endm
    69                          
    70                             macro Ticker_DisableInt_M
    71                             M8C_DisableIntMask Ticker_INT_REG, Ticker_INT_MASK
    72  7A27                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter16 User Module software implementation file
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "Ticker.inc"
    26                          
    27                          ;-----------------------------------------------
    28                          ;  Global Symbols
    29                          ;-----------------------------------------------
    30                          export  Ticker_EnableInt
    31                          export _Ticker_EnableInt
    32                          export  Ticker_DisableInt
    33                          export _Ticker_DisableInt
    34                          export  Ticker_Start
    35                          export _Ticker_Start
    36                          export  Ticker_Stop
    37                          export _Ticker_Stop
    38                          export  Ticker_WritePeriod
    39                          export _Ticker_WritePeriod
    40                          export  Ticker_WriteCompareValue
    41                          export _Ticker_WriteCompareValue
    42                          export  Ticker_wReadCompareValue
    43                          export _Ticker_wReadCompareValue
    44                          export  Ticker_wReadCounter
    45                          export _Ticker_wReadCounter
    46                          
    47                          ; The following functions are deprecated and subject to omission in future releases
    48                          ;
    49                          export  wTicker_ReadCompareValue  ; deprecated
    50                          export _wTicker_ReadCompareValue  ; deprecated
    51                          export  wTicker_ReadCounter       ; deprecated
    52                          export _wTicker_ReadCounter       ; deprecated
    53                          
    54                          
    55                          AREA sensor_gateway_RAM (RAM,REL)
    56                          
    57                          ;-----------------------------------------------
    58                          ;  Constant Definitions
    59                          ;-----------------------------------------------
    60                          
    61  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    62                          
    63                          
    64                          ;-----------------------------------------------
    65                          ; Variable Allocation
    66                          ;-----------------------------------------------
    67                          
    68                          
    69                          AREA UserModules (ROM, REL)
    70                          
    71                          .SECTION
    72                          ;-----------------------------------------------------------------------------
    73                          ;  FUNCTION NAME: Ticker_EnableInt
    74                          ;
    75                          ;  DESCRIPTION:
    76                          ;     Enables this counter's interrupt by setting the interrupt enable mask bit
    77                          ;     associated with this User Module. This function has no effect until and
    78                          ;     unless the global interrupts are enabled (for example by using the
    79                          ;     macro M8C_EnableGInt).
    80                          ;-----------------------------------------------------------------------------
    81                          ;
    82                          ;  ARGUMENTS:    None.
    83                          ;  RETURNS:      Nothing.
    84                          ;  SIDE EFFECTS: 
    85                          ;    The A and X registers may be modified by this or future implementations
    86                          ;    of this function.  The same is true for all RAM page pointer registers in
    87                          ;    the Large Memory Model.  When necessary, it is the calling function's
    88                          ;    responsibility to perserve their values across calls to fastcall16 
    89                          ;    functions.
    90                          ;
    91  3CDF                     Ticker_EnableInt:
    92  3CDF                    _Ticker_EnableInt:
    93                             RAM_PROLOGUE RAM_USE_CLASS_1
    94  3CDF  43 DF 08             Ticker_EnableInt_M
    95                             RAM_EPILOGUE RAM_USE_CLASS_1
    96  3CE2  7F                   ret
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: Ticker_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this counter's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS: 
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  3CE3                     Ticker_DisableInt:
   119  3CE3                    _Ticker_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  3CE3  41 DF F7             Ticker_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  3CE6  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: Ticker_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     counter will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS: 
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  3CE7                     Ticker_Start:
   148  3CE7                    _Ticker_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  3CE7  43 4B 01             Ticker_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  3CEA  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: Ticker_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables counter operation by clearing the start bit in the Control
   163                          ;     register of the LSB block.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  3CEB                     Ticker_Stop:
   176  3CEB                    _Ticker_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  3CEB  41 4B FE             Ticker_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  3CEE  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: Ticker_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 16-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the counter user module is stopped, then this value will also be
   197                          ;    latched into the Count registers (DR0).
   198                          ;     
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  3CEF                     Ticker_WritePeriod:
   206  3CEF                    _Ticker_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  3CEF  60 49                mov   reg[Ticker_PERIOD_LSB_REG], A
   209  3CF1  5B                   mov   A, X
   210  3CF2  60 4D                mov   reg[Ticker_PERIOD_MSB_REG], A
   211                             RAM_EPILOGUE RAM_USE_CLASS_1
   212  3CF4  7F                   ret
   213                          
   214                          
   215                          .ENDSECTION
   216                          
   217                          .SECTION
   218                          ;-----------------------------------------------------------------------------
   219                          ;  FUNCTION NAME: Ticker_WriteCompareValue
   220                          ;
   221                          ;  DESCRIPTION:
   222                          ;     Writes compare value into the Compare register (DR2).
   223                          ;-----------------------------------------------------------------------------
   224                          ;
   225                          ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
   226                          ;  RETURNS:      Nothing
   227                          ;  SIDE EFFECTS: 
   228                          ;    The A and X registers may be modified by this or future implementations
   229                          ;    of this function.  The same is true for all RAM page pointer registers in
   230                          ;    the Large Memory Model.  When necessary, it is the calling function's
   231                          ;    responsibility to perserve their values across calls to fastcall16 
   232                          ;    functions.
   233                          ;
   234  3CF5                     Ticker_WriteCompareValue:
   235  3CF5                    _Ticker_WriteCompareValue:
   236                             RAM_PROLOGUE RAM_USE_CLASS_1
   237  3CF5  60 4A                mov   reg[Ticker_COMPARE_LSB_REG], A
   238  3CF7  5B                   mov   A, X
   239  3CF8  60 4E                mov   reg[Ticker_COMPARE_MSB_REG], A
   240                             RAM_EPILOGUE RAM_USE_CLASS_1
   241  3CFA  7F                   ret
   242                          
   243                          
   244                          .ENDSECTION
   245                          
   246                          .SECTION
   247                          ;-----------------------------------------------------------------------------
   248                          ;  FUNCTION NAME: Ticker_wReadCompareValue
   249                          ;
   250                          ;  DESCRIPTION:
   251                          ;     Reads the Compare registers.
   252                          ;-----------------------------------------------------------------------------
   253                          ;
   254                          ;  ARGUMENTS:    None
   255                          ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
   256                          ;  SIDE EFFECTS: 
   257                          ;    The A and X registers may be modified by this or future implementations
   258                          ;    of this function.  The same is true for all RAM page pointer registers in
   259                          ;    the Large Memory Model.  When necessary, it is the calling function's
   260                          ;    responsibility to perserve their values across calls to fastcall16 
   261                          ;    functions.
   262                          ;
   263  3CFB                     Ticker_wReadCompareValue:
   264  3CFB                    _Ticker_wReadCompareValue:
   265  3CFB                     wTicker_ReadCompareValue:                       ; this name deprecated
   266  3CFB                    _wTicker_ReadCompareValue:                       ; this name deprecated
   267                             RAM_PROLOGUE RAM_USE_CLASS_1
   268  3CFB  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]
   269  3CFD  5C                   mov   X, A
   270  3CFE  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]
   271                             RAM_EPILOGUE RAM_USE_CLASS_1
   272  3D00  7F                   ret
   273                          
   274                          
   275                          .ENDSECTION
   276                          
   277                          .SECTION
   278                          ;-----------------------------------------------------------------------------
   279                          ;  FUNCTION NAME: Ticker_wReadCounter
   280                          ;
   281                          ;  DESCRIPTION:
   282                          ;     Returns the value in the Count register (DR0), preserving the value in
   283                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   284                          ;     from the Count to the Compare registers by holding the clock low in
   285                          ;     the MSB PSoC block.
   286                          ;-----------------------------------------------------------------------------
   287                          ;
   288                          ;  ARGUMENTS: None
   289                          ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
   290                          ;  SIDE EFFECTS:
   291                          ;     1) The user module is stopped momentarily and one or more counts may be missed.
   292                          ;     2) The A and X registers may be modified by this or future implementations
   293                          ;        of this function.  The same is true for all RAM page pointer registers in
   294                          ;        the Large Memory Model.  When necessary, it is the calling function's
   295                          ;        responsibility to perserve their values across calls to fastcall16 
   296                          ;        functions.
   297                          ;
   298  3D01                     Ticker_wReadCounter:
   299  3D01                    _Ticker_wReadCounter:
   300  3D01                     wTicker_ReadCounter:                            ; this name deprecated
   301  3D01                    _wTicker_ReadCounter:                            ; this name deprecated
   302                          
   303  0000                       bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
   304  0002                       bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
   305  0003                       bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
   306  0004                       wCounter:               EQU   4                  ; Frame offset to temp Count   store
   307  0006                       STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
   308                          
   309  3D01  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   310  3D03  4F                   mov   X, SP                                      ; X <-  stack frame pointer
   311  3D04  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]          ; Save the Compare register on the stack
   312  3D06  08                   push  A                                          ;
   313  3D07  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]          ;
   314  3D09  08                   push  A                                          ;   -stack frame now 2 bytes-
   315  3D0A  5D 4B                mov   A, reg[Ticker_CONTROL_LSB_REG]          ; Save CR0 (running or stopped state)
   316  3D0C  08                   push  A                                          ;   -stack frame now 3 bytes-
   317  3D0D  41 4B FE             Ticker_Stop_M                                 ; Disable (stop) the Counter if running
   318  3D10  71 10                M8C_SetBank1                                     ;
   319  3D12  5D 49                mov   A, reg[Ticker_INPUT_LSB_REG]            ; save the LSB clock input setting
   320  3D14  08                   push  A                                          ;   on the stack (now 4 bytes) and ...
   321                                                                              ;   hold the clock low:
   322  3D15  62 49 00             mov   reg[Ticker_INPUT_LSB_REG], INPUT_REG_NULL
   323  3D18  70 EF                M8C_SetBank0                                     ; Extract the Count via DR2 register
   324  3D1A  5D 4C                mov   A, reg[Ticker_COUNTER_MSB_REG]          ; DR2 <- DR0 (in the MSB block)
   325  3D1C  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]          ; Stash the Count MSB on the stack
   326  3D1E  08                   push  A                                          ;   -stack frame is now 5 bytes
   327  3D1F  5D 48                mov   A, reg[Ticker_COUNTER_LSB_REG]          ; DR2 <- DR0 (in the LSB block)
   328  3D21  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]          ; Stash the Count LSB on the stack
   329  3D23  08                   push  A                                          ;   -stack frame is now 6 bytes-
   330  3D24  52 00                mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
   331  3D26  60 4E                mov   reg[Ticker_COMPARE_MSB_REG], A          ;
   332  3D28  52 01                mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
   333  3D2A  60 4A                mov   reg[Ticker_COMPARE_LSB_REG], A          ;
   334  3D2C  71 10                M8C_SetBank1                                     ; ---Restore the counter operation
   335  3D2E  52 03                mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
   336  3D30  60 49                mov   reg[Ticker_INPUT_LSB_REG], A            ;   and restore it
   337  3D32  70 EF                M8C_SetBank0                                     ; Now re-enable (start) the counter
   338  3D34  52 02                mov   A, [X+bOrigControlReg]                     ;   if it was running when
   339  3D36  60 4B                mov   reg[Ticker_CONTROL_LSB_REG], A          ;   this function was first called
   340  3D38  18                   pop   A                                          ; Setup the return value
   341  3D39  20                   pop   X                                          ;
   342  3D3A  38 FC                ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
   343  3D3C  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   344  3D40  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:44 2009
          Ticker_WritePeriod 3CEF        Ticker_COMPARE_LSB_REG 004A        Ticker_COMPARE_MSB_REG 004E  
                    MAC0_CL0 00EE                      MAC0_CL1 00EF                      MAC1_CL0 00AE  
                    MAC1_CL1 00AF                         MAC_X 00EC                         MAC_Y 00ED  
                _Ticker_Stop 3CEB          Ticker_INPUT_LSB_REG 0049      wTicker_ReadCompareValue 3CFB  
           bOrigClockSetting 0003                        MAC0_X 00EC                        MAC0_Y 00ED  
                      MAC1_X 00AC                        MAC1_Y 00AD                        HITECH 0002  
             FLAG_PGMODE_01b 0040               FLAG_PGMODE_10b 0080  Ticker_CONTROL_REG_START_BIT 0001  
           Ticker_DisableInt 3CE3                 _Ticker_Start 3CE7     _Ticker_wReadCompareValue 3CFB  
        _wTicker_ReadCounter 3D01      Ticker_WriteCompareValue 3CF5           _Ticker_WritePeriod 3CEF  
              INPUT_REG_NULL 0000     SYSTEM_LARGE_MEMORY_MODEL 0001            _Ticker_DisableInt 3CE3  
        _Ticker_wReadCounter 3D01                       MAC_CL0 00EE                       MAC_CL1 00EF  
           bOrigCompareValue 0000           wTicker_ReadCounter 3D01              FLAG_PGMODE_MASK 00C0  
             RAM_USE_CLASS_1 0001               RAM_USE_CLASS_2 0002               RAM_USE_CLASS_3 0004  
             RAM_USE_CLASS_4 0008              Ticker_EnableInt 3CDF               Ticker_INT_MASK 0008  
   _wTicker_ReadCompareValue 3CFB         Ticker_PERIOD_LSB_REG 0049         Ticker_PERIOD_MSB_REG 004D  
             bOrigControlReg 0002             _Ticker_EnableInt 3CDF           Ticker_wReadCounter 3D01  
            STACK_FRAME_SIZE 0006                Ticker_INT_REG 00DF      Ticker_wReadCompareValue 3CFB  
      Ticker_COUNTER_LSB_REG 0048        Ticker_COUNTER_MSB_REG 004C     _Ticker_WriteCompareValue 3CF5  
               FLAG_XIO_MASK 0010    SYSTEM_IDXPG_TRACKS_IDX_PP 0001        Ticker_CONTROL_LSB_REG 004B  
  SYSTEM_IDXPG_TRACKS_STK_PP 0000                  Ticker_Start 3CE7                   Ticker_Stop 3CEB  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:44 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  0000'                       endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  0000'                       endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  0000'                       endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  0000'                       endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  0000'                       endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  0000'                       endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  0000'                       endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  0000'                       endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  0000'                       endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  0000'                       endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  0000'                       endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  0000'                       endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  0000'                       endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  0000'                       endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  0000'                       endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  0000'                       endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  0000'                      endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  0000'                      endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  0000'                      endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  0000'                      endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  0000'                      endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  0000'                      endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  0000'                      endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  0000'                      endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  0000'                      endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  0000'                      endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  0000'                      endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  0000'                      endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  0000'                      endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  0000'                      endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  0000'                      endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  0000'                      endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  0000'                      endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  0000'                       endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  0000'                       endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  0000'                       endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  0000'                       endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  0000'                       endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  0000'                       endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  0000'                       endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  0000'                       endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  0000'                       endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  0000'                       endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  0000'                       endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  0000'                       endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  0000'                       endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  0000'                       endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  0000'                       endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  0000'                       endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter16 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Ticker API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Ticker_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    22  00DF                    Ticker_INT_REG:                            equ 0x0df
    23  0008                    Ticker_INT_MASK:                           equ 0x08
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Ticker user defined values
    28                          ;--------------------------------------------------
    29                          
    30  FFFF                    Ticker_PERIOD:                             equ 0xffff
    31  0001                    Ticker_COMPARE_VALUE:                      equ 0x1
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Ticker
    36                          ;--------------------------------------------------
    37                          
    38  0048                    Ticker_COUNTER_LSB_REG:                equ 0x48   ; DR0 Counter register
    39  004C                    Ticker_COUNTER_MSB_REG:                equ 0x4c
    40  0049                    Ticker_PERIOD_LSB_REG:                 equ 0x49   ; DR1 Period register
    41  004D                    Ticker_PERIOD_MSB_REG:                 equ 0x4d
    42  004A                    Ticker_COMPARE_LSB_REG:                equ 0x4a   ; DR2 CompareValue register
    43  004E                    Ticker_COMPARE_MSB_REG:                equ 0x4e
    44  004B                    Ticker_CONTROL_LSB_REG:                equ 0x4b   ; Control register
    45  004F                    Ticker_CONTROL_MSB_REG:                equ 0x4f
    46  0048                    Ticker_FUNC_LSB_REG:                   equ 0x48   ; Function register
    47  004C                    Ticker_FUNC_MSB_REG:                   equ 0x4c
    48  0049                    Ticker_INPUT_LSB_REG:                  equ 0x49   ; Input register
    49  004D                    Ticker_INPUT_MSB_REG:                  equ 0x4d
    50  004A                    Ticker_OUTPUT_LSB_REG:                 equ 0x4a   ; Output register
    51  004E                    Ticker_OUTPUT_MSB_REG:                 equ 0x4e
    52                          
    53                          
    54                          ;--------------------------------------------------
    55                          ; Ticker Macro 'Functions'
    56                          ;--------------------------------------------------
    57                          
    58                             macro Ticker_Start_M
    59                             or    reg[Ticker_CONTROL_LSB_REG],  Ticker_CONTROL_REG_START_BIT
    60  0000'                      endm
    61                          
    62                             macro Ticker_Stop_M
    63                             and   reg[Ticker_CONTROL_LSB_REG], ~Ticker_CONTROL_REG_START_BIT
    64  0000'                      endm
    65                          
    66                             macro Ticker_EnableInt_M
    67                             M8C_EnableIntMask Ticker_INT_REG, Ticker_INT_MASK
    68  0000'                      endm
    69                          
    70                             macro Ticker_DisableInt_M
    71                             M8C_DisableIntMask Ticker_INT_REG, Ticker_INT_MASK
    72  0000'                      endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TickerINT.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter16 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Ticker.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Ticker_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Ticker_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0000'                   _Ticker_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                          
    71                             ;---------------------------------------------------
    72                             ; Insert your custom code above this banner
    73                             ;---------------------------------------------------
    74                             ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76  0000' 7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:44 2009
                 _Ticker_ISR 0000                      MAC0_CL0 00EE                      MAC0_CL1 00EF  
                    MAC1_CL0 00AE                      MAC1_CL1 00AF                         MAC_X 00EC  
                       MAC_Y 00ED                        MAC0_X 00EC                        MAC0_Y 00ED  
                      MAC1_X 00AC                        MAC1_Y 00AD                        HITECH 0002  
                     MAC_CL0 00EE                       MAC_CL1 00EF  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:46 2009
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       2 August 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C29566
    11                          ;
    12                          ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h		;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h		;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31  0000                    SLEEP_TIMER:			equ	0h		;Sleep Timer value
    32  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    33  0000                    SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
    34  0001                    SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
    35  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
    36  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    37  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    38  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    39  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    40  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    41  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    42  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    43                          
    44  0008                    POWER_SETTING:			equ	8h
    45  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    46  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    47  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    48  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    49  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    50  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    51  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    52  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    53  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    54  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    55                          
    56  0001                    COMM_RX_PRESENT:		equ	1		;1 = TRUE
    57  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    58                          
    59  0003                    CLOCK_DIV_VC1:			equ	3h	;VC1 clock divider
    60  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    61  0030                    CLOCK_DIV_VC1_JUST:		equ	30h	;VC1 clock divider justified
    62  0000                    CLOCK_DIV_VC2:			equ	0h	;VC2 clock divider
    63  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    64  0000                    CLOCK_DIV_VC2_JUST:		equ	0h	;VC2 clock divider justified
    65  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    66  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    67  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    68  0001                    CLOCK_DIV_VC3:			equ	1h	;VC3 clock divider
    69  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    70  0001                    CLOCK_DIV_VC3_JUST:		equ	1h	;VC3 clock divider justified
    71  0000                    ANALOG_BUFFER_PWR:		equ	0h	;Analog buffer power level
    72  0001                    ANALOG_BUFFER_PWR_MASK:	equ	1h	;Analog buffer power level mask
    73  0000                    ANALOG_BUFFER_PWR_JUST:	equ	0h	;Analog buffer power level justified
    74  0005                    ANALOG_POWER:			equ	5h	;Analog power control
    75  0007                    ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
    76  0005                    ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
    77  0000                    OP_AMP_BIAS:			equ	0h	;Op amp bias level
    78  0040                    OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
    79  0000                    OP_AMP_BIAS_JUST:		equ	0h	;Op amp bias level justified
    80  0000                    REF_MUX:				equ	0h	;Ref mux setting
    81  0038                    REF_MUX_MASK:			equ	38h	;Ref mux setting mask
    82  0000                    REF_MUX_JUST:			equ	0h	;Ref mux setting justified
    83  0000                    AGND_BYPASS:				equ	0h	;AGndBypass setting
    84  0040                    AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
    85  0000                    AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
    86  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    87  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    88  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    89  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    90  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    91  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    92                          ;
    93                          ; register initial values
    94                          ;
    95  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    96  0005                    PORT_0_GLOBAL_SELECT:	equ 5h	;Port 0 global select register (PRT0GS)
    97  002E                    PORT_0_DRIVE_0:			equ 2eh	;Port 0 drive mode 0 register (PRT0DM0)
    98  00FB                    PORT_0_DRIVE_1:			equ fbh	;Port 0 drive mode 1 register (PRT0DM1)
    99  00D0                    PORT_0_DRIVE_2:			equ d0h	;Port 0 drive mode 2 register (PRT0DM2)
   100  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
   101  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
   102  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
   103  0044                    PORT_1_GLOBAL_SELECT:	equ 44h	;Port 1 global select register (PRT1GS)
   104  0040                    PORT_1_DRIVE_0:			equ 40h	;Port 1 drive mode 0 register (PRT1DM0)
   105  00BF                    PORT_1_DRIVE_1:			equ bfh	;Port 1 drive mode 1 register (PRT1DM1)
   106  00BB                    PORT_1_DRIVE_2:			equ bbh	;Port 1 drive mode 2 register (PRT1DM2)
   107  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
   108  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   109  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   110  0028                    PORT_2_GLOBAL_SELECT:	equ 28h	;Port 2 global select register (PRT2GS)
   111  0062                    PORT_2_DRIVE_0:			equ 62h	;Port 2 drive mode 0 register (PRT2DM0)
   112  009F                    PORT_2_DRIVE_1:			equ 9fh	;Port 2 drive mode 1 register (PRT2DM1)
   113  00F7                    PORT_2_DRIVE_2:			equ f7h	;Port 2 drive mode 2 register (PRT2DM2)
   114  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   115  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   116  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   117  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   118  0080                    PORT_3_DRIVE_0:			equ 80h	;Port 3 drive mode 0 register (PRT3DM0)
   119  007F                    PORT_3_DRIVE_1:			equ 7fh	;Port 3 drive mode 1 register (PRT3DM1)
   120  007F                    PORT_3_DRIVE_2:			equ 7fh	;Port 3 drive mode 2 register (PRT3DM2)
   121  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   122  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   123  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
   124  0000                    PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
   125  0085                    PORT_4_DRIVE_0:			equ 85h	;Port 4 drive mode 0 register (PRT4DM0)
   126  007B                    PORT_4_DRIVE_1:			equ 7bh	;Port 4 drive mode 1 register (PRT4DM1)
   127  00FF                    PORT_4_DRIVE_2:			equ ffh	;Port 4 drive mode 2 register (PRT4DM2)
   128  0000                    PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
   129  0000                    PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
   130  0000                    PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
   131  0000                    PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
   132  0000                    PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
   133  0000                    PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
   134  0000                    PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
   135  0000                    PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
   136  0000                    PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
   137  0000                    PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
   138  0000                    PORT_6_GLOBAL_SELECT:	equ 0h	;Port 6 global select register (PRT6GS)
   139  0000                    PORT_6_DRIVE_0:			equ 0h	;Port 6 drive mode 0 register (PRT6DM0)
   140  0000                    PORT_6_DRIVE_1:			equ 0h	;Port 6 drive mode 1 register (PRT6DM1)
   141  0000                    PORT_6_DRIVE_2:			equ 0h	;Port 6 drive mode 2 register (PRT6DM2)
   142  0000                    PORT_6_INTENABLE:		equ 0h	;Port 6 interrupt enable register (PRT6IE)
   143  0000                    PORT_6_INTCTRL_0:		equ 0h	;Port 6 interrupt control 0 register (PRT6IC0)
   144  0000                    PORT_6_INTCTRL_1:		equ 0h	;Port 6 interrupt control 1 register (PRT6IC1)
   145  0000                    PORT_7_GLOBAL_SELECT:	equ 0h	;Port 7 global select register (PRT7GS)
   146  0000                    PORT_7_DRIVE_0:			equ 0h	;Port 7 drive mode 0 register (PRT7DM0)
   147  0000                    PORT_7_DRIVE_1:			equ 0h	;Port 7 drive mode 1 register (PRT7DM1)
   148  0000                    PORT_7_DRIVE_2:			equ 0h	;Port 7 drive mode 2 register (PRT7DM2)
   149  0000                    PORT_7_INTENABLE:		equ 0h	;Port 7 interrupt enable register (PRT7IE)
   150  0000                    PORT_7_INTCTRL_0:		equ 0h	;Port 7 interrupt control 0 register (PRT7IC0)
   151  0000                    PORT_7_INTCTRL_1:		equ 0h	;Port 7 interrupt control 1 register (PRT7IC1)
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83+ 0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7A27                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7A27                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7A27                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7A27                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7A27                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7A27                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7A27                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7A27                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7A27                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7A27                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7A27                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7A27                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7A27                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7A27                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7A27                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7A27                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7A27                        endm
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- M8C29xxx Microcontroller Family SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2003-2004, Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 27x6x Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: June 8, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHz:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                              ; legacy names:
    67  00F8                        VOLTAGE_TRIM_2V:                equ      0F8h   ; Table 2 2.7V bandgap voltage trim value
    68  00F9                        OSCILLATOR_TRIM_SLOW_2V_12MHZ:  equ      0F9h   ; Table 2 2.7V SLOW IMO Trim 12MHz, 2.7V
    69  00FC                        OSCILLATOR_TRIM_SLOW_3V_6MHZ:   equ      0FCh   ; Table 2 2.7V SLOW IMO Trim  6MHz, 3.3V
    70  00FD                        OSCILLATOR_TRIM_SLOW_2V_6MHZ:   equ      0FDh   ; Table 2 2.7V SLOW IMO Trim  6MHz, 2.7V
    71                          
    72                          
    73                          ;-----------------------------------------------------------------------------
    74                          ;  MACRO SSC_Action( OpCode )
    75                          ;
    76                          ;  DESCRIPTION:
    77                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    78                          ;     section of Technical Reference Manual and/or Datasheet.
    79                          ;-----------------------------------------------------------------------------
    80                          ;
    81                          ;  ARGUMENTS:
    82                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    83                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    84                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    85                          ;  RETURNS:
    86                          ;     Nothing
    87                          ;
    88                          ;  SIDE EFFECTS:
    89                          ;     The values of the A and X registers are modified
    90                          ;
    91                          ;  PROCEDURE:
    92                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    93                          ;     2) insert the flash Supervisory key in [KEY1]
    94                          ;     3) store function code in A
    95                          ;     4) call the supervisory code
    96                          ;
    97                              macro SSC_Action( OpCode )
    98                          ;   !!! DO NOT CHANGE THIS CODE !!!
    99                          ;       This sequence of opcodes provides a
   100                          ;       signature for the debugger and ICE.
   101                              mov   X, SP                            ; copy SP into X
   102                              mov   A, X                             ; mov to A
   103                              add   A, 3                             ; create 3 byte stack frame
   104                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   105                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   106                              mov   A, @OpCode                       ; load A with specific Flash operation
   107                              SSC                                    ; SSC call the supervisory code
   108                          ;   !!! DO NOT CHANGE THIS CODE !!!
   109  7A27                        endm
   110                          
   111                          
   112                          ;-----------------------------------------------------------------------------
   113                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
   114                          ;
   115                          ;  DESCRIPTION:
   116                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   117                          ;     registers with values from from the specified flash System Parameter
   118                          ;     table entries. Note that both trim values must come from the same table.
   119                          ;     Also, see M8SSC_Set2TableTrims below.
   120                          ;-----------------------------------------------------------------------------
   121                          ;
   122                          ;  ARGUMENTS:
   123                          ;     BYTE Table     - 0..3 for the desired system parameter table
   124                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   125                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   126                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   127                          ;
   128                          ;  RETURNS:
   129                          ;     Nothing
   130                          ;
   131                          ;  SIDE EFFECTS:
   132                          ;     The values of the A and X registers are modified
   133                          ;
   134                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
   135                              mov A, reg[0xD0]  ; CUR_PP
   136                          	push A
   137                          	mov reg[0xD0], 0
   138                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   139                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   140                              M8C_SetBank1
   141                              mov   A, [@IMO_Trim]
   142                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   143                              mov   A, [@Volt_Trim]
   144                            IF ( @Bypass )
   145                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
   146                            ENDIF
   147                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   148                              M8C_SetBank0
   149                          	pop A
   150                          	mov reg[0xD0], A
   151  7A27                        endm
   152                          
   153                          
   154                          ;-----------------------------------------------------------------------------
   155                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   159                          ;     registers with values from from the specified flash System Parameter
   160                          ;     table entries. Each trim value comes from a different table.
   161                          ;     Also, see M8SSC_SetTableTrims above.
   162                          ;-----------------------------------------------------------------------------
   163                          ;
   164                          ;  ARGUMENTS:
   165                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   166                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   167                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   168                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   169                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   170                          ;
   171                          ;  RETURNS:
   172                          ;     Nothing
   173                          ;
   174                          ;  SIDE EFFECTS:
   175                          ;     The values of the A and X registers are modified
   176                          ;
   177                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
   178                              mov A, reg[0xD0]  ; CUR_PP
   179                          	push A
   180                          	mov reg[0xD0], 0
   181                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   182                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   183                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   184                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   185                              mov   reg[IMO_TR], A
   186                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   187                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   188                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   189                            IF ( @Bypass )
   190                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
   191                            ENDIF
   192                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   193                              M8C_SetBank0
   194                          	pop A
   195                          	mov reg[0xD0], A
   196  7A27                        endm
   197                          
   198                          
   199                          ;-----------------------------------------------------------------------------
   200                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
   201                          ;
   202                          ;  DESCRIPTION:
   203                          ;     Loads Bandgap Voltage Trim register with values from from the
   204                          ;     specified flash System Parameter table entry.
   205                          ;-----------------------------------------------------------------------------
   206                          ;
   207                          ;  ARGUMENTS:
   208                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   209                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   210                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   211                          ;
   212                          ;  RETURNS:
   213                          ;     Nothing
   214                          ;
   215                          ;  SIDE EFFECTS:
   216                          ;     The values of the A and X registers are modified
   217                          ;
   218                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
   219                              mov A, reg[0xD0]  ; CUR_PP
   220                          	push A
   221                          	mov reg[0xD0], 0
   222                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   223                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   224                              M8C_SetBank1
   225                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   226                            IF ( @Bypass )
   227                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting, if any
   228                            ENDIF
   229                              mov   reg[BDG_TR], A                   ; Update the register value
   230                              M8C_SetBank0
   231                          	pop A
   232                          	mov reg[0xD0], A
   233  7A27                        endm
   234                          
   235                          
   236                          ;-----------------------------------------------------------------------------
   237                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                          ;
   239                          ;  DESCRIPTION:
   240                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   241                          ;     from the specified flash System Parameter table entry.
   242                          ;-----------------------------------------------------------------------------
   243                          ;
   244                          ;  ARGUMENTS:
   245                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   246                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   247                          ;
   248                          ;  RETURNS:
   249                          ;     Nothing
   250                          ;
   251                          ;  SIDE EFFECTS:
   252                          ;     The values of the A and X registers are modified
   253                          ;
   254                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   255                              mov A, reg[0xD0]  ; CUR_PP
   256                          	push A
   257                          	mov reg[0xD0], 0
   258                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   259                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   260                              M8C_SetBank1
   261                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   262                              mov   reg[IMO_TR], A               ; Update the register value
   263                              M8C_SetBank0
   264                          	pop A
   265                          	mov reg[0xD0], A
   266  7A27                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7A27                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7A27                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7A27                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7A27                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7A27                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7A27                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7A27                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7A27                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7A27                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7A27                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7A27                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7A27                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7A27                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7A27                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7A27                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7A27                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7A27                       endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;@Id: boot.tpl#851 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  VERSION:    4.18
     7                          ;  DATE:       28 June 2007
     8                          ;
     9                          ;  DESCRIPTION:
    10                          ;  M8C Boot Code for CY8C29xxx microcontroller family.
    11                          ;
    12                          ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    16                          ; the project's root directory to create BOOT.ASM. Any changes made to
    17                          ; BOOT.ASM will be  overwritten every time the project is generated; therfore
    18                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    19                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    20                          ; are not accidentally modified.
    21                          ;
    22                          ;=============================================================================
    23                          
    24                          include ".\lib\GlobalParams.inc"
    25                          include "m8c.inc"
    26                          include "m8ssc.inc"
    27                          include "memory.inc"
    28                          
    29                          ;--------------------------------------
    30                          ; Export Declarations
    31                          ;--------------------------------------
    32                          
    33                          export __Start
    34                          IF	(TOOLCHAIN & HITECH)
    35                          ELSE
    36                          export __bss_start
    37                          export __data_start
    38                          export __idata_start
    39                          export __func_lit_start
    40                          export __text_start
    41                          ENDIF
    42                          export  _bGetPowerSetting
    43                          export   bGetPowerSetting
    44                          
    45                          
    46                          ;--------------------------------------
    47                          ; Optimization flags
    48                          ;--------------------------------------
    49                          ;
    50                          ; To change the value of these flags, modify the file boot.tpl, not
    51                          ; boot.asm. See the notes in the banner comment at the beginning of
    52                          ; this file.
    53                          
    54                          ; Optimization for Assembly language (only) projects and C-language projects
    55                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    56                          ;   Set to 1: Support for C Run-time Environment initialization
    57                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    58                          ;
    59                          IF	(TOOLCHAIN & HITECH)
    60                          ; The C compiler will customize the startup code - it's not required here
    61                          
    62  0000                    C_LANGUAGE_SUPPORT:              equ 0
    63                          ELSE
    64                          C_LANGUAGE_SUPPORT:              equ 1
    65                          ENDIF
    66                          
    67                          
    68                          ; The following equate is required for proper operation. Reseting its value
    69                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    70                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    71                          ; and PLL_Lock must take place within user code. See the family data sheet for
    72                          ; the requirements of starting the ECO and PLL lock mode.
    73                          ;
    74                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    75                          ;                invoking main
    76                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    77                          ;               the time code in main starts executing.
    78                          ;
    79  0001                    WAIT_FOR_32K:                    equ 1
    80                          
    81                          
    82                          ; For historical reasons, by default the boot code uses an lcall instruction
    83                          ; to invoke the user's _main code. If _main executes a return instruction,
    84                          ; boot provides an infinite loop. By changing the following equate from zero
    85                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    86                          ; bytes on the stack which are otherwise required for the return address. If
    87                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    88                          ; release, the C compiler automatically places an infinite loop at the end
    89                          ; of main, rather than a return instruction.)
    90                          ;
    91  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    92                          
    93                          
    94                          ;-----------------------------------------------------------------------------
    95                          ; Interrupt Vector Table
    96                          ;-----------------------------------------------------------------------------
    97                          ;
    98                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    99                          ; a jump instruction to an ISR (Interrupt Service Routine), although
   100                          ; very short ISRs could be encoded within the table itself. Normally,
   101                          ; vector jump targets are modified automatically according to the user
   102                          ; modules selected. This occurs when the 'Generate Application' opera-
   103                          ; tion is run causing PSoC Designer to create boot.asm and the other
   104                          ; configuration files. If you need to hard code a vector, update the
   105                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   106                          ; of this file.
   107                          ;-----------------------------------------------------------------------------
   108                          
   109                              AREA TOP (ROM, ABS, CON)
   110                          
   111  0000                        org   0                        ;Reset Interrupt Vector
   112                          IF	(TOOLCHAIN & HITECH)
   113                          ;   jmp   __Start                  ;C compiler fills in this vector
   114                          ELSE
   115                              jmp   __Start                  ;First instruction executed following a Reset
   116                          ENDIF
   117                          
   118  0004                        org   04h                      ;Supply Monitor Interrupt Vector
   119  0004  30                    halt                           ;Stop execution if power falls too low
   120                          
   121  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   122                              // call	void_handler
   123  0008  7E                    reti
   124                          
   125  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   126                              // call	void_handler
   127  000C  7E                    reti
   128                          
   129  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   130                              // call	void_handler
   131  0010  7E                    reti
   132                          
   133  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   134                              // call	void_handler
   135  0014  7E                    reti
   136                          
   137  0018                        org   18h                      ;VC3 Interrupt Vector
   138                              // call	void_handler
   139  0018  7E                    reti
   140                          
   141  001C                        org   1Ch                      ;GPIO Interrupt Vector
   142                              // call	void_handler
   143  001C  7E                    reti
   144                          
   145  0020                        org   20h                      ;PSoC Block DBB00 Interrupt Vector
   146                              // call	void_handler
   147  0020  7E                    reti
   148                          
   149  0024                        org   24h                      ;PSoC Block DBB01 Interrupt Vector
   150                              // call	void_handler
   151  0024  7E                    reti
   152                          
   153  0028                        org   28h                      ;PSoC Block DCB02 Interrupt Vector
   154                              // call	void_handler
   155  0028  7E                    reti
   156                          
   157  002C                        org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
   158                              // call	void_handler
   159  002C  7E                    reti
   160                          
   161  0030                        org   30h                      ;PSoC Block DBB10 Interrupt Vector
   162  0030  7D 3738               ljmp	_Counter8_ltrx_ISR
   163  0033  7E                    reti
   164                          
   165  0034                        org   34h                      ;PSoC Block DBB11 Interrupt Vector
   166                              // call	void_handler
   167  0034  7E                    reti
   168                          
   169  0038                        org   38h                      ;PSoC Block DCB12 Interrupt Vector
   170  0038  7D 3964               ljmp	_LTRX_TX_ISR
   171  003B  7E                    reti
   172                          
   173  003C                        org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
   174  003C  7D 3965               ljmp	_LTRX_RX_ISR
   175  003F  7E                    reti
   176                          
   177  0040                        org   40h                      ;PSoC Block DBB20 Interrupt Vector
   178                              // call	void_handler
   179  0040  7E                    reti
   180                          
   181  0044                        org   44h                      ;PSoC Block DBB21 Interrupt Vector
   182                              // call	void_handler
   183  0044  7E                    reti
   184                          
   185  0048                        org   48h                      ;PSoC Block DCB22 Interrupt Vector
   186                              // call	void_handler
   187  0048  7E                    reti
   188                          
   189  004C                        org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
   190  004C  7D 7B88               ljmp	_Ticker_ISR
   191  004F  7E                    reti
   192                          
   193  0050                        org   50h                      ;PSoC Block DBB30 Interrupt Vector
   194                              // call	void_handler
   195  0050  7E                    reti
   196                          
   197  0054                        org   54h                      ;PSoC Block DBB31 Interrupt Vector
   198                              // call	void_handler
   199  0054  7E                    reti
   200                          
   201  0058                        org   58h                      ;PSoC Block DCB32 Interrupt Vector
   202  0058  7D 3CDE               ljmp	_OneWire_ISR
   203  005B  7E                    reti
   204                          
   205  005C                        org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
   206                              // call	void_handler
   207  005C  7E                    reti
   208                          
   209  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   210                              // call	void_handler
   211  0060  7E                    reti
   212                          
   213  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   214                              // call	void_handler
   215  0064  7E                    reti
   216                          
   217                          ;-----------------------------------------------------------------------------
   218                          ;  Start of Execution.
   219                          ;-----------------------------------------------------------------------------
   220                          ;  The Supervisory ROM SWBootReset function has already completed the
   221                          ;  calibrate1 process, loading trim values for 5 volt operation.
   222                          ;
   223                          
   224                          IF	(TOOLCHAIN & HITECH)
   225                           	AREA PD_startup(CODE, REL, CON)
   226                          ELSE
   227                              org 68h
   228                          ENDIF
   229  7F55                    __Start:
   230                          
   231                              ; initialize SMP values for voltage stabilization, if required,
   232                              ; leaving power-on reset (POR) level at the default (low) level, at
   233                              ; least for now. 
   234                              ;
   235  7F55  71 10                 M8C_SetBank1
   236  7F57  62 FA 00              mov reg[0FAh], 0				;Reset flash location
   237  7F5A  62 E3 80              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   238  7F5D  70 EF                 M8C_SetBank0
   239                          
   240                              ; %53%20%46%46% Apply Erratum 001-05137 workaround
   241  7F5F  50 20                 mov   A, 20h
   242  7F61  28                    romx
   243  7F62  50 40                 mov   A, 40h
   244  7F64  28                    romx
   245  7F65  50 60                 mov   A, 60h
   246  7F67  28                    romx
   247                              ; %45%20%46%46% End workaround
   248                          
   249                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   250                              M8C_EnableWatchDog
   251                          ENDIF
   252                          
   253                          IF ( SELECT_32K )
   254                              or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
   255                          ELSE
   256  7F68  41 FE FB              and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
   257                          ENDIF
   258                          
   259                              ;---------------------------
   260                              ; Set up the Temporary stack
   261                              ;---------------------------
   262                              ; A temporary stack is set up for the SSC instructions.
   263                              ; The real stack start will be assigned later.
   264                              ;
   265  0080                    _stack_start:          equ 80h
   266  7F6B  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   267  7F6D  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   268                          
   269                              ;-----------------------------------------------
   270                              ; Set Power-related Trim & the AGND Bypass bit.
   271                              ;-----------------------------------------------
   272                          
   273                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   274                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
   277                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   278                            IF ( AGND_BYPASS )
   279                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   280                              ; The 5V trim has already been set, but we need to update the AGNDBYP
   281                              ; bit in the write-only BDG_TR register. Recalculate the register
   282                              ; value using the proper trim values.
   283                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   284                              M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
   285                            ENDIF
   286                           ENDIF
   287                          ENDIF ; 5.0 V Operation
   288                          
   289                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   290                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   291                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   292                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
   293                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   294  7F6E  5D D0                 M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
   295                           ENDIF
   296                          ENDIF ; 3.3 Volt Operation
   297                          
   298  7F92  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   299  7F95  55 F9 00              mov  [bSSC_KEYSP], 0
   300                          
   301                              ;---------------------------------------
   302                              ; Initialize Crystal Oscillator and PLL
   303                              ;---------------------------------------
   304                          
   305                          IF ( SELECT_32K & WAIT_FOR_32K )
   306                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   307                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   308                              ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
   309                              ; the ECO to stabilize.
   310                              ;
   311                              M8C_SetBank1
   312                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   313                              M8C_SetBank0
   314                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   315                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   316                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   317                          .WaitFor1s:
   318                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   319                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   320                                                                    ;   since interrupts are not globally enabled
   321                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   322                              ; Either no ECO, or waiting for stable clock is to be done in main
   323  7F98  71 10                 M8C_SetBank1
   324  7F9A  62 E0 02              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   325  7F9D  70 EF                 M8C_SetBank0
   326  7F9F  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   327                          
   328                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   329                          
   330                          IF ( PLL_MODE )
   331                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   332                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   333                              ;
   334                              M8C_SetBank1
   335                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   336                              M8C_SetBank0
   337                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   338                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   339                          
   340                          .WaitFor16ms:
   341                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   342                              jz   .WaitFor16ms
   343                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   344                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   345                              M8C_SetBank0
   346                          
   347                          IF      ( WAIT_FOR_32K )
   348                          ELSE ; !( WAIT_FOR_32K )
   349                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   350                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   351                          ENDIF ;(WAIT_FOR_32K)
   352                          ENDIF ;(PLL_MODE)
   353                          
   354                              ;------------------------
   355                              ; Close CT leakage path.
   356                              ;------------------------
   357  7FA2  62 71 05              mov   reg[ACB00CR0], 05h
   358  7FA5  62 75 05              mov   reg[ACB01CR0], 05h
   359  7FA8  62 79 05              mov   reg[ACB02CR0], 05h
   360  7FAB  62 7D 05              mov   reg[ACB03CR0], 05h
   361                          
   362                          
   363                          IF	(TOOLCHAIN & HITECH)
   364                              ;---------------------------------------------
   365                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   366                              ;---------------------------------------------
   367                          	global		__Lstackps
   368  7FAE  50 00             	mov     a,low __Lstackps
   369  7FB0  4E                	swap    a,sp
   370                          
   371                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   372  7FB1  62 D1 07              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   373  7FB4  62 D3 07              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374  7FB7  62 D0 00              RAM_SETPAGE_CUR 0
   375  7FBA  62 D5 00              RAM_SETPAGE_MVW 0
   376  7FBD  62 D4 00              RAM_SETPAGE_MVR 0
   377                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   378                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   379                              ELSE
   380  7FC0  71 80                 or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   381                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   382                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   383                          ELSE
   384                              ;---------------------------------------------
   385                              ; ImageCraft Enter the Large Memory Model, if applicable
   386                              ;---------------------------------------------
   387                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   388                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   389                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   390                              swap  A, SP
   391                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   392                              RAM_SETPAGE_CUR 0
   393                              RAM_SETPAGE_MVW 0
   394                              RAM_SETPAGE_MVR 0
   395                          
   396                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   397                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   398                            ELSE
   399                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   400                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   401                          ELSE
   402                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   403                              swap  SP, A
   404                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   405                          ENDIF ;	TOOLCHAIN
   406                          
   407                              ;-------------------------
   408                              ; Load Base Configuration
   409                              ;-------------------------
   410                              ; Load global parameter settings and load the user modules in the
   411                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   412                              ; to minimize start up time; (2) We may still need to play with the
   413                              ; Sleep Timer.
   414                              ;
   415  7FC2  7C 03B1               lcall LoadConfigInit
   416                          
   417                              ;-----------------------------------
   418                              ; Initialize C Run-Time Environment
   419                              ;-----------------------------------
   420                          IF ( C_LANGUAGE_SUPPORT )
   421                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   422                              mov  A,0                           ; clear the 'bss' segment to zero
   423                              mov  [__r0],<__bss_start
   424                          BssLoop:
   425                              cmp  [__r0],<__bss_end
   426                              jz   BssDone
   427                              mvi  [__r0],A
   428                              jmp  BssLoop
   429                          BssDone:
   430                              mov  A,>__idata_start              ; copy idata to data segment
   431                              mov  X,<__idata_start
   432                              mov  [__r0],<__data_start
   433                          IDataLoop:
   434                              cmp  [__r0],<__data_end
   435                              jz   C_RTE_Done
   436                              push A
   437                              romx
   438                              mvi  [__r0],A
   439                              pop  A
   440                              inc  X
   441                              adc  A,0
   442                              jmp  IDataLoop
   443                          
   444                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   445                          
   446                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   447                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   448                                                                 ; to use the Virtual Register page.
   449                          
   450                              ; Dereference the constant (flash) pointer pXIData to access the start
   451                              ; of the extended idata area, "xidata." Xidata follows the end of the
   452                              ; text segment and may have been relocated by the Code Compressor.
   453                              ;
   454                              mov   A, >__pXIData                ; Get the address of the flash
   455                              mov   X, <__pXIData                ;   pointer to the xidata area.
   456                              push  A
   457                              romx                               ; get the MSB of xidata's address
   458                              mov   [__r0], A
   459                              pop   A
   460                              inc   X
   461                              adc   A, 0
   462                              romx                               ; get the LSB of xidata's address
   463                              swap  A, X
   464                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   465                                                                 ;   XIData structure list in flash
   466                              jmp   .AccessStruct
   467                          
   468                              ; Unpack one element in the xidata "structure list" that specifies the
   469                              ; values of C variables. Each structure contains 3 member elements.
   470                              ; The first is a pointer to a contiguous block of RAM to be initial-
   471                              ; ized. Blocks are always 255 bytes or less in length and never cross
   472                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   473                              ; contains 0xFF. There are two formats for the struct depending on the
   474                              ; value in the second member element, an unsigned byte:
   475                              ; (1) If the value of the second element is non-zero, it represents
   476                              ; the 'size' of the block of RAM to be initialized. In this case, the
   477                              ; third member of the struct is an array of bytes of length 'size' and
   478                              ; the bytes are copied to the block of RAM.
   479                              ; (2) If the value of the second element is zero, the block of RAM is
   480                              ; to be cleared to zero. In this case, the third member of the struct
   481                              ; is an unsigned byte containing the number of bytes to clear.
   482                          
   483                          .AccessNextStructLoop:
   484                              inc   X                            ; pXIData++
   485                              adc   A, 0
   486                          .AccessStruct:                         ; Entry point for first block
   487                              ;
   488                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   489                              ;
   490                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   491                              push  A
   492                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   494                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   495                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   496                              pop   A                            ; restore pXIData to [A,X]
   497                              inc   X                            ; pXIData++
   498                              adc   A, 0
   499                              push  A
   500                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   501                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   502                              pop   A                            ; restore pXIData to [A,X]
   503                              inc   X                            ; pXIData++ (point to size)
   504                              adc   A, 0
   505                              push  A
   506                              romx                               ; Get the size (CPU.A <- *pXIData)
   507                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   508                              mov   [__r1], A                    ;             else downcount in __r1
   509                              pop   A                            ; restore pXIData to [A,X]
   510                          
   511                          .CopyNextByteLoop:
   512                              ; For each byte in the structure's array member, copy from flash to RAM.
   513                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   514                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   515                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   516                              ;
   517                              inc   X                            ; pXIData++ (point to next data byte)
   518                              adc   A, 0
   519                              push  A
   520                              romx                               ; Get the data value (CPU.A <- *pXIData)
   521                              mvi   [__r0], A                    ; Transfer the data to RAM
   522                              tst   [__r0], 0xff                 ; Check for page crossing
   523                              jnz   .CopyLoopTail                ;   No crossing, keep going
   524                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   525                              inc   A
   526                              mov   reg[ MVW_PP], A
   527                          .CopyLoopTail:
   528                              pop   A                            ; restore pXIData to [A,X]
   529                              dec   [__r1]                       ; End of this array in flash?
   530                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   531                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   532                          
   533                          .ClearRAMBlockToZero:
   534                              pop   A                            ; restore pXIData to [A,X]
   535                              inc   X                            ; pXIData++ (point to next data byte)
   536                              adc   A, 0
   537                              push  A
   538                              romx                               ; Get the run length (CPU.A <- *pXIData)
   539                              mov   [__r1], A                    ; Initialize downcounter
   540                              mov   A, 0                         ; Initialize source data
   541                          
   542                          .ClearRAMBlockLoop:
   543                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   544                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   545                              ;
   546                              mvi   [__r0], A                    ; Clear a byte
   547                              tst   [__r0], 0xff                 ; Check for page crossing
   548                              jnz   .ClearLoopTail               ;   No crossing, keep going
   549                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   550                              inc   A
   551                              mov   reg[ MVW_PP], A
   552                              mov   A, 0                         ; Restore the zero used for clearing
   553                          .ClearLoopTail:
   554                              dec   [__r1]                       ; Was this the last byte?
   555                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   556                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   557                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   558                          
   559                          .C_RTE_WrapUp:
   560                              pop   A                            ; balance stack
   561                          
   562                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   563                          
   564                          C_RTE_Done:
   565                          
   566                          ENDIF ; C_LANGUAGE_SUPPORT
   567                          
   568                              ;-------------------------------
   569                              ; Voltage Stabilization for SMP
   570                              ;-------------------------------
   571                          
   572                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   573                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   574                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   575                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   576                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   577                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   578                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   579                              M8C_SetBank1
   580                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   581                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   582                              M8C_SetBank0
   583                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   584                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   585                          .WaitFor2ms:
   586                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   587                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   588                          ENDIF ; SMP is operational
   589                          ENDIF ; 5.0V Operation
   590                          
   591                              ;-------------------------------
   592                              ; Set Power-On Reset (POR) Level
   593                              ;-------------------------------
   594  7FC5  71 10                 M8C_SetBank1
   595                          
   596                          IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
   597                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
   598                           ELSE                                       ;    No, fast mode
   599                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
   600                                                                      ;       no, set midpoint POR in user code, if desired
   601                            ELSE ; 24HMz                              ;
   602                              or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
   603                            ENDIF ; 24MHz
   604                           ENDIF ; Slow Mode
   605                          ENDIF ; 5.0V Operation
   606                          
   607  7FC7  70 EF                 M8C_SetBank0
   608                          
   609                              ;----------------------------
   610                              ; Wrap up and invoke "main"
   611                              ;----------------------------
   612                          
   613                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   614                              ; no interrupts should be enabled now, so may as well clear the register.
   615                              ;
   616  7FC9  62 E0 00              mov  reg[INT_MSK0],0
   617                          
   618                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   619                              ; And put decimator in full mode so it does not consume too much current.
   620                              ;
   621  7FCC  71 10                 M8C_SetBank1
   622  7FCE  62 E0 03              mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   623  7FD1  43 E7 80              or   reg[DEC_CR2],80h                    ; Put decimator in full mode
   624  7FD4  70 EF                 M8C_SetBank0
   625                          
   626                              ; Global Interrupt are NOT enabled, this should be done in main().
   627                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   628                              ; Global Interrupts should be enabled as soon as possible in main().
   629                              ;
   630  7FD6  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   631                                                             ; have been set during the boot process.
   632                          IF	(TOOLCHAIN & HITECH)
   633  7FD9  7D 7BC9           	ljmp  startup                  ; Jump to C compiler startup code
   634                          ELSE
   635                          IF ENABLE_LJMP_TO_MAIN
   636                              ljmp  _main                    ; goto main (no return)
   637                          ELSE
   638                              lcall _main                    ; call main
   639                          .Exit:
   640                              jmp  .Exit                     ; Wait here after return till power-off or reset
   641                          ENDIF
   642                          ENDIF ; TOOLCHAIN
   643                          
   644                              ;---------------------------------
   645                              ; Library Access to Global Parms
   646                              ;---------------------------------
   647                              ;
   648  7FDC                     bGetPowerSetting:
   649  7FDC                    _bGetPowerSetting:
   650                              ; Returns value of POWER_SETTING in the A register.
   651                              ; No inputs. No Side Effects.
   652                              ;
   653  7FDC  50 08                 mov   A, POWER_SETTING
   654  7FDE  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:46 2009
              SELECT_32K_JUST 0000                       ACB00CR0 0071                       ACB01CR0 0075  
           _Counter8_ltrx_ISR 3738                       ACB02CR0 0079                       ACB03CR0 007D  
                   __Lstackps 0700             C_LANGUAGE_SUPPORT 0000                    _Ticker_ISR 7B88  
                POWER_SET_3V3 0008                  POWER_SETTING 0008                  POWER_SET_5V0 0010  
                     MAC0_CL0 00EE                       MAC0_CL1 00EF                       MAC1_CL0 00AE  
                     MAC1_CL1 00AF                          MAC_X 00EC                          MAC_Y 00ED  
             SLEEP_TIMER_JUST 0000                       CPU_SCR1 00FE               bGetPowerSetting 7FDC  
                     INT_MSK0 00E0                       OPER_KEY 003A                       PLL_MODE 0000  
                       BDG_TR 00EA                         MAC0_X 00EC                         MAC0_Y 00ED  
                       MAC1_X 00AC                         MAC1_Y 00AD                         HITECH 0002  
              FLAG_PGMODE_10b 0080                         IDX_PP 00D3                         CUR_PP 00D0  
                       IMO_TR 00E8                         INT_VC 00E2                 CPU_CLOCK_JUST 0003  
                       MVR_PP 00D4                         MVW_PP 00D5              _bGetPowerSetting 7FDC  
                 WAIT_FOR_32K 0001                         STK_PP 00D1                  LVD_TBEN_JUST 0000  
                       VLT_CR 00E3          SWITCH_MODE_PUMP_JUST 0080                   _stack_start 0080  
                 _LTRX_RX_ISR 3965                   _LTRX_TX_ISR 3964      SYSTEM_LARGE_MEMORY_MODEL 0001  
       SYSTEM_MULTIPAGE_STACK 0000             POWER_SET_SLOW_IMO 0001                  PLL_MODE_JUST 0000  
                      DEC_CR2 00E7      SSCTBL1_TRIM_IMO_3V_24MHZ 00F9                      TOOLCHAIN 0002  
                      MAC_CL0 00EE                        MAC_CL1 00EF                        OSC_CR0 00E0  
                      RES_WDT 00E3                WATCHDOG_ENABLE 0000                     bSSC_KEYSP 00F9  
         CPU_SCR1_ECO_ALLOWED 0004                 LoadConfigInit 03B1            SSCTBL1_TRIM_BGR_3V 00F8  
                      __Start 7F55               AGND_BYPASS_JUST 0000                      bSSC_KEY1 00F8  
                   TABLE_READ 0006                   _OneWire_ISR 3CDE              OSC_CR0_CPU_12MHz 0002  
                      startup 7BC9              SYSTEM_STACK_PAGE 0007                  FLAG_XIO_MASK 0010  
                   SELECT_32K 0000              TRIP_VOLTAGE_JUST 0000     SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           bSSC_TABLE_TableId 00FA  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Tue May 05 10:09:50 2009
     1                          
     2                          	; HI-TECH C COMPILER (Cypress PSOC) V9.61PL1
     3                          	; Copyright (C) 1984-2008 HI-TECH Software
     4                          
     5                          	; Auto-generated runtime startup code for final link stage.
     6                          
     7                          	;
     8                          	; Compiler options:
     9                          	;
    10                          	; --asmlist --errformat --chip=CY8C29566 --WARN=0 --OPT=asm,9 \
    11                          	; -Osensor_gateway -Moutput/sensor_gateway.mp --OUTDIR=./output \
    12                          	; ./obj/boot.obj ./obj/main.p1 ./obj/oo.p1 ./obj/orcon.p1 \
    13                          	; ./obj/shtxx.p1 lib/libpsoc.lib lib/libpsoc.lpp \
    14                          	; C:/PROGRA~1/Cypress/Common/CYPRES~2/tools/lib/CY8C29000/cms.lib
    15                          	;
    16                          
    17                          
    18                          	processor	CY8C29566
    19                          	macro	M8C_ClearWDT
    20                          	mov reg[0xE3],0x38
    21  3D41                    	endm
    22                          
    23                          	psect	PD_startup,class=CODE
    24                          	psect	init,class=CODE
    25                          	psect	end_init,class=CODE
    26                          	psect	powerup,class=CODE
    27                          	psect	vectors,ovrld,class=CODE
    28                          	psect	text,class=CODE
    29                          	psect	maintext,class=CODE
    30                          	psect	intrtext,class=CODE
    31                          	psect	fnauto,class=RAM,space=1
    32                          	psect	bss,class=RAM,space=1
    33                          	psect	InterruptRAM,class=RAM,space=1
    34                          	psect	cdata,class=ROM,space=0,reloc=256
    35                          	psect	psoc_config,class=ROM
    36                          	psect	UserModules,class=ROM
    37                          	psect	strings,class=ROM
    38                          	psect	SSCParmBlk,abs,ovrld,class=RAM,space=1
    39  00F8                    	org	0xF8
    40  00F8                    	blk	8
    41                          
    42                          	psect	stackps,class=RAM
    43                          	global	__Lstackps, __stack_start__
    44  0700                    __stack_start__:
    45                          	psect	bss0,class=RAM,space=1
    46                          	psect	nvram0,class=RAM,space=1
    47                          	psect	rbit0,bit,class=RAM,space=1
    48                          	psect	nvbit0,bit,class=RAM,space=1
    49                          	psect	ramdata0,class=RAM,space=1
    50                          	psect	romdata0,class=BANKROM,space=0
    51                          	psect	bss1,class=RAM,space=1
    52                          	psect	nvram1,class=RAM,space=1
    53                          	psect	rbit1,bit,class=RAM,space=1
    54                          	psect	nvbit1,bit,class=RAM,space=1
    55                          	psect	ramdata1,class=RAM,space=1
    56                          	psect	romdata1,class=BANKROM,space=0
    57                          	psect	bss2,class=RAM,space=1
    58                          	psect	nvram2,class=RAM,space=1
    59                          	psect	rbit2,bit,class=RAM,space=1
    60                          	psect	nvbit2,bit,class=RAM,space=1
    61                          	psect	ramdata2,class=RAM,space=1
    62                          	psect	romdata2,class=BANKROM,space=0
    63                          	psect	bss3,class=RAM,space=1
    64                          	psect	nvram3,class=RAM,space=1
    65                          	psect	rbit3,bit,class=RAM,space=1
    66                          	psect	nvbit3,bit,class=RAM,space=1
    67                          	psect	ramdata3,class=RAM,space=1
    68                          	psect	romdata3,class=BANKROM,space=0
    69                          	psect	bss4,class=RAM,space=1
    70                          	psect	nvram4,class=RAM,space=1
    71                          	psect	rbit4,bit,class=RAM,space=1
    72                          	psect	nvbit4,bit,class=RAM,space=1
    73                          	psect	ramdata4,class=RAM,space=1
    74                          	psect	romdata4,class=BANKROM,space=0
    75                          	psect	bss5,class=RAM,space=1
    76                          	psect	nvram5,class=RAM,space=1
    77                          	psect	rbit5,bit,class=RAM,space=1
    78                          	psect	nvbit5,bit,class=RAM,space=1
    79                          	psect	ramdata5,class=RAM,space=1
    80                          	psect	romdata5,class=BANKROM,space=0
    81                          	psect	bss6,class=RAM,space=1
    82                          	psect	nvram6,class=RAM,space=1
    83                          	psect	rbit6,bit,class=RAM,space=1
    84                          	psect	nvbit6,bit,class=RAM,space=1
    85                          	psect	ramdata6,class=RAM,space=1
    86                          	psect	romdata6,class=BANKROM,space=0
    87                          	psect	bss7,class=RAM,space=1
    88                          	psect	nvram7,class=RAM,space=1
    89                          	psect	rbit7,bit,class=RAM,space=1
    90                          	psect	nvbit7,bit,class=RAM,space=1
    91                          	psect	ramdata7,class=RAM,space=1
    92                          	psect	romdata7,class=BANKROM,space=0
    93                          
    94                          ;Declare areas defined in usermodules and other assembler code
    95                          	psect	InterruptRAM,class=RAM,space=1
    96                          	psect	LTRX_RAM,class=RAM,space=1
    97                          	psect	bss,class=RAM,space=1
    98                          
    99                          	global	start,startup,_main
   100                          	global	reset_vec,intlevel0,intlevel1,intlevel2
   101  00A6                    intlevel0:
   102  00A6                    intlevel1:
   103  00A6                    intlevel2:		; for C funcs called from assembler
   104                          
   105                          	fnconf	fnauto,??,?
   106                          	fnroot	_main
   107  006C                    TMP_DR0	equ	108
   108  006D                    TMP_DR1	equ	109
   109  006E                    TMP_DR2	equ	110
   110  006F                    TMP_DR3	equ	111
   111  00D0                    CUR_PP	equ	208
   112  00D1                    STK_PP	equ	209
   113  00D3                    IDX_PP	equ	211
   114  00D4                    MVR_PP	equ	212
   115  00D5                    MVW_PP	equ	213
   116  00F7                    CPU_F	equ	247
   117                          	psect	vectors
   118  0000                    reset_vec:
   119  0000                    start:
   120                          	global	__Start
   121  0000  7D 7F55           	ljmp	__Start
   122                          
   123                          	psect	init
   124  7BC9                    startup:
   125  7BC9  62 E3 38          	M8C_ClearWDT
   126  7BCC  71 80             	or	f, 0x80	;select multiple RAM page mode
   127  7BCE  70 BF             	and	f, 0xBF
   128                          
   129                          ;	Clear uninitialized variables in bank 0
   130                          	global	__Lbss0
   131  7BD0  62 D0 00          	mov	reg[CUR_PP],0
   132  7BD3  50 00             	mov	a,0
   133  7BD5  53 00             	mov	[__Lbss0+0],a
   134                          
   135                          ;	Copy initialized data into bank 1
   136                          	global	__Lromdata1,__Lramdata1
   137  7BD7  62 D1 01          	mov	reg[STK_PP],1
   138  7BDA  57 00             	mov	x,low __Lromdata1
   139  7BDC  50 00             	mov	a,low __Lramdata1
   140  7BDE  4E                	swap	a,sp
   141  7BDF                    dataloop1:
   142  7BDF  50 01             	mov	a,high __Lromdata1
   143  7BE1  28                	romx
   144  7BE2  08                	push	a
   145  7BE3  75                	inc	x
   146  7BE4  5B                		mov	a,x
   147  7BE5  39 00             cmp	a,low (__Lromdata1+256)
   148  7BE7  BFF7              	jnz	dataloop1
   149                          
   150                          ;	Clear uninitialized variables in bank 2
   151                          	global	__Lbss2
   152  7BE9  62 D1 02          	mov	reg[STK_PP],2
   153  7BEC  50 00             	mov	a,low __Lbss2
   154  7BEE  4E                	swap	a,sp
   155  7BEF  50 00             	mov	a,0
   156  7BF1  57 15             	mov	x,21
   157  7BF3                    bssloop2:
   158  7BF3  08                	push	a
   159  7BF4  79                	dec	x
   160  7BF5  BFFD              	jnz	bssloop2
   161  7BF7  62 D1 07          	mov	reg[STK_PP],7
   162  7BFA  50 00             	mov	a,low __Lstackps
   163  7BFC  4E                	swap	a,sp
   164                          
   165  7BFD  7D 7A27           	ljmp	_main
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Tue May 05 10:09:50 2009
    __Lramdata1 0100       __Lstackps 0700      __Lromdata1 0100            _main 7A27            start 0000        dataloop1 7BDF  
         CUR_PP 00D0           STK_PP 00D1        intlevel0 00A6        intlevel1 00A6        intlevel2 00A6        reset_vec 0000  
       bssloop2 7BF3          __Lbss0 0000          __Lbss2 0200          __Start 7F55          startup 7BC9  __stack_start__ 0700  
