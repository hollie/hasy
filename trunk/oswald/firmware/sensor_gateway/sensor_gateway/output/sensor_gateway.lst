FILE: .\boot.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.18
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0002: 30       HALT                     
0003: 30       HALT                     
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0005: 30       HALT                     
0006: 30       HALT                     
0007: 30       HALT                     
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
0009: 30       HALT                     
000A: 30       HALT                     
000B: 30       HALT                     
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
000D: 30       HALT                     
000E: 30       HALT                     
000F: 30       HALT                     
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0011: 30       HALT                     
0012: 30       HALT                     
0013: 30       HALT                     
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0015: 30       HALT                     
0016: 30       HALT                     
0017: 30       HALT                     
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
0019: 30       HALT                     
001A: 30       HALT                     
001B: 30       HALT                     
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
001D: 30       HALT                     
001E: 30       HALT                     
001F: 30       HALT                     
0020: 7D 08 20 LJMP  0x0820             (0145)     ljmp	_Speed_PWM_ISR
0023: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0153)     // call	void_handler
0025: 30       HALT                     
0026: 30       HALT                     
0027: 30       HALT                     
0028: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0157)     // call	void_handler
0029: 30       HALT                     
002A: 30       HALT                     
002B: 30       HALT                     
002C: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
002D: 30       HALT                     
002E: 30       HALT                     
002F: 30       HALT                     
0030: 7D 0E 17 LJMP  0x0E17             (0161)     ljmp	_Counter8_ltrx_ISR
0033: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0035: 30       HALT                     
0036: 30       HALT                     
0037: 30       HALT                     
0038: 7D 0B 79 LJMP  0x0B79             (0169)     ljmp	_LTRX_TX_ISR
003B: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 0B 7A LJMP  0x0B7A             (0173)     ljmp	_LTRX_RX_ISR
003F: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0041: 30       HALT                     
0042: 30       HALT                     
0043: 30       HALT                     
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0045: 30       HALT                     
0046: 30       HALT                     
0047: 30       HALT                     
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
0049: 30       HALT                     
004A: 30       HALT                     
004B: 30       HALT                     
004C: 7D 0E 62 LJMP  __text_start|_Ticker_ISR|_Ticker_ISR(0189)     ljmp	_Ticker_ISR
004F: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0051: 30       HALT                     
0052: 30       HALT                     
0053: 30       HALT                     
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
0055: 30       HALT                     
0056: 30       HALT                     
0057: 30       HALT                     
0058: 7D 08 67 LJMP  0x0867             (0201)     ljmp	_OneWire_ISR
005B: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
005D: 30       HALT                     
005E: 30       HALT                     
005F: 30       HALT                     
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0061: 30       HALT                     
0062: 30       HALT                     
0063: 30       HALT                     
0064: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
0065: 30       HALT                     
0066: 30       HALT                     
0067: 30       HALT                     
0068: 71 10    OR    F,0x10             (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 80 MOV   REG[0xE3],0x80     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0249)     M8C_EnableWatchDog
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) IF ( SELECT_32K )
                                        (0253)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0254) ELSE
007B: 41 FE FB AND   REG[0xFE],0xFB     (0255)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0256) ENDIF
                                        (0257) 
                                        (0258)     ;---------------------------
                                        (0259)     ; Set up the Temporary stack
                                        (0260)     ;---------------------------
                                        (0261)     ; A temporary stack is set up for the SSC instructions.
                                        (0262)     ; The real stack start will be assigned later.
                                        (0263)     ;
                                        (0264) _stack_start:          equ 80h
007E: 50 80    MOV   A,0x80             (0265)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0080: 4E       SWAP  SP,A               (0266)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0267) 
                                        (0268)     ;-----------------------------------------------
                                        (0269)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0270)     ;-----------------------------------------------
                                        (0271) 
                                        (0272) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0273)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0274)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0275)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0276)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0277)   IF ( AGND_BYPASS )
                                        (0278)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0279)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0280)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0281)     ; value using the proper trim values.
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0284)   ENDIF
                                        (0285)  ENDIF
                                        (0286) ENDIF ; 5.0 V Operation
                                        (0287) 
                                        (0288) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0289)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0290)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0291)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0292)  ELSE                                          ; *** 12MHZ Main Oscillator ***
0081: 5D D0    MOV   A,REG[0xD0]        
0083: 08       PUSH  A                  
0084: 62 D0 00 MOV   REG[0xD0],0x0      
0087: 55 FA 01 MOV   [crc+165],0x1      
008A: 4F       MOV   X,SP               
008B: 5B       MOV   A,X                
008C: 01 03    ADD   A,0x3              
008E: 53 F9    MOV   [crc+164],A        
0090: 55 F8 3A MOV   [crc+163],0x3A     
0093: 50 06    MOV   A,0x6              
0095: 00       SWI                      
0096: 71 10    OR    F,0x10             
0098: 51 F9    MOV   A,[crc+164]        
009A: 60 E8    MOV   REG[0xE8],A        
009C: 51 F8    MOV   A,[crc+163]        
009E: 60 EA    MOV   REG[0xEA],A        
00A0: 70 EF    AND   F,0xEF             
00A2: 18       POP   A                  
00A3: 60 D0    MOV   REG[0xD0],A        (0293)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ENDIF
                                        (0295) ENDIF ; 3.3 Volt Operation
                                        (0296) 
00A5: 55 F8 00 MOV   [crc+163],0x0      (0297)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00A8: 55 F9 00 MOV   [crc+164],0x0      (0298)     mov  [bSSC_KEYSP], 0
                                        (0299) 
                                        (0300)     ;---------------------------------------
                                        (0301)     ; Initialize Crystal Oscillator and PLL
                                        (0302)     ;---------------------------------------
                                        (0303) 
                                        (0304) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0305)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0306)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0307)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0308)     ; the ECO to stabilize.
                                        (0309)     ;
                                        (0310)     M8C_SetBank1
                                        (0311)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0312)     M8C_SetBank0
                                        (0313)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0314)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0315)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0316) .WaitFor1s:
                                        (0317)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0318)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0319)                                           ;   since interrupts are not globally enabled
                                        (0320) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0321)     ; Either no ECO, or waiting for stable clock is to be done in main
00AB: 71 10    OR    F,0x10             (0322)     M8C_SetBank1
00AD: 62 E0 02 MOV   REG[0xE0],0x2      (0323)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00B0: 70 EF    AND   F,0xEF             (0324)     M8C_SetBank0
00B2: 62 E3 38 MOV   REG[0xE3],0x38     (0325)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0326) 
                                        (0327) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0328) 
                                        (0329) IF ( PLL_MODE )
                                        (0330)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0331)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0332)     ;
                                        (0333)     M8C_SetBank1
                                        (0334)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0335)     M8C_SetBank0
                                        (0336)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0337)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0338) 
                                        (0339) .WaitFor16ms:
                                        (0340)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0341)     jz   .WaitFor16ms
                                        (0342)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0343)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0344)     M8C_SetBank0
                                        (0345) 
                                        (0346) IF      ( WAIT_FOR_32K )
                                        (0347) ELSE ; !( WAIT_FOR_32K )
                                        (0348)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0349)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0350) ENDIF ;(WAIT_FOR_32K)
                                        (0351) ENDIF ;(PLL_MODE)
                                        (0352) 
                                        (0353)     ;------------------------
                                        (0354)     ; Close CT leakage path.
                                        (0355)     ;------------------------
00B5: 62 71 05 MOV   REG[0x71],0x5      (0356)     mov   reg[ACB00CR0], 05h
00B8: 62 75 05 MOV   REG[0x75],0x5      (0357)     mov   reg[ACB01CR0], 05h
00BB: 62 79 05 MOV   REG[0x79],0x5      (0358)     mov   reg[ACB02CR0], 05h
00BE: 62 7D 05 MOV   REG[0x7D],0x5      (0359)     mov   reg[ACB03CR0], 05h
                                        (0360) 
                                        (0361) 
                                        (0362) IF	(TOOLCHAIN & HITECH)
                                        (0363)     ;---------------------------------------------
                                        (0364)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0365)     ;---------------------------------------------
                                        (0366) 	global		__Lstackps
                                        (0367) 	mov     a,low __Lstackps
                                        (0368) 	swap    a,sp
                                        (0369) 
                                        (0370) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0371)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0372)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0373)     RAM_SETPAGE_CUR 0
                                        (0374)     RAM_SETPAGE_MVW 0
                                        (0375)     RAM_SETPAGE_MVR 0
                                        (0376)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0377)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0378)     ELSE
                                        (0379)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0380)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0381) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0382) ELSE
                                        (0383)     ;---------------------------------------------
                                        (0384)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0385)     ;---------------------------------------------
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C1: 62 D1 07 MOV   REG[0xD1],0x7      (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00C4: 50 00    MOV   A,0x0              (0388)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00C6: 4E       SWAP  SP,A               (0389)     swap  A, SP
00C7: 62 D3 07 MOV   REG[0xD3],0x7      (0390)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00CA: 62 D0 00 MOV   REG[0xD0],0x0      (0391)     RAM_SETPAGE_CUR 0
00CD: 62 D5 00 MOV   REG[0xD5],0x0      (0392)     RAM_SETPAGE_MVW 0
00D0: 62 D4 00 MOV   REG[0xD4],0x0      (0393)     RAM_SETPAGE_MVR 0
                                        (0394) 
                                        (0395)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D3: 71 C0    OR    F,0xC0             (0396)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0397)   ELSE
                                        (0398)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0399)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0400) ELSE
                                        (0401)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0402)     swap  SP, A
                                        (0403) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0404) ENDIF ;	TOOLCHAIN
                                        (0405) 
                                        (0406)     ;-------------------------
                                        (0407)     ; Load Base Configuration
                                        (0408)     ;-------------------------
                                        (0409)     ; Load global parameter settings and load the user modules in the
                                        (0410)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0411)     ; to minimize start up time; (2) We may still need to play with the
                                        (0412)     ; Sleep Timer.
                                        (0413)     ;
00D5: 7C 07 5B LCALL 0x075B             (0414)     lcall LoadConfigInit
                                        (0415) 
                                        (0416)     ;-----------------------------------
                                        (0417)     ; Initialize C Run-Time Environment
                                        (0418)     ;-----------------------------------
                                        (0419) IF ( C_LANGUAGE_SUPPORT )
                                        (0420) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0421)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0422)     mov  [__r0],<__bss_start
                                        (0423) BssLoop:
                                        (0424)     cmp  [__r0],<__bss_end
                                        (0425)     jz   BssDone
                                        (0426)     mvi  [__r0],A
                                        (0427)     jmp  BssLoop
                                        (0428) BssDone:
                                        (0429)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0430)     mov  X,<__idata_start
                                        (0431)     mov  [__r0],<__data_start
                                        (0432) IDataLoop:
                                        (0433)     cmp  [__r0],<__data_end
                                        (0434)     jz   C_RTE_Done
                                        (0435)     push A
                                        (0436)     romx
                                        (0437)     mvi  [__r0],A
                                        (0438)     pop  A
                                        (0439)     inc  X
                                        (0440)     adc  A,0
                                        (0441)     jmp  IDataLoop
                                        (0442) 
                                        (0443) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0444) 
                                        (0445) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00D8: 62 D0 00 MOV   REG[0xD0],0x0      (0446)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0447)                                        ; to use the Virtual Register page.
                                        (0448) 
                                        (0449)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0450)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0451)     ; text segment and may have been relocated by the Code Compressor.
                                        (0452)     ;
00DB: 50 07    MOV   A,0x7              (0453)     mov   A, >__pXIData                ; Get the address of the flash
00DD: 57 57    MOV   X,0x57             (0454)     mov   X, <__pXIData                ;   pointer to the xidata area.
00DF: 08       PUSH  A                  (0455)     push  A
00E0: 28       ROMX                     (0456)     romx                               ; get the MSB of xidata's address
00E1: 53 3A    MOV   [__r0],A           (0457)     mov   [__r0], A
00E3: 18       POP   A                  (0458)     pop   A
00E4: 75       INC   X                  (0459)     inc   X
00E5: 09 00    ADC   A,0x0              (0460)     adc   A, 0
00E7: 28       ROMX                     (0461)     romx                               ; get the LSB of xidata's address
00E8: 4B       SWAP  A,X                (0462)     swap  A, X
00E9: 51 3A    MOV   A,[__r0]           (0463)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0464)                                        ;   XIData structure list in flash
00EB: 80 04    JMP   0x00F0             (0465)     jmp   .AccessStruct
                                        (0466) 
                                        (0467)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0468)     ; values of C variables. Each structure contains 3 member elements.
                                        (0469)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0470)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0471)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0472)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0473)     ; value in the second member element, an unsigned byte:
                                        (0474)     ; (1) If the value of the second element is non-zero, it represents
                                        (0475)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0476)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0477)     ; the bytes are copied to the block of RAM.
                                        (0478)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0479)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0480)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0481) 
                                        (0482) .AccessNextStructLoop:
00ED: 75       INC   X                  (0483)     inc   X                            ; pXIData++
00EE: 09 00    ADC   A,0x0              (0484)     adc   A, 0
                                        (0485) .AccessStruct:                         ; Entry point for first block
                                        (0486)     ;
                                        (0487)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0488)     ;
00F0: 62 E3 00 MOV   REG[0xE3],0x0      (0489)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00F3: 08       PUSH  A                  (0490)     push  A
00F4: 28       ROMX                     (0491)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00F5: 60 D5    MOV   REG[0xD5],A        (0492)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00F7: 74       INC   A                  (0493)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00F8: A0 4B    JZ    0x0144             (0494)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00FA: 18       POP   A                  (0495)     pop   A                            ; restore pXIData to [A,X]
00FB: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00FC: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00FE: 08       PUSH  A                  (0498)     push  A
00FF: 28       ROMX                     (0499)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
0100: 53 3A    MOV   [__r0],A           (0500)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
0102: 18       POP   A                  (0501)     pop   A                            ; restore pXIData to [A,X]
0103: 75       INC   X                  (0502)     inc   X                            ; pXIData++ (point to size)
0104: 09 00    ADC   A,0x0              (0503)     adc   A, 0
0106: 08       PUSH  A                  (0504)     push  A
0107: 28       ROMX                     (0505)     romx                               ; Get the size (CPU.A <- *pXIData)
0108: A0 1C    JZ    0x0125             (0506)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
010A: 53 39    MOV   [__r1],A           (0507)     mov   [__r1], A                    ;             else downcount in __r1
010C: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
                                        (0509) 
                                        (0510) .CopyNextByteLoop:
                                        (0511)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0512)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0513)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0514)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0515)     ;
010D: 75       INC   X                  (0516)     inc   X                            ; pXIData++ (point to next data byte)
010E: 09 00    ADC   A,0x0              (0517)     adc   A, 0
0110: 08       PUSH  A                  (0518)     push  A
0111: 28       ROMX                     (0519)     romx                               ; Get the data value (CPU.A <- *pXIData)
0112: 3F 3A    MVI   [__r0],A           (0520)     mvi   [__r0], A                    ; Transfer the data to RAM
0114: 47 3A FF TST   [__r0],0xFF        (0521)     tst   [__r0], 0xff                 ; Check for page crossing
0117: B0 06    JNZ   0x011E             (0522)     jnz   .CopyLoopTail                ;   No crossing, keep going
0119: 5D D5    MOV   A,REG[0xD5]        (0523)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011B: 74       INC   A                  (0524)     inc   A
011C: 60 D5    MOV   REG[0xD5],A        (0525)     mov   reg[ MVW_PP], A
                                        (0526) .CopyLoopTail:
011E: 18       POP   A                  (0527)     pop   A                            ; restore pXIData to [A,X]
011F: 7A 39    DEC   [__r1]             (0528)     dec   [__r1]                       ; End of this array in flash?
0121: BF EB    JNZ   0x010D             (0529)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0123: 8F C9    JMP   0x00ED             (0530)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0531) 
                                        (0532) .ClearRAMBlockToZero:
0125: 18       POP   A                  (0533)     pop   A                            ; restore pXIData to [A,X]
0126: 75       INC   X                  (0534)     inc   X                            ; pXIData++ (point to next data byte)
0127: 09 00    ADC   A,0x0              (0535)     adc   A, 0
0129: 08       PUSH  A                  (0536)     push  A
012A: 28       ROMX                     (0537)     romx                               ; Get the run length (CPU.A <- *pXIData)
012B: 53 39    MOV   [__r1],A           (0538)     mov   [__r1], A                    ; Initialize downcounter
012D: 50 00    MOV   A,0x0              (0539)     mov   A, 0                         ; Initialize source data
                                        (0540) 
                                        (0541) .ClearRAMBlockLoop:
                                        (0542)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0543)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0544)     ;
012F: 3F 3A    MVI   [__r0],A           (0545)     mvi   [__r0], A                    ; Clear a byte
0131: 47 3A FF TST   [__r0],0xFF        (0546)     tst   [__r0], 0xff                 ; Check for page crossing
0134: B0 08    JNZ   0x013D             (0547)     jnz   .ClearLoopTail               ;   No crossing, keep going
0136: 5D D5    MOV   A,REG[0xD5]        (0548)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0138: 74       INC   A                  (0549)     inc   A
0139: 60 D5    MOV   REG[0xD5],A        (0550)     mov   reg[ MVW_PP], A
013B: 50 00    MOV   A,0x0              (0551)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0552) .ClearLoopTail:
013D: 7A 39    DEC   [__r1]             (0553)     dec   [__r1]                       ; Was this the last byte?
013F: BF EF    JNZ   0x012F             (0554)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0141: 18       POP   A                  (0555)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0142: 8F AA    JMP   0x00ED             (0556)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0557) 
                                        (0558) .C_RTE_WrapUp:
0144: 18       POP   A                  (0559)     pop   A                            ; balance stack
                                        (0560) 
                                        (0561) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0562) 
                                        (0563) C_RTE_Done:
                                        (0564) 
                                        (0565) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0566) 
                                        (0567)     ;-------------------------------
                                        (0568)     ; Voltage Stabilization for SMP
                                        (0569)     ;-------------------------------
                                        (0570) 
                                        (0571) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0572) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0573)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0574)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0575)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0576)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0577)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0578)     M8C_SetBank1
                                        (0579)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0580)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0581)     M8C_SetBank0
                                        (0582)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0583)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0584) .WaitFor2ms:
                                        (0585)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0586)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0587) ENDIF ; SMP is operational
                                        (0588) ENDIF ; 5.0V Operation
                                        (0589) 
                                        (0590)     ;-------------------------------
                                        (0591)     ; Set Power-On Reset (POR) Level
                                        (0592)     ;-------------------------------
                                        (0593) 
                                        (0594)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0595)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0596)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0597)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0598)     ;  lead to corruption of PSoC flash.
                                        (0599) 
0145: 71 10    OR    F,0x10             (0600)     M8C_SetBank1
                                        (0601) 
                                        (0602) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0603)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0604)  ELSE                                       ;    No, fast mode
                                        (0605)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0606)                                             ;       no, set midpoint POR in user code, if desired
                                        (0607)   ELSE ; 24HMz                              ;
                                        (0608)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0609)   ENDIF ; 24MHz
                                        (0610)  ENDIF ; Slow Mode
                                        (0611) ENDIF ; 5.0V Operation
                                        (0612) 
0147: 70 EF    AND   F,0xEF             (0613)     M8C_SetBank0
                                        (0614) 
                                        (0615)     ;----------------------------
                                        (0616)     ; Wrap up and invoke "main"
                                        (0617)     ;----------------------------
                                        (0618) 
                                        (0619)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0620)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0621)     ;
0149: 62 E0 00 MOV   REG[0xE0],0x0      (0622)     mov  reg[INT_MSK0],0
                                        (0623) 
                                        (0624)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0625)     ; And put decimator in full mode so it does not consume too much current.
                                        (0626)     ;
014C: 71 10    OR    F,0x10             (0627)     M8C_SetBank1
014E: 62 E0 02 MOV   REG[0xE0],0x2      (0628)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0151: 43 E7 80 OR    REG[0xE7],0x80     (0629)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0154: 70 EF    AND   F,0xEF             (0630)     M8C_SetBank0
                                        (0631) 
                                        (0632)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0633)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0634)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0635)     ;
0156: 62 E2 00 MOV   REG[0xE2],0x0      (0636)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0637)                                    ; have been set during the boot process.
                                        (0638) IF	(TOOLCHAIN & HITECH)
                                        (0639) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0640) ELSE
                                        (0641) IF ENABLE_LJMP_TO_MAIN
                                        (0642)     ljmp  _main                    ; goto main (no return)
                                        (0643) ELSE
0159: 7C 0F 3E LCALL _main              (0644)     lcall _main                    ; call main
                                        (0645) .Exit:
015C: 8F FF    JMP   0x015C             (0646)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0647) ENDIF
                                        (0648) ENDIF ; TOOLCHAIN
                                        (0649) 
                                        (0650)     ;---------------------------------
                                        (0651)     ; Library Access to Global Parms
                                        (0652)     ;---------------------------------
                                        (0653)     ;
                                        (0654)  bGetPowerSetting:
                                        (0655) _bGetPowerSetting:
                                        (0656)     ; Returns value of POWER_SETTING in the A register.
                                        (0657)     ; No inputs. No Side Effects.
                                        (0658)     ;
015E: 50 08    MOV   A,0x8              (0659)     mov   A, POWER_SETTING
0160: 7F       RET                      (0660)     ret
(0661) 
(0662) IF	(TOOLCHAIN & HITECH)
(0663) ELSE
(0664)     ;---------------------------------
(0665)     ; Order Critical RAM & ROM AREAs
(0666)     ;---------------------------------
(0667)     ;  'TOP' is all that has been defined so far...
(0668) 
(0669)     ;  ROM AREAs for C CONST, static & global items
(0670)     ;
(0671)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
(0672)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
(0673) __idata_start:
(0674) 
(0675)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
(0676) __func_lit_start:
(0677) 
(0678) IF ( SYSTEM_LARGE_MEMORY_MODEL )
(0679)     ; We use the func_lit area to store a pointer to extended initialized
(0680)     ; data (xidata) area that follows the text area. Func_lit isn't
(0681)     ; relocated by the code compressor, but the text area may shrink and
(0682)     ; that moves xidata around.
(0683)     ;
(0684) __pXIData:         word __text_end           ; ptr to extended idata
(0685) ENDIF
(0686) 
(0687)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
(0688)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
(0689) 
(0690)     ; CODE segment for general use
(0691)     ;
(0692)     AREA text (ROM, REL, CON)
(0693) __text_start:
(0694) 
(0695)     ; RAM area usage
(0696)     ;
(0697)     AREA data              (RAM, REL, CON)   ; initialized RAM
(0698) __data_start:
(0699) 
(0700)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
(0701)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
(0702)     AREA bss               (RAM, REL, CON)   ; general use
(0703) __bss_start:
(0704) 
(0705) ENDIF ; TOOLCHAIN
(0706) 
(0707) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_sensor_gateway_Bank1
                                        (0006) export LoadConfigTBL_sensor_gateway_Bank0
                                        (0007) export LoadConfigTBL_sensor_gateway_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_sensor_gateway_Bank0:
                                        (0010) ;  Instance name Counter8_ltrx, User Module Counter8
                                        (0011) ;       Instance name Counter8_ltrx, Block Name CNTR8(DBB10)
                                        (0012) 	db		33h, 00h		;Counter8_ltrx_CONTROL_REG(DBB10CR0)
                                        (0013) 	db		31h, 27h		;Counter8_ltrx_PERIOD_REG(DBB10DR1)
                                        (0014) 	db		32h, 13h		;Counter8_ltrx_COMPARE_REG(DBB10DR2)
                                        (0015) ;  Instance name LED1, User Module LED
                                        (0016) ;  Instance name LTRX, User Module UART
                                        (0017) ;       Instance name LTRX, Block Name RX(DCB13)
                                        (0018) 	db		3fh, 00h		;LTRX_RX_CONTROL_REG(DCB13CR0)
                                        (0019) 	db		3dh, 00h		;LTRX_(DCB13DR1)
                                        (0020) 	db		3eh, 00h		;LTRX_RX_BUFFER_REG (DCB13DR2)
                                        (0021) ;       Instance name LTRX, Block Name TX(DCB12)
                                        (0022) 	db		3bh, 00h		;LTRX_TX_CONTROL_REG(DCB12CR0)
                                        (0023) 	db		39h, 00h		;LTRX_TX_BUFFER_REG (DCB12DR1)
                                        (0024) 	db		3ah, 00h		;LTRX_(DCB12DR2)
                                        (0025) ;  Instance name OneWire, User Module OneWire
                                        (0026) ;       Instance name OneWire, Block Name BitClk(DBB31)
                                        (0027) 	db		57h, 00h		;OneWire_BITCLK_CONTROL_REG(DBB31CR0)
                                        (0028) 	db		55h, 00h		;OneWire_BITCLK_PERIOD_REG (DBB31DR1)
                                        (0029) 	db		56h, 00h		;OneWire_BITCLK_COMPARE_REG(DBB31DR2)
                                        (0030) ;       Instance name OneWire, Block Name XCVR(DCB32)
                                        (0031) 	db		5bh, 00h		;OneWire_XCVR_CONTROL_REG(DCB32CR0)
                                        (0032) 	db		59h, 00h		;OneWire_XCVR_TX_BUFFER_REG(DCB32DR1)
                                        (0033) 	db		5ah, 00h		;OneWire_XCVR_RX_BUFFER_REG(DCB32DR2)
                                        (0034) ;  Instance name Speed_PWM, User Module PWM8
                                        (0035) ;       Instance name Speed_PWM, Block Name PWM8(DBB00)
                                        (0036) 	db		23h, 00h		;Speed_PWM_CONTROL_REG(DBB00CR0)
                                        (0037) 	db		21h, 64h		;Speed_PWM_PERIOD_REG(DBB00DR1)
                                        (0038) 	db		22h, 00h		;Speed_PWM_COMPARE_REG(DBB00DR2)
                                        (0039) ;  Instance name Ticker, User Module Counter16
                                        (0040) ;       Instance name Ticker, Block Name CNTR16_LSB(DCB22)
                                        (0041) 	db		4bh, 00h		;Ticker_CONTROL_LSB_REG(DCB22CR0)
                                        (0042) 	db		49h, ffh		;Ticker_PERIOD_LSB_REG(DCB22DR1)
                                        (0043) 	db		4ah, 01h		;Ticker_COMPARE_LSB_REG(DCB22DR2)
                                        (0044) ;       Instance name Ticker, Block Name CNTR16_MSB(DCB23)
                                        (0045) 	db		4fh, 00h		;Ticker_CONTROL_MSB_REG(DCB23CR0)
                                        (0046) 	db		4dh, ffh		;Ticker_PERIOD_MSB_REG(DCB23DR1)
                                        (0047) 	db		4eh, 00h		;Ticker_COMPARE_MSB_REG(DCB23DR2)
                                        (0048) ;  Global Register values Bank 0
                                        (0049) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0050) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0051) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0052) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0053) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0054) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0055) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0056) 	db		b0h, 01h		; Row_0_InputMux register (RDI0RI)
                                        (0057) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0058) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0059) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0060) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0061) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0062) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0063) 	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
                                        (0064) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0065) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0066) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0067) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0068) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0069) 	db		beh, 08h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0070) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0071) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0072) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0073) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0074) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0075) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0076) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0077) 	db		c8h, 14h		; Row_3_InputMux register (RDI3RI)
                                        (0078) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0079) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0080) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0081) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0082) 	db		cdh, 20h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0083) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0084) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0085) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0086) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0087) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0088) 	db		ffh
                                        (0089) LoadConfigTBL_sensor_gateway_Bank1:
                                        (0090) ;  Instance name Counter8_ltrx, User Module Counter8
                                        (0091) ;       Instance name Counter8_ltrx, Block Name CNTR8(DBB10)
                                        (0092) 	db		30h, 61h		;Counter8_ltrx_FUNC_REG(DBB10FN)
                                        (0093) 	db		31h, 15h		;Counter8_ltrx_INPUT_REG(DBB10IN)
                                        (0094) 	db		32h, 40h		;Counter8_ltrx_OUTPUT_REG(DBB10OU)
                                        (0095) ;  Instance name LED1, User Module LED
                                        (0096) ;  Instance name LTRX, User Module UART
                                        (0097) ;       Instance name LTRX, Block Name RX(DCB13)
                                        (0098) 	db		3ch, 05h		;LTRX_RX_FUNC_REG   (DCB13FN)
                                        (0099) 	db		3dh, e2h		;LTRX_RX_INPUT_REG  (DCB13IN)
                                        (0100) 	db		3eh, 40h		;LTRX_RX_OUTPUT_REG (DCB13OU)
                                        (0101) ;       Instance name LTRX, Block Name TX(DCB12)
                                        (0102) 	db		38h, 1dh		;LTRX_TX_FUNC_REG   (DCB12FN)
                                        (0103) 	db		39h, 02h		;LTRX_TX_INPUT_REG  (DCB12IN)
                                        (0104) 	db		3ah, 46h		;LTRX_TX_OUTPUT_REG (DCB12OU)
                                        (0105) ;  Instance name OneWire, User Module OneWire
                                        (0106) ;       Instance name OneWire, Block Name BitClk(DBB31)
                                        (0107) 	db		54h, 21h		;OneWire_BITCLK_FUNC_REG(DBB31FN)
                                        (0108) 	db		55h, 11h		;OneWire_BITCLK_INPUT_REG(DBB31IN)
                                        (0109) 	db		56h, 40h		;OneWire_BITCLK_OUTPUT_REG(DBB31OU)
                                        (0110) ;       Instance name OneWire, Block Name XCVR(DCB32)
                                        (0111) 	db		58h, 16h		;OneWire_XCVR_FUNC_REG(DCB32FN)
                                        (0112) 	db		59h, f3h		;OneWire_XCVR_INPUT_REG(DCB32IN)
                                        (0113) 	db		5ah, 45h		;OneWire_XCVR_OUTPUT_REG(DCB32OU)
                                        (0114) ;  Instance name Speed_PWM, User Module PWM8
                                        (0115) ;       Instance name Speed_PWM, Block Name PWM8(DBB00)
                                        (0116) 	db		20h, 79h		;Speed_PWM_FUNC_REG(DBB00FN)
                                        (0117) 	db		21h, 15h		;Speed_PWM_INPUT_REG(DBB00IN)
                                        (0118) 	db		22h, 47h		;Speed_PWM_OUTPUT_REG(DBB00OU)
                                        (0119) ;  Instance name Ticker, User Module Counter16
                                        (0120) ;       Instance name Ticker, Block Name CNTR16_LSB(DCB22)
                                        (0121) 	db		48h, 01h		;Ticker_FUNC_LSB_REG(DCB22FN)
                                        (0122) 	db		49h, 17h		;Ticker_INPUT_LSB_REG(DCB22IN)
                                        (0123) 	db		4ah, 40h		;Ticker_OUTPUT_LSB_REG(DCB22OU)
                                        (0124) ;       Instance name Ticker, Block Name CNTR16_MSB(DCB23)
                                        (0125) 	db		4ch, 21h		;Ticker_FUNC_MSB_REG(DCB23FN)
                                        (0126) 	db		4dh, 37h		;Ticker_INPUT_MSB_REG(DCB23IN)
                                        (0127) 	db		4eh, 40h		;Ticker_OUTPUT_MSB_REG(DCB23OU)
                                        (0128) ;  Global Register values Bank 1
                                        (0129) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0130) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0131) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0132) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0133) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0134) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0135) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0136) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0137) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0138) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0139) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0140) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0141) 	db		e1h, 30h		; OscillatorControl_1 register (OSC_CR1)
                                        (0142) 	db		e2h, 01h		; OscillatorControl_2 register (OSC_CR2)
                                        (0143) 	db		dfh, 01h		; OscillatorControl_3 register (OSC_CR3)
                                        (0144) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0145) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0146) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0147) 	db		ffh
                                        (0148) LoadConfigTBL_sensor_gateway_Ordered:
                                        (0149) ;  Ordered Global Register values

(0150) 	M8C_SetBank1
04F8: 10       PUSH  X                  
04F9: 62 00 2E MOV   REG[0x0],0x2E      (0151) 	mov	reg[00h], 2eh		; Port_0_DriveMode_0 register (PRT0DM0)
04FC: 62 01 FB MOV   REG[0x1],0xFB      (0152) 	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
04FF: 70 EF    AND   F,0xEF             (0153) 	M8C_SetBank0
0501: 62 03 D0 MOV   REG[0x3],0xD0      (0154) 	mov	reg[03h], d0h		; Port_0_DriveMode_2 register (PRT0DM2)
0504: 62 02 05 MOV   REG[0x2],0x5       (0155) 	mov	reg[02h], 05h		; Port_0_GlobalSelect register (PRT0GS)
0507: 71 10    OR    F,0x10             (0156) 	M8C_SetBank1
0509: 62 02 00 MOV   REG[0x2],0x0       (0157) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
050C: 62 03 00 MOV   REG[0x3],0x0       (0158) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
050F: 70 EF    AND   F,0xEF             (0159) 	M8C_SetBank0
0511: 62 01 00 MOV   REG[0x1],0x0       (0160) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0514: 71 10    OR    F,0x10             (0161) 	M8C_SetBank1
0516: 62 04 40 MOV   REG[0x4],0x40      (0162) 	mov	reg[04h], 40h		; Port_1_DriveMode_0 register (PRT1DM0)
0519: 62 05 BF MOV   REG[0x5],0xBF      (0163) 	mov	reg[05h], bfh		; Port_1_DriveMode_1 register (PRT1DM1)
051C: 70 EF    AND   F,0xEF             (0164) 	M8C_SetBank0
051E: 62 07 BB MOV   REG[0x7],0xBB      (0165) 	mov	reg[07h], bbh		; Port_1_DriveMode_2 register (PRT1DM2)
0521: 62 06 44 MOV   REG[0x6],0x44      (0166) 	mov	reg[06h], 44h		; Port_1_GlobalSelect register (PRT1GS)
0524: 71 10    OR    F,0x10             (0167) 	M8C_SetBank1
0526: 62 06 00 MOV   REG[0x6],0x0       (0168) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0529: 62 07 00 MOV   REG[0x7],0x0       (0169) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
052C: 70 EF    AND   F,0xEF             (0170) 	M8C_SetBank0
052E: 62 05 00 MOV   REG[0x5],0x0       (0171) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0531: 71 10    OR    F,0x10             (0172) 	M8C_SetBank1
0533: 62 08 E2 MOV   REG[0x8],0xE2      (0173) 	mov	reg[08h], e2h		; Port_2_DriveMode_0 register (PRT2DM0)
0536: 62 09 1F MOV   REG[0x9],0x1F      (0174) 	mov	reg[09h], 1fh		; Port_2_DriveMode_1 register (PRT2DM1)
0539: 70 EF    AND   F,0xEF             (0175) 	M8C_SetBank0
053B: 62 0B 77 MOV   REG[0xB],0x77      (0176) 	mov	reg[0bh], 77h		; Port_2_DriveMode_2 register (PRT2DM2)
053E: 62 0A A8 MOV   REG[0xA],0xA8      (0177) 	mov	reg[0ah], a8h		; Port_2_GlobalSelect register (PRT2GS)
0541: 71 10    OR    F,0x10             (0178) 	M8C_SetBank1
0543: 62 0A 00 MOV   REG[0xA],0x0       (0179) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0546: 62 0B 00 MOV   REG[0xB],0x0       (0180) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0549: 70 EF    AND   F,0xEF             (0181) 	M8C_SetBank0
054B: 62 09 00 MOV   REG[0x9],0x0       (0182) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
054E: 71 10    OR    F,0x10             (0183) 	M8C_SetBank1
0550: 62 0C 80 MOV   REG[0xC],0x80      (0184) 	mov	reg[0ch], 80h		; Port_3_DriveMode_0 register (PRT3DM0)
0553: 62 0D 7F MOV   REG[0xD],0x7F      (0185) 	mov	reg[0dh], 7fh		; Port_3_DriveMode_1 register (PRT3DM1)
0556: 70 EF    AND   F,0xEF             (0186) 	M8C_SetBank0
0558: 62 0F 7F MOV   REG[0xF],0x7F      (0187) 	mov	reg[0fh], 7fh		; Port_3_DriveMode_2 register (PRT3DM2)
055B: 62 0E 00 MOV   REG[0xE],0x0       (0188) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
055E: 71 10    OR    F,0x10             (0189) 	M8C_SetBank1
0560: 62 0E 00 MOV   REG[0xE],0x0       (0190) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0563: 62 0F 00 MOV   REG[0xF],0x0       (0191) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0566: 70 EF    AND   F,0xEF             (0192) 	M8C_SetBank0
0568: 62 0D 00 MOV   REG[0xD],0x0       (0193) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
056B: 71 10    OR    F,0x10             (0194) 	M8C_SetBank1
056D: 62 10 85 MOV   REG[0x10],0x85     (0195) 	mov	reg[10h], 85h		; Port_4_DriveMode_0 register (PRT4DM0)
0570: 62 11 7B MOV   REG[0x11],0x7B     (0196) 	mov	reg[11h], 7bh		; Port_4_DriveMode_1 register (PRT4DM1)
0573: 70 EF    AND   F,0xEF             (0197) 	M8C_SetBank0
0575: 62 13 FF MOV   REG[0x13],0xFF     (0198) 	mov	reg[13h], ffh		; Port_4_DriveMode_2 register (PRT4DM2)
0578: 62 12 00 MOV   REG[0x12],0x0      (0199) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
057B: 71 10    OR    F,0x10             (0200) 	M8C_SetBank1
057D: 62 12 00 MOV   REG[0x12],0x0      (0201) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0580: 62 13 00 MOV   REG[0x13],0x0      (0202) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0583: 70 EF    AND   F,0xEF             (0203) 	M8C_SetBank0
0585: 62 11 00 MOV   REG[0x11],0x0      (0204) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0588: 71 10    OR    F,0x10             (0205) 	M8C_SetBank1
058A: 62 14 00 MOV   REG[0x14],0x0      (0206) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
058D: 62 15 00 MOV   REG[0x15],0x0      (0207) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0590: 70 EF    AND   F,0xEF             (0208) 	M8C_SetBank0
0592: 62 17 00 MOV   REG[0x17],0x0      (0209) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0595: 62 16 00 MOV   REG[0x16],0x0      (0210) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0598: 71 10    OR    F,0x10             (0211) 	M8C_SetBank1
059A: 62 16 00 MOV   REG[0x16],0x0      (0212) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
059D: 62 17 00 MOV   REG[0x17],0x0      (0213) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
05A0: 70 EF    AND   F,0xEF             (0214) 	M8C_SetBank0
05A2: 62 15 00 MOV   REG[0x15],0x0      (0215) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
05A5: 71 10    OR    F,0x10             (0216) 	M8C_SetBank1
05A7: 62 18 00 MOV   REG[0x18],0x0      (0217) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
05AA: 62 19 00 MOV   REG[0x19],0x0      (0218) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
05AD: 70 EF    AND   F,0xEF             (0219) 	M8C_SetBank0
05AF: 62 1B 00 MOV   REG[0x1B],0x0      (0220) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
05B2: 62 1A 00 MOV   REG[0x1A],0x0      (0221) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
05B5: 71 10    OR    F,0x10             (0222) 	M8C_SetBank1
05B7: 62 1A 00 MOV   REG[0x1A],0x0      (0223) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
05BA: 62 1B 00 MOV   REG[0x1B],0x0      (0224) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
05BD: 70 EF    AND   F,0xEF             (0225) 	M8C_SetBank0
05BF: 62 19 00 MOV   REG[0x19],0x0      (0226) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
05C2: 71 10    OR    F,0x10             (0227) 	M8C_SetBank1
05C4: 62 1C 00 MOV   REG[0x1C],0x0      (0228) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
05C7: 62 1D 00 MOV   REG[0x1D],0x0      (0229) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
05CA: 70 EF    AND   F,0xEF             (0230) 	M8C_SetBank0
05CC: 62 1F 00 MOV   REG[0x1F],0x0      (0231) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
05CF: 62 1E 00 MOV   REG[0x1E],0x0      (0232) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
05D2: 71 10    OR    F,0x10             (0233) 	M8C_SetBank1
05D4: 62 1E 00 MOV   REG[0x1E],0x0      (0234) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
05D7: 62 1F 00 MOV   REG[0x1F],0x0      (0235) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
05DA: 70 EF    AND   F,0xEF             (0236) 	M8C_SetBank0
05DC: 62 1D 00 MOV   REG[0x1D],0x0      (0237) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
05DF: 70 EF    AND   F,0xEF             (0238) 	M8C_SetBank0
05E1: 7F       RET                      (0239) 	ret
(0240) 
(0241) 
(0242) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_sensor_gateway
                                        (0026) export _LoadConfig_sensor_gateway
                                        (0027) export Port_3_Data_SHADE
                                        (0028) export _Port_3_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     

(0061) 	mov		[Port_3_Data_SHADE], 0h
                                        (0062) 
075D: 00       SWI                      
075E: 7C 07 65 LCALL 0x0765             (0063) 	lcall	LoadConfig_sensor_gateway
0761: 7C 04 F7 LCALL 0x04F7             (0064) 	lcall	LoadConfigTBL_sensor_gateway_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
0764: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration sensor_gateway
                                        (0072) ;
                                        (0073) ;    Load configuration registers for sensor_gateway.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_sensor_gateway:
                                        (0090)  LoadConfig_sensor_gateway:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
0765: 10       PUSH  X                  (0093) 	push	x
0766: 70 EF    AND   F,0xEF             (0094)     M8C_SetBank0                    ; Force bank 0
0768: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
076A: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
076B: 50 04    MOV   A,0x4              (0098)     mov     A, >LoadConfigTBL_sensor_gateway_Bank0
076D: 57 23    MOV   X,0x23             (0099)     mov     X, <LoadConfigTBL_sensor_gateway_Bank0
076F: 7C 07 80 LCALL 0x0780             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
0772: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
0774: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
0775: 50 04    MOV   A,0x4              (0105)     mov     A, >LoadConfigTBL_sensor_gateway_Bank1
0777: 57 A2    MOV   X,0xA2             (0106)     mov     X, <LoadConfigTBL_sensor_gateway_Bank1
0779: 7C 07 80 LCALL 0x0780             (0107)     lcall   LoadConfig              ; Load the bank 1 values
                                        (0108) 
077C: 70 EF    AND   F,0xEF             (0109)     M8C_SetBank0                    ; Force return to bank 0
077E: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
077F: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
0780: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
0782: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
0783: 08       PUSH  A                  (0137)     push    A
0784: 4F       MOV   X,SP               (0138)     mov     X, SP
0785: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0788: D0 04    JNC   0x078D             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
078A: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
078D: 18       POP   A                  (0143)     pop     A
078E: 20       POP   X                  (0144)     pop     X
                                        (0145) 
                                        (0146) LoadConfigLp:
078F: 70 EF    AND   F,0xEF             (0147)     M8C_SetBank0                    ; Switch to bank 0
0791: 62 E3 00 MOV   REG[0xE3],0x0      (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0794: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
0795: 08       PUSH  A                  (0150)     push    A
0796: 28       ROMX                     (0151)     romx                            ; Load register address from table
0797: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
0799: A0 1F    JZ    0x07B9             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
079B: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
079C: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
079F: A0 03    JZ    0x07A3             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
07A1: 71 10    OR    F,0x10             (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
07A3: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
07A5: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
07A6: 20       POP   X                  (0161)     pop     X
07A7: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
07A8: 09 00    ADC   A,0x0              (0163)     adc     A, 0
07AA: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
07AB: 08       PUSH  A                  (0165)     push    A
07AC: 28       ROMX                     (0166)     romx                            ; load config data from the table
07AD: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
07AE: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
07B0: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
07B2: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
07B3: 20       POP   X                  (0171)     pop     X
07B4: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
07B5: 09 00    ADC   A,0x0              (0173)     adc     A, 0
07B7: 8F D7    JMP   0x078F             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
07B9: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
07BB: 70 3F    AND   F,0x3F             
07BD: 71 C0    OR    F,0xC0             (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
07BF: 7F       RET                      (0178)     ret
(0179) 
(0180) AREA InterruptRAM(ram, rel)
(0181) 
(0182) NO_SHADOW:
(0183) _NO_SHADOW:
(0184) ; write only register shadows
(0185) _Port_3_Data_SHADE:
(0186) Port_3_Data_SHADE:	BLK	1
(0187) 
FILE: lib\ticker.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Ticker.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Ticker.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Ticker_EnableInt
                                        (0030) export _Ticker_EnableInt
                                        (0031) export  Ticker_DisableInt
                                        (0032) export _Ticker_DisableInt
                                        (0033) export  Ticker_Start
                                        (0034) export _Ticker_Start
                                        (0035) export  Ticker_Stop
                                        (0036) export _Ticker_Stop
                                        (0037) export  Ticker_WritePeriod
                                        (0038) export _Ticker_WritePeriod
                                        (0039) export  Ticker_WriteCompareValue
                                        (0040) export _Ticker_WriteCompareValue
                                        (0041) export  Ticker_wReadCompareValue
                                        (0042) export _Ticker_wReadCompareValue
                                        (0043) export  Ticker_wReadCounter
                                        (0044) export _Ticker_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wTicker_ReadCompareValue  ; deprecated
                                        (0049) export _wTicker_ReadCompareValue  ; deprecated
                                        (0050) export  wTicker_ReadCounter       ; deprecated
                                        (0051) export _wTicker_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Ticker_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Ticker_EnableInt:
                                        (0082) _Ticker_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
07C0: 43 DF 08 OR    REG[0xDF],0x8      (0084)    Ticker_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
07C3: 7F       RET                      (0086)    ret
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Ticker_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Ticker_DisableInt:
                                        (0109) _Ticker_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
07C4: 41 DF F7 AND   REG[0xDF],0xF7     (0111)    Ticker_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
07C7: 7F       RET                      (0113)    ret
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Ticker_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Ticker_Start:
                                        (0138) _Ticker_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
07C8: 43 4B 01 OR    REG[0x4B],0x1      (0140)    Ticker_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
07CB: 7F       RET                      (0142)    ret
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Ticker_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Ticker_Stop:
                                        (0166) _Ticker_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
07CC: 41 4B FE AND   REG[0x4B],0xFE     (0168)    Ticker_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
07CF: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Ticker_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Ticker_WritePeriod:
                                        (0196) _Ticker_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
07D0: 60 49    MOV   REG[0x49],A        (0198)    mov   reg[Ticker_PERIOD_LSB_REG], A
07D2: 5B       MOV   A,X                (0199)    mov   A, X
07D3: 60 4D    MOV   REG[0x4D],A        (0200)    mov   reg[Ticker_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
07D5: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Ticker_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Ticker_WriteCompareValue:
                                        (0225) _Ticker_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
07D6: 60 4A    MOV   REG[0x4A],A        (0227)    mov   reg[Ticker_COMPARE_LSB_REG], A
07D8: 5B       MOV   A,X                (0228)    mov   A, X
07D9: 60 4E    MOV   REG[0x4E],A        (0229)    mov   reg[Ticker_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
07DB: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Ticker_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Ticker_wReadCompareValue:
                                        (0254) _Ticker_wReadCompareValue:
                                        (0255)  wTicker_ReadCompareValue:                       ; this name deprecated
                                        (0256) _wTicker_ReadCompareValue:                       ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
07DC: 5D 4E    MOV   A,REG[0x4E]        (0258)    mov   A, reg[Ticker_COMPARE_MSB_REG]
07DE: 5C       MOV   X,A                (0259)    mov   X, A
07DF: 5D 4A    MOV   A,REG[0x4A]        (0260)    mov   A, reg[Ticker_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
07E1: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Ticker_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Ticker_wReadCounter:
                                        (0289) _Ticker_wReadCounter:
                                        (0290)  wTicker_ReadCounter:                            ; this name deprecated
                                        (0291) _wTicker_ReadCounter:                            ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
07E2: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
07E3: 5D 4E    MOV   A,REG[0x4E]        (0301)    mov   A, reg[Ticker_COMPARE_MSB_REG]          ; Save the Compare register on the stack
07E5: 08       PUSH  A                  (0302)    push  A                                          ;
07E6: 5D 4A    MOV   A,REG[0x4A]        (0303)    mov   A, reg[Ticker_COMPARE_LSB_REG]          ;
07E8: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
07E9: 5D 4B    MOV   A,REG[0x4B]        (0305)    mov   A, reg[Ticker_CONTROL_LSB_REG]          ; Save CR0 (running or stopped state)
07EB: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
07EC: 41 4B FE AND   REG[0x4B],0xFE     (0307)    Ticker_Stop_M                                 ; Disable (stop) the Counter if running
07EF: 71 10    OR    F,0x10             (0308)    M8C_SetBank1                                     ;
07F1: 5D 49    MOV   A,REG[0x49]        (0309)    mov   A, reg[Ticker_INPUT_LSB_REG]            ; save the LSB clock input setting
07F3: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
07F4: 62 49 00 MOV   REG[0x49],0x0      (0312)    mov   reg[Ticker_INPUT_LSB_REG], INPUT_REG_NULL
07F7: 70 EF    AND   F,0xEF             (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
07F9: 5D 4C    MOV   A,REG[0x4C]        (0314)    mov   A, reg[Ticker_COUNTER_MSB_REG]          ; DR2 <- DR0 (in the MSB block)
07FB: 5D 4E    MOV   A,REG[0x4E]        (0315)    mov   A, reg[Ticker_COMPARE_MSB_REG]          ; Stash the Count MSB on the stack
07FD: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
07FE: 5D 48    MOV   A,REG[0x48]        (0317)    mov   A, reg[Ticker_COUNTER_LSB_REG]          ; DR2 <- DR0 (in the LSB block)
0800: 5D 4A    MOV   A,REG[0x4A]        (0318)    mov   A, reg[Ticker_COMPARE_LSB_REG]          ; Stash the Count LSB on the stack
0802: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0803: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0805: 60 4E    MOV   REG[0x4E],A        (0321)    mov   reg[Ticker_COMPARE_MSB_REG], A          ;
0807: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0809: 60 4A    MOV   REG[0x4A],A        (0323)    mov   reg[Ticker_COMPARE_LSB_REG], A          ;
080B: 71 10    OR    F,0x10             (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
080D: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
080F: 60 49    MOV   REG[0x49],A        (0326)    mov   reg[Ticker_INPUT_LSB_REG], A            ;   and restore it
0811: 70 EF    AND   F,0xEF             (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0813: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0815: 60 4B    MOV   REG[0x4B],A        (0329)    mov   reg[Ticker_CONTROL_LSB_REG], A          ;   this function was first called
0817: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0818: 20       POP   X                  (0331)    pop   X                                          ;
0819: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
081B: 70 3F    AND   F,0x3F             
081D: 71 C0    OR    F,0xC0             (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
081F: 7F       RET                      (0334)    ret
(0335) 
(0336) .ENDSECTION
(0337) 
(0338) ; End of File Ticker.asm
FILE: lib\speed_pwmint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Speed_PWMINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "Speed_PWM.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Speed_PWM_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Speed_PWM_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Speed_PWM_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) 
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
0820: 7E       RETI                     (0076)    reti
(0077) 
(0078) 
(0079) ; end of file Speed_PWMINT.asm
FILE: lib\speed_pwm.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Speed_PWM.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "Speed_PWM.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Speed_PWM_EnableInt
                                        (0030) export _Speed_PWM_EnableInt
                                        (0031) export  Speed_PWM_DisableInt
                                        (0032) export _Speed_PWM_DisableInt
                                        (0033) export  Speed_PWM_Start
                                        (0034) export _Speed_PWM_Start
                                        (0035) export  Speed_PWM_Stop
                                        (0036) export _Speed_PWM_Stop
                                        (0037) export  Speed_PWM_WritePeriod
                                        (0038) export _Speed_PWM_WritePeriod
                                        (0039) export  Speed_PWM_WritePulseWidth
                                        (0040) export _Speed_PWM_WritePulseWidth
                                        (0041) export  Speed_PWM_bReadPulseWidth
                                        (0042) export _Speed_PWM_bReadPulseWidth
                                        (0043) export  Speed_PWM_bReadCounter
                                        (0044) export _Speed_PWM_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bSpeed_PWM_ReadPulseWidth    ; deprecated
                                        (0049) export _bSpeed_PWM_ReadPulseWidth    ; deprecated
                                        (0050) export  bSpeed_PWM_ReadCounter       ; deprecated
                                        (0051) export _bSpeed_PWM_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA sensor_gateway_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: Speed_PWM_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  Speed_PWM_EnableInt:
                                        (0091) _Speed_PWM_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
0821: 43 E1 01 OR    REG[0xE1],0x1      (0093)    Speed_PWM_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0824: 7F       RET                      (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: Speed_PWM_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  Speed_PWM_DisableInt:
                                        (0119) _Speed_PWM_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
0825: 41 E1 FE AND   REG[0xE1],0xFE     (0121)    Speed_PWM_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0828: 7F       RET                      (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: Speed_PWM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  Speed_PWM_Start:
                                        (0148) _Speed_PWM_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
0829: 43 23 01 OR    REG[0x23],0x1      (0150)    Speed_PWM_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
082C: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: Speed_PWM_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  Speed_PWM_Stop:
                                        (0176) _Speed_PWM_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
082D: 41 23 FE AND   REG[0x23],0xFE     (0178)    Speed_PWM_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0830: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: Speed_PWM_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  Speed_PWM_WritePeriod:
                                        (0206) _Speed_PWM_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0831: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[Speed_PWM_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0833: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: Speed_PWM_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  Speed_PWM_WritePulseWidth:
                                        (0233) _Speed_PWM_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0834: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[Speed_PWM_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0836: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: Speed_PWM_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  Speed_PWM_bReadPulseWidth:
                                        (0260) _Speed_PWM_bReadPulseWidth:
                                        (0261)  bSpeed_PWM_ReadPulseWidth:                      ; this name deprecated
                                        (0262) _bSpeed_PWM_ReadPulseWidth:                      ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0837: 5D 22    MOV   A,REG[0x22]        (0264)    mov   A, reg[Speed_PWM_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0839: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: Speed_PWM_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  Speed_PWM_bReadCounter:
                                        (0293) _Speed_PWM_bReadCounter:
                                        (0294)  bSpeed_PWM_ReadCounter:                         ; this name deprecated
                                        (0295) _bSpeed_PWM_ReadCounter:                         ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
083A: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
083B: 5D 22    MOV   A,REG[0x22]        (0304)    mov   A, reg[Speed_PWM_COMPARE_REG]           ; Save the Compare register on the stack
083D: 08       PUSH  A                  (0305)    push  A                                       ;
083E: 41 23 FE AND   REG[0x23],0xFE     (0306)    Speed_PWM_Stop_M                              ; Disable (stop) the PWM
0841: 71 10    OR    F,0x10             (0307)    M8C_SetBank1                                  ;
0843: 5D 21    MOV   A,REG[0x21]        (0308)    mov   A, reg[Speed_PWM_INPUT_REG]             ; save the clock input setting
0845: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0846: 62 21 00 MOV   REG[0x21],0x0      (0311)    mov   reg[Speed_PWM_INPUT_REG], INPUT_REG_NULL
0849: 70 EF    AND   F,0xEF             (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
084B: 5D 20    MOV   A,REG[0x20]        (0314)    mov   A, reg[Speed_PWM_COUNTER_REG]           ; DR2 <- DR0
084D: 5D 22    MOV   A,REG[0x22]        (0315)    mov   A, reg[Speed_PWM_COMPARE_REG]           ; Stash the Count on the stack
084F: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0850: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0852: 60 22    MOV   REG[0x22],A        (0318)    mov   reg[Speed_PWM_COMPARE_REG], A
0854: 71 10    OR    F,0x10             (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0856: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0858: 60 21    MOV   REG[0x21],A        (0321)    mov   reg[Speed_PWM_INPUT_REG], A             ;
085A: 70 EF    AND   F,0xEF             (0322)    M8C_SetBank0                                  ;
085C: 43 23 01 OR    REG[0x23],0x1      (0323)    Speed_PWM_Start_M                             ;   then re-enable the PWM.
085F: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0860: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0862: 70 3F    AND   F,0x3F             
0864: 71 C0    OR    F,0xC0             (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0866: 7F       RET                      (0327)    ret
(0328) 
(0329) .ENDSECTION
(0330) 
(0331) ; End of File Speed_PWM.asm
FILE: lib\onewireint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: OneWireINT.asm
                                        (0004) ;;   Version: 1.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: OneWire Interrupt Service Routine
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;   Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "OneWire.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _OneWire_ISR
                                        (0022) 
                                        (0023) AREA UserModules (ROM, REL)
                                        (0024) 
                                        (0025) ;-----------------------------------------------------------------------------
                                        (0026) ;  FUNCTION NAME: _OneWire_ISR
                                        (0027) ;
                                        (0028) ;  DESCRIPTION: With ParasitePower enabled this ISR sets TX pin to strong
                                        (0029) ;               drive mode immediately after transmission of last data bit.
                                        (0030) ;-----------------------------------------------------------------------------
                                        (0031) 
                                        (0032) _OneWire_ISR:
                                        (0033) IF (OneWire_PARASITE_ENABLE)
                                        (0034)     M8C_SetBank1
                                        (0035)     and   REG[OneWire_OUT_PORT_DM1],~OneWire_OUT_PORT_MASK
                                        (0036)     M8C_SetBank0
                                        (0037) ENDIF
0867: 7E       RETI                     (0038)    reti
(0039) 
(0040) ; end of file OneWireINT.asm
FILE: lib\onewire.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: OneWire.asm
                                        (0004) ;;   Version: 1.1, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: OneWire User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API function
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0014) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;   Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "OneWire.inc"
                                        (0025) 
                                        (0026) export  OneWire_Start
                                        (0027) export _OneWire_Start
                                        (0028) export  OneWire_Stop
                                        (0029) export _OneWire_Stop
                                        (0030) 
                                        (0031) export  OneWire_fReset
                                        (0032) export _OneWire_fReset
                                        (0033) export  OneWire_WriteBit
                                        (0034) export _OneWire_WriteBit
                                        (0035) export  OneWire_bReadBit
                                        (0036) export _OneWire_bReadBit
                                        (0037) export  OneWire_WriteByte
                                        (0038) export _OneWire_WriteByte
                                        (0039) export  OneWire_bReadByte
                                        (0040) export _OneWire_bReadByte
                                        (0041) export  OneWire_ClearCRC8
                                        (0042) export _OneWire_ClearCRC8
                                        (0043) export  OneWire_bCRC8
                                        (0044) export _OneWire_bCRC8
                                        (0045) 
                                        (0046) export  OneWire_bCRC8Value
                                        (0047) export _OneWire_bCRC8Value
                                        (0048) IF (OneWire_CRC16_ENABLE)
                                        (0049) export  OneWire_ClearCRC16
                                        (0050) export _OneWire_ClearCRC16
                                        (0051) export  OneWire_wCRC16
                                        (0052) export _OneWire_wCRC16
                                        (0053) export  OneWire_wCRC16Value
                                        (0054) export _OneWire_wCRC16Value
                                        (0055) ENDIF
                                        (0056) 
                                        (0057) IF (OneWire_SEARCH_ENABLE)
                                        (0058) export   OneWire_GetROM
                                        (0059) export  _OneWire_GetROM
                                        (0060) export   OneWire_SetROM
                                        (0061) export  _OneWire_SetROM
                                        (0062) export   OneWire_fFindFirst
                                        (0063) export  _OneWire_fFindFirst
                                        (0064) export   OneWire_fFindNext
                                        (0065) export  _OneWire_fFindNext
                                        (0066) export   OneWire_fVerify
                                        (0067) export  _OneWire_fVerify
                                        (0068) export   OneWire_FamilyTargetSetup
                                        (0069) export  _OneWire_FamilyTargetSetup
                                        (0070) export   OneWire_FamilySkipSetup
                                        (0071) export  _OneWire_FamilySkipSetup
                                        (0072) ENDIF
                                        (0073) 
                                        (0074) IF (OneWire_OVERDRIVE_ENABLE)
                                        (0075) export  OneWire_SetOverdrive
                                        (0076) export _OneWire_SetOverdrive
                                        (0077) export  OneWire_ClearOverdrive
                                        (0078) export _OneWire_ClearOverdrive
                                        (0079) ENDIF
                                        (0080) 
                                        (0081) IF (OneWire_PARASITE_ENABLE)
                                        (0082) export  OneWire_WriteByteStrong
                                        (0083) export _OneWire_WriteByteStrong
                                        (0084) export  OneWire_SetResistive
                                        (0085) export _OneWire_SetResistive
                                        (0086) ENDIF
                                        (0087) 
                                        (0088) AREA bss
                                        (0089) 
                                        (0090) _OneWire_bCRC8Value:
                                        (0091)  OneWire_bCRC8Value:                             blk   1
                                        (0092) 
                                        (0093) IF (OneWire_CRC16_ENABLE)
                                        (0094) _OneWire_wCRC16Value:
                                        (0095)  OneWire_wCRC16Value:                            blk   2
                                        (0096) ENDIF
                                        (0097) 
                                        (0098) IF (OneWire_SEARCH_ENABLE)
                                        (0099) OneWire_ROM:                                     blk   8
                                        (0100) OneWire_LastDiscrepancy:                         blk   1
                                        (0101) OneWire_LastFamilyDiscrepancy:                   blk   1
                                        (0102) OneWire_LastDeviceFlag:                          blk   1
                                        (0103) ENDIF
                                        (0104) 
                                        (0105) IF (OneWire_OVERDRIVE_ENABLE )
                                        (0106) OneWire_bMode:                                   blk   1
                                        (0107) ENDIF
                                        (0108) 
                                        (0109) AREA UserModules (ROM, REL)
                                        (0110) 
                                        (0111) RESET_PATTERN:                          equ   F1h
                                        (0112) ZERO_PATTERN:                           equ   01h
                                        (0113) ONE_PATTERN:                            equ   FDh
                                        (0114) INIT_PERIOD:                            equ   0Fh
                                        (0115) RESET_PERIOD:                           equ   F9h      ;Divide by 250 (249+1)
                                        (0116) BIT_PERIOD:                             equ   0Dh      ;Divide by 14 (13+1)
                                        (0117) OD_RESET_PERIOD:                        equ   19h      ;Divide by 26 (25+1)
                                        (0118) OD_BIT_PERIOD:                          equ   01h      ;Divide by 2 (1+1)
                                        (0119) 
                                        (0120) SPIM_SPI_COMPLETE:              equ 0x20    ;SPI Tx/Rx cycle has completed
                                        (0121) SPIM_MODE_0:                   equ 0x00    ; MODE 0 - Leading edge latches data - pos clock
                                        (0122) SPIM_LSB_FIRST:                equ 0x80    ; LSB bit transmitted/received first
                                        (0123) CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
                                        (0124) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0125) INPUT_REG_CLOCK_MASK:          equ 0x0F    ; Input register clock mask
                                        (0126) OD_MODE:                       equ 0x01    ;OverDrive
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: OneWire_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Enables the clock divider and tranceiver blocks.  Initializes the
                                        (0134) ;     OneWireOut pin to high.  Sets the clock divider period.
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  ARGUMENTS:
                                        (0137) ;     none.
                                        (0138) ;
                                        (0139) ;  RETURNS:
                                        (0140) ;     none.
                                        (0141) ;
                                        (0142) ;  SIDE EFFECTS:
                                        (0143) ;    The A and X registers may be modified by this or future implementations
                                        (0144) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0145) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0146) ;    responsibility to perserve their values across calls to fastcall16
                                        (0147) ;    functions.   Currently only the page pointer registers listed below are modified:
                                        (0148) ;       CUR_PP
                                        (0149) ;
                                        (0150) ;  THEORY of OPERATION:
                                        (0151) ;     Set the start bit in the Control register.
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153)  OneWire_Start:
                                        (0154) _OneWire_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0156) 
                                        (0157) IF (OneWire_OVERDRIVE_ENABLE)
                                        (0158)     RAM_SETPAGE_CUR >OneWire_bMode
                                        (0159)     mov   [OneWire_bMode], 00h
                                        (0160) ENDIF
0868: 62 55 0F MOV   REG[0x55],0xF      (0161)     mov   reg[OneWire_BITCLK_PERIOD_REG], INIT_PERIOD        ; Set divider period to initialize OneWireOut
086B: 43 57 01 OR    REG[0x57],0x1      (0162)     or    reg[OneWire_BITCLK_CONTROL_REG], CONTROL_REG_START_BIT  ; Start the clock divider
086E: 62 5B 81 MOV   REG[0x5B],0x81     (0163)     mov   reg[OneWire_XCVR_CONTROL_REG], SPIM_MODE_0|SPIM_LSB_FIRST|CONTROL_REG_START_BIT
0871: 50 FF    MOV   A,0xFF             (0164)     mov   A, FFh                                 ; Initialize OneWireOut to high
0873: 92 FB    CALL  0x0B70             (0165)     call  OneWire_SendTxDataWait
0875: 62 55 0D MOV   REG[0x55],0xD      (0166)     mov   reg[OneWire_BITCLK_PERIOD_REG], BIT_PERIOD
                                        (0167) 
                                        (0168)     RAM_EPILOGUE RAM_USE_CLASS_4
0878: 7F       RET                      (0169)     ret
                                        (0170) .ENDSECTION
                                        (0171) 
                                        (0172) .SECTION
                                        (0173) ;-----------------------------------------------------------------------------
                                        (0174) ;  FUNCTION NAME: OneWire_Stop
                                        (0175) ;
                                        (0176) ;  DESCRIPTION:
                                        (0177) ;     Disables BitClk and XCVR operation.
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  ARGUMENTS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  RETURNS:
                                        (0183) ;     none.
                                        (0184) ;
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    The A and X registers may be modified by this or future implementations
                                        (0187) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0188) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0189) ;    responsibility to preserve their values across calls to fastcall16
                                        (0190) ;    functions.
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION:
                                        (0193) ;     Clear the start bits in the Control registers.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195)  OneWire_Stop:
                                        (0196) _OneWire_Stop:
                                        (0197)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0198) 
0879: 41 57 FE AND   REG[0x57],0xFE     (0199)     and   reg[OneWire_BITCLK_CONTROL_REG], ~CONTROL_REG_START_BIT
087C: 41 5B FE AND   REG[0x5B],0xFE     (0200)     and   reg[OneWire_XCVR_CONTROL_REG], ~CONTROL_REG_START_BIT
                                        (0201) 
                                        (0202)     RAM_EPILOGUE RAM_USE_CLASS_1
087F: 7F       RET                      (0203)     ret
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) .SECTION
                                        (0207) ;-----------------------------------------------------------------------------
                                        (0208) ;  FUNCTION NAME: OneWire_fReset
                                        (0209) ;
                                        (0210) ;  DESCRIPTION:
                                        (0211) ;     Reset the OneWireOut pin
                                        (0212) ;-----------------------------------------------------------------------------
                                        (0213) ;
                                        (0214) ;  ARGUMENTS:
                                        (0215) ;     none.
                                        (0216) ;
                                        (0217) ;  RETURNS:
                                        (0218) ;     A = 01h if one or more devices responded.
                                        (0219) ;
                                        (0220) ;  SIDE EFFECTS:
                                        (0221) ;    The A and X registers may be modified by this or future implementations
                                        (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0224) ;    responsibility to preserve their values across calls to fastcall16
                                        (0225) ;    functions. Currently only the page pointer registers listed below
                                        (0226) ;    are modified: CUR_PP
                                        (0227) ;
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229)  OneWire_fReset:
                                        (0230) _OneWire_fReset:
                                        (0231)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0232) 
                                        (0233) IF (OneWire_OVERDRIVE_ENABLE)
                                        (0234)     RAM_SETPAGE_CUR >OneWire_bMode
                                        (0235) ENDIF
0880: 50 F9    MOV   A,0xF9             (0236)     mov   A, RESET_PERIOD                        ; Reset period
                                        (0237) IF (OneWire_OVERDRIVE_ENABLE)
                                        (0238)     tst   [OneWire_bMode],OD_MODE                ; Test for OverDrive mode
                                        (0239)     jz    .Reset_Normal
                                        (0240)     mov   reg[OneWire_BITCLK_PERIOD_REG], OD_RESET_PERIOD  ; OverDrive Reset period
                                        (0241)     mov   A, RESET_PATTERN                       ; Reset bit pattern
                                        (0242)     call  OneWire_SendTxDataWait
                                        (0243)     mov   A, OD_BIT_PERIOD                       ; OverDrive Bit period
                                        (0244)     jmp   .Reset_WriteBitPeriod
                                        (0245) ENDIF
                                        (0246) .Reset_Normal:
0882: 60 55    MOV   REG[0x55],A        (0247)     mov   reg[OneWire_BITCLK_PERIOD_REG], A
0884: 50 F1    MOV   A,0xF1             (0248)     mov   A, RESET_PATTERN                       ; Reset bit pattern
0886: 92 E8    CALL  0x0B70             (0249)     call  OneWire_SendTxDataWait
0888: 50 0D    MOV   A,0xD              (0250)     mov   A, BIT_PERIOD                          ; Bit period
                                        (0251) .Reset_WriteBitPeriod:
088A: 60 55    MOV   REG[0x55],A        (0252)     mov   reg[OneWire_BITCLK_PERIOD_REG], A
088C: 5D 5A    MOV   A,REG[0x5A]        (0253)     mov   A, reg[OneWire_XCVR_RX_BUFFER_REG]
088E: 39 F1    CMP   A,0xF1             (0254)     cmp   A, RESET_PATTERN
0890: D0 05    JNC   0x0896             (0255)     jnc   .Reset_NoResponse
0892: 50 01    MOV   A,0x1              (0256)     mov   A,01h
0894: 80 03    JMP   0x0898             (0257)     jmp   .Reset_done
                                        (0258) .Reset_NoResponse:
0896: 50 00    MOV   A,0x0              (0259)     mov   A,00h
                                        (0260) .Reset_done:
                                        (0261) 
                                        (0262)     RAM_EPILOGUE RAM_USE_CLASS_4
0898: 7F       RET                      (0263)     ret
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) .SECTION
                                        (0267) ;-----------------------------------------------------------------------------
                                        (0268) ;  FUNCTION NAME: OneWire_WriteBit
                                        (0269) ;
                                        (0270) ;  DESCRIPTION:
                                        (0271) ;     Write a bit to the OneWireOut pin.
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  ARGUMENTS:
                                        (0274) ;     A  => less significant bit is output to OneWireOut pin
                                        (0275) ;
                                        (0276) ;  RETURNS:
                                        (0277) ;     none.
                                        (0278) ;
                                        (0279) ;  SIDE EFFECTS:
                                        (0280) ;    The A and X registers may be modified by this or future implementations
                                        (0281) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0282) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0283) ;    responsibility to preserve their values across calls to fastcall16
                                        (0284) ;    functions.
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287)  OneWire_WriteBit:
                                        (0288) _OneWire_WriteBit:
                                        (0289)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0290) 
0899: 6D       RRC   A                  (0291)     rrc   A                                      ; Rotate LSB into CF to test
089A: C0 05    JC    0x08A0             (0292)     jc    .WriteBit_1                            ; LSB is 1
089C: 50 01    MOV   A,0x1              (0293)     mov   A, ZERO_PATTERN                        ; "0" bit pattern
089E: 80 03    JMP   0x08A2             (0294)     jmp   .WriteBit_Send
                                        (0295) .WriteBit_1:
08A0: 50 FD    MOV   A,0xFD             (0296)     mov   A, ONE_PATTERN                         ; "1" bit pattern
                                        (0297) .WriteBit_Send:
08A2: 92 CC    CALL  0x0B70             (0298)     call  OneWire_SendTxDataWait
                                        (0299) 
                                        (0300)     RAM_EPILOGUE RAM_USE_CLASS_1
08A4: 7F       RET                      (0301)     ret
                                        (0302) .ENDSECTION
                                        (0303) 
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: OneWire_bReadBit
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Read the OneWireIn pin
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ;
                                        (0313) ;  ARGUMENTS:
                                        (0314) ;     none.
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     the less significant bit of A returns value read from OneWire pin.
                                        (0318) ;
                                        (0319) ;  SIDE EFFECTS:
                                        (0320) ;    The A and X registers may be modified by this or future implementations
                                        (0321) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0322) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0323) ;    responsibility to preserve their values across calls to fastcall16
                                        (0324) ;    functions.
                                        (0325) ;
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327)  OneWire_bReadBit:
                                        (0328) _OneWire_bReadBit:
                                        (0329)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0330) 
08A5: 50 FD    MOV   A,0xFD             (0331)     mov    A, ONE_PATTERN
08A7: 92 C7    CALL  0x0B70             (0332)     call   OneWire_SendTxDataWait
08A9: 5D 5A    MOV   A,REG[0x5A]        (0333)     mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
08AB: 39 FD    CMP   A,0xFD             (0334)     cmp    A, ONE_PATTERN
08AD: D0 05    JNC   0x08B3             (0335)     jnc    .ReadBit_One
08AF: 50 00    MOV   A,0x0              (0336)     mov    A, 00h
08B1: 80 03    JMP   0x08B5             (0337)     jmp    .Done
                                        (0338) .ReadBit_One:
08B3: 50 01    MOV   A,0x1              (0339)     mov    A, 01h
                                        (0340) .Done:
                                        (0341) 
                                        (0342)     RAM_EPILOGUE RAM_USE_CLASS_1
08B5: 7F       RET                      (0343)     ret
                                        (0344) .ENDSECTION
                                        (0345) 
                                        (0346) .SECTION
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;  FUNCTION NAME: OneWire_WriteByte
                                        (0349) ;
                                        (0350) ;  DESCRIPTION:
                                        (0351) ;     Write a byte to the OneWireOut pin
                                        (0352) ;-----------------------------------------------------------------------------
                                        (0353) ;
                                        (0354) ;  ARGUMENTS:
                                        (0355) ;     A => byte output to the OneWireOut pin
                                        (0356) ;
                                        (0357) ;  RETURNS:
                                        (0358) ;     none.
                                        (0359) ;
                                        (0360) ;  SIDE EFFECTS:
                                        (0361) ;    The A and X registers may be modified by this or future implementations
                                        (0362) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0363) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0364) ;    responsibility to preserve their values across calls to fastcall16
                                        (0365) ;    functions.
                                        (0366) ;
                                        (0367) ;-----------------------------------------------------------------------------
                                        (0368)  OneWire_WriteByte:
                                        (0369) _OneWire_WriteByte:
                                        (0370)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0371) 
08B6: 08       PUSH  A                  (0372)     push   A
08B7: 57 08    MOV   X,0x8              (0373)     mov    X, 08h
                                        (0374) .ByteLoop:
08B9: 18       POP   A                  (0375)     pop    A
08BA: 6D       RRC   A                  (0376)     rrc    A
08BB: 08       PUSH  A                  (0377)     push   A
08BC: C0 05    JC    0x08C2             (0378)     jc     .LoadPattern_1
08BE: 50 01    MOV   A,0x1              (0379)     mov    A, ZERO_PATTERN
08C0: 80 03    JMP   0x08C4             (0380)     jmp    .SendPattern
                                        (0381) .LoadPattern_1:
08C2: 50 FD    MOV   A,0xFD             (0382)     mov    A, ONE_PATTERN
                                        (0383) .SendPattern:
08C4: 60 59    MOV   REG[0x59],A        (0384) 	mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
                                        (0385) .WaitForEmptyBuf:
08C6: 5D 5B    MOV   A,REG[0x5B]        (0386)     mov    A, reg[OneWire_XCVR_CONTROL_REG]
08C8: 21 20    AND   A,0x20             (0387)     and    A, SPIM_SPI_COMPLETE
08CA: AF FB    JZ    0x08C6             (0388)     jz     .WaitForEmptyBuf
08CC: 79       DEC   X                  (0389)     dec    X
08CD: BF EB    JNZ   0x08B9             (0390)     jnz    .ByteLoop
08CF: 18       POP   A                  (0391)     pop    A
                                        (0392) 
                                        (0393)     RAM_EPILOGUE RAM_USE_CLASS_1
08D0: 7F       RET                      (0394)     ret
                                        (0395) .ENDSECTION
                                        (0396) 
                                        (0397) .SECTION
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;  FUNCTION NAME: OneWire_bReadByte
                                        (0400) ;
                                        (0401) ;  DESCRIPTION:
                                        (0402) ;     Read a byte from the OneWireIn pin
                                        (0403) ;-----------------------------------------------------------------------------
                                        (0404) ;
                                        (0405) ;  ARGUMENTS:
                                        (0406) ;     none.
                                        (0407) ;
                                        (0408) ;  RETURNS:
                                        (0409) ;     A returns byte read from OneWireIn pin.
                                        (0410) ;
                                        (0411) ;  SIDE EFFECTS:
                                        (0412) ;    The A and X registers may be modified by this or future implementations
                                        (0413) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0414) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0415) ;    responsibility to perserve their values across calls to fastcall16
                                        (0416) ;    functions.
                                        (0417) ;
                                        (0418) ;-----------------------------------------------------------------------------
                                        (0419)  OneWire_bReadByte:
                                        (0420) _OneWire_bReadByte:
                                        (0421)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0422) 
08D1: 08       PUSH  A                  (0423)     push   A
08D2: 57 08    MOV   X,0x8              (0424)     mov    X,08h
                                        (0425) .ByteLoop:
08D4: 50 FD    MOV   A,0xFD             (0426)     mov    A, ONE_PATTERN
08D6: 92 98    CALL  0x0B70             (0427)     call   OneWire_SendTxDataWait
08D8: 5D 5A    MOV   A,REG[0x5A]        (0428)     mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
08DA: 39 FD    CMP   A,0xFD             (0429)     cmp    A, ONE_PATTERN
08DC: 18       POP   A                  (0430)     pop    A
08DD: 6D       RRC   A                  (0431)     rrc    A
08DE: 08       PUSH  A                  (0432)     push   A
08DF: 79       DEC   X                  (0433)     dec    X
08E0: BF F3    JNZ   0x08D4             (0434)     jnz    .ByteLoop
08E2: 18       POP   A                  (0435)     pop    A
08E3: 73       CPL   A                  (0436) 	cpl    A
                                        (0437)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0438) 
08E4: 7F       RET                      (0439)     ret
                                        (0440) .ENDSECTION
                                        (0441) 
                                        (0442) .SECTION
                                        (0443) ;-----------------------------------------------------------------------------
                                        (0444) ;  FUNCTION NAME: OneWire_ClearCRC8
                                        (0445) ;
                                        (0446) ;  DESCRIPTION:
                                        (0447) ;     Clear the CRC8 RAM location
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) ;
                                        (0450) ;  ARGUMENTS:
                                        (0451) ;     none.
                                        (0452) ;
                                        (0453) ;  RETURNS:
                                        (0454) ;     none.
                                        (0455) ;
                                        (0456) ;  SIDE EFFECTS:
                                        (0457) ;    The A and X registers may be modified by this or future implementations
                                        (0458) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0459) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0460) ;    responsibility to preserve their values across calls to fastcall16
                                        (0461) ;    functions.   Currently only the page pointer registers listed below are modified:
                                        (0462) ;    CUR_PP
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465)  OneWire_ClearCRC8:
                                        (0466) _OneWire_ClearCRC8:
                                        (0467)     RAM_PROLOGUE RAM_USE_CLASS_4
08E5: 62 D0 00 MOV   REG[0xD0],0x0      (0468)     RAM_SETPAGE_CUR >OneWire_bCRC8Value
                                        (0469) 
08E8: 55 3B 00 MOV   [OneWire_bCRC8Value],0x0(0470)     mov   [OneWire_bCRC8Value], 00h
                                        (0471) 
                                        (0472)     RAM_EPILOGUE RAM_USE_CLASS_4
08EB: 7F       RET                      (0473)     ret
                                        (0474) .ENDSECTION
                                        (0475) 
                                        (0476) .SECTION
                                        (0477) ;-----------------------------------------------------------------------------
                                        (0478) ;  FUNCTION NAME: OneWire_bCRC8
                                        (0479) ;
                                        (0480) ;  DESCRIPTION:
                                        (0481) ;     CRC for One Wire
                                        (0482) ;-----------------------------------------------------------------------------
                                        (0483) ;
                                        (0484) ;  ARGUMENTS:
                                        (0485) ;     A contains the byte to CRC.
                                        (0486) ;
                                        (0487) ;  RETURNS:
                                        (0488) ;     A contains current CRC value.
                                        (0489) ;
                                        (0490) ;  SIDE EFFECTS:
                                        (0491) ;    The A and X registers may be modified by this or future implementations
                                        (0492) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0493) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0494) ;    responsibility to preserve their values across calls to fastcall16
                                        (0495) ;    functions. Currently only the page pointer registers listed below are modified:
                                        (0496) ;     CUR_PP
                                        (0497) ;-----------------------------------------------------------------------------
                                        (0498)  OneWire_bCRC8:
                                        (0499) _OneWire_bCRC8:
                                        (0500)     RAM_PROLOGUE RAM_USE_CLASS_4
08EC: 62 D0 00 MOV   REG[0xD0],0x0      (0501)     RAM_SETPAGE_CUR >OneWire_bCRC8Value
                                        (0502) 
08EF: 08       PUSH  A                  (0503)     push  A                                      ; Save the bits to shift
08F0: 57 08    MOV   X,0x8              (0504)     mov   X, 08h                                 ; Set up to shift one byte
                                        (0505) .OW_crc8_loop:
08F2: 32 3B    XOR   A,[OneWire_bCRC8Value](0506)     xor   A, [OneWire_bCRC8Value]                ; Determine feedback
08F4: 6D       RRC   A                  (0507)     rrc   A                                      ; Move it into CF
08F5: D0 04    JNC   0x08FA             (0508)     jnc   .OW_crc8_FB_zero                       ; If feedback is 0, no XOR of the byte needed
08F7: 36 3B 18 XOR   [OneWire_bCRC8Value],0x18(0509)     xor   [OneWire_bCRC8Value],18h               ; XOR the CRC byte
                                        (0510) .OW_crc8_FB_zero:
08FA: 6E 3B    RRC   [OneWire_bCRC8Value](0511)     rrc   [OneWire_bCRC8Value]                   ; Rotate CF into the CRC byte
08FC: 18       POP   A                  (0512)     pop   A                                      ; Restore the remaining bits
08FD: 6D       RRC   A                  (0513)     rrc   A                                      ; Rotate for the next bit
08FE: 08       PUSH  A                  (0514)     push  A                                      ; Save the remaining bits
08FF: 79       DEC   X                  (0515)     dec   X                                      
0900: BF F1    JNZ   0x08F2             (0516)     jnz   .OW_crc8_loop                          ; Loop until whole input byte is shifted
0902: 18       POP   A                  (0517)     pop   A                                      ; Clean up stack
0903: 51 3B    MOV   A,[OneWire_bCRC8Value](0518)     mov   A, [OneWire_bCRC8Value]                ; Load computed CRC byte into A
                                        (0519) 
                                        (0520)     RAM_EPILOGUE RAM_USE_CLASS_4
0905: 7F       RET                      (0521)     ret
                                        (0522) .ENDSECTION
                                        (0523) 
                                        (0524) IF (OneWire_CRC16_ENABLE)
                                        (0525) .SECTION
                                        (0526) ;-----------------------------------------------------------------------------
                                        (0527) ;  FUNCTION NAME: OneWire_ClearCRC16
                                        (0528) ;
                                        (0529) ;  DESCRIPTION:
                                        (0530) ;     Clear the CRC16 RAM locations
                                        (0531) ;-----------------------------------------------------------------------------
                                        (0532) ;  ARGUMENTS:
                                        (0533) ;     none.
                                        (0534) ;
                                        (0535) ;  RETURNS:
                                        (0536) ;     none.
                                        (0537) ;
                                        (0538) ;  SIDE EFFECTS:
                                        (0539) ;    The A and X registers may be modified by this or future implementations
                                        (0540) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0541) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0542) ;    responsibility to preserve their values across calls to fastcall16
                                        (0543) ;    functions. Currently only the page pointer registers listed below are modified:
                                        (0544) ;     CUR_PP
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547)  OneWire_ClearCRC16:
                                        (0548) _OneWire_ClearCRC16:
                                        (0549)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0550)     RAM_SETPAGE_CUR >OneWire_wCRC16Value
                                        (0551) 
                                        (0552)     mov   [OneWire_wCRC16Value+0],00h
                                        (0553)     mov   [OneWire_wCRC16Value+1],00h
                                        (0554) 
                                        (0555)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0556)     ret
                                        (0557) .ENDSECTION
                                        (0558) 
                                        (0559) .SECTION
                                        (0560) ;-----------------------------------------------------------------------------
                                        (0561) ;  FUNCTION NAME: OneWire_wCRC16
                                        (0562) ;
                                        (0563) ;  DESCRIPTION:
                                        (0564) ;     CRC-16 for One Wire
                                        (0565) ;-----------------------------------------------------------------------------
                                        (0566) ;  ARGUMENTS:
                                        (0567) ;     A contains the byte to CRC.
                                        (0568) ;
                                        (0569) ;  RETURNS:
                                        (0570) ;     A contains current CRC LO byte value.
                                        (0571) ;     X contains current CRC HI byte value.
                                        (0572) ;     This returns as an unsigned integer in C.
                                        (0573) ;
                                        (0574) ;  SIDE EFFECTS:
                                        (0575) ;    The A and X registers may be modified by this or future implementations
                                        (0576) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0577) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0578) ;    responsibility to preserve their values across calls to fastcall16
                                        (0579) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0580) ;     CUR_PP
                                        (0581) ;
                                        (0582) ;-----------------------------------------------------------------------------
                                        (0583)  OneWire_wCRC16:
                                        (0584) _OneWire_wCRC16:
                                        (0585)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0586)     RAM_SETPAGE_CUR >OneWire_wCRC16Value
                                        (0587) 
                                        (0588)     push  A                                      ; Save the bits to shift
                                        (0589)     mov   X,08h                                  ; Set up to shift one byte
                                        (0590) .CRC16_loop:
                                        (0591)     xor   A,[OneWire_wCRC16Value+1]              ; Determine feedback
                                        (0592)     rrc   A                                      ; Move it into CF
                                        (0593)     jnc   .CRC16_FB_zero                         ; If feedback is 0, no XOR of the byte needed
                                        (0594)     xor   [OneWire_wCRC16Value+0],40h            ; XOR the CRC HI byte
                                        (0595)     xor   [OneWire_wCRC16Value+1],02h            ; XOR the CRC LO byte
                                        (0596) .CRC16_FB_zero:
                                        (0597)     rrc   [OneWire_wCRC16Value+0]                ; Rotate CF into the CRC HI byte
                                        (0598)     rrc   [OneWire_wCRC16Value+1]                ; Rotate CF into the CRC LO byte
                                        (0599)     pop   A                                      ; Restore the remaining bits
                                        (0600)     rrc   A                                      ; Rotate for the next bit
                                        (0601)     push  A                                      ; Save the remaining bits
                                        (0602)     dec   X
                                        (0603)     jnz   .CRC16_loop                            ; Loop until whole input byte is shifted
                                        (0604)     pop   A                                      ; Clean up stack
                                        (0605)     mov   X,[OneWire_wCRC16Value+0]              ; Load computed CRC HI byte into X
                                        (0606)     mov   A,[OneWire_wCRC16Value+1]              ; Load computed CRC LO byte into A
                                        (0607) 
                                        (0608)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0609)     ret
                                        (0610) .ENDSECTION
                                        (0611) ENDIF
                                        (0612) 
                                        (0613) IF (OneWire_SEARCH_ENABLE)
                                        (0614) .SECTION
                                        (0615) ;-----------------------------------------------------------------------------
                                        (0616) ;  FUNCTION NAME: OneWire_GetROM
                                        (0617) ;
                                        (0618) ;  DESCRIPTION:
                                        (0619) ;     Takes the RAM defined for holding a 64-bit 1-Wire ROM number and
                                        (0620) ;     passes it via a pointer in A and X.
                                        (0621) ;-----------------------------------------------------------------------------
                                        (0622) ;
                                        (0623) ;  ARGUMENTS:
                                        (0624) ;     A:X - contains pointer
                                        (0625) ;       X - contains LSB of the pointer to the RAM buffer
                                        (0626) ;       A - contains MSB or page of the pointer to the RAM buffer
                                        (0627) ;
                                        (0628) ;  RAM BUFFER CONTENTS:
                                        (0629) ;     OneWire_ROM = ROM number of 1-Wire device
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16
                                        (0639) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0640) ;     CUR_PP
                                        (0641) ;     IDX_PP
                                        (0642) ;-----------------------------------------------------------------------------
                                        (0643)  OneWire_GetROM:
                                        (0644) _OneWire_GetROM:
                                        (0645)     RAM_PROLOGUE RAM_USE_CLASS_4
0906: 70 BF    AND   F,0xBF             (0646)     RAM_PROLOGUE RAM_USE_CLASS_3
0908: 60 D3    MOV   REG[0xD3],A        (0647)     RAM_SETPAGE_IDX A
090A: 62 D0 00 MOV   REG[0xD0],0x0      (0648)     RAM_SETPAGE_CUR >OneWire_ROM
                                        (0649) 
090D: 51 3C    MOV   A,[OneWire_bCRC8Value+1](0650)     mov    A,[OneWire_ROM+0]
090F: 54 00    MOV   [X+0],A            (0651)     mov    [X+0],A
0911: 51 3D    MOV   A,[OneWire_bCRC8Value+2](0652)     mov    A,[OneWire_ROM+1]
0913: 54 01    MOV   [X+1],A            (0653)     mov    [X+1],A
0915: 51 3E    MOV   A,[OneWire_bCRC8Value+3](0654)     mov    A,[OneWire_ROM+2]
0917: 54 02    MOV   [X+2],A            (0655)     mov    [X+2],A
0919: 51 3F    MOV   A,[OneWire_bCRC8Value+4](0656)     mov    A,[OneWire_ROM+3]
091B: 54 03    MOV   [X+3],A            (0657)     mov    [X+3],A
091D: 51 40    MOV   A,[OneWire_bCRC8Value+5](0658)     mov    A,[OneWire_ROM+4]
091F: 54 04    MOV   [X+4],A            (0659)     mov    [X+4],A
0921: 51 41    MOV   A,[OneWire_bCRC8Value+6](0660)     mov    A,[OneWire_ROM+5]
0923: 54 05    MOV   [X+5],A            (0661)     mov    [X+5],A
0925: 51 42    MOV   A,[OneWire_bCRC8Value+7](0662)     mov    A,[OneWire_ROM+6]
0927: 54 06    MOV   [X+6],A            (0663)     mov    [X+6],A
0929: 51 43    MOV   A,[OneWire_bCRC8Value+8](0664)     mov    A,[OneWire_ROM+7]
092B: 54 07    MOV   [X+7],A            (0665)     mov    [X+7],A
                                        (0666) 
092D: 70 3F    AND   F,0x3F             
092F: 71 C0    OR    F,0xC0             (0667)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0668)     RAM_EPILOGUE RAM_USE_CLASS_4
0931: 7F       RET                      (0669)     ret
                                        (0670) .ENDSECTION
                                        (0671) 
                                        (0672) 
                                        (0673) .SECTION
                                        (0674) ;-----------------------------------------------------------------------------
                                        (0675) ;  FUNCTION NAME: OneWire_SetROM
                                        (0676) ;
                                        (0677) ;  DESCRIPTION:
                                        (0678) ;     Takes the array passed via a pointer in A and X and puts it
                                        (0679) ;     into the RAM defined for holding a 64-bit 1-Wire ROM number.
                                        (0680) ;-----------------------------------------------------------------------------
                                        (0681) ;  ARGUMENTS:
                                        (0682) ;     A:X - contains pointer
                                        (0683) ;       X - contains LSB of the pointer to the RAM buffer
                                        (0684) ;       A - contains MSB or page of the pointer to the RAM buffer
                                        (0685) ;
                                        (0686) ;  RAM BUFFER CONTENTS:
                                        (0687) ;     OneWire_ROM = ROM number of 1-Wire device
                                        (0688) ;
                                        (0689) ;  RETURNS:
                                        (0690) ;     none.
                                        (0691) ;
                                        (0692) ;  SIDE EFFECTS:
                                        (0693) ;    The A and X registers may be modified by this or future implementations
                                        (0694) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0695) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0696) ;    responsibility to preserve their values across calls to fastcall16
                                        (0697) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0698) ;     CUR_PP
                                        (0699) ;     IDX_PP
                                        (0700) ;-----------------------------------------------------------------------------
                                        (0701)  OneWire_SetROM:
                                        (0702) _OneWire_SetROM:
                                        (0703)     RAM_PROLOGUE RAM_USE_CLASS_4
0932: 70 BF    AND   F,0xBF             (0704)     RAM_PROLOGUE RAM_USE_CLASS_3
0934: 60 D3    MOV   REG[0xD3],A        (0705)     RAM_SETPAGE_IDX A
0936: 62 D0 00 MOV   REG[0xD0],0x0      (0706)     RAM_SETPAGE_CUR >OneWire_ROM
                                        (0707) 
0939: 52 00    MOV   A,[X+0]            (0708)     mov    A,[X+0]
093B: 53 3C    MOV   [OneWire_bCRC8Value+1],A(0709)     mov    [OneWire_ROM+0], A
093D: 52 01    MOV   A,[X+1]            (0710)     mov    A,[X+1]
093F: 53 3D    MOV   [OneWire_bCRC8Value+2],A(0711)     mov    [OneWire_ROM+1], A
0941: 52 02    MOV   A,[X+2]            (0712)     mov    A,[X+2]
0943: 53 3E    MOV   [OneWire_bCRC8Value+3],A(0713)     mov    [OneWire_ROM+2], A
0945: 52 03    MOV   A,[X+3]            (0714)     mov    A,[X+3]
0947: 53 3F    MOV   [OneWire_bCRC8Value+4],A(0715)     mov    [OneWire_ROM+3], A
0949: 52 04    MOV   A,[X+4]            (0716)     mov    A,[X+4]
094B: 53 40    MOV   [OneWire_bCRC8Value+5],A(0717)     mov    [OneWire_ROM+4], A
094D: 52 05    MOV   A,[X+5]            (0718)     mov    A,[X+5]
094F: 53 41    MOV   [OneWire_bCRC8Value+6],A(0719)     mov    [OneWire_ROM+5], A
0951: 52 06    MOV   A,[X+6]            (0720)     mov    A,[X+6]
0953: 53 42    MOV   [OneWire_bCRC8Value+7],A(0721)     mov    [OneWire_ROM+6], A
0955: 52 07    MOV   A,[X+7]            (0722)     mov    A,[X+7]
0957: 53 43    MOV   [OneWire_bCRC8Value+8],A(0723)     mov    [OneWire_ROM+7], A
                                        (0724) 
0959: 70 3F    AND   F,0x3F             
095B: 71 C0    OR    F,0xC0             (0725)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0726)     RAM_EPILOGUE RAM_USE_CLASS_4
095D: 7F       RET                      (0727)     ret
                                        (0728) .ENDSECTION
                                        (0729) 
                                        (0730) .SECTION
                                        (0731) ;-----------------------------------------------------------------------------
                                        (0732) ;  FUNCTION NAME: OneWire_fFindFirst
                                        (0733) ;
                                        (0734) ;  DESCRIPTION:
                                        (0735) ;     Find the first device on the 1-Wire bus.
                                        (0736) ;-----------------------------------------------------------------------------
                                        (0737) ;  ARGUMENTS:
                                        (0738) ;     none.
                                        (0739) ;
                                        (0740) ;  RAM BUFFER CONTENTS:
                                        (0741) ;     OneWire_ROM = ROM number of 1-Wire device
                                        (0742) ;
                                        (0743) ;  RETURNS:
                                        (0744) ;     A = 01h if device found
                                        (0745) ;     A = 00h if device not found
                                        (0746) ;
                                        (0747) ;  SIDE EFFECTS:
                                        (0748) ;    The A and X registers may be modified by this or future implementations
                                        (0749) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0750) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0751) ;    responsibility to preserve their values across calls to fastcall16
                                        (0752) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0753) ;    CUR_PP
                                        (0754) ;    IDX_PP
                                        (0755) ;-----------------------------------------------------------------------------
                                        (0756)  OneWire_fFindFirst:
                                        (0757) _OneWire_fFindFirst:
                                        (0758)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0759) 
095E: 62 D0 00 MOV   REG[0xD0],0x0      (0760)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
0961: 55 44 00 MOV   [OneWire_bCRC8Value+9],0x0(0761)     mov   [OneWire_LastDiscrepancy], 00h
0964: 62 D0 00 MOV   REG[0xD0],0x0      (0762)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0967: 55 46 00 MOV   [OneWire_bCRC8Value+11],0x0(0763)     mov   [OneWire_LastDeviceFlag], 00h
096A: 62 D0 00 MOV   REG[0xD0],0x0      (0764)     RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
096D: 55 45 00 MOV   [OneWire_bCRC8Value+10],0x0(0765)     mov   [OneWire_LastFamilyDiscrepancy], 00h
0970: 90 04    CALL  0x0976             (0766)     call  OneWire_Search
                                        (0767) 
                                        (0768)     RAM_EPILOGUE RAM_USE_CLASS_4
0972: 7F       RET                      (0769)     ret
                                        (0770) .ENDSECTION
                                        (0771) 
                                        (0772) .SECTION
                                        (0773) ;-----------------------------------------------------------------------------
                                        (0774) ;  FUNCTION NAME: OneWire_fFindNext
                                        (0775) ;
                                        (0776) ;  DESCRIPTION:
                                        (0777) ;     Find the first device on the 1-Wire bus.
                                        (0778) ;-----------------------------------------------------------------------------
                                        (0779) ;
                                        (0780) ;  ARGUMENTS:
                                        (0781) ;     none.
                                        (0782) ;
                                        (0783) ;  RAM BUFFER CONTENTS:
                                        (0784) ;     OneWire_ROM = ROM number of 1-Wire device
                                        (0785) ;
                                        (0786) ;  RETURNS:
                                        (0787) ;     A = 01h if device found
                                        (0788) ;     A = 00h if device not found, end of search
                                        (0789) ;
                                        (0790) ;  SIDE EFFECTS:
                                        (0791) ;    The A and X registers may be modified by this or future implementations
                                        (0792) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0793) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0794) ;    responsibility to preserve their values across calls to fastcall16
                                        (0795) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0796) ;    CUR_PP
                                        (0797) ;    IDX_PP
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799)  OneWire_fFindNext:
                                        (0800) _OneWire_fFindNext:
                                        (0801)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0802) 
0973: 90 01    CALL  0x0976             (0803)     call  OneWire_Search
                                        (0804) 
                                        (0805)     RAM_EPILOGUE RAM_USE_CLASS_4
0975: 7F       RET                      (0806)     ret
                                        (0807) .ENDSECTION
                                        (0808) 
                                        (0809) .SECTION
                                        (0810) ;-----------------------------------------------------------------------------
                                        (0811) ;  FUNCTION NAME: OneWire_Search
                                        (0812) ;
                                        (0813) ;  DESCRIPTION:
                                        (0814) ;     Perform the 1-Wire search algorithm with the current search state.
                                        (0815) ;-----------------------------------------------------------------------------
                                        (0816) ;  ARGUMENTS:
                                        (0817) ;     none.
                                        (0818) ;
                                        (0819) ;  RAM BUFFER CONTENTS:
                                        (0820) ;     OneWire_ROM = ROM number of 1-Wire device
                                        (0821) ;
                                        (0822) ;  RETURNS:
                                        (0823) ;     A = 01h if device found
                                        (0824) ;     A = 00h if device not found, end of search
                                        (0825) ;
                                        (0826) ;  SIDE EFFECTS:
                                        (0827) ;    The A and X registers may be modified by this or future implementations
                                        (0828) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0829) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0830) ;    responsibility to perserve their values across calls to fastcall16
                                        (0831) ;    functions. Currently only the page pointer registers listed below are modified:
                                        (0832) ;    CUR_PP
                                        (0833) ;    IDX_PP
                                        (0834) ;-----------------------------------------------------------------------------
                                        (0835) ID_BIT_NUMBER:              equ   0
                                        (0836) LAST_ZERO:                  equ   1
                                        (0837) ROM_BYTE_NUMBER:            equ   2
                                        (0838) SEARCH_RESULT:              equ   3
                                        (0839) ID_BIT:                     equ   4
                                        (0840) CMP_ID_BIT:                 equ   5
                                        (0841) ROM_BYTE_MASK:              equ   6
                                        (0842) SEARCH_DIRECTION:           equ   7
                                        (0843) 
                                        (0844)  OneWire_Search:
                                        (0845) _OneWire_Search:
                                        (0846)     RAM_PROLOGUE RAM_USE_CLASS_4
0976: 70 BF    AND   F,0xBF             (0847)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0848) 
0978: 4F       MOV   X,SP               (0849)     mov   X,SP                                   ; Get location of stack
0979: 38 08    ADD   SP,0x8             (0850)     add   SP,08h                                 ; Make locations for local variables
097B: 62 D3 07 MOV   REG[0xD3],0x7      (0851)     RAM_SETPAGE_IDX2STK
097E: 56 00 01 MOV   [X+0],0x1          (0852)     mov   [X+ID_BIT_NUMBER],01h                  ; Initialize for search
0981: 56 01 00 MOV   [X+1],0x0          (0853)     mov   [X+LAST_ZERO],00h
0984: 56 02 00 MOV   [X+2],0x0          (0854)     mov   [X+ROM_BYTE_NUMBER],00h
0987: 56 06 01 MOV   [X+6],0x1          (0855)     mov   [X+ROM_BYTE_MASK],01h
098A: 56 03 00 MOV   [X+3],0x0          (0856)     mov   [X+SEARCH_RESULT],00h
098D: 62 D0 00 MOV   REG[0xD0],0x0      (0857)     RAM_SETPAGE_CUR >OneWire_bCRC8Value
0990: 55 3B 00 MOV   [OneWire_bCRC8Value],0x0(0858)     mov   [OneWire_bCRC8Value],00h
0993: 62 D0 00 MOV   REG[0xD0],0x0      (0859)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0996: 51 46    MOV   A,[OneWire_bCRC8Value+11](0860)     mov   A,[OneWire_LastDeviceFlag]
0998: B0 D4    JNZ   0x0A6D             (0861)     jnz   .check_result
099A: 9E E4    CALL  0x0880             (0862)     call  OneWire_fReset
099C: A0 DF    JZ    0x0A7C             (0863)     jz    .search_return_false
                                        (0864) 
099E: 50 F0    MOV   A,0xF0             (0865)     mov   A,F0h                                  ; Search command
09A0: 10       PUSH  X                  (0866)     push  X
09A1: 9F 13    CALL  0x08B6             (0867)     call  OneWire_WriteByte
09A3: 20       POP   X                  (0868)     pop   X
                                        (0869) .search_loop:
09A4: 9E FF    CALL  0x08A5             (0870)     call  OneWire_bReadBit
09A6: 54 04    MOV   [X+4],A            (0871)     mov   [X+ID_BIT],A
09A8: 9E FB    CALL  0x08A5             (0872)     call  OneWire_bReadBit
09AA: 54 05    MOV   [X+5],A            (0873)     mov   [X+CMP_ID_BIT],A
09AC: 21 01    AND   A,0x1              (0874)     and   A,01h
09AE: 23 04    AND   A,[X+4]            (0875)     and   A,[X+ID_BIT]
09B0: B0 9D    JNZ   0x0A4E             (0876)     jnz   .check_search
                                        (0877) 
                                        (0878) .search_else_1:
09B2: 52 04    MOV   A,[X+4]            (0879)     mov   A,[X+ID_BIT]                           ; If ID_BIT != CMP_ID_BIT
09B4: 3B 05    CMP   A,[X+5]            (0880)     cmp   A,[X+CMP_ID_BIT]
09B6: A0 07    JZ    0x09BE             (0881)     jz    .search_else_2
09B8: 52 04    MOV   A,[X+4]            (0882)     mov   A,[X+ID_BIT]
09BA: 54 07    MOV   [X+7],A            (0883)     mov   [X+SEARCH_DIRECTION],A
09BC: 80 48    JMP   0x0A05             (0884)     jmp   .search_set_or_clear
                                        (0885) .search_else_2:
09BE: 52 00    MOV   A,[X+0]            (0886)     mov   A,[X+ID_BIT_NUMBER]
09C0: 62 D0 00 MOV   REG[0xD0],0x0      (0887)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
09C3: 3A 44    CMP   A,[OneWire_bCRC8Value+9](0888)     cmp   A,[OneWire_LastDiscrepancy]
09C5: D0 1B    JNC   0x09E1             (0889)     jnc   .search_else_3
09C7: 10       PUSH  X                  (0890)     push  X
09C8: 59 02    MOV   X,[X+2]            (0891)     mov   X,[X+ROM_BYTE_NUMBER]
09CA: 62 D3 00 MOV   REG[0xD3],0x0      (0892)     RAM_SETPAGE_IDX >OneWire_ROM
09CD: 52 3C    MOV   A,[X+60]           (0893)     mov   A,[X+OneWire_ROM]
09CF: 62 D3 07 MOV   REG[0xD3],0x7      (0894)     RAM_SETPAGE_IDX2STK
09D2: 20       POP   X                  (0895)     pop   X
09D3: 23 06    AND   A,[X+6]            (0896)     and   A,[X+ROM_BYTE_MASK]
09D5: B0 06    JNZ   0x09DC             (0897)     jnz   .search_dir_1
09D7: 56 07 00 MOV   [X+7],0x0          (0898)     mov   [X+SEARCH_DIRECTION],00h
09DA: 80 17    JMP   0x09F2             (0899)     jmp   .search_is_dir_0
                                        (0900) .search_dir_1:
09DC: 56 07 01 MOV   [X+7],0x1          (0901)     mov   [X+SEARCH_DIRECTION],01h
09DF: 80 12    JMP   0x09F2             (0902)     jmp   .search_is_dir_0
                                        (0903) .search_else_3:
09E1: 52 00    MOV   A,[X+0]            (0904)     mov   A,[X+ID_BIT_NUMBER]
09E3: 62 D0 00 MOV   REG[0xD0],0x0      (0905)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
09E6: 3A 44    CMP   A,[OneWire_bCRC8Value+9](0906)     cmp   A,[OneWire_LastDiscrepancy]            ;SEARCH_DIRECTION = (ID_BIT_NUMBER == LastDiscrepancy search_direction)
09E8: B0 06    JNZ   0x09EF             (0907)     jnz   .search_dir_1_2
09EA: 56 07 01 MOV   [X+7],0x1          (0908)     mov   [X+SEARCH_DIRECTION],01h
09ED: 80 04    JMP   0x09F2             (0909)     jmp   .search_is_dir_0
                                        (0910) .search_dir_1_2:
09EF: 56 07 00 MOV   [X+7],0x0          (0911)     mov   [X+SEARCH_DIRECTION],00h
                                        (0912) .search_is_dir_0:
09F2: 52 07    MOV   A,[X+7]            (0913)     mov   A,[X+SEARCH_DIRECTION]
09F4: B0 10    JNZ   0x0A05             (0914)     jnz   .search_set_or_clear
09F6: 52 00    MOV   A,[X+0]            (0915)     mov   A,[X+ID_BIT_NUMBER]
09F8: 54 01    MOV   [X+1],A            (0916)     mov   [X+LAST_ZERO],A
09FA: 39 09    CMP   A,0x9              (0917)     cmp   A,09h
09FC: D0 08    JNC   0x0A05             (0918)     jnc   .search_set_or_clear
09FE: 52 01    MOV   A,[X+1]            (0919)     mov   A,[X+LAST_ZERO]
0A00: 62 D0 00 MOV   REG[0xD0],0x0      (0920)     RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
0A03: 53 45    MOV   [OneWire_bCRC8Value+10],A(0921)     mov   [OneWire_LastFamilyDiscrepancy],A
                                        (0922) .search_set_or_clear:
0A05: 3D 07 01 CMP   [X+7],0x1          (0923)     cmp   [X+SEARCH_DIRECTION],01h
0A08: B0 11    JNZ   0x0A1A             (0924)     jnz   .search_else_4
0A0A: 52 06    MOV   A,[X+6]            (0925)     mov   A,[X+ROM_BYTE_MASK]
0A0C: 10       PUSH  X                  (0926)     push  X
0A0D: 59 02    MOV   X,[X+2]            (0927)     mov   X,[X+ROM_BYTE_NUMBER]
0A0F: 62 D3 00 MOV   REG[0xD3],0x0      (0928)     RAM_SETPAGE_IDX >OneWire_ROM
0A12: 2D 3C    OR    [X+60],A           (0929)     or    [X+OneWire_ROM],A
0A14: 62 D3 07 MOV   REG[0xD3],0x7      (0930)     RAM_SETPAGE_IDX2STK
0A17: 20       POP   X                  (0931)     pop   X
0A18: 80 10    JMP   0x0A29             (0932)     jmp   .search_write_direction
                                        (0933) .search_else_4:
0A1A: 52 06    MOV   A,[X+6]            (0934)     mov   A,[X+ROM_BYTE_MASK]
0A1C: 10       PUSH  X                  (0935)     push  X
0A1D: 59 02    MOV   X,[X+2]            (0936)     mov   X,[X+ROM_BYTE_NUMBER]
0A1F: 73       CPL   A                  (0937)     cpl   A
0A20: 62 D3 00 MOV   REG[0xD3],0x0      (0938)     RAM_SETPAGE_IDX >OneWire_ROM
0A23: 25 3C    AND   [X+60],A           (0939)     and   [X+OneWire_ROM],A
0A25: 62 D3 07 MOV   REG[0xD3],0x7      (0940)     RAM_SETPAGE_IDX2STK
0A28: 20       POP   X                  (0941)     pop   X
                                        (0942) .search_write_direction:
0A29: 52 07    MOV   A,[X+7]            (0943)     mov   A,[X+SEARCH_DIRECTION]
0A2B: 9E 6C    CALL  0x0899             (0944)     call  OneWire_WriteBit
0A2D: 77 00    INC   [X+0]              (0945)     inc   [X+ID_BIT_NUMBER]
0A2F: 66 06    ASL   [X+6]              (0946)     asl   [X+ROM_BYTE_MASK]
0A31: 3D 06 00 CMP   [X+6],0x0          (0947)     cmp   [X+ROM_BYTE_MASK],00h
0A34: B0 14    JNZ   0x0A49             (0948)     jnz   .check_if_loop
0A36: 10       PUSH  X                  (0949)     push  X
0A37: 59 02    MOV   X,[X+2]            (0950)     mov   X,[X+ROM_BYTE_NUMBER]
0A39: 62 D3 00 MOV   REG[0xD3],0x0      (0951)     RAM_SETPAGE_IDX >OneWire_ROM
0A3C: 52 3C    MOV   A,[X+60]           (0952)     mov   A,[X+OneWire_ROM]
0A3E: 62 D3 07 MOV   REG[0xD3],0x7      (0953)     RAM_SETPAGE_IDX2STK
0A41: 9E A9    CALL  0x08EC             (0954)     call  OneWire_bCRC8
                                        (0955)     RAM_PROLOGUE RAM_USE_CLASS_4
0A43: 20       POP   X                  (0956)     pop   X
0A44: 77 02    INC   [X+2]              (0957)     inc   [X+ROM_BYTE_NUMBER]
0A46: 56 06 01 MOV   [X+6],0x1          (0958)     mov   [X+ROM_BYTE_MASK],01h
                                        (0959) .check_if_loop:
0A49: 3D 02 08 CMP   [X+2],0x8          (0960)     cmp   [X+ROM_BYTE_NUMBER],08h
0A4C: CF 57    JC    0x09A4             (0961)     jc    .search_loop
                                        (0962) .check_search:
0A4E: 3D 00 41 CMP   [X+0],0x41         (0963)     cmp   [X+ID_BIT_NUMBER],41h
0A51: C0 1B    JC    0x0A6D             (0964)     jc    .check_result
0A53: 62 D0 00 MOV   REG[0xD0],0x0      (0965)     RAM_SETPAGE_CUR >OneWire_bCRC8Value
0A56: 3C 3B 00 CMP   [OneWire_bCRC8Value],0x0(0966)     cmp   [OneWire_bCRC8Value],00h
0A59: B0 13    JNZ   0x0A6D             (0967)     jnz   .check_result
0A5B: 52 01    MOV   A,[X+1]            (0968)     mov   A,[X+LAST_ZERO]
0A5D: 62 D0 00 MOV   REG[0xD0],0x0      (0969)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
0A60: 53 44    MOV   [OneWire_bCRC8Value+9],A(0970)     mov   [OneWire_LastDiscrepancy],A
0A62: B0 07    JNZ   0x0A6A             (0971)     jnz   .search_not_last
0A64: 62 D0 00 MOV   REG[0xD0],0x0      (0972)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0A67: 55 46 01 MOV   [OneWire_bCRC8Value+11],0x1(0973)     mov   [OneWire_LastDeviceFlag],01h
                                        (0974) .search_not_last:
0A6A: 56 03 01 MOV   [X+3],0x1          (0975)     mov   [X+SEARCH_RESULT],01h
                                        (0976) ; If no device found then reset counter so next search will be like a first
                                        (0977) .check_result:
0A6D: 52 03    MOV   A,[X+3]            (0978)     mov   A,[X+SEARCH_RESULT]
0A6F: A0 0C    JZ    0x0A7C             (0979)     jz    .search_return_false
0A71: 62 D0 00 MOV   REG[0xD0],0x0      (0980)     RAM_SETPAGE_CUR >OneWire_ROM
0A74: 51 3C    MOV   A,[OneWire_bCRC8Value+1](0981)     mov   A,[OneWire_ROM+0]
0A76: A0 05    JZ    0x0A7C             (0982)     jz    .search_return_false
                                        (0983) .search_return_true:
0A78: 50 01    MOV   A,0x1              (0984)     mov   A,01h
0A7A: 80 15    JMP   0x0A90             (0985)     jmp   .search_clean_up
                                        (0986) .search_return_false:
0A7C: 62 D0 00 MOV   REG[0xD0],0x0      (0987)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
0A7F: 55 44 00 MOV   [OneWire_bCRC8Value+9],0x0(0988)     mov   [OneWire_LastDiscrepancy],00h
0A82: 62 D0 00 MOV   REG[0xD0],0x0      (0989)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0A85: 55 46 00 MOV   [OneWire_bCRC8Value+11],0x0(0990)     mov   [OneWire_LastDeviceFlag],00h
0A88: 62 D0 00 MOV   REG[0xD0],0x0      (0991)     RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
0A8B: 55 45 00 MOV   [OneWire_bCRC8Value+10],0x0(0992)     mov   [OneWire_LastFamilyDiscrepancy],00h
0A8E: 50 00    MOV   A,0x0              (0993)     mov   A,00h
                                        (0994) .search_clean_up:
0A90: 38 F8    ADD   SP,0xF8            (0995)     add   SP,-08h                                ; Restore SP
                                        (0996) 
0A92: 70 3F    AND   F,0x3F             
0A94: 71 C0    OR    F,0xC0             (0997)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0998)     RAM_EPILOGUE RAM_USE_CLASS_4
0A96: 7F       RET                      (0999)     ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) .SECTION
                                        (1003) ;-----------------------------------------------------------------------------
                                        (1004) ;  FUNCTION NAME: OneWire_fVerify
                                        (1005) ;
                                        (1006) ;  DESCRIPTION:
                                        (1007) ;     Verify the device with the ROM number in OneWire_ROM is present.
                                        (1008) ;-----------------------------------------------------------------------------
                                        (1009) ;  ARGUMENTS:
                                        (1010) ;     none.
                                        (1011) ;
                                        (1012) ;  RAM BUFFER CONTENTS:
                                        (1013) ;     OneWire_ROM = ROM number of 1-Wire device
                                        (1014) ;
                                        (1015) ;  RETURNS:
                                        (1016) ;     A = 01h if device found
                                        (1017) ;     A = 00h if device not found
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16
                                        (1024) ;    functions. Currently only the page pointer registers listed below are modified:
                                        (1025) ;    CUR_PP, IDX_PP
                                        (1026) ;-----------------------------------------------------------------------------
                                        (1027) ROM_BACKUP:                 equ   0
                                        (1028) LD_BACKUP:                  equ   8
                                        (1029) LDF_BACKUP:                 equ   9
                                        (1030) LFD_BACKUP:                 equ   0x0A
                                        (1031) 
                                        (1032)  OneWire_fVerify:
                                        (1033) _OneWire_fVerify:
                                        (1034)     RAM_PROLOGUE RAM_USE_CLASS_4
0A97: 70 BF    AND   F,0xBF             (1035)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1036) 
0A99: 4F       MOV   X,SP               (1037)     mov   X, SP                                  ; Get location of stack
0A9A: 38 0B    ADD   SP,0xB             (1038)     add   SP, 0Bh                                ; Make locations for local variables
                                        (1039) IF ( SYSTEM_LARGE_MEMORY_MODEL )
0A9C: 5D D1    MOV   A,REG[0xD1]        (1040)     mov   A, reg[STK_PP]                         ; Set A to right page to back up ROM to stack
                                        (1041) ELSE
                                        (1042)     mov   A, 00h
                                        (1043) ENDIF
0A9E: 9E 66    CALL  0x0906             (1044)     call  OneWire_GetROM
                                        (1045)     RAM_PROLOGUE RAM_USE_CLASS_4
0AA0: 70 BF    AND   F,0xBF             (1046)     RAM_PROLOGUE RAM_USE_CLASS_3
0AA2: 62 D3 07 MOV   REG[0xD3],0x7      (1047)     RAM_SETPAGE_IDX2STK
0AA5: 62 D0 00 MOV   REG[0xD0],0x0      (1048)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
0AA8: 51 44    MOV   A,[OneWire_bCRC8Value+9](1049)     mov   A,[OneWire_LastDiscrepancy]
0AAA: 54 08    MOV   [X+8],A            (1050)     mov   [X+LD_BACKUP],A
0AAC: 62 D0 00 MOV   REG[0xD0],0x0      (1051)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0AAF: 51 46    MOV   A,[OneWire_bCRC8Value+11](1052)     mov   A,[OneWire_LastDeviceFlag]
0AB1: 54 09    MOV   [X+9],A            (1053)     mov   [X+LDF_BACKUP],A
0AB3: 62 D0 00 MOV   REG[0xD0],0x0      (1054)     RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
0AB6: 51 45    MOV   A,[OneWire_bCRC8Value+10](1055)     mov   A,[OneWire_LastFamilyDiscrepancy]
0AB8: 54 0A    MOV   [X+10],A           (1056)     mov   [X+LFD_BACKUP],A
0ABA: 62 D0 00 MOV   REG[0xD0],0x0      (1057)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
0ABD: 55 44 40 MOV   [OneWire_bCRC8Value+9],0x40(1058)     mov   [OneWire_LastDiscrepancy],40h
0AC0: 62 D0 00 MOV   REG[0xD0],0x0      (1059)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0AC3: 55 46 00 MOV   [OneWire_bCRC8Value+11],0x0(1060)     mov   [OneWire_LastDeviceFlag],00h
0AC6: 10       PUSH  X                  (1061)     push  X                                      ; Search does not preserve X
0AC7: 9E AD    CALL  0x0976             (1062)     call  OneWire_Search
0AC9: 20       POP   X                  (1063)     pop   X
0ACA: 08       PUSH  A                  (1064)     push  A                                      ; Save result
0ACB: 70 BF    AND   F,0xBF             (1065)     RAM_X_POINTS_TO_INDEXPAGE
0ACD: A0 3B    JZ    0x0B09             (1066)     jz    .Verify_End
0ACF: 62 D3 07 MOV   REG[0xD3],0x7      (1067)     RAM_SETPAGE_IDX2STK
0AD2: 62 D0 00 MOV   REG[0xD0],0x0      (1068)     RAM_SETPAGE_CUR >OneWire_ROM
0AD5: 51 3C    MOV   A,[OneWire_bCRC8Value+1](1069)     mov   A,[OneWire_ROM+0]
0AD7: 3B 00    CMP   A,[X+0]            (1070)     cmp   A,[X+ROM_BACKUP]
0AD9: B0 2B    JNZ   0x0B05             (1071)     jnz   .Verify_Fail
0ADB: 51 3D    MOV   A,[OneWire_bCRC8Value+2](1072)     mov   A,[OneWire_ROM+1]
0ADD: 3B 01    CMP   A,[X+1]            (1073)     cmp   A,[X+ROM_BACKUP+1]
0ADF: B0 25    JNZ   0x0B05             (1074)     jnz   .Verify_Fail
0AE1: 51 3E    MOV   A,[OneWire_bCRC8Value+3](1075)     mov   A,[OneWire_ROM+2]
0AE3: 3B 02    CMP   A,[X+2]            (1076)     cmp   A,[X+ROM_BACKUP+2]
0AE5: B0 1F    JNZ   0x0B05             (1077)     jnz   .Verify_Fail
0AE7: 51 3F    MOV   A,[OneWire_bCRC8Value+4](1078)     mov   A,[OneWire_ROM+3]
0AE9: 3B 03    CMP   A,[X+3]            (1079)     cmp   A,[X+ROM_BACKUP+3]
0AEB: B0 19    JNZ   0x0B05             (1080)     jnz   .Verify_Fail
0AED: 51 40    MOV   A,[OneWire_bCRC8Value+5](1081)     mov   A,[OneWire_ROM+4]
0AEF: 3B 04    CMP   A,[X+4]            (1082)     cmp   A,[X+ROM_BACKUP+4]
0AF1: B0 13    JNZ   0x0B05             (1083)     jnz   .Verify_Fail
0AF3: 51 41    MOV   A,[OneWire_bCRC8Value+6](1084)     mov   A,[OneWire_ROM+5]
0AF5: 3B 05    CMP   A,[X+5]            (1085)     cmp   A,[X+ROM_BACKUP+5]
0AF7: B0 0D    JNZ   0x0B05             (1086)     jnz   .Verify_Fail
0AF9: 51 42    MOV   A,[OneWire_bCRC8Value+7](1087)     mov   A,[OneWire_ROM+6]
0AFB: 3B 06    CMP   A,[X+6]            (1088)     cmp   A,[X+ROM_BACKUP+6]
0AFD: B0 07    JNZ   0x0B05             (1089)     jnz   .Verify_Fail
0AFF: 51 43    MOV   A,[OneWire_bCRC8Value+8](1090)     mov   A,[OneWire_ROM+7]
0B01: 3B 07    CMP   A,[X+7]            (1091)     cmp   A,[X+ROM_BACKUP+7]
0B03: A0 05    JZ    0x0B09             (1092)     jz    .Verify_End
                                        (1093) .Verify_Fail:
0B05: 18       POP   A                  (1094)     pop   A                                      ; Replace result
0B06: 50 00    MOV   A,0x0              (1095)     mov   A,00h
0B08: 08       PUSH  A                  (1096)     push  A
                                        (1097) .Verify_End:
                                        (1098) IF ( SYSTEM_LARGE_MEMORY_MODEL )
0B09: 5D D1    MOV   A,REG[0xD1]        (1099)     mov   A, reg[STK_PP]                         ; Set A to right page to recover ROM from stack
                                        (1100) ELSE
                                        (1101)     mov   A, 00h
                                        (1102) ENDIF
0B0B: 9E 25    CALL  0x0932             (1103)     call  OneWire_SetROM
0B0D: 70 BF    AND   F,0xBF             (1104)     RAM_X_POINTS_TO_INDEXPAGE
0B0F: 62 D3 07 MOV   REG[0xD3],0x7      (1105)     RAM_SETPAGE_IDX2STK
0B12: 52 08    MOV   A,[X+8]            (1106)     mov   A, [X+LD_BACKUP]
0B14: 62 D0 00 MOV   REG[0xD0],0x0      (1107)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
0B17: 53 44    MOV   [OneWire_bCRC8Value+9],A(1108)     mov   [OneWire_LastDiscrepancy], A
0B19: 52 09    MOV   A,[X+9]            (1109)     mov   A, [X+LDF_BACKUP]
0B1B: 62 D0 00 MOV   REG[0xD0],0x0      (1110)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0B1E: 53 46    MOV   [OneWire_bCRC8Value+11],A(1111)     mov   [OneWire_LastDeviceFlag], A
0B20: 52 0A    MOV   A,[X+10]           (1112)     mov   A, [X+LFD_BACKUP]
0B22: 62 D0 00 MOV   REG[0xD0],0x0      (1113)     RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
0B25: 53 45    MOV   [OneWire_bCRC8Value+10],A(1114)     mov   [OneWire_LastFamilyDiscrepancy], A
0B27: 18       POP   A                  (1115)     pop   A                                      ; Restore result
0B28: 38 F5    ADD   SP,0xF5            (1116)     add   SP, -0Bh                               ; Restore SP
                                        (1117) 
0B2A: 70 3F    AND   F,0x3F             
0B2C: 71 C0    OR    F,0xC0             (1118)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1119)     RAM_EPILOGUE RAM_USE_CLASS_4
0B2E: 7F       RET                      (1120)     ret
                                        (1121) .ENDSECTION
                                        (1122) 
                                        (1123) .SECTION
                                        (1124) ;-----------------------------------------------------------------------------
                                        (1125) ;  FUNCTION NAME: OneWire_FamilyTargetSetup
                                        (1126) ;
                                        (1127) ;  DESCRIPTION:
                                        (1128) ;     Setup the search to find the device type family code on the next call
                                        (1129) ;     to OneWire_Next().
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  ARGUMENTS:
                                        (1132) ;     A contains family code.
                                        (1133) ;
                                        (1134) ;  RAM BUFFER CONTENTS:
                                        (1135) ;     OneWire_ROM = ROM number of 1-Wire device
                                        (1136) ;
                                        (1137) ;  RETURNS:
                                        (1138) ;     none.
                                        (1139) ;
                                        (1140) ;  SIDE EFFECTS:
                                        (1141) ;    The A and X registers may be modified by this or future implementations
                                        (1142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1144) ;    responsibility to preserve their values across calls to fastcall16
                                        (1145) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (1146) ;    CUR_PP
                                        (1147) ;    IDX_PP
                                        (1148) ;-----------------------------------------------------------------------------
                                        (1149)  OneWire_FamilyTargetSetup:
                                        (1150) _OneWire_FamilyTargetSetup:
                                        (1151)     RAM_PROLOGUE RAM_USE_CLASS_4
0B2F: 70 BF    AND   F,0xBF             (1152)     RAM_PROLOGUE RAM_USE_CLASS_3
0B31: 62 D0 00 MOV   REG[0xD0],0x0      (1153)     RAM_SETPAGE_CUR >OneWire_ROM
0B34: 62 D3 00 MOV   REG[0xD3],0x0      (1154)     RAM_SETPAGE_IDX >OneWire_ROM
                                        (1155) 
0B37: 53 3C    MOV   [OneWire_bCRC8Value+1],A(1156)     mov   [OneWire_ROM+0], A
0B39: 10       PUSH  X                  (1157)     push  X
0B3A: 57 07    MOV   X,0x7              (1158)     mov   X, 07h
                                        (1159) .loop:
0B3C: 56 3C 00 MOV   [X+60],0x0         (1160)     mov   [X+OneWire_ROM], 00h
0B3F: 79       DEC   X                  (1161)     dec   X
0B40: BF FB    JNZ   0x0B3C             (1162)     jnz   .loop
0B42: 20       POP   X                  (1163)     pop   X
0B43: 62 D0 00 MOV   REG[0xD0],0x0      (1164)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
0B46: 55 44 40 MOV   [OneWire_bCRC8Value+9],0x40(1165)     mov   [OneWire_LastDiscrepancy], 40h
0B49: 62 D0 00 MOV   REG[0xD0],0x0      (1166)     RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
0B4C: 55 45 00 MOV   [OneWire_bCRC8Value+10],0x0(1167)     mov   [OneWire_LastFamilyDiscrepancy], 00h
0B4F: 62 D0 00 MOV   REG[0xD0],0x0      (1168)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0B52: 55 46 00 MOV   [OneWire_bCRC8Value+11],0x0(1169)     mov   [OneWire_LastDeviceFlag], 00h
                                        (1170) 
0B55: 70 3F    AND   F,0x3F             
0B57: 71 C0    OR    F,0xC0             (1171)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1172)     RAM_EPILOGUE RAM_USE_CLASS_4
0B59: 7F       RET                      (1173)     ret
                                        (1174) .ENDSECTION
                                        (1175) 
                                        (1176) .SECTION
                                        (1177) ;-----------------------------------------------------------------------------
                                        (1178) ;  FUNCTION NAME: OneWire_FamilySkipSetup
                                        (1179) ;
                                        (1180) ;  DESCRIPTION:
                                        (1181) ;     Setup the search to skip the current device type on the next call
                                        (1182) ;     to OneWire_fFindNext().
                                        (1183) ;-----------------------------------------------------------------------------
                                        (1184) ;  ARGUMENTS:
                                        (1185) ;     None.
                                        (1186) ;
                                        (1187) ;  RAM BUFFER CONTENTS:
                                        (1188) ;     OneWire_ROM = ROM number of 1-Wire device
                                        (1189) ;
                                        (1190) ;  RETURNS:
                                        (1191) ;     none.
                                        (1192) ;
                                        (1193) ;  SIDE EFFECTS:
                                        (1194) ;    The A and X registers may be modified by this or future implementations
                                        (1195) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1196) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1197) ;    responsibility to preserve their values across calls to fastcall16
                                        (1198) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (1199) ;     CUR_PP
                                        (1200) ;-----------------------------------------------------------------------------
                                        (1201)  OneWire_FamilySkipSetup:
                                        (1202) _OneWire_FamilySkipSetup:
                                        (1203)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1204) 
0B5A: 62 D0 00 MOV   REG[0xD0],0x0      (1205)     RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
0B5D: 51 45    MOV   A,[OneWire_bCRC8Value+10](1206)     mov   A,[OneWire_LastFamilyDiscrepancy]
0B5F: 55 45 00 MOV   [OneWire_bCRC8Value+10],0x0(1207)     mov   [OneWire_LastFamilyDiscrepancy],00h
0B62: 62 D0 00 MOV   REG[0xD0],0x0      (1208)     RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
0B65: 53 44    MOV   [OneWire_bCRC8Value+9],A(1209)     mov   [OneWire_LastDiscrepancy],A
0B67: B0 07    JNZ   0x0B6F             (1210)     jnz   .EndOfList
0B69: 62 D0 00 MOV   REG[0xD0],0x0      (1211)     RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
0B6C: 55 46 01 MOV   [OneWire_bCRC8Value+11],0x1(1212)     mov   [OneWire_LastDeviceFlag],01h
                                        (1213) .EndOfList:
                                        (1214) 
                                        (1215)     RAM_EPILOGUE RAM_USE_CLASS_4
0B6F: 7F       RET                      (1216)     ret
                                        (1217) .ENDSECTION
                                        (1218) ENDIF
                                        (1219) 
                                        (1220) .SECTION
                                        (1221) ;-----------------------------------------------------------------------------
                                        (1222) ;  FUNCTION NAME: OneWire_SendTxDataWait
                                        (1223) ;
                                        (1224) ;  DESCRIPTION:
                                        (1225) ;     Initiates an XCVR data transfer and waits for it to complete.
                                        (1226) ;
                                        (1227) ;-----------------------------------------------------------------------------
                                        (1228) ;  ARGUMENTS:
                                        (1229) ;     BYTE  bTxData - data to transmit.
                                        (1230) ;        Passed in Accumulator.
                                        (1231) ;
                                        (1232) ;  RETURNS:
                                        (1233) ;     none.
                                        (1234) ;
                                        (1235) ;  SIDE EFFECTS:
                                        (1236) ;    The A and X registers may be modified by this or future implementations
                                        (1237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1239) ;    responsibility to preserve their values across calls to fastcall16
                                        (1240) ;    functions.
                                        (1241) ;
                                        (1242) ;  THEORY of OPERATION:
                                        (1243) ;     Writes data to the TX buffer register.
                                        (1244) ;-----------------------------------------------------------------------------
                                        (1245)  OneWire_SendTxDataWait:
                                        (1246) _OneWire_SendTxDataWait:
                                        (1247)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (1248) 
0B70: 60 59    MOV   REG[0x59],A        (1249)     mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
                                        (1250) .WaitForTxComplete:
0B72: 5D 5B    MOV   A,REG[0x5B]        (1251)     mov    A,  reg[OneWire_XCVR_CONTROL_REG]
0B74: 21 20    AND   A,0x20             (1252)     and    A, SPIM_SPI_COMPLETE
0B76: AF FB    JZ    0x0B72             (1253)     jz     .WaitForTxComplete
                                        (1254) 
                                        (1255)     RAM_EPILOGUE RAM_USE_CLASS_1
0B78: 7F       RET                      (1256)     ret
(1257) .ENDSECTION
(1258) 
(1259) IF (OneWire_OVERDRIVE_ENABLE)
(1260) .SECTION
(1261) ;-----------------------------------------------------------------------------
(1262) ;  FUNCTION NAME: OneWire_SetOverdrive
(1263) ;
(1264) ;  DESCRIPTION:
(1265) ;     Set OverDrive speed
(1266) ;-----------------------------------------------------------------------------
(1267) ;  ARGUMENTS:
(1268) ;     none.
(1269) ;
(1270) ;  RETURNS:
(1271) ;     none.
(1272) ;
(1273) ;  SIDE EFFECTS:
(1274) ;    The A and X registers may be modified by this or future implementations
(1275) ;    of this function.  The same is true for all RAM page pointer registers in
(1276) ;    the Large Memory Model.  When necessary, it is the calling function's
(1277) ;    responsibility to preserve their values across calls to fastcall16
(1278) ;    functions.  Currently only the page pointer registers listed below are modified:
(1279) ;     CUR_PP
(1280) ;-----------------------------------------------------------------------------
(1281)  OneWire_SetOverdrive:
(1282) _OneWire_SetOverdrive:
(1283)     RAM_PROLOGUE RAM_USE_CLASS_4
(1284) 
(1285)     RAM_SETPAGE_CUR >OneWire_bMode
(1286)     or    [OneWire_bMode],OD_MODE
(1287)     mov   reg[OneWire_BITCLK_PERIOD_REG], BIT_PERIOD                           ; OverDrive Bit period
(1288) 
(1289)     RAM_EPILOGUE RAM_USE_CLASS_4
(1290)     ret
(1291) .ENDSECTION
(1292) 
(1293) .SECTION
(1294) ;-----------------------------------------------------------------------------
(1295) ;  FUNCTION NAME: OneWire_ClearOverdrive
(1296) ;
(1297) ;  DESCRIPTION:
(1298) ;     Clear OverDrive speed
(1299) ;-----------------------------------------------------------------------------
(1300) ;  ARGUMENTS:
(1301) ;     none.
(1302) ;
(1303) ;  RETURNS:
(1304) ;     none.
(1305) ;
(1306) ;  SIDE EFFECTS:
(1307) ;    The A and X registers may be modified by this or future implementations
(1308) ;    of this function.  The same is true for all RAM page pointer registers in
(1309) ;    the Large Memory Model.  When necessary, it is the calling function's
(1310) ;    responsibility to preserve their values across calls to fastcall16
(1311) ;    functions.  Currently only the page pointer registers listed below are modified:
(1312) ;     CUR_PP
(1313) ;-----------------------------------------------------------------------------
(1314)  OneWire_ClearOverdrive:
(1315) _OneWire_ClearOverdrive:
(1316)     RAM_PROLOGUE RAM_USE_CLASS_4
(1317)     RAM_SETPAGE_CUR >OneWire_bMode
(1318) 
(1319)     and   [OneWire_bMode],~OD_MODE
(1320) 	mov   reg[OneWire_BITCLK_PERIOD_REG], BIT_PERIOD
(1321) 
(1322)     RAM_EPILOGUE RAM_USE_CLASS_4
(1323)     ret
(1324) .ENDSECTION
(1325) 
(1326) ENDIF
(1327) 
(1328) IF (OneWire_PARASITE_ENABLE)
(1329) .SECTION
(1330) ;-----------------------------------------------------------------------------
(1331) ;  FUNCTION NAME: OneWire_WriteByteStrong
(1332) ;
(1333) ;  DESCRIPTION:
(1334) ;     Write a byte to the OneWireOut pin, and set the interrupt to change the
(1335) ;     port to strong mode immediately after write is complete
(1336) ;-----------------------------------------------------------------------------
(1337) ;  ARGUMENTS:
(1338) ;     A => byte output to the OneWireOut pin
(1339) ;
(1340) ;  RETURNS:
(1341) ;     none.
(1342) ;
(1343) ;  SIDE EFFECTS:
(1344) ;    The A and X registers may be modified by this or future implementations
(1345) ;    of this function.  The same is true for all RAM page pointer registers in
(1346) ;    the Large Memory Model.  When necessary, it is the calling function's
(1347) ;    responsibility to preserve their values across calls to fastcall16
(1348) ;    functions.  Currently only the page pointer registers listed below are modified:
(1349) ;     CUR_PP
(1350) ;-----------------------------------------------------------------------------
(1351)  OneWire_WriteByteStrong:
(1352) _OneWire_WriteByteStrong:
(1353)     RAM_PROLOGUE RAM_USE_CLASS_1
(1354)     
(1355)     push  A                                      ; Save byte to write on stack
(1356)     mov   X, 07h                                 ; Set up loop for writing bits
(1357) .Write_ByteStrong_loop:
(1358)     call  OneWire_WriteBit                       ; Output LSB of A, bits 0-6
(1359)     pop   A                                      ; Restore A
(1360)     rrc   A                                      ; Rotate A for the next bit
(1361)     push  A                                      ; Save remaining bits
(1362)     dec   X
(1363)     jnz   .Write_ByteStrong_loop                 ; Loop until the whole byte is output
(1364)     M8C_ClearIntFlag OneWire_BIT_INT_CLR, OneWire_BIT_INT_MASK  ; Clear the interrupt
(1365)     M8C_EnableIntMask OneWire_BIT_INT_REG, OneWire_BIT_INT_MASK ; enable interrupt
(1366)     call  OneWire_WriteBit                       ; Output LSB of A, bit 7
(1367)     M8C_DisableIntMask OneWire_BIT_INT_REG, OneWire_BIT_INT_MASK ; disable interrupt
(1368)     pop   A                                      ; Clean up stack
(1369) 
(1370)     RAM_EPILOGUE RAM_USE_CLASS_1
(1371)     ret
(1372) .ENDSECTION
(1373) 
(1374) .SECTION
(1375) ;-----------------------------------------------------------------------------
(1376) ;  FUNCTION NAME: OneWire_SetResistive
(1377) ;
(1378) ;  DESCRIPTION:
(1379) ;     Set port back to resistive pull-up
(1380) ;-----------------------------------------------------------------------------
(1381) ;  ARGUMENTS:
(1382) ;     none.
(1383) ;
(1384) ;  RETURNS:
(1385) ;     none.
(1386) ;
(1387) ;  SIDE EFFECTS:
(1388) ;    The A and X registers may be modified by this or future implementations
(1389) ;    of this function.  The same is true for all RAM page pointer registers in
(1390) ;    the Large Memory Model.  When necessary, it is the calling function's
(1391) ;    responsibility to preserve their values across calls to fastcall16
(1392) ;    functions.
(1393) ;-----------------------------------------------------------------------------
(1394)  OneWire_SetResistive:
(1395) _OneWire_SetResistive:
(1396)     RAM_PROLOGUE RAM_USE_CLASS_1
(1397) 
(1398)     M8C_SetBank1
(1399)     or    reg[OneWire_OUT_PORT_DM1],OneWire_OUT_PORT_MASK
(1400)     M8C_SetBank0
(1401) 
(1402)     RAM_EPILOGUE RAM_USE_CLASS_1
(1403)     ret
(1404) .ENDSECTION
(1405) 
(1406) ENDIF
FILE: lib\ltrxint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LTRXINT.asm
                                        (0004) ;;  Version: 5.2, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "LTRX.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _LTRX_TX_ISR
                                        (0022) export  _LTRX_RX_ISR
                                        (0023) 
                                        (0024) IF (LTRX_RXBUF_ENABLE)
                                        (0025) export  LTRX_aRxBuffer
                                        (0026) export _LTRX_aRxBuffer
                                        (0027) export  LTRX_bRxCnt
                                        (0028) export _LTRX_bRxCnt
                                        (0029) export  LTRX_fStatus
                                        (0030) export _LTRX_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (LTRX_RXBUF_ENABLE)
                                        (0040)  LTRX_fStatus:
                                        (0041) _LTRX_fStatus:      BLK  1
                                        (0042)  LTRX_bRxCnt:
                                        (0043) _LTRX_bRxCnt:       BLK  1
                                        (0044) AREA LTRX_RAM (RAM, REL, CON)
                                        (0045)  LTRX_aRxBuffer:
                                        (0046) _LTRX_aRxBuffer:    BLK LTRX_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _LTRX_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance LTRX.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _LTRX_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
0B79: 7E       RETI                     (0101)    reti
                                        (0102) 
                                        (0103) 
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: _LTRX_RX_ISR
                                        (0106) ;
                                        (0107) ;  DESCRIPTION:
                                        (0108) ;     UART RX interrupt handler for instance LTRX.
                                        (0109) ;     This ISR handles the background processing of received characters if
                                        (0110) ;     the buffer is enabled.
                                        (0111) ;
                                        (0112) ;
                                        (0113) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0114) ;
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;     There are 3 posible errors that may occur with the serial port.
                                        (0117) ;      1) Parity Error
                                        (0118) ;      2) Framing Error
                                        (0119) ;      3) OverRun Error
                                        (0120) ;
                                        (0121) ;  This user module check for parity and framing error.  If either of these
                                        (0122) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0123) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0124) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0125) ;  this ISR to set a flag if an error condition occurs.
                                        (0126) ;
                                        (0127) ;  THEORY of OPERATION:
                                        (0128) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0129) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0130) ;     the command terminator is detected, the command bit is set and all other
                                        (0131) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0132) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0133) ;     terminator.  After that, the characters will be discarded, although
                                        (0134) ;     a command determinator will still cause the command bit to be set.
                                        (0135) ;
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) _LTRX_RX_ISR:
                                        (0138) 
                                        (0139)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0140)    ;---------------------------------------------------
                                        (0141)    ; Insert your custom code below this banner
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ;   NOTE: interrupt service routines must preserve
                                        (0144)    ;   the values of the A and X CPU registers.
                                        (0145) 
                                        (0146)    ;---------------------------------------------------
                                        (0147)    ; Insert your custom code above this banner
                                        (0148)    ;---------------------------------------------------
                                        (0149)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0150) 
                                        (0151) IF (LTRX_RXBUF_ENABLE)
0B7A: 08       PUSH  A                  (0152)    push A
0B7B: 10       PUSH  X                  (0153)    push X
                                        (0154)    
                                        (0155)    IF SYSTEM_LARGE_MEMORY_MODEL
0B7C: 5D D3    MOV   A,REG[0xD3]        
0B7E: 08       PUSH  A                  (0156)       REG_PRESERVE IDX_PP
                                        (0157)    ENDIF
                                        (0158)    
0B7F: 58 02    MOV   X,[0x2]            (0159)    mov  X,[LTRX_bRxCnt]                                    ; Load X with byte counter
0B81: 5D 3F    MOV   A,REG[0x3F]        (0160)    mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Read the control register
0B83: 08       PUSH  A                  (0161)    push A                                                  ; Store copy for later test
                                        (0162)                                                            ; IF real RX interrupt
0B84: 21 08    AND   A,0x8              (0163)    and  A,LTRX_RX_REG_FULL                                 ; Did really really get an IRQ
0B86: B0 04    JNZ   0x0B8B             (0164)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
0B88: 18       POP   A                  (0165)    pop  A                                                  ; Restore stack
0B89: 80 5E    JMP   0x0BE8             (0166)    jmp  .RESTORE_IDX_PP
                                        (0167) 
                                        (0168) .UARTRX_ReadRx:
0B8B: 18       POP   A                  (0169)    pop  A                                                  ; Restore status flags
                                        (0170)                                                            ; IF there is no error, get data
                                        (0171)                                                            ; Check for parity or framing error
0B8C: 21 E0    AND   A,0xE0             (0172)    and  A,LTRX_RX_ERROR
0B8E: A0 12    JZ    0x0BA1             (0173)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0174) 
0B90: 2C 01    OR    [0x1],A            (0175)    or   [LTRX_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0B92: 49 3E 00 TST   REG[0x3E],0x0      (0176)    tst  REG[LTRX_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
0B95: 21 20    AND   A,0x20             (0177)    and  A,LTRX_RX_FRAMING_ERROR                            ; Check for framing error special case
0B97: A0 50    JZ    0x0BE8             (0178)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0179) 
                                        (0180)                                                            ; Disable and re-enable RX to reset after
                                        (0181)                                                            ; framing error.
0B99: 41 3F FE AND   REG[0x3F],0xFE     (0182)    and   REG[LTRX_RX_CONTROL_REG], ~LTRX_RX_ENABLE         ; Disable RX
0B9C: 43 3F 01 OR    REG[0x3F],0x1      (0183)    or    REG[LTRX_RX_CONTROL_REG],  LTRX_RX_ENABLE         ; Enable RX
0B9F: 80 48    JMP   0x0BE8             (0184)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0185) 
                                        (0186) 
                                        (0187) .UARTRX_NO_ERROR:
0BA1: 5D 3E    MOV   A,REG[0x3E]        (0188)    mov  A,REG[LTRX_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0189) 
                                        (0190)                                                            ; IF buffer not full
0BA3: 47 01 01 TST   [0x1],0x1          (0191)    tst  [LTRX_fStatus],LTRX_RX_BUF_CMDTERM                 ; Check for buffer full
0BA6: B0 41    JNZ   0x0BE8             (0192)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0193) 
0BA8: 39 0D    CMP   A,0xD              (0194)    cmp  A,LTRX_CMD_TERM                                    ; Check for End of command
0BAA: B0 14    JNZ   0x0BBF             (0195)    jnz  .UARTRX_CHK_BACKSPACE
0BAC: 2E 01 01 OR    [0x1],0x1          (0196)    or   [LTRX_fStatus],LTRX_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0197) 
                                        (0198) 
                                        (0199) 
0BAF: 62 D3 00 MOV   REG[0xD3],0x0      (0200)    RAM_SETPAGE_IDX >LTRX_aRxBuffer
0BB2: 70 3F    AND   F,0x3F             
0BB4: 71 80    OR    F,0x80             (0201)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0BB6: 56 1C 00 MOV   [X+28],0x0         (0202)    mov  [X + LTRX_aRxBuffer],00h                           ; Zero out last data
0BB9: 70 3F    AND   F,0x3F             
0BBB: 71 00    OR    F,0x0              (0203)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0BBD: 80 2A    JMP   0x0BE8             (0204)    jmp  .RESTORE_IDX_PP
                                        (0205) 
                                        (0206) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0207) IF(LTRX_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0208)    cmp  A,LTRX_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0209)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0210)    cmp  [LTRX_bRxCnt],00h                                  ; Check if buffer empty
                                        (0211)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0212)    dec  [LTRX_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0213)    jmp  .RESTORE_IDX_PP
                                        (0214) ENDIF                                                      ; 
                                        (0215) 
                                        (0216) .UARTRX_IGNORE:
                                        (0217) IF(LTRX_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
0BBF: 39 20    CMP   A,0x20             (0218)    cmp  A,LTRX_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
0BC1: C0 26    JC    0x0BE8             (0219)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0220) ENDIF
                                        (0221) 
                                        (0222) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0223) 	
0BC3: 62 D3 00 MOV   REG[0xD3],0x0      (0224)    RAM_SETPAGE_IDX >LTRX_aRxBuffer                         ;   using idexed address mode
0BC6: 3C 02 0F CMP   [0x2],0xF          (0225)    cmp  [LTRX_bRxCnt],(LTRX_RX_BUFFER_SIZE - 1)
0BC9: C0 11    JC    0x0BDB             (0226)    jc   .UARTRX_ISR_GETDATA
0BCB: 70 3F    AND   F,0x3F             
0BCD: 71 80    OR    F,0x80             (0227)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0BCF: 56 1C 00 MOV   [X+28],0x0         (0228)    mov  [X + LTRX_aRxBuffer],00h                           ; Zero out last data in the buffer
0BD2: 70 3F    AND   F,0x3F             
0BD4: 71 00    OR    F,0x0              (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0BD6: 2E 01 10 OR    [0x1],0x10         (0230)    or   [LTRX_fStatus],LTRX_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
0BD9: 80 0E    JMP   0x0BE8             (0231)    jmp  .RESTORE_IDX_PP
                                        (0232) 
                                        (0233) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0234)                                                            ; X is already loaded with pointer
0BDB: 70 3F    AND   F,0x3F             
0BDD: 71 80    OR    F,0x80             (0235)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0BDF: 54 1C    MOV   [X+28],A           (0236)    mov  [X+LTRX_aRxBuffer],A                               ; store data in array
0BE1: 70 3F    AND   F,0x3F             
0BE3: 71 00    OR    F,0x0              (0237)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0BE5: 75       INC   X                  (0238)    inc  X                                                  ; Inc the pointer
0BE6: 5A 02    MOV   [0x2],X            (0239)    mov  [LTRX_bRxCnt],X                                    ; Restore the pointer
                                        (0240)                                                            ; ENDIF max string size
                                        (0241) .RESTORE_IDX_PP:
                                        (0242)    IF SYSTEM_LARGE_MEMORY_MODEL
0BE8: 18       POP   A                  
0BE9: 60 D3    MOV   REG[0xD3],A        (0243)       REG_RESTORE IDX_PP
                                        (0244)    ENDIF
                                        (0245) 
                                        (0246) .END_UARTRX_ISR:
0BEB: 20       POP   X                  (0247)    pop  X
0BEC: 18       POP   A                  (0248)    pop  A
                                        (0249) 
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) LTRX_RX_ISR_END:
0BED: 7E       RETI                     (0253)    reti
(0254) 
(0255) ; end of file LTRXINT.asm
(0256) 
FILE: lib\ltrx.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   LTRX.asm
                                        (0004) ;;  Version: 5.2, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "LTRX.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  LTRX_SetTxIntMode
                                        (0041) export _LTRX_SetTxIntMode
                                        (0042) export  LTRX_EnableInt
                                        (0043) export _LTRX_EnableInt
                                        (0044) export  LTRX_DisableInt
                                        (0045) export _LTRX_DisableInt
                                        (0046) 
                                        (0047) export  LTRX_Start
                                        (0048) export _LTRX_Start
                                        (0049) export  LTRX_Stop
                                        (0050) export _LTRX_Stop
                                        (0051) export  LTRX_SendData
                                        (0052) export _LTRX_SendData
                                        (0053) export  LTRX_bReadTxStatus
                                        (0054) export _LTRX_bReadTxStatus
                                        (0055) export  LTRX_bReadRxData
                                        (0056) export _LTRX_bReadRxData
                                        (0057) export  LTRX_bReadRxStatus
                                        (0058) export _LTRX_bReadRxStatus
                                        (0059) 
                                        (0060) export  LTRX_IntCntl
                                        (0061) export _LTRX_IntCntl
                                        (0062) 
                                        (0063) export  LTRX_TxIntMode
                                        (0064) export _LTRX_TxIntMode
                                        (0065) 
                                        (0066) export  LTRX_PutSHexByte
                                        (0067) export _LTRX_PutSHexByte
                                        (0068) export  LTRX_PutSHexInt
                                        (0069) export _LTRX_PutSHexInt
                                        (0070) 
                                        (0071) export  LTRX_CPutString
                                        (0072) export _LTRX_CPutString
                                        (0073) export  LTRX_PutString
                                        (0074) export _LTRX_PutString
                                        (0075) export  LTRX_PutChar
                                        (0076) export _LTRX_PutChar
                                        (0077) export  LTRX_Write
                                        (0078) export _LTRX_Write
                                        (0079) export  LTRX_CWrite
                                        (0080) export _LTRX_CWrite
                                        (0081) 
                                        (0082) export  LTRX_cGetChar
                                        (0083) export _LTRX_cGetChar
                                        (0084) export  LTRX_cReadChar
                                        (0085) export _LTRX_cReadChar
                                        (0086) export  LTRX_iReadChar
                                        (0087) export _LTRX_iReadChar
                                        (0088) export  LTRX_PutCRLF
                                        (0089) export _LTRX_PutCRLF
                                        (0090) 
                                        (0091) IF (LTRX_RXBUF_ENABLE)
                                        (0092) export  LTRX_CmdReset
                                        (0093) export _LTRX_CmdReset
                                        (0094) export  LTRX_bCmdCheck
                                        (0095) export _LTRX_bCmdCheck
                                        (0096) export  LTRX_bCmdLength
                                        (0097) export _LTRX_bCmdLength
                                        (0098) export  LTRX_bErrCheck
                                        (0099) export _LTRX_bErrCheck
                                        (0100) 
                                        (0101) export  LTRX_szGetParam
                                        (0102) export _LTRX_szGetParam
                                        (0103) export  LTRX_szGetRestOfParams
                                        (0104) export _LTRX_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bLTRX_ReadTxStatus
                                        (0114) export _bLTRX_ReadTxStatus
                                        (0115) export  bLTRX_ReadRxData
                                        (0116) export _bLTRX_ReadRxData
                                        (0117) export  bLTRX_ReadRxStatus
                                        (0118) export _bLTRX_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (LTRX_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area LTRX_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: LTRX_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  LTRX_EnableInt:
                                        (0177) _LTRX_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
0BEE: 43 E1 40 OR    REG[0xE1],0x40     (0179)    M8C_EnableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
0BF1: 43 E1 80 OR    REG[0xE1],0x80     (0180)    M8C_EnableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0BF4: 7F       RET                      (0182)    ret
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: LTRX_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  LTRX_DisableInt:
                                        (0209) _LTRX_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
0BF5: 41 E1 BF AND   REG[0xE1],0xBF     (0211)    M8C_DisableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
0BF8: 41 E1 7F AND   REG[0xE1],0x7F     (0212)    M8C_DisableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0BFB: 7F       RET                      (0214)    ret
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: LTRX_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  LTRX_SetTxIntMode:
                                        (0245) _LTRX_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
0BFC: 71 10    OR    F,0x10             (0247)    M8C_SetBank1
0BFE: 21 01    AND   A,0x1              (0248)    and   A, LTRX_INT_MODE_TX_COMPLETE
0C00: A0 07    JZ    0x0C08             (0249)    jz    .SetModeRegEmpty
0C02: 43 38 10 OR    REG[0x38],0x10     (0250)    or    REG[LTRX_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0C05: 70 EF    AND   F,0xEF             (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0C07: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0C08: 41 38 EF AND   REG[0x38],0xEF     (0256)    and   REG[LTRX_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0C0B: 70 EF    AND   F,0xEF             (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0C0D: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: LTRX_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  LTRX_Start:
                                        (0286) _LTRX_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0C0E: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0C10: 60 3B    MOV   REG[0x3B],A        (0291)    mov   REG[LTRX_TX_CONTROL_REG], A
0C12: 60 3F    MOV   REG[0x3F],A        (0292)    mov   REG[LTRX_RX_CONTROL_REG], A
                                        (0293) IF ( LTRX_RXBUF_ENABLE )
0C14: 91 2A    CALL  0x0D40             (0294)    call  _LTRX_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0C16: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: LTRX_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  LTRX_Stop:
                                        (0323) _LTRX_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0C17: 41 3B FE AND   REG[0x3B],0xFE     (0325)    and   REG[LTRX_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0C1A: 41 3F FE AND   REG[0x3F],0xFE     (0326)    and   REG[LTRX_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0C1D: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: LTRX_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  LTRX_SendData:
                                        (0354) _LTRX_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0C1E: 60 39    MOV   REG[0x39],A        (0356)    mov REG[LTRX_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0C20: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: LTRX_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  LTRX_bReadTxStatus:
                                        (0385) _LTRX_bReadTxStatus:
                                        (0386)  bLTRX_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bLTRX_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0C21: 5D 3B    MOV   A,REG[0x3B]        (0389)    mov A,  REG[LTRX_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0C23: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: LTRX_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  LTRX_bReadRxData:
                                        (0418) _LTRX_bReadRxData:
                                        (0419)  bLTRX_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bLTRX_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0C24: 5D 3E    MOV   A,REG[0x3E]        (0422)    mov A, REG[LTRX_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0C26: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: LTRX_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  LTRX_bReadRxStatus:
                                        (0452) _LTRX_bReadRxStatus:
                                        (0453)  bLTRX_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bLTRX_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0C27: 5D 3F    MOV   A,REG[0x3F]        (0456)    mov A,  REG[LTRX_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0C29: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: LTRX_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  LTRX_TxIntMode:
                                        (0486) _LTRX_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0C2A: 21 01    AND   A,0x1              (0489)    and  A,LTRX_INT_MODE_TX_COMPLETE
0C2C: 71 10    OR    F,0x10             (0490)    M8C_SetBank1
0C2E: 39 01    CMP   A,0x1              (0491)    cmp  A,LTRX_INT_MODE_TX_COMPLETE
0C30: A0 06    JZ    0x0C37             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0C32: 41 38 EF AND   REG[0x38],0xEF     (0494)    and  reg[LTRX_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0C35: 80 04    JMP   0x0C3A             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0C37: 43 38 10 OR    REG[0x38],0x10     (0498)    or   reg[LTRX_TX_FUNC_REG],0x10
                                        (0499) 
                                        (0500) .TxIntMode_End:
0C3A: 70 EF    AND   F,0xEF             (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0C3C: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: LTRX_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  LTRX_IntCntl:
                                        (0533) _LTRX_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0C3D: 08       PUSH  A                  (0536)    push A
0C3E: 21 01    AND   A,0x1              (0537)    and  A,LTRX_ENABLE_RX_INT
0C40: A0 06    JZ    0x0C47             (0538)    jz   .DisRxInt
                                        (0539)      ; Enable Rx Interrupt
0C42: 43 E1 80 OR    REG[0xE1],0x80     (0540)    M8C_EnableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
0C45: 80 04    JMP   0x0C4A             (0541)    jmp  .CheckTxInt
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
0C47: 41 E1 7F AND   REG[0xE1],0x7F     (0544)    M8C_DisableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0C4A: 18       POP   A                  (0547)    pop  A
0C4B: 21 02    AND   A,0x2              (0548)    and  A,LTRX_ENABLE_TX_INT
0C4D: A0 06    JZ    0x0C54             (0549)    jz   .DisTxInt
                                        (0550)      ; Enable Tx Interrupt
0C4F: 43 E1 40 OR    REG[0xE1],0x40     (0551)    M8C_EnableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
0C52: 80 04    JMP   0x0C57             (0552)    jmp  .End_IntCntl
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
0C54: 41 E1 BF AND   REG[0xE1],0xBF     (0555)    M8C_DisableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0C57: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: LTRX_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) LTRX_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  LTRX_PutSHexByte:
                                        (0599) _LTRX_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0C58: 30       HALT                     
0C59: 31 32    XOR   A,0x32             
0C5B: 33 34    XOR   A,[X+52]           
0C5D: 35 36    XOR   [X+54],A           
0C5F: 37 38 39 XOR   [X+56],0x39        
0C62: 41 42 43 AND   REG[0x42],0x43     
0C65: 44 45 46 OR    REG[X+0x45],0x46   
0C68: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0C69: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0C6A: 67       ASR   A                  (0603)    asr   A
0C6B: 67       ASR   A                  (0604)    asr   A
0C6C: 67       ASR   A                  (0605)    asr   A
0C6D: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0C6F: FF E7    INDEX 0x0C58             (0607)    index LTRX_HEX_STR                  ; Get Hex value
0C71: 90 0F    CALL  0x0C82             (0608)    call  LTRX_PutChar                  ; Write data to screen
0C73: 18       POP   A                  (0609)    pop   A                             ; Restore value
0C74: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0C76: FF E0    INDEX 0x0C58             (0611)    index LTRX_HEX_STR                  ; Get Hex value
0C78: 90 08    CALL  0x0C82             (0612)    call  LTRX_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0C7A: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: LTRX_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  LTRX_PutSHexInt:
                                        (0643) _LTRX_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0C7B: 4B       SWAP  A,X                (0645)    swap  A,X
0C7C: 9F EA    CALL  0x0C68             (0646)    call  LTRX_PutSHexByte              ; Print MSB
0C7E: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0C7F: 9F E7    CALL  0x0C68             (0648)    call  LTRX_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0C81: 7F       RET                      (0650)    ret
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: LTRX_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[LTRX_TX_CONTROL_REG], LTRX_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[LTRX_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  LTRX_PutChar:
                                        (0684) _LTRX_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
0C82: 49 3B 10 TST   REG[0x3B],0x10     
0C85: AF FC    JZ    0x0C82             
0C87: 60 39    MOV   REG[0x39],A        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0C89: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: LTRX_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  LTRX_cGetChar:
                                        (0718) _LTRX_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0C8A: 49 3F 08 TST   REG[0x3F],0x8      (0720)    tst REG[LTRX_RX_CONTROL_REG],LTRX_RX_REG_FULL    ; Check if a character is ready
0C8D: AF FC    JZ    0x0C8A             (0721)    jz  LTRX_cGetChar                             ; If not loop
0C8F: 5D 3E    MOV   A,REG[0x3E]        (0722)    mov A, REG[LTRX_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0C91: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: LTRX_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  LTRX_cReadChar:
                                        (0753) _LTRX_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0C92: 5D 3F    MOV   A,REG[0x3F]        (0755)    mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Get Status of RX
0C94: 08       PUSH  A                  (0756)    push A
0C95: 21 08    AND   A,0x8              (0757)    and  A,LTRX_RX_COMPLETE                                 ; Check if a character is ready
0C97: B0 04    JNZ   0x0C9C             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0C99: 18       POP   A                  (0759)    pop  A
0C9A: 80 0B    JMP   0x0CA6             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0C9C: 5D 3E    MOV   A,REG[0x3E]        (0763)    mov  A,REG[LTRX_RX_BUFFER_REG ]          
0C9E: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0C9F: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0CA0: 21 A0    AND   A,0xA0             (0767)    and  A,(LTRX_RX_PARITY_ERROR | LTRX_RX_FRAMING_ERROR)
0CA2: B0 03    JNZ   0x0CA6             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0CA4: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0CA5: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0CA6: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_LTRX_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0CA8: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: LTRX_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  LTRX_iReadChar:
                                        (0814) _LTRX_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0CA9: 5D 3F    MOV   A,REG[0x3F]        (0816)    mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0CAB: 21 E8    AND   A,0xE8             (0818)    and  A,(LTRX_RX_ERROR|LTRX_RX_REG_FULL)
0CAD: 08       PUSH  A                  (0819)    push A
0CAE: 21 08    AND   A,0x8              (0820)    and  A,LTRX_RX_COMPLETE                                 ; Check if a character is ready
0CB0: B0 07    JNZ   0x0CB8             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0CB2: 18       POP   A                  (0822)    pop  A
0CB3: 29 01    OR    A,0x1              (0823)    or   A,LTRX_RX_NO_DATA                                  ; Add no data flag
0CB5: 4B       SWAP  A,X                (0824)    swap A,X
0CB6: 80 07    JMP   0x0CBE             (0825)    jmp  End_LTRX_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0CB8: 18       POP   A                  (0828)    pop  A
0CB9: 21 E0    AND   A,0xE0             (0829)    and  A,LTRX_RX_ERROR
0CBB: 4B       SWAP  A,X                (0830)    swap A,X
0CBC: 5D 3E    MOV   A,REG[0x3E]        (0831)    mov  A,REG[LTRX_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_LTRX_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0CBE: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: LTRX_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  LTRX_PutString:
                                        (0867) _LTRX_PutString:
0CBF: 70 BF    AND   F,0xBF             (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
0CC1: 60 D3    MOV   REG[0xD3],A        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0CC3: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0CC5: A0 06    JZ    0x0CCC             (0872)    jz    End_PutString                           ; Check for end of string
0CC7: 9F B9    CALL  0x0C82             (0873)    call  LTRX_PutChar                            ; Send character to Tx port
0CC9: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0CCA: 8F F8    JMP   0x0CC3             (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
0CCC: 70 3F    AND   F,0x3F             
0CCE: 71 C0    OR    F,0xC0             (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0CD0: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: LTRX_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  LTRX_Write:
                                        (0914) _LTRX_Write:
0CD1: 70 BF    AND   F,0xBF             (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
0CD3: 62 D3 07 MOV   REG[0xD3],0x7      (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0CD6: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0CD7: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0CD9: A0 1A    JZ    0x0CF4             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0CDB: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0CDD: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0CDF: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0CE1: 60 D3    MOV   REG[0xD3],A        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0CE3: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0CE5: 49 3B 10 TST   REG[0x3B],0x10     
0CE8: AF FC    JZ    0x0CE5             
0CEA: 60 39    MOV   REG[0x39],A        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0CEC: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0CED: 62 D3 07 MOV   REG[0xD3],0x7      (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0CF0: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0CF2: 8F E4    JMP   0x0CD7             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
0CF4: 70 3F    AND   F,0x3F             
0CF6: 71 C0    OR    F,0xC0             (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0CF8: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: LTRX_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  LTRX_CWrite:
                                        (0975) _LTRX_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0CF9: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0CFA: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0CFD: B0 06    JNZ   0x0D04             (0980)    jnz   .CW_WRITEIT
0CFF: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0D02: A0 1D    JZ    0x0D20             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0D04: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0D05: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0D07: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0D09: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0D0A: 49 3B 10 TST   REG[0x3B],0x10     
0D0D: AF FC    JZ    0x0D0A             
0D0F: 60 39    MOV   REG[0x39],A        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0D11: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0D12: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0D15: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0D18: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0D1B: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0D1E: 8F DB    JMP   0x0CFA             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
0D20: 70 3F    AND   F,0x3F             
0D22: 71 C0    OR    F,0xC0             (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0D24: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: LTRX_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  LTRX_CPutString:
                                        (1027) _LTRX_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0D25: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0D26: 10       PUSH  X                  (1030)    push  X
0D27: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0D28: A0 0B    JZ    0x0D34             (1032)    jz    .End_CPutString
0D2A: 9F 56    CALL  0x0C82             (1033)    call  LTRX_PutChar                            ; Print character
0D2C: 20       POP   X                  (1034)    pop   X
0D2D: 18       POP   A                  (1035)    pop   A
0D2E: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0D2F: DF F5    JNC   0x0D25             (1037)    jnc   LTRX_CPutString                         ; Check for carry
0D31: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0D32: 8F F2    JMP   0x0D25             (1039)    jmp   LTRX_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0D34: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0D36: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: LTRX_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  LTRX_PutCRLF:
                                        (1071) _LTRX_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0D37: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0D39: 9F 47    CALL  0x0C82             (1074)    call LTRX_PutChar
0D3B: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0D3D: 9F 43    CALL  0x0C82             (1076)    call LTRX_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0D3F: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (LTRX_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: LTRX_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  LTRX_CmdReset:
                                        (1119) _LTRX_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
0D40: 62 D0 00 MOV   REG[0xD0],0x0      (1121)    RAM_SETPAGE_CUR >LTRX_aRxBuffer
0D43: 55 1C 00 MOV   [iles+13],0x0      (1122)    mov [LTRX_aRxBuffer], 0x00
0D46: 62 D0 00 MOV   REG[0xD0],0x0      (1123)    RAM_SETPAGE_CUR >LTRX_bRxCnt
0D49: 55 02 00 MOV   [0x2],0x0          (1124)    mov [LTRX_bRxCnt], 0x00
0D4C: 26 01 00 AND   [0x1],0x0          (1125)    and [LTRX_fStatus], 0x00
0D4F: 62 D0 00 MOV   REG[0xD0],0x0      (1126)    RAM_SETPAGE_CUR >ptrParam
0D52: 55 54 00 MOV   [errno+2],0x0      (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0D55: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: LTRX_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  LTRX_bCmdCheck:
                                        (1162) _LTRX_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
0D56: 62 D0 00 MOV   REG[0xD0],0x0      (1164)    RAM_SETPAGE_CUR >LTRX_fStatus
0D59: 51 01    MOV   A,[0x1]            (1165)    mov A,  [LTRX_fStatus]
0D5B: 21 01    AND   A,0x1              (1166)    and A, LTRX_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
0D5D: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: LTRX_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  LTRX_bErrCheck:
                                        (1206) _LTRX_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
0D5E: 62 D0 00 MOV   REG[0xD0],0x0      (1208)    RAM_SETPAGE_CUR >LTRX_fStatus
0D61: 51 01    MOV   A,[0x1]            (1209)    mov A,  [LTRX_fStatus]
0D63: 21 F0    AND   A,0xF0             (1210)    and A, LTRX_RX_BUF_ERROR                      ; Mask off Error status
0D65: 26 01 0F AND   [0x1],0xF          (1211)    and [LTRX_fStatus], ~LTRX_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
0D68: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: LTRX_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  LTRX_bCmdLength:
                                        (1241) _LTRX_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
0D69: 62 D0 00 MOV   REG[0xD0],0x0      (1243)    RAM_SETPAGE_CUR >LTRX_bRxCnt
0D6C: 51 02    MOV   A,[0x2]            (1244)    mov A,  [LTRX_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
0D6E: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: LTRX_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from LTRX Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     LTRX_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, LTRX_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See LTRX_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  LTRX_szGetParam:
                                        (1299) _LTRX_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
0D6F: 70 BF    AND   F,0xBF             (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
0D71: 62 D0 00 MOV   REG[0xD0],0x0      (1303)    RAM_SETPAGE_CUR >ptrParam
0D74: 50 1C    MOV   A,0x1C             (1304)    mov   A, <LTRX_aRxBuffer                 ; Get address to receive buffer
0D76: 02 54    ADD   A,[errno+2]        (1305)    add   A, [ptrParam]                      ; Add string offset
0D78: 5C       MOV   X,A                (1306)    mov   X, A
0D79: 62 D3 00 MOV   REG[0xD3],0x0      (1307)    RAM_SETPAGE_IDX >LTRX_aRxBuffer
0D7C: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
0D7E: B0 04    JNZ   0x0D83             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0D80: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0D81: 80 33    JMP   0x0DB5             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
0D83: 39 20    CMP   A,0x20             (1315)    cmp   A, LTRX_DELIMITER                  ; Do we have a delimiter?
0D85: B0 11    JNZ   0x0D97             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0D87: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
0D88: 76 54    INC   [errno+2]          (1318)    inc   [ptrParam]                         ;          the stored pointer.
0D8A: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
0D8C: 3C 54 0F CMP   [errno+2],0xF      (1320)    cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; End of buffer?
0D8F: BF F3    JNZ   0x0D83             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
0D91: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
0D92: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
0D95: 80 1F    JMP   0x0DB5             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
0D97: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
0D98: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
0D99: 76 54    INC   [errno+2]          (1334)    inc   [ptrParam]
0D9B: 3C 54 0F CMP   [errno+2],0xF      (1335)    cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0D9E: AF F3    JZ    0x0D92             (1336)    jz    .TerminateString
0DA0: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
0DA2: A0 12    JZ    0x0DB5             (1338)    jz    .End_GetNextParam
0DA4: 39 20    CMP   A,0x20             (1339)    cmp   A, LTRX_DELIMITER                  ; Check if we have a delimiter
0DA6: BF F1    JNZ   0x0D98             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
0DA8: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
0DAB: 76 54    INC   [errno+2]          (1342)    inc   [ptrParam]
0DAD: 3C 54 0F CMP   [errno+2],0xF      (1343)    cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0DB0: B0 04    JNZ   0x0DB5             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
0DB2: 55 54 0F MOV   [errno+2],0xF      (1345)    mov   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
0DB5: 20       POP   X                  (1348)    pop   X
0DB6: 10       PUSH  X                  (1349)    push  X
0DB7: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
0DBA: B0 0B    JNZ   0x0DC6             (1351)    jnz   .NotNullString
0DBC: 20       POP   X                  (1352)    pop   X
0DBD: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
0DBF: 50 00    MOV   A,0x0              (1354)    mov   A, >LTRX_aRxBuffer
0DC1: 70 3F    AND   F,0x3F             
0DC3: 71 C0    OR    F,0xC0             (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0DC5: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0DC6: 20       POP   X                  (1360)    pop  X
0DC7: 50 00    MOV   A,0x0              (1361)    mov  A, >LTRX_aRxBuffer                  ; Return pointer
0DC9: 70 3F    AND   F,0x3F             
0DCB: 71 C0    OR    F,0xC0             (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0DCD: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: LTRX_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  LTRX_szGetRestOfParams:
                                        (1393) _LTRX_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
0DCE: 62 D0 00 MOV   REG[0xD0],0x0      (1395)    RAM_SETPAGE_CUR >ptrParam
0DD1: 50 1C    MOV   A,0x1C             (1396)    mov  A, <LTRX_aRxBuffer                  ; Get address to receive buffer
0DD3: 02 54    ADD   A,[errno+2]        (1397)    add  A, [ptrParam]                       ; Add string offset
0DD5: 5C       MOV   X,A                (1398)    mov  X,A
0DD6: 50 00    MOV   A,0x0              (1399)    mov  A,>LTRX_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0DD8: 7F       RET                      (1401)    ret
(1402) .ENDSECTION
(1403) 
(1404) ENDIF
(1405) 
(1406) 
(1407) ; End of File LTRX.asm
FILE: lib\led1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED1.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED1_Start
                                        (0027) export  LED1_Start
                                        (0028) 
                                        (0029) export _LED1_Stop
                                        (0030) export  LED1_Stop
                                        (0031) 
                                        (0032) export _LED1_On
                                        (0033) export  LED1_On
                                        (0034) 
                                        (0035) export _LED1_Off
                                        (0036) export  LED1_Off
                                        (0037) 
                                        (0038) export _LED1_Switch
                                        (0039) export  LED1_Switch
                                        (0040) 
                                        (0041) export _LED1_Invert
                                        (0042) export  LED1_Invert
                                        (0043) 
                                        (0044) export _LED1_GetState
                                        (0045) export  LED1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED1_Start(void)
                                        (0054) ;  FUNCTION NAME: LED1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED1_On:
                                        (0079)  LED1_On:
0DD9: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0DDB: 80 03    JMP   0x0DDF             (0081)    jmp  LED1_Switch 
                                        (0082) 
                                        (0083) _LED1_Start:
                                        (0084)  LED1_Start:
                                        (0085) _LED1_Stop:
                                        (0086)  LED1_Stop:
                                        (0087) _LED1_Off:
                                        (0088)  LED1_Off:
0DDD: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED1_Switch:
                                        (0092)  LED1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
0DDF: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_3_Data_SHADE
                                        (0096) 
0DE2: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0DE4: A0 06    JZ    0x0DEB             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_3_Data_SHADE],LED1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
0DE6: 26 00 7F AND   [0x0],0x7F         (0104)    and  [Port_3_Data_SHADE],~LED1_PinMask
                                        (0105) ENDIF
0DE9: 80 04    JMP   0x0DEE             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_3_Data_SHADE],~LED1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
0DEB: 2E 00 80 OR    [0x0],0x80         (0112)    or   [Port_3_Data_SHADE],LED1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0DEE: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_3_Data_SHADE]
0DF0: 60 0C    MOV   REG[0xC],A         (0117)    mov  reg[LED1_PortDR],A
                                        (0118) 
0DF2: 70 3F    AND   F,0x3F             
0DF4: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0DF6: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED1_Invert:
                                        (0144)  LED1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
0DF7: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_3_Data_SHADE
                                        (0148) 
0DFA: 36 00 80 XOR   [0x0],0x80         (0149)    xor  [Port_3_Data_SHADE],LED1_PinMask
0DFD: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_3_Data_SHADE]
0DFF: 60 0C    MOV   REG[0xC],A         (0151)    mov  reg[LED1_PortDR],A
                                        (0152) 
0E01: 70 3F    AND   F,0x3F             
0E03: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0E05: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED1_GetState:
                                        (0177)  LED1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
0E06: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_3_Data_SHADE
                                        (0181) 
0E09: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_3_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
0E0B: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0E0C: 21 80    AND   A,0x80             (0188)    and   A,LED1_PinMask                ; Mask off the trash
0E0E: A0 03    JZ    0x0E12             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0E10: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
0E12: 70 3F    AND   F,0x3F             
0E14: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0E16: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\counter8_ltrxint.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8_ltrxINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter8_ltrx.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter8_ltrx_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter8_ltrx_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter8_ltrx_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070) 
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
0E17: 7E       RETI                     (0076)    reti
(0077) 
(0078) 
(0079) ; end of file Counter8_ltrxINT.asm
FILE: lib\counter8_ltrx.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8_ltrx.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter8_ltrx.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter8_ltrx_EnableInt
                                        (0030) export _Counter8_ltrx_EnableInt
                                        (0031) export  Counter8_ltrx_DisableInt
                                        (0032) export _Counter8_ltrx_DisableInt
                                        (0033) export  Counter8_ltrx_Start
                                        (0034) export _Counter8_ltrx_Start
                                        (0035) export  Counter8_ltrx_Stop
                                        (0036) export _Counter8_ltrx_Stop
                                        (0037) export  Counter8_ltrx_WritePeriod
                                        (0038) export _Counter8_ltrx_WritePeriod
                                        (0039) export  Counter8_ltrx_WriteCompareValue
                                        (0040) export _Counter8_ltrx_WriteCompareValue
                                        (0041) export  Counter8_ltrx_bReadCompareValue
                                        (0042) export _Counter8_ltrx_bReadCompareValue
                                        (0043) export  Counter8_ltrx_bReadCounter
                                        (0044) export _Counter8_ltrx_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bCounter8_ltrx_ReadCompareValue  ; deprecated
                                        (0049) export _bCounter8_ltrx_ReadCompareValue  ; deprecated
                                        (0050) export  bCounter8_ltrx_ReadCounter       ; deprecated
                                        (0051) export _bCounter8_ltrx_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter8_ltrx_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter8_ltrx_EnableInt:
                                        (0082) _Counter8_ltrx_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
0E18: 43 E1 10 OR    REG[0xE1],0x10     (0084)    Counter8_ltrx_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0E1B: 7F       RET                      (0086)    ret
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter8_ltrx_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter8_ltrx_DisableInt:
                                        (0109) _Counter8_ltrx_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
0E1C: 41 E1 EF AND   REG[0xE1],0xEF     (0111)    Counter8_ltrx_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0E1F: 7F       RET                      (0113)    ret
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter8_ltrx_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter8_ltrx_Start:
                                        (0138) _Counter8_ltrx_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
0E20: 43 33 01 OR    REG[0x33],0x1      (0140)    Counter8_ltrx_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0E23: 7F       RET                      (0142)    ret
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter8_ltrx_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter8_ltrx_Stop:
                                        (0166) _Counter8_ltrx_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
0E24: 41 33 FE AND   REG[0x33],0xFE     (0168)    Counter8_ltrx_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0E27: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter8_ltrx_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter8_ltrx_WritePeriod:
                                        (0196) _Counter8_ltrx_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0E28: 60 31    MOV   REG[0x31],A        (0198)    mov   reg[Counter8_ltrx_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
0E2A: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: Counter8_ltrx_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  Counter8_ltrx_WriteCompareValue:
                                        (0223) _Counter8_ltrx_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
0E2B: 60 32    MOV   REG[0x32],A        (0225)    mov   reg[Counter8_ltrx_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0E2D: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: Counter8_ltrx_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  Counter8_ltrx_bReadCompareValue:
                                        (0250) _Counter8_ltrx_bReadCompareValue:
                                        (0251)  bCounter8_ltrx_ReadCompareValue:                ; this name deprecated
                                        (0252) _bCounter8_ltrx_ReadCompareValue:                ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0E2E: 5D 32    MOV   A,REG[0x32]        (0254)    mov   A, reg[Counter8_ltrx_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0E30: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: Counter8_ltrx_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  Counter8_ltrx_bReadCounter:
                                        (0284) _Counter8_ltrx_bReadCounter:
                                        (0285)  bCounter8_ltrx_ReadCounter:                     ; this name deprecated
                                        (0286) _bCounter8_ltrx_ReadCounter:                     ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0E31: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0E32: 5D 32    MOV   A,REG[0x32]        (0296)    mov   A, reg[Counter8_ltrx_COMPARE_REG]       ; Save the Compare register on the stack
0E34: 08       PUSH  A                  (0297)    push  A                                       ;
0E35: 5D 33    MOV   A,REG[0x33]        (0298)    mov   A, reg[Counter8_ltrx_CONTROL_REG]       ; Save CR0 (running or stopped state)
0E37: 08       PUSH  A                  (0299)    push  A                                       ;
0E38: 41 33 FE AND   REG[0x33],0xFE     (0300)    Counter8_ltrx_Stop_M                          ; Disable (stop) the Counter if running
0E3B: 71 10    OR    F,0x10             (0301)    M8C_SetBank1                                  ;
0E3D: 5D 31    MOV   A,REG[0x31]        (0302)    mov   A, reg[Counter8_ltrx_INPUT_REG]         ; save the clock input setting
0E3F: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0E40: 62 31 00 MOV   REG[0x31],0x0      (0305)    mov   reg[Counter8_ltrx_INPUT_REG], INPUT_REG_NULL
0E43: 70 EF    AND   F,0xEF             (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0E45: 5D 30    MOV   A,REG[0x30]        (0308)    mov   A, reg[Counter8_ltrx_COUNTER_REG]       ; DR2 <- DR0
0E47: 5D 32    MOV   A,REG[0x32]        (0309)    mov   A, reg[Counter8_ltrx_COMPARE_REG]       ; Stash the Count on the stack
0E49: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0E4A: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0E4C: 60 32    MOV   REG[0x32],A        (0312)    mov   reg[Counter8_ltrx_COMPARE_REG], A
0E4E: 71 10    OR    F,0x10             (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0E50: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0E52: 60 31    MOV   REG[0x31],A        (0315)    mov   reg[Counter8_ltrx_INPUT_REG], A         ;
0E54: 70 EF    AND   F,0xEF             (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
0E56: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
0E58: 60 33    MOV   REG[0x33],A        (0318)    mov   reg[Counter8_ltrx_CONTROL_REG], A       ;     this function was first called
0E5A: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0E5B: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0E5D: 70 3F    AND   F,0x3F             
0E5F: 71 C0    OR    F,0xC0             (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0E61: 7F       RET                      (0322)    ret
(0323) 
(0324) .ENDSECTION
(0325) 
(0326) ; End of File Counter8_ltrx.asm
FILE: D:\hollevo\projects\personal\home\oswald\firmware\SENSOR~1\SENSOR~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Sensor gateway on OSWALD PSoC ethernet board
(0003) //
(0004) // Supports OneWire temperature devices, Sensirion SHTxx devices and
(0005) // a PWM-based output that is used to generate a 0-10V to control the 
(0006) // speed of a Drexel and Weiss home ventilation unit
(0007) //
(0008) // OneWire bus connects to P25/P23. No pullup is required!!
(0009) //
(0010) // Connect a Sensirion SHT11 or SHT15 sensor to 
(0011) //   DATA on P21 with a 10k pullup to VDD
(0012) //   CLK  on P47
(0013) //
(0014) // PWM output on P27
(0015) //
(0016) // LTRX UART speed is 19200 bps
(0017) //
(0018) // Lieven Hollevoet, 2009-2010.
(0019) // http://electronics.lika.be
(0020) //----------------------------------------------------------------------------
(0021) 
(0022) #include <m8c.h>        // part specific constants and macros
(0023) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0024) #include "oo.h"
(0025) #include "shtxx.h"
(0026) #include <string.h>
(0027) #include <stdio.h>
(0028) #include <stdlib.h>
(0029) 
(0030) #pragma interrupt_handler Ticker_ISR
(0031) void Ticker_ISR(void)
__text_start|_Ticker_ISR|_Ticker_ISR:
    0E62: 71 C0    OR    F,0xC0
    0E64: 08       PUSH  A
    0E65: 5D D0    MOV   A,REG[0xD0]
    0E67: 08       PUSH  A
    0E68: 5D D3    MOV   A,REG[0xD3]
    0E6A: 08       PUSH  A
    0E6B: 5D D4    MOV   A,REG[0xD4]
    0E6D: 08       PUSH  A
    0E6E: 5D D5    MOV   A,REG[0xD5]
    0E70: 08       PUSH  A
    0E71: 62 D0 00 MOV   REG[0xD0],0x0
    0E74: 51 3A    MOV   A,[__r0]
    0E76: 08       PUSH  A
    0E77: 51 39    MOV   A,[__r1]
    0E79: 08       PUSH  A
    0E7A: 51 38    MOV   A,[__r2]
    0E7C: 08       PUSH  A
    0E7D: 51 37    MOV   A,[__r3]
    0E7F: 08       PUSH  A
    0E80: 51 36    MOV   A,[__r4]
    0E82: 08       PUSH  A
    0E83: 51 35    MOV   A,[__r5]
    0E85: 08       PUSH  A
    0E86: 51 34    MOV   A,[__r6]
    0E88: 08       PUSH  A
    0E89: 51 33    MOV   A,[__r7]
    0E8B: 08       PUSH  A
    0E8C: 51 32    MOV   A,[__r8]
    0E8E: 08       PUSH  A
    0E8F: 51 31    MOV   A,[__r9]
    0E91: 08       PUSH  A
    0E92: 51 30    MOV   A,[__r10]
    0E94: 08       PUSH  A
    0E95: 51 2F    MOV   A,[__r11]
    0E97: 08       PUSH  A
    0E98: 51 2E    MOV   A,[__rX]
    0E9A: 08       PUSH  A
    0E9B: 51 2D    MOV   A,[__rY]
    0E9D: 08       PUSH  A
    0E9E: 51 2C    MOV   A,[__rZ]
    0EA0: 08       PUSH  A
(0032) {
(0033) 	LED1_Invert();
    0EA1: 10       PUSH  X
    0EA2: 7C 0D F7 LCALL 0x0DF7
    0EA5: 20       POP   X
(0034) 	return;
    0EA6: 62 D0 00 MOV   REG[0xD0],0x0
    0EA9: 18       POP   A
    0EAA: 53 2C    MOV   [__rZ],A
    0EAC: 18       POP   A
    0EAD: 53 2D    MOV   [__rY],A
    0EAF: 18       POP   A
    0EB0: 53 2E    MOV   [__rX],A
    0EB2: 18       POP   A
    0EB3: 53 2F    MOV   [__r11],A
    0EB5: 18       POP   A
    0EB6: 53 30    MOV   [__r10],A
    0EB8: 18       POP   A
    0EB9: 53 31    MOV   [__r9],A
    0EBB: 18       POP   A
    0EBC: 53 32    MOV   [__r8],A
    0EBE: 18       POP   A
    0EBF: 53 33    MOV   [__r7],A
    0EC1: 18       POP   A
    0EC2: 53 34    MOV   [__r6],A
    0EC4: 18       POP   A
    0EC5: 53 35    MOV   [__r5],A
    0EC7: 18       POP   A
    0EC8: 53 36    MOV   [__r4],A
    0ECA: 18       POP   A
    0ECB: 53 37    MOV   [__r3],A
    0ECD: 18       POP   A
    0ECE: 53 38    MOV   [__r2],A
    0ED0: 18       POP   A
    0ED1: 53 39    MOV   [__r1],A
    0ED3: 18       POP   A
    0ED4: 53 3A    MOV   [__r0],A
    0ED6: 18       POP   A
    0ED7: 60 D5    MOV   REG[0xD5],A
    0ED9: 18       POP   A
    0EDA: 60 D4    MOV   REG[0xD4],A
    0EDC: 18       POP   A
    0EDD: 60 D3    MOV   REG[0xD3],A
    0EDF: 18       POP   A
    0EE0: 60 D0    MOV   REG[0xD0],A
    0EE2: 18       POP   A
    0EE3: 7E       RETI  
(0035) }
(0036) 
(0037) void print_header(void){
(0038) 	cprintf("Sensor gateway v. 2.0\n");
_print_header:
    0EE4: 50 02    MOV   A,0x2
    0EE6: 08       PUSH  A
    0EE7: 50 F9    MOV   A,0xF9
    0EE9: 08       PUSH  A
    0EEA: 7C 2C C9 LCALL _cprintf
(0039) 	cprintf("Lieven Hollevoet, 2010\n\n");
    0EED: 50 02    MOV   A,0x2
    0EEF: 08       PUSH  A
    0EF0: 50 E0    MOV   A,0xE0
    0EF2: 08       PUSH  A
    0EF3: 7C 2C C9 LCALL _cprintf
    0EF6: 38 FC    ADD   SP,0xFC
(0040) 	return;
    0EF8: 7F       RET   
(0041) }
(0042) 
(0043) void print_help(void){
(0044) 	print_header();
_print_help:
    0EF9: 9F E9    CALL  _print_header
(0045) 	cprintf("Press '?' to acquire sensor values and to generate a report\r\n");
    0EFB: 50 02    MOV   A,0x2
    0EFD: 08       PUSH  A
    0EFE: 50 A2    MOV   A,0xA2
    0F00: 08       PUSH  A
    0F01: 7C 2C C9 LCALL _cprintf
(0046) 	cprintf("Or enter 'venti'\r\n followed by a value 0 - 100 to control the PWM output\r\n");
    0F04: 50 02    MOV   A,0x2
    0F06: 08       PUSH  A
    0F07: 50 57    MOV   A,0x57
    0F09: 08       PUSH  A
    0F0A: 7C 2C C9 LCALL _cprintf
    0F0D: 38 FC    ADD   SP,0xFC
    0F0F: 7F       RET   
(0047) }
(0048) 
(0049) // Init hardware blocks
(0050) void hardware_init(void){
(0051) 
(0052) 	// Start hardware/firmware functions
(0053) 	Counter8_ltrx_Start();		// Counter for UART baudrate generation
_hardware_init:
    0F10: 10       PUSH  X
    0F11: 7C 0E 20 LCALL 0x0E20
(0054) 	LED1_Start();				// Status LED
    0F14: 7C 0D DD LCALL 0x0DDD
(0055) 	OneWire_Start();			// OneWire lib init
    0F17: 7C 08 68 LCALL 0x0868
    0F1A: 20       POP   X
(0056) 	s_Start();					// SHT sensor init
    0F1B: 7C 14 66 LCALL _s_Start
(0057) 	Speed_PWM_Start();			// Init the PWM for the speed control
    0F1E: 10       PUSH  X
    0F1F: 7C 08 29 LCALL 0x0829
(0058) 	
(0059) 	// UART
(0060) 	LTRX_CmdReset(); 			// Initialize receiver/cmd buffer
    0F22: 7C 0D 40 LCALL 0x0D40
(0061) 	LTRX_EnableInt(); 			// Enable RX interrupts
    0F25: 7C 0B EE LCALL 0x0BEE
    0F28: 20       POP   X
(0062) 	LTRX_Start(UART_PARITY_NONE); // Enable UART
    0F29: 10       PUSH  X
    0F2A: 50 00    MOV   A,0x0
    0F2C: 7C 0C 0E LCALL 0x0C0E
(0063) 
(0064) 	// Interrupts
(0065) 	Speed_PWM_DisableInt();
    0F2F: 7C 08 25 LCALL 0x0825
(0066) 	Ticker_EnableInt();
    0F32: 7C 07 C0 LCALL 0x07C0
    0F35: 20       POP   X
(0067) 	M8C_EnableGInt ; 
    0F36: 71 01    OR    F,0x1
(0068) 
(0069) 	Ticker_Start();				// Ticker for flashing LED
    0F38: 10       PUSH  X
    0F39: 7C 07 C8 LCALL 0x07C8
    0F3C: 20       POP   X
    0F3D: 7F       RET   
(0070) 
(0071) }
(0072) 
(0073) void main(void)
(0074) {
_main:
  pwm_value            --> X+2
  UART_bfr             --> X+0
    0F3E: 10       PUSH  X
    0F3F: 4F       MOV   X,SP
    0F40: 38 03    ADD   SP,0x3
(0075) 
(0076) 	char * UART_bfr; // Parameter pointer for UART RX buffer
(0077) 	char pwm_value;
(0078) 	
(0079) 	hardware_init();	
    0F42: 9F CC    CALL  _hardware_init
(0080) 	
(0081) 	Speed_PWM_WritePulseWidth(100);
    0F44: 10       PUSH  X
    0F45: 50 64    MOV   A,0x64
    0F47: 7C 08 34 LCALL 0x0834
    0F4A: 20       POP   X
(0082) 	
(0083) 	print_help();
    0F4B: 9F AC    CALL  _print_help
    0F4D: 81 0A    JMP   0x1058
(0084) 	
(0085) 	while(1) {
(0086) 	
(0087) 		// Check if data came in from the Lantronix and reply if required
(0088) 		if (LTRX_bCmdCheck()) { // Wait for command
    0F4F: 10       PUSH  X
    0F50: 7C 0D 56 LCALL 0x0D56
    0F53: 62 D0 00 MOV   REG[0xD0],0x0
    0F56: 20       POP   X
    0F57: 39 00    CMP   A,0x0
    0F59: A0 FE    JZ    0x1058
(0089) 			if(UART_bfr = LTRX_szGetParam()) { // More than delimiter?
    0F5B: 10       PUSH  X
    0F5C: 7C 0D 6F LCALL 0x0D6F
    0F5F: 62 D0 00 MOV   REG[0xD0],0x0
    0F62: 53 3A    MOV   [__r0],A
    0F64: 5A 39    MOV   [__r1],X
    0F66: 20       POP   X
    0F67: 51 39    MOV   A,[__r1]
    0F69: 54 01    MOV   [X+1],A
    0F6B: 51 3A    MOV   A,[__r0]
    0F6D: 54 00    MOV   [X+0],A
    0F6F: 3C 3A 00 CMP   [__r0],0x0
    0F72: B0 06    JNZ   0x0F79
    0F74: 3C 39 00 CMP   [__r1],0x0
    0F77: A0 DB    JZ    0x1053
(0090) 				if (*UART_bfr == '?'){
    0F79: 62 D0 00 MOV   REG[0xD0],0x0
    0F7C: 52 01    MOV   A,[X+1]
    0F7E: 53 39    MOV   [__r1],A
    0F80: 52 00    MOV   A,[X+0]
    0F82: 60 D4    MOV   REG[0xD4],A
    0F84: 3E 39    MVI   A,[__r1]
    0F86: 39 3F    CMP   A,0x3F
    0F88: B0 2A    JNZ   0x0FB3
(0091) 					print_header();
    0F8A: 9F 58    CALL  _print_header
(0092) 					// Report values of all connected sensors
(0093) 					cprintf("-> OneWire devices\r\n");
    0F8C: 50 02    MOV   A,0x2
    0F8E: 08       PUSH  A
    0F8F: 50 42    MOV   A,0x42
    0F91: 08       PUSH  A
    0F92: 7C 2C C9 LCALL _cprintf
    0F95: 38 FE    ADD   SP,0xFE
(0094) 					oo_report();
    0F97: 7C 13 0C LCALL _oo_report
(0095) 					cprintf("-> SHTxx sensors\r\n");
    0F9A: 50 02    MOV   A,0x2
    0F9C: 08       PUSH  A
    0F9D: 50 2F    MOV   A,0x2F
    0F9F: 08       PUSH  A
    0FA0: 7C 2C C9 LCALL _cprintf
(0096) 					s_do_measure();
    0FA3: 7C 1B 96 LCALL _s_do_measure
(0097) 					cprintf("-> EOT\r\n");
    0FA6: 50 02    MOV   A,0x2
    0FA8: 08       PUSH  A
    0FA9: 50 26    MOV   A,0x26
    0FAB: 08       PUSH  A
    0FAC: 7C 2C C9 LCALL _cprintf
    0FAF: 38 FC    ADD   SP,0xFC
(0098) 				} else if (cstrcmp("venti", UART_bfr)== 0){
    0FB1: 80 A1    JMP   0x1053
    0FB3: 52 00    MOV   A,[X+0]
    0FB5: 08       PUSH  A
    0FB6: 52 01    MOV   A,[X+1]
    0FB8: 08       PUSH  A
    0FB9: 50 02    MOV   A,0x2
    0FBB: 08       PUSH  A
    0FBC: 50 20    MOV   A,0x20
    0FBE: 08       PUSH  A
    0FBF: 7C 23 8B LCALL _cstrcmpLMM
    0FC2: 38 FC    ADD   SP,0xFC
    0FC4: 62 D0 00 MOV   REG[0xD0],0x0
    0FC7: 3C 3A 00 CMP   [__r0],0x0
    0FCA: B0 86    JNZ   0x1051
    0FCC: 3C 39 00 CMP   [__r1],0x0
    0FCF: B0 81    JNZ   0x1051
(0099) 					// Get the next parameter
(0100) 					if (UART_bfr = LTRX_szGetParam()){
    0FD1: 10       PUSH  X
    0FD2: 7C 0D 6F LCALL 0x0D6F
    0FD5: 62 D0 00 MOV   REG[0xD0],0x0
    0FD8: 53 3A    MOV   [__r0],A
    0FDA: 5A 39    MOV   [__r1],X
    0FDC: 20       POP   X
    0FDD: 51 39    MOV   A,[__r1]
    0FDF: 54 01    MOV   [X+1],A
    0FE1: 51 3A    MOV   A,[__r0]
    0FE3: 54 00    MOV   [X+0],A
    0FE5: 3C 3A 00 CMP   [__r0],0x0
    0FE8: B0 06    JNZ   0x0FEF
    0FEA: 3C 39 00 CMP   [__r1],0x0
    0FED: A0 56    JZ    0x1044
(0101) 						pwm_value = atoi(UART_bfr);
    0FEF: 52 00    MOV   A,[X+0]
    0FF1: 08       PUSH  A
    0FF2: 52 01    MOV   A,[X+1]
    0FF4: 08       PUSH  A
    0FF5: 7C 23 CD LCALL _atoi
    0FF8: 38 FE    ADD   SP,0xFE
    0FFA: 62 D0 00 MOV   REG[0xD0],0x0
    0FFD: 51 39    MOV   A,[__r1]
    0FFF: 54 02    MOV   [X+2],A
(0102) 						if (pwm_value >= 0 && pwm_value <= 100) {
    1001: 3D 02 00 CMP   [X+2],0x0
    1004: C0 32    JC    0x1037
    1006: 50 64    MOV   A,0x64
    1008: 3B 02    CMP   A,[X+2]
    100A: C0 2C    JC    0x1037
(0103) 							cprintf("Setting venti speed to ");
    100C: 50 02    MOV   A,0x2
    100E: 08       PUSH  A
    100F: 50 08    MOV   A,0x8
    1011: 08       PUSH  A
    1012: 7C 2C C9 LCALL _cprintf
    1015: 38 FE    ADD   SP,0xFE
(0104) 							LTRX_PutSHexByte(pwm_value);
    1017: 10       PUSH  X
    1018: 52 02    MOV   A,[X+2]
    101A: 7C 0C 68 LCALL 0x0C68
    101D: 20       POP   X
(0105) 							cprintf(" %\r\n");
    101E: 50 02    MOV   A,0x2
    1020: 08       PUSH  A
    1021: 50 03    MOV   A,0x3
    1023: 08       PUSH  A
    1024: 7C 2C C9 LCALL _cprintf
    1027: 38 FE    ADD   SP,0xFE
(0106) 							Speed_PWM_WritePulseWidth(100-pwm_value);					
    1029: 62 D0 00 MOV   REG[0xD0],0x0
    102C: 50 64    MOV   A,0x64
    102E: 13 02    SUB   A,[X+2]
    1030: 10       PUSH  X
    1031: 7C 08 34 LCALL 0x0834
    1034: 20       POP   X
(0107) 						} else {
    1035: 80 1D    JMP   0x1053
(0108) 							cprintf("Invalid speed setting passed (valid: 0-100)\r\n");
    1037: 50 01    MOV   A,0x1
    1039: 08       PUSH  A
    103A: 50 D5    MOV   A,0xD5
    103C: 08       PUSH  A
    103D: 7C 2C C9 LCALL _cprintf
    1040: 38 FE    ADD   SP,0xFE
(0109) 						}
(0110) 					} else {
    1042: 80 10    JMP   0x1053
(0111) 						cprintf("Enter 'venti' followed by a value beween 0 and 100\r\n");
    1044: 50 01    MOV   A,0x1
    1046: 08       PUSH  A
    1047: 50 A0    MOV   A,0xA0
    1049: 08       PUSH  A
    104A: 7C 2C C9 LCALL _cprintf
    104D: 38 FE    ADD   SP,0xFE
(0112) 						
(0113) 					}
(0114) 				} else {
    104F: 80 03    JMP   0x1053
(0115) 					print_help();
    1051: 9E A6    CALL  _print_help
(0116) 				}
(0117) 				
(0118) 			}
(0119) 			LTRX_CmdReset(); // Reset command buffer
    1053: 10       PUSH  X
    1054: 7C 0D 40 LCALL 0x0D40
    1057: 20       POP   X
(0120) 		}
(0121) 	}
    1058: 8E F6    JMP   0x0F4F
    105A: 38 FD    ADD   SP,0xFD
    105C: 20       POP   X
    105D: 8F FF    JMP   0x105D
(0122) 
(0123) 	
(0124) }
(0125) 
(0126) // Helper function for the printf function.
(0127) int putchar(char c) {
_putchar:
  c                    --> X-4
    105F: 10       PUSH  X
    1060: 4F       MOV   X,SP
(0128)   // Send characters to the Lantronix interface
(0129)   LTRX_PutChar(c);
    1061: 10       PUSH  X
    1062: 52 FC    MOV   A,[X-4]
    1064: 7C 0C 82 LCALL 0x0C82
    1067: 20       POP   X
(0130)   return 1;
    1068: 62 D0 00 MOV   REG[0xD0],0x0
    106B: 55 39 01 MOV   [__r1],0x1
    106E: 55 3A 00 MOV   [__r0],0x0
    1071: 20       POP   X
(0131) }
(0132) 
(0133) 
(0134) 
FILE: D:\hollevo\projects\personal\home\oswald\firmware\SENSOR~1\SENSOR~1\oo.c
(0001) /*************************************************************
(0002) * OneWire interface lib for the Dallas DS1820 and alike
(0003) *
(0004) * (c) 2009, Lieven Hollevoet
(0005) * PSoC Designer v5.0 Imagecraft compiler
(0006) *************************************************************/
(0007) 
(0008) #include "PSoCAPI.h"
(0009) #include "oo.h"
(0010) 
(0011) char oo_scratchpad[9];
(0012) // Scratchpad contents
(0013) // 0	Temperature LSB
(0014) // 1	Temperature MSB
(0015) // 2	Hi alarm temperature
(0016) // 3	Lo alarm temperature
(0017) // 4	Reserved, 0xFF
(0018) // 5	Reserved, 0xFF
(0019) // 6	Remainder register
(0020) // 7	Nr of counts per degree
(0021) // 8	CRC of pad contents
(0022) 
(0023) #ifdef OO_CRC_CHECKING
(0024) 
(0025) // CRC working variable
(0026) char crc = 0;
(0027) 
(0028) // CRC lookup table
(0029) char crc_rom[256] = {0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220, 35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98, 190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29, 67, 161, 255, 70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7, 219, 133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154, 101, 59, 217, 135, 4, 90, 184, 230, 167, 249, 27, 69, 198, 152, 122, 36, 248, 166, 68, 26, 153, 199, 37, 123, 58, 100, 134, 216, 91, 5, 231, 185, 140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205, 17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80, 175, 241, 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238, 50, 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115, 202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139, 87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22, 233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168, 116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53};
(0030) 
(0031) // CRC function prototypes
(0032) void oo_crc_init(void);
(0033) void oo_crc_shuffle_byte(char input);
(0034) #endif
(0035) 
(0036) 
(0037) ////////////////////////////////////////////////////////////
(0038) // oo_busreset()
(0039) // 
(0040) // Issues a 'ping' on the bus. If there is at least one
(0041) // sensor on the bus, it will generate a presence pulse.
(0042) // Returns: 1 if a presence pulse was detected
(0043) //          0 if no device was detected
(0044) ////////////////////////////////////////////////////////////
_oo_busreset:
    1073: 10       PUSH  X
    1074: 7C 08 80 LCALL 0x0880
    1077: 62 D0 00 MOV   REG[0xD0],0x0
    107A: 20       POP   X
    107B: 7F       RET   
(0045) char oo_busreset(void){
(0046) 	
(0047) 	return OneWire_fReset();
(0048) 	
(0049) }
(0050) 
(0051) ////////////////////////////////////////////////////////////
(0052) // oo_tx_byte(char data)
(0053) // 
(0054) // Transmits a single byte from the bus
(0055) ////////////////////////////////////////////////////////////
(0056) void oo_tx_byte(char data){
_oo_tx_byte:
  data                 --> X-4
    107C: 10       PUSH  X
    107D: 4F       MOV   X,SP
(0057) 	OneWire_WriteByte(data);
    107E: 10       PUSH  X
    107F: 52 FC    MOV   A,[X-4]
    1081: 7C 08 B6 LCALL 0x08B6
    1084: 20       POP   X
(0058) 	return;
    1085: 20       POP   X
    1086: 7F       RET   
(0059) }
(0060) 
(0061) ////////////////////////////////////////////////////////////
(0062) // char oo_rx_byte()
(0063) // 
(0064) // Receives a single byte from the bus
(0065) ////////////////////////////////////////////////////////////
(0066) char oo_rx_byte(void){
_oo_rx_byte:
  data                 --> X+0
    1087: 10       PUSH  X
    1088: 4F       MOV   X,SP
    1089: 38 01    ADD   SP,0x1
(0067) 
(0068) 	char data = 0;
    108B: 56 00 00 MOV   [X+0],0x0
(0069) 	
(0070) 	data = OneWire_bReadByte();
    108E: 10       PUSH  X
    108F: 7C 08 D1 LCALL 0x08D1
    1092: 62 D0 00 MOV   REG[0xD0],0x0
    1095: 20       POP   X
    1096: 54 00    MOV   [X+0],A
(0071) 
(0072) #ifdef OO_CRC_CHECKING
(0073) 	oo_crc_shuffle_byte(data);
    1098: 52 00    MOV   A,[X+0]
    109A: 08       PUSH  A
    109B: 91 11    CALL  _oo_crc_shuffle_byte
    109D: 38 FF    ADD   SP,0xFF
(0074) #endif	
(0075) 	return data;
    109F: 52 00    MOV   A,[X+0]
    10A1: 62 D0 00 MOV   REG[0xD0],0x0
    10A4: 38 FF    ADD   SP,0xFF
    10A6: 20       POP   X
    10A7: 7F       RET   
(0076) }
(0077) 
(0078) 
(0079) ////////////////////////////////////////////////////////////
(0080) // char oo_read_scratchpad()
(0081) // 
(0082) // Reads the scratchpad of the currently selected device
(0083) ////////////////////////////////////////////////////////////
(0084) char oo_read_scratchpad(void){
_oo_read_scratchpad:
  counter              --> X+0
    10A8: 10       PUSH  X
    10A9: 4F       MOV   X,SP
    10AA: 38 01    ADD   SP,0x1
(0085) 	
(0086) 	char counter = 0;
    10AC: 56 00 00 MOV   [X+0],0x0
(0087) 
(0088) 	// Read the scratchpad
(0089) 	oo_tx_byte(OO_READPAD);
    10AF: 50 BE    MOV   A,0xBE
    10B1: 08       PUSH  A
    10B2: 9F C8    CALL  _oo_tx_byte
    10B4: 38 FF    ADD   SP,0xFF
(0090) 	
(0091) 
(0092) #ifdef OO_CRC_CHECKING
(0093) 	// Reset the CRC register, CRC is updated in the oo_rx_byte() function.
(0094) 	oo_crc_init();
    10B6: 90 EF    CALL  _oo_crc_init
    10B8: 80 1F    JMP   0x10D8
(0095) #endif
(0096) 	while (counter < 9){
(0097) 		oo_scratchpad[counter] = oo_rx_byte();
    10BA: 9F CB    CALL  _oo_rx_byte
    10BC: 62 D0 00 MOV   REG[0xD0],0x0
    10BF: 53 3A    MOV   [__r0],A
    10C1: 52 00    MOV   A,[X+0]
    10C3: 53 37    MOV   [__r3],A
    10C5: 55 38 00 MOV   [__r2],0x0
    10C8: 06 37 47 ADD   [__r3],0x47
    10CB: 0E 38 00 ADC   [__r2],0x0
    10CE: 51 38    MOV   A,[__r2]
    10D0: 60 D5    MOV   REG[0xD5],A
    10D2: 51 3A    MOV   A,[__r0]
    10D4: 3F 37    MVI   [__r3],A
(0098) 		counter++;
    10D6: 77 00    INC   [X+0]
(0099) 	}
    10D8: 3D 00 09 CMP   [X+0],0x9
    10DB: CF DE    JC    0x10BA
(0100) 
(0101) #ifdef OO_CRC_CHECKING
(0102) 	// Verify the CRC
(0103) 	return crc;
    10DD: 62 D0 00 MOV   REG[0xD0],0x0
    10E0: 51 55    MOV   A,[crc]
    10E2: 62 D0 00 MOV   REG[0xD0],0x0
    10E5: 38 FF    ADD   SP,0xFF
    10E7: 20       POP   X
    10E8: 7F       RET   
(0104) #else
(0105) 	return 0;
(0106) #endif
(0107) 
(0108) }
(0109) 
(0110) ////////////////////////////////////////////////////////////
(0111) // short oo_get_temp()
(0112) // 
(0113) // DS1820 specific
(0114) // Returns the 2-byte value of the temperature register
(0115) ////////////////////////////////////////////////////////////
(0116) short oo_get_temp(void){
_oo_get_temp:
  retval               --> X+0
    10E9: 10       PUSH  X
    10EA: 4F       MOV   X,SP
    10EB: 38 02    ADD   SP,0x2
(0117) 	short retval;
(0118) 	retval = (short)oo_scratchpad[1];
    10ED: 62 D0 00 MOV   REG[0xD0],0x0
    10F0: 51 48    MOV   A,[oo_scratchpad+1]
    10F2: 54 01    MOV   [X+1],A
    10F4: 56 00 00 MOV   [X+0],0x0
(0119) 	retval = retval << 8;
    10F7: 52 01    MOV   A,[X+1]
    10F9: 54 00    MOV   [X+0],A
    10FB: 56 01 00 MOV   [X+1],0x0
(0120) 	retval += (short)oo_scratchpad[0];
    10FE: 51 47    MOV   A,[oo_scratchpad]
    1100: 62 D0 00 MOV   REG[0xD0],0x0
    1103: 05 01    ADD   [X+1],A
    1105: 0F 00 00 ADC   [X+0],0x0
(0121) 	return retval; 
    1108: 52 01    MOV   A,[X+1]
    110A: 53 39    MOV   [__r1],A
    110C: 52 00    MOV   A,[X+0]
    110E: 53 3A    MOV   [__r0],A
    1110: 38 FE    ADD   SP,0xFE
    1112: 20       POP   X
    1113: 7F       RET   
(0122) }
(0123) 
(0124) ////////////////////////////////////////////////////////////
(0125) // short oo_get_count()
(0126) // 
(0127) // DS1820 specific
(0128) // Returns the 2-byte value of the count register
(0129) ////////////////////////////////////////////////////////////
(0130) short oo_get_count(void){
_oo_get_count:
  retval               --> X+0
    1114: 10       PUSH  X
    1115: 4F       MOV   X,SP
    1116: 38 02    ADD   SP,0x2
(0131) 	short retval;
(0132) 	retval = (short)oo_scratchpad[7];
    1118: 62 D0 00 MOV   REG[0xD0],0x0
    111B: 51 4E    MOV   A,[oo_scratchpad+7]
    111D: 54 01    MOV   [X+1],A
    111F: 56 00 00 MOV   [X+0],0x0
(0133) 	retval = retval << 8;
    1122: 52 01    MOV   A,[X+1]
    1124: 54 00    MOV   [X+0],A
    1126: 56 01 00 MOV   [X+1],0x0
(0134) 	retval += (short)oo_scratchpad[6];
    1129: 51 4D    MOV   A,[oo_scratchpad+6]
    112B: 62 D0 00 MOV   REG[0xD0],0x0
    112E: 05 01    ADD   [X+1],A
    1130: 0F 00 00 ADC   [X+0],0x0
(0135) 	return retval; 
    1133: 52 01    MOV   A,[X+1]
    1135: 53 39    MOV   [__r1],A
    1137: 52 00    MOV   A,[X+0]
    1139: 53 3A    MOV   [__r0],A
    113B: 38 FE    ADD   SP,0xFE
    113D: 20       POP   X
    113E: 7F       RET   
(0136) }
(0137) 
(0138) ////////////////////////////////////////////////////////////
(0139) // oo_conversion_busy()
(0140) // 
(0141) // DS1820 specific
(0142) // Returns 1 if a sensor is still processing
(0143) //         0 if all sensors are done
(0144) ////////////////////////////////////////////////////////////
(0145) char oo_conversion_busy(void){
(0146) 	if (oo_rx_byte() == 0x00){
_oo_conversion_busy:
    113F: 9F 46    CALL  _oo_rx_byte
    1141: 62 D0 00 MOV   REG[0xD0],0x0
    1144: 39 00    CMP   A,0x0
    1146: B0 05    JNZ   0x114C
(0147) 		return 1;
    1148: 50 01    MOV   A,0x1
    114A: 80 06    JMP   0x1151
(0148) 	} else {
(0149) 		return 0;
    114C: 62 D0 00 MOV   REG[0xD0],0x0
    114F: 50 00    MOV   A,0x0
    1151: 7F       RET   
(0150) 	}
(0151) }
(0152) 
(0153) void delay_10ms(void){
_delay_10ms:
  counter              --> X+0
    1152: 10       PUSH  X
    1153: 4F       MOV   X,SP
    1154: 38 02    ADD   SP,0x2
(0154) 	short counter;
(0155) 	
(0156) 	for (counter = 0; counter<8*430; counter++){
    1156: 56 01 00 MOV   [X+1],0x0
    1159: 56 00 00 MOV   [X+0],0x0
(0157) 		asm("nop");
    115C: 40       NOP   
(0158) 	}
    115D: 77 01    INC   [X+1]
    115F: 0F 00 00 ADC   [X+0],0x0
    1162: 52 01    MOV   A,[X+1]
    1164: 11 70    SUB   A,0x70
    1166: 52 00    MOV   A,[X+0]
    1168: 31 80    XOR   A,0x80
    116A: 19 8D    SBB   A,0x8D
    116C: CF EF    JC    0x115C
    116E: 38 FE    ADD   SP,0xFE
    1170: 20       POP   X
    1171: 7F       RET   
(0159) }
(0160) 
(0161) ////////////////////////////////////////////////////////////
(0162) // oo_start_conversion()
(0163) // 
(0164) // DS1820 specific
(0165) // Commands all sensors to start a temperature conversion
(0166) ////////////////////////////////////////////////////////////
(0167) void oo_start_conversion(void){
(0168) 	// Command all temp sensors on the bus to start a conversion
(0169) 	oo_tx_byte(OO_SKIPROM);
_oo_start_conversion:
    1172: 50 CC    MOV   A,0xCC
    1174: 08       PUSH  A
    1175: 9F 05    CALL  _oo_tx_byte
(0170) 	
(0171) 	// Convert temperature
(0172) 	oo_tx_byte(OO_CONVERTT);
    1177: 50 44    MOV   A,0x44
    1179: 08       PUSH  A
    117A: 9F 00    CALL  _oo_tx_byte
    117C: 38 FE    ADD   SP,0xFE
(0173) 	
(0174) 	return;
    117E: 7F       RET   
(0175) }
(0176) 
(0177) 
(0178) 
(0179) ////////////////////////////////////////////////////////////
(0180) // char oo_wait_for_completion()
(0181) // 
(0182) // DS1820 specific
(0183) // Wait for the completion of the temperature conversion
(0184) // returns 0 if timed out, returns 1 when finished OK.
(0185) ////////////////////////////////////////////////////////////
(0186) char oo_wait_for_completion(void){
_oo_wait_for_completion:
  counter              --> X+0
    117F: 10       PUSH  X
    1180: 4F       MOV   X,SP
    1181: 38 01    ADD   SP,0x1
(0187) 
(0188) 	char counter = 0;
    1183: 56 00 00 MOV   [X+0],0x0
    1186: 80 11    JMP   0x1198
(0189) 	
(0190) 	while (oo_conversion_busy()){
(0191) 		// Timeout: if the conversion is not completed
(0192) 		// after > 1 sec -> break.
(0193) 		delay_10ms();
    1188: 9F C8    CALL  _delay_10ms
(0194) 		counter++;
    118A: 77 00    INC   [X+0]
(0195) 		if (counter == 100){
    118C: 3D 00 64 CMP   [X+0],0x64
    118F: B0 08    JNZ   0x1198
(0196) 			return 0;
    1191: 62 D0 00 MOV   REG[0xD0],0x0
    1194: 50 00    MOV   A,0x0
    1196: 80 0C    JMP   0x11A3
(0197) 		}	
(0198) 	}
    1198: 9F A5    CALL  _oo_conversion_busy
    119A: 62 D0 00 MOV   REG[0xD0],0x0
    119D: 39 00    CMP   A,0x0
    119F: BF E8    JNZ   0x1188
(0199) 	
(0200) 	return 1;
    11A1: 50 01    MOV   A,0x1
    11A3: 38 FF    ADD   SP,0xFF
    11A5: 20       POP   X
    11A6: 7F       RET   
(0201) }
(0202) 
(0203) #ifdef OO_CRC_CHECKING
(0204) ////////////////////////////////////////////////////////////
(0205) // oo_crc_init()
(0206) //
(0207) // Initialise the CRC working register to be able to 
(0208) // start a new calculation
(0209) ////////////////////////////////////////////////////////////
(0210) void oo_crc_init(void){
(0211) 	crc = 0;
_oo_crc_init:
    11A7: 62 D0 00 MOV   REG[0xD0],0x0
    11AA: 55 55 00 MOV   [crc],0x0
    11AD: 7F       RET   
(0212) }
(0213) 
(0214) ////////////////////////////////////////////////////////////
(0215) // oo_crc_shuffle_byte()
(0216) //
(0217) // Shuffle the next byte into the CRC
(0218) ////////////////////////////////////////////////////////////
(0219) void oo_crc_shuffle_byte(char input){
_oo_crc_shuffle_byte:
  input                --> X-4
    11AE: 10       PUSH  X
    11AF: 4F       MOV   X,SP
(0220) 	crc = crc_rom[crc ^ input];
    11B0: 62 D0 00 MOV   REG[0xD0],0x0
    11B3: 52 FC    MOV   A,[X-4]
    11B5: 53 39    MOV   [__r1],A
    11B7: 55 3A 00 MOV   [__r0],0x0
    11BA: 62 D0 00 MOV   REG[0xD0],0x0
    11BD: 51 55    MOV   A,[crc]
    11BF: 62 D0 00 MOV   REG[0xD0],0x0
    11C2: 32 39    XOR   A,[__r1]
    11C4: 53 39    MOV   [__r1],A
    11C6: 50 00    MOV   A,0x0
    11C8: 32 3A    XOR   A,[__r0]
    11CA: 53 3A    MOV   [__r0],A
    11CC: 06 39 00 ADD   [__r1],0x0
    11CF: 0E 3A 01 ADC   [__r0],0x1
    11D2: 51 3A    MOV   A,[__r0]
    11D4: 60 D4    MOV   REG[0xD4],A
    11D6: 3E 39    MVI   A,[__r1]
    11D8: 62 D0 00 MOV   REG[0xD0],0x0
    11DB: 53 55    MOV   [crc],A
    11DD: 20       POP   X
    11DE: 7F       RET   
(0221) }
(0222) #endif
(0223) 
(0224) 
(0225) // Extract the info from the selected device
(0226) oo_tdata oo_read_device(void){
_oo_read_device:
  loper                --> X+14
  crc                  --> X+13
  data                 --> X+0
    11DF: 10       PUSH  X
    11E0: 4F       MOV   X,SP
    11E1: 38 0F    ADD   SP,0xF
(0227) 
(0228) 	char loper;
(0229) 	char crc;
(0230) 	
(0231) 	oo_tdata data;
(0232) 	
(0233) 	data.valid = 0;
    11E3: 56 0C 00 MOV   [X+12],0x0
(0234) 	
(0235) 	// Get the ID
(0236) 	OneWire_GetROM(data.id);
    11E6: 62 D0 00 MOV   REG[0xD0],0x0
    11E9: 10       PUSH  X
    11EA: 50 07    MOV   A,0x7
    11EC: 08       PUSH  A
    11ED: 18       POP   A
    11EE: 7C 09 06 LCALL 0x0906
    11F1: 20       POP   X
(0237) 	
(0238) 	oo_busreset();
    11F2: 9E 7F    CALL  _oo_busreset
    11F4: 62 D0 00 MOV   REG[0xD0],0x0
(0239) 
(0240) 	// Select the device
(0241) 	OneWire_SetROM(data.id);
    11F7: 10       PUSH  X
    11F8: 50 07    MOV   A,0x7
    11FA: 08       PUSH  A
    11FB: 18       POP   A
    11FC: 7C 09 32 LCALL 0x0932
(0242) 	OneWire_fVerify();
    11FF: 7C 0A 97 LCALL 0x0A97
    1202: 62 D0 00 MOV   REG[0xD0],0x0
    1205: 20       POP   X
(0243) 	
(0244) 	// Read the scratchpad
(0245) 	if (crc = oo_read_scratchpad()){
    1206: 9E A0    CALL  _oo_read_scratchpad
    1208: 62 D0 00 MOV   REG[0xD0],0x0
    120B: 54 0D    MOV   [X+13],A
    120D: 39 00    CMP   A,0x0
    120F: A0 1E    JZ    0x122E
(0246) 		return data;
    1211: 5A 39    MOV   [__r1],X
    1213: 52 FC    MOV   A,[X-4]
    1215: 53 37    MOV   [__r3],A
    1217: 52 FB    MOV   A,[X-5]
    1219: 62 D4 07 MOV   REG[0xD4],0x7
    121C: 60 D5    MOV   REG[0xD5],A
    121E: 10       PUSH  X
    121F: 57 0D    MOV   X,0xD
    1221: 62 D0 00 MOV   REG[0xD0],0x0
    1224: 3E 39    MVI   A,[__r1]
    1226: 3F 37    MVI   [__r3],A
    1228: 79       DEC   X
    1229: BF F7    JNZ   0x1221
    122B: 20       POP   X
    122C: 80 3A    JMP   0x1267
(0247) 	}
(0248) 	
(0249) 	// And extract the temperature information
(0250) 	data.t_msb    = oo_scratchpad[1];
    122E: 62 D0 00 MOV   REG[0xD0],0x0
    1231: 51 48    MOV   A,[oo_scratchpad+1]
    1233: 54 08    MOV   [X+8],A
(0251) 	data.t_lsb    = oo_scratchpad[0];
    1235: 51 47    MOV   A,[oo_scratchpad]
    1237: 54 09    MOV   [X+9],A
(0252) 	data.remain   = oo_scratchpad[6];
    1239: 51 4D    MOV   A,[oo_scratchpad+6]
    123B: 54 0A    MOV   [X+10],A
(0253) 	data.nr_count = oo_scratchpad[7];
    123D: 51 4E    MOV   A,[oo_scratchpad+7]
    123F: 54 0B    MOV   [X+11],A
(0254) 	if (crc == 0x00) {	data.valid = 1; } 
    1241: 3D 0D 00 CMP   [X+13],0x0
    1244: B0 04    JNZ   0x1249
    1246: 56 0C 01 MOV   [X+12],0x1
(0255) 	
(0256) 	return data;
    1249: 62 D0 00 MOV   REG[0xD0],0x0
    124C: 5A 39    MOV   [__r1],X
    124E: 52 FC    MOV   A,[X-4]
    1250: 53 37    MOV   [__r3],A
    1252: 52 FB    MOV   A,[X-5]
    1254: 62 D4 07 MOV   REG[0xD4],0x7
    1257: 60 D5    MOV   REG[0xD5],A
    1259: 10       PUSH  X
    125A: 57 0D    MOV   X,0xD
    125C: 62 D0 00 MOV   REG[0xD0],0x0
    125F: 3E 39    MVI   A,[__r1]
    1261: 3F 37    MVI   [__r3],A
    1263: 79       DEC   X
    1264: BF F7    JNZ   0x125C
    1266: 20       POP   X
    1267: 38 F1    ADD   SP,0xF1
    1269: 20       POP   X
    126A: 7F       RET   
(0257) 	
(0258) }
(0259) 
(0260) // Report the sensor value to the serial interface
(0261) // Format:
(0262) //  OneWire <ID> - <temperature> - <CRC_valid>
(0263) void oo_print_data(oo_tdata data){
_oo_print_data:
  cntr                 --> X+0
  data                 --> X-5
    126B: 10       PUSH  X
    126C: 4F       MOV   X,SP
    126D: 38 01    ADD   SP,0x1
(0264) 
(0265) 	char cntr;
(0266) 	
(0267) 	LTRX_CPutString("OneWire ");
    126F: 10       PUSH  X
    1270: 50 03    MOV   A,0x3
    1272: 08       PUSH  A
    1273: 50 8B    MOV   A,0x8B
    1275: 5C       MOV   X,A
    1276: 18       POP   A
    1277: 7C 0D 25 LCALL 0x0D25
    127A: 20       POP   X
(0268) 	
(0269) 	// print ID
(0270) 	for (cntr=0; cntr<8; cntr++){
    127B: 56 00 00 MOV   [X+0],0x0
    127E: 80 20    JMP   0x129F
(0271) 		LTRX_PutSHexByte(*(data.id+cntr));	
    1280: 62 D0 00 MOV   REG[0xD0],0x0
    1283: 52 00    MOV   A,[X+0]
    1285: 53 39    MOV   [__r1],A
    1287: 55 3A 00 MOV   [__r0],0x0
    128A: 52 FC    MOV   A,[X-4]
    128C: 04 39    ADD   [__r1],A
    128E: 52 FB    MOV   A,[X-5]
    1290: 0C 3A    ADC   [__r0],A
    1292: 51 3A    MOV   A,[__r0]
    1294: 60 D4    MOV   REG[0xD4],A
    1296: 3E 39    MVI   A,[__r1]
    1298: 10       PUSH  X
    1299: 7C 0C 68 LCALL 0x0C68
    129C: 20       POP   X
(0272) 	}
    129D: 77 00    INC   [X+0]
    129F: 3D 00 08 CMP   [X+0],0x8
    12A2: CF DD    JC    0x1280
(0273) 	
(0274) 	LTRX_CPutString(" - ");
    12A4: 10       PUSH  X
    12A5: 50 03    MOV   A,0x3
    12A7: 08       PUSH  A
    12A8: 50 87    MOV   A,0x87
    12AA: 5C       MOV   X,A
    12AB: 18       POP   A
    12AC: 7C 0D 25 LCALL 0x0D25
    12AF: 20       POP   X
(0275) 	
(0276) 	// print temperature in hex
(0277) 	LTRX_PutSHexByte(data.t_msb);
    12B0: 62 D0 00 MOV   REG[0xD0],0x0
    12B3: 52 FC    MOV   A,[X-4]
    12B5: 01 08    ADD   A,0x8
    12B7: 53 39    MOV   [__r1],A
    12B9: 52 FB    MOV   A,[X-5]
    12BB: 09 00    ADC   A,0x0
    12BD: 60 D4    MOV   REG[0xD4],A
    12BF: 3E 39    MVI   A,[__r1]
    12C1: 10       PUSH  X
    12C2: 7C 0C 68 LCALL 0x0C68
    12C5: 20       POP   X
(0278) 	LTRX_PutSHexByte(data.t_lsb);
    12C6: 62 D0 00 MOV   REG[0xD0],0x0
    12C9: 52 FC    MOV   A,[X-4]
    12CB: 01 09    ADD   A,0x9
    12CD: 53 39    MOV   [__r1],A
    12CF: 52 FB    MOV   A,[X-5]
    12D1: 09 00    ADC   A,0x0
    12D3: 60 D4    MOV   REG[0xD4],A
    12D5: 3E 39    MVI   A,[__r1]
    12D7: 10       PUSH  X
    12D8: 7C 0C 68 LCALL 0x0C68
    12DB: 20       POP   X
(0279) 	
(0280) 	LTRX_CPutString(" - ");
    12DC: 10       PUSH  X
    12DD: 50 03    MOV   A,0x3
    12DF: 08       PUSH  A
    12E0: 50 87    MOV   A,0x87
    12E2: 5C       MOV   X,A
    12E3: 18       POP   A
    12E4: 7C 0D 25 LCALL 0x0D25
    12E7: 20       POP   X
(0281) 	LTRX_PutChar(data.valid+0x30);	
    12E8: 62 D0 00 MOV   REG[0xD0],0x0
    12EB: 52 FC    MOV   A,[X-4]
    12ED: 01 0C    ADD   A,0xC
    12EF: 53 39    MOV   [__r1],A
    12F1: 52 FB    MOV   A,[X-5]
    12F3: 09 00    ADC   A,0x0
    12F5: 60 D4    MOV   REG[0xD4],A
    12F7: 3E 39    MVI   A,[__r1]
    12F9: 53 3A    MOV   [__r0],A
    12FB: 06 3A 30 ADD   [__r0],0x30
    12FE: 10       PUSH  X
    12FF: 51 3A    MOV   A,[__r0]
    1301: 7C 0C 82 LCALL 0x0C82
(0282) 
(0283) 	LTRX_PutCRLF();
    1304: 7C 0D 37 LCALL 0x0D37
    1307: 20       POP   X
    1308: 38 FF    ADD   SP,0xFF
    130A: 20       POP   X
    130B: 7F       RET   
(0284) 	
(0285) 	
(0286) }
(0287) 
(0288) // Get a system report from the OneWire bus
(0289) // This means: 
(0290) //  * reset the bus and check devices are present
(0291) //  * start conversion on all devices
(0292) //  * wait for completion
(0293) //  * read the scratchpad of the first device, extract temperature data, print ID + status
(0294) //  * continue until the last sensor is read
(0295) void oo_report(void){
_oo_report:
  id                   --> X+13
  data                 --> X+0
    130C: 10       PUSH  X
    130D: 4F       MOV   X,SP
    130E: 38 22    ADD   SP,0x22
(0296) 	
(0297) 	oo_tdata data;
(0298) 	
(0299) 	unsigned char id[8];
(0300) 	
(0301) 	// Reset
(0302) 	if (!OneWire_fReset()){
    1310: 10       PUSH  X
    1311: 7C 08 80 LCALL 0x0880
    1314: 62 D0 00 MOV   REG[0xD0],0x0
    1317: 20       POP   X
    1318: 39 00    CMP   A,0x0
    131A: B0 12    JNZ   0x132D
(0303) 		LTRX_CPutString("No OneWire devices found on the bus!");
    131C: 10       PUSH  X
    131D: 50 03    MOV   A,0x3
    131F: 08       PUSH  A
    1320: 50 62    MOV   A,0x62
    1322: 5C       MOV   X,A
    1323: 18       POP   A
    1324: 7C 0D 25 LCALL 0x0D25
(0304) 		LTRX_PutCRLF();
    1327: 7C 0D 37 LCALL 0x0D37
    132A: 20       POP   X
(0305) 		return;
    132B: 80 7E    JMP   0x13AA
(0306) 	}
(0307) 	
(0308) 	// Start conversion
(0309) 	oo_start_conversion();
    132D: 9E 43    CALL  _oo_start_conversion
(0310) 	
(0311) 	// Wait for completion
(0312) 	if (!oo_wait_for_completion()){
    132F: 9E 4E    CALL  _oo_wait_for_completion
    1331: 62 D0 00 MOV   REG[0xD0],0x0
    1334: 39 00    CMP   A,0x0
    1336: B0 12    JNZ   0x1349
(0313) 
(0314) 		LTRX_CPutString("Timed out while waiting for conversion!");
    1338: 10       PUSH  X
    1339: 50 03    MOV   A,0x3
    133B: 08       PUSH  A
    133C: 50 3A    MOV   A,0x3A
    133E: 5C       MOV   X,A
    133F: 18       POP   A
    1340: 7C 0D 25 LCALL 0x0D25
(0315) 		LTRX_PutCRLF();
    1343: 7C 0D 37 LCALL 0x0D37
    1346: 20       POP   X
(0316) 		return;
    1347: 80 62    JMP   0x13AA
(0317) 	}
(0318) 	
(0319) 	// Find the first device on the bus
(0320) 	if (OneWire_fFindFirst()){
    1349: 10       PUSH  X
    134A: 7C 09 5E LCALL 0x095E
    134D: 62 D0 00 MOV   REG[0xD0],0x0
    1350: 20       POP   X
    1351: 39 00    CMP   A,0x0
(0321) 		//OneWire_GetROM(id);
(0322) 	} else {
    1353: B0 12    JNZ   0x1366
(0323) 		LTRX_CPutString("Problem detecting first device on the bus");
    1355: 10       PUSH  X
    1356: 50 03    MOV   A,0x3
    1358: 08       PUSH  A
    1359: 50 10    MOV   A,0x10
    135B: 5C       MOV   X,A
    135C: 18       POP   A
    135D: 7C 0D 25 LCALL 0x0D25
(0324) 		LTRX_PutCRLF();		
    1360: 7C 0D 37 LCALL 0x0D37
    1363: 20       POP   X
(0325) 		return;
    1364: 80 45    JMP   0x13AA
(0326) 	}
(0327) 	
(0328) 	do {	
(0329) 		//OneWire_GetROM(id);
(0330) 		data = oo_read_device();
    1366: 62 D0 00 MOV   REG[0xD0],0x0
    1369: 50 07    MOV   A,0x7
    136B: 08       PUSH  A
    136C: 10       PUSH  X
    136D: 9E 70    CALL  _oo_read_device
    136F: 38 FE    ADD   SP,0xFE
(0331) 		oo_print_data(data);
    1371: 62 D0 00 MOV   REG[0xD0],0x0
    1374: 5A 39    MOV   [__r1],X
    1376: 5A 37    MOV   [__r3],X
    1378: 06 37 15 ADD   [__r3],0x15
    137B: 62 D4 07 MOV   REG[0xD4],0x7
    137E: 62 D5 07 MOV   REG[0xD5],0x7
    1381: 10       PUSH  X
    1382: 57 0D    MOV   X,0xD
    1384: 62 D0 00 MOV   REG[0xD0],0x0
    1387: 3E 39    MVI   A,[__r1]
    1389: 3F 37    MVI   [__r3],A
    138B: 79       DEC   X
    138C: BF F7    JNZ   0x1384
    138E: 20       POP   X
    138F: 5A 39    MOV   [__r1],X
    1391: 06 39 15 ADD   [__r1],0x15
    1394: 50 07    MOV   A,0x7
    1396: 08       PUSH  A
    1397: 51 39    MOV   A,[__r1]
    1399: 08       PUSH  A
    139A: 9E CF    CALL  _oo_print_data
    139C: 38 FE    ADD   SP,0xFE
(0332) 	} while (OneWire_fFindNext());
    139E: 10       PUSH  X
    139F: 7C 09 73 LCALL 0x0973
    13A2: 62 D0 00 MOV   REG[0xD0],0x0
    13A5: 20       POP   X
    13A6: 39 00    CMP   A,0x0
    13A8: BF BD    JNZ   0x1366
    13AA: 38 DE    ADD   SP,0xDE
    13AC: 20       POP   X
(0333) 	
(0334) 	
(0335) }
(0336) 
FILE: D:\hollevo\projects\personal\home\oswald\firmware\SENSOR~1\SENSOR~1\orcon.c
(0001) /*************************************************************
(0002) * Interface to the Orcon HRC ventilation unit remote control
(0003) *
(0004) * (c) 2009, Lieven Hollevoet
(0005) * PSoC Designer v5.0 HiTide compiler
(0006) *
(0007) * Expects that the remote control buttons are connected to
(0008) * IO pins of the controller. The pins need to be 
(0009) * configured as 'open drain low' in the chip
(0010) * configuration window
(0011) *
(0012) *************************************************************/
(0013) 
(0014) #include "PSoCAPI.h"
(0015) #include "orcon.h"
(0016) #include <stdio.h>
(0017) 
(0018) #define ORCON_PRT PRT0DR
(0019) 
(0020) #define ORCON_PRT_LOW  (ORCON_PRT = ORCON_PRT & 0xFD)
(0021) #define ORCON_PRT_MED  (ORCON_PRT = ORCON_PRT & 0xF7)
(0022) #define ORCON_PRT_HIGH (ORCON_PRT = ORCON_PRT & 0xDF)
(0023) #define ORCON_RELEASE  (ORCON_PRT = ORCON_PRT | 0x2A)
(0024) 
(0025) int orcon_count;
(0026) 
_orcon_Start:
    13AE: 43 00 2A OR    REG[0x0],0x2A
(0027) void orcon_Start(void){
(0028) 	ORCON_RELEASE;
(0029) 	orcon_count = 0;
    13B1: 62 D0 00 MOV   REG[0xD0],0x0
    13B4: 55 51 00 MOV   [orcon_count+1],0x0
    13B7: 55 50 00 MOV   [orcon_count],0x0
    13BA: 7F       RET   
(0030) }
(0031) 
(0032) // This function increments the ticker that is used for timing the 
(0033) // output pin assertion in the orcon_control function.
(0034) void orcon_ticker(void)
(0035) {
(0036) 	if (orcon_count < 100) {
_orcon_ticker:
    13BB: 62 D0 00 MOV   REG[0xD0],0x0
    13BE: 51 51    MOV   A,[orcon_count+1]
    13C0: 11 64    SUB   A,0x64
    13C2: 51 50    MOV   A,[orcon_count]
    13C4: 31 80    XOR   A,0x80
    13C6: 19 80    SBB   A,0x80
    13C8: D0 09    JNC   0x13D2
(0037) 		orcon_count++;
    13CA: 62 D0 00 MOV   REG[0xD0],0x0
    13CD: 76 51    INC   [orcon_count+1]
    13CF: 0E 50 00 ADC   [orcon_count],0x0
(0038) 	}
    13D2: 7F       RET   
(0039) }
(0040) 
(0041) // Drive the output pins requested by the function parameter for two timer ticks.
(0042) void orcon_control(enum ORCON_MODE_TYPE mode){
_orcon_control:
  mode                 --> X-4
    13D3: 10       PUSH  X
    13D4: 4F       MOV   X,SP
    13D5: 38 02    ADD   SP,0x2
(0043) 	cprintf("Switching Orcon to mode");
    13D7: 50 03    MOV   A,0x3
    13D9: 08       PUSH  A
    13DA: 50 CF    MOV   A,0xCF
    13DC: 08       PUSH  A
    13DD: 7C 2C C9 LCALL _cprintf
    13E0: 38 FE    ADD   SP,0xFE
(0044) 	orcon_count = 0;
    13E2: 62 D0 00 MOV   REG[0xD0],0x0
    13E5: 55 51 00 MOV   [orcon_count+1],0x0
    13E8: 55 50 00 MOV   [orcon_count],0x0
(0045) 	
(0046) 	switch (mode) {
    13EB: 52 FC    MOV   A,[X-4]
    13ED: 54 01    MOV   [X+1],A
    13EF: 56 00 00 MOV   [X+0],0x0
    13F2: 3D 00 00 CMP   [X+0],0x0
    13F5: B0 06    JNZ   0x13FC
    13F7: 3D 01 00 CMP   [X+1],0x0
    13FA: A0 17    JZ    0x1412
    13FC: 3D 00 00 CMP   [X+0],0x0
    13FF: B0 06    JNZ   0x1406
    1401: 3D 01 01 CMP   [X+1],0x1
    1404: A0 1D    JZ    0x1422
    1406: 3D 00 00 CMP   [X+0],0x0
    1409: B0 06    JNZ   0x1410
    140B: 3D 01 02 CMP   [X+1],0x2
    140E: A0 23    JZ    0x1432
    1410: 80 31    JMP   0x1442
(0047) 	case LOW:
(0048) 		cprintf("LOW\r\n");
    1412: 50 03    MOV   A,0x3
    1414: 08       PUSH  A
    1415: 50 C9    MOV   A,0xC9
    1417: 08       PUSH  A
    1418: 7C 2C C9 LCALL _cprintf
    141B: 38 FE    ADD   SP,0xFE
(0049) 		ORCON_PRT_LOW;
    141D: 41 00 FD AND   REG[0x0],0xFD
(0050) 		break;
    1420: 80 2F    JMP   0x1450
(0051) 	case MEDIUM:
(0052) 		cprintf("MEDIUM\r\n");
    1422: 50 03    MOV   A,0x3
    1424: 08       PUSH  A
    1425: 50 C0    MOV   A,0xC0
    1427: 08       PUSH  A
    1428: 7C 2C C9 LCALL _cprintf
    142B: 38 FE    ADD   SP,0xFE
(0053) 		ORCON_PRT_MED;
    142D: 41 00 F7 AND   REG[0x0],0xF7
(0054) 		break;
    1430: 80 1F    JMP   0x1450
(0055) 	case HIGH:
(0056) 		cprintf("HIGH\r\n");
    1432: 50 03    MOV   A,0x3
    1434: 08       PUSH  A
    1435: 50 B9    MOV   A,0xB9
    1437: 08       PUSH  A
    1438: 7C 2C C9 LCALL _cprintf
    143B: 38 FE    ADD   SP,0xFE
(0057) 		ORCON_PRT_HIGH;
    143D: 41 00 DF AND   REG[0x0],0xDF
(0058) 		break;
    1440: 80 0F    JMP   0x1450
(0059) 	default:
(0060) 		cprintf("not possible, unknown mode requested");
    1442: 50 03    MOV   A,0x3
    1444: 08       PUSH  A
    1445: 50 94    MOV   A,0x94
    1447: 08       PUSH  A
    1448: 7C 2C C9 LCALL _cprintf
    144B: 38 FE    ADD   SP,0xFE
(0061) 		break;
    144D: 80 02    JMP   0x1450
(0062) 	}
(0063) 	
(0064) 	while (orcon_count < 2){asm("nop");};
    144F: 40       NOP   
    1450: 62 D0 00 MOV   REG[0xD0],0x0
    1453: 51 51    MOV   A,[orcon_count+1]
    1455: 11 02    SUB   A,0x2
    1457: 51 50    MOV   A,[orcon_count]
    1459: 31 80    XOR   A,0x80
    145B: 19 80    SBB   A,0x80
    145D: CF F1    JC    0x144F
(0065) 
(0066) 	ORCON_RELEASE;
    145F: 43 00 2A OR    REG[0x0],0x2A
    1462: 38 FE    ADD   SP,0xFE
    1464: 20       POP   X
(0067) 	
(0068) }
FILE: D:\hollevo\projects\personal\home\oswald\firmware\SENSOR~1\SENSOR~1\shtxx.c
(0001) /***********************************************************************************
(0002) Project:          SHTxx demo program (V2.1)
(0003) Filename:         SHTxx_Sample_Code.c    
(0004) 
(0005) Original version: http://www.sensirion.com
(0006) 
(0007) Ported to PSOC C compiler by Lieven Hollevoet.
(0008) ***********************************************************************************/
(0009) #include "PSoCAPI.h"
(0010) #include <stdio.h>
(0011) #include "shtxx.h"
(0012) 
(0013) // Internal function prototypes
(0014) void delay_1us(void);
(0015) void delay_5us(void);
(0016) 
(0017) enum {TEMP,HUMI};
(0018) 
(0019) typedef union 
(0020) { unsigned int i;
(0021)   float f;
(0022) } value;
(0023) 
(0024) //----------------------------------------------------------------------------------
(0025) // modul-var
(0026) //----------------------------------------------------------------------------------
(0027) 
(0028) // Data and clock set macros
(0029) // DATA is on P2.1, set it to 'open drain low' drive in chip view
(0030) #define DATA(b) (PRT2DR = (b==0) ? (PRT2DR&0xFD) : (PRT2DR|0x02))
(0031) #define DATA_IN PRT2DR&0x02
(0032) 
(0033) // CLOCK is on P4.7, set it to 'strong slow' drive in chip view
(0034) #define SCK(b)  (PRT4DR = (b==0) ? (PRT4DR&0x7F) : (PRT4DR|0x80))
(0035) 
(0036) 
(0037) #define noACK 0
(0038) #define ACK   1
(0039)                             //adr  command  r/w
(0040) #define STATUS_REG_W 0x06   //000   0011    0
(0041) #define STATUS_REG_R 0x07   //000   0011    1
(0042) #define MEASURE_TEMP 0x03   //000   0001    1
(0043) #define MEASURE_HUMI 0x05   //000   0010    1
(0044) #define RESET        0x1e   //000   1111    0
(0045) 
(0046) 
(0047) void s_Start(void)
_s_Start:
    1466: 43 08 02 OR    REG[0x8],0x2
    1469: 7F       RET   
(0048) {
(0049) 	// Release the IO line
(0050) 	DATA(1);
(0051) 	
(0052) }
(0053) 
(0054) //----------------------------------------------------------------------------------
(0055) char s_write_byte(unsigned char value)
(0056) //----------------------------------------------------------------------------------
(0057) // writes a byte on the Sensibus and checks the acknowledge 
(0058) { 
_s_write_byte:
  error                --> X+1
  i                    --> X+0
  value                --> X-4
    146A: 10       PUSH  X
    146B: 4F       MOV   X,SP
    146C: 38 02    ADD   SP,0x2
(0059)   unsigned char i,error=0;  
    146E: 56 01 00 MOV   [X+1],0x0
(0060)   for (i=0x80;i>0;i/=2)             //shift bit for masking
    1471: 56 00 80 MOV   [X+0],0x80
    1474: 80 2E    JMP   0x14A3
(0061)   { if (i & value) DATA(1);          //masking value with i , write to SENSI-BUS
    1476: 62 D0 00 MOV   REG[0xD0],0x0
    1479: 52 00    MOV   A,[X+0]
    147B: 23 FC    AND   A,[X-4]
    147D: 39 00    CMP   A,0x0
    147F: A0 06    JZ    0x1486
    1481: 43 08 02 OR    REG[0x8],0x2
    1484: 80 04    JMP   0x1489
(0062)     else DATA(0);                        
    1486: 41 08 FD AND   REG[0x8],0xFD
(0063)     SCK(1);                          //clk for SENSI-BUS
    1489: 43 10 80 OR    REG[0x10],0x80
(0064)     delay_5us();  	
    148C: 7C 1E 33 LCALL _delay_5us
(0065)     SCK(0);
    148F: 41 10 7F AND   REG[0x10],0x7F
(0066)   }
    1492: 50 02    MOV   A,0x2
    1494: 08       PUSH  A
    1495: 52 00    MOV   A,[X+0]
    1497: 08       PUSH  A
    1498: 62 D0 00 MOV   REG[0xD0],0x0
    149B: 7C 1E 53 LCALL __divmodu_8X8_8
    149E: 18       POP   A
    149F: 54 00    MOV   [X+0],A
    14A1: 38 FF    ADD   SP,0xFF
    14A3: 50 00    MOV   A,0x0
    14A5: 3B 00    CMP   A,[X+0]
    14A7: CF CE    JC    0x1476
(0067)   DATA(1);                           //release DATA-line
    14A9: 43 08 02 OR    REG[0x8],0x2
(0068)   SCK(1);                            //clk #9 for ack 
    14AC: 43 10 80 OR    REG[0x10],0x80
(0069)   delay_5us();
    14AF: 7C 1E 33 LCALL _delay_5us
(0070)   error=DATA_IN;                       //check ack (DATA will be pulled down by SHT11)
    14B2: 5D 08    MOV   A,REG[0x8]
    14B4: 62 D0 00 MOV   REG[0xD0],0x0
    14B7: 21 02    AND   A,0x2
    14B9: 54 01    MOV   [X+1],A
(0071)   SCK(0);        
    14BB: 41 10 7F AND   REG[0x10],0x7F
(0072)   return error;                     //error=1 in case of no acknowledge
    14BE: 52 01    MOV   A,[X+1]
    14C0: 38 FE    ADD   SP,0xFE
    14C2: 20       POP   X
    14C3: 7F       RET   
(0073) }
(0074) 
(0075) //----------------------------------------------------------------------------------
(0076) char s_read_byte(unsigned char ack)
(0077) //----------------------------------------------------------------------------------
(0078) // reads a byte form the Sensibus and gives an acknowledge in case of "ack=1" 
(0079) { 
_s_read_byte:
  val                  --> X+1
  i                    --> X+0
  ack                  --> X-4
    14C4: 10       PUSH  X
    14C5: 4F       MOV   X,SP
    14C6: 38 02    ADD   SP,0x2
(0080)   unsigned char i,val=0;
    14C8: 56 01 00 MOV   [X+1],0x0
(0081)   DATA(1);                           //release DATA-line
    14CB: 43 08 02 OR    REG[0x8],0x2
(0082)   for (i=0x80;i>0;i/=2)             //shift bit for masking
    14CE: 56 00 80 MOV   [X+0],0x80
    14D1: 80 2A    JMP   0x14FC
(0083)   { SCK(1);                          //clk for SENSI-BUS
    14D3: 43 10 80 OR    REG[0x10],0x80
(0084)     if (DATA_IN) val=(val | i);        //read bit  
    14D6: 5D 08    MOV   A,REG[0x8]
    14D8: 62 D0 00 MOV   REG[0xD0],0x0
    14DB: 53 3A    MOV   [__r0],A
    14DD: 47 3A 02 TST   [__r0],0x2
    14E0: A0 07    JZ    0x14E8
    14E2: 52 01    MOV   A,[X+1]
    14E4: 2B 00    OR    A,[X+0]
    14E6: 54 01    MOV   [X+1],A
(0085)     SCK(0);  					 
    14E8: 41 10 7F AND   REG[0x10],0x7F
(0086)   }
    14EB: 50 02    MOV   A,0x2
    14ED: 08       PUSH  A
    14EE: 52 00    MOV   A,[X+0]
    14F0: 08       PUSH  A
    14F1: 62 D0 00 MOV   REG[0xD0],0x0
    14F4: 7C 1E 53 LCALL __divmodu_8X8_8
    14F7: 18       POP   A
    14F8: 54 00    MOV   [X+0],A
    14FA: 38 FF    ADD   SP,0xFF
    14FC: 50 00    MOV   A,0x0
    14FE: 3B 00    CMP   A,[X+0]
    1500: CF D2    JC    0x14D3
(0087)   
(0088)   if (ack){
    1502: 3D FC 00 CMP   [X-4],0x0
    1505: A0 06    JZ    0x150C
(0089)   	DATA(0);
    1507: 41 08 FD AND   REG[0x8],0xFD
(0090)   } else {
    150A: 80 04    JMP   0x150F
(0091)   	DATA(1);
    150C: 43 08 02 OR    REG[0x8],0x2
(0092)   }
(0093)                          //in case of "ack==1" pull down DATA-Line
(0094)   SCK(1);                            //clk #9 for ack
    150F: 43 10 80 OR    REG[0x10],0x80
(0095)   delay_5us(); 
    1512: 7C 1E 33 LCALL _delay_5us
(0096)   SCK(0);				                   //release DATA-line						    
    1515: 41 10 7F AND   REG[0x10],0x7F
(0097)   DATA(1);
    1518: 43 08 02 OR    REG[0x8],0x2
(0098)           
(0099)   return val;
    151B: 52 01    MOV   A,[X+1]
    151D: 62 D0 00 MOV   REG[0xD0],0x0
    1520: 38 FE    ADD   SP,0xFE
    1522: 20       POP   X
    1523: 7F       RET   
(0100) }
(0101) 
(0102) //----------------------------------------------------------------------------------
(0103) void s_transstart(void)
(0104) //----------------------------------------------------------------------------------
(0105) // generates a transmission start 
(0106) //       _____         ________
(0107) // DATA:      |_______|
(0108) //           ___     ___
(0109) // SCK : ___|   |___|   |______
(0110) {  
(0111)    DATA(1); SCK(0);                   //Initial state
_s_transstart:
    1524: 43 08 02 OR    REG[0x8],0x2
    1527: 41 10 7F AND   REG[0x10],0x7F
(0112)    delay_5us();
    152A: 7C 1E 33 LCALL _delay_5us
(0113)    SCK(1);
    152D: 43 10 80 OR    REG[0x10],0x80
(0114)    delay_5us();
    1530: 7C 1E 33 LCALL _delay_5us
(0115)    DATA(0);
    1533: 41 08 FD AND   REG[0x8],0xFD
(0116)    delay_5us();
    1536: 7C 1E 33 LCALL _delay_5us
(0117)    SCK(0);  
    1539: 41 10 7F AND   REG[0x10],0x7F
(0118)    delay_5us();
    153C: 7C 1E 33 LCALL _delay_5us
(0119)    SCK(1);
    153F: 43 10 80 OR    REG[0x10],0x80
(0120)    delay_5us();
    1542: 7C 1E 33 LCALL _delay_5us
(0121)    DATA(1);		   
    1545: 43 08 02 OR    REG[0x8],0x2
(0122)    delay_5us();
    1548: 7C 1E 33 LCALL _delay_5us
(0123)    SCK(0);		   
    154B: 41 10 7F AND   REG[0x10],0x7F
    154E: 7F       RET   
(0124) }
(0125) 
(0126) //----------------------------------------------------------------------------------
(0127) void s_connectionreset(void)
(0128) //----------------------------------------------------------------------------------
(0129) // communication reset: DATA-line=1 and at least 9 SCK cycles followed by transstart
(0130) //       _____________________________________________________         ________
(0131) // DATA:                                                      |_______|
(0132) //          _    _    _    _    _    _    _    _    _        ___     ___
(0133) // SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______|   |___|   |______
(0134) {  
_s_connectionreset:
  i                    --> X+0
    154F: 10       PUSH  X
    1550: 4F       MOV   X,SP
    1551: 38 01    ADD   SP,0x1
(0135)   unsigned char i; 
(0136)   DATA(1); 
    1553: 43 08 02 OR    REG[0x8],0x2
(0137)   delay_5us();
    1556: 7C 1E 33 LCALL _delay_5us
(0138)   SCK(0);                    //Initial state
    1559: 41 10 7F AND   REG[0x10],0x7F
(0139)   delay_5us();  
    155C: 7C 1E 33 LCALL _delay_5us
(0140)   for(i=0;i<9;i++)                  //9 SCK cycles
    155F: 56 00 00 MOV   [X+0],0x0
    1562: 80 0F    JMP   0x1572
(0141)   { SCK(1);
    1564: 43 10 80 OR    REG[0x10],0x80
(0142)     delay_5us();
    1567: 7C 1E 33 LCALL _delay_5us
(0143)     SCK(0);
    156A: 41 10 7F AND   REG[0x10],0x7F
(0144)     delay_5us();
    156D: 7C 1E 33 LCALL _delay_5us
(0145)   }
    1570: 77 00    INC   [X+0]
    1572: 3D 00 09 CMP   [X+0],0x9
    1575: CF EE    JC    0x1564
(0146)   s_transstart();                   //transmission start
    1577: 9F AB    CALL  _s_transstart
    1579: 38 FF    ADD   SP,0xFF
    157B: 20       POP   X
    157C: 7F       RET   
(0147) }
(0148) 
(0149) //----------------------------------------------------------------------------------
(0150) char s_softreset(void)
(0151) //----------------------------------------------------------------------------------
(0152) // resets the sensor by a softreset 
(0153) { 
_s_softreset:
  error                --> X+0
    157D: 10       PUSH  X
    157E: 4F       MOV   X,SP
    157F: 38 01    ADD   SP,0x1
(0154)   unsigned char error=0;  
    1581: 56 00 00 MOV   [X+0],0x0
(0155)   s_connectionreset();              //reset communication
    1584: 9F C9    CALL  _s_connectionreset
(0156)   error+=s_write_byte(RESET);       //send RESET-command to sensor
    1586: 50 1E    MOV   A,0x1E
    1588: 08       PUSH  A
    1589: 9E DF    CALL  _s_write_byte
    158B: 38 FF    ADD   SP,0xFF
    158D: 62 D0 00 MOV   REG[0xD0],0x0
    1590: 05 00    ADD   [X+0],A
(0157)   return error;                     //error=1 in case of no response form the sensor
    1592: 52 00    MOV   A,[X+0]
    1594: 38 FF    ADD   SP,0xFF
    1596: 20       POP   X
    1597: 7F       RET   
(0158) }
(0159) 
(0160) //----------------------------------------------------------------------------------
(0161) char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
(0162) //----------------------------------------------------------------------------------
(0163) // reads the status register with checksum (8-bit)
(0164) { 
_s_read_statusreg:
  error                --> X+0
  p_checksum           --> X-7
  p_value              --> X-5
    1598: 10       PUSH  X
    1599: 4F       MOV   X,SP
    159A: 38 01    ADD   SP,0x1
(0165)   unsigned char error=0;
    159C: 56 00 00 MOV   [X+0],0x0
(0166)   s_transstart();                   //transmission start
    159F: 9F 83    CALL  _s_transstart
(0167)   error=s_write_byte(STATUS_REG_R); //send command to sensor
    15A1: 50 07    MOV   A,0x7
    15A3: 08       PUSH  A
    15A4: 9E C4    CALL  _s_write_byte
    15A6: 38 FF    ADD   SP,0xFF
    15A8: 62 D0 00 MOV   REG[0xD0],0x0
    15AB: 54 00    MOV   [X+0],A
(0168)   *p_value=s_read_byte(ACK);        //read status register (8-bit)
    15AD: 50 01    MOV   A,0x1
    15AF: 08       PUSH  A
    15B0: 9F 12    CALL  _s_read_byte
    15B2: 62 D0 00 MOV   REG[0xD0],0x0
    15B5: 53 3A    MOV   [__r0],A
    15B7: 52 FC    MOV   A,[X-4]
    15B9: 53 37    MOV   [__r3],A
    15BB: 52 FB    MOV   A,[X-5]
    15BD: 60 D5    MOV   REG[0xD5],A
    15BF: 51 3A    MOV   A,[__r0]
    15C1: 3F 37    MVI   [__r3],A
(0169)   *p_checksum=s_read_byte(noACK);   //read checksum (8-bit)  
    15C3: 50 00    MOV   A,0x0
    15C5: 08       PUSH  A
    15C6: 9E FC    CALL  _s_read_byte
    15C8: 38 FE    ADD   SP,0xFE
    15CA: 62 D0 00 MOV   REG[0xD0],0x0
    15CD: 53 3A    MOV   [__r0],A
    15CF: 52 FA    MOV   A,[X-6]
    15D1: 53 37    MOV   [__r3],A
    15D3: 52 F9    MOV   A,[X-7]
    15D5: 60 D5    MOV   REG[0xD5],A
    15D7: 51 3A    MOV   A,[__r0]
    15D9: 3F 37    MVI   [__r3],A
(0170)   return error;                     //error=1 in case of no response form the sensor
    15DB: 52 00    MOV   A,[X+0]
    15DD: 38 FF    ADD   SP,0xFF
    15DF: 20       POP   X
    15E0: 7F       RET   
(0171) }
(0172) 
(0173) //----------------------------------------------------------------------------------
(0174) char s_write_statusreg(unsigned char *p_value)
(0175) //----------------------------------------------------------------------------------
(0176) // writes the status register with checksum (8-bit)
(0177) { 
_s_write_statusreg:
  error                --> X+0
  p_value              --> X-5
    15E1: 10       PUSH  X
    15E2: 4F       MOV   X,SP
    15E3: 38 01    ADD   SP,0x1
(0178)   unsigned char error=0;
    15E5: 56 00 00 MOV   [X+0],0x0
(0179)   s_transstart();                   //transmission start
    15E8: 9F 3A    CALL  _s_transstart
(0180)   error+=s_write_byte(STATUS_REG_W);//send command to sensor
    15EA: 50 06    MOV   A,0x6
    15EC: 08       PUSH  A
    15ED: 9E 7B    CALL  _s_write_byte
    15EF: 62 D0 00 MOV   REG[0xD0],0x0
    15F2: 05 00    ADD   [X+0],A
(0181)   error+=s_write_byte(*p_value);    //send value of status register
    15F4: 52 FC    MOV   A,[X-4]
    15F6: 53 39    MOV   [__r1],A
    15F8: 52 FB    MOV   A,[X-5]
    15FA: 60 D4    MOV   REG[0xD4],A
    15FC: 3E 39    MVI   A,[__r1]
    15FE: 08       PUSH  A
    15FF: 9E 69    CALL  _s_write_byte
    1601: 38 FE    ADD   SP,0xFE
    1603: 62 D0 00 MOV   REG[0xD0],0x0
    1606: 05 00    ADD   [X+0],A
(0182)   return error;                     //error>=1 in case of no response form the sensor
    1608: 52 00    MOV   A,[X+0]
    160A: 38 FF    ADD   SP,0xFF
    160C: 20       POP   X
    160D: 7F       RET   
(0183) }
(0184)  							   
(0185) //----------------------------------------------------------------------------------
(0186) char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
(0187) //----------------------------------------------------------------------------------
(0188) // makes a measurement (humidity/temperature) with checksum
(0189) { 
_s_measure:
  error                --> X+2
  i                    --> X+0
  mode                 --> X-8
  p_checksum           --> X-7
  p_value              --> X-5
    160E: 10       PUSH  X
    160F: 4F       MOV   X,SP
    1610: 38 06    ADD   SP,0x6
(0190)   unsigned error=0;
    1612: 56 03 00 MOV   [X+3],0x0
    1615: 56 02 00 MOV   [X+2],0x0
(0191)   unsigned int i;
(0192) 
(0193)   s_transstart();                   //transmission start
    1618: 9F 0A    CALL  _s_transstart
(0194)   switch(mode){                     //send command to sensor
    161A: 52 F8    MOV   A,[X-8]
    161C: 54 05    MOV   [X+5],A
    161E: 56 04 00 MOV   [X+4],0x0
    1621: 3D 04 00 CMP   [X+4],0x0
    1624: B0 06    JNZ   0x162B
    1626: 3D 05 00 CMP   [X+5],0x0
    1629: A0 0D    JZ    0x1637
    162B: 3D 04 00 CMP   [X+4],0x0
    162E: B0 06    JNZ   0x1635
    1630: 3D 05 01 CMP   [X+5],0x1
    1633: A0 14    JZ    0x1648
    1635: 80 21    JMP   0x1657
(0195)     case TEMP	: error+=s_write_byte(MEASURE_TEMP); break;
    1637: 50 03    MOV   A,0x3
    1639: 08       PUSH  A
    163A: 9E 2E    CALL  _s_write_byte
    163C: 38 FF    ADD   SP,0xFF
    163E: 62 D0 00 MOV   REG[0xD0],0x0
    1641: 05 03    ADD   [X+3],A
    1643: 0F 02 00 ADC   [X+2],0x0
    1646: 80 10    JMP   0x1657
(0196)     case HUMI	: error+=s_write_byte(MEASURE_HUMI); break;
    1648: 50 05    MOV   A,0x5
    164A: 08       PUSH  A
    164B: 9E 1D    CALL  _s_write_byte
    164D: 38 FF    ADD   SP,0xFF
    164F: 62 D0 00 MOV   REG[0xD0],0x0
    1652: 05 03    ADD   [X+3],A
    1654: 0F 02 00 ADC   [X+2],0x0
(0197)     default     : break;	 
(0198)   }
(0199)   
(0200)   i=0;
    1657: 56 01 00 MOV   [X+1],0x0
    165A: 56 00 00 MOV   [X+0],0x0
    165D: 80 08    JMP   0x1666
(0201)   while (DATA_IN && i < 65535) {
(0202)   	delay_5us();
    165F: 97 D2    CALL  _delay_5us
(0203) 	i++;
    1661: 77 01    INC   [X+1]
    1663: 0F 00 00 ADC   [X+0],0x0
(0204)   }
    1666: 5D 08    MOV   A,REG[0x8]
    1668: 62 D0 00 MOV   REG[0xD0],0x0
    166B: 53 3A    MOV   [__r0],A
    166D: 47 3A 02 TST   [__r0],0x2
    1670: A0 1D    JZ    0x168E
    1672: 52 01    MOV   A,[X+1]
    1674: 53 37    MOV   [__r3],A
    1676: 52 00    MOV   A,[X+0]
    1678: 53 38    MOV   [__r2],A
    167A: 51 37    MOV   A,[__r3]
    167C: 11 FF    SUB   A,0xFF
    167E: 51 38    MOV   A,[__r2]
    1680: 19 FF    SBB   A,0xFF
    1682: 50 00    MOV   A,0x0
    1684: 19 00    SBB   A,0x0
    1686: 50 00    MOV   A,0x0
    1688: 31 80    XOR   A,0x80
    168A: 19 80    SBB   A,0x80
    168C: CF D2    JC    0x165F
(0205)   /*for (i=0;i<65535;i++) {
(0206)   	if(DATA_IN==0) {i=65535;} //wait until sensor has finished the measurement
(0207) 	delay_5us();
(0208) 	//delay_5us();
(0209) 	//delay_5us();
(0210) 	//delay_5us();
(0211)   }*/
(0212)   
(0213)   if(DATA_IN) error+=1;                // or timeout (~2 sec.) is reached
    168E: 5D 08    MOV   A,REG[0x8]
    1690: 62 D0 00 MOV   REG[0xD0],0x0
    1693: 53 3A    MOV   [__r0],A
    1695: 47 3A 02 TST   [__r0],0x2
    1698: A0 06    JZ    0x169F
    169A: 77 03    INC   [X+3]
    169C: 0F 02 00 ADC   [X+2],0x0
(0214)   *(p_value)  =s_read_byte(ACK);    //read the first byte (MSB)
    169F: 50 01    MOV   A,0x1
    16A1: 08       PUSH  A
    16A2: 9E 20    CALL  _s_read_byte
    16A4: 38 FF    ADD   SP,0xFF
    16A6: 62 D0 00 MOV   REG[0xD0],0x0
    16A9: 53 3A    MOV   [__r0],A
    16AB: 52 FC    MOV   A,[X-4]
    16AD: 53 37    MOV   [__r3],A
    16AF: 52 FB    MOV   A,[X-5]
    16B1: 60 D5    MOV   REG[0xD5],A
    16B3: 51 3A    MOV   A,[__r0]
    16B5: 3F 37    MVI   [__r3],A
(0215)   *(p_value+1)=s_read_byte(ACK);    //read the second byte (LSB)
    16B7: 50 01    MOV   A,0x1
    16B9: 08       PUSH  A
    16BA: 9E 08    CALL  _s_read_byte
    16BC: 62 D0 00 MOV   REG[0xD0],0x0
    16BF: 53 3A    MOV   [__r0],A
    16C1: 52 FC    MOV   A,[X-4]
    16C3: 01 01    ADD   A,0x1
    16C5: 53 37    MOV   [__r3],A
    16C7: 52 FB    MOV   A,[X-5]
    16C9: 09 00    ADC   A,0x0
    16CB: 60 D5    MOV   REG[0xD5],A
    16CD: 51 3A    MOV   A,[__r0]
    16CF: 3F 37    MVI   [__r3],A
(0216)   *p_checksum =s_read_byte(noACK);  //read checksum
    16D1: 50 00    MOV   A,0x0
    16D3: 08       PUSH  A
    16D4: 9D EE    CALL  _s_read_byte
    16D6: 38 FE    ADD   SP,0xFE
    16D8: 62 D0 00 MOV   REG[0xD0],0x0
    16DB: 53 3A    MOV   [__r0],A
    16DD: 52 FA    MOV   A,[X-6]
    16DF: 53 37    MOV   [__r3],A
    16E1: 52 F9    MOV   A,[X-7]
    16E3: 60 D5    MOV   REG[0xD5],A
    16E5: 51 3A    MOV   A,[__r0]
    16E7: 3F 37    MVI   [__r3],A
(0217)   
(0218)   return error;
    16E9: 52 03    MOV   A,[X+3]
    16EB: 38 FA    ADD   SP,0xFA
    16ED: 20       POP   X
    16EE: 7F       RET   
(0219)   
(0220) }
(0221) 
(0222) 
(0223) //----------------------------------------------------------------------------------------
(0224) void calc_sth11(float *p_humidity ,float *p_temperature)
(0225) //----------------------------------------------------------------------------------------
(0226) // calculates temperature [°C] and humidity [%RH] 
(0227) // input :  humi [Ticks] (12 bit) 
(0228) //          temp [Ticks] (14 bit)
(0229) // output:  humi [%RH]
(0230) //          temp [°C]
(0231) { float C1=-4.0;              // for 12 Bit
_calc_sth11:
  rh_lin               --> X+36
  t                    --> X+32
  T2                   --> X+28
  T1                   --> X+24
  C3                   --> X+20
  C2                   --> X+16
  C1                   --> X+12
  t_C                  --> X+8
  rh_true              --> X+4
  rh                   --> X+0
  p_temperature        --> X-7
  p_humidity           --> X-5
    16EF: 10       PUSH  X
    16F0: 4F       MOV   X,SP
    16F1: 38 28    ADD   SP,0x28
    16F3: 56 0C C0 MOV   [X+12],0xC0
    16F6: 56 0D 80 MOV   [X+13],0x80
    16F9: 56 0E 00 MOV   [X+14],0x0
    16FC: 56 0F 00 MOV   [X+15],0x0
(0232)   float C2=+0.0405;           // for 12 Bit
    16FF: 56 10 3D MOV   [X+16],0x3D
    1702: 56 11 25 MOV   [X+17],0x25
    1705: 56 12 E3 MOV   [X+18],0xE3
    1708: 56 13 54 MOV   [X+19],0x54
(0233)   float C3=-0.0000028;        // for 12 Bit
    170B: 56 14 B6 MOV   [X+20],0xB6
    170E: 56 15 3B MOV   [X+21],0x3B
    1711: 56 16 E7 MOV   [X+22],0xE7
    1714: 56 17 A2 MOV   [X+23],0xA2
(0234)   float T1=+0.01;             // for 14 Bit @ 5V
    1717: 56 18 3C MOV   [X+24],0x3C
    171A: 56 19 23 MOV   [X+25],0x23
    171D: 56 1A D7 MOV   [X+26],0xD7
    1720: 56 1B 0A MOV   [X+27],0xA
(0235)   float T2=+0.00008;           // for 14 Bit @ 5V	
    1723: 56 1C 38 MOV   [X+28],0x38
    1726: 56 1D A7 MOV   [X+29],0xA7
    1729: 56 1E C5 MOV   [X+30],0xC5
    172C: 56 1F AC MOV   [X+31],0xAC
(0236) 
(0237)   float rh=*p_humidity;             // rh:      Humidity [Ticks] 12 Bit 
    172F: 62 D0 00 MOV   REG[0xD0],0x0
    1732: 52 FC    MOV   A,[X-4]
    1734: 53 39    MOV   [__r1],A
    1736: 52 FB    MOV   A,[X-5]
    1738: 60 D4    MOV   REG[0xD4],A
    173A: 3E 39    MVI   A,[__r1]
    173C: 54 00    MOV   [X+0],A
    173E: 3E 39    MVI   A,[__r1]
    1740: 54 01    MOV   [X+1],A
    1742: 3E 39    MVI   A,[__r1]
    1744: 54 02    MOV   [X+2],A
    1746: 3E 39    MVI   A,[__r1]
    1748: 54 03    MOV   [X+3],A
(0238)   float t=*p_temperature;           // t:       Temperature [Ticks] 14 Bit
    174A: 52 FA    MOV   A,[X-6]
    174C: 53 39    MOV   [__r1],A
    174E: 52 F9    MOV   A,[X-7]
    1750: 60 D4    MOV   REG[0xD4],A
    1752: 3E 39    MVI   A,[__r1]
    1754: 54 20    MOV   [X+32],A
    1756: 3E 39    MVI   A,[__r1]
    1758: 54 21    MOV   [X+33],A
    175A: 3E 39    MVI   A,[__r1]
    175C: 54 22    MOV   [X+34],A
    175E: 3E 39    MVI   A,[__r1]
    1760: 54 23    MOV   [X+35],A
(0239)   float rh_lin;                     // rh_lin:  Humidity linear
(0240)   float rh_true;                    // rh_true: Temperature compensated humidity
(0241)   float t_C;                        // t_C   :  Temperature [°C]
(0242) 
(0243)   t_C=t*0.01 - 40;                  //calc. temperature from ticks to [°C]
    1762: 52 20    MOV   A,[X+32]
    1764: 08       PUSH  A
    1765: 52 21    MOV   A,[X+33]
    1767: 08       PUSH  A
    1768: 52 22    MOV   A,[X+34]
    176A: 08       PUSH  A
    176B: 52 23    MOV   A,[X+35]
    176D: 08       PUSH  A
    176E: 50 3C    MOV   A,0x3C
    1770: 08       PUSH  A
    1771: 50 23    MOV   A,0x23
    1773: 08       PUSH  A
    1774: 50 D7    MOV   A,0xD7
    1776: 08       PUSH  A
    1777: 50 0A    MOV   A,0xA
    1779: 08       PUSH  A
    177A: 7C 21 66 LCALL __fpmul
    177D: 18       POP   A
    177E: 53 37    MOV   [__r3],A
    1780: 18       POP   A
    1781: 53 38    MOV   [__r2],A
    1783: 18       POP   A
    1784: 53 39    MOV   [__r1],A
    1786: 18       POP   A
    1787: 53 3A    MOV   [__r0],A
    1789: 38 FC    ADD   SP,0xFC
    178B: 50 42    MOV   A,0x42
    178D: 08       PUSH  A
    178E: 50 20    MOV   A,0x20
    1790: 08       PUSH  A
    1791: 50 00    MOV   A,0x0
    1793: 08       PUSH  A
    1794: 08       PUSH  A
    1795: 51 3A    MOV   A,[__r0]
    1797: 08       PUSH  A
    1798: 51 39    MOV   A,[__r1]
    179A: 08       PUSH  A
    179B: 51 38    MOV   A,[__r2]
    179D: 08       PUSH  A
    179E: 51 37    MOV   A,[__r3]
    17A0: 08       PUSH  A
    17A1: 7C 22 90 LCALL __fpsub
    17A4: 18       POP   A
    17A5: 54 0B    MOV   [X+11],A
    17A7: 18       POP   A
    17A8: 54 0A    MOV   [X+10],A
    17AA: 18       POP   A
    17AB: 54 09    MOV   [X+9],A
    17AD: 18       POP   A
    17AE: 54 08    MOV   [X+8],A
    17B0: 38 FC    ADD   SP,0xFC
(0244)   rh_lin=C3*rh*rh + C2*rh + C1;     //calc. humidity from ticks to [%RH]
    17B2: 52 00    MOV   A,[X+0]
    17B4: 08       PUSH  A
    17B5: 52 01    MOV   A,[X+1]
    17B7: 08       PUSH  A
    17B8: 52 02    MOV   A,[X+2]
    17BA: 08       PUSH  A
    17BB: 52 03    MOV   A,[X+3]
    17BD: 08       PUSH  A
    17BE: 52 10    MOV   A,[X+16]
    17C0: 08       PUSH  A
    17C1: 52 11    MOV   A,[X+17]
    17C3: 08       PUSH  A
    17C4: 52 12    MOV   A,[X+18]
    17C6: 08       PUSH  A
    17C7: 52 13    MOV   A,[X+19]
    17C9: 08       PUSH  A
    17CA: 7C 21 66 LCALL __fpmul
    17CD: 18       POP   A
    17CE: 53 37    MOV   [__r3],A
    17D0: 18       POP   A
    17D1: 53 38    MOV   [__r2],A
    17D3: 18       POP   A
    17D4: 53 39    MOV   [__r1],A
    17D6: 18       POP   A
    17D7: 53 3A    MOV   [__r0],A
    17D9: 38 FC    ADD   SP,0xFC
    17DB: 52 00    MOV   A,[X+0]
    17DD: 08       PUSH  A
    17DE: 52 01    MOV   A,[X+1]
    17E0: 08       PUSH  A
    17E1: 52 02    MOV   A,[X+2]
    17E3: 08       PUSH  A
    17E4: 52 03    MOV   A,[X+3]
    17E6: 08       PUSH  A
    17E7: 52 14    MOV   A,[X+20]
    17E9: 08       PUSH  A
    17EA: 52 15    MOV   A,[X+21]
    17EC: 08       PUSH  A
    17ED: 52 16    MOV   A,[X+22]
    17EF: 08       PUSH  A
    17F0: 52 17    MOV   A,[X+23]
    17F2: 08       PUSH  A
    17F3: 7C 21 66 LCALL __fpmul
    17F6: 18       POP   A
    17F7: 53 33    MOV   [__r7],A
    17F9: 18       POP   A
    17FA: 53 34    MOV   [__r6],A
    17FC: 18       POP   A
    17FD: 53 35    MOV   [__r5],A
    17FF: 18       POP   A
    1800: 53 36    MOV   [__r4],A
    1802: 38 FC    ADD   SP,0xFC
    1804: 52 00    MOV   A,[X+0]
    1806: 08       PUSH  A
    1807: 52 01    MOV   A,[X+1]
    1809: 08       PUSH  A
    180A: 52 02    MOV   A,[X+2]
    180C: 08       PUSH  A
    180D: 52 03    MOV   A,[X+3]
    180F: 08       PUSH  A
    1810: 51 36    MOV   A,[__r4]
    1812: 08       PUSH  A
    1813: 51 35    MOV   A,[__r5]
    1815: 08       PUSH  A
    1816: 51 34    MOV   A,[__r6]
    1818: 08       PUSH  A
    1819: 51 33    MOV   A,[__r7]
    181B: 08       PUSH  A
    181C: 7C 21 66 LCALL __fpmul
    181F: 18       POP   A
    1820: 53 33    MOV   [__r7],A
    1822: 18       POP   A
    1823: 53 34    MOV   [__r6],A
    1825: 18       POP   A
    1826: 53 35    MOV   [__r5],A
    1828: 18       POP   A
    1829: 53 36    MOV   [__r4],A
    182B: 38 FC    ADD   SP,0xFC
    182D: 51 3A    MOV   A,[__r0]
    182F: 08       PUSH  A
    1830: 51 39    MOV   A,[__r1]
    1832: 08       PUSH  A
    1833: 51 38    MOV   A,[__r2]
    1835: 08       PUSH  A
    1836: 51 37    MOV   A,[__r3]
    1838: 08       PUSH  A
    1839: 51 36    MOV   A,[__r4]
    183B: 08       PUSH  A
    183C: 51 35    MOV   A,[__r5]
    183E: 08       PUSH  A
    183F: 51 34    MOV   A,[__r6]
    1841: 08       PUSH  A
    1842: 51 33    MOV   A,[__r7]
    1844: 08       PUSH  A
    1845: 7C 1F 26 LCALL __fpadd
    1848: 18       POP   A
    1849: 53 37    MOV   [__r3],A
    184B: 18       POP   A
    184C: 53 38    MOV   [__r2],A
    184E: 18       POP   A
    184F: 53 39    MOV   [__r1],A
    1851: 18       POP   A
    1852: 53 3A    MOV   [__r0],A
    1854: 38 FC    ADD   SP,0xFC
    1856: 52 0C    MOV   A,[X+12]
    1858: 08       PUSH  A
    1859: 52 0D    MOV   A,[X+13]
    185B: 08       PUSH  A
    185C: 52 0E    MOV   A,[X+14]
    185E: 08       PUSH  A
    185F: 52 0F    MOV   A,[X+15]
    1861: 08       PUSH  A
    1862: 51 3A    MOV   A,[__r0]
    1864: 08       PUSH  A
    1865: 51 39    MOV   A,[__r1]
    1867: 08       PUSH  A
    1868: 51 38    MOV   A,[__r2]
    186A: 08       PUSH  A
    186B: 51 37    MOV   A,[__r3]
    186D: 08       PUSH  A
    186E: 7C 1F 26 LCALL __fpadd
    1871: 18       POP   A
    1872: 54 27    MOV   [X+39],A
    1874: 18       POP   A
    1875: 54 26    MOV   [X+38],A
    1877: 18       POP   A
    1878: 54 25    MOV   [X+37],A
    187A: 18       POP   A
    187B: 54 24    MOV   [X+36],A
    187D: 38 FC    ADD   SP,0xFC
(0245)   rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;   //calc. temperature compensated humidity [%RH]
    187F: 52 00    MOV   A,[X+0]
    1881: 08       PUSH  A
    1882: 52 01    MOV   A,[X+1]
    1884: 08       PUSH  A
    1885: 52 02    MOV   A,[X+2]
    1887: 08       PUSH  A
    1888: 52 03    MOV   A,[X+3]
    188A: 08       PUSH  A
    188B: 52 1C    MOV   A,[X+28]
    188D: 08       PUSH  A
    188E: 52 1D    MOV   A,[X+29]
    1890: 08       PUSH  A
    1891: 52 1E    MOV   A,[X+30]
    1893: 08       PUSH  A
    1894: 52 1F    MOV   A,[X+31]
    1896: 08       PUSH  A
    1897: 7C 21 66 LCALL __fpmul
    189A: 18       POP   A
    189B: 53 37    MOV   [__r3],A
    189D: 18       POP   A
    189E: 53 38    MOV   [__r2],A
    18A0: 18       POP   A
    18A1: 53 39    MOV   [__r1],A
    18A3: 18       POP   A
    18A4: 38 FC    ADD   SP,0xFC
    18A6: 08       PUSH  A
    18A7: 51 39    MOV   A,[__r1]
    18A9: 08       PUSH  A
    18AA: 51 38    MOV   A,[__r2]
    18AC: 08       PUSH  A
    18AD: 51 37    MOV   A,[__r3]
    18AF: 08       PUSH  A
    18B0: 52 18    MOV   A,[X+24]
    18B2: 08       PUSH  A
    18B3: 52 19    MOV   A,[X+25]
    18B5: 08       PUSH  A
    18B6: 52 1A    MOV   A,[X+26]
    18B8: 08       PUSH  A
    18B9: 52 1B    MOV   A,[X+27]
    18BB: 08       PUSH  A
    18BC: 7C 1F 26 LCALL __fpadd
    18BF: 18       POP   A
    18C0: 53 37    MOV   [__r3],A
    18C2: 18       POP   A
    18C3: 53 38    MOV   [__r2],A
    18C5: 18       POP   A
    18C6: 53 39    MOV   [__r1],A
    18C8: 18       POP   A
    18C9: 53 3A    MOV   [__r0],A
    18CB: 38 FC    ADD   SP,0xFC
    18CD: 50 41    MOV   A,0x41
    18CF: 08       PUSH  A
    18D0: 50 C8    MOV   A,0xC8
    18D2: 08       PUSH  A
    18D3: 50 00    MOV   A,0x0
    18D5: 08       PUSH  A
    18D6: 08       PUSH  A
    18D7: 52 08    MOV   A,[X+8]
    18D9: 08       PUSH  A
    18DA: 52 09    MOV   A,[X+9]
    18DC: 08       PUSH  A
    18DD: 52 0A    MOV   A,[X+10]
    18DF: 08       PUSH  A
    18E0: 52 0B    MOV   A,[X+11]
    18E2: 08       PUSH  A
    18E3: 7C 22 90 LCALL __fpsub
    18E6: 18       POP   A
    18E7: 53 33    MOV   [__r7],A
    18E9: 18       POP   A
    18EA: 53 34    MOV   [__r6],A
    18EC: 18       POP   A
    18ED: 53 35    MOV   [__r5],A
    18EF: 18       POP   A
    18F0: 53 36    MOV   [__r4],A
    18F2: 38 FC    ADD   SP,0xFC
    18F4: 51 3A    MOV   A,[__r0]
    18F6: 08       PUSH  A
    18F7: 51 39    MOV   A,[__r1]
    18F9: 08       PUSH  A
    18FA: 51 38    MOV   A,[__r2]
    18FC: 08       PUSH  A
    18FD: 51 37    MOV   A,[__r3]
    18FF: 08       PUSH  A
    1900: 51 36    MOV   A,[__r4]
    1902: 08       PUSH  A
    1903: 51 35    MOV   A,[__r5]
    1905: 08       PUSH  A
    1906: 51 34    MOV   A,[__r6]
    1908: 08       PUSH  A
    1909: 51 33    MOV   A,[__r7]
    190B: 08       PUSH  A
    190C: 7C 21 66 LCALL __fpmul
    190F: 18       POP   A
    1910: 53 37    MOV   [__r3],A
    1912: 18       POP   A
    1913: 53 38    MOV   [__r2],A
    1915: 18       POP   A
    1916: 53 39    MOV   [__r1],A
    1918: 18       POP   A
    1919: 53 3A    MOV   [__r0],A
    191B: 38 FC    ADD   SP,0xFC
    191D: 52 24    MOV   A,[X+36]
    191F: 08       PUSH  A
    1920: 52 25    MOV   A,[X+37]
    1922: 08       PUSH  A
    1923: 52 26    MOV   A,[X+38]
    1925: 08       PUSH  A
    1926: 52 27    MOV   A,[X+39]
    1928: 08       PUSH  A
    1929: 51 3A    MOV   A,[__r0]
    192B: 08       PUSH  A
    192C: 51 39    MOV   A,[__r1]
    192E: 08       PUSH  A
    192F: 51 38    MOV   A,[__r2]
    1931: 08       PUSH  A
    1932: 51 37    MOV   A,[__r3]
    1934: 08       PUSH  A
    1935: 7C 1F 26 LCALL __fpadd
    1938: 18       POP   A
    1939: 54 07    MOV   [X+7],A
    193B: 18       POP   A
    193C: 54 06    MOV   [X+6],A
    193E: 18       POP   A
    193F: 54 05    MOV   [X+5],A
    1941: 18       POP   A
    1942: 54 04    MOV   [X+4],A
    1944: 38 FC    ADD   SP,0xFC
(0246)   if(rh_true>100)rh_true=100;       //cut if the value is outside of
    1946: 50 42    MOV   A,0x42
    1948: 08       PUSH  A
    1949: 50 C8    MOV   A,0xC8
    194B: 08       PUSH  A
    194C: 50 00    MOV   A,0x0
    194E: 08       PUSH  A
    194F: 08       PUSH  A
    1950: 52 04    MOV   A,[X+4]
    1952: 08       PUSH  A
    1953: 52 05    MOV   A,[X+5]
    1955: 08       PUSH  A
    1956: 52 06    MOV   A,[X+6]
    1958: 08       PUSH  A
    1959: 52 07    MOV   A,[X+7]
    195B: 08       PUSH  A
    195C: 7C 20 26 LCALL __fpcmp
    195F: 38 F8    ADD   SP,0xF8
    1961: 39 00    CMP   A,0x0
    1963: A0 11    JZ    0x1975
    1965: 39 01    CMP   A,0x1
    1967: B0 0D    JNZ   0x1975
    1969: 56 04 42 MOV   [X+4],0x42
    196C: 56 05 C8 MOV   [X+5],0xC8
    196F: 56 06 00 MOV   [X+6],0x0
    1972: 56 07 00 MOV   [X+7],0x0
(0247)   if(rh_true<0.1)rh_true=0.1;       //the physical possible range
    1975: 50 3D    MOV   A,0x3D
    1977: 08       PUSH  A
    1978: 50 CC    MOV   A,0xCC
    197A: 08       PUSH  A
    197B: 08       PUSH  A
    197C: 50 CD    MOV   A,0xCD
    197E: 08       PUSH  A
    197F: 52 04    MOV   A,[X+4]
    1981: 08       PUSH  A
    1982: 52 05    MOV   A,[X+5]
    1984: 08       PUSH  A
    1985: 52 06    MOV   A,[X+6]
    1987: 08       PUSH  A
    1988: 52 07    MOV   A,[X+7]
    198A: 08       PUSH  A
    198B: 62 D0 00 MOV   REG[0xD0],0x0
    198E: 7C 20 26 LCALL __fpcmp
    1991: 38 F8    ADD   SP,0xF8
    1993: 39 00    CMP   A,0x0
    1995: A0 11    JZ    0x19A7
    1997: 39 01    CMP   A,0x1
    1999: A0 0D    JZ    0x19A7
    199B: 56 04 3D MOV   [X+4],0x3D
    199E: 56 05 CC MOV   [X+5],0xCC
    19A1: 56 06 CC MOV   [X+6],0xCC
    19A4: 56 07 CD MOV   [X+7],0xCD
(0248) 
(0249)   *p_temperature=t_C;               //return temperature [°C]
    19A7: 62 D0 00 MOV   REG[0xD0],0x0
    19AA: 52 FA    MOV   A,[X-6]
    19AC: 53 39    MOV   [__r1],A
    19AE: 52 F9    MOV   A,[X-7]
    19B0: 60 D5    MOV   REG[0xD5],A
    19B2: 52 08    MOV   A,[X+8]
    19B4: 3F 39    MVI   [__r1],A
    19B6: 52 09    MOV   A,[X+9]
    19B8: 3F 39    MVI   [__r1],A
    19BA: 52 0A    MOV   A,[X+10]
    19BC: 3F 39    MVI   [__r1],A
    19BE: 52 0B    MOV   A,[X+11]
    19C0: 3F 39    MVI   [__r1],A
(0250)   *p_humidity=rh_true;              //return humidity[%RH]
    19C2: 52 FC    MOV   A,[X-4]
    19C4: 53 39    MOV   [__r1],A
    19C6: 52 FB    MOV   A,[X-5]
    19C8: 60 D5    MOV   REG[0xD5],A
    19CA: 52 04    MOV   A,[X+4]
    19CC: 3F 39    MVI   [__r1],A
    19CE: 52 05    MOV   A,[X+5]
    19D0: 3F 39    MVI   [__r1],A
    19D2: 52 06    MOV   A,[X+6]
    19D4: 3F 39    MVI   [__r1],A
    19D6: 52 07    MOV   A,[X+7]
    19D8: 3F 39    MVI   [__r1],A
    19DA: 38 D8    ADD   SP,0xD8
    19DC: 20       POP   X
    19DD: 7F       RET   
(0251) }
(0252) 
(0253) //--------------------------------------------------------------------
(0254) float calc_dewpoint(float h,float t)
(0255) //--------------------------------------------------------------------
(0256) // calculates dew point
(0257) // input:   humidity [%RH], temperature [°C]
(0258) // output:  dew point [°C]
(0259) { float logEx,dew_point;
_calc_dewpoint:
  dew_point            --> X+4
  logEx                --> X+0
  t                    --> X-11
  h                    --> X-7
    19DE: 10       PUSH  X
    19DF: 4F       MOV   X,SP
    19E0: 38 08    ADD   SP,0x8
(0260)   logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
    19E2: 52 F9    MOV   A,[X-7]
    19E4: 08       PUSH  A
    19E5: 52 FA    MOV   A,[X-6]
    19E7: 08       PUSH  A
    19E8: 52 FB    MOV   A,[X-5]
    19EA: 08       PUSH  A
    19EB: 52 FC    MOV   A,[X-4]
    19ED: 08       PUSH  A
    19EE: 7C 29 A1 LCALL _log10f
    19F1: 38 FC    ADD   SP,0xFC
    19F3: 62 D0 00 MOV   REG[0xD0],0x0
    19F6: 50 43    MOV   A,0x43
    19F8: 08       PUSH  A
    19F9: 50 6D    MOV   A,0x6D
    19FB: 08       PUSH  A
    19FC: 50 4C    MOV   A,0x4C
    19FE: 08       PUSH  A
    19FF: 50 CD    MOV   A,0xCD
    1A01: 08       PUSH  A
    1A02: 52 F5    MOV   A,[X-11]
    1A04: 08       PUSH  A
    1A05: 52 F6    MOV   A,[X-10]
    1A07: 08       PUSH  A
    1A08: 52 F7    MOV   A,[X-9]
    1A0A: 08       PUSH  A
    1A0B: 52 F8    MOV   A,[X-8]
    1A0D: 08       PUSH  A
    1A0E: 7C 1F 26 LCALL __fpadd
    1A11: 18       POP   A
    1A12: 53 33    MOV   [__r7],A
    1A14: 18       POP   A
    1A15: 53 34    MOV   [__r6],A
    1A17: 18       POP   A
    1A18: 53 35    MOV   [__r5],A
    1A1A: 18       POP   A
    1A1B: 53 36    MOV   [__r4],A
    1A1D: 38 FC    ADD   SP,0xFC
    1A1F: 52 F5    MOV   A,[X-11]
    1A21: 08       PUSH  A
    1A22: 52 F6    MOV   A,[X-10]
    1A24: 08       PUSH  A
    1A25: 52 F7    MOV   A,[X-9]
    1A27: 08       PUSH  A
    1A28: 52 F8    MOV   A,[X-8]
    1A2A: 08       PUSH  A
    1A2B: 50 40    MOV   A,0x40
    1A2D: 08       PUSH  A
    1A2E: 50 F0    MOV   A,0xF0
    1A30: 08       PUSH  A
    1A31: 50 00    MOV   A,0x0
    1A33: 08       PUSH  A
    1A34: 08       PUSH  A
    1A35: 7C 21 66 LCALL __fpmul
    1A38: 18       POP   A
    1A39: 53 2F    MOV   [__r11],A
    1A3B: 18       POP   A
    1A3C: 53 30    MOV   [__r10],A
    1A3E: 18       POP   A
    1A3F: 53 31    MOV   [__r9],A
    1A41: 18       POP   A
    1A42: 53 32    MOV   [__r8],A
    1A44: 38 FC    ADD   SP,0xFC
    1A46: 51 36    MOV   A,[__r4]
    1A48: 08       PUSH  A
    1A49: 51 35    MOV   A,[__r5]
    1A4B: 08       PUSH  A
    1A4C: 51 34    MOV   A,[__r6]
    1A4E: 08       PUSH  A
    1A4F: 51 33    MOV   A,[__r7]
    1A51: 08       PUSH  A
    1A52: 51 32    MOV   A,[__r8]
    1A54: 08       PUSH  A
    1A55: 51 31    MOV   A,[__r9]
    1A57: 08       PUSH  A
    1A58: 51 30    MOV   A,[__r10]
    1A5A: 08       PUSH  A
    1A5B: 51 2F    MOV   A,[__r11]
    1A5D: 08       PUSH  A
    1A5E: 7C 20 83 LCALL __fpdiv
    1A61: 18       POP   A
    1A62: 53 33    MOV   [__r7],A
    1A64: 18       POP   A
    1A65: 53 34    MOV   [__r6],A
    1A67: 18       POP   A
    1A68: 53 35    MOV   [__r5],A
    1A6A: 18       POP   A
    1A6B: 53 36    MOV   [__r4],A
    1A6D: 38 FC    ADD   SP,0xFC
    1A6F: 50 3F    MOV   A,0x3F
    1A71: 08       PUSH  A
    1A72: 50 29    MOV   A,0x29
    1A74: 08       PUSH  A
    1A75: 50 28    MOV   A,0x28
    1A77: 08       PUSH  A
    1A78: 50 39    MOV   A,0x39
    1A7A: 08       PUSH  A
    1A7B: 51 36    MOV   A,[__r4]
    1A7D: 08       PUSH  A
    1A7E: 51 35    MOV   A,[__r5]
    1A80: 08       PUSH  A
    1A81: 51 34    MOV   A,[__r6]
    1A83: 08       PUSH  A
    1A84: 51 33    MOV   A,[__r7]
    1A86: 08       PUSH  A
    1A87: 7C 1F 26 LCALL __fpadd
    1A8A: 18       POP   A
    1A8B: 53 33    MOV   [__r7],A
    1A8D: 18       POP   A
    1A8E: 53 34    MOV   [__r6],A
    1A90: 18       POP   A
    1A91: 53 35    MOV   [__r5],A
    1A93: 18       POP   A
    1A94: 53 36    MOV   [__r4],A
    1A96: 38 FC    ADD   SP,0xFC
    1A98: 50 40    MOV   A,0x40
    1A9A: 08       PUSH  A
    1A9B: 50 00    MOV   A,0x0
    1A9D: 08       PUSH  A
    1A9E: 08       PUSH  A
    1A9F: 08       PUSH  A
    1AA0: 51 3A    MOV   A,[__r0]
    1AA2: 08       PUSH  A
    1AA3: 51 39    MOV   A,[__r1]
    1AA5: 08       PUSH  A
    1AA6: 51 38    MOV   A,[__r2]
    1AA8: 08       PUSH  A
    1AA9: 51 37    MOV   A,[__r3]
    1AAB: 08       PUSH  A
    1AAC: 7C 22 90 LCALL __fpsub
    1AAF: 18       POP   A
    1AB0: 53 37    MOV   [__r3],A
    1AB2: 18       POP   A
    1AB3: 53 38    MOV   [__r2],A
    1AB5: 18       POP   A
    1AB6: 53 39    MOV   [__r1],A
    1AB8: 18       POP   A
    1AB9: 38 FC    ADD   SP,0xFC
    1ABB: 08       PUSH  A
    1ABC: 51 39    MOV   A,[__r1]
    1ABE: 08       PUSH  A
    1ABF: 51 38    MOV   A,[__r2]
    1AC1: 08       PUSH  A
    1AC2: 51 37    MOV   A,[__r3]
    1AC4: 08       PUSH  A
    1AC5: 51 36    MOV   A,[__r4]
    1AC7: 08       PUSH  A
    1AC8: 51 35    MOV   A,[__r5]
    1ACA: 08       PUSH  A
    1ACB: 51 34    MOV   A,[__r6]
    1ACD: 08       PUSH  A
    1ACE: 51 33    MOV   A,[__r7]
    1AD0: 08       PUSH  A
    1AD1: 7C 1F 26 LCALL __fpadd
    1AD4: 18       POP   A
    1AD5: 54 03    MOV   [X+3],A
    1AD7: 18       POP   A
    1AD8: 54 02    MOV   [X+2],A
    1ADA: 18       POP   A
    1ADB: 54 01    MOV   [X+1],A
    1ADD: 18       POP   A
    1ADE: 54 00    MOV   [X+0],A
    1AE0: 38 FC    ADD   SP,0xFC
(0261)   dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
    1AE2: 52 00    MOV   A,[X+0]
    1AE4: 08       PUSH  A
    1AE5: 52 01    MOV   A,[X+1]
    1AE7: 08       PUSH  A
    1AE8: 52 02    MOV   A,[X+2]
    1AEA: 08       PUSH  A
    1AEB: 52 03    MOV   A,[X+3]
    1AED: 08       PUSH  A
    1AEE: 50 41    MOV   A,0x41
    1AF0: 08       PUSH  A
    1AF1: 50 02    MOV   A,0x2
    1AF3: 08       PUSH  A
    1AF4: 50 92    MOV   A,0x92
    1AF6: 08       PUSH  A
    1AF7: 50 84    MOV   A,0x84
    1AF9: 08       PUSH  A
    1AFA: 7C 22 90 LCALL __fpsub
    1AFD: 18       POP   A
    1AFE: 53 37    MOV   [__r3],A
    1B00: 18       POP   A
    1B01: 53 38    MOV   [__r2],A
    1B03: 18       POP   A
    1B04: 53 39    MOV   [__r1],A
    1B06: 18       POP   A
    1B07: 53 3A    MOV   [__r0],A
    1B09: 38 FC    ADD   SP,0xFC
    1B0B: 50 3F    MOV   A,0x3F
    1B0D: 08       PUSH  A
    1B0E: 50 29    MOV   A,0x29
    1B10: 08       PUSH  A
    1B11: 50 28    MOV   A,0x28
    1B13: 08       PUSH  A
    1B14: 50 39    MOV   A,0x39
    1B16: 08       PUSH  A
    1B17: 52 00    MOV   A,[X+0]
    1B19: 08       PUSH  A
    1B1A: 52 01    MOV   A,[X+1]
    1B1C: 08       PUSH  A
    1B1D: 52 02    MOV   A,[X+2]
    1B1F: 08       PUSH  A
    1B20: 52 03    MOV   A,[X+3]
    1B22: 08       PUSH  A
    1B23: 7C 22 90 LCALL __fpsub
    1B26: 18       POP   A
    1B27: 53 33    MOV   [__r7],A
    1B29: 18       POP   A
    1B2A: 53 34    MOV   [__r6],A
    1B2C: 18       POP   A
    1B2D: 53 35    MOV   [__r5],A
    1B2F: 18       POP   A
    1B30: 38 FC    ADD   SP,0xFC
    1B32: 08       PUSH  A
    1B33: 51 35    MOV   A,[__r5]
    1B35: 08       PUSH  A
    1B36: 51 34    MOV   A,[__r6]
    1B38: 08       PUSH  A
    1B39: 51 33    MOV   A,[__r7]
    1B3B: 08       PUSH  A
    1B3C: 50 43    MOV   A,0x43
    1B3E: 08       PUSH  A
    1B3F: 50 6D    MOV   A,0x6D
    1B41: 08       PUSH  A
    1B42: 50 4C    MOV   A,0x4C
    1B44: 08       PUSH  A
    1B45: 50 CD    MOV   A,0xCD
    1B47: 08       PUSH  A
    1B48: 7C 21 66 LCALL __fpmul
    1B4B: 18       POP   A
    1B4C: 53 33    MOV   [__r7],A
    1B4E: 18       POP   A
    1B4F: 53 34    MOV   [__r6],A
    1B51: 18       POP   A
    1B52: 53 35    MOV   [__r5],A
    1B54: 18       POP   A
    1B55: 53 36    MOV   [__r4],A
    1B57: 38 FC    ADD   SP,0xFC
    1B59: 51 3A    MOV   A,[__r0]
    1B5B: 08       PUSH  A
    1B5C: 51 39    MOV   A,[__r1]
    1B5E: 08       PUSH  A
    1B5F: 51 38    MOV   A,[__r2]
    1B61: 08       PUSH  A
    1B62: 51 37    MOV   A,[__r3]
    1B64: 08       PUSH  A
    1B65: 51 36    MOV   A,[__r4]
    1B67: 08       PUSH  A
    1B68: 51 35    MOV   A,[__r5]
    1B6A: 08       PUSH  A
    1B6B: 51 34    MOV   A,[__r6]
    1B6D: 08       PUSH  A
    1B6E: 51 33    MOV   A,[__r7]
    1B70: 08       PUSH  A
    1B71: 7C 20 83 LCALL __fpdiv
    1B74: 18       POP   A
    1B75: 54 07    MOV   [X+7],A
    1B77: 18       POP   A
    1B78: 54 06    MOV   [X+6],A
    1B7A: 18       POP   A
    1B7B: 54 05    MOV   [X+5],A
    1B7D: 18       POP   A
    1B7E: 54 04    MOV   [X+4],A
    1B80: 38 FC    ADD   SP,0xFC
(0262)   return dew_point;
    1B82: 52 04    MOV   A,[X+4]
    1B84: 53 3A    MOV   [__r0],A
    1B86: 52 05    MOV   A,[X+5]
    1B88: 53 39    MOV   [__r1],A
    1B8A: 52 06    MOV   A,[X+6]
    1B8C: 53 38    MOV   [__r2],A
    1B8E: 52 07    MOV   A,[X+7]
    1B90: 53 37    MOV   [__r3],A
    1B92: 38 F8    ADD   SP,0xF8
    1B94: 20       POP   X
    1B95: 7F       RET   
(0263) }
(0264) 
(0265) //----------------------------------------------------------------------------------
(0266) void s_do_measure(void){
_s_do_measure:
  i                    --> X+14
  dew_point            --> X+10
  checksum             --> X+9
  temp_val             --> X+5
  humi_val             --> X+1
  error                --> X+0
    1B96: 10       PUSH  X
    1B97: 4F       MOV   X,SP
    1B98: 38 10    ADD   SP,0x10
(0267) //----------------------------------------------------------------------------------
(0268) // sample program that shows how to use SHT11 functions
(0269) // 1. connection reset 
(0270) // 2. measure humidity [ticks](12 bit) and temperature [ticks](14 bit)
(0271) // 3. calculate humidity [%RH] and temperature [°C]
(0272) // 4. calculate dew point [°C]
(0273) // 5. print temperature, humidity, dew point  
(0274) 
(0275) 
(0276) 
(0277)   value humi_val,temp_val;
(0278)   float dew_point;
(0279)   unsigned char error,checksum;
(0280)   unsigned int i;
(0281) 
(0282)   
(0283)   s_connectionreset();
    1B9A: 99 B3    CALL  _s_connectionreset
(0284)   
(0285)   //while(1)
(0286)   //{ 
(0287)   error=0;
    1B9C: 56 00 00 MOV   [X+0],0x0
(0288)   error+=s_measure((unsigned char*) &humi_val.i,&checksum,HUMI);  //measure humidity
    1B9F: 50 01    MOV   A,0x1
    1BA1: 08       PUSH  A
    1BA2: 62 D0 00 MOV   REG[0xD0],0x0
    1BA5: 5A 39    MOV   [__r1],X
    1BA7: 06 39 09 ADD   [__r1],0x9
    1BAA: 50 07    MOV   A,0x7
    1BAC: 08       PUSH  A
    1BAD: 51 39    MOV   A,[__r1]
    1BAF: 08       PUSH  A
    1BB0: 5A 39    MOV   [__r1],X
    1BB2: 06 39 01 ADD   [__r1],0x1
    1BB5: 50 07    MOV   A,0x7
    1BB7: 08       PUSH  A
    1BB8: 51 39    MOV   A,[__r1]
    1BBA: 08       PUSH  A
    1BBB: 9A 51    CALL  _s_measure
    1BBD: 62 D0 00 MOV   REG[0xD0],0x0
    1BC0: 05 00    ADD   [X+0],A
(0289)   error+=s_measure((unsigned char*) &temp_val.i,&checksum,TEMP);  //measure temperature
    1BC2: 50 00    MOV   A,0x0
    1BC4: 08       PUSH  A
    1BC5: 5A 39    MOV   [__r1],X
    1BC7: 06 39 09 ADD   [__r1],0x9
    1BCA: 50 07    MOV   A,0x7
    1BCC: 08       PUSH  A
    1BCD: 51 39    MOV   A,[__r1]
    1BCF: 08       PUSH  A
    1BD0: 5A 39    MOV   [__r1],X
    1BD2: 06 39 05 ADD   [__r1],0x5
    1BD5: 50 07    MOV   A,0x7
    1BD7: 08       PUSH  A
    1BD8: 51 39    MOV   A,[__r1]
    1BDA: 08       PUSH  A
    1BDB: 9A 31    CALL  _s_measure
    1BDD: 38 F6    ADD   SP,0xF6
    1BDF: 62 D0 00 MOV   REG[0xD0],0x0
    1BE2: 05 00    ADD   [X+0],A
(0290)   
(0291)   if(error!=0) {s_connectionreset(); LTRX_CPutString("SHTxx error: "); LTRX_PutSHexByte(error); }                //in case of an error: connection reset
    1BE4: A0 18    JZ    0x1BFD
    1BE6: 99 67    CALL  _s_connectionreset
    1BE8: 10       PUSH  X
    1BE9: 50 04    MOV   A,0x4
    1BEB: 08       PUSH  A
    1BEC: 50 15    MOV   A,0x15
    1BEE: 5C       MOV   X,A
    1BEF: 18       POP   A
    1BF0: 7C 0D 25 LCALL 0x0D25
    1BF3: 20       POP   X
    1BF4: 10       PUSH  X
    1BF5: 52 00    MOV   A,[X+0]
    1BF7: 7C 0C 68 LCALL 0x0C68
    1BFA: 20       POP   X
    1BFB: 82 32    JMP   0x1E2E
(0292)   else
(0293)   { humi_val.f=(float)humi_val.i;                   //converts integer to float
    1BFD: 62 D0 00 MOV   REG[0xD0],0x0
    1C00: 52 02    MOV   A,[X+2]
    1C02: 21 01    AND   A,0x1
    1C04: 53 39    MOV   [__r1],A
    1C06: 52 01    MOV   A,[X+1]
    1C08: 21 00    AND   A,0x0
    1C0A: 53 3A    MOV   [__r0],A
    1C0C: 51 39    MOV   A,[__r1]
    1C0E: 53 37    MOV   [__r3],A
    1C10: 51 3A    MOV   A,[__r0]
    1C12: 53 38    MOV   [__r2],A
    1C14: 47 38 80 TST   [__r2],0x80
    1C17: A0 09    JZ    0x1C21
    1C19: 55 39 FF MOV   [__r1],0xFF
    1C1C: 55 3A FF MOV   [__r0],0xFF
    1C1F: 80 0A    JMP   0x1C2A
    1C21: 62 D0 00 MOV   REG[0xD0],0x0
    1C24: 55 39 00 MOV   [__r1],0x0
    1C27: 55 3A 00 MOV   [__r0],0x0
    1C2A: 62 D0 00 MOV   REG[0xD0],0x0
    1C2D: 51 3A    MOV   A,[__r0]
    1C2F: 08       PUSH  A
    1C30: 51 39    MOV   A,[__r1]
    1C32: 08       PUSH  A
    1C33: 51 38    MOV   A,[__r2]
    1C35: 08       PUSH  A
    1C36: 51 37    MOV   A,[__r3]
    1C38: 08       PUSH  A
    1C39: 7C 23 20 LCALL __long2fp
    1C3C: 18       POP   A
    1C3D: 53 37    MOV   [__r3],A
    1C3F: 18       POP   A
    1C40: 53 38    MOV   [__r2],A
    1C42: 18       POP   A
    1C43: 53 39    MOV   [__r1],A
    1C45: 18       POP   A
    1C46: 53 3A    MOV   [__r0],A
    1C48: 52 02    MOV   A,[X+2]
    1C4A: 53 35    MOV   [__r5],A
    1C4C: 52 01    MOV   A,[X+1]
    1C4E: 53 36    MOV   [__r4],A
    1C50: 70 FB    AND   F,0xFB
    1C52: 6E 36    RRC   [__r4]
    1C54: 6E 35    RRC   [__r5]
    1C56: 51 35    MOV   A,[__r5]
    1C58: 53 33    MOV   [__r7],A
    1C5A: 51 36    MOV   A,[__r4]
    1C5C: 53 34    MOV   [__r6],A
    1C5E: 47 34 80 TST   [__r6],0x80
    1C61: A0 09    JZ    0x1C6B
    1C63: 55 35 FF MOV   [__r5],0xFF
    1C66: 55 36 FF MOV   [__r4],0xFF
    1C69: 80 0A    JMP   0x1C74
    1C6B: 62 D0 00 MOV   REG[0xD0],0x0
    1C6E: 55 35 00 MOV   [__r5],0x0
    1C71: 55 36 00 MOV   [__r4],0x0
    1C74: 62 D0 00 MOV   REG[0xD0],0x0
    1C77: 51 36    MOV   A,[__r4]
    1C79: 08       PUSH  A
    1C7A: 51 35    MOV   A,[__r5]
    1C7C: 08       PUSH  A
    1C7D: 51 34    MOV   A,[__r6]
    1C7F: 08       PUSH  A
    1C80: 51 33    MOV   A,[__r7]
    1C82: 08       PUSH  A
    1C83: 7C 23 20 LCALL __long2fp
    1C86: 18       POP   A
    1C87: 53 33    MOV   [__r7],A
    1C89: 18       POP   A
    1C8A: 53 34    MOV   [__r6],A
    1C8C: 18       POP   A
    1C8D: 53 35    MOV   [__r5],A
    1C8F: 18       POP   A
    1C90: 08       PUSH  A
    1C91: 51 35    MOV   A,[__r5]
    1C93: 08       PUSH  A
    1C94: 51 34    MOV   A,[__r6]
    1C96: 08       PUSH  A
    1C97: 51 33    MOV   A,[__r7]
    1C99: 08       PUSH  A
    1C9A: 50 40    MOV   A,0x40
    1C9C: 08       PUSH  A
    1C9D: 50 00    MOV   A,0x0
    1C9F: 08       PUSH  A
    1CA0: 08       PUSH  A
    1CA1: 08       PUSH  A
    1CA2: 7C 21 66 LCALL __fpmul
    1CA5: 18       POP   A
    1CA6: 53 33    MOV   [__r7],A
    1CA8: 18       POP   A
    1CA9: 53 34    MOV   [__r6],A
    1CAB: 18       POP   A
    1CAC: 53 35    MOV   [__r5],A
    1CAE: 18       POP   A
    1CAF: 53 36    MOV   [__r4],A
    1CB1: 38 FC    ADD   SP,0xFC
    1CB3: 51 3A    MOV   A,[__r0]
    1CB5: 08       PUSH  A
    1CB6: 51 39    MOV   A,[__r1]
    1CB8: 08       PUSH  A
    1CB9: 51 38    MOV   A,[__r2]
    1CBB: 08       PUSH  A
    1CBC: 51 37    MOV   A,[__r3]
    1CBE: 08       PUSH  A
    1CBF: 51 36    MOV   A,[__r4]
    1CC1: 08       PUSH  A
    1CC2: 51 35    MOV   A,[__r5]
    1CC4: 08       PUSH  A
    1CC5: 51 34    MOV   A,[__r6]
    1CC7: 08       PUSH  A
    1CC8: 51 33    MOV   A,[__r7]
    1CCA: 08       PUSH  A
    1CCB: 7C 1F 26 LCALL __fpadd
    1CCE: 18       POP   A
    1CCF: 54 04    MOV   [X+4],A
    1CD1: 18       POP   A
    1CD2: 54 03    MOV   [X+3],A
    1CD4: 18       POP   A
    1CD5: 54 02    MOV   [X+2],A
    1CD7: 18       POP   A
    1CD8: 54 01    MOV   [X+1],A
    1CDA: 38 FC    ADD   SP,0xFC
(0294)     temp_val.f=(float)temp_val.i;                   //converts integer to float
    1CDC: 52 06    MOV   A,[X+6]
    1CDE: 21 01    AND   A,0x1
    1CE0: 53 39    MOV   [__r1],A
    1CE2: 52 05    MOV   A,[X+5]
    1CE4: 21 00    AND   A,0x0
    1CE6: 53 3A    MOV   [__r0],A
    1CE8: 51 39    MOV   A,[__r1]
    1CEA: 53 37    MOV   [__r3],A
    1CEC: 51 3A    MOV   A,[__r0]
    1CEE: 53 38    MOV   [__r2],A
    1CF0: 47 38 80 TST   [__r2],0x80
    1CF3: A0 09    JZ    0x1CFD
    1CF5: 55 39 FF MOV   [__r1],0xFF
    1CF8: 55 3A FF MOV   [__r0],0xFF
    1CFB: 80 0A    JMP   0x1D06
    1CFD: 62 D0 00 MOV   REG[0xD0],0x0
    1D00: 55 39 00 MOV   [__r1],0x0
    1D03: 55 3A 00 MOV   [__r0],0x0
    1D06: 62 D0 00 MOV   REG[0xD0],0x0
    1D09: 51 3A    MOV   A,[__r0]
    1D0B: 08       PUSH  A
    1D0C: 51 39    MOV   A,[__r1]
    1D0E: 08       PUSH  A
    1D0F: 51 38    MOV   A,[__r2]
    1D11: 08       PUSH  A
    1D12: 51 37    MOV   A,[__r3]
    1D14: 08       PUSH  A
    1D15: 7C 23 20 LCALL __long2fp
    1D18: 18       POP   A
    1D19: 53 37    MOV   [__r3],A
    1D1B: 18       POP   A
    1D1C: 53 38    MOV   [__r2],A
    1D1E: 18       POP   A
    1D1F: 53 39    MOV   [__r1],A
    1D21: 18       POP   A
    1D22: 53 3A    MOV   [__r0],A
    1D24: 52 06    MOV   A,[X+6]
    1D26: 53 35    MOV   [__r5],A
    1D28: 52 05    MOV   A,[X+5]
    1D2A: 53 36    MOV   [__r4],A
    1D2C: 70 FB    AND   F,0xFB
    1D2E: 6E 36    RRC   [__r4]
    1D30: 6E 35    RRC   [__r5]
    1D32: 51 35    MOV   A,[__r5]
    1D34: 53 33    MOV   [__r7],A
    1D36: 51 36    MOV   A,[__r4]
    1D38: 53 34    MOV   [__r6],A
    1D3A: 47 34 80 TST   [__r6],0x80
    1D3D: A0 09    JZ    0x1D47
    1D3F: 55 35 FF MOV   [__r5],0xFF
    1D42: 55 36 FF MOV   [__r4],0xFF
    1D45: 80 0A    JMP   0x1D50
    1D47: 62 D0 00 MOV   REG[0xD0],0x0
    1D4A: 55 35 00 MOV   [__r5],0x0
    1D4D: 55 36 00 MOV   [__r4],0x0
    1D50: 62 D0 00 MOV   REG[0xD0],0x0
    1D53: 51 36    MOV   A,[__r4]
    1D55: 08       PUSH  A
    1D56: 51 35    MOV   A,[__r5]
    1D58: 08       PUSH  A
    1D59: 51 34    MOV   A,[__r6]
    1D5B: 08       PUSH  A
    1D5C: 51 33    MOV   A,[__r7]
    1D5E: 08       PUSH  A
    1D5F: 7C 23 20 LCALL __long2fp
    1D62: 18       POP   A
    1D63: 53 33    MOV   [__r7],A
    1D65: 18       POP   A
    1D66: 53 34    MOV   [__r6],A
    1D68: 18       POP   A
    1D69: 53 35    MOV   [__r5],A
    1D6B: 18       POP   A
    1D6C: 08       PUSH  A
    1D6D: 51 35    MOV   A,[__r5]
    1D6F: 08       PUSH  A
    1D70: 51 34    MOV   A,[__r6]
    1D72: 08       PUSH  A
    1D73: 51 33    MOV   A,[__r7]
    1D75: 08       PUSH  A
    1D76: 50 40    MOV   A,0x40
    1D78: 08       PUSH  A
    1D79: 50 00    MOV   A,0x0
    1D7B: 08       PUSH  A
    1D7C: 08       PUSH  A
    1D7D: 08       PUSH  A
    1D7E: 7C 21 66 LCALL __fpmul
    1D81: 18       POP   A
    1D82: 53 33    MOV   [__r7],A
    1D84: 18       POP   A
    1D85: 53 34    MOV   [__r6],A
    1D87: 18       POP   A
    1D88: 53 35    MOV   [__r5],A
    1D8A: 18       POP   A
    1D8B: 53 36    MOV   [__r4],A
    1D8D: 38 FC    ADD   SP,0xFC
    1D8F: 51 3A    MOV   A,[__r0]
    1D91: 08       PUSH  A
    1D92: 51 39    MOV   A,[__r1]
    1D94: 08       PUSH  A
    1D95: 51 38    MOV   A,[__r2]
    1D97: 08       PUSH  A
    1D98: 51 37    MOV   A,[__r3]
    1D9A: 08       PUSH  A
    1D9B: 51 36    MOV   A,[__r4]
    1D9D: 08       PUSH  A
    1D9E: 51 35    MOV   A,[__r5]
    1DA0: 08       PUSH  A
    1DA1: 51 34    MOV   A,[__r6]
    1DA3: 08       PUSH  A
    1DA4: 51 33    MOV   A,[__r7]
    1DA6: 08       PUSH  A
    1DA7: 7C 1F 26 LCALL __fpadd
    1DAA: 18       POP   A
    1DAB: 54 08    MOV   [X+8],A
    1DAD: 18       POP   A
    1DAE: 54 07    MOV   [X+7],A
    1DB0: 18       POP   A
    1DB1: 54 06    MOV   [X+6],A
    1DB3: 18       POP   A
    1DB4: 54 05    MOV   [X+5],A
    1DB6: 38 FC    ADD   SP,0xFC
(0295)     calc_sth11(&humi_val.f,&temp_val.f);            //calculate humidity, temperature
    1DB8: 5A 39    MOV   [__r1],X
    1DBA: 06 39 05 ADD   [__r1],0x5
    1DBD: 50 07    MOV   A,0x7
    1DBF: 08       PUSH  A
    1DC0: 51 39    MOV   A,[__r1]
    1DC2: 08       PUSH  A
    1DC3: 5A 39    MOV   [__r1],X
    1DC5: 06 39 01 ADD   [__r1],0x1
    1DC8: 50 07    MOV   A,0x7
    1DCA: 08       PUSH  A
    1DCB: 51 39    MOV   A,[__r1]
    1DCD: 08       PUSH  A
    1DCE: 99 1F    CALL  _calc_sth11
    1DD0: 38 FC    ADD   SP,0xFC
(0296)     dew_point=calc_dewpoint(humi_val.f,temp_val.f); //calculate dew point
    1DD2: 52 05    MOV   A,[X+5]
    1DD4: 08       PUSH  A
    1DD5: 52 06    MOV   A,[X+6]
    1DD7: 08       PUSH  A
    1DD8: 52 07    MOV   A,[X+7]
    1DDA: 08       PUSH  A
    1DDB: 52 08    MOV   A,[X+8]
    1DDD: 08       PUSH  A
    1DDE: 52 01    MOV   A,[X+1]
    1DE0: 08       PUSH  A
    1DE1: 52 02    MOV   A,[X+2]
    1DE3: 08       PUSH  A
    1DE4: 52 03    MOV   A,[X+3]
    1DE6: 08       PUSH  A
    1DE7: 52 04    MOV   A,[X+4]
    1DE9: 08       PUSH  A
    1DEA: 9B F2    CALL  _calc_dewpoint
    1DEC: 62 D0 00 MOV   REG[0xD0],0x0
    1DEF: 51 3A    MOV   A,[__r0]
    1DF1: 54 0A    MOV   [X+10],A
    1DF3: 51 39    MOV   A,[__r1]
    1DF5: 54 0B    MOV   [X+11],A
    1DF7: 51 38    MOV   A,[__r2]
    1DF9: 54 0C    MOV   [X+12],A
    1DFB: 51 37    MOV   A,[__r3]
    1DFD: 54 0D    MOV   [X+13],A
(0297) 	  
(0298) 	cprintf("SHTxx T:%5.1f C RH:%5.1f% pct DewPt:%5.1f C\r\n",temp_val.f,humi_val.f,dew_point);
    1DFF: 52 0A    MOV   A,[X+10]
    1E01: 08       PUSH  A
    1E02: 52 0B    MOV   A,[X+11]
    1E04: 08       PUSH  A
    1E05: 52 0C    MOV   A,[X+12]
    1E07: 08       PUSH  A
    1E08: 52 0D    MOV   A,[X+13]
    1E0A: 08       PUSH  A
    1E0B: 52 01    MOV   A,[X+1]
    1E0D: 08       PUSH  A
    1E0E: 52 02    MOV   A,[X+2]
    1E10: 08       PUSH  A
    1E11: 52 03    MOV   A,[X+3]
    1E13: 08       PUSH  A
    1E14: 52 04    MOV   A,[X+4]
    1E16: 08       PUSH  A
    1E17: 52 05    MOV   A,[X+5]
    1E19: 08       PUSH  A
    1E1A: 52 06    MOV   A,[X+6]
    1E1C: 08       PUSH  A
    1E1D: 52 07    MOV   A,[X+7]
    1E1F: 08       PUSH  A
    1E20: 52 08    MOV   A,[X+8]
    1E22: 08       PUSH  A
    1E23: 50 03    MOV   A,0x3
    1E25: 08       PUSH  A
    1E26: 50 E7    MOV   A,0xE7
    1E28: 08       PUSH  A
    1E29: 7C 2C C9 LCALL _cprintf
    1E2C: 38 EA    ADD   SP,0xEA
(0299)   }
    1E2E: 38 F0    ADD   SP,0xF0
    1E30: 20       POP   X
    1E31: 7F       RET   
(0300)  
(0301) } 
(0302) 
(0303) // Delay of 1 us when main clock == 24 MHz and Sysclk = main / 1
(0304) // Acctually, calling this function takes 2.3 us, do not use it for 
(0305) // precise timing loops
(0306) void delay_1us(void) {
(0307) 	return;
_delay_1us:
    1E32: 7F       RET   
(0308) }
(0309) 
(0310) // Delay of 5 us when main clock == 24 MHz and Sysclk = main / 1
(0311) // Actual delay: 5.3 us
(0312) void delay_5us(void) {
(0313) 
(0314) 	asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
_delay_5us:
    1E33: 40       NOP   
    1E34: 40       NOP   
    1E35: 40       NOP   
    1E36: 40       NOP   
    1E37: 40       NOP   
(0315) 	asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
    1E38: 40       NOP   
    1E39: 40       NOP   
    1E3A: 40       NOP   
    1E3B: 40       NOP   
    1E3C: 40       NOP   
(0316) 	asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
    1E3D: 40       NOP   
    1E3E: 40       NOP   
    1E3F: 40       NOP   
    1E40: 40       NOP   
    1E41: 40       NOP   
(0317) 	asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
    1E42: 40       NOP   
    1E43: 40       NOP   
    1E44: 40       NOP   
    1E45: 40       NOP   
    1E46: 40       NOP   
(0318) 
(0319) 	return;
(0320) }
FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.02.004
