//*****************************************************************************
//*****************************************************************************
//  FILENAME: OneWire.h
//   Version: 1.1, Updated on 2009/10/15 at 17:11:37
//  Generated by PSoC Designer 5.0.1127.0
//
//  DESCRIPTION: OneWire User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#include <m8c.h>

#define OneWire_CRC16_ENABLE 0
#define OneWire_SEARCH_ENABLE 1
#define OneWire_OVERDRIVE_ENABLE 0
#define OneWire_PARASITE_ENABLE 0

#pragma fastcall16  OneWire_Start
#pragma fastcall16  OneWire_Stop

#pragma fastcall16  OneWire_fReset
#pragma fastcall16  OneWire_WriteBit
#pragma fastcall16  OneWire_bReadBit
#pragma fastcall16  OneWire_WriteByte
#pragma fastcall16  OneWire_bReadByte
#pragma fastcall16  OneWire_ClearCRC8
#pragma fastcall16  OneWire_bCRC8

#if ( OneWire_CRC16_ENABLE )
#pragma fastcall16  OneWire_ClearCRC16
#pragma fastcall16  OneWire_wCRC16
#endif

#if ( OneWire_SEARCH_ENABLE )
#pragma fastcall16  OneWire_GetROM
#pragma fastcall16  OneWire_SetROM
#pragma fastcall16  OneWire_fFindFirst
#pragma fastcall16  OneWire_fFindNext
#pragma fastcall16  OneWire_fVerify
#pragma fastcall16  OneWire_FamilyTargetSetup
#pragma fastcall16  OneWire_FamilySkipSetup
#endif

#if ( OneWire_OVERDRIVE_ENABLE )
#pragma fastcall16  OneWire_SetOverdrive
#pragma fastcall16  OneWire_ClearOverdrive
#endif

#if ( OneWire_PARASITE_ENABLE )
#pragma fastcall16  OneWire_WriteByteStrong
#pragma fastcall16  OneWire_SetResistive
#endif

extern void  OneWire_Start(void);
extern void  OneWire_Stop(void);

extern BYTE  OneWire_fReset(void);
extern void  OneWire_WriteBit(BYTE bData);
extern BYTE  OneWire_bReadBit(void);
extern void  OneWire_WriteByte(BYTE bData);
extern BYTE  OneWire_bReadByte(void);
extern void  OneWire_ClearCRC8(void);
extern BYTE  OneWire_bCRC8(BYTE bData);

#if ( OneWire_CRC16_ENABLE )
extern void  OneWire_ClearCRC16(void);
extern WORD  OneWire_wCRC16Value(BYTE bData);
#endif

#if ( OneWire_SEARCH_ENABLE )
extern void  OneWire_GetROM(BYTE * pbArray);
extern void  OneWire_SetROM(BYTE * pbArray);
extern BYTE  OneWire_fFindFirst(void);
extern BYTE  OneWire_fFindNext(void);
extern BYTE  OneWire_fVerify(void);
extern void  OneWire_FamilyTargetSetup(BYTE bFamilyType);
extern void  OneWire_FamilySkipSetup(void);
#endif

#if ( OneWire_OVERDRIVE_ENABLE )
extern void  OneWire_SetOverdrive(void);
extern void  OneWire_ClearOverdrive(void);
#endif

#if ( OneWire_PARASITE_ENABLE )
extern void  OneWire_WriteByteStrong(BYTE bData);
extern void  OneWire_SetResistive(void);
#endif


/************************************************
*  Interrupt registers and masks
*************************************************/
#define OneWire_BIT_INT_MASK                     ( 0x40 )
#define OneWire_BIT_INT_REG                      ( 0x0df )

#if ( OneWire_BIT_INT_REG - INT_MSK2)
#define OneWire_BIT_INT_CLR                       ( INT_CLR1 )
#else
#define OneWire_BIT_INT_CLR                       ( INT_CLR2 )
#endif

/************************************************
*  Hardware Register Definitions
*************************************************/
#pragma ioport  OneWire_BITCLK_CONTROL_REG: 0x057          //Control register
BYTE            OneWire_BITCLK_CONTROL_REG;
#pragma ioport  OneWire_BITCLK_COUNTER_REG: 0x054          //Counter register
BYTE            OneWire_BITCLK_COUNTER_REG;
#pragma ioport  OneWire_BITCLK_PERIOD_REG:  0x055          //Period value register
BYTE            OneWire_BITCLK_PERIOD_REG;
#pragma ioport  OneWire_BITCLK_COMPARE_REG: 0x056          //CompareValue register
BYTE            OneWire_BITCLK_COMPARE_REG;
#pragma ioport  OneWire_BITCLK_FUNC_REG:    0x154          //Function register
BYTE            OneWire_BITCLK_FUNC_REG;
#pragma ioport  OneWire_BITCLK_INPUT_REG:   0x155          //Input register
BYTE            OneWire_BITCLK_INPUT_REG;
#pragma ioport  OneWire_BITCLK_OUTPUT_REG:  0x156          //Output register
BYTE            OneWire_BITCLK_OUTPUT_REG;

#pragma ioport  OneWire_XCVR_CONTROL_REG:   0x05b          //Control register
BYTE            OneWire_XCVR_CONTROL_REG;
#pragma ioport  OneWire_XCVR_SHIFT_REG: 0x058              //TX Shift Register register
BYTE            OneWire_XCVR_SHIFT_REG;
#pragma ioport  OneWire_XCVR_TX_BUFFER_REG: 0x059          //TX Buffer Register
BYTE            OneWire_XCVR_TX_BUFFER_REG;
#pragma ioport  OneWire_XCVR_RX_BUFFER_REG: 0x05a          //RX Buffer Register
BYTE            OneWire_XCVR_RX_BUFFER_REG;
#pragma ioport  OneWire_XCVR_FUNC_REG:  0x158              //Function register
BYTE            OneWire_XCVR_FUNC_REG;
#pragma ioport  OneWire_XCVR_INPUT_REG: 0x159              //Input register
BYTE            OneWire_XCVR_INPUT_REG;
#pragma ioport  OneWire_XCVR_OUTPUT_REG:    0x15a          //Output register
BYTE            OneWire_XCVR_OUTPUT_REG;

// end of file
