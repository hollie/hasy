

HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:23 2009


     1                          	processor	CY8C29566
     2                          opt	jumpopt
     3                          opt	noundef
     4                          setz	macro
     5                          	or	f,2
     6  413B                    	endm
     7                          clrz	macro
     8                          	and	f,not 2
     9  413B                    	endm
    10                          setc	macro
    11                          	or	f,4
    12  413B                    	endm
    13                          clrc	macro
    14                          	and	f,not 4
    15  413B                    	endm
    16                          cplc	macro
    17                          	xor	f,4
    18  413B                    	endm
    19                          nand	macro nand_arg1,nand_arg2
    20                          	and	nand_arg1,not (nand_arg2)
    21  413B                    	endm
    22  006C                    TMP_DR0	equ	108
    23  006D                    TMP_DR1	equ	109
    24  006E                    TMP_DR2	equ	110
    25  006F                    TMP_DR3	equ	111
    26  00D0                    CUR_PP	equ	208
    27  00D1                    STK_PP	equ	209
    28  00D3                    IDX_PP	equ	211
    29  00D4                    MVR_PP	equ	212
    30  00D5                    MVW_PP	equ	213
    31  00E8                    MUL0_X	equ	232
    32  00E9                    MUL0_Y	equ	233
    33  00EA                    MUL0_DH	equ	234
    34  00EB                    MUL0_DL	equ	235
    35  00A8                    MUL1_X	equ	168
    36  00A9                    MUL1_Y	equ	169
    37  00AA                    MUL1_DH	equ	170
    38  00AB                    MUL1_DL	equ	171
    39                          ;stack_size is 139 bss 21
    40                          
    41                          ; Stacksize: 139; Bank 0 TOTAL: 139 (0x8B); Other banks TOTAL: 277 (0x115)
    42                          ;stack_size is 139 bss 21
    43                          
    44                          ; Stacksize: 139; Bank 0 TOTAL: -138 (0xFFFFFF76); Other banks TOTAL: 277 (0x115)
    45  0001                    main@UART_bfr	equ	??_main+0
    46                          	global	main@UART_bfr
    47  0004                    s_do_measure@temp_val	equ	??_s_do_measure+0
    48                          	global	s_do_measure@temp_val
    49  0008                    s_do_measure@humi_val	equ	??_s_do_measure+4
    50                          	global	s_do_measure@humi_val
    51  000C                    s_do_measure@dew_point	equ	??_s_do_measure+8
    52                          	global	s_do_measure@dew_point
    53  0010                    s_do_measure@error	equ	??_s_do_measure+12
    54                          	global	s_do_measure@error
    55  0011                    s_do_measure@checksum	equ	??_s_do_measure+13
    56                          	global	s_do_measure@checksum
    57  0004                    oo_report@data	equ	??_oo_report+0
    58                          	global	oo_report@data
    59  0019                    s_measure@error	equ	??_s_measure+0
    60                          	global	s_measure@error
    61  001B                    s_measure@i	equ	??_s_measure+2
    62                          	global	s_measure@i
    63  0014                    s_measure@p_value	equ	?_s_measure+0
    64                          	global	s_measure@p_value
    65  0016                    s_measure@p_checksum	equ	?_s_measure+2
    66                          	global	s_measure@p_checksum
    67  0018                    s_measure@mode	equ	?_s_measure+4
    68                          	global	s_measure@mode
    69  001C                    calc_dewpoint@logEx	equ	??_calc_dewpoint+0
    70                          	global	calc_dewpoint@logEx
    71  0020                    calc_dewpoint@dew_point	equ	??_calc_dewpoint+4
    72                          	global	calc_dewpoint@dew_point
    73  0024                    _calc_dewpoint$2735	equ	??_calc_dewpoint+8
    74                          	global	_calc_dewpoint$2735
    75  0028                    _calc_dewpoint$2734	equ	??_calc_dewpoint+12
    76                          	global	_calc_dewpoint$2734
    77  002C                    _calc_dewpoint$2729	equ	??_calc_dewpoint+16
    78                          	global	_calc_dewpoint$2729
    79  0030                    _calc_dewpoint$2728	equ	??_calc_dewpoint+20
    80                          	global	_calc_dewpoint$2728
    81  0014                    calc_dewpoint@h	equ	?_calc_dewpoint+0
    82                          	global	calc_dewpoint@h
    83  0018                    calc_dewpoint@t	equ	?_calc_dewpoint+4
    84                          	global	calc_dewpoint@t
    85  0018                    calc_sth11@rh_true	equ	??_calc_sth11+0
    86                          	global	calc_sth11@rh_true
    87  001C                    calc_sth11@rh	equ	??_calc_sth11+4
    88                          	global	calc_sth11@rh
    89  0020                    calc_sth11@t_C	equ	??_calc_sth11+8
    90                          	global	calc_sth11@t_C
    91  0024                    calc_sth11@rh_lin	equ	??_calc_sth11+12
    92                          	global	calc_sth11@rh_lin
    93  0028                    calc_sth11@t	equ	??_calc_sth11+16
    94                          	global	calc_sth11@t
    95  002C                    _calc_sth11$2720	equ	??_calc_sth11+20
    96                          	global	_calc_sth11$2720
    97  0030                    _calc_sth11$2713	equ	??_calc_sth11+24
    98                          	global	_calc_sth11$2713
    99  0034                    _calc_sth11$2714	equ	??_calc_sth11+28
   100                          	global	_calc_sth11$2714
   101  0014                    calc_sth11@p_humidity	equ	?_calc_sth11+0
   102                          	global	calc_sth11@p_humidity
   103  0016                    calc_sth11@p_temperature	equ	?_calc_sth11+2
   104                          	global	calc_sth11@p_temperature
   105  0018                    ___lwtofl@f1	equ	??___lwtofl+0
   106                          	global	___lwtofl@f1
   107  0014                    ___lwtofl@c	equ	?___lwtofl+0
   108                          	global	___lwtofl@c
   109  0021                    oo_read_device@data	equ	??_oo_read_device+0
   110                          	global	oo_read_device@data
   111  002E                    oo_read_device@crc	equ	??_oo_read_device+13
   112                          	global	oo_read_device@crc
   113  0021                    oo_print_data@cntr	equ	??_oo_print_data+0
   114                          	global	oo_print_data@cntr
   115  0014                    oo_print_data@data	equ	?_oo_print_data+0
   116                          	global	oo_print_data@data
   117  0014                    oo_wait_for_completion@counter	equ	??_oo_wait_for_completion+0
   118                          	global	oo_wait_for_completion@counter
   119  0014                    s_connectionreset@i	equ	??_s_connectionreset+0
   120                          	global	s_connectionreset@i
   121  0022                    printf@fval	equ	??_printf+0
   122                          	global	printf@fval
   123  0026                    printf@_val	equ	??_printf+4
   124                          	global	printf@_val
   125  002A                    printf@integ	equ	??_printf+8
   126                          	global	printf@integ
   127  002E                    printf@prec	equ	??_printf+12
   128                          	global	printf@prec
   129  0030                    printf@exp	equ	??_printf+14
   130                          	global	printf@exp
   131  0032                    printf@width	equ	??_printf+16
   132                          	global	printf@width
   133  0034                    printf@flag	equ	??_printf+18
   134                          	global	printf@flag
   135  0036                    printf@ap	equ	??_printf+20
   136                          	global	printf@ap
   137  0038                    printf@c	equ	??_printf+22
   138                          	global	printf@c
   139  0014                    printf@f	equ	?_printf+0
   140                          	global	printf@f
   141  0015                    delay_10ms@counter	equ	??_delay_10ms+0
   142                          	global	delay_10ms@counter
   143  0032                    oo_read_scratchpad@counter	equ	??_oo_read_scratchpad+0
   144                          	global	oo_read_scratchpad@counter
   145  0022                    s_read_byte@i	equ	??_s_read_byte+0
   146                          	global	s_read_byte@i
   147  0023                    s_read_byte@val	equ	??_s_read_byte+1
   148                          	global	s_read_byte@val
   149  0021                    s_read_byte@ack	equ	?_s_read_byte+0
   150                          	global	s_read_byte@ack
   151  0044                    _scale$2782	equ	??_scale+0
   152                          	global	_scale$2782
   153  0046                    _scale$2778	equ	??_scale+2
   154                          	global	_scale$2778
   155  004A                    _scale$2777	equ	??_scale+6
   156                          	global	_scale$2777
   157  004C                    _scale$2776	equ	??_scale+8
   158                          	global	_scale$2776
   159  004E                    _scale$2775	equ	??_scale+10
   160                          	global	_scale$2775
   161  0050                    _scale$2768	equ	??_scale+12
   162                          	global	_scale$2768
   163  0052                    _scale$2764	equ	??_scale+14
   164                          	global	_scale$2764
   165  0056                    _scale$2763	equ	??_scale+18
   166                          	global	_scale$2763
   167  0058                    _scale$2762	equ	??_scale+20
   168                          	global	_scale$2762
   169  005A                    _scale$2761	equ	??_scale+22
   170                          	global	_scale$2761
   171  0040                    scale@scl	equ	?_scale+0
   172                          	global	scale@scl
   173  0044                    _fround$2753	equ	??_fround+0
   174                          	global	_fround$2753
   175  0046                    _fround$2748	equ	??_fround+2
   176                          	global	_fround$2748
   177  004A                    _fround$2746	equ	??_fround+6
   178                          	global	_fround$2746
   179  004C                    _fround$2745	equ	??_fround+8
   180                          	global	_fround$2745
   181  004E                    _fround$2747	equ	??_fround+10
   182                          	global	_fround$2747
   183  0040                    fround@prec	equ	?_fround+0
   184                          	global	fround@prec
   185  0022                    s_write_byte@i	equ	??_s_write_byte+0
   186                          	global	s_write_byte@i
   187  0023                    s_write_byte@error	equ	??_s_write_byte+1
   188                          	global	s_write_byte@error
   189  0021                    s_write_byte@value	equ	?_s_write_byte+0
   190                          	global	s_write_byte@value
   191  0040                    putch@c	equ	?_putch+0
   192                          	global	putch@c
   193  0040                    isdigit@c	equ	?_isdigit+0
   194                          	global	isdigit@c
   195  003C                    ___fldiv@f3	equ	??___fldiv+0
   196                          	global	___fldiv@f3
   197  0040                    ___fldiv@sign2	equ	??___fldiv+4
   198                          	global	___fldiv@sign2
   199  0041                    ___fldiv@exp1	equ	??___fldiv+5
   200                          	global	___fldiv@exp1
   201  0042                    ___fldiv@sign1	equ	??___fldiv+6
   202                          	global	___fldiv@sign1
   203  0043                    ___fldiv@exp2	equ	??___fldiv+7
   204                          	global	___fldiv@exp2
   205  0034                    ___fldiv@f1	equ	?___fldiv+0
   206                          	global	___fldiv@f1
   207  0038                    ___fldiv@f2	equ	?___fldiv+4
   208                          	global	___fldiv@f2
   209  0034                    log10@x	equ	?_log10+0
   210                          	global	log10@x
   211  0044                    ___wmul@product	equ	??___wmul+0
   212                          	global	___wmul@product
   213  0040                    ___wmul@multiplier	equ	?___wmul+0
   214                          	global	___wmul@multiplier
   215  0042                    ___wmul@multiplicand	equ	?___wmul+2
   216                          	global	___wmul@multiplicand
   217  0048                    ___lldiv@quotient	equ	??___lldiv+0
   218                          	global	___lldiv@quotient
   219  004C                    ___lldiv@counter	equ	??___lldiv+4
   220                          	global	___lldiv@counter
   221  0040                    ___lldiv@dividend	equ	?___lldiv+0
   222                          	global	___lldiv@dividend
   223  0044                    ___lldiv@divisor	equ	?___lldiv+4
   224                          	global	___lldiv@divisor
   225  0048                    ___llmod@counter	equ	??___llmod+0
   226                          	global	___llmod@counter
   227  0040                    ___llmod@dividend	equ	?___llmod+0
   228                          	global	___llmod@dividend
   229  0044                    ___llmod@divisor	equ	?___llmod+4
   230                          	global	___llmod@divisor
   231  0040                    ___flsub@f1	equ	?___flsub+0
   232                          	global	___flsub@f1
   233  0044                    ___flsub@f2	equ	?___flsub+4
   234                          	global	___flsub@f2
   235  0044                    ___fltol@lval	equ	??___fltol+0
   236                          	global	___fltol@lval
   237  0048                    ___fltol@exp1	equ	??___fltol+4
   238                          	global	___fltol@exp1
   239  0049                    ___fltol@sign1	equ	??___fltol+5
   240                          	global	___fltol@sign1
   241  0040                    ___fltol@f1	equ	?___fltol+0
   242                          	global	___fltol@f1
   243  0048                    __div_to_l_@quot	equ	??__div_to_l_+0
   244                          	global	__div_to_l_@quot
   245  004C                    __div_to_l_@exp1	equ	??__div_to_l_+4
   246                          	global	__div_to_l_@exp1
   247  004D                    __div_to_l_@cntr	equ	??__div_to_l_+5
   248                          	global	__div_to_l_@cntr
   249  0040                    __div_to_l_@f1	equ	?__div_to_l_+0
   250                          	global	__div_to_l_@f1
   251  0044                    __div_to_l_@f2	equ	?__div_to_l_+4
   252                          	global	__div_to_l_@f2
   253  0044                    ___lltofl@f1	equ	??___lltofl+0
   254                          	global	___lltofl@f1
   255  0048                    ___lltofl@exp	equ	??___lltofl+4
   256                          	global	___lltofl@exp
   257  0040                    ___lltofl@c	equ	?___lltofl+0
   258                          	global	___lltofl@c
   259  003C                    log@exp	equ	??_log+0
   260                          	global	log@exp
   261  0038                    log@x	equ	?_log+0
   262                          	global	log@x
   263  0033                    oo_tx_byte@data	equ	?_oo_tx_byte+0
   264                          	global	oo_tx_byte@data
   265  0061                    ___awdiv@quotient	equ	??___awdiv+0
   266                          	global	___awdiv@quotient
   267  0063                    ___awdiv@sign	equ	??___awdiv+2
   268                          	global	___awdiv@sign
   269  0064                    ___awdiv@counter	equ	??___awdiv+3
   270                          	global	___awdiv@counter
   271  005D                    ___awdiv@dividend	equ	?___awdiv+0
   272                          	global	___awdiv@dividend
   273  005F                    ___awdiv@divisor	equ	?___awdiv+2
   274                          	global	___awdiv@divisor
   275  0061                    ___awmod@sign	equ	??___awmod+0
   276                          	global	___awmod@sign
   277  0062                    ___awmod@counter	equ	??___awmod+1
   278                          	global	___awmod@counter
   279  005D                    ___awmod@dividend	equ	?___awmod+0
   280                          	global	___awmod@dividend
   281  005F                    ___awmod@divisor	equ	?___awmod+2
   282                          	global	___awmod@divisor
   283  0033                    oo_rx_byte@data	equ	??_oo_rx_byte+0
   284                          	global	oo_rx_byte@data
   285  003F                    frexp@value	equ	?_frexp+0
   286                          	global	frexp@value
   287  0043                    frexp@eptr	equ	?_frexp+4
   288                          	global	frexp@eptr
   289  0034                    oo_crc_shuffle_byte@input	equ	?_oo_crc_shuffle_byte+0
   290                          	global	oo_crc_shuffle_byte@input
   291  0040                    ___flge@ff1	equ	?___flge+0
   292                          	global	___flge@ff1
   293  0044                    ___flge@ff2	equ	?___flge+4
   294                          	global	___flge@ff2
   295  0047                    eval_poly@res	equ	??_eval_poly+0
   296                          	global	eval_poly@res
   297  003F                    eval_poly@x	equ	?_eval_poly+0
   298                          	global	eval_poly@x
   299  0043                    eval_poly@d	equ	?_eval_poly+4
   300                          	global	eval_poly@d
   301  0045                    eval_poly@n	equ	?_eval_poly+6
   302                          	global	eval_poly@n
   303  0043                    ___awtofl@f1	equ	??___awtofl+0
   304                          	global	___awtofl@f1
   305  003F                    ___awtofl@c	equ	?___awtofl+0
   306                          	global	___awtofl@c
   307  0054                    ___fladd@exp1	equ	??___fladd+0
   308                          	global	___fladd@exp1
   309  0055                    ___fladd@exp2	equ	??___fladd+1
   310                          	global	___fladd@exp2
   311  0056                    ___fladd@sign1	equ	??___fladd+2
   312                          	global	___fladd@sign1
   313  0057                    ___fladd@cntr	equ	??___fladd+3
   314                          	global	___fladd@cntr
   315  0058                    ___fladd@sign2	equ	??___fladd+4
   316                          	global	___fladd@sign2
   317  004C                    ___fladd@f1	equ	?___fladd+0
   318                          	global	___fladd@f1
   319  0050                    ___fladd@f2	equ	?___fladd+4
   320                          	global	___fladd@f2
   321  0065                    ___flmul@f3	equ	??___flmul+0
   322                          	global	___flmul@f3
   323  0069                    ___flmul@cntr	equ	??___flmul+4
   324                          	global	___flmul@cntr
   325  006A                    ___flmul@exp1	equ	??___flmul+5
   326                          	global	___flmul@exp1
   327  006B                    ___flmul@sign1	equ	??___flmul+6
   328                          	global	___flmul@sign1
   329  005D                    ___flmul@f1	equ	?___flmul+0
   330                          	global	___flmul@f1
   331  0061                    ___flmul@f2	equ	?___flmul+4
   332                          	global	___flmul@f2
   333  004B                    ___flneg@f1	equ	?___flneg+0
   334                          	global	___flneg@f1
   335  0070                    ___flpack@arg	equ	?___flpack+0
   336                          	global	___flpack@arg
   337  0072                    ___flpack@exp	equ	?___flpack+2
   338                          	global	___flpack@exp
   339  0074                    ___flunpack@sign	equ	??___flunpack+0
   340                          	global	___flunpack@sign
   341  0070                    ___flunpack@arg	equ	?___flunpack+0
   342                          	global	___flunpack@arg
   343  0072                    ___flunpack@exp	equ	?___flunpack+2
   344                          	global	___flunpack@exp
   345                          ;Data sizes: Strings 346, constant 204, data 256, bss 21, persistent 0 stack 132
   346                          	global	_main
   347                          	global	??_main
   348                          	global	?_main
   349                          	psect	maintext,class=CODE,space=0
   350                          
   351                          ; *************** function _main *****************
   352                          ; Defined at:
   353                          ;		line 59 in file "./main.c"
   354                          ; Parameters:
   355                          ;		None
   356                          ; Auto variables:
   357                          ;		UART_bfr    	       	type: PTR unsigned char ; Largest target is 2048
   358                          ;		 -> RAM(255), RAM(2048), 
   359                          ; Return value:
   360                          ;		type: void 
   361                          ;		size: 0
   362                          ; Registers used:
   363                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   364                          ; Tracked objects:
   365                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   366                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   367                          ;		Unchanged: 
   368                          ; Data sizes:
   369                          ;		Autos:    2
   370                          ;		Params:   0
   371                          ;		Temp:     1
   372                          ;		Total:    3
   373                          ; This function calls:
   374                          ;		_hardware_init
   375                          ;		_print_help
   376                          ;		_LTRX_bCmdCheck
   377                          ;		_LTRX_szGetParam
   378                          ;		_printf
   379                          ;		_oo_report
   380                          ;		_s_do_measure
   381                          ;		_LTRX_CmdReset
   382                          ; This function is called by:
   383                          ;		Startup code after reset
   384                          ; This function uses a non-reentrant model
   385                          ; 
   386                          	file	"./main.c"
   387                          	line	59
   388  00A8                    	__size_of_main	equ	__end_of_main-_main
   389                          ;main.c: 58: void main()
   390                          ;main.c: 59: {
   391                          ;			
   392  7BE0                    _main:	
   393                          	opt	disable
   394                          	line	63
   395                          ;main.c: 61: char * UART_bfr;
   396                          ;main.c: 63: hardware_init();
   397  7BE0  71 80             	or	f, 0x80	;select multiple RAM page mode
   398                          	
   399  7BE2  7C 4389           	xcall	_hardware_init
   400                          	
   401                          	line	65
   402                          ;main.c: 65: print_help();
   403  7BE5  71 80             	or	f, 0x80	;select multiple RAM page mode
   404                          	
   405  7BE7  7C 413B           	xcall	_print_help
   406                          	
   407                          	line	67
   408                          ;main.c: 67: while(1) {
   409                          ;			
   410  7BEA                    l9:	
   411                          	line	70
   412                          ;main.c: 70: if (LTRX_bCmdCheck()) {
   413  7BEA  71 80             	or	f, 0x80	;select multiple RAM page mode
   414  7BEC  70 CF             	and	f, 0xCF   ;select user reg space
   415                          	
   416  7BEE  7C 3CDD           	xcall	_LTRX_bCmdCheck
   417                          	
   418  7BF1  38 00             	add	sp,0
   419  7BF3  39 00             	cmp	a,(0)
   420  7BF5  A08C              	jz	l8
   421                          	line	71
   422                          ;main.c: 71: if(UART_bfr = LTRX_szGetParam()) {
   423  7BF7  71 80             	or	f, 0x80	;select multiple RAM page mode
   424  7BF9  70 CF             	and	f, 0xCF   ;select user reg space
   425                          	
   426  7BFB  7C 3CF6           	xcall	_LTRX_szGetParam
   427                          	
   428  7BFE  38 00             	add	sp,0
   429  7C00  64                	asl	a
   430  7C01  4B                	swap	a,x
   431  7C02  39 01             	cmp	a,1
   432  7C04  4B                	swap	a,x
   433  7C05  6D                	rrc	a
   434  7C06  31 80             	xor	a,80h
   435  7C08  08                	push	a
   436  7C09  5B                	mov	a,x
   437  7C0A  70 CF             	and	f, 0xCF   ;select user reg space
   438  7C0C  62 D0 00          	mov	reg[CUR_PP],0
   439  7C0F  53 02             	mov	[1+((main@UART_bfr)^0x0)],a
   440  7C11  18                	pop	a
   441  7C12  53 01             	mov	[0+((main@UART_bfr)^0x0)],a
   442  7C14  51 01             	mov	a,[0+((main@UART_bfr)^0x0)]
   443  7C16  39 00             	cmp	a,>(0)
   444  7C18  B005              	jnz	u2553
   445  7C1A  51 02             	mov	a,[1+((main@UART_bfr)^0x0)]
   446  7C1C  39 00             	cmp	a,<(0)
   447  7C1E                    u2553:
   448  7C1E  A05A              	jz	l12
   449                          	line	72
   450                          ;main.c: 72: if (*UART_bfr == '?'){
   451  7C20  70 CF             	and	f, 0xCF   ;select user reg space
   452  7C22  62 D0 00          	mov	reg[CUR_PP],0
   453  7C25  51 01             	mov	a,[0+((main@UART_bfr)^0x0)]
   454  7C27  58 02             	mov	x,[1+((main@UART_bfr)^0x0)]
   455  7C29  60 D3             	mov	reg[0xd3],a
   456  7C2B  52 00             	mov	a,[x+0]
   457  7C2D  39 3F             	cmp	a,(03Fh)
   458  7C2F  B044              	jnz	l13
   459                          	line	74
   460                          ;main.c: 74: printf("-> OneWire devices\r\n");
   461  7C31  50 00             	mov	a,<(STR_5)
   462  7C33  70 CF             	and	f, 0xCF   ;select user reg space
   463  7C35  62 D0 00          	mov	reg[CUR_PP],0
   464  7C38  53 15             	mov	[1+((?_printf)^0x0)],a
   465  7C3A  50 7F             	mov	a,>(STR_5)
   466  7C3C  53 14             	mov	[0+((?_printf)^0x0)],a
   467  7C3E  71 80             	or	f, 0x80	;select multiple RAM page mode
   468                          	
   469  7C40  7C 4D90           	xcall	_printf
   470                          	
   471                          	line	75
   472                          ;main.c: 75: oo_report();
   473  7C43  71 80             	or	f, 0x80	;select multiple RAM page mode
   474                          	
   475  7C45  7C 42CC           	xcall	_oo_report
   476                          	
   477                          	line	76
   478                          ;main.c: 76: printf("-> SHTxx sensors\r\n");
   479  7C48  50 15             	mov	a,<(STR_6)
   480  7C4A  70 CF             	and	f, 0xCF   ;select user reg space
   481  7C4C  62 D0 00          	mov	reg[CUR_PP],0
   482  7C4F  53 15             	mov	[1+((?_printf)^0x0)],a
   483  7C51  50 7F             	mov	a,>(STR_6)
   484  7C53  53 14             	mov	[0+((?_printf)^0x0)],a
   485  7C55  71 80             	or	f, 0x80	;select multiple RAM page mode
   486                          	
   487  7C57  7C 4D90           	xcall	_printf
   488                          	
   489                          	line	77
   490                          ;main.c: 77: s_do_measure();
   491  7C5A  71 80             	or	f, 0x80	;select multiple RAM page mode
   492                          	
   493  7C5C  7C 4159           	xcall	_s_do_measure
   494                          	
   495                          	line	78
   496                          ;main.c: 78: printf("-> EOT\r\n");
   497  7C5F  50 48             	mov	a,<(STR_7)
   498  7C61  70 CF             	and	f, 0xCF   ;select user reg space
   499  7C63  62 D0 00          	mov	reg[CUR_PP],0
   500  7C66  53 15             	mov	[1+((?_printf)^0x0)],a
   501  7C68  50 7F             	mov	a,>(STR_7)
   502  7C6A  53 14             	mov	[0+((?_printf)^0x0)],a
   503  7C6C  71 80             	or	f, 0x80	;select multiple RAM page mode
   504                          	
   505  7C6E  7C 4D90           	xcall	_printf
   506                          	
   507                          	line	79
   508                          ;main.c: 79: } else {
   509  7C71  7D 7C79           	xjmp	l12
   510                          ;			
   511  7C74                    l13:	
   512                          	line	80
   513                          ;main.c: 80: print_help();
   514  7C74  71 80             	or	f, 0x80	;select multiple RAM page mode
   515                          	
   516  7C76  7C 413B           	xcall	_print_help
   517                          	
   518                          	line	81
   519                          ;			
   520  7C79                    l14:	
   521                          	line	83
   522                          ;			
   523  7C79                    l12:	
   524                          	line	84
   525                          ;main.c: 81: }
   526                          ;main.c: 83: }
   527                          ;main.c: 84: LTRX_CmdReset();
   528  7C79  71 80             	or	f, 0x80	;select multiple RAM page mode
   529  7C7B  70 CF             	and	f, 0xCF   ;select user reg space
   530                          	
   531  7C7D  7C 3CC7           	xcall	_LTRX_CmdReset
   532                          	
   533  7C80  38 00             	add	sp,0
   534                          	line	85
   535                          ;			
   536  7C82                    l11:	
   537                          	line	86
   538                          ;			
   539  7C82                    l8:	
   540                          	line	67
   541  7C82  7D 7BEA           	xjmp	l9
   542  7C85                    ___exit:	;where's that confounded watchdog?
   543  7C85  7D 7C85           	jmp	___exit
   544                          GLOBAL __end_of_main
   545  7C88                    	__end_of_main:
   546                          	FNSIZE	_main,3,0
   547                          ; =============== function _main ends ============
   548                          
   549                          	psect	maintext
   550                          	line	89
   551                          	signat	_main,88
   552                          	global	_LTRX_bCmdCheck
   553                          	global	_print_help
   554                          	global	??_print_help
   555                          	global	?_print_help
   556                          	psect	text,class=CODE,space=0
   557                          
   558  413B                    ___start_of_c_program_code:
   559                          
   560                          ; *************** function _print_help *****************
   561                          ; Defined at:
   562                          ;		line 31 in file "./main.c"
   563                          ; Parameters:
   564                          ;		None
   565                          ; Auto variables:
   566                          ;		None
   567                          ; Return value:
   568                          ;		type: void 
   569                          ;		size: 0
   570                          ; Registers used:
   571                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   572                          ; Tracked objects:
   573                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   574                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   575                          ;		Unchanged: 
   576                          ; Data sizes:
   577                          ;		Autos:    0
   578                          ;		Params:   0
   579                          ;		Temp:     0
   580                          ;		Total:    0
   581                          ; This function calls:
   582                          ;		_print_header
   583                          ;		_LTRX_CPutString
   584                          ;		_LTRX_PutCRLF
   585                          ; This function is called by:
   586                          ;		_main
   587                          ; This function uses a non-reentrant model
   588                          ; 
   589                          	file	"./main.c"
   590                          	line	31
   591  001E                    	__size_of_print_help	equ	__end_of_print_help-_print_help
   592                          ;main.c: 31: void print_help(){
   593                          ;			
   594  413B                    _print_help:	
   595                          	opt	disable
   596                          	line	32
   597                          ;main.c: 32: print_header();
   598  413B  71 80             	or	f, 0x80	;select multiple RAM page mode
   599                          	
   600  413D  7C 4D3D           	xcall	_print_header
   601                          	
   602                          	line	33
   603                          ;main.c: 33: LTRX_CPutString("Press '?' to acquire sensor values and to generate a report");
   604  4140  57 00             	mov	x,<(STR_4)
   605  4142  50 7E             	mov	a,>(STR_4)
   606  4144  71 80             	or	f, 0x80	;select multiple RAM page mode
   607  4146  70 CF             	and	f, 0xCF   ;select user reg space
   608                          	
   609  4148  7C 3CAC           	xcall	_LTRX_CPutString
   610                          	
   611  414B  38 00             	add	sp,0
   612                          	line	34
   613                          ;main.c: 34: LTRX_PutCRLF();
   614  414D  71 80             	or	f, 0x80	;select multiple RAM page mode
   615  414F  70 CF             	and	f, 0xCF   ;select user reg space
   616                          	
   617  4151  7C 3CBE           	xcall	_LTRX_PutCRLF
   618                          	
   619  4154  38 00             	add	sp,0
   620                          	line	35
   621                          ;main.c: 35: }
   622  4156                    l5:
   623                          ;			
   624  4156  70 CF             	and	f, 0xCF   ;select user reg space
   625                          	
   626  4158  7F                	ret
   627                          GLOBAL __end_of_print_help
   628  4159                    	__end_of_print_help:
   629                          	FNSIZE	_print_help,0,0
   630                          ; =============== function _print_help ends ============
   631                          
   632                          	signat	_print_help,88
   633                          	global	_LTRX_szGetParam
   634                          	global	_s_do_measure
   635                          	global	??_s_do_measure
   636                          	global	?_s_do_measure
   637                          	psect	text
   638                          
   639                          ; *************** function _s_do_measure *****************
   640                          ; Defined at:
   641                          ;		line 257 in file "./shtxx.c"
   642                          ; Parameters:
   643                          ;		None
   644                          ; Auto variables:
   645                          ;		humi_val    	       	type: struct .
   646                          ;		temp_val    	       	type: struct .
   647                          ;		dew_point   	       	type: float 
   648                          ;		i           	       	type: unsigned int 
   649                          ;		error       	       	type: unsigned char 
   650                          ;		checksum    	       	type: unsigned char 
   651                          ; Return value:
   652                          ;		type: void 
   653                          ;		size: 0
   654                          ; Registers used:
   655                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   656                          ; Tracked objects:
   657                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   658                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   659                          ;		Unchanged: 
   660                          ; Data sizes:
   661                          ;		Autos:   14
   662                          ;		Params:   0
   663                          ;		Temp:     2
   664                          ;		Total:   16
   665                          ; This function calls:
   666                          ;		_s_connectionreset
   667                          ;		_s_measure
   668                          ;		_LTRX_CPutString
   669                          ;		_LTRX_PutSHexByte
   670                          ;		___lwtofl
   671                          ;		_calc_sth11
   672                          ;		_calc_dewpoint
   673                          ;		_printf
   674                          ; This function is called by:
   675                          ;		_main
   676                          ; This function uses a non-reentrant model
   677                          ; 
   678                          	file	"./shtxx.c"
   679                          	line	257
   680  0173                    	__size_of_s_do_measure	equ	__end_of_s_do_measure-_s_do_measure
   681                          ;shtxx.c: 257: void s_do_measure(){
   682                          ;			
   683  4159                    _s_do_measure:	
   684                          	opt	disable
   685                          	line	274
   686                          ;shtxx.c: 268: value humi_val,temp_val;
   687                          ;shtxx.c: 269: float dew_point;
   688                          ;shtxx.c: 270: unsigned char error,checksum;
   689                          ;shtxx.c: 271: unsigned int i;
   690                          ;shtxx.c: 274: s_connectionreset();
   691  4159  71 80             	or	f, 0x80	;select multiple RAM page mode
   692                          	
   693  415B  7C 4CD4           	xcall	_s_connectionreset
   694                          	
   695                          	line	278
   696                          ;shtxx.c: 278: error=0;
   697  415E  50 00             	mov	a,<((0))
   698  4160  70 CF             	and	f, 0xCF   ;select user reg space
   699  4162  62 D0 00          	mov	reg[CUR_PP],0
   700  4165  53 10             	mov	[0+((s_do_measure@error)^0x0)],a
   701                          	line	279
   702                          ;shtxx.c: 279: error+=s_measure((unsigned char*) &humi_val.i,&checksum,HUMI);
   703  4167  50 08             	mov	a,<((s_do_measure@humi_val|8000h))
   704  4169  70 CF             	and	f, 0xCF   ;select user reg space
   705  416B  62 D0 00          	mov	reg[CUR_PP],0
   706  416E  53 15             	mov	[1+((?_s_measure)^0x0)],a
   707  4170  50 80             	mov	a,>((s_do_measure@humi_val|8000h))
   708  4172  53 14             	mov	[0+((?_s_measure)^0x0)],a
   709  4174  50 11             	mov	a,<((s_do_measure@checksum|8000h))
   710  4176  53 17             	mov	[1+((0+?_s_measure+02h)^0x0)],a
   711  4178  50 80             	mov	a,>((s_do_measure@checksum|8000h))
   712  417A  53 16             	mov	[0+((0+?_s_measure+02h)^0x0)],a
   713  417C  50 01             	mov	a,<((01h))
   714  417E  53 18             	mov	[0+((0+?_s_measure+04h)^0x0)],a
   715  4180  71 80             	or	f, 0x80	;select multiple RAM page mode
   716                          	
   717  4182  7C 43FF           	xcall	_s_measure
   718                          	
   719  4185  70 CF             	and	f, 0xCF   ;select user reg space
   720  4187  62 D0 00          	mov	reg[CUR_PP],0
   721  418A  53 12             	mov	[(??_s_do_measure^0x0)+14+0],a
   722  418C  51 10             	mov	a,[0+((s_do_measure@error)^0x0)]
   723  418E  02 12             	add	a,[(??_s_do_measure^0x0)+14+0]
   724  4190  53 10             	mov	[0+((s_do_measure@error)^0x0)],a
   725                          	line	280
   726                          ;shtxx.c: 280: error+=s_measure((unsigned char*) &temp_val.i,&checksum,TEMP);
   727  4192  50 04             	mov	a,<((s_do_measure@temp_val|8000h))
   728  4194  70 CF             	and	f, 0xCF   ;select user reg space
   729  4196  62 D0 00          	mov	reg[CUR_PP],0
   730  4199  53 15             	mov	[1+((?_s_measure)^0x0)],a
   731  419B  50 80             	mov	a,>((s_do_measure@temp_val|8000h))
   732  419D  53 14             	mov	[0+((?_s_measure)^0x0)],a
   733  419F  50 11             	mov	a,<((s_do_measure@checksum|8000h))
   734  41A1  53 17             	mov	[1+((0+?_s_measure+02h)^0x0)],a
   735  41A3  50 80             	mov	a,>((s_do_measure@checksum|8000h))
   736  41A5  53 16             	mov	[0+((0+?_s_measure+02h)^0x0)],a
   737  41A7  50 00             	mov	a,<((0))
   738  41A9  53 18             	mov	[0+((0+?_s_measure+04h)^0x0)],a
   739  41AB  71 80             	or	f, 0x80	;select multiple RAM page mode
   740                          	
   741  41AD  7C 43FF           	xcall	_s_measure
   742                          	
   743  41B0  70 CF             	and	f, 0xCF   ;select user reg space
   744  41B2  62 D0 00          	mov	reg[CUR_PP],0
   745  41B5  53 12             	mov	[(??_s_do_measure^0x0)+14+0],a
   746  41B7  51 10             	mov	a,[0+((s_do_measure@error)^0x0)]
   747  41B9  02 12             	add	a,[(??_s_do_measure^0x0)+14+0]
   748  41BB  53 10             	mov	[0+((s_do_measure@error)^0x0)],a
   749                          	line	282
   750                          ;shtxx.c: 282: if(error!=0) {s_connectionreset(); LTRX_CPutString("SHTxx error: "); LTRX_PutSHexByte
                                (error); }
   751  41BD  51 10             	mov	a,[0+((s_do_measure@error)^0x0)]
   752  41BF  39 00             	cmp	a,(0)
   753  41C1  A024              	jz	l97
   754  41C3  71 80             	or	f, 0x80	;select multiple RAM page mode
   755                          	
   756  41C5  7C 4CD4           	xcall	_s_connectionreset
   757                          	
   758  41C8  57 3A             	mov	x,<(STR_14)
   759  41CA  50 7F             	mov	a,>(STR_14)
   760  41CC  71 80             	or	f, 0x80	;select multiple RAM page mode
   761  41CE  70 CF             	and	f, 0xCF   ;select user reg space
   762                          	
   763  41D0  7C 3CAC           	xcall	_LTRX_CPutString
   764                          	
   765  41D3  38 00             	add	sp,0
   766  41D5  70 CF             	and	f, 0xCF   ;select user reg space
   767  41D7  62 D0 00          	mov	reg[CUR_PP],0
   768  41DA  51 10             	mov	a,[0+((s_do_measure@error)^0x0)]
   769  41DC  71 80             	or	f, 0x80	;select multiple RAM page mode
   770                          	
   771  41DE  7C 3BF1           	xcall	_LTRX_PutSHexByte
   772                          	
   773  41E1  38 00             	add	sp,0
   774  41E3  7D 42C9           	xjmp	l98
   775                          	line	283
   776                          ;			
   777  41E6                    l97:	
   778                          	line	284
   779                          ;shtxx.c: 283: else
   780                          ;shtxx.c: 284: { humi_val.f=(float)humi_val.i;
   781  41E6  70 CF             	and	f, 0xCF   ;select user reg space
   782  41E8  62 D0 00          	mov	reg[CUR_PP],0
   783  41EB  51 08             	mov	a,[0+((s_do_measure@humi_val)^0x0)]
   784  41ED  08                	push	a
   785  41EE  51 09             	mov	a,[1+((s_do_measure@humi_val)^0x0)]
   786  41F0  53 15             	mov	[1+((?___lwtofl)^0x0)],a
   787  41F2  18                	pop	a
   788  41F3  53 14             	mov	[0+((?___lwtofl)^0x0)],a
   789  41F5  71 80             	or	f, 0x80	;select multiple RAM page mode
   790                          	
   791  41F7  7C 4AAA           	xcall	___lwtofl
   792                          	
   793  41FA  70 CF             	and	f, 0xCF   ;select user reg space
   794  41FC  62 D0 00          	mov	reg[CUR_PP],0
   795  41FF  51 14             	mov	a,[0+((0+?___lwtofl)^0x0)]
   796  4201  53 08             	mov	[0+((s_do_measure@humi_val)^0x0)],a
   797  4203  51 15             	mov	a,[1+((0+?___lwtofl)^0x0)]
   798  4205  53 09             	mov	[1+((s_do_measure@humi_val)^0x0)],a
   799  4207  51 16             	mov	a,[2+((0+?___lwtofl)^0x0)]
   800  4209  53 0A             	mov	[2+((s_do_measure@humi_val)^0x0)],a
   801  420B  51 17             	mov	a,[3+((0+?___lwtofl)^0x0)]
   802  420D  53 0B             	mov	[3+((s_do_measure@humi_val)^0x0)],a
   803                          	line	285
   804                          ;shtxx.c: 285: temp_val.f=(float)temp_val.i;
   805  420F  51 04             	mov	a,[0+((s_do_measure@temp_val)^0x0)]
   806  4211  08                	push	a
   807  4212  51 05             	mov	a,[1+((s_do_measure@temp_val)^0x0)]
   808  4214  53 15             	mov	[1+((?___lwtofl)^0x0)],a
   809  4216  18                	pop	a
   810  4217  53 14             	mov	[0+((?___lwtofl)^0x0)],a
   811  4219  71 80             	or	f, 0x80	;select multiple RAM page mode
   812                          	
   813  421B  7C 4AAA           	xcall	___lwtofl
   814                          	
   815  421E  70 CF             	and	f, 0xCF   ;select user reg space
   816  4220  62 D0 00          	mov	reg[CUR_PP],0
   817  4223  51 14             	mov	a,[0+((0+?___lwtofl)^0x0)]
   818  4225  53 04             	mov	[0+((s_do_measure@temp_val)^0x0)],a
   819  4227  51 15             	mov	a,[1+((0+?___lwtofl)^0x0)]
   820  4229  53 05             	mov	[1+((s_do_measure@temp_val)^0x0)],a
   821  422B  51 16             	mov	a,[2+((0+?___lwtofl)^0x0)]
   822  422D  53 06             	mov	[2+((s_do_measure@temp_val)^0x0)],a
   823  422F  51 17             	mov	a,[3+((0+?___lwtofl)^0x0)]
   824  4231  53 07             	mov	[3+((s_do_measure@temp_val)^0x0)],a
   825                          	line	286
   826                          ;shtxx.c: 286: calc_sth11(&humi_val.f,&temp_val.f);
   827  4233  50 08             	mov	a,<((s_do_measure@humi_val|8000h))
   828  4235  53 15             	mov	[1+((?_calc_sth11)^0x0)],a
   829  4237  50 80             	mov	a,>((s_do_measure@humi_val|8000h))
   830  4239  53 14             	mov	[0+((?_calc_sth11)^0x0)],a
   831  423B  50 04             	mov	a,<((s_do_measure@temp_val|8000h))
   832  423D  53 17             	mov	[1+((0+?_calc_sth11+02h)^0x0)],a
   833  423F  50 80             	mov	a,>((s_do_measure@temp_val|8000h))
   834  4241  53 16             	mov	[0+((0+?_calc_sth11+02h)^0x0)],a
   835  4243  71 80             	or	f, 0x80	;select multiple RAM page mode
   836                          	
   837  4245  7C 4744           	xcall	_calc_sth11
   838                          	
   839                          	line	287
   840                          ;shtxx.c: 287: dew_point=calc_dewpoint(humi_val.f,temp_val.f);
   841  4248  70 CF             	and	f, 0xCF   ;select user reg space
   842  424A  62 D0 00          	mov	reg[CUR_PP],0
   843  424D  51 08             	mov	a,[0+((s_do_measure@humi_val)^0x0)]
   844  424F  53 14             	mov	[0+((?_calc_dewpoint)^0x0)],a
   845  4251  51 09             	mov	a,[1+((s_do_measure@humi_val)^0x0)]
   846  4253  53 15             	mov	[1+((?_calc_dewpoint)^0x0)],a
   847  4255  51 0A             	mov	a,[2+((s_do_measure@humi_val)^0x0)]
   848  4257  53 16             	mov	[2+((?_calc_dewpoint)^0x0)],a
   849  4259  51 0B             	mov	a,[3+((s_do_measure@humi_val)^0x0)]
   850  425B  53 17             	mov	[3+((?_calc_dewpoint)^0x0)],a
   851  425D  51 04             	mov	a,[0+((s_do_measure@temp_val)^0x0)]
   852  425F  53 18             	mov	[0+((0+?_calc_dewpoint+04h)^0x0)],a
   853  4261  51 05             	mov	a,[1+((s_do_measure@temp_val)^0x0)]
   854  4263  53 19             	mov	[1+((0+?_calc_dewpoint+04h)^0x0)],a
   855  4265  51 06             	mov	a,[2+((s_do_measure@temp_val)^0x0)]
   856  4267  53 1A             	mov	[2+((0+?_calc_dewpoint+04h)^0x0)],a
   857  4269  51 07             	mov	a,[3+((s_do_measure@temp_val)^0x0)]
   858  426B  53 1B             	mov	[3+((0+?_calc_dewpoint+04h)^0x0)],a
   859  426D  71 80             	or	f, 0x80	;select multiple RAM page mode
   860                          	
   861  426F  7C 4530           	xcall	_calc_dewpoint
   862                          	
   863  4272  70 CF             	and	f, 0xCF   ;select user reg space
   864  4274  62 D0 00          	mov	reg[CUR_PP],0
   865  4277  51 14             	mov	a,[0+((0+?_calc_dewpoint)^0x0)]
   866  4279  53 0C             	mov	[0+((s_do_measure@dew_point)^0x0)],a
   867  427B  51 15             	mov	a,[1+((0+?_calc_dewpoint)^0x0)]
   868  427D  53 0D             	mov	[1+((s_do_measure@dew_point)^0x0)],a
   869  427F  51 16             	mov	a,[2+((0+?_calc_dewpoint)^0x0)]
   870  4281  53 0E             	mov	[2+((s_do_measure@dew_point)^0x0)],a
   871  4283  51 17             	mov	a,[3+((0+?_calc_dewpoint)^0x0)]
   872  4285  53 0F             	mov	[3+((s_do_measure@dew_point)^0x0)],a
   873                          	line	289
   874                          ;shtxx.c: 289: printf("SHTxx T:%5.1f C RH:%5.1f%\% DewPt:%5.1f C\r\n",temp_val.f,humi_val.f,dew_poin
                                t);
   875  4287  70 CF             	and	f, 0xCF   ;select user reg space
   876  4289  62 D0 00          	mov	reg[CUR_PP],0
   877  428C  51 04             	mov	a,[0+((s_do_measure@temp_val)^0x0)]
   878  428E  53 16             	mov	[0+((0+?_printf+02h)^0x0)],a
   879  4290  51 05             	mov	a,[1+((s_do_measure@temp_val)^0x0)]
   880  4292  53 17             	mov	[1+((0+?_printf+02h)^0x0)],a
   881  4294  51 06             	mov	a,[2+((s_do_measure@temp_val)^0x0)]
   882  4296  53 18             	mov	[2+((0+?_printf+02h)^0x0)],a
   883  4298  51 07             	mov	a,[3+((s_do_measure@temp_val)^0x0)]
   884  429A  53 19             	mov	[3+((0+?_printf+02h)^0x0)],a
   885  429C  50 3C             	mov	a,<(STR_15)
   886  429E  53 15             	mov	[1+((?_printf)^0x0)],a
   887  42A0  50 7E             	mov	a,>(STR_15)
   888  42A2  53 14             	mov	[0+((?_printf)^0x0)],a
   889  42A4  51 0C             	mov	a,[0+((s_do_measure@dew_point)^0x0)]
   890  42A6  53 1E             	mov	[0+((0+?_printf+0Ah)^0x0)],a
   891  42A8  51 0D             	mov	a,[1+((s_do_measure@dew_point)^0x0)]
   892  42AA  53 1F             	mov	[1+((0+?_printf+0Ah)^0x0)],a
   893  42AC  51 0E             	mov	a,[2+((s_do_measure@dew_point)^0x0)]
   894  42AE  53 20             	mov	[2+((0+?_printf+0Ah)^0x0)],a
   895  42B0  51 0F             	mov	a,[3+((s_do_measure@dew_point)^0x0)]
   896  42B2  53 21             	mov	[3+((0+?_printf+0Ah)^0x0)],a
   897  42B4  51 08             	mov	a,[0+((s_do_measure@humi_val)^0x0)]
   898  42B6  53 1A             	mov	[0+((0+?_printf+06h)^0x0)],a
   899  42B8  51 09             	mov	a,[1+((s_do_measure@humi_val)^0x0)]
   900  42BA  53 1B             	mov	[1+((0+?_printf+06h)^0x0)],a
   901  42BC  51 0A             	mov	a,[2+((s_do_measure@humi_val)^0x0)]
   902  42BE  53 1C             	mov	[2+((0+?_printf+06h)^0x0)],a
   903  42C0  51 0B             	mov	a,[3+((s_do_measure@humi_val)^0x0)]
   904  42C2  53 1D             	mov	[3+((0+?_printf+06h)^0x0)],a
   905  42C4  71 80             	or	f, 0x80	;select multiple RAM page mode
   906                          	
   907  42C6  7C 4D90           	xcall	_printf
   908                          	
   909                          	line	290
   910                          ;			
   911  42C9                    l98:	
   912                          	line	292
   913                          ;shtxx.c: 290: }
   914                          ;shtxx.c: 292: }
   915  42C9                    l96:
   916                          ;			
   917  42C9  70 CF             	and	f, 0xCF   ;select user reg space
   918                          	
   919  42CB  7F                	ret
   920                          GLOBAL __end_of_s_do_measure
   921  42CC                    	__end_of_s_do_measure:
   922                          	FNSIZE	_s_do_measure,16,0
   923                          ; =============== function _s_do_measure ends ============
   924                          
   925                          	signat	_s_do_measure,88
   926                          	global	_oo_report
   927                          	global	??_oo_report
   928                          	global	?_oo_report
   929                          	psect	text
   930                          
   931                          ; *************** function _oo_report *****************
   932                          ; Defined at:
   933                          ;		line 302 in file "./oo.c"
   934                          ; Parameters:
   935                          ;		None
   936                          ; Auto variables:
   937                          ;		data        	       	type: struct s_oo_data
   938                          ;		id          	       	type: unsigned char [8]
   939                          ; Return value:
   940                          ;		type: void 
   941                          ;		size: 0
   942                          ; Registers used:
   943                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   944                          ; Tracked objects:
   945                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   946                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   947                          ;		Unchanged: 
   948                          ; Data sizes:
   949                          ;		Autos:   13
   950                          ;		Params:   0
   951                          ;		Temp:     3
   952                          ;		Total:   16
   953                          ; This function calls:
   954                          ;		_OneWire_fReset
   955                          ;		_LTRX_CPutString
   956                          ;		_LTRX_PutCRLF
   957                          ;		_oo_start_conversion
   958                          ;		_oo_wait_for_completion
   959                          ;		_OneWire_fFindFirst
   960                          ;		_oo_read_device
   961                          ;		_oo_print_data
   962                          ;		_OneWire_fFindNext
   963                          ; This function is called by:
   964                          ;		_main
   965                          ; This function uses a non-reentrant model
   966                          ; 
   967                          	file	"./oo.c"
   968                          	line	302
   969  00BD                    	__size_of_oo_report	equ	__end_of_oo_report-_oo_report
   970                          ;oo.c: 302: void oo_report(){
   971                          ;			
   972  42CC                    _oo_report:	
   973                          	opt	disable
   974                          	line	309
   975                          ;oo.c: 304: oo_tdata data;
   976                          ;oo.c: 306: unsigned char id[8];
   977                          ;oo.c: 309: if (!OneWire_fReset()){
   978  42CC  71 80             	or	f, 0x80	;select multiple RAM page mode
   979  42CE  70 CF             	and	f, 0xCF   ;select user reg space
   980                          	
   981  42D0  7C 3DEB           	xcall	_OneWire_fReset
   982                          	
   983  42D3  38 00             	add	sp,0
   984  42D5  39 00             	cmp	a,(0)
   985  42D7  B01A              	jnz	l50
   986                          	line	310
   987                          ;oo.c: 310: LTRX_CPutString("No OneWire devices found on the bus!");
   988  42D9  57 B9             	mov	x,<(STR_11)
   989  42DB  50 7E             	mov	a,>(STR_11)
   990  42DD  71 80             	or	f, 0x80	;select multiple RAM page mode
   991  42DF  70 CF             	and	f, 0xCF   ;select user reg space
   992                          	
   993  42E1  7C 3CAC           	xcall	_LTRX_CPutString
   994                          	
   995  42E4  38 00             	add	sp,0
   996                          	line	311
   997                          ;oo.c: 311: LTRX_PutCRLF();
   998  42E6  71 80             	or	f, 0x80	;select multiple RAM page mode
   999  42E8  70 CF             	and	f, 0xCF   ;select user reg space
  1000                          	
  1001  42EA  7C 3CBE           	xcall	_LTRX_PutCRLF
  1002                          	
  1003  42ED  38 00             	add	sp,0
  1004                          	line	312
  1005                          ;oo.c: 312: return;
  1006  42EF  7D 4386           	xjmp	l49
  1007                          	line	313
  1008                          ;			
  1009  42F2                    l50:	
  1010                          	line	316
  1011                          ;oo.c: 313: }
  1012                          ;oo.c: 316: oo_start_conversion();
  1013  42F2  71 80             	or	f, 0x80	;select multiple RAM page mode
  1014                          	
  1015  42F4  7C 43DD           	xcall	_oo_start_conversion
  1016                          	
  1017                          	line	319
  1018                          ;oo.c: 319: if (!oo_wait_for_completion()){
  1019  42F7  71 80             	or	f, 0x80	;select multiple RAM page mode
  1020                          	
  1021  42F9  7C 4C9C           	xcall	_oo_wait_for_completion
  1022                          	
  1023  42FC  39 00             	cmp	a,(0)
  1024  42FE  B01A              	jnz	l51
  1025                          	line	321
  1026                          ;oo.c: 321: LTRX_CPutString("Timed out while waiting for conversion!");
  1027  4300  57 91             	mov	x,<(STR_12)
  1028  4302  50 7E             	mov	a,>(STR_12)
  1029  4304  71 80             	or	f, 0x80	;select multiple RAM page mode
  1030  4306  70 CF             	and	f, 0xCF   ;select user reg space
  1031                          	
  1032  4308  7C 3CAC           	xcall	_LTRX_CPutString
  1033                          	
  1034  430B  38 00             	add	sp,0
  1035                          	line	322
  1036                          ;oo.c: 322: LTRX_PutCRLF();
  1037  430D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1038  430F  70 CF             	and	f, 0xCF   ;select user reg space
  1039                          	
  1040  4311  7C 3CBE           	xcall	_LTRX_PutCRLF
  1041                          	
  1042  4314  38 00             	add	sp,0
  1043                          	line	323
  1044                          ;oo.c: 323: return;
  1045  4316  7D 4386           	xjmp	l49
  1046                          	line	324
  1047                          ;			
  1048  4319                    l51:	
  1049                          	line	327
  1050                          ;oo.c: 324: }
  1051                          ;oo.c: 327: if (OneWire_fFindFirst()){
  1052  4319  71 80             	or	f, 0x80	;select multiple RAM page mode
  1053  431B  70 CF             	and	f, 0xCF   ;select user reg space
  1054                          	
  1055  431D  7C 3EC5           	xcall	_OneWire_fFindFirst
  1056                          	
  1057  4320  38 00             	add	sp,0
  1058  4322  39 00             	cmp	a,(0)
  1059  4324  A004              	jz	l52
  1060                          	line	329
  1061                          ;oo.c: 329: } else {
  1062  4326  7D 4342           	xjmp	l56
  1063                          ;			
  1064  4329                    l52:	
  1065                          	line	330
  1066                          ;oo.c: 330: LTRX_CPutString("Problem detecting first device on the bus");
  1067  4329  57 67             	mov	x,<(STR_13)
  1068  432B  50 7E             	mov	a,>(STR_13)
  1069  432D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1070  432F  70 CF             	and	f, 0xCF   ;select user reg space
  1071                          	
  1072  4331  7C 3CAC           	xcall	_LTRX_CPutString
  1073                          	
  1074  4334  38 00             	add	sp,0
  1075                          	line	331
  1076                          ;oo.c: 331: LTRX_PutCRLF();
  1077  4336  71 80             	or	f, 0x80	;select multiple RAM page mode
  1078  4338  70 CF             	and	f, 0xCF   ;select user reg space
  1079                          	
  1080  433A  7C 3CBE           	xcall	_LTRX_PutCRLF
  1081                          	
  1082  433D  38 00             	add	sp,0
  1083                          	line	332
  1084                          ;oo.c: 332: return;
  1085  433F  7D 4386           	xjmp	l49
  1086                          	line	335
  1087                          ;oo.c: 333: }
  1088                          ;oo.c: 335: do {
  1089                          ;			
  1090  4342                    l56:	
  1091                          	line	337
  1092                          ;oo.c: 337: data = oo_read_device();
  1093  4342  71 80             	or	f, 0x80	;select multiple RAM page mode
  1094                          	
  1095  4344  7C 4B23           	xcall	_oo_read_device
  1096                          	
  1097  4347  70 CF             	and	f, 0xCF   ;select user reg space
  1098  4349  62 D0 00          	mov	reg[CUR_PP],0
  1099  434C  55 11  14         	mov	[(??_oo_report^0x0)+13+0],<(0+?_oo_read_device)
  1100  434F  62 D4 00          	mov	reg[MVR_PP],0
  1101                          	
  1102  4352  55 12  04         	mov	[(??_oo_report^0x0)+14+0],<(oo_report@data)
  1103  4355  62 D5 00          	mov	reg[MVW_PP],0
  1104                          	
  1105  4358  55 13  0D         	mov	[(??_oo_report^0x0)+15+0],13
  1106  435B                    u2533:
  1107  435B  3E 11             	mvi	a,[[(??_oo_report^0x0)+13+0]++]
  1108  435D  3F 12             	mvi	[[(??_oo_report^0x0)+14+0]++],a
  1109  435F  7A 13             	dec	[(??_oo_report^0x0)+15+0]
  1110  4361  BFF9              	jnz	u2533
  1111                          	line	338
  1112                          ;oo.c: 338: oo_print_data(data);
  1113  4363  55 11  04         	mov	[(??_oo_report^0x0)+13+0],<(oo_report@data)
  1114                          	
  1115  4366  55 12  14         	mov	[(??_oo_report^0x0)+14+0],<(?_oo_print_data)
  1116                          	
  1117  4369  55 13  0D         	mov	[(??_oo_report^0x0)+15+0],13
  1118  436C                    u2543:
  1119  436C  3E 11             	mvi	a,[[(??_oo_report^0x0)+13+0]++]
  1120  436E  3F 12             	mvi	[[(??_oo_report^0x0)+14+0]++],a
  1121  4370  7A 13             	dec	[(??_oo_report^0x0)+15+0]
  1122  4372  BFF9              	jnz	u2543
  1123  4374  71 80             	or	f, 0x80	;select multiple RAM page mode
  1124                          	
  1125  4376  7C 4BFD           	xcall	_oo_print_data
  1126                          	
  1127                          	line	339
  1128                          ;oo.c: 339: } while (OneWire_fFindNext());
  1129  4379  71 80             	or	f, 0x80	;select multiple RAM page mode
  1130  437B  70 CF             	and	f, 0xCF   ;select user reg space
  1131                          	
  1132  437D  7C 3EDA           	xcall	_OneWire_fFindNext
  1133                          	
  1134  4380  38 00             	add	sp,0
  1135  4382  39 00             	cmp	a,(0)
  1136  4384  BFBD              	jnz	l56
  1137                          ;			
  1138  4386                    l55:	
  1139                          	line	342
  1140                          ;oo.c: 342: }
  1141  4386                    l49:
  1142                          ;			
  1143  4386  70 CF             	and	f, 0xCF   ;select user reg space
  1144                          	
  1145  4388  7F                	ret
  1146                          GLOBAL __end_of_oo_report
  1147  4389                    	__end_of_oo_report:
  1148                          	FNSIZE	_oo_report,16,0
  1149                          ; =============== function _oo_report ends ============
  1150                          
  1151                          	signat	_oo_report,88
  1152                          	global	_hardware_init
  1153                          	global	??_hardware_init
  1154                          	global	?_hardware_init
  1155                          	psect	text
  1156                          
  1157                          ; *************** function _hardware_init *****************
  1158                          ; Defined at:
  1159                          ;		line 38 in file "./main.c"
  1160                          ; Parameters:
  1161                          ;		None
  1162                          ; Auto variables:
  1163                          ;		None
  1164                          ; Return value:
  1165                          ;		type: void 
  1166                          ;		size: 0
  1167                          ; Registers used:
  1168                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1169                          ; Tracked objects:
  1170                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1171                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1172                          ;		Unchanged: 
  1173                          ; Data sizes:
  1174                          ;		Autos:    0
  1175                          ;		Params:   0
  1176                          ;		Temp:     0
  1177                          ;		Total:    0
  1178                          ; This function calls:
  1179                          ;		_Counter8_ltrx_Start
  1180                          ;		_LED1_Start
  1181                          ;		_Ticker_Start
  1182                          ;		_OneWire_Start
  1183                          ;		_s_Start
  1184                          ;		_LTRX_CmdReset
  1185                          ;		_LTRX_EnableInt
  1186                          ;		_LTRX_Start
  1187                          ;		_Ticker_EnableInt
  1188                          ; This function is called by:
  1189                          ;		_main
  1190                          ; This function uses a non-reentrant model
  1191                          ; 
  1192                          	file	"./main.c"
  1193                          	line	38
  1194  0054                    	__size_of_hardware_init	equ	__end_of_hardware_init-_hardware_init
  1195                          ;main.c: 38: void hardware_init(){
  1196                          ;			
  1197  4389                    _hardware_init:	
  1198                          	opt	disable
  1199                          	line	41
  1200                          ;main.c: 41: Counter8_ltrx_Start();
  1201  4389  71 80             	or	f, 0x80	;select multiple RAM page mode
  1202  438B  70 CF             	and	f, 0xCF   ;select user reg space
  1203                          	
  1204  438D  7C 3AEE           	xcall	_Counter8_ltrx_Start
  1205                          	
  1206  4390  38 00             	add	sp,0
  1207                          	line	42
  1208                          ;main.c: 42: LED1_Start();
  1209  4392  71 80             	or	f, 0x80	;select multiple RAM page mode
  1210  4394  70 CF             	and	f, 0xCF   ;select user reg space
  1211                          	
  1212  4396  7C 3B37           	xcall	_LED1_Start
  1213                          	
  1214  4399  38 00             	add	sp,0
  1215                          	line	43
  1216                          ;main.c: 43: Ticker_Start();
  1217  439B  71 80             	or	f, 0x80	;select multiple RAM page mode
  1218  439D  70 CF             	and	f, 0xCF   ;select user reg space
  1219                          	
  1220  439F  7C 40E1           	xcall	_Ticker_Start
  1221                          	
  1222  43A2  38 00             	add	sp,0
  1223                          	line	44
  1224                          ;main.c: 44: OneWire_Start();
  1225  43A4  71 80             	or	f, 0x80	;select multiple RAM page mode
  1226  43A6  70 CF             	and	f, 0xCF   ;select user reg space
  1227                          	
  1228  43A8  7C 3DD3           	xcall	_OneWire_Start
  1229                          	
  1230  43AB  38 00             	add	sp,0
  1231                          	line	45
  1232                          ;main.c: 45: s_Start();
  1233  43AD  71 80             	or	f, 0x80	;select multiple RAM page mode
  1234                          	
  1235  43AF  7C 4D85           	xcall	_s_Start
  1236                          	
  1237                          	line	48
  1238                          ;main.c: 48: LTRX_CmdReset();
  1239  43B2  71 80             	or	f, 0x80	;select multiple RAM page mode
  1240  43B4  70 CF             	and	f, 0xCF   ;select user reg space
  1241                          	
  1242  43B6  7C 3CC7           	xcall	_LTRX_CmdReset
  1243                          	
  1244  43B9  38 00             	add	sp,0
  1245                          	line	49
  1246                          ;main.c: 49: LTRX_EnableInt();
  1247  43BB  71 80             	or	f, 0x80	;select multiple RAM page mode
  1248  43BD  70 CF             	and	f, 0xCF   ;select user reg space
  1249                          	
  1250  43BF  7C 3B77           	xcall	_LTRX_EnableInt
  1251                          	
  1252  43C2  38 00             	add	sp,0
  1253                          	line	50
  1254                          ;main.c: 50: LTRX_Start(0x00);
  1255  43C4  50 00             	mov	a,<((0))
  1256  43C6  71 80             	or	f, 0x80	;select multiple RAM page mode
  1257  43C8  70 CF             	and	f, 0xCF   ;select user reg space
  1258                          	
  1259  43CA  7C 3B97           	xcall	_LTRX_Start
  1260                          	
  1261  43CD  38 00             	add	sp,0
  1262                          	line	53
  1263                          ;main.c: 53: Ticker_EnableInt();
  1264  43CF  71 80             	or	f, 0x80	;select multiple RAM page mode
  1265  43D1  70 CF             	and	f, 0xCF   ;select user reg space
  1266                          	
  1267  43D3  7C 40D9           	xcall	_Ticker_EnableInt
  1268                          	
  1269  43D6  38 00             	add	sp,0
  1270                          	line	54
  1271                          # 54 "./main.c"
  1272  43D8  71 01             or  F, 01h ;#
  1273                          	psect	text
  1274                          	line	56
  1275                          ;main.c: 54: asm("or  F, 01h") ;
  1276                          ;main.c: 56: }
  1277  43DA                    l6:
  1278                          ;			
  1279  43DA  70 CF             	and	f, 0xCF   ;select user reg space
  1280                          	
  1281  43DC  7F                	ret
  1282                          GLOBAL __end_of_hardware_init
  1283  43DD                    	__end_of_hardware_init:
  1284                          	FNSIZE	_hardware_init,0,0
  1285                          ; =============== function _hardware_init ends ============
  1286                          
  1287                          	signat	_hardware_init,88
  1288                          	global	_Counter8_ltrx_Start
  1289                          	global	_oo_start_conversion
  1290                          	global	??_oo_start_conversion
  1291                          	global	?_oo_start_conversion
  1292                          	psect	text
  1293                          
  1294                          ; *************** function _oo_start_conversion *****************
  1295                          ; Defined at:
  1296                          ;		line 163 in file "./oo.c"
  1297                          ; Parameters:
  1298                          ;		None
  1299                          ; Auto variables:
  1300                          ;		None
  1301                          ; Return value:
  1302                          ;		type: void 
  1303                          ;		size: 0
  1304                          ; Registers used:
  1305                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1306                          ; Tracked objects:
  1307                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1308                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1309                          ;		Unchanged: 
  1310                          ; Data sizes:
  1311                          ;		Autos:    0
  1312                          ;		Params:   0
  1313                          ;		Temp:     0
  1314                          ;		Total:    0
  1315                          ; This function calls:
  1316                          ;		_oo_tx_byte
  1317                          ; This function is called by:
  1318                          ;		_oo_report
  1319                          ; This function uses a non-reentrant model
  1320                          ; 
  1321                          	file	"./oo.c"
  1322                          	line	163
  1323  0022                    	__size_of_oo_start_conversion	equ	__end_of_oo_start_conversion-_oo_start_conversion
  1324                          ;oo.c: 163: void oo_start_conversion(){
  1325                          ;			
  1326  43DD                    _oo_start_conversion:	
  1327                          	opt	disable
  1328                          	line	165
  1329                          ;oo.c: 165: oo_tx_byte(0xCC);
  1330  43DD  50 CC             	mov	a,<((0CCh))
  1331  43DF  70 CF             	and	f, 0xCF   ;select user reg space
  1332  43E1  62 D0 00          	mov	reg[CUR_PP],0
  1333  43E4  53 33             	mov	[0+((?_oo_tx_byte)^0x0)],a
  1334  43E6  71 80             	or	f, 0x80	;select multiple RAM page mode
  1335                          	
  1336  43E8  7C 6DA4           	xcall	_oo_tx_byte
  1337                          	
  1338                          	line	168
  1339                          ;oo.c: 168: oo_tx_byte(0x44);
  1340  43EB  50 44             	mov	a,<((044h))
  1341  43ED  70 CF             	and	f, 0xCF   ;select user reg space
  1342  43EF  62 D0 00          	mov	reg[CUR_PP],0
  1343  43F2  53 33             	mov	[0+((?_oo_tx_byte)^0x0)],a
  1344  43F4  71 80             	or	f, 0x80	;select multiple RAM page mode
  1345                          	
  1346  43F6  7C 6DA4           	xcall	_oo_tx_byte
  1347                          	
  1348                          	line	170
  1349                          ;oo.c: 170: return;
  1350  43F9  7D 43FC           	xjmp	l29
  1351                          	line	171
  1352                          ;oo.c: 171: }
  1353  43FC                    l29:
  1354                          ;			
  1355  43FC  70 CF             	and	f, 0xCF   ;select user reg space
  1356                          	
  1357  43FE  7F                	ret
  1358                          GLOBAL __end_of_oo_start_conversion
  1359  43FF                    	__end_of_oo_start_conversion:
  1360                          	FNSIZE	_oo_start_conversion,0,0
  1361                          ; =============== function _oo_start_conversion ends ============
  1362                          
  1363                          	signat	_oo_start_conversion,88
  1364                          	global	_s_measure
  1365                          	global	??_s_measure
  1366                          	global	?_s_measure
  1367                          	psect	text
  1368                          
  1369                          ; *************** function _s_measure *****************
  1370                          ; Defined at:
  1371                          ;		line 186 in file "./shtxx.c"
  1372                          ; Parameters:
  1373                          ;		p_value     	offs:   0	type: PTR unsigned char ; Largest target is 2
  1374                          ;		 -> s_do_measure@temp_val.i(2), s_do_measure@humi_val.i(2), 
  1375                          ;		p_checksum  	offs:   2	type: PTR unsigned char ; Largest target is 1
  1376                          ;		 -> s_do_measure@checksum(1), 
  1377                          ;		mode        	offs:   4	type: unsigned char 
  1378                          ; Auto variables:
  1379                          ;		error       	       	type: unsigned int 
  1380                          ;		i           	       	type: unsigned int 
  1381                          ; Return value:
  1382                          ;		type: unsigned char 
  1383                          ;		size: 1
  1384                          ; Registers used:
  1385                          ;		a, x, CUR_PP
  1386                          ; Tracked objects:
  1387                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1388                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1389                          ;		Unchanged: 
  1390                          ; Data sizes:
  1391                          ;		Autos:    4
  1392                          ;		Params:   5
  1393                          ;		Temp:     4
  1394                          ;		Total:   13
  1395                          ; This function calls:
  1396                          ;		_s_transstart
  1397                          ;		_s_write_byte
  1398                          ;		_delay_5us
  1399                          ;		_s_read_byte
  1400                          ; This function is called by:
  1401                          ;		_s_do_measure
  1402                          ; This function uses a non-reentrant model
  1403                          ; 
  1404                          	file	"./shtxx.c"
  1405                          	line	186
  1406  0131                    	__size_of_s_measure	equ	__end_of_s_measure-_s_measure
  1407                          ;shtxx.c: 183: char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
  1408                          ;shtxx.c: 186: {
  1409                          ;			
  1410  43FF                    _s_measure:	
  1411                          	opt	disable
  1412                          	line	187
  1413                          ;shtxx.c: 187: unsigned error=0;
  1414  43FF  50 00             	mov	a,<(0)
  1415  4401  70 CF             	and	f, 0xCF   ;select user reg space
  1416  4403  62 D0 00          	mov	reg[CUR_PP],0
  1417  4406  53 1A             	mov	[1+((s_measure@error)^0x0)],a
  1418  4408  50 00             	mov	a,>(0)
  1419  440A  53 19             	mov	[0+((s_measure@error)^0x0)],a
  1420                          	line	190
  1421                          ;shtxx.c: 188: unsigned int i;
  1422                          ;shtxx.c: 190: s_transstart();
  1423  440C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1424                          	
  1425  440E  7C 59FA           	xcall	_s_transstart
  1426                          	
  1427                          	line	191
  1428                          ;shtxx.c: 191: switch(mode){
  1429  4411  7D 445F           	xjmp	l83
  1430                          	line	192
  1431                          ;shtxx.c: 192: case TEMP : error+=s_write_byte(0x03); break;
  1432                          ;			
  1433  4414                    l84:	
  1434  4414  50 03             	mov	a,<((03h))
  1435  4416  70 CF             	and	f, 0xCF   ;select user reg space
  1436  4418  62 D0 00          	mov	reg[CUR_PP],0
  1437  441B  53 21             	mov	[0+((?_s_write_byte)^0x0)],a
  1438  441D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1439                          	
  1440  441F  7C 625E           	xcall	_s_write_byte
  1441                          	
  1442  4422  70 CF             	and	f, 0xCF   ;select user reg space
  1443  4424  62 D0 00          	mov	reg[CUR_PP],0
  1444  4427  53 1D             	mov	[(??_s_measure^0x0)+4+0],a
  1445  4429  51 1A             	mov	a,[1+((s_measure@error)^0x0)]
  1446  442B  02 1D             	add	a,[(??_s_measure^0x0)+4+0]
  1447  442D  53 1A             	mov	[1+((s_measure@error)^0x0)],a
  1448  442F  51 19             	mov	a,[0+((s_measure@error)^0x0)]
  1449  4431  09 00             	adc	a,0
  1450  4433  53 19             	mov	[0+((s_measure@error)^0x0)],a
  1451  4435  7D 446E           	xjmp	l82
  1452                          	line	193
  1453                          ;shtxx.c: 193: case HUMI : error+=s_write_byte(0x05); break;
  1454                          ;			
  1455  4438                    l85:	
  1456  4438  50 05             	mov	a,<((05h))
  1457  443A  70 CF             	and	f, 0xCF   ;select user reg space
  1458  443C  62 D0 00          	mov	reg[CUR_PP],0
  1459  443F  53 21             	mov	[0+((?_s_write_byte)^0x0)],a
  1460  4441  71 80             	or	f, 0x80	;select multiple RAM page mode
  1461                          	
  1462  4443  7C 625E           	xcall	_s_write_byte
  1463                          	
  1464  4446  70 CF             	and	f, 0xCF   ;select user reg space
  1465  4448  62 D0 00          	mov	reg[CUR_PP],0
  1466  444B  53 1D             	mov	[(??_s_measure^0x0)+4+0],a
  1467  444D  51 1A             	mov	a,[1+((s_measure@error)^0x0)]
  1468  444F  02 1D             	add	a,[(??_s_measure^0x0)+4+0]
  1469  4451  53 1A             	mov	[1+((s_measure@error)^0x0)],a
  1470  4453  51 19             	mov	a,[0+((s_measure@error)^0x0)]
  1471  4455  09 00             	adc	a,0
  1472  4457  53 19             	mov	[0+((s_measure@error)^0x0)],a
  1473  4459  7D 446E           	xjmp	l82
  1474                          	line	194
  1475                          ;shtxx.c: 194: default : break;
  1476                          ;			
  1477  445C                    l86:	
  1478  445C  7D 446E           	xjmp	l82
  1479                          	line	191
  1480                          ;			
  1481  445F                    l83:	
  1482  445F  70 CF             	and	f, 0xCF   ;select user reg space
  1483  4461  62 D0 00          	mov	reg[CUR_PP],0
  1484  4464  51 18             	mov	a,[0+((s_measure@mode)^0x0)]
  1485  4466  AFAD              		jz	l84
  1486  4468  78                	dec	a
  1487  4469  AFCE              	jz	l85
  1488  446B  7D 445C           	xjmp	l86
  1489                          
  1490                          	line	195
  1491                          ;			
  1492  446E                    l82:	
  1493                          	line	196
  1494                          ;shtxx.c: 196: for (i=0;i<65535;i++) {
  1495  446E  50 00             	mov	a,<(0)
  1496  4470  70 CF             	and	f, 0xCF   ;select user reg space
  1497  4472  62 D0 00          	mov	reg[CUR_PP],0
  1498  4475  53 1C             	mov	[1+((s_measure@i)^0x0)],a
  1499  4477  50 00             	mov	a,>(0)
  1500  4479  53 1B             	mov	[0+((s_measure@i)^0x0)],a
  1501  447B  51 1B             	mov	a,[0+((s_measure@i)^0x0)]
  1502  447D  39 FF             	cmp	a,>(0FFFFh)
  1503  447F  B005              	jnz	u1353
  1504  4481  51 1C             	mov	a,[1+((s_measure@i)^0x0)]
  1505  4483  39 FF             	cmp	a,<(0FFFFh)
  1506  4485                    u1353:
  1507  4485  B004              	jnz	l87
  1508  4487  7D 44AF           	xjmp	l88
  1509                          ;			
  1510  448A                    l87:	
  1511                          	line	197
  1512                          ;shtxx.c: 197: if(PRT4DR&0x01==0) break;
  1513  448A  7D 448D           	xjmp	l90
  1514                          ;			
  1515  448D                    l90:	
  1516                          	line	198
  1517                          ;shtxx.c: 198: delay_5us();
  1518  448D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1519                          	
  1520  448F  7C 6B93           	xcall	_delay_5us
  1521                          	
  1522                          	line	196
  1523  4492  70 CF             	and	f, 0xCF   ;select user reg space
  1524  4494  62 D0 00          	mov	reg[CUR_PP],0
  1525  4497  51 1C             	mov	a,[1+((s_measure@i)^0x0)]
  1526  4499  01 01             	add	a,<(01h)
  1527  449B  53 1C             	mov	[1+((s_measure@i)^0x0)],a
  1528  449D  51 1B             	mov	a,[0+((s_measure@i)^0x0)]
  1529  449F  09 00             	adc	a,>(01h)
  1530  44A1  53 1B             	mov	[0+((s_measure@i)^0x0)],a
  1531  44A3  51 1B             	mov	a,[0+((s_measure@i)^0x0)]
  1532  44A5  39 FF             	cmp	a,>(0FFFFh)
  1533  44A7  B005              	jnz	u1363
  1534  44A9  51 1C             	mov	a,[1+((s_measure@i)^0x0)]
  1535  44AB  39 FF             	cmp	a,<(0FFFFh)
  1536  44AD                    u1363:
  1537  44AD  BFDC              	jnz	l87
  1538                          ;			
  1539  44AF                    l88:	
  1540                          	line	204
  1541                          ;shtxx.c: 202: }
  1542                          ;shtxx.c: 204: if(PRT4DR&0x01) error+=1;
  1543  44AF  70 CF             	and	f, 0xCF   ;select user reg space
  1544  44B1  49 10 01          	tst	reg[(16)],(01h)
  1545  44B4  A012              	jz	l91
  1546  44B6  70 CF             	and	f, 0xCF   ;select user reg space
  1547  44B8  62 D0 00          	mov	reg[CUR_PP],0
  1548  44BB  51 1A             	mov	a,[1+((s_measure@error)^0x0)]
  1549  44BD  01 01             	add	a,<(01h)
  1550  44BF  53 1A             	mov	[1+((s_measure@error)^0x0)],a
  1551  44C1  51 19             	mov	a,[0+((s_measure@error)^0x0)]
  1552  44C3  09 00             	adc	a,>(01h)
  1553  44C5  53 19             	mov	[0+((s_measure@error)^0x0)],a
  1554                          ;			
  1555  44C7                    l91:	
  1556                          	line	205
  1557                          ;shtxx.c: 205: *(p_value) =s_read_byte(1);
  1558  44C7  50 01             	mov	a,<((01h))
  1559  44C9  70 CF             	and	f, 0xCF   ;select user reg space
  1560  44CB  62 D0 00          	mov	reg[CUR_PP],0
  1561  44CE  53 21             	mov	[0+((?_s_read_byte)^0x0)],a
  1562  44D0  71 80             	or	f, 0x80	;select multiple RAM page mode
  1563                          	
  1564  44D2  7C 5ABF           	xcall	_s_read_byte
  1565                          	
  1566  44D5  08                	push	a
  1567  44D6  70 CF             	and	f, 0xCF   ;select user reg space
  1568  44D8  62 D0 00          	mov	reg[CUR_PP],0
  1569  44DB  51 14             	mov	a,[0+((s_measure@p_value)^0x0)]
  1570  44DD  08                	push	a
  1571  44DE  58 15             	mov	x,[1+((s_measure@p_value)^0x0)]
  1572  44E0  18                	pop	a
  1573  44E1  60 D3             	mov	reg[0xd3],a
  1574  44E3  18                	pop	a
  1575  44E4  54 00             	mov	[0+x],a
  1576                          	line	206
  1577                          ;shtxx.c: 206: *(p_value+1)=s_read_byte(1);
  1578  44E6  50 01             	mov	a,<((01h))
  1579  44E8  53 21             	mov	[0+((?_s_read_byte)^0x0)],a
  1580  44EA  71 80             	or	f, 0x80	;select multiple RAM page mode
  1581                          	
  1582  44EC  7C 5ABF           	xcall	_s_read_byte
  1583                          	
  1584  44EF  70 CF             	and	f, 0xCF   ;select user reg space
  1585  44F1  62 D0 00          	mov	reg[CUR_PP],0
  1586  44F4  5F 1D  14         	mov	[(??_s_measure^0x0)+4+0],[((s_measure@p_value)^0x0)]
  1587  44F7  5F 1E  15         	mov	[(??_s_measure^0x0)+4+0+1],[((s_measure@p_value+1)^0x0)]
  1588  44FA  06 1E  01         	add	[(??_s_measure^0x0)+4+1],<((01h))
  1589  44FD  08                	push	a
  1590  44FE  51 1D             	mov	a,[(??_s_measure^0x0)+4+0]
  1591  4500  08                	push	a
  1592  4501  58 1E             	mov	x,[(??_s_measure^0x0)+4+1]
  1593  4503  18                	pop	a
  1594  4504  60 D3             	mov	reg[0xd3],a
  1595  4506  18                	pop	a
  1596  4507  54 00             	mov	[0+x],a
  1597                          	line	207
  1598                          ;shtxx.c: 207: *p_checksum =s_read_byte(0);
  1599  4509  50 00             	mov	a,<((0))
  1600  450B  53 21             	mov	[0+((?_s_read_byte)^0x0)],a
  1601  450D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1602                          	
  1603  450F  7C 5ABF           	xcall	_s_read_byte
  1604                          	
  1605  4512  08                	push	a
  1606  4513  70 CF             	and	f, 0xCF   ;select user reg space
  1607  4515  62 D0 00          	mov	reg[CUR_PP],0
  1608  4518  51 16             	mov	a,[0+((s_measure@p_checksum)^0x0)]
  1609  451A  08                	push	a
  1610  451B  58 17             	mov	x,[1+((s_measure@p_checksum)^0x0)]
  1611  451D  18                	pop	a
  1612  451E  60 D3             	mov	reg[0xd3],a
  1613  4520  18                	pop	a
  1614  4521  54 00             	mov	[0+x],a
  1615                          	line	209
  1616                          ;shtxx.c: 209: return error;
  1617  4523  70 CF             	and	f, 0xCF   ;select user reg space
  1618  4525  62 D0 00          	mov	reg[CUR_PP],0
  1619  4528  51 1A             	mov	a,[0+((0+s_measure@error+01h)^0x0)]
  1620  452A  7D 452D           	xjmp	l81
  1621                          	line	211
  1622                          ;shtxx.c: 211: }
  1623  452D                    l81:
  1624                          ;			
  1625  452D  70 CF             	and	f, 0xCF   ;select user reg space
  1626                          	
  1627  452F  7F                	ret
  1628                          GLOBAL __end_of_s_measure
  1629  4530                    	__end_of_s_measure:
  1630                          	FNSIZE	_s_measure,8,5
  1631                          ; =============== function _s_measure ends ============
  1632                          
  1633                          	signat	_s_measure,12409
  1634                          	global	_calc_dewpoint
  1635                          	global	??_calc_dewpoint
  1636                          	global	?_calc_dewpoint
  1637                          	psect	text
  1638                          
  1639                          ; *************** function _calc_dewpoint *****************
  1640                          ; Defined at:
  1641                          ;		line 250 in file "./shtxx.c"
  1642                          ; Parameters:
  1643                          ;		h           	offs:   0	type: float 
  1644                          ;		t           	offs:   4	type: float 
  1645                          ; Auto variables:
  1646                          ;		logEx       	       	type: float 
  1647                          ;		dew_point   	       	type: float 
  1648                          ; Return value:
  1649                          ;		type: float 
  1650                          ;		size: 4
  1651                          ; Registers used:
  1652                          ;		a, x, CUR_PP, mret
  1653                          ; Tracked objects:
  1654                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1655                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1656                          ;		Unchanged: 
  1657                          ; Data sizes:
  1658                          ;		Autos:   24
  1659                          ;		Params:   8
  1660                          ;		Temp:     0
  1661                          ;		Total:   32
  1662                          ; This function calls:
  1663                          ;		___flmul
  1664                          ;		_log10
  1665                          ;		___fladd
  1666                          ;		___fldiv
  1667                          ;		___flsub
  1668                          ; This function is called by:
  1669                          ;		_s_do_measure
  1670                          ; This function uses a non-reentrant model
  1671                          ; 
  1672                          	file	"./shtxx.c"
  1673                          	line	250
  1674  0214                    	__size_of_calc_dewpoint	equ	__end_of_calc_dewpoint-_calc_dewpoint
  1675                          ;shtxx.c: 245: float calc_dewpoint(float h,float t)
  1676                          ;shtxx.c: 250: { float logEx,dew_point;
  1677                          ;			
  1678  4530                    _calc_dewpoint:	
  1679                          	opt	disable
  1680                          	line	251
  1681                          ;shtxx.c: 251: logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
  1682  4530  70 CF             	and	f, 0xCF   ;select user reg space
  1683  4532  62 D0 00          	mov	reg[CUR_PP],0
  1684  4535  51 18             	mov	a,[0+((calc_dewpoint@t)^0x0)]
  1685  4537  53 5D             	mov	[0+((?___flmul)^0x0)],a
  1686  4539  51 19             	mov	a,[1+((calc_dewpoint@t)^0x0)]
  1687  453B  53 5E             	mov	[1+((?___flmul)^0x0)],a
  1688  453D  51 1A             	mov	a,[2+((calc_dewpoint@t)^0x0)]
  1689  453F  53 5F             	mov	[2+((?___flmul)^0x0)],a
  1690  4541  51 1B             	mov	a,[3+((calc_dewpoint@t)^0x0)]
  1691  4543  53 60             	mov	[3+((?___flmul)^0x0)],a
  1692  4545  50 40             	mov	a,<(0x40f00000>>24)
  1693  4547  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  1694  4549  50 F0             	mov	a,<(0x40f00000>>16)
  1695  454B  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  1696  454D  50 00             	mov	a,<(0x40f00000>>8)
  1697  454F  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  1698  4551  50 00             	mov	a,<(0x40f00000)
  1699  4553  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  1700  4555  71 80             	or	f, 0x80	;select multiple RAM page mode
  1701                          	
  1702  4557  7C 7680           	xcall	___flmul
  1703                          	
  1704  455A  70 CF             	and	f, 0xCF   ;select user reg space
  1705  455C  62 D0 00          	mov	reg[CUR_PP],0
  1706  455F  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  1707  4561  53 30             	mov	[0+((_calc_dewpoint$2728)^0x0)],a
  1708  4563  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  1709  4565  53 31             	mov	[1+((_calc_dewpoint$2728)^0x0)],a
  1710  4567  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  1711  4569  53 32             	mov	[2+((_calc_dewpoint$2728)^0x0)],a
  1712  456B  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  1713  456D  53 33             	mov	[3+((_calc_dewpoint$2728)^0x0)],a
  1714  456F  51 14             	mov	a,[0+((calc_dewpoint@h)^0x0)]
  1715  4571  53 34             	mov	[0+((?_log10)^0x0)],a
  1716  4573  51 15             	mov	a,[1+((calc_dewpoint@h)^0x0)]
  1717  4575  53 35             	mov	[1+((?_log10)^0x0)],a
  1718  4577  51 16             	mov	a,[2+((calc_dewpoint@h)^0x0)]
  1719  4579  53 36             	mov	[2+((?_log10)^0x0)],a
  1720  457B  51 17             	mov	a,[3+((calc_dewpoint@h)^0x0)]
  1721  457D  53 37             	mov	[3+((?_log10)^0x0)],a
  1722  457F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1723                          	
  1724  4581  7C 64AF           	xcall	_log10
  1725                          	
  1726  4584  70 CF             	and	f, 0xCF   ;select user reg space
  1727  4586  62 D0 00          	mov	reg[CUR_PP],0
  1728  4589  51 34             	mov	a,[0+((0+?_log10)^0x0)]
  1729  458B  53 2C             	mov	[0+((_calc_dewpoint$2729)^0x0)],a
  1730  458D  51 35             	mov	a,[1+((0+?_log10)^0x0)]
  1731  458F  53 2D             	mov	[1+((_calc_dewpoint$2729)^0x0)],a
  1732  4591  51 36             	mov	a,[2+((0+?_log10)^0x0)]
  1733  4593  53 2E             	mov	[2+((_calc_dewpoint$2729)^0x0)],a
  1734  4595  51 37             	mov	a,[3+((0+?_log10)^0x0)]
  1735  4597  53 2F             	mov	[3+((_calc_dewpoint$2729)^0x0)],a
  1736  4599  51 18             	mov	a,[0+((calc_dewpoint@t)^0x0)]
  1737  459B  53 4C             	mov	[0+((?___fladd)^0x0)],a
  1738  459D  51 19             	mov	a,[1+((calc_dewpoint@t)^0x0)]
  1739  459F  53 4D             	mov	[1+((?___fladd)^0x0)],a
  1740  45A1  51 1A             	mov	a,[2+((calc_dewpoint@t)^0x0)]
  1741  45A3  53 4E             	mov	[2+((?___fladd)^0x0)],a
  1742  45A5  51 1B             	mov	a,[3+((calc_dewpoint@t)^0x0)]
  1743  45A7  53 4F             	mov	[3+((?___fladd)^0x0)],a
  1744  45A9  50 43             	mov	a,<(0x436d4ccd>>24)
  1745  45AB  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  1746  45AD  50 6D             	mov	a,<(0x436d4ccd>>16)
  1747  45AF  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  1748  45B1  50 4C             	mov	a,<(0x436d4ccd>>8)
  1749  45B3  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  1750  45B5  50 CD             	mov	a,<(0x436d4ccd)
  1751  45B7  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  1752  45B9  71 80             	or	f, 0x80	;select multiple RAM page mode
  1753                          	
  1754  45BB  7C 73BA           	xcall	___fladd
  1755                          	
  1756  45BE  70 CF             	and	f, 0xCF   ;select user reg space
  1757  45C0  62 D0 00          	mov	reg[CUR_PP],0
  1758  45C3  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  1759  45C5  53 38             	mov	[0+((0+?___fldiv+04h)^0x0)],a
  1760  45C7  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  1761  45C9  53 39             	mov	[1+((0+?___fldiv+04h)^0x0)],a
  1762  45CB  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  1763  45CD  53 3A             	mov	[2+((0+?___fldiv+04h)^0x0)],a
  1764  45CF  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  1765  45D1  53 3B             	mov	[3+((0+?___fldiv+04h)^0x0)],a
  1766  45D3  51 30             	mov	a,[0+((_calc_dewpoint$2728)^0x0)]
  1767  45D5  53 34             	mov	[0+((?___fldiv)^0x0)],a
  1768  45D7  51 31             	mov	a,[1+((_calc_dewpoint$2728)^0x0)]
  1769  45D9  53 35             	mov	[1+((?___fldiv)^0x0)],a
  1770  45DB  51 32             	mov	a,[2+((_calc_dewpoint$2728)^0x0)]
  1771  45DD  53 36             	mov	[2+((?___fldiv)^0x0)],a
  1772  45DF  51 33             	mov	a,[3+((_calc_dewpoint$2728)^0x0)]
  1773  45E1  53 37             	mov	[3+((?___fldiv)^0x0)],a
  1774  45E3  71 80             	or	f, 0x80	;select multiple RAM page mode
  1775                          	
  1776  45E5  7C 632F           	xcall	___fldiv
  1777                          	
  1778  45E8  70 CF             	and	f, 0xCF   ;select user reg space
  1779  45EA  62 D0 00          	mov	reg[CUR_PP],0
  1780  45ED  51 34             	mov	a,[0+((0+?___fldiv)^0x0)]
  1781  45EF  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  1782  45F1  51 35             	mov	a,[1+((0+?___fldiv)^0x0)]
  1783  45F3  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  1784  45F5  51 36             	mov	a,[2+((0+?___fldiv)^0x0)]
  1785  45F7  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  1786  45F9  51 37             	mov	a,[3+((0+?___fldiv)^0x0)]
  1787  45FB  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  1788  45FD  51 2C             	mov	a,[0+((_calc_dewpoint$2729)^0x0)]
  1789  45FF  53 4C             	mov	[0+((?___fladd)^0x0)],a
  1790  4601  51 2D             	mov	a,[1+((_calc_dewpoint$2729)^0x0)]
  1791  4603  53 4D             	mov	[1+((?___fladd)^0x0)],a
  1792  4605  51 2E             	mov	a,[2+((_calc_dewpoint$2729)^0x0)]
  1793  4607  53 4E             	mov	[2+((?___fladd)^0x0)],a
  1794  4609  51 2F             	mov	a,[3+((_calc_dewpoint$2729)^0x0)]
  1795  460B  53 4F             	mov	[3+((?___fladd)^0x0)],a
  1796  460D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1797                          	
  1798  460F  7C 73BA           	xcall	___fladd
  1799                          	
  1800  4612  70 CF             	and	f, 0xCF   ;select user reg space
  1801  4614  62 D0 00          	mov	reg[CUR_PP],0
  1802  4617  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  1803  4619  53 4C             	mov	[0+((?___fladd)^0x0)],a
  1804  461B  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  1805  461D  53 4D             	mov	[1+((?___fladd)^0x0)],a
  1806  461F  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  1807  4621  53 4E             	mov	[2+((?___fladd)^0x0)],a
  1808  4623  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  1809  4625  53 4F             	mov	[3+((?___fladd)^0x0)],a
  1810  4627  50 BF             	mov	a,<(0xbfab6be3>>24)
  1811  4629  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  1812  462B  50 AB             	mov	a,<(0xbfab6be3>>16)
  1813  462D  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  1814  462F  50 6B             	mov	a,<(0xbfab6be3>>8)
  1815  4631  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  1816  4633  50 E3             	mov	a,<(0xbfab6be3)
  1817  4635  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  1818  4637  71 80             	or	f, 0x80	;select multiple RAM page mode
  1819                          	
  1820  4639  7C 73BA           	xcall	___fladd
  1821                          	
  1822  463C  70 CF             	and	f, 0xCF   ;select user reg space
  1823  463E  62 D0 00          	mov	reg[CUR_PP],0
  1824  4641  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  1825  4643  53 1C             	mov	[0+((calc_dewpoint@logEx)^0x0)],a
  1826  4645  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  1827  4647  53 1D             	mov	[1+((calc_dewpoint@logEx)^0x0)],a
  1828  4649  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  1829  464B  53 1E             	mov	[2+((calc_dewpoint@logEx)^0x0)],a
  1830  464D  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  1831  464F  53 1F             	mov	[3+((calc_dewpoint@logEx)^0x0)],a
  1832                          	line	252
  1833                          ;shtxx.c: 252: dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
  1834  4651  51 1C             	mov	a,[0+((calc_dewpoint@logEx)^0x0)]
  1835  4653  53 4C             	mov	[0+((?___fladd)^0x0)],a
  1836  4655  51 1D             	mov	a,[1+((calc_dewpoint@logEx)^0x0)]
  1837  4657  53 4D             	mov	[1+((?___fladd)^0x0)],a
  1838  4659  51 1E             	mov	a,[2+((calc_dewpoint@logEx)^0x0)]
  1839  465B  53 4E             	mov	[2+((?___fladd)^0x0)],a
  1840  465D  51 1F             	mov	a,[3+((calc_dewpoint@logEx)^0x0)]
  1841  465F  53 4F             	mov	[3+((?___fladd)^0x0)],a
  1842  4661  50 BF             	mov	a,<(0xbf292839>>24)
  1843  4663  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  1844  4665  50 29             	mov	a,<(0xbf292839>>16)
  1845  4667  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  1846  4669  50 28             	mov	a,<(0xbf292839>>8)
  1847  466B  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  1848  466D  50 39             	mov	a,<(0xbf292839)
  1849  466F  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  1850  4671  71 80             	or	f, 0x80	;select multiple RAM page mode
  1851                          	
  1852  4673  7C 73BA           	xcall	___fladd
  1853                          	
  1854  4676  70 CF             	and	f, 0xCF   ;select user reg space
  1855  4678  62 D0 00          	mov	reg[CUR_PP],0
  1856  467B  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  1857  467D  53 28             	mov	[0+((_calc_dewpoint$2734)^0x0)],a
  1858  467F  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  1859  4681  53 29             	mov	[1+((_calc_dewpoint$2734)^0x0)],a
  1860  4683  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  1861  4685  53 2A             	mov	[2+((_calc_dewpoint$2734)^0x0)],a
  1862  4687  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  1863  4689  53 2B             	mov	[3+((_calc_dewpoint$2734)^0x0)],a
  1864  468B  50 43             	mov	a,<(0x436d4ccd>>24)
  1865  468D  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  1866  468F  50 6D             	mov	a,<(0x436d4ccd>>16)
  1867  4691  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  1868  4693  50 4C             	mov	a,<(0x436d4ccd>>8)
  1869  4695  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  1870  4697  50 CD             	mov	a,<(0x436d4ccd)
  1871  4699  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  1872  469B  51 28             	mov	a,[0+((_calc_dewpoint$2734)^0x0)]
  1873  469D  53 5D             	mov	[0+((?___flmul)^0x0)],a
  1874  469F  51 29             	mov	a,[1+((_calc_dewpoint$2734)^0x0)]
  1875  46A1  53 5E             	mov	[1+((?___flmul)^0x0)],a
  1876  46A3  51 2A             	mov	a,[2+((_calc_dewpoint$2734)^0x0)]
  1877  46A5  53 5F             	mov	[2+((?___flmul)^0x0)],a
  1878  46A7  51 2B             	mov	a,[3+((_calc_dewpoint$2734)^0x0)]
  1879  46A9  53 60             	mov	[3+((?___flmul)^0x0)],a
  1880  46AB  71 80             	or	f, 0x80	;select multiple RAM page mode
  1881                          	
  1882  46AD  7C 7680           	xcall	___flmul
  1883                          	
  1884  46B0  70 CF             	and	f, 0xCF   ;select user reg space
  1885  46B2  62 D0 00          	mov	reg[CUR_PP],0
  1886  46B5  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  1887  46B7  53 24             	mov	[0+((_calc_dewpoint$2735)^0x0)],a
  1888  46B9  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  1889  46BB  53 25             	mov	[1+((_calc_dewpoint$2735)^0x0)],a
  1890  46BD  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  1891  46BF  53 26             	mov	[2+((_calc_dewpoint$2735)^0x0)],a
  1892  46C1  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  1893  46C3  53 27             	mov	[3+((_calc_dewpoint$2735)^0x0)],a
  1894  46C5  50 41             	mov	a,<(0x41029284>>24)
  1895  46C7  53 40             	mov	[0+((?___flsub)^0x0)],a
  1896  46C9  50 02             	mov	a,<(0x41029284>>16)
  1897  46CB  53 41             	mov	[1+((?___flsub)^0x0)],a
  1898  46CD  50 92             	mov	a,<(0x41029284>>8)
  1899  46CF  53 42             	mov	[2+((?___flsub)^0x0)],a
  1900  46D1  50 84             	mov	a,<(0x41029284)
  1901  46D3  53 43             	mov	[3+((?___flsub)^0x0)],a
  1902  46D5  51 1C             	mov	a,[0+((calc_dewpoint@logEx)^0x0)]
  1903  46D7  53 44             	mov	[0+((0+?___flsub+04h)^0x0)],a
  1904  46D9  51 1D             	mov	a,[1+((calc_dewpoint@logEx)^0x0)]
  1905  46DB  53 45             	mov	[1+((0+?___flsub+04h)^0x0)],a
  1906  46DD  51 1E             	mov	a,[2+((calc_dewpoint@logEx)^0x0)]
  1907  46DF  53 46             	mov	[2+((0+?___flsub+04h)^0x0)],a
  1908  46E1  51 1F             	mov	a,[3+((calc_dewpoint@logEx)^0x0)]
  1909  46E3  53 47             	mov	[3+((0+?___flsub+04h)^0x0)],a
  1910  46E5  71 80             	or	f, 0x80	;select multiple RAM page mode
  1911                          	
  1912  46E7  7C 6797           	xcall	___flsub
  1913                          	
  1914  46EA  70 CF             	and	f, 0xCF   ;select user reg space
  1915  46EC  62 D0 00          	mov	reg[CUR_PP],0
  1916  46EF  51 40             	mov	a,[0+((0+?___flsub)^0x0)]
  1917  46F1  53 38             	mov	[0+((0+?___fldiv+04h)^0x0)],a
  1918  46F3  51 41             	mov	a,[1+((0+?___flsub)^0x0)]
  1919  46F5  53 39             	mov	[1+((0+?___fldiv+04h)^0x0)],a
  1920  46F7  51 42             	mov	a,[2+((0+?___flsub)^0x0)]
  1921  46F9  53 3A             	mov	[2+((0+?___fldiv+04h)^0x0)],a
  1922  46FB  51 43             	mov	a,[3+((0+?___flsub)^0x0)]
  1923  46FD  53 3B             	mov	[3+((0+?___fldiv+04h)^0x0)],a
  1924  46FF  51 24             	mov	a,[0+((_calc_dewpoint$2735)^0x0)]
  1925  4701  53 34             	mov	[0+((?___fldiv)^0x0)],a
  1926  4703  51 25             	mov	a,[1+((_calc_dewpoint$2735)^0x0)]
  1927  4705  53 35             	mov	[1+((?___fldiv)^0x0)],a
  1928  4707  51 26             	mov	a,[2+((_calc_dewpoint$2735)^0x0)]
  1929  4709  53 36             	mov	[2+((?___fldiv)^0x0)],a
  1930  470B  51 27             	mov	a,[3+((_calc_dewpoint$2735)^0x0)]
  1931  470D  53 37             	mov	[3+((?___fldiv)^0x0)],a
  1932  470F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1933                          	
  1934  4711  7C 632F           	xcall	___fldiv
  1935                          	
  1936  4714  70 CF             	and	f, 0xCF   ;select user reg space
  1937  4716  62 D0 00          	mov	reg[CUR_PP],0
  1938  4719  51 34             	mov	a,[0+((0+?___fldiv)^0x0)]
  1939  471B  53 20             	mov	[0+((calc_dewpoint@dew_point)^0x0)],a
  1940  471D  51 35             	mov	a,[1+((0+?___fldiv)^0x0)]
  1941  471F  53 21             	mov	[1+((calc_dewpoint@dew_point)^0x0)],a
  1942  4721  51 36             	mov	a,[2+((0+?___fldiv)^0x0)]
  1943  4723  53 22             	mov	[2+((calc_dewpoint@dew_point)^0x0)],a
  1944  4725  51 37             	mov	a,[3+((0+?___fldiv)^0x0)]
  1945  4727  53 23             	mov	[3+((calc_dewpoint@dew_point)^0x0)],a
  1946                          	line	253
  1947  4729  70 CF             	and	f, 0xCF   ;select user reg space
  1948  472B  62 D0 00          	mov	reg[CUR_PP],0
  1949  472E  51 20             	mov	a,[0+((calc_dewpoint@dew_point)^0x0)]
  1950  4730  53 14             	mov	[0+((?_calc_dewpoint)^0x0)],a
  1951  4732  51 21             	mov	a,[1+((calc_dewpoint@dew_point)^0x0)]
  1952  4734  53 15             	mov	[1+((?_calc_dewpoint)^0x0)],a
  1953  4736  51 22             	mov	a,[2+((calc_dewpoint@dew_point)^0x0)]
  1954  4738  53 16             	mov	[2+((?_calc_dewpoint)^0x0)],a
  1955  473A  51 23             	mov	a,[3+((calc_dewpoint@dew_point)^0x0)]
  1956  473C  53 17             	mov	[3+((?_calc_dewpoint)^0x0)],a
  1957  473E  7D 4741           	xjmp	l95
  1958                          	line	254
  1959                          ;shtxx.c: 254: }
  1960  4741                    l95:
  1961                          ;			
  1962  4741  70 CF             	and	f, 0xCF   ;select user reg space
  1963                          	
  1964  4743  7F                	ret
  1965                          GLOBAL __end_of_calc_dewpoint
  1966  4744                    	__end_of_calc_dewpoint:
  1967                          	FNSIZE	_calc_dewpoint,24,8
  1968                          ; =============== function _calc_dewpoint ends ============
  1969                          
  1970                          	signat	_calc_dewpoint,8316
  1971                          	global	_calc_sth11
  1972                          	global	??_calc_sth11
  1973                          	global	?_calc_sth11
  1974                          	psect	text
  1975                          
  1976                          ; *************** function _calc_sth11 *****************
  1977                          ; Defined at:
  1978                          ;		line 222 in file "./shtxx.c"
  1979                          ; Parameters:
  1980                          ;		p_humidity  	offs:   0	type: PTR float ; Largest target is 4
  1981                          ;		 -> s_do_measure@humi_val.f(4), 
  1982                          ;		p_temperatur	offs:   2	type: PTR float ; Largest target is 4
  1983                          ;		 -> s_do_measure@temp_val.f(4), 
  1984                          ; Auto variables:
  1985                          ;		rh_true     	       	type: float 
  1986                          ;		rh          	       	type: float 
  1987                          ;		t_C         	       	type: float 
  1988                          ;		t           	       	type: float 
  1989                          ;		rh_lin      	       	type: float 
  1990                          ; Return value:
  1991                          ;		type: void 
  1992                          ;		size: 0
  1993                          ; Registers used:
  1994                          ;		a, x, CUR_PP, mret
  1995                          ; Tracked objects:
  1996                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1997                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1998                          ;		Unchanged: 
  1999                          ; Data sizes:
  2000                          ;		Autos:   32
  2001                          ;		Params:   4
  2002                          ;		Temp:     1
  2003                          ;		Total:   37
  2004                          ; This function calls:
  2005                          ;		___flmul
  2006                          ;		___fladd
  2007                          ;		___flge
  2008                          ; This function is called by:
  2009                          ;		_s_do_measure
  2010                          ; This function uses a non-reentrant model
  2011                          ; 
  2012                          	file	"./shtxx.c"
  2013                          	line	222
  2014  0366                    	__size_of_calc_sth11	equ	__end_of_calc_sth11-_calc_sth11
  2015                          ;shtxx.c: 215: void calc_sth11(float *p_humidity ,float *p_temperature)
  2016                          ;shtxx.c: 222: { const float C1=-4.0;
  2017                          ;			
  2018  4744                    _calc_sth11:	
  2019                          	opt	disable
  2020                          	line	228
  2021                          ;shtxx.c: 223: const float C2=+0.0405;
  2022                          ;shtxx.c: 224: const float C3=-0.0000028;
  2023                          ;shtxx.c: 225: const float T1=+0.01;
  2024                          ;shtxx.c: 226: const float T2=+0.00008;
  2025                          ;shtxx.c: 228: float rh=*p_humidity;
  2026  4744  70 CF             	and	f, 0xCF   ;select user reg space
  2027  4746  62 D0 00          	mov	reg[CUR_PP],0
  2028  4749  51 14             	mov	a,[0+((calc_sth11@p_humidity)^0x0)]
  2029  474B  58 15             	mov	x,[1+((calc_sth11@p_humidity)^0x0)]
  2030  474D  60 D3             	mov	reg[0xd3],a
  2031  474F  52 00             	mov	a,[0+x]
  2032  4751  53 1C             	mov	[0+((calc_sth11@rh)^0x0)],a
  2033  4753  52 01             	mov	a,[1+x]
  2034  4755  53 1D             	mov	[1+((calc_sth11@rh)^0x0)],a
  2035  4757  52 02             	mov	a,[2+x]
  2036  4759  53 1E             	mov	[2+((calc_sth11@rh)^0x0)],a
  2037  475B  52 03             	mov	a,[3+x]
  2038  475D  53 1F             	mov	[3+((calc_sth11@rh)^0x0)],a
  2039                          	line	229
  2040                          ;shtxx.c: 229: float t=*p_temperature;
  2041  475F  51 16             	mov	a,[0+((calc_sth11@p_temperature)^0x0)]
  2042  4761  58 17             	mov	x,[1+((calc_sth11@p_temperature)^0x0)]
  2043  4763  60 D3             	mov	reg[0xd3],a
  2044  4765  52 00             	mov	a,[0+x]
  2045  4767  53 28             	mov	[0+((calc_sth11@t)^0x0)],a
  2046  4769  52 01             	mov	a,[1+x]
  2047  476B  53 29             	mov	[1+((calc_sth11@t)^0x0)],a
  2048  476D  52 02             	mov	a,[2+x]
  2049  476F  53 2A             	mov	[2+((calc_sth11@t)^0x0)],a
  2050  4771  52 03             	mov	a,[3+x]
  2051  4773  53 2B             	mov	[3+((calc_sth11@t)^0x0)],a
  2052                          	line	234
  2053                          ;shtxx.c: 230: float rh_lin;
  2054                          ;shtxx.c: 231: float rh_true;
  2055                          ;shtxx.c: 232: float t_C;
  2056                          ;shtxx.c: 234: t_C=t*0.01 - 40;
  2057  4775  70 CF             	and	f, 0xCF   ;select user reg space
  2058  4777  62 D0 00          	mov	reg[CUR_PP],0
  2059  477A  51 28             	mov	a,[0+((calc_sth11@t)^0x0)]
  2060  477C  53 5D             	mov	[0+((?___flmul)^0x0)],a
  2061  477E  51 29             	mov	a,[1+((calc_sth11@t)^0x0)]
  2062  4780  53 5E             	mov	[1+((?___flmul)^0x0)],a
  2063  4782  51 2A             	mov	a,[2+((calc_sth11@t)^0x0)]
  2064  4784  53 5F             	mov	[2+((?___flmul)^0x0)],a
  2065  4786  51 2B             	mov	a,[3+((calc_sth11@t)^0x0)]
  2066  4788  53 60             	mov	[3+((?___flmul)^0x0)],a
  2067  478A  50 3C             	mov	a,<(0x3c23d70a>>24)
  2068  478C  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2069  478E  50 23             	mov	a,<(0x3c23d70a>>16)
  2070  4790  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2071  4792  50 D7             	mov	a,<(0x3c23d70a>>8)
  2072  4794  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2073  4796  50 0A             	mov	a,<(0x3c23d70a)
  2074  4798  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2075  479A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2076                          	
  2077  479C  7C 7680           	xcall	___flmul
  2078                          	
  2079  479F  70 CF             	and	f, 0xCF   ;select user reg space
  2080  47A1  62 D0 00          	mov	reg[CUR_PP],0
  2081  47A4  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  2082  47A6  53 4C             	mov	[0+((?___fladd)^0x0)],a
  2083  47A8  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  2084  47AA  53 4D             	mov	[1+((?___fladd)^0x0)],a
  2085  47AC  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  2086  47AE  53 4E             	mov	[2+((?___fladd)^0x0)],a
  2087  47B0  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  2088  47B2  53 4F             	mov	[3+((?___fladd)^0x0)],a
  2089  47B4  50 C2             	mov	a,<(0xc2200000>>24)
  2090  47B6  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2091  47B8  50 20             	mov	a,<(0xc2200000>>16)
  2092  47BA  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2093  47BC  50 00             	mov	a,<(0xc2200000>>8)
  2094  47BE  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2095  47C0  50 00             	mov	a,<(0xc2200000)
  2096  47C2  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2097  47C4  71 80             	or	f, 0x80	;select multiple RAM page mode
  2098                          	
  2099  47C6  7C 73BA           	xcall	___fladd
  2100                          	
  2101  47C9  70 CF             	and	f, 0xCF   ;select user reg space
  2102  47CB  62 D0 00          	mov	reg[CUR_PP],0
  2103  47CE  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  2104  47D0  53 20             	mov	[0+((calc_sth11@t_C)^0x0)],a
  2105  47D2  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  2106  47D4  53 21             	mov	[1+((calc_sth11@t_C)^0x0)],a
  2107  47D6  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  2108  47D8  53 22             	mov	[2+((calc_sth11@t_C)^0x0)],a
  2109  47DA  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  2110  47DC  53 23             	mov	[3+((calc_sth11@t_C)^0x0)],a
  2111                          	line	235
  2112                          ;shtxx.c: 235: rh_lin=C3*rh*rh + C2*rh + C1;
  2113  47DE  50 7D             	mov	a,>F817
  2114  47E0  57 C8             	mov	x,<F817
  2115  47E2  08                	push	a
  2116  47E3  28                	romx
  2117  47E4  70 CF             	and	f, 0xCF   ;select user reg space
  2118  47E6  62 D0 00          	mov	reg[CUR_PP],0
  2119  47E9  53 5D             	mov	[0+((?___flmul)^0x0)],a
  2120  47EB  18                	pop	a
  2121  47EC  75                	inc	x
  2122  47ED  08                	push	a
  2123  47EE  28                	romx
  2124  47EF  53 5E             	mov	[1+((?___flmul)^0x0)],a
  2125  47F1  18                	pop	a
  2126  47F2  75                	inc	x
  2127  47F3  08                	push	a
  2128  47F4  28                	romx
  2129  47F5  53 5F             	mov	[2+((?___flmul)^0x0)],a
  2130  47F7  18                	pop	a
  2131  47F8  75                	inc	x
  2132  47F9  28                	romx
  2133  47FA  53 60             	mov	[3+((?___flmul)^0x0)],a
  2134  47FC  51 1C             	mov	a,[0+((calc_sth11@rh)^0x0)]
  2135  47FE  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2136  4800  51 1D             	mov	a,[1+((calc_sth11@rh)^0x0)]
  2137  4802  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2138  4804  51 1E             	mov	a,[2+((calc_sth11@rh)^0x0)]
  2139  4806  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2140  4808  51 1F             	mov	a,[3+((calc_sth11@rh)^0x0)]
  2141  480A  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2142  480C  71 80             	or	f, 0x80	;select multiple RAM page mode
  2143                          	
  2144  480E  7C 7680           	xcall	___flmul
  2145                          	
  2146  4811  70 CF             	and	f, 0xCF   ;select user reg space
  2147  4813  62 D0 00          	mov	reg[CUR_PP],0
  2148  4816  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  2149  4818  53 30             	mov	[0+((_calc_sth11$2713)^0x0)],a
  2150  481A  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  2151  481C  53 31             	mov	[1+((_calc_sth11$2713)^0x0)],a
  2152  481E  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  2153  4820  53 32             	mov	[2+((_calc_sth11$2713)^0x0)],a
  2154  4822  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  2155  4824  53 33             	mov	[3+((_calc_sth11$2713)^0x0)],a
  2156  4826  70 CF             	and	f, 0xCF   ;select user reg space
  2157  4828  62 D0 00          	mov	reg[CUR_PP],0
  2158  482B  51 1C             	mov	a,[0+((calc_sth11@rh)^0x0)]
  2159  482D  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2160  482F  51 1D             	mov	a,[1+((calc_sth11@rh)^0x0)]
  2161  4831  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2162  4833  51 1E             	mov	a,[2+((calc_sth11@rh)^0x0)]
  2163  4835  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2164  4837  51 1F             	mov	a,[3+((calc_sth11@rh)^0x0)]
  2165  4839  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2166  483B  51 30             	mov	a,[0+((_calc_sth11$2713)^0x0)]
  2167  483D  53 5D             	mov	[0+((?___flmul)^0x0)],a
  2168  483F  51 31             	mov	a,[1+((_calc_sth11$2713)^0x0)]
  2169  4841  53 5E             	mov	[1+((?___flmul)^0x0)],a
  2170  4843  51 32             	mov	a,[2+((_calc_sth11$2713)^0x0)]
  2171  4845  53 5F             	mov	[2+((?___flmul)^0x0)],a
  2172  4847  51 33             	mov	a,[3+((_calc_sth11$2713)^0x0)]
  2173  4849  53 60             	mov	[3+((?___flmul)^0x0)],a
  2174  484B  71 80             	or	f, 0x80	;select multiple RAM page mode
  2175                          	
  2176  484D  7C 7680           	xcall	___flmul
  2177                          	
  2178  4850  70 CF             	and	f, 0xCF   ;select user reg space
  2179  4852  62 D0 00          	mov	reg[CUR_PP],0
  2180  4855  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  2181  4857  53 34             	mov	[0+((_calc_sth11$2714)^0x0)],a
  2182  4859  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  2183  485B  53 35             	mov	[1+((_calc_sth11$2714)^0x0)],a
  2184  485D  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  2185  485F  53 36             	mov	[2+((_calc_sth11$2714)^0x0)],a
  2186  4861  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  2187  4863  53 37             	mov	[3+((_calc_sth11$2714)^0x0)],a
  2188  4865  70 CF             	and	f, 0xCF   ;select user reg space
  2189  4867  62 D0 00          	mov	reg[CUR_PP],0
  2190  486A  51 1C             	mov	a,[0+((calc_sth11@rh)^0x0)]
  2191  486C  53 5D             	mov	[0+((?___flmul)^0x0)],a
  2192  486E  51 1D             	mov	a,[1+((calc_sth11@rh)^0x0)]
  2193  4870  53 5E             	mov	[1+((?___flmul)^0x0)],a
  2194  4872  51 1E             	mov	a,[2+((calc_sth11@rh)^0x0)]
  2195  4874  53 5F             	mov	[2+((?___flmul)^0x0)],a
  2196  4876  51 1F             	mov	a,[3+((calc_sth11@rh)^0x0)]
  2197  4878  53 60             	mov	[3+((?___flmul)^0x0)],a
  2198  487A  50 3D             	mov	a,<(0x3d25e354>>24)
  2199  487C  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2200  487E  50 25             	mov	a,<(0x3d25e354>>16)
  2201  4880  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2202  4882  50 E3             	mov	a,<(0x3d25e354>>8)
  2203  4884  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2204  4886  50 54             	mov	a,<(0x3d25e354)
  2205  4888  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2206  488A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2207                          	
  2208  488C  7C 7680           	xcall	___flmul
  2209                          	
  2210  488F  70 CF             	and	f, 0xCF   ;select user reg space
  2211  4891  62 D0 00          	mov	reg[CUR_PP],0
  2212  4894  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  2213  4896  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2214  4898  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  2215  489A  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2216  489C  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  2217  489E  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2218  48A0  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  2219  48A2  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2220  48A4  51 34             	mov	a,[0+((_calc_sth11$2714)^0x0)]
  2221  48A6  53 4C             	mov	[0+((?___fladd)^0x0)],a
  2222  48A8  51 35             	mov	a,[1+((_calc_sth11$2714)^0x0)]
  2223  48AA  53 4D             	mov	[1+((?___fladd)^0x0)],a
  2224  48AC  51 36             	mov	a,[2+((_calc_sth11$2714)^0x0)]
  2225  48AE  53 4E             	mov	[2+((?___fladd)^0x0)],a
  2226  48B0  51 37             	mov	a,[3+((_calc_sth11$2714)^0x0)]
  2227  48B2  53 4F             	mov	[3+((?___fladd)^0x0)],a
  2228  48B4  71 80             	or	f, 0x80	;select multiple RAM page mode
  2229                          	
  2230  48B6  7C 73BA           	xcall	___fladd
  2231                          	
  2232  48B9  70 CF             	and	f, 0xCF   ;select user reg space
  2233  48BB  62 D0 00          	mov	reg[CUR_PP],0
  2234  48BE  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  2235  48C0  53 4C             	mov	[0+((?___fladd)^0x0)],a
  2236  48C2  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  2237  48C4  53 4D             	mov	[1+((?___fladd)^0x0)],a
  2238  48C6  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  2239  48C8  53 4E             	mov	[2+((?___fladd)^0x0)],a
  2240  48CA  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  2241  48CC  53 4F             	mov	[3+((?___fladd)^0x0)],a
  2242  48CE  50 C0             	mov	a,<(0xc0800000>>24)
  2243  48D0  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2244  48D2  50 80             	mov	a,<(0xc0800000>>16)
  2245  48D4  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2246  48D6  50 00             	mov	a,<(0xc0800000>>8)
  2247  48D8  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2248  48DA  50 00             	mov	a,<(0xc0800000)
  2249  48DC  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2250  48DE  71 80             	or	f, 0x80	;select multiple RAM page mode
  2251                          	
  2252  48E0  7C 73BA           	xcall	___fladd
  2253                          	
  2254  48E3  70 CF             	and	f, 0xCF   ;select user reg space
  2255  48E5  62 D0 00          	mov	reg[CUR_PP],0
  2256  48E8  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  2257  48EA  53 24             	mov	[0+((calc_sth11@rh_lin)^0x0)],a
  2258  48EC  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  2259  48EE  53 25             	mov	[1+((calc_sth11@rh_lin)^0x0)],a
  2260  48F0  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  2261  48F2  53 26             	mov	[2+((calc_sth11@rh_lin)^0x0)],a
  2262  48F4  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  2263  48F6  53 27             	mov	[3+((calc_sth11@rh_lin)^0x0)],a
  2264                          	line	236
  2265                          ;shtxx.c: 236: rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;
  2266  48F8  70 CF             	and	f, 0xCF   ;select user reg space
  2267  48FA  62 D0 00          	mov	reg[CUR_PP],0
  2268  48FD  51 20             	mov	a,[0+((calc_sth11@t_C)^0x0)]
  2269  48FF  53 4C             	mov	[0+((?___fladd)^0x0)],a
  2270  4901  51 21             	mov	a,[1+((calc_sth11@t_C)^0x0)]
  2271  4903  53 4D             	mov	[1+((?___fladd)^0x0)],a
  2272  4905  51 22             	mov	a,[2+((calc_sth11@t_C)^0x0)]
  2273  4907  53 4E             	mov	[2+((?___fladd)^0x0)],a
  2274  4909  51 23             	mov	a,[3+((calc_sth11@t_C)^0x0)]
  2275  490B  53 4F             	mov	[3+((?___fladd)^0x0)],a
  2276  490D  50 C1             	mov	a,<(0xc1c80000>>24)
  2277  490F  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2278  4911  50 C8             	mov	a,<(0xc1c80000>>16)
  2279  4913  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2280  4915  50 00             	mov	a,<(0xc1c80000>>8)
  2281  4917  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2282  4919  50 00             	mov	a,<(0xc1c80000)
  2283  491B  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2284  491D  71 80             	or	f, 0x80	;select multiple RAM page mode
  2285                          	
  2286  491F  7C 73BA           	xcall	___fladd
  2287                          	
  2288  4922  70 CF             	and	f, 0xCF   ;select user reg space
  2289  4924  62 D0 00          	mov	reg[CUR_PP],0
  2290  4927  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  2291  4929  53 2C             	mov	[0+((_calc_sth11$2720)^0x0)],a
  2292  492B  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  2293  492D  53 2D             	mov	[1+((_calc_sth11$2720)^0x0)],a
  2294  492F  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  2295  4931  53 2E             	mov	[2+((_calc_sth11$2720)^0x0)],a
  2296  4933  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  2297  4935  53 2F             	mov	[3+((_calc_sth11$2720)^0x0)],a
  2298  4937  70 CF             	and	f, 0xCF   ;select user reg space
  2299  4939  62 D0 00          	mov	reg[CUR_PP],0
  2300  493C  51 1C             	mov	a,[0+((calc_sth11@rh)^0x0)]
  2301  493E  53 5D             	mov	[0+((?___flmul)^0x0)],a
  2302  4940  51 1D             	mov	a,[1+((calc_sth11@rh)^0x0)]
  2303  4942  53 5E             	mov	[1+((?___flmul)^0x0)],a
  2304  4944  51 1E             	mov	a,[2+((calc_sth11@rh)^0x0)]
  2305  4946  53 5F             	mov	[2+((?___flmul)^0x0)],a
  2306  4948  51 1F             	mov	a,[3+((calc_sth11@rh)^0x0)]
  2307  494A  53 60             	mov	[3+((?___flmul)^0x0)],a
  2308  494C  50 38             	mov	a,<(0x38a7c5ac>>24)
  2309  494E  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2310  4950  50 A7             	mov	a,<(0x38a7c5ac>>16)
  2311  4952  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2312  4954  50 C5             	mov	a,<(0x38a7c5ac>>8)
  2313  4956  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2314  4958  50 AC             	mov	a,<(0x38a7c5ac)
  2315  495A  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2316  495C  71 80             	or	f, 0x80	;select multiple RAM page mode
  2317                          	
  2318  495E  7C 7680           	xcall	___flmul
  2319                          	
  2320  4961  70 CF             	and	f, 0xCF   ;select user reg space
  2321  4963  62 D0 00          	mov	reg[CUR_PP],0
  2322  4966  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  2323  4968  53 4C             	mov	[0+((?___fladd)^0x0)],a
  2324  496A  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  2325  496C  53 4D             	mov	[1+((?___fladd)^0x0)],a
  2326  496E  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  2327  4970  53 4E             	mov	[2+((?___fladd)^0x0)],a
  2328  4972  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  2329  4974  53 4F             	mov	[3+((?___fladd)^0x0)],a
  2330  4976  50 3C             	mov	a,<(0x3c23d70a>>24)
  2331  4978  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2332  497A  50 23             	mov	a,<(0x3c23d70a>>16)
  2333  497C  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2334  497E  50 D7             	mov	a,<(0x3c23d70a>>8)
  2335  4980  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2336  4982  50 0A             	mov	a,<(0x3c23d70a)
  2337  4984  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2338  4986  71 80             	or	f, 0x80	;select multiple RAM page mode
  2339                          	
  2340  4988  7C 73BA           	xcall	___fladd
  2341                          	
  2342  498B  70 CF             	and	f, 0xCF   ;select user reg space
  2343  498D  62 D0 00          	mov	reg[CUR_PP],0
  2344  4990  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  2345  4992  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  2346  4994  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  2347  4996  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  2348  4998  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  2349  499A  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  2350  499C  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  2351  499E  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  2352  49A0  51 2C             	mov	a,[0+((_calc_sth11$2720)^0x0)]
  2353  49A2  53 5D             	mov	[0+((?___flmul)^0x0)],a
  2354  49A4  51 2D             	mov	a,[1+((_calc_sth11$2720)^0x0)]
  2355  49A6  53 5E             	mov	[1+((?___flmul)^0x0)],a
  2356  49A8  51 2E             	mov	a,[2+((_calc_sth11$2720)^0x0)]
  2357  49AA  53 5F             	mov	[2+((?___flmul)^0x0)],a
  2358  49AC  51 2F             	mov	a,[3+((_calc_sth11$2720)^0x0)]
  2359  49AE  53 60             	mov	[3+((?___flmul)^0x0)],a
  2360  49B0  71 80             	or	f, 0x80	;select multiple RAM page mode
  2361                          	
  2362  49B2  7C 7680           	xcall	___flmul
  2363                          	
  2364  49B5  70 CF             	and	f, 0xCF   ;select user reg space
  2365  49B7  62 D0 00          	mov	reg[CUR_PP],0
  2366  49BA  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  2367  49BC  53 4C             	mov	[0+((?___fladd)^0x0)],a
  2368  49BE  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  2369  49C0  53 4D             	mov	[1+((?___fladd)^0x0)],a
  2370  49C2  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  2371  49C4  53 4E             	mov	[2+((?___fladd)^0x0)],a
  2372  49C6  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  2373  49C8  53 4F             	mov	[3+((?___fladd)^0x0)],a
  2374  49CA  51 24             	mov	a,[0+((calc_sth11@rh_lin)^0x0)]
  2375  49CC  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  2376  49CE  51 25             	mov	a,[1+((calc_sth11@rh_lin)^0x0)]
  2377  49D0  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  2378  49D2  51 26             	mov	a,[2+((calc_sth11@rh_lin)^0x0)]
  2379  49D4  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  2380  49D6  51 27             	mov	a,[3+((calc_sth11@rh_lin)^0x0)]
  2381  49D8  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  2382  49DA  71 80             	or	f, 0x80	;select multiple RAM page mode
  2383                          	
  2384  49DC  7C 73BA           	xcall	___fladd
  2385                          	
  2386  49DF  70 CF             	and	f, 0xCF   ;select user reg space
  2387  49E1  62 D0 00          	mov	reg[CUR_PP],0
  2388  49E4  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  2389  49E6  53 18             	mov	[0+((calc_sth11@rh_true)^0x0)],a
  2390  49E8  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  2391  49EA  53 19             	mov	[1+((calc_sth11@rh_true)^0x0)],a
  2392  49EC  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  2393  49EE  53 1A             	mov	[2+((calc_sth11@rh_true)^0x0)],a
  2394  49F0  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  2395  49F2  53 1B             	mov	[3+((calc_sth11@rh_true)^0x0)],a
  2396                          	line	237
  2397                          ;shtxx.c: 237: if(rh_true>100)rh_true=100;
  2398  49F4  50 42             	mov	a,<(0x42c80000>>24)
  2399  49F6  70 CF             	and	f, 0xCF   ;select user reg space
  2400  49F8  62 D0 00          	mov	reg[CUR_PP],0
  2401  49FB  53 40             	mov	[0+((?___flge)^0x0)],a
  2402  49FD  50 C8             	mov	a,<(0x42c80000>>16)
  2403  49FF  53 41             	mov	[1+((?___flge)^0x0)],a
  2404  4A01  50 00             	mov	a,<(0x42c80000>>8)
  2405  4A03  53 42             	mov	[2+((?___flge)^0x0)],a
  2406  4A05  50 00             	mov	a,<(0x42c80000)
  2407  4A07  53 43             	mov	[3+((?___flge)^0x0)],a
  2408  4A09  51 18             	mov	a,[0+((calc_sth11@rh_true)^0x0)]
  2409  4A0B  53 44             	mov	[0+((0+?___flge+04h)^0x0)],a
  2410  4A0D  51 19             	mov	a,[1+((calc_sth11@rh_true)^0x0)]
  2411  4A0F  53 45             	mov	[1+((0+?___flge+04h)^0x0)],a
  2412  4A11  51 1A             	mov	a,[2+((calc_sth11@rh_true)^0x0)]
  2413  4A13  53 46             	mov	[2+((0+?___flge+04h)^0x0)],a
  2414  4A15  51 1B             	mov	a,[3+((calc_sth11@rh_true)^0x0)]
  2415  4A17  53 47             	mov	[3+((0+?___flge+04h)^0x0)],a
  2416  4A19  71 80             	or	f, 0x80	;select multiple RAM page mode
  2417                          	
  2418  4A1B  7C 70F4           	xcall	___flge
  2419                          	
  2420  4A1E  C016              	jc	l93
  2421  4A20  50 42             	mov	a,<(0x42c80000>>24)
  2422  4A22  70 CF             	and	f, 0xCF   ;select user reg space
  2423  4A24  62 D0 00          	mov	reg[CUR_PP],0
  2424  4A27  53 18             	mov	[0+((calc_sth11@rh_true)^0x0)],a
  2425  4A29  50 C8             	mov	a,<(0x42c80000>>16)
  2426  4A2B  53 19             	mov	[1+((calc_sth11@rh_true)^0x0)],a
  2427  4A2D  50 00             	mov	a,<(0x42c80000>>8)
  2428  4A2F  53 1A             	mov	[2+((calc_sth11@rh_true)^0x0)],a
  2429  4A31  50 00             	mov	a,<(0x42c80000)
  2430  4A33  53 1B             	mov	[3+((calc_sth11@rh_true)^0x0)],a
  2431                          ;			
  2432  4A35                    l93:	
  2433                          	line	238
  2434                          ;shtxx.c: 238: if(rh_true<0.1)rh_true=0.1;
  2435  4A35  70 CF             	and	f, 0xCF   ;select user reg space
  2436  4A37  62 D0 00          	mov	reg[CUR_PP],0
  2437  4A3A  51 18             	mov	a,[0+((calc_sth11@rh_true)^0x0)]
  2438  4A3C  53 40             	mov	[0+((?___flge)^0x0)],a
  2439  4A3E  51 19             	mov	a,[1+((calc_sth11@rh_true)^0x0)]
  2440  4A40  53 41             	mov	[1+((?___flge)^0x0)],a
  2441  4A42  51 1A             	mov	a,[2+((calc_sth11@rh_true)^0x0)]
  2442  4A44  53 42             	mov	[2+((?___flge)^0x0)],a
  2443  4A46  51 1B             	mov	a,[3+((calc_sth11@rh_true)^0x0)]
  2444  4A48  53 43             	mov	[3+((?___flge)^0x0)],a
  2445  4A4A  50 3D             	mov	a,<(0x3dcccccd>>24)
  2446  4A4C  53 44             	mov	[0+((0+?___flge+04h)^0x0)],a
  2447  4A4E  50 CC             	mov	a,<(0x3dcccccd>>16)
  2448  4A50  53 45             	mov	[1+((0+?___flge+04h)^0x0)],a
  2449  4A52  50 CC             	mov	a,<(0x3dcccccd>>8)
  2450  4A54  53 46             	mov	[2+((0+?___flge+04h)^0x0)],a
  2451  4A56  50 CD             	mov	a,<(0x3dcccccd)
  2452  4A58  53 47             	mov	[3+((0+?___flge+04h)^0x0)],a
  2453  4A5A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2454                          	
  2455  4A5C  7C 70F4           	xcall	___flge
  2456                          	
  2457  4A5F  C016              	jc	l94
  2458  4A61  50 3D             	mov	a,<(0x3dcccccd>>24)
  2459  4A63  70 CF             	and	f, 0xCF   ;select user reg space
  2460  4A65  62 D0 00          	mov	reg[CUR_PP],0
  2461  4A68  53 18             	mov	[0+((calc_sth11@rh_true)^0x0)],a
  2462  4A6A  50 CC             	mov	a,<(0x3dcccccd>>16)
  2463  4A6C  53 19             	mov	[1+((calc_sth11@rh_true)^0x0)],a
  2464  4A6E  50 CC             	mov	a,<(0x3dcccccd>>8)
  2465  4A70  53 1A             	mov	[2+((calc_sth11@rh_true)^0x0)],a
  2466  4A72  50 CD             	mov	a,<(0x3dcccccd)
  2467  4A74  53 1B             	mov	[3+((calc_sth11@rh_true)^0x0)],a
  2468                          ;			
  2469  4A76                    l94:	
  2470                          	line	240
  2471                          ;shtxx.c: 240: *p_temperature=t_C;
  2472  4A76  70 CF             	and	f, 0xCF   ;select user reg space
  2473  4A78  62 D0 00          	mov	reg[CUR_PP],0
  2474  4A7B  51 16             	mov	a,[0+((calc_sth11@p_temperature)^0x0)]
  2475  4A7D  58 17             	mov	x,[1+((calc_sth11@p_temperature)^0x0)]
  2476  4A7F  60 D3             	mov	reg[0xd3],a
  2477  4A81  51 20             	mov	a,[0+((calc_sth11@t_C)^0x0)]
  2478  4A83  54 00             	mov	[0+x],a
  2479  4A85  51 21             	mov	a,[1+((calc_sth11@t_C)^0x0)]
  2480  4A87  54 01             	mov	[1+x],a
  2481  4A89  51 22             	mov	a,[2+((calc_sth11@t_C)^0x0)]
  2482  4A8B  54 02             	mov	[2+x],a
  2483  4A8D  51 23             	mov	a,[3+((calc_sth11@t_C)^0x0)]
  2484  4A8F  54 03             	mov	[3+x],a
  2485                          	line	241
  2486                          ;shtxx.c: 241: *p_humidity=rh_true;
  2487  4A91  51 14             	mov	a,[0+((calc_sth11@p_humidity)^0x0)]
  2488  4A93  58 15             	mov	x,[1+((calc_sth11@p_humidity)^0x0)]
  2489  4A95  60 D3             	mov	reg[0xd3],a
  2490  4A97  51 18             	mov	a,[0+((calc_sth11@rh_true)^0x0)]
  2491  4A99  54 00             	mov	[0+x],a
  2492  4A9B  51 19             	mov	a,[1+((calc_sth11@rh_true)^0x0)]
  2493  4A9D  54 01             	mov	[1+x],a
  2494  4A9F  51 1A             	mov	a,[2+((calc_sth11@rh_true)^0x0)]
  2495  4AA1  54 02             	mov	[2+x],a
  2496  4AA3  51 1B             	mov	a,[3+((calc_sth11@rh_true)^0x0)]
  2497  4AA5  54 03             	mov	[3+x],a
  2498                          	line	242
  2499                          ;shtxx.c: 242: }
  2500  4AA7                    l92:
  2501                          ;			
  2502  4AA7  70 CF             	and	f, 0xCF   ;select user reg space
  2503                          	
  2504  4AA9  7F                	ret
  2505                          GLOBAL __end_of_calc_sth11
  2506  4AAA                    	__end_of_calc_sth11:
  2507                          	FNSIZE	_calc_sth11,33,4
  2508                          ; =============== function _calc_sth11 ends ============
  2509                          
  2510                          	signat	_calc_sth11,8312
  2511                          	global	___lwtofl
  2512                          	global	??___lwtofl
  2513                          	global	?___lwtofl
  2514                          	psect	text
  2515                          
  2516                          ; *************** function ___lwtofl *****************
  2517                          ; Defined at:
  2518                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwtofl.c"
  2519                          ; Parameters:
  2520                          ;		c           	offs:   0	type: unsigned int 
  2521                          ; Auto variables:
  2522                          ;		f1          	       	type: unsigned int 
  2523                          ; Return value:
  2524                          ;		type: unsigned int 
  2525                          ;		size: 4
  2526                          ; Registers used:
  2527                          ;		a, x, CUR_PP
  2528                          ; Tracked objects:
  2529                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2530                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2531                          ;		Unchanged: 
  2532                          ; Data sizes:
  2533                          ;		Autos:    4
  2534                          ;		Params:   4
  2535                          ;		Temp:     4
  2536                          ;		Total:   12
  2537                          ; This function calls:
  2538                          ;		___flpack
  2539                          ; This function is called by:
  2540                          ;		_s_do_measure
  2541                          ; This function uses a non-reentrant model
  2542                          ; 
  2543                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwtofl.c"
  2544                          	line	16
  2545  0079                    	__size_of___lwtofl	equ	__end_of___lwtofl-___lwtofl
  2546                          ;lwtofl.c: 14: double
  2547                          ;lwtofl.c: 15: __lwtofl(unsigned int c)
  2548                          ;lwtofl.c: 16: {
  2549                          ;			
  2550  4AAA                    ___lwtofl:	
  2551                          	opt	disable
  2552                          	line	19
  2553                          ;lwtofl.c: 17: double f1;
  2554                          ;lwtofl.c: 19: if(c == 0)
  2555  4AAA  70 CF             	and	f, 0xCF   ;select user reg space
  2556  4AAC  62 D0 00          	mov	reg[CUR_PP],0
  2557  4AAF  51 14             	mov	a,[0+((___lwtofl@c)^0x0)]
  2558  4AB1  39 00             	cmp	a,>(0)
  2559  4AB3  B005              	jnz	u2403
  2560  4AB5  51 15             	mov	a,[1+((___lwtofl@c)^0x0)]
  2561  4AB7  39 00             	cmp	a,<(0)
  2562  4AB9                    u2403:
  2563  4AB9  B019              	jnz	l504
  2564                          	line	20
  2565  4ABB  50 00             	mov	a,<(0x0>>24)
  2566  4ABD  70 CF             	and	f, 0xCF   ;select user reg space
  2567  4ABF  62 D0 00          	mov	reg[CUR_PP],0
  2568  4AC2  53 14             	mov	[0+((?___lwtofl)^0x0)],a
  2569  4AC4  50 00             	mov	a,<(0x0>>16)
  2570  4AC6  53 15             	mov	[1+((?___lwtofl)^0x0)],a
  2571  4AC8  50 00             	mov	a,<(0x0>>8)
  2572  4ACA  53 16             	mov	[2+((?___lwtofl)^0x0)],a
  2573  4ACC  50 00             	mov	a,<(0x0)
  2574  4ACE  53 17             	mov	[3+((?___lwtofl)^0x0)],a
  2575  4AD0  7D 4B20           	xjmp	l503
  2576                          ;			
  2577  4AD3                    l504:	
  2578                          	line	21
  2579                          ;lwtofl.c: 21: (*(unsigned long *)&f1) = c;
  2580  4AD3  70 CF             	and	f, 0xCF   ;select user reg space
  2581  4AD5  62 D0 00          	mov	reg[CUR_PP],0
  2582  4AD8  51 15             	mov	a,[1+((___lwtofl@c)^0x0)]
  2583  4ADA  53 1F             	mov	[(??___lwtofl^0x0)+4+0+3],a
  2584  4ADC  51 14             	mov	a,[0+((___lwtofl@c)^0x0)]
  2585  4ADE  53 1E             	mov	[(??___lwtofl^0x0)+4+0+2],a
  2586  4AE0  55 1D  00         	mov	[(??___lwtofl^0x0)+4+0+1],0
  2587  4AE3  55 1C  00         	mov	[(??___lwtofl^0x0)+4+0],0
  2588  4AE6  5F 18  1C         	mov	[((___lwtofl@f1)^0x0)],[(??___lwtofl^0x0)+4+0]
  2589  4AE9  5F 19  1D         	mov	[((___lwtofl@f1+1)^0x0)],[(??___lwtofl^0x0)+4+1]
  2590  4AEC  5F 1A  1E         	mov	[((___lwtofl@f1+2)^0x0)],[(??___lwtofl^0x0)+4+2]
  2591  4AEF  5F 1B  1F         	mov	[((___lwtofl@f1+3)^0x0)],[(??___lwtofl^0x0)+4+3]
  2592                          	line	22
  2593                          ;lwtofl.c: 22: __flpack(&(*(unsigned long *)&f1), 127+23);
  2594  4AF2  50 18             	mov	a,<((___lwtofl@f1|8000h))
  2595  4AF4  70 CF             	and	f, 0xCF   ;select user reg space
  2596  4AF6  62 D0 00          	mov	reg[CUR_PP],0
  2597  4AF9  53 71             	mov	[1+((?___flpack)^0x0)],a
  2598  4AFB  50 80             	mov	a,>((___lwtofl@f1|8000h))
  2599  4AFD  53 70             	mov	[0+((?___flpack)^0x0)],a
  2600  4AFF  50 96             	mov	a,<((096h))
  2601  4B01  53 72             	mov	[0+((0+?___flpack+02h)^0x0)],a
  2602  4B03  71 80             	or	f, 0x80	;select multiple RAM page mode
  2603                          	
  2604  4B05  7C 78CD           	xcall	___flpack
  2605                          	
  2606                          	line	23
  2607  4B08  70 CF             	and	f, 0xCF   ;select user reg space
  2608  4B0A  62 D0 00          	mov	reg[CUR_PP],0
  2609  4B0D  51 18             	mov	a,[0+((___lwtofl@f1)^0x0)]
  2610  4B0F  53 14             	mov	[0+((?___lwtofl)^0x0)],a
  2611  4B11  51 19             	mov	a,[1+((___lwtofl@f1)^0x0)]
  2612  4B13  53 15             	mov	[1+((?___lwtofl)^0x0)],a
  2613  4B15  51 1A             	mov	a,[2+((___lwtofl@f1)^0x0)]
  2614  4B17  53 16             	mov	[2+((?___lwtofl)^0x0)],a
  2615  4B19  51 1B             	mov	a,[3+((___lwtofl@f1)^0x0)]
  2616  4B1B  53 17             	mov	[3+((?___lwtofl)^0x0)],a
  2617  4B1D  7D 4B20           	xjmp	l503
  2618                          	line	24
  2619                          ;lwtofl.c: 24: }
  2620  4B20                    l503:
  2621                          ;			
  2622  4B20  70 CF             	and	f, 0xCF   ;select user reg space
  2623                          	
  2624  4B22  7F                	ret
  2625                          GLOBAL __end_of___lwtofl
  2626  4B23                    	__end_of___lwtofl:
  2627                          	FNSIZE	___lwtofl,8,4
  2628                          ; =============== function ___lwtofl ends ============
  2629                          
  2630                          	signat	___lwtofl,4220
  2631                          	global	_OneWire_fFindFirst
  2632                          	global	_oo_read_device
  2633                          	global	??_oo_read_device
  2634                          	global	?_oo_read_device
  2635                          	psect	text
  2636                          
  2637                          ; *************** function _oo_read_device *****************
  2638                          ; Defined at:
  2639                          ;		line 233 in file "./oo.c"
  2640                          ; Parameters:
  2641                          ;		None
  2642                          ; Auto variables:
  2643                          ;		data        	       	type: struct s_oo_data
  2644                          ;		crc         	       	type: unsigned char 
  2645                          ;		loper       	       	type: unsigned char 
  2646                          ; Return value:
  2647                          ;		type: struct s_oo_data
  2648                          ;		size: 13
  2649                          ; Registers used:
  2650                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2651                          ; Tracked objects:
  2652                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2653                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2654                          ;		Unchanged: 
  2655                          ; Data sizes:
  2656                          ;		Autos:   14
  2657                          ;		Params:  13
  2658                          ;		Temp:     3
  2659                          ;		Total:   30
  2660                          ; This function calls:
  2661                          ;		_OneWire_GetROM
  2662                          ;		_oo_busreset
  2663                          ;		_OneWire_SetROM
  2664                          ;		_OneWire_fVerify
  2665                          ;		_oo_read_scratchpad
  2666                          ; This function is called by:
  2667                          ;		_oo_report
  2668                          ; This function uses a non-reentrant model
  2669                          ; 
  2670                          	file	"./oo.c"
  2671                          	line	233
  2672  00DA                    	__size_of_oo_read_device	equ	__end_of_oo_read_device-_oo_read_device
  2673                          ;oo.c: 233: oo_tdata oo_read_device(){
  2674                          ;			
  2675  4B23                    _oo_read_device:	
  2676                          	opt	disable
  2677                          	line	240
  2678                          ;oo.c: 235: char loper;
  2679                          ;oo.c: 236: char crc;
  2680                          ;oo.c: 238: oo_tdata data;
  2681                          ;oo.c: 240: data.valid = 0;
  2682  4B23  50 00             	mov	a,<((0))
  2683  4B25  70 CF             	and	f, 0xCF   ;select user reg space
  2684  4B27  62 D0 00          	mov	reg[CUR_PP],0
  2685  4B2A  53 2D             	mov	[0+((0+oo_read_device@data+0Ch)^0x0)],a
  2686                          	line	243
  2687                          ;oo.c: 243: OneWire_GetROM(data.id);
  2688  4B2C  57 21             	mov	x,<((oo_read_device@data|8000h))
  2689  4B2E  50 80             	mov	a,>((oo_read_device@data|8000h))
  2690  4B30  71 80             	or	f, 0x80	;select multiple RAM page mode
  2691  4B32  70 CF             	and	f, 0xCF   ;select user reg space
  2692                          	
  2693  4B34  7C 3E71           	xcall	_OneWire_GetROM
  2694                          	
  2695  4B37  38 00             	add	sp,0
  2696                          	line	245
  2697                          ;oo.c: 245: oo_busreset();
  2698  4B39  71 80             	or	f, 0x80	;select multiple RAM page mode
  2699                          	
  2700  4B3B  7C 5A59           	xcall	_oo_busreset
  2701                          	
  2702                          	line	248
  2703                          ;oo.c: 248: OneWire_SetROM(data.id);
  2704  4B3E  57 21             	mov	x,<((oo_read_device@data|8000h))
  2705  4B40  50 80             	mov	a,>((oo_read_device@data|8000h))
  2706  4B42  71 80             	or	f, 0x80	;select multiple RAM page mode
  2707  4B44  70 CF             	and	f, 0xCF   ;select user reg space
  2708                          	
  2709  4B46  7C 3E9B           	xcall	_OneWire_SetROM
  2710                          	
  2711  4B49  38 00             	add	sp,0
  2712                          	line	249
  2713                          ;oo.c: 249: OneWire_fVerify();
  2714  4B4B  71 80             	or	f, 0x80	;select multiple RAM page mode
  2715  4B4D  70 CF             	and	f, 0xCF   ;select user reg space
  2716                          	
  2717  4B4F  7C 3FFC           	xcall	_OneWire_fVerify
  2718                          	
  2719  4B52  38 00             	add	sp,0
  2720                          	line	252
  2721                          ;oo.c: 252: if (crc = oo_read_scratchpad()){
  2722  4B54  71 80             	or	f, 0x80	;select multiple RAM page mode
  2723                          	
  2724  4B56  7C 5A68           	xcall	_oo_read_scratchpad
  2725                          	
  2726  4B59  70 CF             	and	f, 0xCF   ;select user reg space
  2727  4B5B  62 D0 00          	mov	reg[CUR_PP],0
  2728  4B5E  53 2E             	mov	[0+((oo_read_device@crc)^0x0)],a
  2729  4B60  39 00             	cmp	a,(0)
  2730  4B62  A020              	jz	l43
  2731                          	line	253
  2732  4B64  70 CF             	and	f, 0xCF   ;select user reg space
  2733  4B66  62 D0 00          	mov	reg[CUR_PP],0
  2734  4B69  55 2F  21         	mov	[(??_oo_read_device^0x0)+14+0],<(oo_read_device@data)
  2735  4B6C  62 D4 00          	mov	reg[MVR_PP],0
  2736                          	
  2737  4B6F  55 30  14         	mov	[(??_oo_read_device^0x0)+15+0],<(?_oo_read_device)
  2738  4B72  62 D5 00          	mov	reg[MVW_PP],0
  2739                          	
  2740  4B75  55 31  0D         	mov	[(??_oo_read_device^0x0)+16+0],13
  2741  4B78                    u2513:
  2742  4B78  3E 2F             	mvi	a,[[(??_oo_read_device^0x0)+14+0]++]
  2743  4B7A  3F 30             	mvi	[[(??_oo_read_device^0x0)+15+0]++],a
  2744  4B7C  7A 31             	dec	[(??_oo_read_device^0x0)+16+0]
  2745  4B7E  BFF9              	jnz	u2513
  2746  4B80  7D 4BFA           	xjmp	l42
  2747                          	line	254
  2748                          ;			
  2749  4B83                    l43:	
  2750                          	line	257
  2751                          ;oo.c: 254: }
  2752                          ;oo.c: 257: data.t_msb = oo_scratchpad[1];
  2753  4B83  50 01             	mov	a,<((01h))
  2754  4B85  01 00             	add	a,<(8000h+_oo_scratchpad)
  2755  4B87  5C                	mov	x,a
  2756  4B88  50 82             	mov	a,>(8000h+_oo_scratchpad)
  2757  4B8A  70 CF             	and	f, 0xCF   ;select user reg space
  2758  4B8C  60 D3             	mov	reg[0xd3],a
  2759  4B8E  52 00             	mov	a,[x+0]
  2760  4B90  62 D0 00          	mov	reg[CUR_PP],0
  2761  4B93  53 29             	mov	[0+((0+oo_read_device@data+08h)^0x0)],a
  2762                          	line	258
  2763                          ;oo.c: 258: data.t_lsb = oo_scratchpad[0];
  2764  4B95  70 CF             	and	f, 0xCF   ;select user reg space
  2765  4B97  71 80             	or	f, 0x80	;select multiple RAM page mode
  2766  4B99  62 D0 02          	mov	reg[CUR_PP],2
  2767  4B9C  51 00             	mov	a,[0+((_oo_scratchpad)^0x200)]
  2768  4B9E  62 D0 00          	mov	reg[CUR_PP],0
  2769  4BA1  53 2A             	mov	[0+((0+oo_read_device@data+09h)^0x0)],a
  2770                          	line	259
  2771                          ;oo.c: 259: data.remain = oo_scratchpad[6];
  2772  4BA3  50 06             	mov	a,<((06h))
  2773  4BA5  01 00             	add	a,<(8000h+_oo_scratchpad)
  2774  4BA7  5C                	mov	x,a
  2775  4BA8  50 82             	mov	a,>(8000h+_oo_scratchpad)
  2776  4BAA  70 CF             	and	f, 0xCF   ;select user reg space
  2777  4BAC  60 D3             	mov	reg[0xd3],a
  2778  4BAE  52 00             	mov	a,[x+0]
  2779  4BB0  62 D0 00          	mov	reg[CUR_PP],0
  2780  4BB3  53 2B             	mov	[0+((0+oo_read_device@data+0Ah)^0x0)],a
  2781                          	line	260
  2782                          ;oo.c: 260: data.nr_count = oo_scratchpad[7];
  2783  4BB5  50 07             	mov	a,<((07h))
  2784  4BB7  01 00             	add	a,<(8000h+_oo_scratchpad)
  2785  4BB9  5C                	mov	x,a
  2786  4BBA  50 82             	mov	a,>(8000h+_oo_scratchpad)
  2787  4BBC  70 CF             	and	f, 0xCF   ;select user reg space
  2788  4BBE  60 D3             	mov	reg[0xd3],a
  2789  4BC0  52 00             	mov	a,[x+0]
  2790  4BC2  62 D0 00          	mov	reg[CUR_PP],0
  2791  4BC5  53 2C             	mov	[0+((0+oo_read_device@data+0Bh)^0x0)],a
  2792                          	line	261
  2793                          ;oo.c: 261: if (crc == 0x00) { data.valid = 1; }
  2794  4BC7  70 CF             	and	f, 0xCF   ;select user reg space
  2795  4BC9  62 D0 00          	mov	reg[CUR_PP],0
  2796  4BCC  51 2E             	mov	a,[0+((oo_read_device@crc)^0x0)]
  2797  4BCE  39 00             	cmp	a,(0)
  2798  4BD0  B00A              	jnz	l44
  2799  4BD2  50 01             	mov	a,<((01h))
  2800  4BD4  70 CF             	and	f, 0xCF   ;select user reg space
  2801  4BD6  62 D0 00          	mov	reg[CUR_PP],0
  2802  4BD9  53 2D             	mov	[0+((0+oo_read_device@data+0Ch)^0x0)],a
  2803                          ;			
  2804  4BDB                    l44:	
  2805                          	line	263
  2806  4BDB  70 CF             	and	f, 0xCF   ;select user reg space
  2807  4BDD  62 D0 00          	mov	reg[CUR_PP],0
  2808  4BE0  55 2F  21         	mov	[(??_oo_read_device^0x0)+14+0],<(oo_read_device@data)
  2809  4BE3  62 D4 00          	mov	reg[MVR_PP],0
  2810                          	
  2811  4BE6  55 30  14         	mov	[(??_oo_read_device^0x0)+15+0],<(?_oo_read_device)
  2812  4BE9  62 D5 00          	mov	reg[MVW_PP],0
  2813                          	
  2814  4BEC  55 31  0D         	mov	[(??_oo_read_device^0x0)+16+0],13
  2815  4BEF                    u2523:
  2816  4BEF  3E 2F             	mvi	a,[[(??_oo_read_device^0x0)+14+0]++]
  2817  4BF1  3F 30             	mvi	[[(??_oo_read_device^0x0)+15+0]++],a
  2818  4BF3  7A 31             	dec	[(??_oo_read_device^0x0)+16+0]
  2819  4BF5  BFF9              	jnz	u2523
  2820  4BF7  7D 4BFA           	xjmp	l42
  2821                          	line	265
  2822                          ;oo.c: 265: }
  2823  4BFA                    l42:
  2824                          ;			
  2825  4BFA  70 CF             	and	f, 0xCF   ;select user reg space
  2826                          	
  2827  4BFC  7F                	ret
  2828                          GLOBAL __end_of_oo_read_device
  2829  4BFD                    	__end_of_oo_read_device:
  2830                          	FNSIZE	_oo_read_device,17,13
  2831                          ; =============== function _oo_read_device ends ============
  2832                          
  2833                          	signat	_oo_read_device,95
  2834                          	global	_oo_print_data
  2835                          	global	??_oo_print_data
  2836                          	global	?_oo_print_data
  2837                          	psect	text
  2838                          
  2839                          ; *************** function _oo_print_data *****************
  2840                          ; Defined at:
  2841                          ;		line 270 in file "./oo.c"
  2842                          ; Parameters:
  2843                          ;		data        	offs:   0	type: struct s_oo_data
  2844                          ; Auto variables:
  2845                          ;		cntr        	       	type: unsigned char 
  2846                          ; Return value:
  2847                          ;		type: void 
  2848                          ;		size: 0
  2849                          ; Registers used:
  2850                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2851                          ; Tracked objects:
  2852                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2853                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2854                          ;		Unchanged: 
  2855                          ; Data sizes:
  2856                          ;		Autos:    1
  2857                          ;		Params:  13
  2858                          ;		Temp:     0
  2859                          ;		Total:   14
  2860                          ; This function calls:
  2861                          ;		_LTRX_CPutString
  2862                          ;		_LTRX_PutSHexByte
  2863                          ;		_LTRX_PutChar
  2864                          ;		_LTRX_PutCRLF
  2865                          ; This function is called by:
  2866                          ;		_oo_report
  2867                          ; This function uses a non-reentrant model
  2868                          ; 
  2869                          	file	"./oo.c"
  2870                          	line	270
  2871  009F                    	__size_of_oo_print_data	equ	__end_of_oo_print_data-_oo_print_data
  2872                          ;oo.c: 270: void oo_print_data(oo_tdata data){
  2873                          ;			
  2874  4BFD                    _oo_print_data:	
  2875                          	opt	disable
  2876                          	line	274
  2877                          ;oo.c: 272: char cntr;
  2878                          ;oo.c: 274: LTRX_CPutString("OneWire ");
  2879  4BFD  57 F5             	mov	x,<(STR_8)
  2880  4BFF  50 7E             	mov	a,>(STR_8)
  2881  4C01  71 80             	or	f, 0x80	;select multiple RAM page mode
  2882  4C03  70 CF             	and	f, 0xCF   ;select user reg space
  2883                          	
  2884  4C05  7C 3CAC           	xcall	_LTRX_CPutString
  2885                          	
  2886  4C08  38 00             	add	sp,0
  2887                          	line	277
  2888                          ;oo.c: 277: for (cntr=0; cntr<8; cntr++){
  2889  4C0A  50 00             	mov	a,<((0))
  2890  4C0C  70 CF             	and	f, 0xCF   ;select user reg space
  2891  4C0E  62 D0 00          	mov	reg[CUR_PP],0
  2892  4C11  53 21             	mov	[0+((oo_print_data@cntr)^0x0)],a
  2893  4C13  70 CF             	and	f, 0xCF   ;select user reg space
  2894  4C15  62 D0 00          	mov	reg[CUR_PP],0
  2895  4C18  51 21             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  2896  4C1A  39 08             	cmp	a,<((08h))
  2897  4C1C  C004              	jc	l46
  2898  4C1E  7D 4C4A           	xjmp	l47
  2899                          ;			
  2900  4C21                    l46:	
  2901                          	line	278
  2902                          ;oo.c: 278: LTRX_PutSHexByte(*(data.id+cntr));
  2903  4C21  70 CF             	and	f, 0xCF   ;select user reg space
  2904  4C23  62 D0 00          	mov	reg[CUR_PP],0
  2905  4C26  58 21             	mov	x,[0+((oo_print_data@cntr)^0x0)]
  2906  4C28  62 D3 00          	mov	reg[IDX_PP],0
  2907  4C2B  52 14             	mov	a,[0+(oo_print_data@data)+x]
  2908  4C2D  71 80             	or	f, 0x80	;select multiple RAM page mode
  2909                          	
  2910  4C2F  7C 3BF1           	xcall	_LTRX_PutSHexByte
  2911                          	
  2912  4C32  38 00             	add	sp,0
  2913                          	line	277
  2914  4C34  70 CF             	and	f, 0xCF   ;select user reg space
  2915  4C36  62 D0 00          	mov	reg[CUR_PP],0
  2916  4C39  51 21             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  2917  4C3B  01 01             	add	a,<((01h))
  2918  4C3D  53 21             	mov	[0+((oo_print_data@cntr)^0x0)],a
  2919  4C3F  70 CF             	and	f, 0xCF   ;select user reg space
  2920  4C41  62 D0 00          	mov	reg[CUR_PP],0
  2921  4C44  51 21             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  2922  4C46  39 08             	cmp	a,<((08h))
  2923  4C48  CFD8              	jc	l46
  2924                          ;			
  2925  4C4A                    l47:	
  2926                          	line	281
  2927                          ;oo.c: 279: }
  2928                          ;oo.c: 281: LTRX_CPutString(" - ");
  2929  4C4A  57 56             	mov	x,<(STR_9)
  2930  4C4C  50 7F             	mov	a,>(STR_9)
  2931  4C4E  71 80             	or	f, 0x80	;select multiple RAM page mode
  2932  4C50  70 CF             	and	f, 0xCF   ;select user reg space
  2933                          	
  2934  4C52  7C 3CAC           	xcall	_LTRX_CPutString
  2935                          	
  2936  4C55  38 00             	add	sp,0
  2937                          	line	284
  2938                          ;oo.c: 284: LTRX_PutSHexByte(data.t_msb);
  2939  4C57  70 CF             	and	f, 0xCF   ;select user reg space
  2940  4C59  62 D0 00          	mov	reg[CUR_PP],0
  2941  4C5C  51 1C             	mov	a,[0+((0+oo_print_data@data+08h)^0x0)]
  2942  4C5E  71 80             	or	f, 0x80	;select multiple RAM page mode
  2943                          	
  2944  4C60  7C 3BF1           	xcall	_LTRX_PutSHexByte
  2945                          	
  2946  4C63  38 00             	add	sp,0
  2947                          	line	285
  2948                          ;oo.c: 285: LTRX_PutSHexByte(data.t_lsb);
  2949  4C65  70 CF             	and	f, 0xCF   ;select user reg space
  2950  4C67  62 D0 00          	mov	reg[CUR_PP],0
  2951  4C6A  51 1D             	mov	a,[0+((0+oo_print_data@data+09h)^0x0)]
  2952  4C6C  71 80             	or	f, 0x80	;select multiple RAM page mode
  2953                          	
  2954  4C6E  7C 3BF1           	xcall	_LTRX_PutSHexByte
  2955                          	
  2956  4C71  38 00             	add	sp,0
  2957                          	line	287
  2958                          ;oo.c: 287: LTRX_CPutString(" - ");
  2959  4C73  57 56             	mov	x,<(STR_10)
  2960  4C75  50 7F             	mov	a,>(STR_10)
  2961  4C77  71 80             	or	f, 0x80	;select multiple RAM page mode
  2962  4C79  70 CF             	and	f, 0xCF   ;select user reg space
  2963                          	
  2964  4C7B  7C 3CAC           	xcall	_LTRX_CPutString
  2965                          	
  2966  4C7E  38 00             	add	sp,0
  2967                          	line	288
  2968                          ;oo.c: 288: LTRX_PutChar(data.valid+0x30);
  2969  4C80  50 30             	mov	a,<((030h))
  2970  4C82  70 CF             	and	f, 0xCF   ;select user reg space
  2971  4C84  62 D0 00          	mov	reg[CUR_PP],0
  2972  4C87  02 20             	add	a,[0+((0+oo_print_data@data+0Ch)^0x0)]
  2973  4C89  71 80             	or	f, 0x80	;select multiple RAM page mode
  2974                          	
  2975  4C8B  7C 3C0B           	xcall	_LTRX_PutChar
  2976                          	
  2977  4C8E  38 00             	add	sp,0
  2978                          	line	290
  2979                          ;oo.c: 290: LTRX_PutCRLF();
  2980  4C90  71 80             	or	f, 0x80	;select multiple RAM page mode
  2981  4C92  70 CF             	and	f, 0xCF   ;select user reg space
  2982                          	
  2983  4C94  7C 3CBE           	xcall	_LTRX_PutCRLF
  2984                          	
  2985  4C97  38 00             	add	sp,0
  2986                          	line	293
  2987                          ;oo.c: 293: }
  2988  4C99                    l45:
  2989                          ;			
  2990  4C99  70 CF             	and	f, 0xCF   ;select user reg space
  2991                          	
  2992  4C9B  7F                	ret
  2993                          GLOBAL __end_of_oo_print_data
  2994  4C9C                    	__end_of_oo_print_data:
  2995                          	FNSIZE	_oo_print_data,1,13
  2996                          ; =============== function _oo_print_data ends ============
  2997                          
  2998                          	signat	_oo_print_data,4216
  2999                          	global	_oo_wait_for_completion
  3000                          	global	??_oo_wait_for_completion
  3001                          	global	?_oo_wait_for_completion
  3002                          	psect	text
  3003                          
  3004                          ; *************** function _oo_wait_for_completion *****************
  3005                          ; Defined at:
  3006                          ;		line 188 in file "./oo.c"
  3007                          ; Parameters:
  3008                          ;		None
  3009                          ; Auto variables:
  3010                          ;		counter     	       	type: unsigned char 
  3011                          ; Return value:
  3012                          ;		type: unsigned char 
  3013                          ;		size: 1
  3014                          ; Registers used:
  3015                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  3016                          ; Tracked objects:
  3017                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3018                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3019                          ;		Unchanged: 
  3020                          ; Data sizes:
  3021                          ;		Autos:    1
  3022                          ;		Params:   0
  3023                          ;		Temp:     0
  3024                          ;		Total:    1
  3025                          ; This function calls:
  3026                          ;		_delay_10ms
  3027                          ;		_oo_conversion_busy
  3028                          ; This function is called by:
  3029                          ;		_oo_report
  3030                          ; This function uses a non-reentrant model
  3031                          ; 
  3032                          	file	"./oo.c"
  3033                          	line	188
  3034  0038                    	__size_of_oo_wait_for_completion	equ	__end_of_oo_wait_for_completion-_oo_wait_for_completion
  3035                          ;oo.c: 188: char oo_wait_for_completion(){
  3036                          ;			
  3037  4C9C                    _oo_wait_for_completion:	
  3038                          	opt	disable
  3039                          	line	190
  3040                          ;oo.c: 190: char counter = 0;
  3041  4C9C  50 00             	mov	a,<((0))
  3042  4C9E  70 CF             	and	f, 0xCF   ;select user reg space
  3043  4CA0  62 D0 00          	mov	reg[CUR_PP],0
  3044  4CA3  53 14             	mov	[0+((oo_wait_for_completion@counter)^0x0)],a
  3045                          	line	192
  3046                          ;oo.c: 192: while (oo_conversion_busy()){
  3047  4CA5  7D 4CC3           	xjmp	l35
  3048                          ;			
  3049  4CA8                    l36:	
  3050                          	line	195
  3051                          ;oo.c: 195: delay_10ms();
  3052  4CA8  71 80             	or	f, 0x80	;select multiple RAM page mode
  3053                          	
  3054  4CAA  7C 59A7           	xcall	_delay_10ms
  3055                          	
  3056                          	line	196
  3057                          ;oo.c: 196: counter++;
  3058  4CAD  70 CF             	and	f, 0xCF   ;select user reg space
  3059  4CAF  62 D0 00          	mov	reg[CUR_PP],0
  3060  4CB2  51 14             	mov	a,[0+((oo_wait_for_completion@counter)^0x0)]
  3061  4CB4  01 01             	add	a,<((01h))
  3062  4CB6  53 14             	mov	[0+((oo_wait_for_completion@counter)^0x0)],a
  3063                          	line	197
  3064                          ;oo.c: 197: if (counter == 100){
  3065  4CB8  51 14             	mov	a,[0+((oo_wait_for_completion@counter)^0x0)]
  3066  4CBA  39 64             	cmp	a,(064h)
  3067  4CBC  B006              	jnz	l35
  3068                          	line	198
  3069                          ;oo.c: 198: return 0;
  3070  4CBE  50 00             	mov	a,<((0))
  3071  4CC0  7D 4CD1           	xjmp	l34
  3072                          	line	200
  3073                          ;			
  3074  4CC3                    l35:	
  3075                          	line	192
  3076  4CC3  71 80             	or	f, 0x80	;select multiple RAM page mode
  3077                          	
  3078  4CC5  7C 59E4           	xcall	_oo_conversion_busy
  3079                          	
  3080  4CC8  39 00             	cmp	a,(0)
  3081  4CCA  BFDD              	jnz	l36
  3082                          ;			
  3083  4CCC                    l37:	
  3084                          	line	202
  3085                          ;oo.c: 199: }
  3086                          ;oo.c: 200: }
  3087                          ;oo.c: 202: return 1;
  3088  4CCC  50 01             	mov	a,<((01h))
  3089  4CCE  7D 4CD1           	xjmp	l34
  3090                          	line	203
  3091                          ;oo.c: 203: }
  3092  4CD1                    l34:
  3093                          ;			
  3094  4CD1  70 CF             	and	f, 0xCF   ;select user reg space
  3095                          	
  3096  4CD3  7F                	ret
  3097                          GLOBAL __end_of_oo_wait_for_completion
  3098  4CD4                    	__end_of_oo_wait_for_completion:
  3099                          	FNSIZE	_oo_wait_for_completion,1,0
  3100                          ; =============== function _oo_wait_for_completion ends ============
  3101                          
  3102                          	signat	_oo_wait_for_completion,89
  3103                          	global	_s_connectionreset
  3104                          	global	??_s_connectionreset
  3105                          	global	?_s_connectionreset
  3106                          	psect	text
  3107                          
  3108                          ; *************** function _s_connectionreset *****************
  3109                          ; Defined at:
  3110                          ;		line 131 in file "./shtxx.c"
  3111                          ; Parameters:
  3112                          ;		None
  3113                          ; Auto variables:
  3114                          ;		i           	       	type: unsigned char 
  3115                          ; Return value:
  3116                          ;		type: void 
  3117                          ;		size: 0
  3118                          ; Registers used:
  3119                          ;		a, CUR_PP
  3120                          ; Tracked objects:
  3121                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3122                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3123                          ;		Unchanged: 
  3124                          ; Data sizes:
  3125                          ;		Autos:    1
  3126                          ;		Params:   0
  3127                          ;		Temp:     0
  3128                          ;		Total:    1
  3129                          ; This function calls:
  3130                          ;		_delay_1us
  3131                          ;		_s_transstart
  3132                          ; This function is called by:
  3133                          ;		_s_do_measure
  3134                          ; This function uses a non-reentrant model
  3135                          ; 
  3136                          	file	"./shtxx.c"
  3137                          	line	131
  3138  0069                    	__size_of_s_connectionreset	equ	__end_of_s_connectionreset-_s_connectionreset
  3139                          ;shtxx.c: 124: void s_connectionreset(void)
  3140                          ;shtxx.c: 131: {
  3141                          ;			
  3142  4CD4                    _s_connectionreset:	
  3143                          	opt	disable
  3144                          	line	133
  3145                          ;shtxx.c: 132: unsigned char i;
  3146                          ;shtxx.c: 133: (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  3147  4CD4  70 CF             	and	f, 0xCF   ;select user reg space
  3148  4CD6  5D 10             	mov	a,reg[(16)]
  3149  4CD8  29 01             	or	a,<((01h))
  3150  4CDA  60 10             	mov	reg[(16)],a
  3151                          	line	134
  3152                          ;shtxx.c: 134: delay_1us();
  3153  4CDC  71 80             	or	f, 0x80	;select multiple RAM page mode
  3154                          	
  3155  4CDE  7C 6BAD           	xcall	_delay_1us
  3156                          	
  3157                          	line	135
  3158                          ;shtxx.c: 135: (PRT2DR = (0==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  3159  4CE1  70 CF             	and	f, 0xCF   ;select user reg space
  3160  4CE3  5D 08             	mov	a,reg[(8)]
  3161  4CE5  21 BF             	and	a,<((0BFh))
  3162  4CE7  60 08             	mov	reg[(8)],a
  3163                          	line	136
  3164                          ;shtxx.c: 136: delay_1us();
  3165  4CE9  71 80             	or	f, 0x80	;select multiple RAM page mode
  3166                          	
  3167  4CEB  7C 6BAD           	xcall	_delay_1us
  3168                          	
  3169                          	line	137
  3170                          ;shtxx.c: 137: for(i=0;i<9;i++)
  3171  4CEE  50 00             	mov	a,<((0))
  3172  4CF0  70 CF             	and	f, 0xCF   ;select user reg space
  3173  4CF2  62 D0 00          	mov	reg[CUR_PP],0
  3174  4CF5  53 14             	mov	[0+((s_connectionreset@i)^0x0)],a
  3175  4CF7  70 CF             	and	f, 0xCF   ;select user reg space
  3176  4CF9  62 D0 00          	mov	reg[CUR_PP],0
  3177  4CFC  51 14             	mov	a,[0+((s_connectionreset@i)^0x0)]
  3178  4CFE  39 09             	cmp	a,<((09h))
  3179  4D00  C004              	jc	l75
  3180  4D02  7D 4D35           	xjmp	l76
  3181                          	line	138
  3182                          ;			
  3183  4D05                    l75:	
  3184                          ;shtxx.c: 138: { (PRT2DR = (1==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  3185  4D05  70 CF             	and	f, 0xCF   ;select user reg space
  3186  4D07  5D 08             	mov	a,reg[(8)]
  3187  4D09  29 40             	or	a,<((040h))
  3188  4D0B  60 08             	mov	reg[(8)],a
  3189                          	line	139
  3190                          ;shtxx.c: 139: delay_1us();
  3191  4D0D  71 80             	or	f, 0x80	;select multiple RAM page mode
  3192                          	
  3193  4D0F  7C 6BAD           	xcall	_delay_1us
  3194                          	
  3195                          	line	140
  3196                          ;shtxx.c: 140: (PRT2DR = (0==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  3197  4D12  70 CF             	and	f, 0xCF   ;select user reg space
  3198  4D14  5D 08             	mov	a,reg[(8)]
  3199  4D16  21 BF             	and	a,<((0BFh))
  3200  4D18  60 08             	mov	reg[(8)],a
  3201                          	line	141
  3202                          ;shtxx.c: 141: delay_1us();
  3203  4D1A  71 80             	or	f, 0x80	;select multiple RAM page mode
  3204                          	
  3205  4D1C  7C 6BAD           	xcall	_delay_1us
  3206                          	
  3207                          	line	137
  3208  4D1F  70 CF             	and	f, 0xCF   ;select user reg space
  3209  4D21  62 D0 00          	mov	reg[CUR_PP],0
  3210  4D24  51 14             	mov	a,[0+((s_connectionreset@i)^0x0)]
  3211  4D26  01 01             	add	a,<((01h))
  3212  4D28  53 14             	mov	[0+((s_connectionreset@i)^0x0)],a
  3213  4D2A  70 CF             	and	f, 0xCF   ;select user reg space
  3214  4D2C  62 D0 00          	mov	reg[CUR_PP],0
  3215  4D2F  51 14             	mov	a,[0+((s_connectionreset@i)^0x0)]
  3216  4D31  39 09             	cmp	a,<((09h))
  3217  4D33  CFD1              	jc	l75
  3218                          ;			
  3219  4D35                    l76:	
  3220                          	line	143
  3221                          ;shtxx.c: 142: }
  3222                          ;shtxx.c: 143: s_transstart();
  3223  4D35  71 80             	or	f, 0x80	;select multiple RAM page mode
  3224                          	
  3225  4D37  7C 59FA           	xcall	_s_transstart
  3226                          	
  3227                          	line	144
  3228                          ;shtxx.c: 144: }
  3229  4D3A                    l74:
  3230                          ;			
  3231  4D3A  70 CF             	and	f, 0xCF   ;select user reg space
  3232                          	
  3233  4D3C  7F                	ret
  3234                          GLOBAL __end_of_s_connectionreset
  3235  4D3D                    	__end_of_s_connectionreset:
  3236                          	FNSIZE	_s_connectionreset,1,0
  3237                          ; =============== function _s_connectionreset ends ============
  3238                          
  3239                          	signat	_s_connectionreset,88
  3240                          	global	_OneWire_fFindNext
  3241                          	global	_LTRX_EnableInt
  3242                          	global	_LTRX_Start
  3243                          	global	_LED1_Start
  3244                          	global	_LTRX_CmdReset
  3245                          	global	_OneWire_Start
  3246                          	global	_print_header
  3247                          	global	??_print_header
  3248                          	global	?_print_header
  3249                          	psect	text
  3250                          
  3251                          ; *************** function _print_header *****************
  3252                          ; Defined at:
  3253                          ;		line 21 in file "./main.c"
  3254                          ; Parameters:
  3255                          ;		None
  3256                          ; Auto variables:
  3257                          ;		None
  3258                          ; Return value:
  3259                          ;		type: void 
  3260                          ;		size: 0
  3261                          ; Registers used:
  3262                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  3263                          ; Tracked objects:
  3264                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3265                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3266                          ;		Unchanged: 
  3267                          ; Data sizes:
  3268                          ;		Autos:    0
  3269                          ;		Params:   0
  3270                          ;		Temp:     0
  3271                          ;		Total:    0
  3272                          ; This function calls:
  3273                          ;		_LTRX_PutCRLF
  3274                          ;		_LTRX_CPutString
  3275                          ; This function is called by:
  3276                          ;		_print_help
  3277                          ; This function uses a non-reentrant model
  3278                          ; 
  3279                          	file	"./main.c"
  3280                          	line	21
  3281  0048                    	__size_of_print_header	equ	__end_of_print_header-_print_header
  3282                          ;main.c: 21: void print_header(){
  3283                          ;			
  3284  4D3D                    _print_header:	
  3285                          	opt	disable
  3286                          	line	22
  3287                          ;main.c: 22: LTRX_PutCRLF();
  3288  4D3D  71 80             	or	f, 0x80	;select multiple RAM page mode
  3289  4D3F  70 CF             	and	f, 0xCF   ;select user reg space
  3290                          	
  3291  4D41  7C 3CBE           	xcall	_LTRX_PutCRLF
  3292                          	
  3293  4D44  38 00             	add	sp,0
  3294                          	line	23
  3295                          ;main.c: 23: LTRX_CPutString("Sensor gateway v.");
  3296  4D46  57 28             	mov	x,<(STR_1)
  3297  4D48  50 7F             	mov	a,>(STR_1)
  3298  4D4A  71 80             	or	f, 0x80	;select multiple RAM page mode
  3299  4D4C  70 CF             	and	f, 0xCF   ;select user reg space
  3300                          	
  3301  4D4E  7C 3CAC           	xcall	_LTRX_CPutString
  3302                          	
  3303  4D51  38 00             	add	sp,0
  3304                          	line	24
  3305                          ;main.c: 24: LTRX_CPutString("0.99");
  3306  4D53  57 51             	mov	x,<(STR_2)
  3307  4D55  50 7F             	mov	a,>(STR_2)
  3308  4D57  71 80             	or	f, 0x80	;select multiple RAM page mode
  3309  4D59  70 CF             	and	f, 0xCF   ;select user reg space
  3310                          	
  3311  4D5B  7C 3CAC           	xcall	_LTRX_CPutString
  3312                          	
  3313  4D5E  38 00             	add	sp,0
  3314                          	line	25
  3315                          ;main.c: 25: LTRX_PutCRLF();
  3316  4D60  71 80             	or	f, 0x80	;select multiple RAM page mode
  3317  4D62  70 CF             	and	f, 0xCF   ;select user reg space
  3318                          	
  3319  4D64  7C 3CBE           	xcall	_LTRX_PutCRLF
  3320                          	
  3321  4D67  38 00             	add	sp,0
  3322                          	line	26
  3323                          ;main.c: 26: LTRX_CPutString("Lieven Hollevoet, 2009");
  3324  4D69  57 DE             	mov	x,<(STR_3)
  3325  4D6B  50 7E             	mov	a,>(STR_3)
  3326  4D6D  71 80             	or	f, 0x80	;select multiple RAM page mode
  3327  4D6F  70 CF             	and	f, 0xCF   ;select user reg space
  3328                          	
  3329  4D71  7C 3CAC           	xcall	_LTRX_CPutString
  3330                          	
  3331  4D74  38 00             	add	sp,0
  3332                          	line	27
  3333                          ;main.c: 27: LTRX_PutCRLF();
  3334  4D76  71 80             	or	f, 0x80	;select multiple RAM page mode
  3335  4D78  70 CF             	and	f, 0xCF   ;select user reg space
  3336                          	
  3337  4D7A  7C 3CBE           	xcall	_LTRX_PutCRLF
  3338                          	
  3339  4D7D  38 00             	add	sp,0
  3340                          	line	28
  3341                          ;main.c: 28: return;
  3342  4D7F  7D 4D82           	xjmp	l4
  3343                          	line	29
  3344                          ;main.c: 29: }
  3345  4D82                    l4:
  3346                          ;			
  3347  4D82  70 CF             	and	f, 0xCF   ;select user reg space
  3348                          	
  3349  4D84  7F                	ret
  3350                          GLOBAL __end_of_print_header
  3351  4D85                    	__end_of_print_header:
  3352                          	FNSIZE	_print_header,0,0
  3353                          ; =============== function _print_header ends ============
  3354                          
  3355                          	signat	_print_header,88
  3356                          	global	_Ticker_Start
  3357                          	global	_Ticker_EnableInt
  3358                          	global	_s_Start
  3359                          	global	??_s_Start
  3360                          	global	?_s_Start
  3361                          	psect	text
  3362                          
  3363                          ; *************** function _s_Start *****************
  3364                          ; Defined at:
  3365                          ;		line 45 in file "./shtxx.c"
  3366                          ; Parameters:
  3367                          ;		None
  3368                          ; Auto variables:
  3369                          ;		None
  3370                          ; Return value:
  3371                          ;		type: void 
  3372                          ;		size: 0
  3373                          ; Registers used:
  3374                          ;		a
  3375                          ; Tracked objects:
  3376                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3377                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3378                          ;		Unchanged: 
  3379                          ; Data sizes:
  3380                          ;		Autos:    0
  3381                          ;		Params:   0
  3382                          ;		Temp:     0
  3383                          ;		Total:    0
  3384                          ; This function calls:
  3385                          ;		Nothing
  3386                          ; This function is called by:
  3387                          ;		_hardware_init
  3388                          ; This function uses a non-reentrant model
  3389                          ; 
  3390                          	file	"./shtxx.c"
  3391                          	line	45
  3392  000B                    	__size_of_s_Start	equ	__end_of_s_Start-_s_Start
  3393                          ;shtxx.c: 17: enum {TEMP,HUMI};
  3394                          ;shtxx.c: 19: typedef union
  3395                          ;shtxx.c: 20: { unsigned int i;
  3396                          ;shtxx.c: 21: float f;
  3397                          ;shtxx.c: 22: } value;
  3398                          ;shtxx.c: 44: void s_Start()
  3399                          ;shtxx.c: 45: {
  3400                          ;			
  3401  4D85                    _s_Start:	
  3402                          	opt	disable
  3403                          	line	47
  3404                          ;shtxx.c: 47: (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  3405  4D85  70 CF             	and	f, 0xCF   ;select user reg space
  3406  4D87  5D 10             	mov	a,reg[(16)]
  3407  4D89  29 01             	or	a,<((01h))
  3408  4D8B  60 10             	mov	reg[(16)],a
  3409                          	line	49
  3410                          ;shtxx.c: 49: }
  3411  4D8D                    l59:
  3412                          ;			
  3413  4D8D  70 CF             	and	f, 0xCF   ;select user reg space
  3414                          	
  3415  4D8F  7F                	ret
  3416                          GLOBAL __end_of_s_Start
  3417  4D90                    	__end_of_s_Start:
  3418                          	FNSIZE	_s_Start,0,0
  3419                          ; =============== function _s_Start ends ============
  3420                          
  3421                          	signat	_s_Start,88
  3422                          	global	_printf
  3423                          	global	??_printf
  3424                          	global	?_printf
  3425                          	psect	text
  3426                          
  3427                          ; *************** function _printf *****************
  3428                          ; Defined at:
  3429                          ;		line 453 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  3430                          ; Parameters:
  3431                          ;		f           	offs:   0	type: PTR const unsigned char ; Largest target is 43
  3432                          ;		 -> STR_15(43), STR_7(9), STR_6(19), STR_5(21), 
  3433                          ; Auto variables:
  3434                          ;		fval        	       	type: PTR const unsigned char 
  3435                          ;		_val        	       	type: struct .
  3436                          ;		integ       	       	type: struct .
  3437                          ;		ival        	       	type: struct .
  3438                          ;		prec        	       	type: int 
  3439                          ;		exp         	       	type: int 
  3440                          ;		width       	       	type: int 
  3441                          ;		flag        	       	type: unsigned short 
  3442                          ;		ap          	       	type: PTR void [1]
  3443                          ;		c           	       	type: char 
  3444                          ;		d           	       	type: unsigned char 
  3445                          ; Return value:
  3446                          ;		type: int 
  3447                          ;		size: 2
  3448                          ; Registers used:
  3449                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  3450                          ; Tracked objects:
  3451                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3452                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3453                          ;		Unchanged: 
  3454                          ; Data sizes:
  3455                          ;		Autos:   23
  3456                          ;		Params:  14
  3457                          ;		Temp:     7
  3458                          ;		Total:   44
  3459                          ; This function calls:
  3460                          ;		_putch
  3461                          ;		_isdigit
  3462                          ;		___wmul
  3463                          ;		___flge
  3464                          ;		___flneg
  3465                          ;		___awdiv
  3466                          ;		_scale
  3467                          ;		___flmul
  3468                          ;		_fround
  3469                          ;		___fladd
  3470                          ;		___fltol
  3471                          ;		__div_to_l_
  3472                          ;		___lltofl
  3473                          ;		___flsub
  3474                          ;		___lldiv
  3475                          ;		___llmod
  3476                          ; This function is called by:
  3477                          ;		_main
  3478                          ;		_s_do_measure
  3479                          ; This function uses a non-reentrant model
  3480                          ; 
  3481                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  3482                          	line	453
  3483  0C17                    	__size_of_printf	equ	__end_of_printf-_printf
  3484                          ;doprnt.c: 443: int
  3485                          ;doprnt.c: 452: printf(const char * f, ...)
  3486                          ;doprnt.c: 453: {
  3487                          ;			
  3488  4D90                    _printf:	
  3489                          	opt	disable
  3490                          	line	529
  3491                          ;doprnt.c: 454: va_list ap;
  3492                          ;doprnt.c: 486: signed char c;
  3493                          ;doprnt.c: 488: int width;
  3494                          ;doprnt.c: 491: int prec;
  3495                          ;doprnt.c: 495: unsigned short flag;
  3496                          ;doprnt.c: 502: char d;
  3497                          ;doprnt.c: 503: double fval, integ;
  3498                          ;doprnt.c: 504: int exp;
  3499                          ;doprnt.c: 505: double ival;
  3500                          ;doprnt.c: 506: union {
  3501                          ;doprnt.c: 507: unsigned long _val;
  3502                          ;doprnt.c: 508: struct {
  3503                          ;doprnt.c: 509: const char * _cp;
  3504                          ;doprnt.c: 510: unsigned _len;
  3505                          ;doprnt.c: 511: } _str;
  3506                          ;doprnt.c: 512: } _val;
  3507                          ;doprnt.c: 529: *ap = __va_start();
  3508  4D90  50 14             	mov	a,<((?_printf|8000h))
  3509  4D92  01 02             	add	a,<(02h)
  3510  4D94  70 CF             	and	f, 0xCF   ;select user reg space
  3511  4D96  62 D0 00          	mov	reg[CUR_PP],0
  3512  4D99  53 37             	mov	[1+((printf@ap)^0x0)],a
  3513  4D9B  50 80             	mov	a,>((?_printf|8000h))
  3514  4D9D  09 00             	adc	a,>(02h)
  3515  4D9F  53 36             	mov	[0+((printf@ap)^0x0)],a
  3516                          	line	532
  3517                          ;doprnt.c: 532: while(c = *f++) {
  3518  4DA1  7D 5988           	xjmp	l121
  3519                          ;			
  3520  4DA4                    l122:	
  3521                          	line	534
  3522                          ;doprnt.c: 534: if(c != '%')
  3523  4DA4  70 CF             	and	f, 0xCF   ;select user reg space
  3524  4DA6  62 D0 00          	mov	reg[CUR_PP],0
  3525  4DA9  51 38             	mov	a,[0+((printf@c)^0x0)]
  3526  4DAB  39 25             	cmp	a,(025h)
  3527  4DAD  A012              	jz	l124
  3528                          	line	537
  3529                          ;doprnt.c: 536: {
  3530                          ;doprnt.c: 537: (putch(c) );
  3531  4DAF  70 CF             	and	f, 0xCF   ;select user reg space
  3532  4DB1  62 D0 00          	mov	reg[CUR_PP],0
  3533  4DB4  51 38             	mov	a,[0+((printf@c)^0x0)]
  3534  4DB6  53 40             	mov	[0+((?_putch)^0x0)],a
  3535  4DB8  71 80             	or	f, 0x80	;select multiple RAM page mode
  3536                          	
  3537  4DBA  7C 62F8           	xcall	_putch
  3538                          	
  3539                          	line	538
  3540                          ;doprnt.c: 538: continue;
  3541  4DBD  7D 5988           	xjmp	l121
  3542                          	line	539
  3543                          ;			
  3544  4DC0                    l124:	
  3545                          	line	542
  3546                          ;doprnt.c: 539: }
  3547                          ;doprnt.c: 542: width = 0;
  3548  4DC0  50 00             	mov	a,<(0)
  3549  4DC2  70 CF             	and	f, 0xCF   ;select user reg space
  3550  4DC4  62 D0 00          	mov	reg[CUR_PP],0
  3551  4DC7  53 33             	mov	[1+((printf@width)^0x0)],a
  3552  4DC9  50 00             	mov	a,>(0)
  3553  4DCB  53 32             	mov	[0+((printf@width)^0x0)],a
  3554                          	line	544
  3555                          ;doprnt.c: 544: flag = 0;
  3556  4DCD  50 00             	mov	a,<(0)
  3557  4DCF  53 35             	mov	[1+((printf@flag)^0x0)],a
  3558  4DD1  50 00             	mov	a,>(0)
  3559  4DD3  53 34             	mov	[0+((printf@flag)^0x0)],a
  3560                          	line	593
  3561                          ;doprnt.c: 593: if(isdigit((unsigned)*f)) {
  3562  4DD5  70 CF             	and	f, 0xCF   ;select user reg space
  3563  4DD7  62 D0 00          	mov	reg[CUR_PP],0
  3564  4DDA  51 14             	mov	a,[0+((printf@f)^0x0)]
  3565  4DDC  58 15             	mov	x,[1+((printf@f)^0x0)]
  3566  4DDE  28                	romx
  3567  4DDF  53 40             	mov	[0+((?_isdigit)^0x0)],a
  3568  4DE1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3569                          	
  3570  4DE3  7C 630C           	xcall	_isdigit
  3571                          	
  3572  4DE6  D06D              	jnc	l125
  3573                          	line	594
  3574                          ;doprnt.c: 594: width = 0;
  3575  4DE8  50 00             	mov	a,<(0)
  3576  4DEA  70 CF             	and	f, 0xCF   ;select user reg space
  3577  4DEC  62 D0 00          	mov	reg[CUR_PP],0
  3578  4DEF  53 33             	mov	[1+((printf@width)^0x0)],a
  3579  4DF1  50 00             	mov	a,>(0)
  3580  4DF3  53 32             	mov	[0+((printf@width)^0x0)],a
  3581                          	line	595
  3582                          ;doprnt.c: 595: do
  3583                          ;			
  3584  4DF5                    l128:	
  3585                          	line	596
  3586                          ;doprnt.c: 596: width = width*10 + *f++ - '0';
  3587  4DF5  70 CF             	and	f, 0xCF   ;select user reg space
  3588  4DF7  62 D0 00          	mov	reg[CUR_PP],0
  3589  4DFA  51 14             	mov	a,[0+((printf@f)^0x0)]
  3590  4DFC  58 15             	mov	x,[1+((printf@f)^0x0)]
  3591  4DFE  28                	romx
  3592  4DFF  53 39             	mov	[(??_printf^0x0)+23+0],a
  3593  4E01  51 32             	mov	a,[0+((printf@width)^0x0)]
  3594  4E03  08                	push	a
  3595  4E04  51 33             	mov	a,[1+((printf@width)^0x0)]
  3596  4E06  53 41             	mov	[1+((?___wmul)^0x0)],a
  3597  4E08  18                	pop	a
  3598  4E09  53 40             	mov	[0+((?___wmul)^0x0)],a
  3599  4E0B  50 0A             	mov	a,<(0Ah)
  3600  4E0D  53 43             	mov	[1+((0+?___wmul+02h)^0x0)],a
  3601  4E0F  50 00             	mov	a,>(0Ah)
  3602  4E11  53 42             	mov	[0+((0+?___wmul+02h)^0x0)],a
  3603  4E13  71 80             	or	f, 0x80	;select multiple RAM page mode
  3604                          	
  3605  4E15  7C 650E           	xcall	___wmul
  3606                          	
  3607  4E18  70 CF             	and	f, 0xCF   ;select user reg space
  3608  4E1A  62 D0 00          	mov	reg[CUR_PP],0
  3609  4E1D  5A 3A             	mov	[(??_printf^0x0)+24+0],x
  3610  4E1F  53 3B             	mov	[(??_printf^0x0)+24+0+1],a
  3611  4E21  51 3B             	mov	a,[(??_printf^0x0)+24+1]
  3612  4E23  02 39             	add	a,[(??_printf^0x0)+23+0]
  3613  4E25  53 3D             	mov	[(??_printf^0x0)+26+0+1],a
  3614  4E27  51 3A             	mov	a,[(??_printf^0x0)+24+0]
  3615  4E29  09 00             	adc	a,0
  3616  4E2B  53 3C             	mov	[(??_printf^0x0)+26+0],a
  3617  4E2D  51 3D             	mov	a,[(??_printf^0x0)+26+1]
  3618  4E2F  01 D0             	add	a,<(-48)
  3619  4E31  53 33             	mov	[1+((printf@width)^0x0)],a
  3620  4E33  51 3C             	mov	a,[(??_printf^0x0)+26+0]
  3621  4E35  09 FF             	adc	a,>(-48)
  3622  4E37  53 32             	mov	[0+((printf@width)^0x0)],a
  3623  4E39  70 CF             	and	f, 0xCF   ;select user reg space
  3624  4E3B  62 D0 00          	mov	reg[CUR_PP],0
  3625  4E3E  06 15  01         	add	[1+((printf@f)^0x0)],<((01h))
  3626                          	line	597
  3627                          ;doprnt.c: 597: while(isdigit((unsigned)*f));
  3628  4E41  70 CF             	and	f, 0xCF   ;select user reg space
  3629  4E43  62 D0 00          	mov	reg[CUR_PP],0
  3630  4E46  51 14             	mov	a,[0+((printf@f)^0x0)]
  3631  4E48  58 15             	mov	x,[1+((printf@f)^0x0)]
  3632  4E4A  28                	romx
  3633  4E4B  53 40             	mov	[0+((?_isdigit)^0x0)],a
  3634  4E4D  71 80             	or	f, 0x80	;select multiple RAM page mode
  3635                          	
  3636  4E4F  7C 630C           	xcall	_isdigit
  3637                          	
  3638  4E52  CFA2              	jc	l128
  3639                          ;			
  3640  4E54                    l127:	
  3641                          	line	603
  3642                          ;			
  3643  4E54                    l125:	
  3644                          	line	606
  3645                          ;doprnt.c: 603: }
  3646                          ;doprnt.c: 606: if(*f == '.') {
  3647  4E54  70 CF             	and	f, 0xCF   ;select user reg space
  3648  4E56  62 D0 00          	mov	reg[CUR_PP],0
  3649  4E59  51 14             	mov	a,[0+((printf@f)^0x0)]
  3650  4E5B  58 15             	mov	x,[1+((printf@f)^0x0)]
  3651  4E5D  28                	romx
  3652  4E5E  39 2E             	cmp	a,(02Eh)
  3653  4E60  B07B              	jnz	l129
  3654                          	line	607
  3655                          ;doprnt.c: 607: f++;
  3656  4E62  70 CF             	and	f, 0xCF   ;select user reg space
  3657  4E64  62 D0 00          	mov	reg[CUR_PP],0
  3658  4E67  06 15  01         	add	[1+((printf@f)^0x0)],<((01h))
  3659                          	line	615
  3660                          ;doprnt.c: 614: {
  3661                          ;doprnt.c: 615: prec = 0;
  3662  4E6A  50 00             	mov	a,<(0)
  3663  4E6C  70 CF             	and	f, 0xCF   ;select user reg space
  3664  4E6E  62 D0 00          	mov	reg[CUR_PP],0
  3665  4E71  53 2F             	mov	[1+((printf@prec)^0x0)],a
  3666  4E73  50 00             	mov	a,>(0)
  3667  4E75  53 2E             	mov	[0+((printf@prec)^0x0)],a
  3668                          	line	616
  3669                          ;doprnt.c: 616: while(isdigit((unsigned)*f))
  3670  4E77  7D 4EC6           	xjmp	l130
  3671                          ;			
  3672  4E7A                    l131:	
  3673                          	line	617
  3674                          ;doprnt.c: 617: prec = prec*10 + *f++ - '0';
  3675  4E7A  70 CF             	and	f, 0xCF   ;select user reg space
  3676  4E7C  62 D0 00          	mov	reg[CUR_PP],0
  3677  4E7F  51 14             	mov	a,[0+((printf@f)^0x0)]
  3678  4E81  58 15             	mov	x,[1+((printf@f)^0x0)]
  3679  4E83  28                	romx
  3680  4E84  53 39             	mov	[(??_printf^0x0)+23+0],a
  3681  4E86  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  3682  4E88  08                	push	a
  3683  4E89  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  3684  4E8B  53 41             	mov	[1+((?___wmul)^0x0)],a
  3685  4E8D  18                	pop	a
  3686  4E8E  53 40             	mov	[0+((?___wmul)^0x0)],a
  3687  4E90  50 0A             	mov	a,<(0Ah)
  3688  4E92  53 43             	mov	[1+((0+?___wmul+02h)^0x0)],a
  3689  4E94  50 00             	mov	a,>(0Ah)
  3690  4E96  53 42             	mov	[0+((0+?___wmul+02h)^0x0)],a
  3691  4E98  71 80             	or	f, 0x80	;select multiple RAM page mode
  3692                          	
  3693  4E9A  7C 650E           	xcall	___wmul
  3694                          	
  3695  4E9D  70 CF             	and	f, 0xCF   ;select user reg space
  3696  4E9F  62 D0 00          	mov	reg[CUR_PP],0
  3697  4EA2  5A 3A             	mov	[(??_printf^0x0)+24+0],x
  3698  4EA4  53 3B             	mov	[(??_printf^0x0)+24+0+1],a
  3699  4EA6  51 3B             	mov	a,[(??_printf^0x0)+24+1]
  3700  4EA8  02 39             	add	a,[(??_printf^0x0)+23+0]
  3701  4EAA  53 3D             	mov	[(??_printf^0x0)+26+0+1],a
  3702  4EAC  51 3A             	mov	a,[(??_printf^0x0)+24+0]
  3703  4EAE  09 00             	adc	a,0
  3704  4EB0  53 3C             	mov	[(??_printf^0x0)+26+0],a
  3705  4EB2  51 3D             	mov	a,[(??_printf^0x0)+26+1]
  3706  4EB4  01 D0             	add	a,<(-48)
  3707  4EB6  53 2F             	mov	[1+((printf@prec)^0x0)],a
  3708  4EB8  51 3C             	mov	a,[(??_printf^0x0)+26+0]
  3709  4EBA  09 FF             	adc	a,>(-48)
  3710  4EBC  53 2E             	mov	[0+((printf@prec)^0x0)],a
  3711  4EBE  70 CF             	and	f, 0xCF   ;select user reg space
  3712  4EC0  62 D0 00          	mov	reg[CUR_PP],0
  3713  4EC3  06 15  01         	add	[1+((printf@f)^0x0)],<((01h))
  3714                          ;			
  3715  4EC6                    l130:	
  3716                          	line	616
  3717  4EC6  70 CF             	and	f, 0xCF   ;select user reg space
  3718  4EC8  62 D0 00          	mov	reg[CUR_PP],0
  3719  4ECB  51 14             	mov	a,[0+((printf@f)^0x0)]
  3720  4ECD  58 15             	mov	x,[1+((printf@f)^0x0)]
  3721  4ECF  28                	romx
  3722  4ED0  53 40             	mov	[0+((?_isdigit)^0x0)],a
  3723  4ED2  71 80             	or	f, 0x80	;select multiple RAM page mode
  3724                          	
  3725  4ED4  7C 630C           	xcall	_isdigit
  3726                          	
  3727  4ED7  CFA2              	jc	l131
  3728                          ;			
  3729  4ED9                    l132:	
  3730                          	line	619
  3731                          ;doprnt.c: 618: }
  3732                          ;doprnt.c: 619: } else {
  3733  4ED9  7D 4EF5           	xjmp	l133
  3734                          ;			
  3735  4EDC                    l129:	
  3736                          	line	620
  3737                          ;doprnt.c: 620: prec = 0;
  3738  4EDC  50 00             	mov	a,<(0)
  3739  4EDE  70 CF             	and	f, 0xCF   ;select user reg space
  3740  4EE0  62 D0 00          	mov	reg[CUR_PP],0
  3741  4EE3  53 2F             	mov	[1+((printf@prec)^0x0)],a
  3742  4EE5  50 00             	mov	a,>(0)
  3743  4EE7  53 2E             	mov	[0+((printf@prec)^0x0)],a
  3744                          	line	622
  3745                          ;doprnt.c: 622: flag |= 0x1000;
  3746  4EE9  51 35             	mov	a,[1+((printf@flag)^0x0)]
  3747  4EEB  29 00             	or	a,<(01000h)
  3748  4EED  53 35             	mov	[1+((printf@flag)^0x0)],a
  3749  4EEF  51 34             	mov	a,[0+((printf@flag)^0x0)]
  3750  4EF1  29 10             	or	a,>(01000h)
  3751  4EF3  53 34             	mov	[0+((printf@flag)^0x0)],a
  3752                          	line	624
  3753                          ;			
  3754  4EF5                    l133:	
  3755                          	line	629
  3756                          ;doprnt.c: 624: }
  3757                          ;doprnt.c: 629: switch(c = *f++) {
  3758  4EF5  7D 4F12           	xjmp	l135
  3759                          	line	631
  3760                          ;doprnt.c: 631: case 0:
  3761                          ;			
  3762  4EF8                    l136:	
  3763                          	line	632
  3764                          ;doprnt.c: 632: goto alldone;
  3765  4EF8  7D 59A1           	xjmp	l137
  3766                          	line	656
  3767                          ;doprnt.c: 656: case 'f':
  3768                          ;			
  3769  4EFB                    l138:	
  3770                          	line	657
  3771                          ;doprnt.c: 657: flag |= 0x400;
  3772  4EFB  70 CF             	and	f, 0xCF   ;select user reg space
  3773  4EFD  62 D0 00          	mov	reg[CUR_PP],0
  3774  4F00  51 35             	mov	a,[1+((printf@flag)^0x0)]
  3775  4F02  29 00             	or	a,<(0400h)
  3776  4F04  53 35             	mov	[1+((printf@flag)^0x0)],a
  3777  4F06  51 34             	mov	a,[0+((printf@flag)^0x0)]
  3778  4F08  29 04             	or	a,>(0400h)
  3779  4F0A  53 34             	mov	[0+((printf@flag)^0x0)],a
  3780                          	line	658
  3781                          ;doprnt.c: 658: break;
  3782  4F0C  7D 4F33           	xjmp	l134
  3783                          	line	796
  3784                          ;doprnt.c: 796: default:
  3785                          ;			
  3786  4F0F                    l139:	
  3787                          	line	807
  3788                          ;doprnt.c: 807: continue;
  3789  4F0F  7D 5988           	xjmp	l121
  3790                          	line	629
  3791                          ;			
  3792  4F12                    l135:	
  3793  4F12  70 CF             	and	f, 0xCF   ;select user reg space
  3794  4F14  62 D0 00          	mov	reg[CUR_PP],0
  3795  4F17  51 14             	mov	a,[0+((printf@f)^0x0)]
  3796  4F19  58 15             	mov	x,[1+((printf@f)^0x0)]
  3797  4F1B  06 15  01         	add	[1+((printf@f)^0x0)],<(01h)
  3798  4F1E  0E 14  00         	adc	[0+((printf@f)^0x0)],>(01h)
  3799  4F21  28                	romx
  3800  4F22  53 39             	mov	[(??_printf^0x0)+23+0],a
  3801  4F24  51 39             	mov	a,[(??_printf^0x0)+23+0]
  3802  4F26  53 38             	mov	[0+((printf@c)^0x0)],a
  3803  4F28  51 39             	mov	a,[(??_printf^0x0)+23+0]
  3804  4F2A  AFCD              		jz	l136
  3805  4F2C  11 66             	sub	a,102
  3806  4F2E  AFCC              	jz	l138
  3807  4F30  7D 4F0F           	xjmp	l139
  3808                          
  3809                          	line	816
  3810                          ;			
  3811  4F33                    l134:	
  3812                          	line	819
  3813                          ;doprnt.c: 819: if(flag & (0x700)) {
  3814  4F33  70 CF             	and	f, 0xCF   ;select user reg space
  3815  4F35  62 D0 00          	mov	reg[CUR_PP],0
  3816  4F38  51 35             	mov	a,[1+((printf@flag)^0x0)]
  3817  4F3A  21 00             	and	a,<(0700h)
  3818  4F3C  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  3819  4F3E  51 34             	mov	a,[0+((printf@flag)^0x0)]
  3820  4F40  21 07             	and	a,>(0700h)
  3821  4F42  53 39             	mov	[(??_printf^0x0)+23+0],a
  3822  4F44  51 39             	mov	a,[(??_printf^0x0)+23+0]
  3823  4F46  39 00             	cmp	a,>(0)
  3824  4F48  B005              	jnz	u1373
  3825  4F4A  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  3826  4F4C  39 00             	cmp	a,<(0)
  3827  4F4E                    u1373:
  3828  4F4E  B004 7D 57B7      	jz	l140
  3829                          	line	821
  3830                          ;doprnt.c: 821: if(flag & 0x1000)
  3831  4F53  70 CF             	and	f, 0xCF   ;select user reg space
  3832  4F55  62 D0 00          	mov	reg[CUR_PP],0
  3833  4F58  51 35             	mov	a,[1+((printf@flag)^0x0)]
  3834  4F5A  21 00             	and	a,<(01000h)
  3835  4F5C  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  3836  4F5E  51 34             	mov	a,[0+((printf@flag)^0x0)]
  3837  4F60  21 10             	and	a,>(01000h)
  3838  4F62  53 39             	mov	[(??_printf^0x0)+23+0],a
  3839  4F64  51 39             	mov	a,[(??_printf^0x0)+23+0]
  3840  4F66  39 00             	cmp	a,>(0)
  3841  4F68  B005              	jnz	u1383
  3842  4F6A  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  3843  4F6C  39 00             	cmp	a,<(0)
  3844  4F6E                    u1383:
  3845  4F6E  A00E              	jz	l141
  3846                          	line	823
  3847                          ;doprnt.c: 823: prec = 6;
  3848  4F70  50 06             	mov	a,<(06h)
  3849  4F72  70 CF             	and	f, 0xCF   ;select user reg space
  3850  4F74  62 D0 00          	mov	reg[CUR_PP],0
  3851  4F77  53 2F             	mov	[1+((printf@prec)^0x0)],a
  3852  4F79  50 00             	mov	a,>(06h)
  3853  4F7B  53 2E             	mov	[0+((printf@prec)^0x0)],a
  3854                          ;			
  3855  4F7D                    l141:	
  3856                          	line	824
  3857                          ;doprnt.c: 824: fval = (*(double *)__va_arg((*(double **)ap)));
  3858  4F7D  70 CF             	and	f, 0xCF   ;select user reg space
  3859  4F7F  62 D0 00          	mov	reg[CUR_PP],0
  3860  4F82  51 36             	mov	a,[0+((printf@ap)^0x0)]
  3861  4F84  58 37             	mov	x,[1+((printf@ap)^0x0)]
  3862  4F86  60 D3             	mov	reg[0xd3],a
  3863  4F88  52 00             	mov	a,[0+x]
  3864  4F8A  53 22             	mov	[0+((printf@fval)^0x0)],a
  3865  4F8C  52 01             	mov	a,[1+x]
  3866  4F8E  53 23             	mov	[1+((printf@fval)^0x0)],a
  3867  4F90  52 02             	mov	a,[2+x]
  3868  4F92  53 24             	mov	[2+((printf@fval)^0x0)],a
  3869  4F94  52 03             	mov	a,[3+x]
  3870  4F96  53 25             	mov	[3+((printf@fval)^0x0)],a
  3871  4F98  70 CF             	and	f, 0xCF   ;select user reg space
  3872  4F9A  62 D0 00          	mov	reg[CUR_PP],0
  3873  4F9D  06 37  04         	add	[1+((printf@ap)^0x0)],<((04h))
  3874                          	line	825
  3875                          ;doprnt.c: 825: if(fval < 0.0) {
  3876  4FA0  70 CF             	and	f, 0xCF   ;select user reg space
  3877  4FA2  62 D0 00          	mov	reg[CUR_PP],0
  3878  4FA5  51 22             	mov	a,[0+((printf@fval)^0x0)]
  3879  4FA7  53 40             	mov	[0+((?___flge)^0x0)],a
  3880  4FA9  51 23             	mov	a,[1+((printf@fval)^0x0)]
  3881  4FAB  53 41             	mov	[1+((?___flge)^0x0)],a
  3882  4FAD  51 24             	mov	a,[2+((printf@fval)^0x0)]
  3883  4FAF  53 42             	mov	[2+((?___flge)^0x0)],a
  3884  4FB1  51 25             	mov	a,[3+((printf@fval)^0x0)]
  3885  4FB3  53 43             	mov	[3+((?___flge)^0x0)],a
  3886  4FB5  50 00             	mov	a,<(0x0>>24)
  3887  4FB7  53 44             	mov	[0+((0+?___flge+04h)^0x0)],a
  3888  4FB9  50 00             	mov	a,<(0x0>>16)
  3889  4FBB  53 45             	mov	[1+((0+?___flge+04h)^0x0)],a
  3890  4FBD  50 00             	mov	a,<(0x0>>8)
  3891  4FBF  53 46             	mov	[2+((0+?___flge+04h)^0x0)],a
  3892  4FC1  50 00             	mov	a,<(0x0)
  3893  4FC3  53 47             	mov	[3+((0+?___flge+04h)^0x0)],a
  3894  4FC5  71 80             	or	f, 0x80	;select multiple RAM page mode
  3895                          	
  3896  4FC7  7C 70F4           	xcall	___flge
  3897                          	
  3898  4FCA  C041              	jc	l142
  3899                          	line	826
  3900                          ;doprnt.c: 826: fval = -fval;
  3901  4FCC  70 CF             	and	f, 0xCF   ;select user reg space
  3902  4FCE  62 D0 00          	mov	reg[CUR_PP],0
  3903  4FD1  51 22             	mov	a,[0+((printf@fval)^0x0)]
  3904  4FD3  53 4B             	mov	[0+((?___flneg)^0x0)],a
  3905  4FD5  51 23             	mov	a,[1+((printf@fval)^0x0)]
  3906  4FD7  53 4C             	mov	[1+((?___flneg)^0x0)],a
  3907  4FD9  51 24             	mov	a,[2+((printf@fval)^0x0)]
  3908  4FDB  53 4D             	mov	[2+((?___flneg)^0x0)],a
  3909  4FDD  51 25             	mov	a,[3+((printf@fval)^0x0)]
  3910  4FDF  53 4E             	mov	[3+((?___flneg)^0x0)],a
  3911  4FE1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3912                          	
  3913  4FE3  7C 7895           	xcall	___flneg
  3914                          	
  3915  4FE6  70 CF             	and	f, 0xCF   ;select user reg space
  3916  4FE8  62 D0 00          	mov	reg[CUR_PP],0
  3917  4FEB  51 4B             	mov	a,[0+((0+?___flneg)^0x0)]
  3918  4FED  53 22             	mov	[0+((printf@fval)^0x0)],a
  3919  4FEF  51 4C             	mov	a,[1+((0+?___flneg)^0x0)]
  3920  4FF1  53 23             	mov	[1+((printf@fval)^0x0)],a
  3921  4FF3  51 4D             	mov	a,[2+((0+?___flneg)^0x0)]
  3922  4FF5  53 24             	mov	[2+((printf@fval)^0x0)],a
  3923  4FF7  51 4E             	mov	a,[3+((0+?___flneg)^0x0)]
  3924  4FF9  53 25             	mov	[3+((printf@fval)^0x0)],a
  3925                          	line	827
  3926                          ;doprnt.c: 827: flag |= 0x03;
  3927  4FFB  70 CF             	and	f, 0xCF   ;select user reg space
  3928  4FFD  62 D0 00          	mov	reg[CUR_PP],0
  3929  5000  51 35             	mov	a,[1+((printf@flag)^0x0)]
  3930  5002  29 03             	or	a,<(03h)
  3931  5004  53 35             	mov	[1+((printf@flag)^0x0)],a
  3932  5006  51 34             	mov	a,[0+((printf@flag)^0x0)]
  3933  5008  29 00             	or	a,>(03h)
  3934  500A  53 34             	mov	[0+((printf@flag)^0x0)],a
  3935                          	line	828
  3936                          ;			
  3937  500C                    l142:	
  3938                          	line	829
  3939                          ;doprnt.c: 828: }
  3940                          ;doprnt.c: 829: exp = 0;
  3941  500C  50 00             	mov	a,<(0)
  3942  500E  70 CF             	and	f, 0xCF   ;select user reg space
  3943  5010  62 D0 00          	mov	reg[CUR_PP],0
  3944  5013  53 31             	mov	[1+((printf@exp)^0x0)],a
  3945  5015  50 00             	mov	a,>(0)
  3946  5017  53 30             	mov	[0+((printf@exp)^0x0)],a
  3947                          	line	830
  3948                          ;doprnt.c: 830: if( fval!=0) {
  3949  5019  70 CF             	and	f, 0xCF   ;select user reg space
  3950  501B  62 D0 00          	mov	reg[CUR_PP],0
  3951  501E  51 22             	mov	a,[0+((printf@fval)^0x0)]
  3952  5020  39 00             	cmp	a,<(0x0>>24)
  3953  5022  B011              	jnz	u1393
  3954  5024  51 23             	mov	a,[1+((printf@fval)^0x0)]
  3955  5026  39 00             	cmp	a,<(0x0>>16)
  3956  5028  B00B              	jnz	u1393
  3957  502A  51 24             	mov	a,[2+((printf@fval)^0x0)]
  3958  502C  39 00             	cmp	a,<(0x0>>8)
  3959  502E  B005              	jnz	u1393
  3960  5030  51 25             	mov	a,[3+((printf@fval)^0x0)]
  3961  5032  39 00             	cmp	a,<(0x0)
  3962  5034                    u1393:
  3963  5034  A17C              	jz	l143
  3964                          	line	831
  3965                          ;doprnt.c: 831: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) - 126);
  3966  5036  70 CF             	and	f, 0xCF   ;select user reg space
  3967  5038  62 D0 00          	mov	reg[CUR_PP],0
  3968  503B  51 22             	mov	a,[0+((printf@fval)^0x0)]
  3969  503D  53 39             	mov	[(??_printf^0x0)+23+0],a
  3970  503F  51 23             	mov	a,[1+((printf@fval)^0x0)]
  3971  5041  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  3972  5043  51 24             	mov	a,[2+((printf@fval)^0x0)]
  3973  5045  53 3B             	mov	[(??_printf^0x0)+23+0+2],a
  3974  5047  51 25             	mov	a,[3+((printf@fval)^0x0)]
  3975  5049  53 3C             	mov	[(??_printf^0x0)+23+0+3],a
  3976  504B  50 17             	mov	a,<((017h))
  3977  504D  7D 505A           	xjmp	u1403
  3978  5050  70 FB             	clrc
  3979  5052                    u1414:
  3980  5052  6E 39             	rrc	[(??_printf^0x0)+23+0]
  3981  5054  6E 3A             	rrc	[(??_printf^0x0)+23+1]
  3982  5056  6E 3B             	rrc	[(??_printf^0x0)+23+2]
  3983  5058  6E 3C             	rrc	[(??_printf^0x0)+23+3]
  3984  505A                    u1403:
  3985  505A  78                	dec	a
  3986  505B  DFF6              	jnc	u1414
  3987  505D  51 3C             	mov	a,[(??_printf^0x0)+23+3]
  3988  505F  01 82             	add	a,<(-126)
  3989  5061  53 31             	mov	[1+((printf@exp)^0x0)],a
  3990  5063  50 00             	mov	a,0
  3991  5065  09 FF             	adc	a,>(-126)
  3992  5067  53 30             	mov	[0+((printf@exp)^0x0)],a
  3993                          	line	832
  3994                          ;doprnt.c: 832: exp--;
  3995  5069  51 31             	mov	a,[1+((printf@exp)^0x0)]
  3996  506B  01 FF             	add	a,<(-1)
  3997  506D  53 31             	mov	[1+((printf@exp)^0x0)],a
  3998  506F  51 30             	mov	a,[0+((printf@exp)^0x0)]
  3999  5071  09 FF             	adc	a,>(-1)
  4000  5073  53 30             	mov	[0+((printf@exp)^0x0)],a
  4001                          	line	833
  4002                          ;doprnt.c: 833: exp *= 3;
  4003  5075  70 CF             	and	f, 0xCF   ;select user reg space
  4004  5077  62 D0 00          	mov	reg[CUR_PP],0
  4005  507A  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4006  507C  08                	push	a
  4007  507D  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4008  507F  53 41             	mov	[1+((?___wmul)^0x0)],a
  4009  5081  18                	pop	a
  4010  5082  53 40             	mov	[0+((?___wmul)^0x0)],a
  4011  5084  50 03             	mov	a,<(03h)
  4012  5086  53 43             	mov	[1+((0+?___wmul+02h)^0x0)],a
  4013  5088  50 00             	mov	a,>(03h)
  4014  508A  53 42             	mov	[0+((0+?___wmul+02h)^0x0)],a
  4015  508C  71 80             	or	f, 0x80	;select multiple RAM page mode
  4016                          	
  4017  508E  7C 650E           	xcall	___wmul
  4018                          	
  4019  5091  70 CF             	and	f, 0xCF   ;select user reg space
  4020  5093  62 D0 00          	mov	reg[CUR_PP],0
  4021  5096  5A 30             	mov	[((printf@exp)^0x0)],x
  4022  5098  53 31             	mov	[((printf@exp+1)^0x0)],a
  4023                          	line	834
  4024                          ;doprnt.c: 834: exp /= 10;
  4025  509A  70 CF             	and	f, 0xCF   ;select user reg space
  4026  509C  62 D0 00          	mov	reg[CUR_PP],0
  4027  509F  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4028  50A1  08                	push	a
  4029  50A2  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4030  50A4  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  4031  50A6  18                	pop	a
  4032  50A7  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  4033  50A9  50 0A             	mov	a,<(0Ah)
  4034  50AB  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  4035  50AD  50 00             	mov	a,>(0Ah)
  4036  50AF  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  4037  50B1  71 80             	or	f, 0x80	;select multiple RAM page mode
  4038                          	
  4039  50B3  7C 6DB8           	xcall	___awdiv
  4040                          	
  4041  50B6  70 CF             	and	f, 0xCF   ;select user reg space
  4042  50B8  62 D0 00          	mov	reg[CUR_PP],0
  4043  50BB  5A 30             	mov	[((printf@exp)^0x0)],x
  4044  50BD  53 31             	mov	[((printf@exp+1)^0x0)],a
  4045                          	line	835
  4046                          ;doprnt.c: 835: if(exp < 0)
  4047  50BF  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4048  50C1  39 00             	cmp	a,<(0)
  4049  50C3  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4050  50C5  31 80             	xor	a,80h
  4051  50C7  19 80             	sbb	a,(>0)^80h
  4052  50C9  D012              	jnc	l144
  4053                          	line	836
  4054                          ;doprnt.c: 836: exp--;
  4055  50CB  70 CF             	and	f, 0xCF   ;select user reg space
  4056  50CD  62 D0 00          	mov	reg[CUR_PP],0
  4057  50D0  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4058  50D2  01 FF             	add	a,<(-1)
  4059  50D4  53 31             	mov	[1+((printf@exp)^0x0)],a
  4060  50D6  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4061  50D8  09 FF             	adc	a,>(-1)
  4062  50DA  53 30             	mov	[0+((printf@exp)^0x0)],a
  4063                          ;			
  4064  50DC                    l144:	
  4065                          	line	837
  4066                          ;doprnt.c: 837: integ = fval * scale(-exp);
  4067  50DC  50 01             	mov	a,<((01h))
  4068  50DE  01 30             	add	a,<(8000h+printf@exp)
  4069  50E0  5C                	mov	x,a
  4070  50E1  50 80             	mov	a,>(8000h+printf@exp)
  4071  50E3  70 CF             	and	f, 0xCF   ;select user reg space
  4072  50E5  60 D3             	mov	reg[0xd3],a
  4073  50E7  52 00             	mov	a,[x+0]
  4074  50E9  73                	cpl	a
  4075  50EA  74                	inc	a
  4076  50EB  62 D0 00          	mov	reg[CUR_PP],0
  4077  50EE  53 40             	mov	[0+((?_scale)^0x0)],a
  4078  50F0  71 80             	or	f, 0x80	;select multiple RAM page mode
  4079                          	
  4080  50F2  7C 5B67           	xcall	_scale
  4081                          	
  4082  50F5  70 CF             	and	f, 0xCF   ;select user reg space
  4083  50F7  62 D0 00          	mov	reg[CUR_PP],0
  4084  50FA  51 40             	mov	a,[0+((0+?_scale)^0x0)]
  4085  50FC  53 5D             	mov	[0+((?___flmul)^0x0)],a
  4086  50FE  51 41             	mov	a,[1+((0+?_scale)^0x0)]
  4087  5100  53 5E             	mov	[1+((?___flmul)^0x0)],a
  4088  5102  51 42             	mov	a,[2+((0+?_scale)^0x0)]
  4089  5104  53 5F             	mov	[2+((?___flmul)^0x0)],a
  4090  5106  51 43             	mov	a,[3+((0+?_scale)^0x0)]
  4091  5108  53 60             	mov	[3+((?___flmul)^0x0)],a
  4092  510A  51 22             	mov	a,[0+((printf@fval)^0x0)]
  4093  510C  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  4094  510E  51 23             	mov	a,[1+((printf@fval)^0x0)]
  4095  5110  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  4096  5112  51 24             	mov	a,[2+((printf@fval)^0x0)]
  4097  5114  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  4098  5116  51 25             	mov	a,[3+((printf@fval)^0x0)]
  4099  5118  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  4100  511A  71 80             	or	f, 0x80	;select multiple RAM page mode
  4101                          	
  4102  511C  7C 7680           	xcall	___flmul
  4103                          	
  4104  511F  70 CF             	and	f, 0xCF   ;select user reg space
  4105  5121  62 D0 00          	mov	reg[CUR_PP],0
  4106  5124  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  4107  5126  53 2A             	mov	[0+((printf@integ)^0x0)],a
  4108  5128  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  4109  512A  53 2B             	mov	[1+((printf@integ)^0x0)],a
  4110  512C  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  4111  512E  53 2C             	mov	[2+((printf@integ)^0x0)],a
  4112  5130  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  4113  5132  53 2D             	mov	[3+((printf@integ)^0x0)],a
  4114                          	line	838
  4115                          ;doprnt.c: 838: if(integ < 1.0)
  4116  5134  70 CF             	and	f, 0xCF   ;select user reg space
  4117  5136  62 D0 00          	mov	reg[CUR_PP],0
  4118  5139  51 2A             	mov	a,[0+((printf@integ)^0x0)]
  4119  513B  53 40             	mov	[0+((?___flge)^0x0)],a
  4120  513D  51 2B             	mov	a,[1+((printf@integ)^0x0)]
  4121  513F  53 41             	mov	[1+((?___flge)^0x0)],a
  4122  5141  51 2C             	mov	a,[2+((printf@integ)^0x0)]
  4123  5143  53 42             	mov	[2+((?___flge)^0x0)],a
  4124  5145  51 2D             	mov	a,[3+((printf@integ)^0x0)]
  4125  5147  53 43             	mov	[3+((?___flge)^0x0)],a
  4126  5149  50 3F             	mov	a,<(0x3f800000>>24)
  4127  514B  53 44             	mov	[0+((0+?___flge+04h)^0x0)],a
  4128  514D  50 80             	mov	a,<(0x3f800000>>16)
  4129  514F  53 45             	mov	[1+((0+?___flge+04h)^0x0)],a
  4130  5151  50 00             	mov	a,<(0x3f800000>>8)
  4131  5153  53 46             	mov	[2+((0+?___flge+04h)^0x0)],a
  4132  5155  50 00             	mov	a,<(0x3f800000)
  4133  5157  53 47             	mov	[3+((0+?___flge+04h)^0x0)],a
  4134  5159  71 80             	or	f, 0x80	;select multiple RAM page mode
  4135                          	
  4136  515B  7C 70F4           	xcall	___flge
  4137                          	
  4138  515E  C015              	jc	l145
  4139                          	line	839
  4140                          ;doprnt.c: 839: exp--;
  4141  5160  70 CF             	and	f, 0xCF   ;select user reg space
  4142  5162  62 D0 00          	mov	reg[CUR_PP],0
  4143  5165  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4144  5167  01 FF             	add	a,<(-1)
  4145  5169  53 31             	mov	[1+((printf@exp)^0x0)],a
  4146  516B  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4147  516D  09 FF             	adc	a,>(-1)
  4148  516F  53 30             	mov	[0+((printf@exp)^0x0)],a
  4149  5171  7D 51B1           	xjmp	l143
  4150                          	line	840
  4151                          ;			
  4152  5174                    l145:	
  4153                          ;doprnt.c: 840: else if(integ >= 10.0)
  4154  5174  70 CF             	and	f, 0xCF   ;select user reg space
  4155  5176  62 D0 00          	mov	reg[CUR_PP],0
  4156  5179  51 2A             	mov	a,[0+((printf@integ)^0x0)]
  4157  517B  53 40             	mov	[0+((?___flge)^0x0)],a
  4158  517D  51 2B             	mov	a,[1+((printf@integ)^0x0)]
  4159  517F  53 41             	mov	[1+((?___flge)^0x0)],a
  4160  5181  51 2C             	mov	a,[2+((printf@integ)^0x0)]
  4161  5183  53 42             	mov	[2+((?___flge)^0x0)],a
  4162  5185  51 2D             	mov	a,[3+((printf@integ)^0x0)]
  4163  5187  53 43             	mov	[3+((?___flge)^0x0)],a
  4164  5189  50 41             	mov	a,<(0x41200000>>24)
  4165  518B  53 44             	mov	[0+((0+?___flge+04h)^0x0)],a
  4166  518D  50 20             	mov	a,<(0x41200000>>16)
  4167  518F  53 45             	mov	[1+((0+?___flge+04h)^0x0)],a
  4168  5191  50 00             	mov	a,<(0x41200000>>8)
  4169  5193  53 46             	mov	[2+((0+?___flge+04h)^0x0)],a
  4170  5195  50 00             	mov	a,<(0x41200000)
  4171  5197  53 47             	mov	[3+((0+?___flge+04h)^0x0)],a
  4172  5199  71 80             	or	f, 0x80	;select multiple RAM page mode
  4173                          	
  4174  519B  7C 70F4           	xcall	___flge
  4175                          	
  4176  519E  D012              	jnc	l143
  4177                          	line	841
  4178                          ;doprnt.c: 841: exp++;
  4179  51A0  70 CF             	and	f, 0xCF   ;select user reg space
  4180  51A2  62 D0 00          	mov	reg[CUR_PP],0
  4181  51A5  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4182  51A7  01 01             	add	a,<(01h)
  4183  51A9  53 31             	mov	[1+((printf@exp)^0x0)],a
  4184  51AB  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4185  51AD  09 00             	adc	a,>(01h)
  4186  51AF  53 30             	mov	[0+((printf@exp)^0x0)],a
  4187                          ;			
  4188  51B1                    l147:	
  4189                          	line	842
  4190                          ;			
  4191  51B1                    l146:	
  4192                          ;			
  4193  51B1                    l143:	
  4194                          	line	1099
  4195                          ;doprnt.c: 842: }
  4196                          ;doprnt.c: 1099: if(prec <= 12)
  4197  51B1  70 CF             	and	f, 0xCF   ;select user reg space
  4198  51B3  62 D0 00          	mov	reg[CUR_PP],0
  4199  51B6  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  4200  51B8  39 0D             	cmp	a,<(0Dh)
  4201  51BA  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  4202  51BC  31 80             	xor	a,80h
  4203  51BE  19 80             	sbb	a,(>0Dh)^80h
  4204  51C0  D057              	jnc	l148
  4205                          	line	1100
  4206                          ;doprnt.c: 1100: fval += fround(prec);
  4207  51C2  50 01             	mov	a,<((01h))
  4208  51C4  01 2E             	add	a,<(8000h+printf@prec)
  4209  51C6  5C                	mov	x,a
  4210  51C7  50 80             	mov	a,>(8000h+printf@prec)
  4211  51C9  70 CF             	and	f, 0xCF   ;select user reg space
  4212  51CB  60 D3             	mov	reg[0xd3],a
  4213  51CD  52 00             	mov	a,[x+0]
  4214  51CF  62 D0 00          	mov	reg[CUR_PP],0
  4215  51D2  53 40             	mov	[0+((?_fround)^0x0)],a
  4216  51D4  71 80             	or	f, 0x80	;select multiple RAM page mode
  4217                          	
  4218  51D6  7C 5FC3           	xcall	_fround
  4219                          	
  4220  51D9  70 CF             	and	f, 0xCF   ;select user reg space
  4221  51DB  62 D0 00          	mov	reg[CUR_PP],0
  4222  51DE  51 40             	mov	a,[0+((0+?_fround)^0x0)]
  4223  51E0  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  4224  51E2  51 41             	mov	a,[1+((0+?_fround)^0x0)]
  4225  51E4  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  4226  51E6  51 42             	mov	a,[2+((0+?_fround)^0x0)]
  4227  51E8  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  4228  51EA  51 43             	mov	a,[3+((0+?_fround)^0x0)]
  4229  51EC  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  4230  51EE  51 22             	mov	a,[0+((printf@fval)^0x0)]
  4231  51F0  53 4C             	mov	[0+((?___fladd)^0x0)],a
  4232  51F2  51 23             	mov	a,[1+((printf@fval)^0x0)]
  4233  51F4  53 4D             	mov	[1+((?___fladd)^0x0)],a
  4234  51F6  51 24             	mov	a,[2+((printf@fval)^0x0)]
  4235  51F8  53 4E             	mov	[2+((?___fladd)^0x0)],a
  4236  51FA  51 25             	mov	a,[3+((printf@fval)^0x0)]
  4237  51FC  53 4F             	mov	[3+((?___fladd)^0x0)],a
  4238  51FE  71 80             	or	f, 0x80	;select multiple RAM page mode
  4239                          	
  4240  5200  7C 73BA           	xcall	___fladd
  4241                          	
  4242  5203  70 CF             	and	f, 0xCF   ;select user reg space
  4243  5205  62 D0 00          	mov	reg[CUR_PP],0
  4244  5208  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  4245  520A  53 22             	mov	[0+((printf@fval)^0x0)],a
  4246  520C  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  4247  520E  53 23             	mov	[1+((printf@fval)^0x0)],a
  4248  5210  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  4249  5212  53 24             	mov	[2+((printf@fval)^0x0)],a
  4250  5214  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  4251  5216  53 25             	mov	[3+((printf@fval)^0x0)],a
  4252                          ;			
  4253  5218                    l148:	
  4254                          	line	1103
  4255                          ;doprnt.c: 1103: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4256  5218  70 CF             	and	f, 0xCF   ;select user reg space
  4257  521A  62 D0 00          	mov	reg[CUR_PP],0
  4258  521D  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4259  521F  39 0A             	cmp	a,<(0Ah)
  4260  5221  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4261  5223  31 80             	xor	a,80h
  4262  5225  19 80             	sbb	a,(>0Ah)^80h
  4263  5227  D066              	jnc	l600001826
  4264  5229  70 CF             	and	f, 0xCF   ;select user reg space
  4265  522B  62 D0 00          	mov	reg[CUR_PP],0
  4266  522E  51 22             	mov	a,[0+((printf@fval)^0x0)]
  4267  5230  39 00             	cmp	a,<(0x0>>24)
  4268  5232  B011              	jnz	u1423
  4269  5234  51 23             	mov	a,[1+((printf@fval)^0x0)]
  4270  5236  39 00             	cmp	a,<(0x0>>16)
  4271  5238  B00B              	jnz	u1423
  4272  523A  51 24             	mov	a,[2+((printf@fval)^0x0)]
  4273  523C  39 00             	cmp	a,<(0x0>>8)
  4274  523E  B005              	jnz	u1423
  4275  5240  51 25             	mov	a,[3+((printf@fval)^0x0)]
  4276  5242  39 00             	cmp	a,<(0x0)
  4277  5244                    u1423:
  4278  5244  A118              	jz	l149
  4279  5246  70 CF             	and	f, 0xCF   ;select user reg space
  4280  5248  62 D0 00          	mov	reg[CUR_PP],0
  4281  524B  51 22             	mov	a,[0+((printf@fval)^0x0)]
  4282  524D  53 40             	mov	[0+((?___fltol)^0x0)],a
  4283  524F  51 23             	mov	a,[1+((printf@fval)^0x0)]
  4284  5251  53 41             	mov	[1+((?___fltol)^0x0)],a
  4285  5253  51 24             	mov	a,[2+((printf@fval)^0x0)]
  4286  5255  53 42             	mov	[2+((?___fltol)^0x0)],a
  4287  5257  51 25             	mov	a,[3+((printf@fval)^0x0)]
  4288  5259  53 43             	mov	[3+((?___fltol)^0x0)],a
  4289  525B  71 80             	or	f, 0x80	;select multiple RAM page mode
  4290                          	
  4291  525D  7C 67F1           	xcall	___fltol
  4292                          	
  4293  5260  70 CF             	and	f, 0xCF   ;select user reg space
  4294  5262  62 D0 00          	mov	reg[CUR_PP],0
  4295  5265  51 40             	mov	a,[0+((0+?___fltol)^0x0)]
  4296  5267  39 00             	cmp	a,<(0>>24)
  4297  5269  B011              	jnz	u1433
  4298  526B  51 41             	mov	a,[1+((0+?___fltol)^0x0)]
  4299  526D  39 00             	cmp	a,<(0>>16)
  4300  526F  B00B              	jnz	u1433
  4301  5271  51 42             	mov	a,[2+((0+?___fltol)^0x0)]
  4302  5273  39 00             	cmp	a,<(0>>8)
  4303  5275  B005              	jnz	u1433
  4304  5277  51 43             	mov	a,[3+((0+?___fltol)^0x0)]
  4305  5279  39 00             	cmp	a,<(0)
  4306  527B                    u1433:
  4307  527B  B0E1              	jnz	l149
  4308  527D  70 CF             	and	f, 0xCF   ;select user reg space
  4309  527F  62 D0 00          	mov	reg[CUR_PP],0
  4310  5282  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4311  5284  39 02             	cmp	a,<(02h)
  4312  5286  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4313  5288  31 80             	xor	a,80h
  4314  528A  19 80             	sbb	a,(>02h)^80h
  4315  528C  C0D0              	jc	l149
  4316                          ;			
  4317  528E                    l600001826:	
  4318                          	line	1107
  4319                          ;doprnt.c: 1107: if(integ < 4.294967296){
  4320  528E  70 CF             	and	f, 0xCF   ;select user reg space
  4321  5290  62 D0 00          	mov	reg[CUR_PP],0
  4322  5293  51 2A             	mov	a,[0+((printf@integ)^0x0)]
  4323  5295  53 40             	mov	[0+((?___flge)^0x0)],a
  4324  5297  51 2B             	mov	a,[1+((printf@integ)^0x0)]
  4325  5299  53 41             	mov	[1+((?___flge)^0x0)],a
  4326  529B  51 2C             	mov	a,[2+((printf@integ)^0x0)]
  4327  529D  53 42             	mov	[2+((?___flge)^0x0)],a
  4328  529F  51 2D             	mov	a,[3+((printf@integ)^0x0)]
  4329  52A1  53 43             	mov	[3+((?___flge)^0x0)],a
  4330  52A3  50 40             	mov	a,<(0x4089705f>>24)
  4331  52A5  53 44             	mov	[0+((0+?___flge+04h)^0x0)],a
  4332  52A7  50 89             	mov	a,<(0x4089705f>>16)
  4333  52A9  53 45             	mov	[1+((0+?___flge+04h)^0x0)],a
  4334  52AB  50 70             	mov	a,<(0x4089705f>>8)
  4335  52AD  53 46             	mov	[2+((0+?___flge+04h)^0x0)],a
  4336  52AF  50 5F             	mov	a,<(0x4089705f)
  4337  52B1  53 47             	mov	[3+((0+?___flge+04h)^0x0)],a
  4338  52B3  71 80             	or	f, 0x80	;select multiple RAM page mode
  4339                          	
  4340  52B5  7C 70F4           	xcall	___flge
  4341                          	
  4342  52B8  C015              	jc	l150
  4343                          	line	1108
  4344                          ;doprnt.c: 1108: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4345  52BA  70 CF             	and	f, 0xCF   ;select user reg space
  4346  52BC  62 D0 00          	mov	reg[CUR_PP],0
  4347  52BF  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4348  52C1  01 F7             	add	a,<(-9)
  4349  52C3  53 31             	mov	[1+((printf@exp)^0x0)],a
  4350  52C5  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4351  52C7  09 FF             	adc	a,>(-9)
  4352  52C9  53 30             	mov	[0+((printf@exp)^0x0)],a
  4353                          	line	1109
  4354                          ;doprnt.c: 1109: }else{
  4355  52CB  7D 52DF           	xjmp	l151
  4356                          ;			
  4357  52CE                    l150:	
  4358                          	line	1110
  4359                          ;doprnt.c: 1110: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4360  52CE  70 CF             	and	f, 0xCF   ;select user reg space
  4361  52D0  62 D0 00          	mov	reg[CUR_PP],0
  4362  52D3  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4363  52D5  01 F8             	add	a,<(-8)
  4364  52D7  53 31             	mov	[1+((printf@exp)^0x0)],a
  4365  52D9  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4366  52DB  09 FF             	adc	a,>(-8)
  4367  52DD  53 30             	mov	[0+((printf@exp)^0x0)],a
  4368                          	line	1111
  4369                          ;			
  4370  52DF                    l151:	
  4371                          	line	1112
  4372                          ;doprnt.c: 1111: }
  4373                          ;doprnt.c: 1112: integ = scale(exp);
  4374  52DF  50 01             	mov	a,<((01h))
  4375  52E1  01 30             	add	a,<(8000h+printf@exp)
  4376  52E3  5C                	mov	x,a
  4377  52E4  50 80             	mov	a,>(8000h+printf@exp)
  4378  52E6  70 CF             	and	f, 0xCF   ;select user reg space
  4379  52E8  60 D3             	mov	reg[0xd3],a
  4380  52EA  52 00             	mov	a,[x+0]
  4381  52EC  62 D0 00          	mov	reg[CUR_PP],0
  4382  52EF  53 40             	mov	[0+((?_scale)^0x0)],a
  4383  52F1  71 80             	or	f, 0x80	;select multiple RAM page mode
  4384                          	
  4385  52F3  7C 5B67           	xcall	_scale
  4386                          	
  4387  52F6  70 CF             	and	f, 0xCF   ;select user reg space
  4388  52F8  62 D0 00          	mov	reg[CUR_PP],0
  4389  52FB  51 40             	mov	a,[0+((0+?_scale)^0x0)]
  4390  52FD  53 2A             	mov	[0+((printf@integ)^0x0)],a
  4391  52FF  51 41             	mov	a,[1+((0+?_scale)^0x0)]
  4392  5301  53 2B             	mov	[1+((printf@integ)^0x0)],a
  4393  5303  51 42             	mov	a,[2+((0+?_scale)^0x0)]
  4394  5305  53 2C             	mov	[2+((printf@integ)^0x0)],a
  4395  5307  51 43             	mov	a,[3+((0+?_scale)^0x0)]
  4396  5309  53 2D             	mov	[3+((printf@integ)^0x0)],a
  4397                          	line	1113
  4398                          ;doprnt.c: 1113: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l_(fval,integ
                                ));
  4399  530B  51 22             	mov	a,[0+((printf@fval)^0x0)]
  4400  530D  53 40             	mov	[0+((?__div_to_l_)^0x0)],a
  4401  530F  51 23             	mov	a,[1+((printf@fval)^0x0)]
  4402  5311  53 41             	mov	[1+((?__div_to_l_)^0x0)],a
  4403  5313  51 24             	mov	a,[2+((printf@fval)^0x0)]
  4404  5315  53 42             	mov	[2+((?__div_to_l_)^0x0)],a
  4405  5317  51 25             	mov	a,[3+((printf@fval)^0x0)]
  4406  5319  53 43             	mov	[3+((?__div_to_l_)^0x0)],a
  4407  531B  51 2A             	mov	a,[0+((printf@integ)^0x0)]
  4408  531D  53 44             	mov	[0+((0+?__div_to_l_+04h)^0x0)],a
  4409  531F  51 2B             	mov	a,[1+((printf@integ)^0x0)]
  4410  5321  53 45             	mov	[1+((0+?__div_to_l_+04h)^0x0)],a
  4411  5323  51 2C             	mov	a,[2+((printf@integ)^0x0)]
  4412  5325  53 46             	mov	[2+((0+?__div_to_l_+04h)^0x0)],a
  4413  5327  51 2D             	mov	a,[3+((printf@integ)^0x0)]
  4414  5329  53 47             	mov	[3+((0+?__div_to_l_+04h)^0x0)],a
  4415  532B  71 80             	or	f, 0x80	;select multiple RAM page mode
  4416                          	
  4417  532D  7C 692A           	xcall	__div_to_l_
  4418                          	
  4419  5330  70 CF             	and	f, 0xCF   ;select user reg space
  4420  5332  62 D0 00          	mov	reg[CUR_PP],0
  4421  5335  51 40             	mov	a,[0+((0+?__div_to_l_)^0x0)]
  4422  5337  53 26             	mov	[0+((printf@_val)^0x0)],a
  4423  5339  51 41             	mov	a,[1+((0+?__div_to_l_)^0x0)]
  4424  533B  53 27             	mov	[1+((printf@_val)^0x0)],a
  4425  533D  51 42             	mov	a,[2+((0+?__div_to_l_)^0x0)]
  4426  533F  53 28             	mov	[2+((printf@_val)^0x0)],a
  4427  5341  51 43             	mov	a,[3+((0+?__div_to_l_)^0x0)]
  4428  5343  53 29             	mov	[3+((printf@_val)^0x0)],a
  4429                          	line	1116
  4430                          ;doprnt.c: 1116: fval = 0.0;
  4431  5345  50 00             	mov	a,<(0x0>>24)
  4432  5347  70 CF             	and	f, 0xCF   ;select user reg space
  4433  5349  62 D0 00          	mov	reg[CUR_PP],0
  4434  534C  53 22             	mov	[0+((printf@fval)^0x0)],a
  4435  534E  50 00             	mov	a,<(0x0>>16)
  4436  5350  53 23             	mov	[1+((printf@fval)^0x0)],a
  4437  5352  50 00             	mov	a,<(0x0>>8)
  4438  5354  53 24             	mov	[2+((printf@fval)^0x0)],a
  4439  5356  50 00             	mov	a,<(0x0)
  4440  5358  53 25             	mov	[3+((printf@fval)^0x0)],a
  4441                          	line	1117
  4442                          ;doprnt.c: 1117: } else {
  4443  535A  7D 53ED           	xjmp	l152
  4444                          ;			
  4445  535D                    l149:	
  4446                          	line	1118
  4447                          ;doprnt.c: 1118: _val._val = (unsigned long)fval;
  4448  535D  70 CF             	and	f, 0xCF   ;select user reg space
  4449  535F  62 D0 00          	mov	reg[CUR_PP],0
  4450  5362  51 22             	mov	a,[0+((printf@fval)^0x0)]
  4451  5364  53 40             	mov	[0+((?___fltol)^0x0)],a
  4452  5366  51 23             	mov	a,[1+((printf@fval)^0x0)]
  4453  5368  53 41             	mov	[1+((?___fltol)^0x0)],a
  4454  536A  51 24             	mov	a,[2+((printf@fval)^0x0)]
  4455  536C  53 42             	mov	[2+((?___fltol)^0x0)],a
  4456  536E  51 25             	mov	a,[3+((printf@fval)^0x0)]
  4457  5370  53 43             	mov	[3+((?___fltol)^0x0)],a
  4458  5372  71 80             	or	f, 0x80	;select multiple RAM page mode
  4459                          	
  4460  5374  7C 67F1           	xcall	___fltol
  4461                          	
  4462  5377  70 CF             	and	f, 0xCF   ;select user reg space
  4463  5379  62 D0 00          	mov	reg[CUR_PP],0
  4464  537C  51 40             	mov	a,[0+((0+?___fltol)^0x0)]
  4465  537E  53 26             	mov	[0+((printf@_val)^0x0)],a
  4466  5380  51 41             	mov	a,[1+((0+?___fltol)^0x0)]
  4467  5382  53 27             	mov	[1+((printf@_val)^0x0)],a
  4468  5384  51 42             	mov	a,[2+((0+?___fltol)^0x0)]
  4469  5386  53 28             	mov	[2+((printf@_val)^0x0)],a
  4470  5388  51 43             	mov	a,[3+((0+?___fltol)^0x0)]
  4471  538A  53 29             	mov	[3+((printf@_val)^0x0)],a
  4472                          	line	1119
  4473                          ;doprnt.c: 1119: fval -= (double)_val._val;
  4474  538C  51 26             	mov	a,[0+((printf@_val)^0x0)]
  4475  538E  53 40             	mov	[0+((?___lltofl)^0x0)],a
  4476  5390  51 27             	mov	a,[1+((printf@_val)^0x0)]
  4477  5392  53 41             	mov	[1+((?___lltofl)^0x0)],a
  4478  5394  51 28             	mov	a,[2+((printf@_val)^0x0)]
  4479  5396  53 42             	mov	[2+((?___lltofl)^0x0)],a
  4480  5398  51 29             	mov	a,[3+((printf@_val)^0x0)]
  4481  539A  53 43             	mov	[3+((?___lltofl)^0x0)],a
  4482  539C  71 80             	or	f, 0x80	;select multiple RAM page mode
  4483                          	
  4484  539E  7C 6B14           	xcall	___lltofl
  4485                          	
  4486  53A1  70 CF             	and	f, 0xCF   ;select user reg space
  4487  53A3  62 D0 00          	mov	reg[CUR_PP],0
  4488  53A6  51 40             	mov	a,[0+((0+?___lltofl)^0x0)]
  4489  53A8  53 44             	mov	[0+((0+?___flsub+04h)^0x0)],a
  4490  53AA  51 41             	mov	a,[1+((0+?___lltofl)^0x0)]
  4491  53AC  53 45             	mov	[1+((0+?___flsub+04h)^0x0)],a
  4492  53AE  51 42             	mov	a,[2+((0+?___lltofl)^0x0)]
  4493  53B0  53 46             	mov	[2+((0+?___flsub+04h)^0x0)],a
  4494  53B2  51 43             	mov	a,[3+((0+?___lltofl)^0x0)]
  4495  53B4  53 47             	mov	[3+((0+?___flsub+04h)^0x0)],a
  4496  53B6  51 22             	mov	a,[0+((printf@fval)^0x0)]
  4497  53B8  53 40             	mov	[0+((?___flsub)^0x0)],a
  4498  53BA  51 23             	mov	a,[1+((printf@fval)^0x0)]
  4499  53BC  53 41             	mov	[1+((?___flsub)^0x0)],a
  4500  53BE  51 24             	mov	a,[2+((printf@fval)^0x0)]
  4501  53C0  53 42             	mov	[2+((?___flsub)^0x0)],a
  4502  53C2  51 25             	mov	a,[3+((printf@fval)^0x0)]
  4503  53C4  53 43             	mov	[3+((?___flsub)^0x0)],a
  4504  53C6  71 80             	or	f, 0x80	;select multiple RAM page mode
  4505                          	
  4506  53C8  7C 6797           	xcall	___flsub
  4507                          	
  4508  53CB  70 CF             	and	f, 0xCF   ;select user reg space
  4509  53CD  62 D0 00          	mov	reg[CUR_PP],0
  4510  53D0  51 40             	mov	a,[0+((0+?___flsub)^0x0)]
  4511  53D2  53 22             	mov	[0+((printf@fval)^0x0)],a
  4512  53D4  51 41             	mov	a,[1+((0+?___flsub)^0x0)]
  4513  53D6  53 23             	mov	[1+((printf@fval)^0x0)],a
  4514  53D8  51 42             	mov	a,[2+((0+?___flsub)^0x0)]
  4515  53DA  53 24             	mov	[2+((printf@fval)^0x0)],a
  4516  53DC  51 43             	mov	a,[3+((0+?___flsub)^0x0)]
  4517  53DE  53 25             	mov	[3+((printf@fval)^0x0)],a
  4518                          	line	1120
  4519                          ;doprnt.c: 1120: exp = 0;
  4520  53E0  50 00             	mov	a,<(0)
  4521  53E2  70 CF             	and	f, 0xCF   ;select user reg space
  4522  53E4  62 D0 00          	mov	reg[CUR_PP],0
  4523  53E7  53 31             	mov	[1+((printf@exp)^0x0)],a
  4524  53E9  50 00             	mov	a,>(0)
  4525  53EB  53 30             	mov	[0+((printf@exp)^0x0)],a
  4526                          	line	1121
  4527                          ;			
  4528  53ED                    l152:	
  4529                          	line	1123
  4530                          ;doprnt.c: 1121: }
  4531                          ;doprnt.c: 1123: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4532  53ED  50 01             	mov	a,<((01h))
  4533  53EF  70 CF             	and	f, 0xCF   ;select user reg space
  4534  53F1  62 D0 00          	mov	reg[CUR_PP],0
  4535  53F4  53 38             	mov	[0+((printf@c)^0x0)],a
  4536  53F6  70 CF             	and	f, 0xCF   ;select user reg space
  4537  53F8  62 D0 00          	mov	reg[CUR_PP],0
  4538  53FB  51 38             	mov	a,[0+((printf@c)^0x0)]
  4539  53FD  39 0A             	cmp	a,(0Ah)
  4540  53FF  B004              	jnz	l153
  4541  5401  7D 544D           	xjmp	l154
  4542                          	line	1124
  4543                          ;			
  4544  5404                    l153:	
  4545                          ;doprnt.c: 1124: if(_val._val < dpowers[c])
  4546  5404  70 CF             	and	f, 0xCF   ;select user reg space
  4547  5406  62 D0 00          	mov	reg[CUR_PP],0
  4548  5409  51 38             	mov	a,[0+((printf@c)^0x0)]
  4549  540B  64                	asl	a
  4550  540C  64                	asl	a
  4551  540D  01 68             	add	a,<_dpowers
  4552  540F  5C                	mov	x,a
  4553  5410  50 7D             	mov	a,>_dpowers
  4554  5412  08                	push	a
  4555  5413  28                	romx
  4556  5414  53 39             	mov	[(??_printf^0x0)+23+0],a
  4557  5416  18                	pop	a
  4558  5417  75                	inc	x
  4559  5418  08                	push	a
  4560  5419  28                	romx
  4561  541A  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  4562  541C  18                	pop	a
  4563  541D  75                	inc	x
  4564  541E  08                	push	a
  4565  541F  28                	romx
  4566  5420  53 3B             	mov	[(??_printf^0x0)+23+0+2],a
  4567  5422  18                	pop	a
  4568  5423  75                	inc	x
  4569  5424  28                	romx
  4570  5425  53 3C             	mov	[(??_printf^0x0)+23+0+3],a
  4571  5427  51 29             	mov	a,[3+((printf@_val)^0x0)]
  4572  5429  3A 3C             	cmp	a,[(??_printf^0x0)+23+3]
  4573  542B  51 28             	mov	a,[2+((printf@_val)^0x0)]
  4574  542D  1A 3B             	sbb	a,[(??_printf^0x0)+23+2]
  4575  542F  51 27             	mov	a,[1+((printf@_val)^0x0)]
  4576  5431  1A 3A             	sbb	a,[(??_printf^0x0)+23+1]
  4577  5433  51 26             	mov	a,[0+((printf@_val)^0x0)]
  4578  5435  1A 39             	sbb	a,[(??_printf^0x0)+23+0]
  4579  5437  D004              	jnc	l156
  4580                          	line	1125
  4581                          ;doprnt.c: 1125: break;
  4582  5439  7D 544D           	xjmp	l154
  4583                          ;			
  4584  543C                    l156:	
  4585                          	line	1123
  4586  543C  70 CF             	and	f, 0xCF   ;select user reg space
  4587  543E  62 D0 00          	mov	reg[CUR_PP],0
  4588  5441  51 38             	mov	a,[0+((printf@c)^0x0)]
  4589  5443  01 01             	add	a,<((01h))
  4590  5445  53 38             	mov	[0+((printf@c)^0x0)],a
  4591  5447  51 38             	mov	a,[0+((printf@c)^0x0)]
  4592  5449  39 0A             	cmp	a,(0Ah)
  4593  544B  BFB8              	jnz	l153
  4594                          ;			
  4595  544D                    l154:	
  4596                          	line	1129
  4597                          ;doprnt.c: 1129: width -= prec + c + exp;
  4598  544D  70 CF             	and	f, 0xCF   ;select user reg space
  4599  544F  62 D0 00          	mov	reg[CUR_PP],0
  4600  5452  51 38             	mov	a,[0+((printf@c)^0x0)]
  4601  5454  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  4602  5456  55 39  00         	mov	[(??_printf^0x0)+23+0],0
  4603  5459  6A                	rlc	a
  4604  545A  1E 39  00         	sbb	[(??_printf^0x0)+23+0],0
  4605  545D  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  4606  545F  02 2F             	add	a,[1+((printf@prec)^0x0)]
  4607  5461  53 3C             	mov	[(??_printf^0x0)+25+0+1],a
  4608  5463  51 39             	mov	a,[(??_printf^0x0)+23+0]
  4609  5465  0A 2E             	adc	a,[0+((printf@prec)^0x0)]
  4610  5467  53 3B             	mov	[(??_printf^0x0)+25+0],a
  4611  5469  51 3C             	mov	a,[(??_printf^0x0)+25+1]
  4612  546B  02 31             	add	a,[1+((printf@exp)^0x0)]
  4613  546D  53 3E             	mov	[(??_printf^0x0)+27+0+1],a
  4614  546F  51 3B             	mov	a,[(??_printf^0x0)+25+0]
  4615  5471  0A 30             	adc	a,[0+((printf@exp)^0x0)]
  4616  5473  53 3D             	mov	[(??_printf^0x0)+27+0],a
  4617  5475  51 33             	mov	a,[1+((printf@width)^0x0)]
  4618  5477  12 3E             	sub	a,[(??_printf^0x0)+27+1]
  4619  5479  53 33             	mov	[1+((printf@width)^0x0)],a
  4620  547B  51 32             	mov	a,[0+((printf@width)^0x0)]
  4621  547D  1A 3D             	sbb	a,[(??_printf^0x0)+27+0]
  4622  547F  53 32             	mov	[0+((printf@width)^0x0)],a
  4623                          	line	1134
  4624                          ;doprnt.c: 1130: if(
  4625                          ;doprnt.c: 1134: prec)
  4626  5481  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  4627  5483  39 00             	cmp	a,>(0)
  4628  5485  B005              	jnz	u1443
  4629  5487  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  4630  5489  39 00             	cmp	a,<(0)
  4631  548B                    u1443:
  4632  548B  A012              	jz	l157
  4633                          	line	1135
  4634                          ;doprnt.c: 1135: width--;
  4635  548D  70 CF             	and	f, 0xCF   ;select user reg space
  4636  548F  62 D0 00          	mov	reg[CUR_PP],0
  4637  5492  51 33             	mov	a,[1+((printf@width)^0x0)]
  4638  5494  01 FF             	add	a,<(-1)
  4639  5496  53 33             	mov	[1+((printf@width)^0x0)],a
  4640  5498  51 32             	mov	a,[0+((printf@width)^0x0)]
  4641  549A  09 FF             	adc	a,>(-1)
  4642  549C  53 32             	mov	[0+((printf@width)^0x0)],a
  4643                          ;			
  4644  549E                    l157:	
  4645                          	line	1136
  4646                          ;doprnt.c: 1136: if(flag & 0x03)
  4647  549E  70 CF             	and	f, 0xCF   ;select user reg space
  4648  54A0  62 D0 00          	mov	reg[CUR_PP],0
  4649  54A3  51 35             	mov	a,[1+((printf@flag)^0x0)]
  4650  54A5  21 03             	and	a,<(03h)
  4651  54A7  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  4652  54A9  51 34             	mov	a,[0+((printf@flag)^0x0)]
  4653  54AB  21 00             	and	a,>(03h)
  4654  54AD  53 39             	mov	[(??_printf^0x0)+23+0],a
  4655  54AF  51 39             	mov	a,[(??_printf^0x0)+23+0]
  4656  54B1  39 00             	cmp	a,>(0)
  4657  54B3  B005              	jnz	u1453
  4658  54B5  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  4659  54B7  39 00             	cmp	a,<(0)
  4660  54B9                    u1453:
  4661  54B9  A012              	jz	l158
  4662                          	line	1137
  4663                          ;doprnt.c: 1137: width--;
  4664  54BB  70 CF             	and	f, 0xCF   ;select user reg space
  4665  54BD  62 D0 00          	mov	reg[CUR_PP],0
  4666  54C0  51 33             	mov	a,[1+((printf@width)^0x0)]
  4667  54C2  01 FF             	add	a,<(-1)
  4668  54C4  53 33             	mov	[1+((printf@width)^0x0)],a
  4669  54C6  51 32             	mov	a,[0+((printf@width)^0x0)]
  4670  54C8  09 FF             	adc	a,>(-1)
  4671  54CA  53 32             	mov	[0+((printf@width)^0x0)],a
  4672                          ;			
  4673  54CC                    l158:	
  4674                          	line	1160
  4675                          ;doprnt.c: 1155: {
  4676                          ;doprnt.c: 1160: while(width > 0) {
  4677  54CC  7D 54EE           	xjmp	l159
  4678                          ;			
  4679  54CF                    l160:	
  4680                          	line	1161
  4681                          ;doprnt.c: 1161: (putch(' ') );
  4682  54CF  50 20             	mov	a,<((020h))
  4683  54D1  70 CF             	and	f, 0xCF   ;select user reg space
  4684  54D3  62 D0 00          	mov	reg[CUR_PP],0
  4685  54D6  53 40             	mov	[0+((?_putch)^0x0)],a
  4686  54D8  71 80             	or	f, 0x80	;select multiple RAM page mode
  4687                          	
  4688  54DA  7C 62F8           	xcall	_putch
  4689                          	
  4690                          	line	1162
  4691                          ;doprnt.c: 1162: width--;
  4692  54DD  70 CF             	and	f, 0xCF   ;select user reg space
  4693  54DF  62 D0 00          	mov	reg[CUR_PP],0
  4694  54E2  51 33             	mov	a,[1+((printf@width)^0x0)]
  4695  54E4  01 FF             	add	a,<(-1)
  4696  54E6  53 33             	mov	[1+((printf@width)^0x0)],a
  4697  54E8  51 32             	mov	a,[0+((printf@width)^0x0)]
  4698  54EA  09 FF             	adc	a,>(-1)
  4699  54EC  53 32             	mov	[0+((printf@width)^0x0)],a
  4700                          	line	1163
  4701                          ;			
  4702  54EE                    l159:	
  4703                          	line	1160
  4704  54EE  70 CF             	and	f, 0xCF   ;select user reg space
  4705  54F0  62 D0 00          	mov	reg[CUR_PP],0
  4706  54F3  51 33             	mov	a,[1+((printf@width)^0x0)]
  4707  54F5  39 01             	cmp	a,<(01h)
  4708  54F7  51 32             	mov	a,[0+((printf@width)^0x0)]
  4709  54F9  31 80             	xor	a,80h
  4710  54FB  19 80             	sbb	a,(>01h)^80h
  4711  54FD  DFD1              	jnc	l160
  4712                          ;			
  4713  54FF                    l161:	
  4714                          	line	1168
  4715                          ;doprnt.c: 1163: }
  4716                          ;doprnt.c: 1168: if(flag & 0x03)
  4717  54FF  70 CF             	and	f, 0xCF   ;select user reg space
  4718  5501  62 D0 00          	mov	reg[CUR_PP],0
  4719  5504  51 35             	mov	a,[1+((printf@flag)^0x0)]
  4720  5506  21 03             	and	a,<(03h)
  4721  5508  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  4722  550A  51 34             	mov	a,[0+((printf@flag)^0x0)]
  4723  550C  21 00             	and	a,>(03h)
  4724  550E  53 39             	mov	[(??_printf^0x0)+23+0],a
  4725  5510  51 39             	mov	a,[(??_printf^0x0)+23+0]
  4726  5512  39 00             	cmp	a,>(0)
  4727  5514  B005              	jnz	u1463
  4728  5516  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  4729  5518  39 00             	cmp	a,<(0)
  4730  551A                    u1463:
  4731  551A  A00F              	jz	l162
  4732                          	line	1170
  4733                          ;doprnt.c: 1170: (putch('-') );
  4734  551C  50 2D             	mov	a,<((02Dh))
  4735  551E  70 CF             	and	f, 0xCF   ;select user reg space
  4736  5520  62 D0 00          	mov	reg[CUR_PP],0
  4737  5523  53 40             	mov	[0+((?_putch)^0x0)],a
  4738  5525  71 80             	or	f, 0x80	;select multiple RAM page mode
  4739                          	
  4740  5527  7C 62F8           	xcall	_putch
  4741                          	
  4742                          ;			
  4743  552A                    l162:	
  4744                          	line	1176
  4745                          ;doprnt.c: 1175: }
  4746                          ;doprnt.c: 1176: while(c--) {
  4747  552A  7D 559F           	xjmp	l163
  4748                          ;			
  4749  552D                    l164:	
  4750                          	line	1180
  4751                          ;doprnt.c: 1180: (putch('0' + (_val._val/dpowers[c])%10) );
  4752  552D  70 CF             	and	f, 0xCF   ;select user reg space
  4753  552F  62 D0 00          	mov	reg[CUR_PP],0
  4754  5532  51 26             	mov	a,[0+((printf@_val)^0x0)]
  4755  5534  53 40             	mov	[0+((?___lldiv)^0x0)],a
  4756  5536  51 27             	mov	a,[1+((printf@_val)^0x0)]
  4757  5538  53 41             	mov	[1+((?___lldiv)^0x0)],a
  4758  553A  51 28             	mov	a,[2+((printf@_val)^0x0)]
  4759  553C  53 42             	mov	[2+((?___lldiv)^0x0)],a
  4760  553E  51 29             	mov	a,[3+((printf@_val)^0x0)]
  4761  5540  53 43             	mov	[3+((?___lldiv)^0x0)],a
  4762  5542  51 38             	mov	a,[0+((printf@c)^0x0)]
  4763  5544  64                	asl	a
  4764  5545  64                	asl	a
  4765  5546  01 68             	add	a,<_dpowers
  4766  5548  5C                	mov	x,a
  4767  5549  50 7D             	mov	a,>_dpowers
  4768  554B  08                	push	a
  4769  554C  28                	romx
  4770  554D  53 44             	mov	[0+((0+?___lldiv+04h)^0x0)],a
  4771  554F  18                	pop	a
  4772  5550  75                	inc	x
  4773  5551  08                	push	a
  4774  5552  28                	romx
  4775  5553  53 45             	mov	[1+((0+?___lldiv+04h)^0x0)],a
  4776  5555  18                	pop	a
  4777  5556  75                	inc	x
  4778  5557  08                	push	a
  4779  5558  28                	romx
  4780  5559  53 46             	mov	[2+((0+?___lldiv+04h)^0x0)],a
  4781  555B  18                	pop	a
  4782  555C  75                	inc	x
  4783  555D  28                	romx
  4784  555E  53 47             	mov	[3+((0+?___lldiv+04h)^0x0)],a
  4785  5560  71 80             	or	f, 0x80	;select multiple RAM page mode
  4786                          	
  4787  5562  7C 658D           	xcall	___lldiv
  4788                          	
  4789  5565  70 CF             	and	f, 0xCF   ;select user reg space
  4790  5567  62 D0 00          	mov	reg[CUR_PP],0
  4791  556A  51 40             	mov	a,[0+((0+?___lldiv)^0x0)]
  4792  556C  53 40             	mov	[0+((?___llmod)^0x0)],a
  4793  556E  51 41             	mov	a,[1+((0+?___lldiv)^0x0)]
  4794  5570  53 41             	mov	[1+((?___llmod)^0x0)],a
  4795  5572  51 42             	mov	a,[2+((0+?___lldiv)^0x0)]
  4796  5574  53 42             	mov	[2+((?___llmod)^0x0)],a
  4797  5576  51 43             	mov	a,[3+((0+?___lldiv)^0x0)]
  4798  5578  53 43             	mov	[3+((?___llmod)^0x0)],a
  4799  557A  50 00             	mov	a,<(0Ah>>24)
  4800  557C  53 44             	mov	[0+((0+?___llmod+04h)^0x0)],a
  4801  557E  50 00             	mov	a,<(0Ah>>16)
  4802  5580  53 45             	mov	[1+((0+?___llmod+04h)^0x0)],a
  4803  5582  50 00             	mov	a,<(0Ah>>8)
  4804  5584  53 46             	mov	[2+((0+?___llmod+04h)^0x0)],a
  4805  5586  50 0A             	mov	a,<(0Ah)
  4806  5588  53 47             	mov	[3+((0+?___llmod+04h)^0x0)],a
  4807  558A  71 80             	or	f, 0x80	;select multiple RAM page mode
  4808                          	
  4809  558C  7C 66B7           	xcall	___llmod
  4810                          	
  4811  558F  50 30             	mov	a,<((030h))
  4812  5591  70 CF             	and	f, 0xCF   ;select user reg space
  4813  5593  62 D0 00          	mov	reg[CUR_PP],0
  4814  5596  02 43             	add	a,[3+((0+?___llmod)^0x0)]
  4815  5598  53 40             	mov	[0+((?_putch)^0x0)],a
  4816  559A  71 80             	or	f, 0x80	;select multiple RAM page mode
  4817                          	
  4818  559C  7C 62F8           	xcall	_putch
  4819                          	
  4820                          	line	1182
  4821                          ;			
  4822  559F                    l163:	
  4823                          	line	1176
  4824  559F  70 CF             	and	f, 0xCF   ;select user reg space
  4825  55A1  62 D0 00          	mov	reg[CUR_PP],0
  4826  55A4  51 38             	mov	a,[0+((printf@c)^0x0)]
  4827  55A6  01 FF             	add	a,<((-1))
  4828  55A8  53 38             	mov	[0+((printf@c)^0x0)],a
  4829  55AA  51 38             	mov	a,[0+((printf@c)^0x0)]
  4830  55AC  39 FF             	cmp	a,(-1)
  4831  55AE  BF7E              	jnz	l164
  4832                          ;			
  4833  55B0                    l165:	
  4834                          	line	1183
  4835                          ;doprnt.c: 1182: }
  4836                          ;doprnt.c: 1183: while(exp > 0) {
  4837  55B0  7D 55D2           	xjmp	l166
  4838                          ;			
  4839  55B3                    l167:	
  4840                          	line	1184
  4841                          ;doprnt.c: 1184: (putch('0') );
  4842  55B3  50 30             	mov	a,<((030h))
  4843  55B5  70 CF             	and	f, 0xCF   ;select user reg space
  4844  55B7  62 D0 00          	mov	reg[CUR_PP],0
  4845  55BA  53 40             	mov	[0+((?_putch)^0x0)],a
  4846  55BC  71 80             	or	f, 0x80	;select multiple RAM page mode
  4847                          	
  4848  55BE  7C 62F8           	xcall	_putch
  4849                          	
  4850                          	line	1185
  4851                          ;doprnt.c: 1185: exp--;
  4852  55C1  70 CF             	and	f, 0xCF   ;select user reg space
  4853  55C3  62 D0 00          	mov	reg[CUR_PP],0
  4854  55C6  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4855  55C8  01 FF             	add	a,<(-1)
  4856  55CA  53 31             	mov	[1+((printf@exp)^0x0)],a
  4857  55CC  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4858  55CE  09 FF             	adc	a,>(-1)
  4859  55D0  53 30             	mov	[0+((printf@exp)^0x0)],a
  4860                          	line	1186
  4861                          ;			
  4862  55D2                    l166:	
  4863                          	line	1183
  4864  55D2  70 CF             	and	f, 0xCF   ;select user reg space
  4865  55D4  62 D0 00          	mov	reg[CUR_PP],0
  4866  55D7  51 31             	mov	a,[1+((printf@exp)^0x0)]
  4867  55D9  39 01             	cmp	a,<(01h)
  4868  55DB  51 30             	mov	a,[0+((printf@exp)^0x0)]
  4869  55DD  31 80             	xor	a,80h
  4870  55DF  19 80             	sbb	a,(>01h)^80h
  4871  55E1  DFD1              	jnc	l167
  4872                          ;			
  4873  55E3                    l168:	
  4874                          	line	1187
  4875                          ;doprnt.c: 1186: }
  4876                          ;doprnt.c: 1187: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4877  55E3  70 CF             	and	f, 0xCF   ;select user reg space
  4878  55E5  62 D0 00          	mov	reg[CUR_PP],0
  4879  55E8  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  4880  55EA  39 09             	cmp	a,<(09h)
  4881  55EC  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  4882  55EE  31 80             	xor	a,80h
  4883  55F0  19 80             	sbb	a,(>09h)^80h
  4884  55F2  C00D              	jc	l169
  4885                          	line	1188
  4886                          ;doprnt.c: 1188: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4887  55F4  50 08             	mov	a,<((08h))
  4888  55F6  70 CF             	and	f, 0xCF   ;select user reg space
  4889  55F8  62 D0 00          	mov	reg[CUR_PP],0
  4890  55FB  53 38             	mov	[0+((printf@c)^0x0)],a
  4891  55FD  7D 5612           	xjmp	l170
  4892                          	line	1189
  4893                          ;			
  4894  5600                    l169:	
  4895                          	line	1190
  4896                          ;doprnt.c: 1189: else
  4897                          ;doprnt.c: 1190: c = prec;
  4898  5600  50 01             	mov	a,<((01h))
  4899  5602  01 2E             	add	a,<(8000h+printf@prec)
  4900  5604  5C                	mov	x,a
  4901  5605  50 80             	mov	a,>(8000h+printf@prec)
  4902  5607  70 CF             	and	f, 0xCF   ;select user reg space
  4903  5609  60 D3             	mov	reg[0xd3],a
  4904  560B  52 00             	mov	a,[x+0]
  4905  560D  62 D0 00          	mov	reg[CUR_PP],0
  4906  5610  53 38             	mov	[0+((printf@c)^0x0)],a
  4907                          ;			
  4908  5612                    l170:	
  4909                          	line	1191
  4910                          ;doprnt.c: 1191: prec -= c;
  4911  5612  70 CF             	and	f, 0xCF   ;select user reg space
  4912  5614  62 D0 00          	mov	reg[CUR_PP],0
  4913  5617  51 38             	mov	a,[0+((printf@c)^0x0)]
  4914  5619  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  4915  561B  55 39  00         	mov	[(??_printf^0x0)+23+0],0
  4916  561E  6A                	rlc	a
  4917  561F  1E 39  00         	sbb	[(??_printf^0x0)+23+0],0
  4918  5622  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  4919  5624  12 3A             	sub	a,[(??_printf^0x0)+23+1]
  4920  5626  53 2F             	mov	[1+((printf@prec)^0x0)],a
  4921  5628  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  4922  562A  1A 39             	sbb	a,[(??_printf^0x0)+23+0]
  4923  562C  53 2E             	mov	[0+((printf@prec)^0x0)],a
  4924                          	line	1195
  4925                          ;doprnt.c: 1195: if(c)
  4926  562E  70 CF             	and	f, 0xCF   ;select user reg space
  4927  5630  62 D0 00          	mov	reg[CUR_PP],0
  4928  5633  51 38             	mov	a,[0+((printf@c)^0x0)]
  4929  5635  39 00             	cmp	a,(0)
  4930  5637  A00F              	jz	l171
  4931                          	line	1197
  4932                          ;doprnt.c: 1197: (putch('.') );
  4933  5639  50 2E             	mov	a,<((02Eh))
  4934  563B  70 CF             	and	f, 0xCF   ;select user reg space
  4935  563D  62 D0 00          	mov	reg[CUR_PP],0
  4936  5640  53 40             	mov	[0+((?_putch)^0x0)],a
  4937  5642  71 80             	or	f, 0x80	;select multiple RAM page mode
  4938                          	
  4939  5644  7C 62F8           	xcall	_putch
  4940                          	
  4941                          ;			
  4942  5647                    l171:	
  4943                          	line	1203
  4944                          ;doprnt.c: 1203: _val._val = (long)(fval * scale(c));
  4945  5647  70 CF             	and	f, 0xCF   ;select user reg space
  4946  5649  62 D0 00          	mov	reg[CUR_PP],0
  4947  564C  51 38             	mov	a,[0+((printf@c)^0x0)]
  4948  564E  53 40             	mov	[0+((?_scale)^0x0)],a
  4949  5650  71 80             	or	f, 0x80	;select multiple RAM page mode
  4950                          	
  4951  5652  7C 5B67           	xcall	_scale
  4952                          	
  4953  5655  70 CF             	and	f, 0xCF   ;select user reg space
  4954  5657  62 D0 00          	mov	reg[CUR_PP],0
  4955  565A  51 40             	mov	a,[0+((0+?_scale)^0x0)]
  4956  565C  53 5D             	mov	[0+((?___flmul)^0x0)],a
  4957  565E  51 41             	mov	a,[1+((0+?_scale)^0x0)]
  4958  5660  53 5E             	mov	[1+((?___flmul)^0x0)],a
  4959  5662  51 42             	mov	a,[2+((0+?_scale)^0x0)]
  4960  5664  53 5F             	mov	[2+((?___flmul)^0x0)],a
  4961  5666  51 43             	mov	a,[3+((0+?_scale)^0x0)]
  4962  5668  53 60             	mov	[3+((?___flmul)^0x0)],a
  4963  566A  51 22             	mov	a,[0+((printf@fval)^0x0)]
  4964  566C  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  4965  566E  51 23             	mov	a,[1+((printf@fval)^0x0)]
  4966  5670  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  4967  5672  51 24             	mov	a,[2+((printf@fval)^0x0)]
  4968  5674  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  4969  5676  51 25             	mov	a,[3+((printf@fval)^0x0)]
  4970  5678  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  4971  567A  71 80             	or	f, 0x80	;select multiple RAM page mode
  4972                          	
  4973  567C  7C 7680           	xcall	___flmul
  4974                          	
  4975  567F  70 CF             	and	f, 0xCF   ;select user reg space
  4976  5681  62 D0 00          	mov	reg[CUR_PP],0
  4977  5684  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  4978  5686  53 40             	mov	[0+((?___fltol)^0x0)],a
  4979  5688  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  4980  568A  53 41             	mov	[1+((?___fltol)^0x0)],a
  4981  568C  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  4982  568E  53 42             	mov	[2+((?___fltol)^0x0)],a
  4983  5690  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  4984  5692  53 43             	mov	[3+((?___fltol)^0x0)],a
  4985  5694  71 80             	or	f, 0x80	;select multiple RAM page mode
  4986                          	
  4987  5696  7C 67F1           	xcall	___fltol
  4988                          	
  4989  5699  70 CF             	and	f, 0xCF   ;select user reg space
  4990  569B  62 D0 00          	mov	reg[CUR_PP],0
  4991  569E  51 40             	mov	a,[0+((0+?___fltol)^0x0)]
  4992  56A0  53 26             	mov	[0+((printf@_val)^0x0)],a
  4993  56A2  51 41             	mov	a,[1+((0+?___fltol)^0x0)]
  4994  56A4  53 27             	mov	[1+((printf@_val)^0x0)],a
  4995  56A6  51 42             	mov	a,[2+((0+?___fltol)^0x0)]
  4996  56A8  53 28             	mov	[2+((printf@_val)^0x0)],a
  4997  56AA  51 43             	mov	a,[3+((0+?___fltol)^0x0)]
  4998  56AC  53 29             	mov	[3+((printf@_val)^0x0)],a
  4999                          	line	1204
  5000                          ;doprnt.c: 1204: while(c--) {
  5001  56AE  7D 5770           	xjmp	l172
  5002                          ;			
  5003  56B1                    l173:	
  5004                          	line	1205
  5005                          ;doprnt.c: 1205: (putch('0' + (_val._val/dpowers[c])%10) );
  5006  56B1  70 CF             	and	f, 0xCF   ;select user reg space
  5007  56B3  62 D0 00          	mov	reg[CUR_PP],0
  5008  56B6  51 26             	mov	a,[0+((printf@_val)^0x0)]
  5009  56B8  53 40             	mov	[0+((?___lldiv)^0x0)],a
  5010  56BA  51 27             	mov	a,[1+((printf@_val)^0x0)]
  5011  56BC  53 41             	mov	[1+((?___lldiv)^0x0)],a
  5012  56BE  51 28             	mov	a,[2+((printf@_val)^0x0)]
  5013  56C0  53 42             	mov	[2+((?___lldiv)^0x0)],a
  5014  56C2  51 29             	mov	a,[3+((printf@_val)^0x0)]
  5015  56C4  53 43             	mov	[3+((?___lldiv)^0x0)],a
  5016  56C6  51 38             	mov	a,[0+((printf@c)^0x0)]
  5017  56C8  64                	asl	a
  5018  56C9  64                	asl	a
  5019  56CA  01 68             	add	a,<_dpowers
  5020  56CC  5C                	mov	x,a
  5021  56CD  50 7D             	mov	a,>_dpowers
  5022  56CF  08                	push	a
  5023  56D0  28                	romx
  5024  56D1  53 44             	mov	[0+((0+?___lldiv+04h)^0x0)],a
  5025  56D3  18                	pop	a
  5026  56D4  75                	inc	x
  5027  56D5  08                	push	a
  5028  56D6  28                	romx
  5029  56D7  53 45             	mov	[1+((0+?___lldiv+04h)^0x0)],a
  5030  56D9  18                	pop	a
  5031  56DA  75                	inc	x
  5032  56DB  08                	push	a
  5033  56DC  28                	romx
  5034  56DD  53 46             	mov	[2+((0+?___lldiv+04h)^0x0)],a
  5035  56DF  18                	pop	a
  5036  56E0  75                	inc	x
  5037  56E1  28                	romx
  5038  56E2  53 47             	mov	[3+((0+?___lldiv+04h)^0x0)],a
  5039  56E4  71 80             	or	f, 0x80	;select multiple RAM page mode
  5040                          	
  5041  56E6  7C 658D           	xcall	___lldiv
  5042                          	
  5043  56E9  70 CF             	and	f, 0xCF   ;select user reg space
  5044  56EB  62 D0 00          	mov	reg[CUR_PP],0
  5045  56EE  51 40             	mov	a,[0+((0+?___lldiv)^0x0)]
  5046  56F0  53 40             	mov	[0+((?___llmod)^0x0)],a
  5047  56F2  51 41             	mov	a,[1+((0+?___lldiv)^0x0)]
  5048  56F4  53 41             	mov	[1+((?___llmod)^0x0)],a
  5049  56F6  51 42             	mov	a,[2+((0+?___lldiv)^0x0)]
  5050  56F8  53 42             	mov	[2+((?___llmod)^0x0)],a
  5051  56FA  51 43             	mov	a,[3+((0+?___lldiv)^0x0)]
  5052  56FC  53 43             	mov	[3+((?___llmod)^0x0)],a
  5053  56FE  50 00             	mov	a,<(0Ah>>24)
  5054  5700  53 44             	mov	[0+((0+?___llmod+04h)^0x0)],a
  5055  5702  50 00             	mov	a,<(0Ah>>16)
  5056  5704  53 45             	mov	[1+((0+?___llmod+04h)^0x0)],a
  5057  5706  50 00             	mov	a,<(0Ah>>8)
  5058  5708  53 46             	mov	[2+((0+?___llmod+04h)^0x0)],a
  5059  570A  50 0A             	mov	a,<(0Ah)
  5060  570C  53 47             	mov	[3+((0+?___llmod+04h)^0x0)],a
  5061  570E  71 80             	or	f, 0x80	;select multiple RAM page mode
  5062                          	
  5063  5710  7C 66B7           	xcall	___llmod
  5064                          	
  5065  5713  50 30             	mov	a,<((030h))
  5066  5715  70 CF             	and	f, 0xCF   ;select user reg space
  5067  5717  62 D0 00          	mov	reg[CUR_PP],0
  5068  571A  02 43             	add	a,[3+((0+?___llmod)^0x0)]
  5069  571C  53 40             	mov	[0+((?_putch)^0x0)],a
  5070  571E  71 80             	or	f, 0x80	;select multiple RAM page mode
  5071                          	
  5072  5720  7C 62F8           	xcall	_putch
  5073                          	
  5074                          	line	1206
  5075                          ;doprnt.c: 1206: _val._val %= dpowers[c];
  5076  5723  70 CF             	and	f, 0xCF   ;select user reg space
  5077  5725  62 D0 00          	mov	reg[CUR_PP],0
  5078  5728  51 26             	mov	a,[0+((printf@_val)^0x0)]
  5079  572A  53 40             	mov	[0+((?___llmod)^0x0)],a
  5080  572C  51 27             	mov	a,[1+((printf@_val)^0x0)]
  5081  572E  53 41             	mov	[1+((?___llmod)^0x0)],a
  5082  5730  51 28             	mov	a,[2+((printf@_val)^0x0)]
  5083  5732  53 42             	mov	[2+((?___llmod)^0x0)],a
  5084  5734  51 29             	mov	a,[3+((printf@_val)^0x0)]
  5085  5736  53 43             	mov	[3+((?___llmod)^0x0)],a
  5086  5738  51 38             	mov	a,[0+((printf@c)^0x0)]
  5087  573A  64                	asl	a
  5088  573B  64                	asl	a
  5089  573C  01 68             	add	a,<_dpowers
  5090  573E  5C                	mov	x,a
  5091  573F  50 7D             	mov	a,>_dpowers
  5092  5741  08                	push	a
  5093  5742  28                	romx
  5094  5743  53 44             	mov	[0+((0+?___llmod+04h)^0x0)],a
  5095  5745  18                	pop	a
  5096  5746  75                	inc	x
  5097  5747  08                	push	a
  5098  5748  28                	romx
  5099  5749  53 45             	mov	[1+((0+?___llmod+04h)^0x0)],a
  5100  574B  18                	pop	a
  5101  574C  75                	inc	x
  5102  574D  08                	push	a
  5103  574E  28                	romx
  5104  574F  53 46             	mov	[2+((0+?___llmod+04h)^0x0)],a
  5105  5751  18                	pop	a
  5106  5752  75                	inc	x
  5107  5753  28                	romx
  5108  5754  53 47             	mov	[3+((0+?___llmod+04h)^0x0)],a
  5109  5756  71 80             	or	f, 0x80	;select multiple RAM page mode
  5110                          	
  5111  5758  7C 66B7           	xcall	___llmod
  5112                          	
  5113  575B  70 CF             	and	f, 0xCF   ;select user reg space
  5114  575D  62 D0 00          	mov	reg[CUR_PP],0
  5115  5760  51 40             	mov	a,[0+((0+?___llmod)^0x0)]
  5116  5762  53 26             	mov	[0+((printf@_val)^0x0)],a
  5117  5764  51 41             	mov	a,[1+((0+?___llmod)^0x0)]
  5118  5766  53 27             	mov	[1+((printf@_val)^0x0)],a
  5119  5768  51 42             	mov	a,[2+((0+?___llmod)^0x0)]
  5120  576A  53 28             	mov	[2+((printf@_val)^0x0)],a
  5121  576C  51 43             	mov	a,[3+((0+?___llmod)^0x0)]
  5122  576E  53 29             	mov	[3+((printf@_val)^0x0)],a
  5123                          	line	1207
  5124                          ;			
  5125  5770                    l172:	
  5126                          	line	1204
  5127  5770  70 CF             	and	f, 0xCF   ;select user reg space
  5128  5772  62 D0 00          	mov	reg[CUR_PP],0
  5129  5775  51 38             	mov	a,[0+((printf@c)^0x0)]
  5130  5777  01 FF             	add	a,<((-1))
  5131  5779  53 38             	mov	[0+((printf@c)^0x0)],a
  5132  577B  51 38             	mov	a,[0+((printf@c)^0x0)]
  5133  577D  39 FF             	cmp	a,(-1)
  5134  577F  BF31              	jnz	l173
  5135                          ;			
  5136  5781                    l174:	
  5137                          	line	1209
  5138                          ;doprnt.c: 1207: }
  5139                          ;doprnt.c: 1209: while(prec) {
  5140  5781  7D 57A3           	xjmp	l175
  5141                          ;			
  5142  5784                    l176:	
  5143                          	line	1210
  5144                          ;doprnt.c: 1210: (putch('0') );
  5145  5784  50 30             	mov	a,<((030h))
  5146  5786  70 CF             	and	f, 0xCF   ;select user reg space
  5147  5788  62 D0 00          	mov	reg[CUR_PP],0
  5148  578B  53 40             	mov	[0+((?_putch)^0x0)],a
  5149  578D  71 80             	or	f, 0x80	;select multiple RAM page mode
  5150                          	
  5151  578F  7C 62F8           	xcall	_putch
  5152                          	
  5153                          	line	1211
  5154                          ;doprnt.c: 1211: prec--;
  5155  5792  70 CF             	and	f, 0xCF   ;select user reg space
  5156  5794  62 D0 00          	mov	reg[CUR_PP],0
  5157  5797  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  5158  5799  01 FF             	add	a,<(-1)
  5159  579B  53 2F             	mov	[1+((printf@prec)^0x0)],a
  5160  579D  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  5161  579F  09 FF             	adc	a,>(-1)
  5162  57A1  53 2E             	mov	[0+((printf@prec)^0x0)],a
  5163                          	line	1212
  5164                          ;			
  5165  57A3                    l175:	
  5166                          	line	1209
  5167  57A3  70 CF             	and	f, 0xCF   ;select user reg space
  5168  57A5  62 D0 00          	mov	reg[CUR_PP],0
  5169  57A8  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  5170  57AA  39 00             	cmp	a,>(0)
  5171  57AC  B005              	jnz	u1473
  5172  57AE  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  5173  57B0  39 00             	cmp	a,<(0)
  5174  57B2                    u1473:
  5175  57B2  BFD1              	jnz	l176
  5176                          ;			
  5177  57B4                    l177:	
  5178                          	line	1219
  5179                          ;doprnt.c: 1212: }
  5180                          ;doprnt.c: 1219: continue;
  5181  57B4  7D 5988           	xjmp	l121
  5182                          	line	1220
  5183                          ;			
  5184  57B7                    l140:	
  5185                          	line	1264
  5186                          ;doprnt.c: 1220: }
  5187                          ;doprnt.c: 1264: if(prec == 0 && _val._val == 0)
  5188  57B7  70 CF             	and	f, 0xCF   ;select user reg space
  5189  57B9  62 D0 00          	mov	reg[CUR_PP],0
  5190  57BC  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  5191  57BE  39 00             	cmp	a,>(0)
  5192  57C0  B005              	jnz	u1483
  5193  57C2  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  5194  57C4  39 00             	cmp	a,<(0)
  5195  57C6                    u1483:
  5196  57C6  B02F              	jnz	l178
  5197  57C8  70 CF             	and	f, 0xCF   ;select user reg space
  5198  57CA  62 D0 00          	mov	reg[CUR_PP],0
  5199  57CD  51 26             	mov	a,[0+((printf@_val)^0x0)]
  5200  57CF  39 00             	cmp	a,<(0>>24)
  5201  57D1  B011              	jnz	u1493
  5202  57D3  51 27             	mov	a,[1+((printf@_val)^0x0)]
  5203  57D5  39 00             	cmp	a,<(0>>16)
  5204  57D7  B00B              	jnz	u1493
  5205  57D9  51 28             	mov	a,[2+((printf@_val)^0x0)]
  5206  57DB  39 00             	cmp	a,<(0>>8)
  5207  57DD  B005              	jnz	u1493
  5208  57DF  51 29             	mov	a,[3+((printf@_val)^0x0)]
  5209  57E1  39 00             	cmp	a,<(0)
  5210  57E3                    u1493:
  5211  57E3  B012              	jnz	l178
  5212                          	line	1265
  5213                          ;doprnt.c: 1265: prec++;
  5214  57E5  70 CF             	and	f, 0xCF   ;select user reg space
  5215  57E7  62 D0 00          	mov	reg[CUR_PP],0
  5216  57EA  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  5217  57EC  01 01             	add	a,<(01h)
  5218  57EE  53 2F             	mov	[1+((printf@prec)^0x0)],a
  5219  57F0  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  5220  57F2  09 00             	adc	a,>(01h)
  5221  57F4  53 2E             	mov	[0+((printf@prec)^0x0)],a
  5222                          ;			
  5223  57F6                    l178:	
  5224                          	line	1313
  5225                          ;doprnt.c: 1313: if(c < prec)
  5226  57F6  70 CF             	and	f, 0xCF   ;select user reg space
  5227  57F8  62 D0 00          	mov	reg[CUR_PP],0
  5228  57FB  51 38             	mov	a,[0+((printf@c)^0x0)]
  5229  57FD  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  5230  57FF  55 39  00         	mov	[(??_printf^0x0)+23+0],0
  5231  5802  6A                	rlc	a
  5232  5803  1E 39  00         	sbb	[(??_printf^0x0)+23+0],0
  5233  5806  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  5234  5808  31 80             	xor	a,80h
  5235  580A  53 3B             	mov	[(??_printf^0x0)+25+0],a
  5236  580C  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  5237  580E  3A 2F             	cmp	a,[1+((printf@prec)^0x0)]
  5238  5810  51 39             	mov	a,[(??_printf^0x0)+23+0]
  5239  5812  31 80             	xor	a,80h
  5240  5814  1A 3B             	sbb	a,[(??_printf^0x0)+25+0]
  5241  5816  D016              	jnc	l179
  5242                          	line	1314
  5243                          ;doprnt.c: 1314: c = prec;
  5244  5818  50 01             	mov	a,<((01h))
  5245  581A  01 2E             	add	a,<(8000h+printf@prec)
  5246  581C  5C                	mov	x,a
  5247  581D  50 80             	mov	a,>(8000h+printf@prec)
  5248  581F  70 CF             	and	f, 0xCF   ;select user reg space
  5249  5821  60 D3             	mov	reg[0xd3],a
  5250  5823  52 00             	mov	a,[x+0]
  5251  5825  62 D0 00          	mov	reg[CUR_PP],0
  5252  5828  53 38             	mov	[0+((printf@c)^0x0)],a
  5253  582A  7D 585C           	xjmp	l180
  5254                          	line	1315
  5255                          ;			
  5256  582D                    l179:	
  5257                          ;doprnt.c: 1315: else if(prec < c)
  5258  582D  70 CF             	and	f, 0xCF   ;select user reg space
  5259  582F  62 D0 00          	mov	reg[CUR_PP],0
  5260  5832  51 38             	mov	a,[0+((printf@c)^0x0)]
  5261  5834  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  5262  5836  55 39  00         	mov	[(??_printf^0x0)+23+0],0
  5263  5839  6A                	rlc	a
  5264  583A  1E 39  00         	sbb	[(??_printf^0x0)+23+0],0
  5265  583D  36 39  80         	xor	[(??_printf^0x0)+23+0],80h
  5266  5840  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  5267  5842  31 80             	xor	a,80h
  5268  5844  3A 39             	cmp	a,[(??_printf^0x0)+23+0]
  5269  5846  B005              	jnz	u1503
  5270  5848  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  5271  584A  3A 3A             	cmp	a,[(??_printf^0x0)+23+1]
  5272  584C                    u1503:
  5273  584C  D00F              	jnc	l180
  5274                          	line	1316
  5275                          ;doprnt.c: 1316: prec = c;
  5276  584E  70 CF             	and	f, 0xCF   ;select user reg space
  5277  5850  62 D0 00          	mov	reg[CUR_PP],0
  5278  5853  51 38             	mov	a,[0+((printf@c)^0x0)]
  5279  5855  53 2F             	mov	[1+((printf@prec)^0x0)],a
  5280  5857  6A                	rlc	a
  5281  5858  53 2E             	mov	[0+((printf@prec)^0x0)],a
  5282  585A  1C 2E             	sbb	[0+((printf@prec)^0x0)],a
  5283                          ;			
  5284  585C                    l181:	
  5285                          	line	1319
  5286                          ;			
  5287  585C                    l180:	
  5288                          ;doprnt.c: 1319: if(width && flag & 0x03)
  5289  585C  70 CF             	and	f, 0xCF   ;select user reg space
  5290  585E  62 D0 00          	mov	reg[CUR_PP],0
  5291  5861  51 32             	mov	a,[0+((printf@width)^0x0)]
  5292  5863  39 00             	cmp	a,>(0)
  5293  5865  B005              	jnz	u1513
  5294  5867  51 33             	mov	a,[1+((printf@width)^0x0)]
  5295  5869  39 00             	cmp	a,<(0)
  5296  586B                    u1513:
  5297  586B  A02F              	jz	l182
  5298  586D  70 CF             	and	f, 0xCF   ;select user reg space
  5299  586F  62 D0 00          	mov	reg[CUR_PP],0
  5300  5872  51 35             	mov	a,[1+((printf@flag)^0x0)]
  5301  5874  21 03             	and	a,<(03h)
  5302  5876  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  5303  5878  51 34             	mov	a,[0+((printf@flag)^0x0)]
  5304  587A  21 00             	and	a,>(03h)
  5305  587C  53 39             	mov	[(??_printf^0x0)+23+0],a
  5306  587E  51 39             	mov	a,[(??_printf^0x0)+23+0]
  5307  5880  39 00             	cmp	a,>(0)
  5308  5882  B005              	jnz	u1523
  5309  5884  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  5310  5886  39 00             	cmp	a,<(0)
  5311  5888                    u1523:
  5312  5888  A012              	jz	l182
  5313                          	line	1320
  5314                          ;doprnt.c: 1320: width--;
  5315  588A  70 CF             	and	f, 0xCF   ;select user reg space
  5316  588C  62 D0 00          	mov	reg[CUR_PP],0
  5317  588F  51 33             	mov	a,[1+((printf@width)^0x0)]
  5318  5891  01 FF             	add	a,<(-1)
  5319  5893  53 33             	mov	[1+((printf@width)^0x0)],a
  5320  5895  51 32             	mov	a,[0+((printf@width)^0x0)]
  5321  5897  09 FF             	adc	a,>(-1)
  5322  5899  53 32             	mov	[0+((printf@width)^0x0)],a
  5323                          ;			
  5324  589B                    l182:	
  5325                          	line	1322
  5326                          ;doprnt.c: 1322: if(width > prec)
  5327  589B  70 CF             	and	f, 0xCF   ;select user reg space
  5328  589D  62 D0 00          	mov	reg[CUR_PP],0
  5329  58A0  51 32             	mov	a,[0+((printf@width)^0x0)]
  5330  58A2  31 80             	xor	a,80h
  5331  58A4  53 39             	mov	[(??_printf^0x0)+23+0],a
  5332  58A6  51 2F             	mov	a,[1+((printf@prec)^0x0)]
  5333  58A8  3A 33             	cmp	a,[1+((printf@width)^0x0)]
  5334  58AA  51 2E             	mov	a,[0+((printf@prec)^0x0)]
  5335  58AC  31 80             	xor	a,80h
  5336  58AE  1A 39             	sbb	a,[(??_printf^0x0)+23+0]
  5337  58B0  D015              	jnc	l183
  5338                          	line	1323
  5339                          ;doprnt.c: 1323: width -= prec;
  5340  58B2  70 CF             	and	f, 0xCF   ;select user reg space
  5341  58B4  62 D0 00          	mov	reg[CUR_PP],0
  5342  58B7  51 33             	mov	a,[1+((printf@width)^0x0)]
  5343  58B9  12 2F             	sub	a,[1+((printf@prec)^0x0)]
  5344  58BB  53 33             	mov	[1+((printf@width)^0x0)],a
  5345  58BD  51 32             	mov	a,[0+((printf@width)^0x0)]
  5346  58BF  1A 2E             	sbb	a,[0+((printf@prec)^0x0)]
  5347  58C1  53 32             	mov	[0+((printf@width)^0x0)],a
  5348  58C3  7D 58D3           	xjmp	l184
  5349                          	line	1324
  5350                          ;			
  5351  58C6                    l183:	
  5352                          	line	1325
  5353                          ;doprnt.c: 1324: else
  5354                          ;doprnt.c: 1325: width = 0;
  5355  58C6  50 00             	mov	a,<(0)
  5356  58C8  70 CF             	and	f, 0xCF   ;select user reg space
  5357  58CA  62 D0 00          	mov	reg[CUR_PP],0
  5358  58CD  53 33             	mov	[1+((printf@width)^0x0)],a
  5359  58CF  50 00             	mov	a,>(0)
  5360  58D1  53 32             	mov	[0+((printf@width)^0x0)],a
  5361                          ;			
  5362  58D3                    l184:	
  5363                          	line	1353
  5364                          ;doprnt.c: 1353: if(width > c)
  5365  58D3  70 CF             	and	f, 0xCF   ;select user reg space
  5366  58D5  62 D0 00          	mov	reg[CUR_PP],0
  5367  58D8  51 38             	mov	a,[0+((printf@c)^0x0)]
  5368  58DA  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  5369  58DC  55 39  00         	mov	[(??_printf^0x0)+23+0],0
  5370  58DF  6A                	rlc	a
  5371  58E0  1E 39  00         	sbb	[(??_printf^0x0)+23+0],0
  5372  58E3  51 32             	mov	a,[0+((printf@width)^0x0)]
  5373  58E5  31 80             	xor	a,80h
  5374  58E7  53 3B             	mov	[(??_printf^0x0)+25+0],a
  5375  58E9  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  5376  58EB  3A 33             	cmp	a,[1+((printf@width)^0x0)]
  5377  58ED  51 39             	mov	a,[(??_printf^0x0)+23+0]
  5378  58EF  31 80             	xor	a,80h
  5379  58F1  1A 3B             	sbb	a,[(??_printf^0x0)+25+0]
  5380  58F3  D020              	jnc	l185
  5381                          	line	1354
  5382                          ;doprnt.c: 1354: width -= c;
  5383  58F5  70 CF             	and	f, 0xCF   ;select user reg space
  5384  58F7  62 D0 00          	mov	reg[CUR_PP],0
  5385  58FA  51 38             	mov	a,[0+((printf@c)^0x0)]
  5386  58FC  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  5387  58FE  55 39  00         	mov	[(??_printf^0x0)+23+0],0
  5388  5901  6A                	rlc	a
  5389  5902  1E 39  00         	sbb	[(??_printf^0x0)+23+0],0
  5390  5905  51 33             	mov	a,[1+((printf@width)^0x0)]
  5391  5907  12 3A             	sub	a,[(??_printf^0x0)+23+1]
  5392  5909  53 33             	mov	[1+((printf@width)^0x0)],a
  5393  590B  51 32             	mov	a,[0+((printf@width)^0x0)]
  5394  590D  1A 39             	sbb	a,[(??_printf^0x0)+23+0]
  5395  590F  53 32             	mov	[0+((printf@width)^0x0)],a
  5396  5911  7D 5921           	xjmp	l186
  5397                          	line	1355
  5398                          ;			
  5399  5914                    l185:	
  5400                          	line	1356
  5401                          ;doprnt.c: 1355: else
  5402                          ;doprnt.c: 1356: width = 0;
  5403  5914  50 00             	mov	a,<(0)
  5404  5916  70 CF             	and	f, 0xCF   ;select user reg space
  5405  5918  62 D0 00          	mov	reg[CUR_PP],0
  5406  591B  53 33             	mov	[1+((printf@width)^0x0)],a
  5407  591D  50 00             	mov	a,>(0)
  5408  591F  53 32             	mov	[0+((printf@width)^0x0)],a
  5409                          ;			
  5410  5921                    l186:	
  5411                          	line	1397
  5412                          ;doprnt.c: 1391: {
  5413                          ;doprnt.c: 1393: if(width
  5414                          ;doprnt.c: 1397: )
  5415  5921  70 CF             	and	f, 0xCF   ;select user reg space
  5416  5923  62 D0 00          	mov	reg[CUR_PP],0
  5417  5926  51 32             	mov	a,[0+((printf@width)^0x0)]
  5418  5928  39 00             	cmp	a,>(0)
  5419  592A  B005              	jnz	u1533
  5420  592C  51 33             	mov	a,[1+((printf@width)^0x0)]
  5421  592E  39 00             	cmp	a,<(0)
  5422  5930                    u1533:
  5423  5930  A02C              	jz	l187
  5424                          	line	1398
  5425                          ;doprnt.c: 1398: do
  5426                          ;			
  5427  5932                    l190:	
  5428                          	line	1399
  5429                          ;doprnt.c: 1399: (putch(' ') );
  5430  5932  50 20             	mov	a,<((020h))
  5431  5934  70 CF             	and	f, 0xCF   ;select user reg space
  5432  5936  62 D0 00          	mov	reg[CUR_PP],0
  5433  5939  53 40             	mov	[0+((?_putch)^0x0)],a
  5434  593B  71 80             	or	f, 0x80	;select multiple RAM page mode
  5435                          	
  5436  593D  7C 62F8           	xcall	_putch
  5437                          	
  5438                          	line	1400
  5439                          ;doprnt.c: 1400: while(--width);
  5440  5940  70 CF             	and	f, 0xCF   ;select user reg space
  5441  5942  62 D0 00          	mov	reg[CUR_PP],0
  5442  5945  51 33             	mov	a,[1+((printf@width)^0x0)]
  5443  5947  01 FF             	add	a,<(-1)
  5444  5949  53 33             	mov	[1+((printf@width)^0x0)],a
  5445  594B  51 32             	mov	a,[0+((printf@width)^0x0)]
  5446  594D  09 FF             	adc	a,>(-1)
  5447  594F  53 32             	mov	[0+((printf@width)^0x0)],a
  5448  5951  51 32             	mov	a,[0+((printf@width)^0x0)]
  5449  5953  39 00             	cmp	a,>(0)
  5450  5955  B005              	jnz	u1543
  5451  5957  51 33             	mov	a,[1+((printf@width)^0x0)]
  5452  5959  39 00             	cmp	a,<(0)
  5453  595B                    u1543:
  5454  595B  BFD6              	jnz	l190
  5455                          ;			
  5456  595D                    l189:	
  5457                          ;			
  5458  595D                    l187:	
  5459                          	line	1407
  5460                          ;doprnt.c: 1407: if(flag & 0x03)
  5461  595D  70 CF             	and	f, 0xCF   ;select user reg space
  5462  595F  62 D0 00          	mov	reg[CUR_PP],0
  5463  5962  51 35             	mov	a,[1+((printf@flag)^0x0)]
  5464  5964  21 03             	and	a,<(03h)
  5465  5966  53 3A             	mov	[(??_printf^0x0)+23+0+1],a
  5466  5968  51 34             	mov	a,[0+((printf@flag)^0x0)]
  5467  596A  21 00             	and	a,>(03h)
  5468  596C  53 39             	mov	[(??_printf^0x0)+23+0],a
  5469  596E  51 39             	mov	a,[(??_printf^0x0)+23+0]
  5470  5970  39 00             	cmp	a,>(0)
  5471  5972  B005              	jnz	u1553
  5472  5974  51 3A             	mov	a,[(??_printf^0x0)+23+1]
  5473  5976  39 00             	cmp	a,<(0)
  5474  5978                    u1553:
  5475  5978  A00F              	jz	l121
  5476                          	line	1408
  5477                          ;doprnt.c: 1408: (putch('-') );
  5478  597A  50 2D             	mov	a,<((02Dh))
  5479  597C  70 CF             	and	f, 0xCF   ;select user reg space
  5480  597E  62 D0 00          	mov	reg[CUR_PP],0
  5481  5981  53 40             	mov	[0+((?_putch)^0x0)],a
  5482  5983  71 80             	or	f, 0x80	;select multiple RAM page mode
  5483                          	
  5484  5985  7C 62F8           	xcall	_putch
  5485                          	
  5486                          ;			
  5487  5988                    l191:	
  5488                          	line	1499
  5489                          ;			
  5490  5988                    l121:	
  5491                          	line	532
  5492  5988  70 CF             	and	f, 0xCF   ;select user reg space
  5493  598A  62 D0 00          	mov	reg[CUR_PP],0
  5494  598D  51 14             	mov	a,[0+((printf@f)^0x0)]
  5495  598F  58 15             	mov	x,[1+((printf@f)^0x0)]
  5496  5991  06 15  01         	add	[1+((printf@f)^0x0)],<(01h)
  5497  5994  0E 14  00         	adc	[0+((printf@f)^0x0)],>(01h)
  5498  5997  28                	romx
  5499  5998  53 38             	mov	[0+((printf@c)^0x0)],a
  5500  599A  39 00             	cmp	a,(0)
  5501  599C  A004 7D 4DA4      	jnz	l122
  5502                          ;			
  5503  59A1                    l123:	
  5504                          	line	1501
  5505                          ;doprnt.c: 1438: }
  5506                          ;doprnt.c: 1499: }
  5507                          ;doprnt.c: 1501: alldone:
  5508                          ;			
  5509  59A1                    l137:	
  5510                          	line	1506
  5511                          ;doprnt.c: 1506: return 0;
  5512                          ;	Return value of _printf is never used
  5513  59A1  7D 59A4           	xjmp	l120
  5514                          	line	1507
  5515                          ;doprnt.c: 1507: }
  5516  59A4                    l120:
  5517                          ;			
  5518  59A4  70 CF             	and	f, 0xCF   ;select user reg space
  5519                          	
  5520  59A6  7F                	ret
  5521                          GLOBAL __end_of_printf
  5522  59A7                    	__end_of_printf:
  5523                          	FNSIZE	_printf,30,14
  5524                          ; =============== function _printf ends ============
  5525                          
  5526                          	signat	_printf,602
  5527                          	global	_delay_10ms
  5528                          	global	??_delay_10ms
  5529                          	global	?_delay_10ms
  5530                          	psect	text
  5531                          
  5532                          ; *************** function _delay_10ms *****************
  5533                          ; Defined at:
  5534                          ;		line 174 in file "./oo.c"
  5535                          ; Parameters:
  5536                          ;		None
  5537                          ; Auto variables:
  5538                          ;		counter     	       	type: short 
  5539                          ; Return value:
  5540                          ;		type: void 
  5541                          ;		size: 0
  5542                          ; Registers used:
  5543                          ;		a, CUR_PP
  5544                          ; Tracked objects:
  5545                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5546                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5547                          ;		Unchanged: 
  5548                          ; Data sizes:
  5549                          ;		Autos:    2
  5550                          ;		Params:   0
  5551                          ;		Temp:     0
  5552                          ;		Total:    2
  5553                          ; This function calls:
  5554                          ;		Nothing
  5555                          ; This function is called by:
  5556                          ;		_oo_wait_for_completion
  5557                          ; This function uses a non-reentrant model
  5558                          ; 
  5559                          	file	"./oo.c"
  5560                          	line	174
  5561  003D                    	__size_of_delay_10ms	equ	__end_of_delay_10ms-_delay_10ms
  5562                          ;oo.c: 174: void delay_10ms(){
  5563                          ;			
  5564  59A7                    _delay_10ms:	
  5565                          	opt	disable
  5566                          	line	177
  5567                          ;oo.c: 175: short counter;
  5568                          ;oo.c: 177: for (counter = 0; counter<8*430; counter++){
  5569  59A7  50 00             	mov	a,<(0)
  5570  59A9  70 CF             	and	f, 0xCF   ;select user reg space
  5571  59AB  62 D0 00          	mov	reg[CUR_PP],0
  5572  59AE  53 16             	mov	[1+((delay_10ms@counter)^0x0)],a
  5573  59B0  50 00             	mov	a,>(0)
  5574  59B2  53 15             	mov	[0+((delay_10ms@counter)^0x0)],a
  5575  59B4  51 16             	mov	a,[1+((delay_10ms@counter)^0x0)]
  5576  59B6  39 70             	cmp	a,<(0D70h)
  5577  59B8  51 15             	mov	a,[0+((delay_10ms@counter)^0x0)]
  5578  59BA  31 80             	xor	a,80h
  5579  59BC  19 8D             	sbb	a,(>0D70h)^80h
  5580  59BE  C004              	jc	l31
  5581  59C0  7D 59E1           	xjmp	l32
  5582                          ;			
  5583  59C3                    l31:	
  5584                          	line	178
  5585                          # 178 "./oo.c"
  5586  59C3  40                nop ;#
  5587                          	psect	text
  5588                          	line	177
  5589                          ;oo.c: 178: asm("nop");
  5590  59C4  70 CF             	and	f, 0xCF   ;select user reg space
  5591  59C6  62 D0 00          	mov	reg[CUR_PP],0
  5592  59C9  51 16             	mov	a,[1+((delay_10ms@counter)^0x0)]
  5593  59CB  01 01             	add	a,<(01h)
  5594  59CD  53 16             	mov	[1+((delay_10ms@counter)^0x0)],a
  5595  59CF  51 15             	mov	a,[0+((delay_10ms@counter)^0x0)]
  5596  59D1  09 00             	adc	a,>(01h)
  5597  59D3  53 15             	mov	[0+((delay_10ms@counter)^0x0)],a
  5598  59D5  51 16             	mov	a,[1+((delay_10ms@counter)^0x0)]
  5599  59D7  39 70             	cmp	a,<(0D70h)
  5600  59D9  51 15             	mov	a,[0+((delay_10ms@counter)^0x0)]
  5601  59DB  31 80             	xor	a,80h
  5602  59DD  19 8D             	sbb	a,(>0D70h)^80h
  5603  59DF  CFE3              	jc	l31
  5604                          ;			
  5605  59E1                    l32:	
  5606                          	line	180
  5607                          ;oo.c: 179: }
  5608                          ;oo.c: 180: }
  5609  59E1                    l30:
  5610                          ;			
  5611  59E1  70 CF             	and	f, 0xCF   ;select user reg space
  5612                          	
  5613  59E3  7F                	ret
  5614                          GLOBAL __end_of_delay_10ms
  5615  59E4                    	__end_of_delay_10ms:
  5616                          	FNSIZE	_delay_10ms,2,0
  5617                          ; =============== function _delay_10ms ends ============
  5618                          
  5619                          	signat	_delay_10ms,88
  5620                          	global	_oo_conversion_busy
  5621                          	global	??_oo_conversion_busy
  5622                          	global	?_oo_conversion_busy
  5623                          	psect	text
  5624                          
  5625                          ; *************** function _oo_conversion_busy *****************
  5626                          ; Defined at:
  5627                          ;		line 149 in file "./oo.c"
  5628                          ; Parameters:
  5629                          ;		None
  5630                          ; Auto variables:
  5631                          ;		None
  5632                          ; Return value:
  5633                          ;		type: unsigned char 
  5634                          ;		size: 1
  5635                          ; Registers used:
  5636                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  5637                          ; Tracked objects:
  5638                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5639                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5640                          ;		Unchanged: 
  5641                          ; Data sizes:
  5642                          ;		Autos:    0
  5643                          ;		Params:   0
  5644                          ;		Temp:     0
  5645                          ;		Total:    0
  5646                          ; This function calls:
  5647                          ;		_oo_rx_byte
  5648                          ; This function is called by:
  5649                          ;		_oo_wait_for_completion
  5650                          ; This function uses a non-reentrant model
  5651                          ; 
  5652                          	file	"./oo.c"
  5653                          	line	149
  5654  0016                    	__size_of_oo_conversion_busy	equ	__end_of_oo_conversion_busy-_oo_conversion_busy
  5655                          ;oo.c: 149: char oo_conversion_busy(){
  5656                          ;			
  5657  59E4                    _oo_conversion_busy:	
  5658                          	opt	disable
  5659                          	line	150
  5660                          ;oo.c: 150: if (oo_rx_byte() == 0x00){
  5661  59E4  71 80             	or	f, 0x80	;select multiple RAM page mode
  5662                          	
  5663  59E6  7C 7019           	xcall	_oo_rx_byte
  5664                          	
  5665  59E9  39 00             	cmp	a,(0)
  5666  59EB  B006              	jnz	l27
  5667                          	line	151
  5668                          ;oo.c: 151: return 1;
  5669  59ED  50 01             	mov	a,<((01h))
  5670  59EF  7D 59F7           	xjmp	l26
  5671                          	line	152
  5672                          ;			
  5673  59F2                    l27:	
  5674                          	line	153
  5675                          ;oo.c: 153: return 0;
  5676  59F2  50 00             	mov	a,<((0))
  5677  59F4  7D 59F7           	xjmp	l26
  5678                          	line	155
  5679                          ;oo.c: 154: }
  5680                          ;oo.c: 155: }
  5681  59F7                    l26:
  5682                          ;			
  5683  59F7  70 CF             	and	f, 0xCF   ;select user reg space
  5684                          	
  5685  59F9  7F                	ret
  5686                          GLOBAL __end_of_oo_conversion_busy
  5687  59FA                    	__end_of_oo_conversion_busy:
  5688                          	FNSIZE	_oo_conversion_busy,0,0
  5689                          ; =============== function _oo_conversion_busy ends ============
  5690                          
  5691                          	signat	_oo_conversion_busy,89
  5692                          	global	_LTRX_PutCRLF
  5693                          	global	_s_transstart
  5694                          	global	??_s_transstart
  5695                          	global	?_s_transstart
  5696                          	psect	text
  5697                          
  5698                          ; *************** function _s_transstart *****************
  5699                          ; Defined at:
  5700                          ;		line 107 in file "./shtxx.c"
  5701                          ; Parameters:
  5702                          ;		None
  5703                          ; Auto variables:
  5704                          ;		None
  5705                          ; Return value:
  5706                          ;		type: void 
  5707                          ;		size: 0
  5708                          ; Registers used:
  5709                          ;		a
  5710                          ; Tracked objects:
  5711                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5712                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5713                          ;		Unchanged: 
  5714                          ; Data sizes:
  5715                          ;		Autos:    0
  5716                          ;		Params:   0
  5717                          ;		Temp:     0
  5718                          ;		Total:    0
  5719                          ; This function calls:
  5720                          ;		_delay_1us
  5721                          ;		_delay_5us
  5722                          ; This function is called by:
  5723                          ;		_s_connectionreset
  5724                          ;		_s_measure
  5725                          ; This function uses a non-reentrant model
  5726                          ; 
  5727                          	file	"./shtxx.c"
  5728                          	line	107
  5729  005F                    	__size_of_s_transstart	equ	__end_of_s_transstart-_s_transstart
  5730                          ;shtxx.c: 100: void s_transstart(void)
  5731                          ;shtxx.c: 107: {
  5732                          ;			
  5733  59FA                    _s_transstart:	
  5734                          	opt	disable
  5735                          	line	108
  5736                          ;shtxx.c: 108: (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01)); (PRT2DR = (0==0) ? (PRT2DR&0xBF) :
                                 (PRT2DR|0x40));
  5737  59FA  70 CF             	and	f, 0xCF   ;select user reg space
  5738  59FC  5D 10             	mov	a,reg[(16)]
  5739  59FE  29 01             	or	a,<((01h))
  5740  5A00  60 10             	mov	reg[(16)],a
  5741  5A02  5D 08             	mov	a,reg[(8)]
  5742  5A04  21 BF             	and	a,<((0BFh))
  5743  5A06  60 08             	mov	reg[(8)],a
  5744                          	line	109
  5745                          ;shtxx.c: 109: delay_1us();
  5746  5A08  71 80             	or	f, 0x80	;select multiple RAM page mode
  5747                          	
  5748  5A0A  7C 6BAD           	xcall	_delay_1us
  5749                          	
  5750                          	line	110
  5751                          ;shtxx.c: 110: (PRT2DR = (1==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  5752  5A0D  70 CF             	and	f, 0xCF   ;select user reg space
  5753  5A0F  5D 08             	mov	a,reg[(8)]
  5754  5A11  29 40             	or	a,<((040h))
  5755  5A13  60 08             	mov	reg[(8)],a
  5756                          	line	111
  5757                          ;shtxx.c: 111: delay_1us();
  5758  5A15  71 80             	or	f, 0x80	;select multiple RAM page mode
  5759                          	
  5760  5A17  7C 6BAD           	xcall	_delay_1us
  5761                          	
  5762                          	line	112
  5763                          ;shtxx.c: 112: (PRT4DR = (0==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  5764  5A1A  70 CF             	and	f, 0xCF   ;select user reg space
  5765  5A1C  5D 10             	mov	a,reg[(16)]
  5766  5A1E  21 FE             	and	a,<((0FEh))
  5767  5A20  60 10             	mov	reg[(16)],a
  5768                          	line	113
  5769                          ;shtxx.c: 113: delay_1us();
  5770  5A22  71 80             	or	f, 0x80	;select multiple RAM page mode
  5771                          	
  5772  5A24  7C 6BAD           	xcall	_delay_1us
  5773                          	
  5774                          	line	114
  5775                          ;shtxx.c: 114: (PRT2DR = (0==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  5776  5A27  70 CF             	and	f, 0xCF   ;select user reg space
  5777  5A29  5D 08             	mov	a,reg[(8)]
  5778  5A2B  21 BF             	and	a,<((0BFh))
  5779  5A2D  60 08             	mov	reg[(8)],a
  5780                          	line	115
  5781                          ;shtxx.c: 115: delay_5us();
  5782  5A2F  71 80             	or	f, 0x80	;select multiple RAM page mode
  5783                          	
  5784  5A31  7C 6B93           	xcall	_delay_5us
  5785                          	
  5786                          	line	116
  5787                          ;shtxx.c: 116: (PRT2DR = (1==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  5788  5A34  70 CF             	and	f, 0xCF   ;select user reg space
  5789  5A36  5D 08             	mov	a,reg[(8)]
  5790  5A38  29 40             	or	a,<((040h))
  5791  5A3A  60 08             	mov	reg[(8)],a
  5792                          	line	117
  5793                          ;shtxx.c: 117: delay_1us();
  5794  5A3C  71 80             	or	f, 0x80	;select multiple RAM page mode
  5795                          	
  5796  5A3E  7C 6BAD           	xcall	_delay_1us
  5797                          	
  5798                          	line	118
  5799                          ;shtxx.c: 118: (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  5800  5A41  70 CF             	and	f, 0xCF   ;select user reg space
  5801  5A43  5D 10             	mov	a,reg[(16)]
  5802  5A45  29 01             	or	a,<((01h))
  5803  5A47  60 10             	mov	reg[(16)],a
  5804                          	line	119
  5805                          ;shtxx.c: 119: delay_1us();
  5806  5A49  71 80             	or	f, 0x80	;select multiple RAM page mode
  5807                          	
  5808  5A4B  7C 6BAD           	xcall	_delay_1us
  5809                          	
  5810                          	line	120
  5811                          ;shtxx.c: 120: (PRT2DR = (0==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  5812  5A4E  70 CF             	and	f, 0xCF   ;select user reg space
  5813  5A50  5D 08             	mov	a,reg[(8)]
  5814  5A52  21 BF             	and	a,<((0BFh))
  5815  5A54  60 08             	mov	reg[(8)],a
  5816                          	line	121
  5817                          ;shtxx.c: 121: }
  5818  5A56                    l73:
  5819                          ;			
  5820  5A56  70 CF             	and	f, 0xCF   ;select user reg space
  5821                          	
  5822  5A58  7F                	ret
  5823                          GLOBAL __end_of_s_transstart
  5824  5A59                    	__end_of_s_transstart:
  5825                          	FNSIZE	_s_transstart,0,0
  5826                          ; =============== function _s_transstart ends ============
  5827                          
  5828                          	signat	_s_transstart,88
  5829                          	global	_LTRX_PutSHexByte
  5830                          	global	_oo_busreset
  5831                          	global	??_oo_busreset
  5832                          	global	?_oo_busreset
  5833                          	psect	text
  5834                          
  5835                          ; *************** function _oo_busreset *****************
  5836                          ; Defined at:
  5837                          ;		line 51 in file "./oo.c"
  5838                          ; Parameters:
  5839                          ;		None
  5840                          ; Auto variables:
  5841                          ;		None
  5842                          ; Return value:
  5843                          ;		type: unsigned char 
  5844                          ;		size: 1
  5845                          ; Registers used:
  5846                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  5847                          ; Tracked objects:
  5848                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5849                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5850                          ;		Unchanged: 
  5851                          ; Data sizes:
  5852                          ;		Autos:    0
  5853                          ;		Params:   0
  5854                          ;		Temp:     0
  5855                          ;		Total:    0
  5856                          ; This function calls:
  5857                          ;		_OneWire_fReset
  5858                          ; This function is called by:
  5859                          ;		_oo_read_device
  5860                          ; This function uses a non-reentrant model
  5861                          ; 
  5862                          	file	"./oo.c"
  5863                          	line	51
  5864  000F                    	__size_of_oo_busreset	equ	__end_of_oo_busreset-_oo_busreset
  5865                          ;oo.c: 11: char oo_scratchpad[9];
  5866                          ;oo.c: 26: char crc = 0;
  5867                          ;oo.c: 29: char crc_rom[256] = {0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 
                                65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220, 35, 125, 159, 193, 66, 2
                                8, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98, 190, 224, 2, 
  5868                          ;oo.c: 32: void oo_crc_init();
  5869                          ;oo.c: 33: void oo_crc_shuffle_byte(char input);
  5870                          ;oo.c: 37: char id[8];
  5871                          ;oo.c: 38: signed char conflict;
  5872                          ;oo.c: 39: bit new_conflict;
  5873                          ;oo.c: 51: char oo_busreset(){
  5874                          ;			
  5875  5A59                    _oo_busreset:	
  5876                          	opt	disable
  5877                          	line	53
  5878                          ;oo.c: 53: return OneWire_fReset();
  5879                          ;	Return value of _oo_busreset is never used
  5880  5A59  71 80             	or	f, 0x80	;select multiple RAM page mode
  5881  5A5B  70 CF             	and	f, 0xCF   ;select user reg space
  5882                          	
  5883  5A5D  7C 3DEB           	xcall	_OneWire_fReset
  5884                          	
  5885  5A60  38 00             	add	sp,0
  5886  5A62  7D 5A65           	xjmp	l17
  5887                          	line	55
  5888                          ;oo.c: 55: }
  5889  5A65                    l17:
  5890                          ;			
  5891  5A65  70 CF             	and	f, 0xCF   ;select user reg space
  5892                          	
  5893  5A67  7F                	ret
  5894                          GLOBAL __end_of_oo_busreset
  5895  5A68                    	__end_of_oo_busreset:
  5896                          	FNSIZE	_oo_busreset,0,0
  5897                          ; =============== function _oo_busreset ends ============
  5898                          
  5899                          	signat	_oo_busreset,89
  5900                          	global	_OneWire_GetROM
  5901                          	global	_OneWire_SetROM
  5902                          	global	_oo_read_scratchpad
  5903                          	global	??_oo_read_scratchpad
  5904                          	global	?_oo_read_scratchpad
  5905                          	psect	text
  5906                          
  5907                          ; *************** function _oo_read_scratchpad *****************
  5908                          ; Defined at:
  5909                          ;		line 90 in file "./oo.c"
  5910                          ; Parameters:
  5911                          ;		None
  5912                          ; Auto variables:
  5913                          ;		counter     	       	type: unsigned char 
  5914                          ; Return value:
  5915                          ;		type: unsigned char 
  5916                          ;		size: 1
  5917                          ; Registers used:
  5918                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  5919                          ; Tracked objects:
  5920                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5921                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  5922                          ;		Unchanged: 
  5923                          ; Data sizes:
  5924                          ;		Autos:    1
  5925                          ;		Params:   0
  5926                          ;		Temp:     0
  5927                          ;		Total:    1
  5928                          ; This function calls:
  5929                          ;		_oo_tx_byte
  5930                          ;		_oo_crc_init
  5931                          ;		_oo_rx_byte
  5932                          ; This function is called by:
  5933                          ;		_oo_read_device
  5934                          ; This function uses a non-reentrant model
  5935                          ; 
  5936                          	file	"./oo.c"
  5937                          	line	90
  5938  0057                    	__size_of_oo_read_scratchpad	equ	__end_of_oo_read_scratchpad-_oo_read_scratchpad
  5939                          ;oo.c: 90: char oo_read_scratchpad(){
  5940                          ;			
  5941  5A68                    _oo_read_scratchpad:	
  5942                          	opt	disable
  5943                          	line	93
  5944                          ;oo.c: 93: oo_tx_byte(0xBE);
  5945  5A68  50 BE             	mov	a,<((0BEh))
  5946  5A6A  70 CF             	and	f, 0xCF   ;select user reg space
  5947  5A6C  62 D0 00          	mov	reg[CUR_PP],0
  5948  5A6F  53 33             	mov	[0+((?_oo_tx_byte)^0x0)],a
  5949  5A71  71 80             	or	f, 0x80	;select multiple RAM page mode
  5950                          	
  5951  5A73  7C 6DA4           	xcall	_oo_tx_byte
  5952                          	
  5953                          	line	95
  5954                          ;oo.c: 95: char counter = 0;
  5955  5A76  50 00             	mov	a,<((0))
  5956  5A78  70 CF             	and	f, 0xCF   ;select user reg space
  5957  5A7A  62 D0 00          	mov	reg[CUR_PP],0
  5958  5A7D  53 32             	mov	[0+((oo_read_scratchpad@counter)^0x0)],a
  5959                          	line	99
  5960                          ;oo.c: 99: oo_crc_init();
  5961  5A7F  71 80             	or	f, 0x80	;select multiple RAM page mode
  5962                          	
  5963  5A81  7C 700B           	xcall	_oo_crc_init
  5964                          	
  5965                          	line	101
  5966                          ;oo.c: 101: while (counter < 9){
  5967  5A84  7D 5AA5           	xjmp	l21
  5968                          ;			
  5969  5A87                    l22:	
  5970                          	line	102
  5971                          ;oo.c: 102: oo_scratchpad[counter] = oo_rx_byte();
  5972  5A87  71 80             	or	f, 0x80	;select multiple RAM page mode
  5973                          	
  5974  5A89  7C 7019           	xcall	_oo_rx_byte
  5975                          	
  5976  5A8C  70 CF             	and	f, 0xCF   ;select user reg space
  5977  5A8E  62 D0 00          	mov	reg[CUR_PP],0
  5978  5A91  58 32             	mov	x,[0+((oo_read_scratchpad@counter)^0x0)]
  5979  5A93  71 80             	or	f, 0x80	;select multiple RAM page mode
  5980  5A95  62 D3 02          	mov	reg[IDX_PP],2
  5981  5A98  54 00             	mov	[0+(_oo_scratchpad^0x200)+x],a
  5982                          	line	103
  5983                          ;oo.c: 103: counter++;
  5984  5A9A  70 CF             	and	f, 0xCF   ;select user reg space
  5985  5A9C  62 D0 00          	mov	reg[CUR_PP],0
  5986  5A9F  51 32             	mov	a,[0+((oo_read_scratchpad@counter)^0x0)]
  5987  5AA1  01 01             	add	a,<((01h))
  5988  5AA3  53 32             	mov	[0+((oo_read_scratchpad@counter)^0x0)],a
  5989                          	line	104
  5990                          ;			
  5991  5AA5                    l21:	
  5992                          	line	101
  5993  5AA5  70 CF             	and	f, 0xCF   ;select user reg space
  5994  5AA7  62 D0 00          	mov	reg[CUR_PP],0
  5995  5AAA  51 32             	mov	a,[0+((oo_read_scratchpad@counter)^0x0)]
  5996  5AAC  39 09             	cmp	a,<((09h))
  5997  5AAE  CFD8              	jc	l22
  5998                          ;			
  5999  5AB0                    l23:	
  6000                          	line	108
  6001                          ;oo.c: 104: }
  6002                          ;oo.c: 108: return crc;
  6003  5AB0  70 CF             	and	f, 0xCF   ;select user reg space
  6004  5AB2  71 80             	or	f, 0x80	;select multiple RAM page mode
  6005  5AB4  62 D0 02          	mov	reg[CUR_PP],2
  6006  5AB7  51 14             	mov	a,[0+((_crc)^0x200)]
  6007  5AB9  7D 5ABC           	xjmp	l20
  6008                          	line	112
  6009                          ;oo.c: 112: }
  6010  5ABC                    l20:
  6011                          ;			
  6012  5ABC  70 CF             	and	f, 0xCF   ;select user reg space
  6013                          	
  6014  5ABE  7F                	ret
  6015                          GLOBAL __end_of_oo_read_scratchpad
  6016  5ABF                    	__end_of_oo_read_scratchpad:
  6017                          	FNSIZE	_oo_read_scratchpad,1,0
  6018                          ; =============== function _oo_read_scratchpad ends ============
  6019                          
  6020                          	signat	_oo_read_scratchpad,89
  6021                          	global	_OneWire_fVerify
  6022                          	global	_s_read_byte
  6023                          	global	??_s_read_byte
  6024                          	global	?_s_read_byte
  6025                          	psect	text
  6026                          
  6027                          ; *************** function _s_read_byte *****************
  6028                          ; Defined at:
  6029                          ;		line 76 in file "./shtxx.c"
  6030                          ; Parameters:
  6031                          ;		ack         	offs:   0	type: unsigned char 
  6032                          ; Auto variables:
  6033                          ;		i           	       	type: unsigned char 
  6034                          ;		val         	       	type: unsigned char 
  6035                          ; Return value:
  6036                          ;		type: unsigned char 
  6037                          ;		size: 1
  6038                          ; Registers used:
  6039                          ;		a, CUR_PP
  6040                          ; Tracked objects:
  6041                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6042                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6043                          ;		Unchanged: 
  6044                          ; Data sizes:
  6045                          ;		Autos:    2
  6046                          ;		Params:   1
  6047                          ;		Temp:     0
  6048                          ;		Total:    3
  6049                          ; This function calls:
  6050                          ;		_delay_5us
  6051                          ; This function is called by:
  6052                          ;		_s_measure
  6053                          ; This function uses a non-reentrant model
  6054                          ; 
  6055                          	file	"./shtxx.c"
  6056                          	line	76
  6057  00A8                    	__size_of_s_read_byte	equ	__end_of_s_read_byte-_s_read_byte
  6058                          ;shtxx.c: 73: char s_read_byte(unsigned char ack)
  6059                          ;shtxx.c: 76: {
  6060                          ;			
  6061  5ABF                    _s_read_byte:	
  6062                          	opt	disable
  6063                          	line	77
  6064                          ;shtxx.c: 77: unsigned char i,val=0;
  6065  5ABF  50 00             	mov	a,<((0))
  6066  5AC1  70 CF             	and	f, 0xCF   ;select user reg space
  6067  5AC3  62 D0 00          	mov	reg[CUR_PP],0
  6068  5AC6  53 23             	mov	[0+((s_read_byte@val)^0x0)],a
  6069                          	line	78
  6070                          ;shtxx.c: 78: (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  6071  5AC8  70 CF             	and	f, 0xCF   ;select user reg space
  6072  5ACA  5D 10             	mov	a,reg[(16)]
  6073  5ACC  29 01             	or	a,<((01h))
  6074  5ACE  60 10             	mov	reg[(16)],a
  6075                          	line	79
  6076                          ;shtxx.c: 79: for (i=0x80;i>0;i/=2)
  6077  5AD0  50 80             	mov	a,<((080h))
  6078  5AD2  70 CF             	and	f, 0xCF   ;select user reg space
  6079  5AD4  62 D0 00          	mov	reg[CUR_PP],0
  6080  5AD7  53 22             	mov	[0+((s_read_byte@i)^0x0)],a
  6081  5AD9  70 CF             	and	f, 0xCF   ;select user reg space
  6082  5ADB  62 D0 00          	mov	reg[CUR_PP],0
  6083  5ADE  51 22             	mov	a,[0+((s_read_byte@i)^0x0)]
  6084  5AE0  39 00             	cmp	a,(0)
  6085  5AE2  B004              	jnz	l67
  6086  5AE4  7D 5B21           	xjmp	l68
  6087                          	line	80
  6088                          ;			
  6089  5AE7                    l67:	
  6090                          ;shtxx.c: 80: { (PRT2DR = (1==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  6091  5AE7  70 CF             	and	f, 0xCF   ;select user reg space
  6092  5AE9  5D 08             	mov	a,reg[(8)]
  6093  5AEB  29 40             	or	a,<((040h))
  6094  5AED  60 08             	mov	reg[(8)],a
  6095                          	line	81
  6096                          ;shtxx.c: 81: if (PRT4DR&0x01) val=(val | i);
  6097  5AEF  70 CF             	and	f, 0xCF   ;select user reg space
  6098  5AF1  49 10 01          	tst	reg[(16)],(01h)
  6099  5AF4  A00C              	jz	l70
  6100  5AF6  70 CF             	and	f, 0xCF   ;select user reg space
  6101  5AF8  62 D0 00          	mov	reg[CUR_PP],0
  6102  5AFB  51 23             	mov	a,[0+((s_read_byte@val)^0x0)]
  6103  5AFD  2A 22             	or	a,[0+((s_read_byte@i)^0x0)]
  6104  5AFF  53 23             	mov	[0+((s_read_byte@val)^0x0)],a
  6105                          ;			
  6106  5B01                    l70:	
  6107                          	line	82
  6108                          ;shtxx.c: 82: (PRT2DR = (0==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  6109  5B01  70 CF             	and	f, 0xCF   ;select user reg space
  6110  5B03  5D 08             	mov	a,reg[(8)]
  6111  5B05  21 BF             	and	a,<((0BFh))
  6112  5B07  60 08             	mov	reg[(8)],a
  6113                          	line	79
  6114  5B09  50 01             	mov	a,<((01h))
  6115  5B0B  7D 5B15           	xjmp	u1333
  6116  5B0E  70 FB             	clrc
  6117  5B10                    u1344:
  6118  5B10  62 D0 00          	mov	reg[CUR_PP],0
  6119  5B13  6E 22             	rrc	[0+((s_read_byte@i)^0x0)]
  6120  5B15                    u1333:
  6121  5B15  78                	dec	a
  6122  5B16  DFF9              	jnc	u1344
  6123  5B18  62 D0 00          	mov	reg[CUR_PP],0
  6124  5B1B  51 22             	mov	a,[0+((s_read_byte@i)^0x0)]
  6125  5B1D  39 00             	cmp	a,(0)
  6126  5B1F  BFC7              	jnz	l67
  6127                          ;			
  6128  5B21                    l68:	
  6129                          	line	85
  6130                          ;shtxx.c: 83: }
  6131                          ;shtxx.c: 85: if (ack){
  6132  5B21  70 CF             	and	f, 0xCF   ;select user reg space
  6133  5B23  62 D0 00          	mov	reg[CUR_PP],0
  6134  5B26  51 21             	mov	a,[0+((s_read_byte@ack)^0x0)]
  6135  5B28  39 00             	cmp	a,(0)
  6136  5B2A  A00C              	jz	l71
  6137                          	line	86
  6138                          ;shtxx.c: 86: (PRT4DR = (0==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  6139  5B2C  70 CF             	and	f, 0xCF   ;select user reg space
  6140  5B2E  5D 10             	mov	a,reg[(16)]
  6141  5B30  21 FE             	and	a,<((0FEh))
  6142  5B32  60 10             	mov	reg[(16)],a
  6143                          	line	87
  6144                          ;shtxx.c: 87: } else {
  6145  5B34  7D 5B3F           	xjmp	l72
  6146                          ;			
  6147  5B37                    l71:	
  6148                          	line	88
  6149                          ;shtxx.c: 88: (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  6150  5B37  70 CF             	and	f, 0xCF   ;select user reg space
  6151  5B39  5D 10             	mov	a,reg[(16)]
  6152  5B3B  29 01             	or	a,<((01h))
  6153  5B3D  60 10             	mov	reg[(16)],a
  6154                          	line	89
  6155                          ;			
  6156  5B3F                    l72:	
  6157                          	line	91
  6158                          ;shtxx.c: 89: }
  6159                          ;shtxx.c: 91: (PRT2DR = (1==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  6160  5B3F  70 CF             	and	f, 0xCF   ;select user reg space
  6161  5B41  5D 08             	mov	a,reg[(8)]
  6162  5B43  29 40             	or	a,<((040h))
  6163  5B45  60 08             	mov	reg[(8)],a
  6164                          	line	92
  6165                          ;shtxx.c: 92: delay_5us();
  6166  5B47  71 80             	or	f, 0x80	;select multiple RAM page mode
  6167                          	
  6168  5B49  7C 6B93           	xcall	_delay_5us
  6169                          	
  6170                          	line	93
  6171                          ;shtxx.c: 93: (PRT2DR = (0==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  6172  5B4C  70 CF             	and	f, 0xCF   ;select user reg space
  6173  5B4E  5D 08             	mov	a,reg[(8)]
  6174  5B50  21 BF             	and	a,<((0BFh))
  6175  5B52  60 08             	mov	reg[(8)],a
  6176                          	line	94
  6177                          ;shtxx.c: 94: (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  6178  5B54  5D 10             	mov	a,reg[(16)]
  6179  5B56  29 01             	or	a,<((01h))
  6180  5B58  60 10             	mov	reg[(16)],a
  6181                          	line	96
  6182                          ;shtxx.c: 96: return val;
  6183  5B5A  70 CF             	and	f, 0xCF   ;select user reg space
  6184  5B5C  62 D0 00          	mov	reg[CUR_PP],0
  6185  5B5F  51 23             	mov	a,[0+((s_read_byte@val)^0x0)]
  6186  5B61  7D 5B64           	xjmp	l66
  6187                          	line	97
  6188                          ;shtxx.c: 97: }
  6189  5B64                    l66:
  6190                          ;			
  6191  5B64  70 CF             	and	f, 0xCF   ;select user reg space
  6192                          	
  6193  5B66  7F                	ret
  6194                          GLOBAL __end_of_s_read_byte
  6195  5B67                    	__end_of_s_read_byte:
  6196                          	FNSIZE	_s_read_byte,2,1
  6197                          ; =============== function _s_read_byte ends ============
  6198                          
  6199                          	signat	_s_read_byte,4217
  6200                          	global	_scale
  6201                          	global	??_scale
  6202                          	global	?_scale
  6203                          	psect	text
  6204                          
  6205                          ; *************** function _scale *****************
  6206                          ; Defined at:
  6207                          ;		line 414 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  6208                          ; Parameters:
  6209                          ;		scl         	offs:   0	type: char 
  6210                          ; Auto variables:
  6211                          ;		None
  6212                          ; Return value:
  6213                          ;		type: char 
  6214                          ;		size: 4
  6215                          ; Registers used:
  6216                          ;		a, x, CUR_PP, mret
  6217                          ; Tracked objects:
  6218                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6219                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6220                          ;		Unchanged: 
  6221                          ; Data sizes:
  6222                          ;		Autos:   24
  6223                          ;		Params:   4
  6224                          ;		Temp:     1
  6225                          ;		Total:   29
  6226                          ; This function calls:
  6227                          ;		___awdiv
  6228                          ;		___awmod
  6229                          ;		___flmul
  6230                          ; This function is called by:
  6231                          ;		_printf
  6232                          ; This function uses a non-reentrant model
  6233                          ; 
  6234                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  6235                          	line	414
  6236  045C                    	__size_of_scale	equ	__end_of_scale-_scale
  6237                          ;doprnt.c: 412: static double
  6238                          ;doprnt.c: 413: scale(signed char scl)
  6239                          ;doprnt.c: 414: {
  6240                          ;			
  6241  5B67                    _scale:	
  6242                          	opt	disable
  6243                          	line	416
  6244                          ;doprnt.c: 416: if(scl < 0) {
  6245  5B67  70 CF             	and	f, 0xCF   ;select user reg space
  6246  5B69  62 D0 00          	mov	reg[CUR_PP],0
  6247  5B6C  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6248  5B6E  31 80             	xor	a,80h
  6249  5B70  39 80             	cmp	a,(0)^80h
  6250  5B72  D22A              	jnc	l111
  6251                          	line	417
  6252                          ;doprnt.c: 417: scl = -scl;
  6253  5B74  70 CF             	and	f, 0xCF   ;select user reg space
  6254  5B76  62 D0 00          	mov	reg[CUR_PP],0
  6255  5B79  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6256  5B7B  73                	cpl	a
  6257  5B7C  74                	inc	a
  6258  5B7D  53 40             	mov	[0+((scale@scl)^0x0)],a
  6259                          	line	418
  6260                          ;doprnt.c: 418: if(scl>=110)
  6261  5B7F  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6262  5B81  31 80             	xor	a,80h
  6263  5B83  39 EE             	cmp	a,(06Eh)^80h
  6264  5B85  C13E              	jc	l112
  6265                          	line	419
  6266  5B87  70 CF             	and	f, 0xCF   ;select user reg space
  6267  5B89  62 D0 00          	mov	reg[CUR_PP],0
  6268  5B8C  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6269  5B8E  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  6270  5B90  6A                	rlc	a
  6271  5B91  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  6272  5B93  1C 5D             	sbb	[0+((?___awdiv)^0x0)],a
  6273  5B95  50 64             	mov	a,<(064h)
  6274  5B97  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  6275  5B99  50 00             	mov	a,>(064h)
  6276  5B9B  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  6277  5B9D  71 80             	or	f, 0x80	;select multiple RAM page mode
  6278                          	
  6279  5B9F  7C 6DB8           	xcall	___awdiv
  6280                          	
  6281  5BA2  70 CF             	and	f, 0xCF   ;select user reg space
  6282  5BA4  62 D0 00          	mov	reg[CUR_PP],0
  6283  5BA7  5A 5A             	mov	[((_scale$2761)^0x0)],x
  6284  5BA9  53 5B             	mov	[((_scale$2761+1)^0x0)],a
  6285  5BAB  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6286  5BAD  53 5E             	mov	[1+((?___awmod)^0x0)],a
  6287  5BAF  6A                	rlc	a
  6288  5BB0  53 5D             	mov	[0+((?___awmod)^0x0)],a
  6289  5BB2  1C 5D             	sbb	[0+((?___awmod)^0x0)],a
  6290  5BB4  50 64             	mov	a,<(064h)
  6291  5BB6  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  6292  5BB8  50 00             	mov	a,>(064h)
  6293  5BBA  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  6294  5BBC  71 80             	or	f, 0x80	;select multiple RAM page mode
  6295                          	
  6296  5BBE  7C 6EF7           	xcall	___awmod
  6297                          	
  6298  5BC1  70 CF             	and	f, 0xCF   ;select user reg space
  6299  5BC3  62 D0 00          	mov	reg[CUR_PP],0
  6300  5BC6  5A 58             	mov	[((_scale$2762)^0x0)],x
  6301  5BC8  53 59             	mov	[((_scale$2762+1)^0x0)],a
  6302  5BCA  50 0A             	mov	a,<(0Ah)
  6303  5BCC  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  6304  5BCE  50 00             	mov	a,>(0Ah)
  6305  5BD0  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  6306  5BD2  51 58             	mov	a,[0+((_scale$2762)^0x0)]
  6307  5BD4  08                	push	a
  6308  5BD5  51 59             	mov	a,[1+((_scale$2762)^0x0)]
  6309  5BD7  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  6310  5BD9  18                	pop	a
  6311  5BDA  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  6312  5BDC  71 80             	or	f, 0x80	;select multiple RAM page mode
  6313                          	
  6314  5BDE  7C 6DB8           	xcall	___awdiv
  6315                          	
  6316  5BE1  70 CF             	and	f, 0xCF   ;select user reg space
  6317  5BE3  62 D0 00          	mov	reg[CUR_PP],0
  6318  5BE6  5A 56             	mov	[((_scale$2763)^0x0)],x
  6319  5BE8  53 57             	mov	[((_scale$2763+1)^0x0)],a
  6320  5BEA  50 01             	mov	a,<((01h))
  6321  5BEC  01 5A             	add	a,<(8000h+_scale$2761)
  6322  5BEE  5C                	mov	x,a
  6323  5BEF  50 80             	mov	a,>(8000h+_scale$2761)
  6324  5BF1  70 CF             	and	f, 0xCF   ;select user reg space
  6325  5BF3  60 D3             	mov	reg[0xd3],a
  6326  5BF5  52 00             	mov	a,[x+0]
  6327  5BF7  64                	asl	a
  6328  5BF8  64                	asl	a
  6329  5BF9  01 48             	add	a,<((048h))
  6330  5BFB  01 00             	add	a,<__npowers_
  6331  5BFD  5C                	mov	x,a
  6332  5BFE  50 7D             	mov	a,>__npowers_
  6333  5C00  08                	push	a
  6334  5C01  28                	romx
  6335  5C02  62 D0 00          	mov	reg[CUR_PP],0
  6336  5C05  53 5D             	mov	[0+((?___flmul)^0x0)],a
  6337  5C07  18                	pop	a
  6338  5C08  75                	inc	x
  6339  5C09  08                	push	a
  6340  5C0A  28                	romx
  6341  5C0B  53 5E             	mov	[1+((?___flmul)^0x0)],a
  6342  5C0D  18                	pop	a
  6343  5C0E  75                	inc	x
  6344  5C0F  08                	push	a
  6345  5C10  28                	romx
  6346  5C11  53 5F             	mov	[2+((?___flmul)^0x0)],a
  6347  5C13  18                	pop	a
  6348  5C14  75                	inc	x
  6349  5C15  28                	romx
  6350  5C16  53 60             	mov	[3+((?___flmul)^0x0)],a
  6351  5C18  50 01             	mov	a,<((01h))
  6352  5C1A  01 56             	add	a,<(8000h+_scale$2763)
  6353  5C1C  5C                	mov	x,a
  6354  5C1D  50 80             	mov	a,>(8000h+_scale$2763)
  6355  5C1F  60 D3             	mov	reg[0xd3],a
  6356  5C21  52 00             	mov	a,[x+0]
  6357  5C23  64                	asl	a
  6358  5C24  64                	asl	a
  6359  5C25  01 24             	add	a,<((024h))
  6360  5C27  01 00             	add	a,<__npowers_
  6361  5C29  5C                	mov	x,a
  6362  5C2A  50 7D             	mov	a,>__npowers_
  6363  5C2C  08                	push	a
  6364  5C2D  28                	romx
  6365  5C2E  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  6366  5C30  18                	pop	a
  6367  5C31  75                	inc	x
  6368  5C32  08                	push	a
  6369  5C33  28                	romx
  6370  5C34  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  6371  5C36  18                	pop	a
  6372  5C37  75                	inc	x
  6373  5C38  08                	push	a
  6374  5C39  28                	romx
  6375  5C3A  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  6376  5C3C  18                	pop	a
  6377  5C3D  75                	inc	x
  6378  5C3E  28                	romx
  6379  5C3F  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  6380  5C41  71 80             	or	f, 0x80	;select multiple RAM page mode
  6381                          	
  6382  5C43  7C 7680           	xcall	___flmul
  6383                          	
  6384  5C46  70 CF             	and	f, 0xCF   ;select user reg space
  6385  5C48  62 D0 00          	mov	reg[CUR_PP],0
  6386  5C4B  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  6387  5C4D  53 52             	mov	[0+((_scale$2764)^0x0)],a
  6388  5C4F  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  6389  5C51  53 53             	mov	[1+((_scale$2764)^0x0)],a
  6390  5C53  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  6391  5C55  53 54             	mov	[2+((_scale$2764)^0x0)],a
  6392  5C57  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  6393  5C59  53 55             	mov	[3+((_scale$2764)^0x0)],a
  6394  5C5B  70 CF             	and	f, 0xCF   ;select user reg space
  6395  5C5D  62 D0 00          	mov	reg[CUR_PP],0
  6396  5C60  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6397  5C62  53 5E             	mov	[1+((?___awmod)^0x0)],a
  6398  5C64  6A                	rlc	a
  6399  5C65  53 5D             	mov	[0+((?___awmod)^0x0)],a
  6400  5C67  1C 5D             	sbb	[0+((?___awmod)^0x0)],a
  6401  5C69  50 0A             	mov	a,<(0Ah)
  6402  5C6B  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  6403  5C6D  50 00             	mov	a,>(0Ah)
  6404  5C6F  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  6405  5C71  71 80             	or	f, 0x80	;select multiple RAM page mode
  6406                          	
  6407  5C73  7C 6EF7           	xcall	___awmod
  6408                          	
  6409  5C76  64                	asl	a
  6410  5C77  64                	asl	a
  6411  5C78  01 00             	add	a,<__npowers_
  6412  5C7A  5C                	mov	x,a
  6413  5C7B  50 7D             	mov	a,>__npowers_
  6414  5C7D  08                	push	a
  6415  5C7E  28                	romx
  6416  5C7F  70 CF             	and	f, 0xCF   ;select user reg space
  6417  5C81  62 D0 00          	mov	reg[CUR_PP],0
  6418  5C84  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  6419  5C86  18                	pop	a
  6420  5C87  75                	inc	x
  6421  5C88  08                	push	a
  6422  5C89  28                	romx
  6423  5C8A  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  6424  5C8C  18                	pop	a
  6425  5C8D  75                	inc	x
  6426  5C8E  08                	push	a
  6427  5C8F  28                	romx
  6428  5C90  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  6429  5C92  18                	pop	a
  6430  5C93  75                	inc	x
  6431  5C94  28                	romx
  6432  5C95  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  6433  5C97  51 52             	mov	a,[0+((_scale$2764)^0x0)]
  6434  5C99  53 5D             	mov	[0+((?___flmul)^0x0)],a
  6435  5C9B  51 53             	mov	a,[1+((_scale$2764)^0x0)]
  6436  5C9D  53 5E             	mov	[1+((?___flmul)^0x0)],a
  6437  5C9F  51 54             	mov	a,[2+((_scale$2764)^0x0)]
  6438  5CA1  53 5F             	mov	[2+((?___flmul)^0x0)],a
  6439  5CA3  51 55             	mov	a,[3+((_scale$2764)^0x0)]
  6440  5CA5  53 60             	mov	[3+((?___flmul)^0x0)],a
  6441  5CA7  71 80             	or	f, 0x80	;select multiple RAM page mode
  6442                          	
  6443  5CA9  7C 7680           	xcall	___flmul
  6444                          	
  6445  5CAC  70 CF             	and	f, 0xCF   ;select user reg space
  6446  5CAE  62 D0 00          	mov	reg[CUR_PP],0
  6447  5CB1  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  6448  5CB3  53 40             	mov	[0+((?_scale)^0x0)],a
  6449  5CB5  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  6450  5CB7  53 41             	mov	[1+((?_scale)^0x0)],a
  6451  5CB9  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  6452  5CBB  53 42             	mov	[2+((?_scale)^0x0)],a
  6453  5CBD  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  6454  5CBF  53 43             	mov	[3+((?_scale)^0x0)],a
  6455  5CC1  7D 5FC0           	xjmp	l110
  6456                          	line	420
  6457                          ;			
  6458  5CC4                    l112:	
  6459                          ;doprnt.c: 420: else if(scl > 10)
  6460  5CC4  70 CF             	and	f, 0xCF   ;select user reg space
  6461  5CC6  62 D0 00          	mov	reg[CUR_PP],0
  6462  5CC9  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6463  5CCB  31 80             	xor	a,80h
  6464  5CCD  39 8B             	cmp	a,(0Bh)^80h
  6465  5CCF  C0A7              	jc	l113
  6466                          	line	421
  6467  5CD1  70 CF             	and	f, 0xCF   ;select user reg space
  6468  5CD3  62 D0 00          	mov	reg[CUR_PP],0
  6469  5CD6  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6470  5CD8  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  6471  5CDA  6A                	rlc	a
  6472  5CDB  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  6473  5CDD  1C 5D             	sbb	[0+((?___awdiv)^0x0)],a
  6474  5CDF  50 0A             	mov	a,<(0Ah)
  6475  5CE1  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  6476  5CE3  50 00             	mov	a,>(0Ah)
  6477  5CE5  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  6478  5CE7  71 80             	or	f, 0x80	;select multiple RAM page mode
  6479                          	
  6480  5CE9  7C 6DB8           	xcall	___awdiv
  6481                          	
  6482  5CEC  70 CF             	and	f, 0xCF   ;select user reg space
  6483  5CEE  62 D0 00          	mov	reg[CUR_PP],0
  6484  5CF1  5A 50             	mov	[((_scale$2768)^0x0)],x
  6485  5CF3  53 51             	mov	[((_scale$2768+1)^0x0)],a
  6486  5CF5  70 CF             	and	f, 0xCF   ;select user reg space
  6487  5CF7  62 D0 00          	mov	reg[CUR_PP],0
  6488  5CFA  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6489  5CFC  53 5E             	mov	[1+((?___awmod)^0x0)],a
  6490  5CFE  6A                	rlc	a
  6491  5CFF  53 5D             	mov	[0+((?___awmod)^0x0)],a
  6492  5D01  1C 5D             	sbb	[0+((?___awmod)^0x0)],a
  6493  5D03  50 0A             	mov	a,<(0Ah)
  6494  5D05  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  6495  5D07  50 00             	mov	a,>(0Ah)
  6496  5D09  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  6497  5D0B  71 80             	or	f, 0x80	;select multiple RAM page mode
  6498                          	
  6499  5D0D  7C 6EF7           	xcall	___awmod
  6500                          	
  6501  5D10  64                	asl	a
  6502  5D11  64                	asl	a
  6503  5D12  01 00             	add	a,<__npowers_
  6504  5D14  5C                	mov	x,a
  6505  5D15  50 7D             	mov	a,>__npowers_
  6506  5D17  08                	push	a
  6507  5D18  28                	romx
  6508  5D19  70 CF             	and	f, 0xCF   ;select user reg space
  6509  5D1B  62 D0 00          	mov	reg[CUR_PP],0
  6510  5D1E  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  6511  5D20  18                	pop	a
  6512  5D21  75                	inc	x
  6513  5D22  08                	push	a
  6514  5D23  28                	romx
  6515  5D24  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  6516  5D26  18                	pop	a
  6517  5D27  75                	inc	x
  6518  5D28  08                	push	a
  6519  5D29  28                	romx
  6520  5D2A  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  6521  5D2C  18                	pop	a
  6522  5D2D  75                	inc	x
  6523  5D2E  28                	romx
  6524  5D2F  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  6525  5D31  50 01             	mov	a,<((01h))
  6526  5D33  01 50             	add	a,<(8000h+_scale$2768)
  6527  5D35  5C                	mov	x,a
  6528  5D36  50 80             	mov	a,>(8000h+_scale$2768)
  6529  5D38  60 D3             	mov	reg[0xd3],a
  6530  5D3A  52 00             	mov	a,[x+0]
  6531  5D3C  64                	asl	a
  6532  5D3D  64                	asl	a
  6533  5D3E  01 24             	add	a,<((024h))
  6534  5D40  01 00             	add	a,<__npowers_
  6535  5D42  5C                	mov	x,a
  6536  5D43  50 7D             	mov	a,>__npowers_
  6537  5D45  08                	push	a
  6538  5D46  28                	romx
  6539  5D47  53 5D             	mov	[0+((?___flmul)^0x0)],a
  6540  5D49  18                	pop	a
  6541  5D4A  75                	inc	x
  6542  5D4B  08                	push	a
  6543  5D4C  28                	romx
  6544  5D4D  53 5E             	mov	[1+((?___flmul)^0x0)],a
  6545  5D4F  18                	pop	a
  6546  5D50  75                	inc	x
  6547  5D51  08                	push	a
  6548  5D52  28                	romx
  6549  5D53  53 5F             	mov	[2+((?___flmul)^0x0)],a
  6550  5D55  18                	pop	a
  6551  5D56  75                	inc	x
  6552  5D57  28                	romx
  6553  5D58  53 60             	mov	[3+((?___flmul)^0x0)],a
  6554  5D5A  71 80             	or	f, 0x80	;select multiple RAM page mode
  6555                          	
  6556  5D5C  7C 7680           	xcall	___flmul
  6557                          	
  6558  5D5F  70 CF             	and	f, 0xCF   ;select user reg space
  6559  5D61  62 D0 00          	mov	reg[CUR_PP],0
  6560  5D64  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  6561  5D66  53 40             	mov	[0+((?_scale)^0x0)],a
  6562  5D68  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  6563  5D6A  53 41             	mov	[1+((?_scale)^0x0)],a
  6564  5D6C  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  6565  5D6E  53 42             	mov	[2+((?_scale)^0x0)],a
  6566  5D70  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  6567  5D72  53 43             	mov	[3+((?_scale)^0x0)],a
  6568  5D74  7D 5FC0           	xjmp	l110
  6569                          	line	422
  6570                          ;			
  6571  5D77                    l113:	
  6572  5D77  70 CF             	and	f, 0xCF   ;select user reg space
  6573  5D79  62 D0 00          	mov	reg[CUR_PP],0
  6574  5D7C  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6575  5D7E  64                	asl	a
  6576  5D7F  64                	asl	a
  6577  5D80  01 00             	add	a,<__npowers_
  6578  5D82  5C                	mov	x,a
  6579  5D83  50 7D             	mov	a,>__npowers_
  6580  5D85  08                	push	a
  6581  5D86  28                	romx
  6582  5D87  53 40             	mov	[0+((?_scale)^0x0)],a
  6583  5D89  18                	pop	a
  6584  5D8A  75                	inc	x
  6585  5D8B  08                	push	a
  6586  5D8C  28                	romx
  6587  5D8D  53 41             	mov	[1+((?_scale)^0x0)],a
  6588  5D8F  18                	pop	a
  6589  5D90  75                	inc	x
  6590  5D91  08                	push	a
  6591  5D92  28                	romx
  6592  5D93  53 42             	mov	[2+((?_scale)^0x0)],a
  6593  5D95  18                	pop	a
  6594  5D96  75                	inc	x
  6595  5D97  28                	romx
  6596  5D98  53 43             	mov	[3+((?_scale)^0x0)],a
  6597  5D9A  7D 5FC0           	xjmp	l110
  6598                          	line	423
  6599                          ;			
  6600  5D9D                    l111:	
  6601                          	line	424
  6602                          ;doprnt.c: 423: }
  6603                          ;doprnt.c: 424: if(scl>=110)
  6604  5D9D  70 CF             	and	f, 0xCF   ;select user reg space
  6605  5D9F  62 D0 00          	mov	reg[CUR_PP],0
  6606  5DA2  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6607  5DA4  31 80             	xor	a,80h
  6608  5DA6  39 EE             	cmp	a,(06Eh)^80h
  6609  5DA8  C13E              	jc	l115
  6610                          	line	425
  6611  5DAA  70 CF             	and	f, 0xCF   ;select user reg space
  6612  5DAC  62 D0 00          	mov	reg[CUR_PP],0
  6613  5DAF  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6614  5DB1  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  6615  5DB3  6A                	rlc	a
  6616  5DB4  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  6617  5DB6  1C 5D             	sbb	[0+((?___awdiv)^0x0)],a
  6618  5DB8  50 64             	mov	a,<(064h)
  6619  5DBA  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  6620  5DBC  50 00             	mov	a,>(064h)
  6621  5DBE  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  6622  5DC0  71 80             	or	f, 0x80	;select multiple RAM page mode
  6623                          	
  6624  5DC2  7C 6DB8           	xcall	___awdiv
  6625                          	
  6626  5DC5  70 CF             	and	f, 0xCF   ;select user reg space
  6627  5DC7  62 D0 00          	mov	reg[CUR_PP],0
  6628  5DCA  5A 4E             	mov	[((_scale$2775)^0x0)],x
  6629  5DCC  53 4F             	mov	[((_scale$2775+1)^0x0)],a
  6630  5DCE  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6631  5DD0  53 5E             	mov	[1+((?___awmod)^0x0)],a
  6632  5DD2  6A                	rlc	a
  6633  5DD3  53 5D             	mov	[0+((?___awmod)^0x0)],a
  6634  5DD5  1C 5D             	sbb	[0+((?___awmod)^0x0)],a
  6635  5DD7  50 64             	mov	a,<(064h)
  6636  5DD9  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  6637  5DDB  50 00             	mov	a,>(064h)
  6638  5DDD  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  6639  5DDF  71 80             	or	f, 0x80	;select multiple RAM page mode
  6640                          	
  6641  5DE1  7C 6EF7           	xcall	___awmod
  6642                          	
  6643  5DE4  70 CF             	and	f, 0xCF   ;select user reg space
  6644  5DE6  62 D0 00          	mov	reg[CUR_PP],0
  6645  5DE9  5A 4C             	mov	[((_scale$2776)^0x0)],x
  6646  5DEB  53 4D             	mov	[((_scale$2776+1)^0x0)],a
  6647  5DED  50 0A             	mov	a,<(0Ah)
  6648  5DEF  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  6649  5DF1  50 00             	mov	a,>(0Ah)
  6650  5DF3  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  6651  5DF5  51 4C             	mov	a,[0+((_scale$2776)^0x0)]
  6652  5DF7  08                	push	a
  6653  5DF8  51 4D             	mov	a,[1+((_scale$2776)^0x0)]
  6654  5DFA  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  6655  5DFC  18                	pop	a
  6656  5DFD  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  6657  5DFF  71 80             	or	f, 0x80	;select multiple RAM page mode
  6658                          	
  6659  5E01  7C 6DB8           	xcall	___awdiv
  6660                          	
  6661  5E04  70 CF             	and	f, 0xCF   ;select user reg space
  6662  5E06  62 D0 00          	mov	reg[CUR_PP],0
  6663  5E09  5A 4A             	mov	[((_scale$2777)^0x0)],x
  6664  5E0B  53 4B             	mov	[((_scale$2777+1)^0x0)],a
  6665  5E0D  50 01             	mov	a,<((01h))
  6666  5E0F  01 4E             	add	a,<(8000h+_scale$2775)
  6667  5E11  5C                	mov	x,a
  6668  5E12  50 80             	mov	a,>(8000h+_scale$2775)
  6669  5E14  70 CF             	and	f, 0xCF   ;select user reg space
  6670  5E16  60 D3             	mov	reg[0xd3],a
  6671  5E18  52 00             	mov	a,[x+0]
  6672  5E1A  64                	asl	a
  6673  5E1B  64                	asl	a
  6674  5E1C  01 48             	add	a,<((048h))
  6675  5E1E  01 34             	add	a,<__powers_
  6676  5E20  5C                	mov	x,a
  6677  5E21  50 7D             	mov	a,>__powers_
  6678  5E23  08                	push	a
  6679  5E24  28                	romx
  6680  5E25  62 D0 00          	mov	reg[CUR_PP],0
  6681  5E28  53 5D             	mov	[0+((?___flmul)^0x0)],a
  6682  5E2A  18                	pop	a
  6683  5E2B  75                	inc	x
  6684  5E2C  08                	push	a
  6685  5E2D  28                	romx
  6686  5E2E  53 5E             	mov	[1+((?___flmul)^0x0)],a
  6687  5E30  18                	pop	a
  6688  5E31  75                	inc	x
  6689  5E32  08                	push	a
  6690  5E33  28                	romx
  6691  5E34  53 5F             	mov	[2+((?___flmul)^0x0)],a
  6692  5E36  18                	pop	a
  6693  5E37  75                	inc	x
  6694  5E38  28                	romx
  6695  5E39  53 60             	mov	[3+((?___flmul)^0x0)],a
  6696  5E3B  50 01             	mov	a,<((01h))
  6697  5E3D  01 4A             	add	a,<(8000h+_scale$2777)
  6698  5E3F  5C                	mov	x,a
  6699  5E40  50 80             	mov	a,>(8000h+_scale$2777)
  6700  5E42  60 D3             	mov	reg[0xd3],a
  6701  5E44  52 00             	mov	a,[x+0]
  6702  5E46  64                	asl	a
  6703  5E47  64                	asl	a
  6704  5E48  01 24             	add	a,<((024h))
  6705  5E4A  01 34             	add	a,<__powers_
  6706  5E4C  5C                	mov	x,a
  6707  5E4D  50 7D             	mov	a,>__powers_
  6708  5E4F  08                	push	a
  6709  5E50  28                	romx
  6710  5E51  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  6711  5E53  18                	pop	a
  6712  5E54  75                	inc	x
  6713  5E55  08                	push	a
  6714  5E56  28                	romx
  6715  5E57  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  6716  5E59  18                	pop	a
  6717  5E5A  75                	inc	x
  6718  5E5B  08                	push	a
  6719  5E5C  28                	romx
  6720  5E5D  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  6721  5E5F  18                	pop	a
  6722  5E60  75                	inc	x
  6723  5E61  28                	romx
  6724  5E62  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  6725  5E64  71 80             	or	f, 0x80	;select multiple RAM page mode
  6726                          	
  6727  5E66  7C 7680           	xcall	___flmul
  6728                          	
  6729  5E69  70 CF             	and	f, 0xCF   ;select user reg space
  6730  5E6B  62 D0 00          	mov	reg[CUR_PP],0
  6731  5E6E  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  6732  5E70  53 46             	mov	[0+((_scale$2778)^0x0)],a
  6733  5E72  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  6734  5E74  53 47             	mov	[1+((_scale$2778)^0x0)],a
  6735  5E76  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  6736  5E78  53 48             	mov	[2+((_scale$2778)^0x0)],a
  6737  5E7A  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  6738  5E7C  53 49             	mov	[3+((_scale$2778)^0x0)],a
  6739  5E7E  70 CF             	and	f, 0xCF   ;select user reg space
  6740  5E80  62 D0 00          	mov	reg[CUR_PP],0
  6741  5E83  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6742  5E85  53 5E             	mov	[1+((?___awmod)^0x0)],a
  6743  5E87  6A                	rlc	a
  6744  5E88  53 5D             	mov	[0+((?___awmod)^0x0)],a
  6745  5E8A  1C 5D             	sbb	[0+((?___awmod)^0x0)],a
  6746  5E8C  50 0A             	mov	a,<(0Ah)
  6747  5E8E  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  6748  5E90  50 00             	mov	a,>(0Ah)
  6749  5E92  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  6750  5E94  71 80             	or	f, 0x80	;select multiple RAM page mode
  6751                          	
  6752  5E96  7C 6EF7           	xcall	___awmod
  6753                          	
  6754  5E99  64                	asl	a
  6755  5E9A  64                	asl	a
  6756  5E9B  01 34             	add	a,<__powers_
  6757  5E9D  5C                	mov	x,a
  6758  5E9E  50 7D             	mov	a,>__powers_
  6759  5EA0  08                	push	a
  6760  5EA1  28                	romx
  6761  5EA2  70 CF             	and	f, 0xCF   ;select user reg space
  6762  5EA4  62 D0 00          	mov	reg[CUR_PP],0
  6763  5EA7  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  6764  5EA9  18                	pop	a
  6765  5EAA  75                	inc	x
  6766  5EAB  08                	push	a
  6767  5EAC  28                	romx
  6768  5EAD  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  6769  5EAF  18                	pop	a
  6770  5EB0  75                	inc	x
  6771  5EB1  08                	push	a
  6772  5EB2  28                	romx
  6773  5EB3  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  6774  5EB5  18                	pop	a
  6775  5EB6  75                	inc	x
  6776  5EB7  28                	romx
  6777  5EB8  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  6778  5EBA  51 46             	mov	a,[0+((_scale$2778)^0x0)]
  6779  5EBC  53 5D             	mov	[0+((?___flmul)^0x0)],a
  6780  5EBE  51 47             	mov	a,[1+((_scale$2778)^0x0)]
  6781  5EC0  53 5E             	mov	[1+((?___flmul)^0x0)],a
  6782  5EC2  51 48             	mov	a,[2+((_scale$2778)^0x0)]
  6783  5EC4  53 5F             	mov	[2+((?___flmul)^0x0)],a
  6784  5EC6  51 49             	mov	a,[3+((_scale$2778)^0x0)]
  6785  5EC8  53 60             	mov	[3+((?___flmul)^0x0)],a
  6786  5ECA  71 80             	or	f, 0x80	;select multiple RAM page mode
  6787                          	
  6788  5ECC  7C 7680           	xcall	___flmul
  6789                          	
  6790  5ECF  70 CF             	and	f, 0xCF   ;select user reg space
  6791  5ED1  62 D0 00          	mov	reg[CUR_PP],0
  6792  5ED4  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  6793  5ED6  53 40             	mov	[0+((?_scale)^0x0)],a
  6794  5ED8  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  6795  5EDA  53 41             	mov	[1+((?_scale)^0x0)],a
  6796  5EDC  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  6797  5EDE  53 42             	mov	[2+((?_scale)^0x0)],a
  6798  5EE0  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  6799  5EE2  53 43             	mov	[3+((?_scale)^0x0)],a
  6800  5EE4  7D 5FC0           	xjmp	l110
  6801                          	line	426
  6802                          ;			
  6803  5EE7                    l115:	
  6804                          ;doprnt.c: 426: else if(scl > 10)
  6805  5EE7  70 CF             	and	f, 0xCF   ;select user reg space
  6806  5EE9  62 D0 00          	mov	reg[CUR_PP],0
  6807  5EEC  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6808  5EEE  31 80             	xor	a,80h
  6809  5EF0  39 8B             	cmp	a,(0Bh)^80h
  6810  5EF2  C0A7              	jc	l116
  6811                          	line	427
  6812  5EF4  70 CF             	and	f, 0xCF   ;select user reg space
  6813  5EF6  62 D0 00          	mov	reg[CUR_PP],0
  6814  5EF9  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6815  5EFB  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  6816  5EFD  6A                	rlc	a
  6817  5EFE  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  6818  5F00  1C 5D             	sbb	[0+((?___awdiv)^0x0)],a
  6819  5F02  50 0A             	mov	a,<(0Ah)
  6820  5F04  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  6821  5F06  50 00             	mov	a,>(0Ah)
  6822  5F08  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  6823  5F0A  71 80             	or	f, 0x80	;select multiple RAM page mode
  6824                          	
  6825  5F0C  7C 6DB8           	xcall	___awdiv
  6826                          	
  6827  5F0F  70 CF             	and	f, 0xCF   ;select user reg space
  6828  5F11  62 D0 00          	mov	reg[CUR_PP],0
  6829  5F14  5A 44             	mov	[((_scale$2782)^0x0)],x
  6830  5F16  53 45             	mov	[((_scale$2782+1)^0x0)],a
  6831  5F18  70 CF             	and	f, 0xCF   ;select user reg space
  6832  5F1A  62 D0 00          	mov	reg[CUR_PP],0
  6833  5F1D  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6834  5F1F  53 5E             	mov	[1+((?___awmod)^0x0)],a
  6835  5F21  6A                	rlc	a
  6836  5F22  53 5D             	mov	[0+((?___awmod)^0x0)],a
  6837  5F24  1C 5D             	sbb	[0+((?___awmod)^0x0)],a
  6838  5F26  50 0A             	mov	a,<(0Ah)
  6839  5F28  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  6840  5F2A  50 00             	mov	a,>(0Ah)
  6841  5F2C  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  6842  5F2E  71 80             	or	f, 0x80	;select multiple RAM page mode
  6843                          	
  6844  5F30  7C 6EF7           	xcall	___awmod
  6845                          	
  6846  5F33  64                	asl	a
  6847  5F34  64                	asl	a
  6848  5F35  01 34             	add	a,<__powers_
  6849  5F37  5C                	mov	x,a
  6850  5F38  50 7D             	mov	a,>__powers_
  6851  5F3A  08                	push	a
  6852  5F3B  28                	romx
  6853  5F3C  70 CF             	and	f, 0xCF   ;select user reg space
  6854  5F3E  62 D0 00          	mov	reg[CUR_PP],0
  6855  5F41  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  6856  5F43  18                	pop	a
  6857  5F44  75                	inc	x
  6858  5F45  08                	push	a
  6859  5F46  28                	romx
  6860  5F47  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  6861  5F49  18                	pop	a
  6862  5F4A  75                	inc	x
  6863  5F4B  08                	push	a
  6864  5F4C  28                	romx
  6865  5F4D  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  6866  5F4F  18                	pop	a
  6867  5F50  75                	inc	x
  6868  5F51  28                	romx
  6869  5F52  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  6870  5F54  50 01             	mov	a,<((01h))
  6871  5F56  01 44             	add	a,<(8000h+_scale$2782)
  6872  5F58  5C                	mov	x,a
  6873  5F59  50 80             	mov	a,>(8000h+_scale$2782)
  6874  5F5B  60 D3             	mov	reg[0xd3],a
  6875  5F5D  52 00             	mov	a,[x+0]
  6876  5F5F  64                	asl	a
  6877  5F60  64                	asl	a
  6878  5F61  01 24             	add	a,<((024h))
  6879  5F63  01 34             	add	a,<__powers_
  6880  5F65  5C                	mov	x,a
  6881  5F66  50 7D             	mov	a,>__powers_
  6882  5F68  08                	push	a
  6883  5F69  28                	romx
  6884  5F6A  53 5D             	mov	[0+((?___flmul)^0x0)],a
  6885  5F6C  18                	pop	a
  6886  5F6D  75                	inc	x
  6887  5F6E  08                	push	a
  6888  5F6F  28                	romx
  6889  5F70  53 5E             	mov	[1+((?___flmul)^0x0)],a
  6890  5F72  18                	pop	a
  6891  5F73  75                	inc	x
  6892  5F74  08                	push	a
  6893  5F75  28                	romx
  6894  5F76  53 5F             	mov	[2+((?___flmul)^0x0)],a
  6895  5F78  18                	pop	a
  6896  5F79  75                	inc	x
  6897  5F7A  28                	romx
  6898  5F7B  53 60             	mov	[3+((?___flmul)^0x0)],a
  6899  5F7D  71 80             	or	f, 0x80	;select multiple RAM page mode
  6900                          	
  6901  5F7F  7C 7680           	xcall	___flmul
  6902                          	
  6903  5F82  70 CF             	and	f, 0xCF   ;select user reg space
  6904  5F84  62 D0 00          	mov	reg[CUR_PP],0
  6905  5F87  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  6906  5F89  53 40             	mov	[0+((?_scale)^0x0)],a
  6907  5F8B  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  6908  5F8D  53 41             	mov	[1+((?_scale)^0x0)],a
  6909  5F8F  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  6910  5F91  53 42             	mov	[2+((?_scale)^0x0)],a
  6911  5F93  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  6912  5F95  53 43             	mov	[3+((?_scale)^0x0)],a
  6913  5F97  7D 5FC0           	xjmp	l110
  6914                          	line	428
  6915                          ;			
  6916  5F9A                    l116:	
  6917  5F9A  70 CF             	and	f, 0xCF   ;select user reg space
  6918  5F9C  62 D0 00          	mov	reg[CUR_PP],0
  6919  5F9F  51 40             	mov	a,[0+((scale@scl)^0x0)]
  6920  5FA1  64                	asl	a
  6921  5FA2  64                	asl	a
  6922  5FA3  01 34             	add	a,<__powers_
  6923  5FA5  5C                	mov	x,a
  6924  5FA6  50 7D             	mov	a,>__powers_
  6925  5FA8  08                	push	a
  6926  5FA9  28                	romx
  6927  5FAA  53 40             	mov	[0+((?_scale)^0x0)],a
  6928  5FAC  18                	pop	a
  6929  5FAD  75                	inc	x
  6930  5FAE  08                	push	a
  6931  5FAF  28                	romx
  6932  5FB0  53 41             	mov	[1+((?_scale)^0x0)],a
  6933  5FB2  18                	pop	a
  6934  5FB3  75                	inc	x
  6935  5FB4  08                	push	a
  6936  5FB5  28                	romx
  6937  5FB6  53 42             	mov	[2+((?_scale)^0x0)],a
  6938  5FB8  18                	pop	a
  6939  5FB9  75                	inc	x
  6940  5FBA  28                	romx
  6941  5FBB  53 43             	mov	[3+((?_scale)^0x0)],a
  6942  5FBD  7D 5FC0           	xjmp	l110
  6943                          	line	429
  6944                          ;doprnt.c: 429: }
  6945  5FC0                    l110:
  6946                          ;			
  6947  5FC0  70 CF             	and	f, 0xCF   ;select user reg space
  6948                          	
  6949  5FC2  7F                	ret
  6950                          GLOBAL __end_of_scale
  6951  5FC3                    	__end_of_scale:
  6952                          	FNSIZE	_scale,25,4
  6953                          ; =============== function _scale ends ============
  6954                          
  6955                          	signat	_scale,4220
  6956                          	global	_fround
  6957                          	global	??_fround
  6958                          	global	?_fround
  6959                          	psect	text
  6960                          
  6961                          ; *************** function _fround *****************
  6962                          ; Defined at:
  6963                          ;		line 398 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  6964                          ; Parameters:
  6965                          ;		prec        	offs:   0	type: unsigned char 
  6966                          ; Auto variables:
  6967                          ;		None
  6968                          ; Return value:
  6969                          ;		type: unsigned char 
  6970                          ;		size: 4
  6971                          ; Registers used:
  6972                          ;		a, x, CUR_PP, mret
  6973                          ; Tracked objects:
  6974                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6975                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  6976                          ;		Unchanged: 
  6977                          ; Data sizes:
  6978                          ;		Autos:   12
  6979                          ;		Params:   4
  6980                          ;		Temp:     1
  6981                          ;		Total:   17
  6982                          ; This function calls:
  6983                          ;		___awdiv
  6984                          ;		___awmod
  6985                          ;		___flmul
  6986                          ; This function is called by:
  6987                          ;		_printf
  6988                          ; This function uses a non-reentrant model
  6989                          ; 
  6990                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
  6991                          	line	398
  6992  029B                    	__size_of_fround	equ	__end_of_fround-_fround
  6993                          ;doprnt.c: 342: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
  6994                          ;doprnt.c: 344: 100000, 1000000, 10000000, 100000000,
  6995                          ;doprnt.c: 345: 1000000000
  6996                          ;doprnt.c: 347: };
  6997                          ;doprnt.c: 376: extern const double _powers_[], _npowers_[];
  6998                          ;doprnt.c: 380: extern unsigned long _div_to_l_(double, double);
  6999                          ;doprnt.c: 382: extern unsigned long _tdiv_to_l_(float, float);
  7000                          ;doprnt.c: 396: static double
  7001                          ;doprnt.c: 397: fround(unsigned char prec)
  7002                          ;doprnt.c: 398: {
  7003                          ;			
  7004  5FC3                    _fround:	
  7005                          	opt	disable
  7006                          	line	401
  7007                          ;doprnt.c: 401: if(prec>=110)
  7008  5FC3  70 CF             	and	f, 0xCF   ;select user reg space
  7009  5FC5  62 D0 00          	mov	reg[CUR_PP],0
  7010  5FC8  51 40             	mov	a,[0+((fround@prec)^0x0)]
  7011  5FCA  39 6E             	cmp	a,<((06Eh))
  7012  5FCC  C165              	jc	l107
  7013                          	line	402
  7014  5FCE  70 CF             	and	f, 0xCF   ;select user reg space
  7015  5FD0  62 D0 00          	mov	reg[CUR_PP],0
  7016  5FD3  51 40             	mov	a,[0+((fround@prec)^0x0)]
  7017  5FD5  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  7018  5FD7  50 00             	mov	a,0
  7019  5FD9  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  7020  5FDB  50 64             	mov	a,<(064h)
  7021  5FDD  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  7022  5FDF  50 00             	mov	a,>(064h)
  7023  5FE1  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  7024  5FE3  71 80             	or	f, 0x80	;select multiple RAM page mode
  7025                          	
  7026  5FE5  7C 6DB8           	xcall	___awdiv
  7027                          	
  7028  5FE8  70 CF             	and	f, 0xCF   ;select user reg space
  7029  5FEA  62 D0 00          	mov	reg[CUR_PP],0
  7030  5FED  5A 4C             	mov	[((_fround$2745)^0x0)],x
  7031  5FEF  53 4D             	mov	[((_fround$2745+1)^0x0)],a
  7032  5FF1  51 40             	mov	a,[0+((fround@prec)^0x0)]
  7033  5FF3  53 5E             	mov	[1+((?___awmod)^0x0)],a
  7034  5FF5  50 00             	mov	a,0
  7035  5FF7  53 5D             	mov	[0+((?___awmod)^0x0)],a
  7036  5FF9  50 64             	mov	a,<(064h)
  7037  5FFB  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  7038  5FFD  50 00             	mov	a,>(064h)
  7039  5FFF  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  7040  6001  71 80             	or	f, 0x80	;select multiple RAM page mode
  7041                          	
  7042  6003  7C 6EF7           	xcall	___awmod
  7043                          	
  7044  6006  70 CF             	and	f, 0xCF   ;select user reg space
  7045  6008  62 D0 00          	mov	reg[CUR_PP],0
  7046  600B  5A 4A             	mov	[((_fround$2746)^0x0)],x
  7047  600D  53 4B             	mov	[((_fround$2746+1)^0x0)],a
  7048  600F  50 0A             	mov	a,<(0Ah)
  7049  6011  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  7050  6013  50 00             	mov	a,>(0Ah)
  7051  6015  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  7052  6017  51 4A             	mov	a,[0+((_fround$2746)^0x0)]
  7053  6019  08                	push	a
  7054  601A  51 4B             	mov	a,[1+((_fround$2746)^0x0)]
  7055  601C  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  7056  601E  18                	pop	a
  7057  601F  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  7058  6021  71 80             	or	f, 0x80	;select multiple RAM page mode
  7059                          	
  7060  6023  7C 6DB8           	xcall	___awdiv
  7061                          	
  7062  6026  70 CF             	and	f, 0xCF   ;select user reg space
  7063  6028  62 D0 00          	mov	reg[CUR_PP],0
  7064  602B  5A 4E             	mov	[((_fround$2747)^0x0)],x
  7065  602D  53 4F             	mov	[((_fround$2747+1)^0x0)],a
  7066  602F  50 01             	mov	a,<((01h))
  7067  6031  01 4C             	add	a,<(8000h+_fround$2745)
  7068  6033  5C                	mov	x,a
  7069  6034  50 80             	mov	a,>(8000h+_fround$2745)
  7070  6036  70 CF             	and	f, 0xCF   ;select user reg space
  7071  6038  60 D3             	mov	reg[0xd3],a
  7072  603A  52 00             	mov	a,[x+0]
  7073  603C  64                	asl	a
  7074  603D  64                	asl	a
  7075  603E  01 48             	add	a,<((048h))
  7076  6040  01 00             	add	a,<__npowers_
  7077  6042  5C                	mov	x,a
  7078  6043  50 7D             	mov	a,>__npowers_
  7079  6045  08                	push	a
  7080  6046  28                	romx
  7081  6047  62 D0 00          	mov	reg[CUR_PP],0
  7082  604A  53 5D             	mov	[0+((?___flmul)^0x0)],a
  7083  604C  18                	pop	a
  7084  604D  75                	inc	x
  7085  604E  08                	push	a
  7086  604F  28                	romx
  7087  6050  53 5E             	mov	[1+((?___flmul)^0x0)],a
  7088  6052  18                	pop	a
  7089  6053  75                	inc	x
  7090  6054  08                	push	a
  7091  6055  28                	romx
  7092  6056  53 5F             	mov	[2+((?___flmul)^0x0)],a
  7093  6058  18                	pop	a
  7094  6059  75                	inc	x
  7095  605A  28                	romx
  7096  605B  53 60             	mov	[3+((?___flmul)^0x0)],a
  7097  605D  50 01             	mov	a,<((01h))
  7098  605F  01 4E             	add	a,<(8000h+_fround$2747)
  7099  6061  5C                	mov	x,a
  7100  6062  50 80             	mov	a,>(8000h+_fround$2747)
  7101  6064  60 D3             	mov	reg[0xd3],a
  7102  6066  52 00             	mov	a,[x+0]
  7103  6068  64                	asl	a
  7104  6069  64                	asl	a
  7105  606A  01 24             	add	a,<((024h))
  7106  606C  01 00             	add	a,<__npowers_
  7107  606E  5C                	mov	x,a
  7108  606F  50 7D             	mov	a,>__npowers_
  7109  6071  08                	push	a
  7110  6072  28                	romx
  7111  6073  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  7112  6075  18                	pop	a
  7113  6076  75                	inc	x
  7114  6077  08                	push	a
  7115  6078  28                	romx
  7116  6079  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  7117  607B  18                	pop	a
  7118  607C  75                	inc	x
  7119  607D  08                	push	a
  7120  607E  28                	romx
  7121  607F  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  7122  6081  18                	pop	a
  7123  6082  75                	inc	x
  7124  6083  28                	romx
  7125  6084  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  7126  6086  71 80             	or	f, 0x80	;select multiple RAM page mode
  7127                          	
  7128  6088  7C 7680           	xcall	___flmul
  7129                          	
  7130  608B  70 CF             	and	f, 0xCF   ;select user reg space
  7131  608D  62 D0 00          	mov	reg[CUR_PP],0
  7132  6090  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  7133  6092  53 46             	mov	[0+((_fround$2748)^0x0)],a
  7134  6094  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  7135  6096  53 47             	mov	[1+((_fround$2748)^0x0)],a
  7136  6098  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  7137  609A  53 48             	mov	[2+((_fround$2748)^0x0)],a
  7138  609C  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  7139  609E  53 49             	mov	[3+((_fround$2748)^0x0)],a
  7140  60A0  70 CF             	and	f, 0xCF   ;select user reg space
  7141  60A2  62 D0 00          	mov	reg[CUR_PP],0
  7142  60A5  51 40             	mov	a,[0+((fround@prec)^0x0)]
  7143  60A7  53 5E             	mov	[1+((?___awmod)^0x0)],a
  7144  60A9  50 00             	mov	a,0
  7145  60AB  53 5D             	mov	[0+((?___awmod)^0x0)],a
  7146  60AD  50 0A             	mov	a,<(0Ah)
  7147  60AF  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  7148  60B1  50 00             	mov	a,>(0Ah)
  7149  60B3  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  7150  60B5  71 80             	or	f, 0x80	;select multiple RAM page mode
  7151                          	
  7152  60B7  7C 6EF7           	xcall	___awmod
  7153                          	
  7154  60BA  64                	asl	a
  7155  60BB  64                	asl	a
  7156  60BC  01 00             	add	a,<__npowers_
  7157  60BE  5C                	mov	x,a
  7158  60BF  50 7D             	mov	a,>__npowers_
  7159  60C1  08                	push	a
  7160  60C2  28                	romx
  7161  60C3  70 CF             	and	f, 0xCF   ;select user reg space
  7162  60C5  62 D0 00          	mov	reg[CUR_PP],0
  7163  60C8  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  7164  60CA  18                	pop	a
  7165  60CB  75                	inc	x
  7166  60CC  08                	push	a
  7167  60CD  28                	romx
  7168  60CE  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  7169  60D0  18                	pop	a
  7170  60D1  75                	inc	x
  7171  60D2  08                	push	a
  7172  60D3  28                	romx
  7173  60D4  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  7174  60D6  18                	pop	a
  7175  60D7  75                	inc	x
  7176  60D8  28                	romx
  7177  60D9  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  7178  60DB  51 46             	mov	a,[0+((_fround$2748)^0x0)]
  7179  60DD  53 5D             	mov	[0+((?___flmul)^0x0)],a
  7180  60DF  51 47             	mov	a,[1+((_fround$2748)^0x0)]
  7181  60E1  53 5E             	mov	[1+((?___flmul)^0x0)],a
  7182  60E3  51 48             	mov	a,[2+((_fround$2748)^0x0)]
  7183  60E5  53 5F             	mov	[2+((?___flmul)^0x0)],a
  7184  60E7  51 49             	mov	a,[3+((_fround$2748)^0x0)]
  7185  60E9  53 60             	mov	[3+((?___flmul)^0x0)],a
  7186  60EB  71 80             	or	f, 0x80	;select multiple RAM page mode
  7187                          	
  7188  60ED  7C 7680           	xcall	___flmul
  7189                          	
  7190  60F0  70 CF             	and	f, 0xCF   ;select user reg space
  7191  60F2  62 D0 00          	mov	reg[CUR_PP],0
  7192  60F5  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  7193  60F7  53 5D             	mov	[0+((?___flmul)^0x0)],a
  7194  60F9  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  7195  60FB  53 5E             	mov	[1+((?___flmul)^0x0)],a
  7196  60FD  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  7197  60FF  53 5F             	mov	[2+((?___flmul)^0x0)],a
  7198  6101  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  7199  6103  53 60             	mov	[3+((?___flmul)^0x0)],a
  7200  6105  50 3F             	mov	a,<(0x3f000000>>24)
  7201  6107  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  7202  6109  50 00             	mov	a,<(0x3f000000>>16)
  7203  610B  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  7204  610D  50 00             	mov	a,<(0x3f000000>>8)
  7205  610F  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  7206  6111  50 00             	mov	a,<(0x3f000000)
  7207  6113  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  7208  6115  71 80             	or	f, 0x80	;select multiple RAM page mode
  7209                          	
  7210  6117  7C 7680           	xcall	___flmul
  7211                          	
  7212  611A  70 CF             	and	f, 0xCF   ;select user reg space
  7213  611C  62 D0 00          	mov	reg[CUR_PP],0
  7214  611F  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  7215  6121  53 40             	mov	[0+((?_fround)^0x0)],a
  7216  6123  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  7217  6125  53 41             	mov	[1+((?_fround)^0x0)],a
  7218  6127  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  7219  6129  53 42             	mov	[2+((?_fround)^0x0)],a
  7220  612B  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  7221  612D  53 43             	mov	[3+((?_fround)^0x0)],a
  7222  612F  7D 625B           	xjmp	l106
  7223                          	line	403
  7224                          ;			
  7225  6132                    l107:	
  7226                          ;doprnt.c: 403: else if(prec > 10)
  7227  6132  70 CF             	and	f, 0xCF   ;select user reg space
  7228  6134  62 D0 00          	mov	reg[CUR_PP],0
  7229  6137  51 40             	mov	a,[0+((fround@prec)^0x0)]
  7230  6139  39 0B             	cmp	a,<((0Bh))
  7231  613B  C0CF              	jc	l108
  7232                          	line	404
  7233  613D  70 CF             	and	f, 0xCF   ;select user reg space
  7234  613F  62 D0 00          	mov	reg[CUR_PP],0
  7235  6142  51 40             	mov	a,[0+((fround@prec)^0x0)]
  7236  6144  53 5E             	mov	[1+((?___awdiv)^0x0)],a
  7237  6146  50 00             	mov	a,0
  7238  6148  53 5D             	mov	[0+((?___awdiv)^0x0)],a
  7239  614A  50 0A             	mov	a,<(0Ah)
  7240  614C  53 60             	mov	[1+((0+?___awdiv+02h)^0x0)],a
  7241  614E  50 00             	mov	a,>(0Ah)
  7242  6150  53 5F             	mov	[0+((0+?___awdiv+02h)^0x0)],a
  7243  6152  71 80             	or	f, 0x80	;select multiple RAM page mode
  7244                          	
  7245  6154  7C 6DB8           	xcall	___awdiv
  7246                          	
  7247  6157  70 CF             	and	f, 0xCF   ;select user reg space
  7248  6159  62 D0 00          	mov	reg[CUR_PP],0
  7249  615C  5A 44             	mov	[((_fround$2753)^0x0)],x
  7250  615E  53 45             	mov	[((_fround$2753+1)^0x0)],a
  7251  6160  70 CF             	and	f, 0xCF   ;select user reg space
  7252  6162  62 D0 00          	mov	reg[CUR_PP],0
  7253  6165  51 40             	mov	a,[0+((fround@prec)^0x0)]
  7254  6167  53 5E             	mov	[1+((?___awmod)^0x0)],a
  7255  6169  50 00             	mov	a,0
  7256  616B  53 5D             	mov	[0+((?___awmod)^0x0)],a
  7257  616D  50 0A             	mov	a,<(0Ah)
  7258  616F  53 60             	mov	[1+((0+?___awmod+02h)^0x0)],a
  7259  6171  50 00             	mov	a,>(0Ah)
  7260  6173  53 5F             	mov	[0+((0+?___awmod+02h)^0x0)],a
  7261  6175  71 80             	or	f, 0x80	;select multiple RAM page mode
  7262                          	
  7263  6177  7C 6EF7           	xcall	___awmod
  7264                          	
  7265  617A  64                	asl	a
  7266  617B  64                	asl	a
  7267  617C  01 00             	add	a,<__npowers_
  7268  617E  5C                	mov	x,a
  7269  617F  50 7D             	mov	a,>__npowers_
  7270  6181  08                	push	a
  7271  6182  28                	romx
  7272  6183  70 CF             	and	f, 0xCF   ;select user reg space
  7273  6185  62 D0 00          	mov	reg[CUR_PP],0
  7274  6188  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  7275  618A  18                	pop	a
  7276  618B  75                	inc	x
  7277  618C  08                	push	a
  7278  618D  28                	romx
  7279  618E  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  7280  6190  18                	pop	a
  7281  6191  75                	inc	x
  7282  6192  08                	push	a
  7283  6193  28                	romx
  7284  6194  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  7285  6196  18                	pop	a
  7286  6197  75                	inc	x
  7287  6198  28                	romx
  7288  6199  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  7289  619B  50 01             	mov	a,<((01h))
  7290  619D  01 44             	add	a,<(8000h+_fround$2753)
  7291  619F  5C                	mov	x,a
  7292  61A0  50 80             	mov	a,>(8000h+_fround$2753)
  7293  61A2  60 D3             	mov	reg[0xd3],a
  7294  61A4  52 00             	mov	a,[x+0]
  7295  61A6  64                	asl	a
  7296  61A7  64                	asl	a
  7297  61A8  01 24             	add	a,<((024h))
  7298  61AA  01 00             	add	a,<__npowers_
  7299  61AC  5C                	mov	x,a
  7300  61AD  50 7D             	mov	a,>__npowers_
  7301  61AF  08                	push	a
  7302  61B0  28                	romx
  7303  61B1  53 5D             	mov	[0+((?___flmul)^0x0)],a
  7304  61B3  18                	pop	a
  7305  61B4  75                	inc	x
  7306  61B5  08                	push	a
  7307  61B6  28                	romx
  7308  61B7  53 5E             	mov	[1+((?___flmul)^0x0)],a
  7309  61B9  18                	pop	a
  7310  61BA  75                	inc	x
  7311  61BB  08                	push	a
  7312  61BC  28                	romx
  7313  61BD  53 5F             	mov	[2+((?___flmul)^0x0)],a
  7314  61BF  18                	pop	a
  7315  61C0  75                	inc	x
  7316  61C1  28                	romx
  7317  61C2  53 60             	mov	[3+((?___flmul)^0x0)],a
  7318  61C4  71 80             	or	f, 0x80	;select multiple RAM page mode
  7319                          	
  7320  61C6  7C 7680           	xcall	___flmul
  7321                          	
  7322  61C9  70 CF             	and	f, 0xCF   ;select user reg space
  7323  61CB  62 D0 00          	mov	reg[CUR_PP],0
  7324  61CE  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  7325  61D0  53 5D             	mov	[0+((?___flmul)^0x0)],a
  7326  61D2  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  7327  61D4  53 5E             	mov	[1+((?___flmul)^0x0)],a
  7328  61D6  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  7329  61D8  53 5F             	mov	[2+((?___flmul)^0x0)],a
  7330  61DA  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  7331  61DC  53 60             	mov	[3+((?___flmul)^0x0)],a
  7332  61DE  50 3F             	mov	a,<(0x3f000000>>24)
  7333  61E0  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  7334  61E2  50 00             	mov	a,<(0x3f000000>>16)
  7335  61E4  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  7336  61E6  50 00             	mov	a,<(0x3f000000>>8)
  7337  61E8  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  7338  61EA  50 00             	mov	a,<(0x3f000000)
  7339  61EC  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  7340  61EE  71 80             	or	f, 0x80	;select multiple RAM page mode
  7341                          	
  7342  61F0  7C 7680           	xcall	___flmul
  7343                          	
  7344  61F3  70 CF             	and	f, 0xCF   ;select user reg space
  7345  61F5  62 D0 00          	mov	reg[CUR_PP],0
  7346  61F8  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  7347  61FA  53 40             	mov	[0+((?_fround)^0x0)],a
  7348  61FC  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  7349  61FE  53 41             	mov	[1+((?_fround)^0x0)],a
  7350  6200  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  7351  6202  53 42             	mov	[2+((?_fround)^0x0)],a
  7352  6204  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  7353  6206  53 43             	mov	[3+((?_fround)^0x0)],a
  7354  6208  7D 625B           	xjmp	l106
  7355                          	line	405
  7356                          ;			
  7357  620B                    l108:	
  7358  620B  70 CF             	and	f, 0xCF   ;select user reg space
  7359  620D  62 D0 00          	mov	reg[CUR_PP],0
  7360  6210  51 40             	mov	a,[0+((fround@prec)^0x0)]
  7361  6212  64                	asl	a
  7362  6213  64                	asl	a
  7363  6214  01 00             	add	a,<__npowers_
  7364  6216  5C                	mov	x,a
  7365  6217  50 7D             	mov	a,>__npowers_
  7366  6219  08                	push	a
  7367  621A  28                	romx
  7368  621B  53 5D             	mov	[0+((?___flmul)^0x0)],a
  7369  621D  18                	pop	a
  7370  621E  75                	inc	x
  7371  621F  08                	push	a
  7372  6220  28                	romx
  7373  6221  53 5E             	mov	[1+((?___flmul)^0x0)],a
  7374  6223  18                	pop	a
  7375  6224  75                	inc	x
  7376  6225  08                	push	a
  7377  6226  28                	romx
  7378  6227  53 5F             	mov	[2+((?___flmul)^0x0)],a
  7379  6229  18                	pop	a
  7380  622A  75                	inc	x
  7381  622B  28                	romx
  7382  622C  53 60             	mov	[3+((?___flmul)^0x0)],a
  7383  622E  50 3F             	mov	a,<(0x3f000000>>24)
  7384  6230  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  7385  6232  50 00             	mov	a,<(0x3f000000>>16)
  7386  6234  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  7387  6236  50 00             	mov	a,<(0x3f000000>>8)
  7388  6238  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  7389  623A  50 00             	mov	a,<(0x3f000000)
  7390  623C  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  7391  623E  71 80             	or	f, 0x80	;select multiple RAM page mode
  7392                          	
  7393  6240  7C 7680           	xcall	___flmul
  7394                          	
  7395  6243  70 CF             	and	f, 0xCF   ;select user reg space
  7396  6245  62 D0 00          	mov	reg[CUR_PP],0
  7397  6248  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  7398  624A  53 40             	mov	[0+((?_fround)^0x0)],a
  7399  624C  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  7400  624E  53 41             	mov	[1+((?_fround)^0x0)],a
  7401  6250  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  7402  6252  53 42             	mov	[2+((?_fround)^0x0)],a
  7403  6254  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  7404  6256  53 43             	mov	[3+((?_fround)^0x0)],a
  7405  6258  7D 625B           	xjmp	l106
  7406                          	line	406
  7407                          ;doprnt.c: 406: }
  7408  625B                    l106:
  7409                          ;			
  7410  625B  70 CF             	and	f, 0xCF   ;select user reg space
  7411                          	
  7412  625D  7F                	ret
  7413                          GLOBAL __end_of_fround
  7414  625E                    	__end_of_fround:
  7415                          	FNSIZE	_fround,13,4
  7416                          ; =============== function _fround ends ============
  7417                          
  7418                          	signat	_fround,4220
  7419                          	global	_s_write_byte
  7420                          	global	??_s_write_byte
  7421                          	global	?_s_write_byte
  7422                          	psect	text
  7423                          
  7424                          ; *************** function _s_write_byte *****************
  7425                          ; Defined at:
  7426                          ;		line 55 in file "./shtxx.c"
  7427                          ; Parameters:
  7428                          ;		value       	offs:   0	type: unsigned char 
  7429                          ; Auto variables:
  7430                          ;		i           	       	type: unsigned char 
  7431                          ;		error       	       	type: unsigned char 
  7432                          ; Return value:
  7433                          ;		type: unsigned char 
  7434                          ;		size: 1
  7435                          ; Registers used:
  7436                          ;		a, CUR_PP
  7437                          ; Tracked objects:
  7438                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7439                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7440                          ;		Unchanged: 
  7441                          ; Data sizes:
  7442                          ;		Autos:    2
  7443                          ;		Params:   1
  7444                          ;		Temp:     0
  7445                          ;		Total:    3
  7446                          ; This function calls:
  7447                          ;		_delay_5us
  7448                          ; This function is called by:
  7449                          ;		_s_measure
  7450                          ; This function uses a non-reentrant model
  7451                          ; 
  7452                          	file	"./shtxx.c"
  7453                          	line	55
  7454  009A                    	__size_of_s_write_byte	equ	__end_of_s_write_byte-_s_write_byte
  7455                          ;shtxx.c: 52: char s_write_byte(unsigned char value)
  7456                          ;shtxx.c: 55: {
  7457                          ;			
  7458  625E                    _s_write_byte:	
  7459                          	opt	disable
  7460                          	line	56
  7461                          ;shtxx.c: 56: unsigned char i,error=0;
  7462  625E  50 00             	mov	a,<((0))
  7463  6260  70 CF             	and	f, 0xCF   ;select user reg space
  7464  6262  62 D0 00          	mov	reg[CUR_PP],0
  7465  6265  53 23             	mov	[0+((s_write_byte@error)^0x0)],a
  7466                          	line	57
  7467                          ;shtxx.c: 57: for (i=0x80;i>0;i/=2)
  7468  6267  50 80             	mov	a,<((080h))
  7469  6269  53 22             	mov	[0+((s_write_byte@i)^0x0)],a
  7470  626B  51 22             	mov	a,[0+((s_write_byte@i)^0x0)]
  7471  626D  39 00             	cmp	a,(0)
  7472  626F  B004              	jnz	l61
  7473  6271  7D 62C5           	xjmp	l62
  7474                          	line	58
  7475                          ;			
  7476  6274                    l61:	
  7477                          ;shtxx.c: 58: { if (i & value) (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  7478  6274  70 CF             	and	f, 0xCF   ;select user reg space
  7479  6276  62 D0 00          	mov	reg[CUR_PP],0
  7480  6279  51 22             	mov	a,[0+((s_write_byte@i)^0x0)]
  7481  627B  22 21             	and	a,[0+((s_write_byte@value)^0x0)]
  7482  627D  39 00             	cmp	a,(0)
  7483  627F  A00C              	jz	l64
  7484  6281  70 CF             	and	f, 0xCF   ;select user reg space
  7485  6283  5D 10             	mov	a,reg[(16)]
  7486  6285  29 01             	or	a,<((01h))
  7487  6287  60 10             	mov	reg[(16)],a
  7488  6289  7D 6294           	xjmp	l65
  7489                          	line	59
  7490                          ;			
  7491  628C                    l64:	
  7492                          ;shtxx.c: 59: else (PRT4DR = (0==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  7493  628C  70 CF             	and	f, 0xCF   ;select user reg space
  7494  628E  5D 10             	mov	a,reg[(16)]
  7495  6290  21 FE             	and	a,<((0FEh))
  7496  6292  60 10             	mov	reg[(16)],a
  7497                          ;			
  7498  6294                    l65:	
  7499                          	line	60
  7500                          ;shtxx.c: 60: (PRT2DR = (1==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  7501  6294  70 CF             	and	f, 0xCF   ;select user reg space
  7502  6296  5D 08             	mov	a,reg[(8)]
  7503  6298  29 40             	or	a,<((040h))
  7504  629A  60 08             	mov	reg[(8)],a
  7505                          	line	61
  7506                          ;shtxx.c: 61: delay_5us();
  7507  629C  71 80             	or	f, 0x80	;select multiple RAM page mode
  7508                          	
  7509  629E  7C 6B93           	xcall	_delay_5us
  7510                          	
  7511                          	line	62
  7512                          ;shtxx.c: 62: (PRT2DR = (0==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  7513  62A1  70 CF             	and	f, 0xCF   ;select user reg space
  7514  62A3  5D 08             	mov	a,reg[(8)]
  7515  62A5  21 BF             	and	a,<((0BFh))
  7516  62A7  60 08             	mov	reg[(8)],a
  7517                          	line	57
  7518  62A9  50 01             	mov	a,<((01h))
  7519  62AB  7D 62B7           	xjmp	u1313
  7520  62AE  70 FB             	clrc
  7521  62B0                    u1324:
  7522  62B0  70 CF             	and	f, 0xCF   ;select user reg space
  7523  62B2  62 D0 00          	mov	reg[CUR_PP],0
  7524  62B5  6E 22             	rrc	[0+((s_write_byte@i)^0x0)]
  7525  62B7                    u1313:
  7526  62B7  78                	dec	a
  7527  62B8  DFF7              	jnc	u1324
  7528  62BA  70 CF             	and	f, 0xCF   ;select user reg space
  7529  62BC  62 D0 00          	mov	reg[CUR_PP],0
  7530  62BF  51 22             	mov	a,[0+((s_write_byte@i)^0x0)]
  7531  62C1  39 00             	cmp	a,(0)
  7532  62C3  BFB0              	jnz	l61
  7533                          ;			
  7534  62C5                    l62:	
  7535                          	line	64
  7536                          ;shtxx.c: 63: }
  7537                          ;shtxx.c: 64: (PRT4DR = (1==0) ? (PRT4DR&0xFE) : (PRT4DR|0x01));
  7538  62C5  70 CF             	and	f, 0xCF   ;select user reg space
  7539  62C7  5D 10             	mov	a,reg[(16)]
  7540  62C9  29 01             	or	a,<((01h))
  7541  62CB  60 10             	mov	reg[(16)],a
  7542                          	line	65
  7543                          ;shtxx.c: 65: (PRT2DR = (1==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  7544  62CD  5D 08             	mov	a,reg[(8)]
  7545  62CF  29 40             	or	a,<((040h))
  7546  62D1  60 08             	mov	reg[(8)],a
  7547                          	line	66
  7548                          ;shtxx.c: 66: delay_5us();
  7549  62D3  71 80             	or	f, 0x80	;select multiple RAM page mode
  7550                          	
  7551  62D5  7C 6B93           	xcall	_delay_5us
  7552                          	
  7553                          	line	67
  7554                          ;shtxx.c: 67: error=PRT4DR&0x01;
  7555  62D8  70 CF             	and	f, 0xCF   ;select user reg space
  7556  62DA  5D 10             	mov	a,reg[(16)]
  7557  62DC  21 01             	and	a,<((01h))
  7558  62DE  62 D0 00          	mov	reg[CUR_PP],0
  7559  62E1  53 23             	mov	[0+((s_write_byte@error)^0x0)],a
  7560                          	line	68
  7561                          ;shtxx.c: 68: (PRT2DR = (0==0) ? (PRT2DR&0xBF) : (PRT2DR|0x40));
  7562  62E3  70 CF             	and	f, 0xCF   ;select user reg space
  7563  62E5  5D 08             	mov	a,reg[(8)]
  7564  62E7  21 BF             	and	a,<((0BFh))
  7565  62E9  60 08             	mov	reg[(8)],a
  7566                          	line	69
  7567                          ;shtxx.c: 69: return error;
  7568  62EB  70 CF             	and	f, 0xCF   ;select user reg space
  7569  62ED  62 D0 00          	mov	reg[CUR_PP],0
  7570  62F0  51 23             	mov	a,[0+((s_write_byte@error)^0x0)]
  7571  62F2  7D 62F5           	xjmp	l60
  7572                          	line	70
  7573                          ;shtxx.c: 70: }
  7574  62F5                    l60:
  7575                          ;			
  7576  62F5  70 CF             	and	f, 0xCF   ;select user reg space
  7577                          	
  7578  62F7  7F                	ret
  7579                          GLOBAL __end_of_s_write_byte
  7580  62F8                    	__end_of_s_write_byte:
  7581                          	FNSIZE	_s_write_byte,2,1
  7582                          ; =============== function _s_write_byte ends ============
  7583                          
  7584                          	signat	_s_write_byte,4217
  7585                          	global	_putch
  7586                          	global	??_putch
  7587                          	global	?_putch
  7588                          	psect	text
  7589                          
  7590                          ; *************** function _putch *****************
  7591                          ; Defined at:
  7592                          ;		line 92 in file "./main.c"
  7593                          ; Parameters:
  7594                          ;		c           	offs:   0	type: unsigned char 
  7595                          ; Auto variables:
  7596                          ;		None
  7597                          ; Return value:
  7598                          ;		type: void 
  7599                          ;		size: 0
  7600                          ; Registers used:
  7601                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  7602                          ; Tracked objects:
  7603                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7604                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7605                          ;		Unchanged: 
  7606                          ; Data sizes:
  7607                          ;		Autos:    0
  7608                          ;		Params:   1
  7609                          ;		Temp:     0
  7610                          ;		Total:    1
  7611                          ; This function calls:
  7612                          ;		_LTRX_PutChar
  7613                          ; This function is called by:
  7614                          ;		_printf
  7615                          ; This function uses a non-reentrant model
  7616                          ; 
  7617                          	file	"./main.c"
  7618                          	line	92
  7619  0014                    	__size_of_putch	equ	__end_of_putch-_putch
  7620                          ;main.c: 92: void putch(unsigned char c) {
  7621                          ;			
  7622  62F8                    _putch:	
  7623                          	opt	disable
  7624                          	line	94
  7625                          ;main.c: 94: LTRX_PutChar(c);
  7626  62F8  70 CF             	and	f, 0xCF   ;select user reg space
  7627  62FA  62 D0 00          	mov	reg[CUR_PP],0
  7628  62FD  51 40             	mov	a,[0+((putch@c)^0x0)]
  7629  62FF  71 80             	or	f, 0x80	;select multiple RAM page mode
  7630                          	
  7631  6301  7C 3C0B           	xcall	_LTRX_PutChar
  7632                          	
  7633  6304  38 00             	add	sp,0
  7634                          	line	95
  7635                          ;main.c: 95: return;
  7636  6306  7D 6309           	xjmp	l15
  7637                          	line	96
  7638                          ;main.c: 96: }
  7639  6309                    l15:
  7640                          ;			
  7641  6309  70 CF             	and	f, 0xCF   ;select user reg space
  7642                          	
  7643  630B  7F                	ret
  7644                          GLOBAL __end_of_putch
  7645  630C                    	__end_of_putch:
  7646                          	FNSIZE	_putch,0,1
  7647                          ; =============== function _putch ends ============
  7648                          
  7649                          	signat	_putch,4216
  7650                          	global	_isdigit
  7651                          	global	??_isdigit
  7652                          	global	?_isdigit
  7653                          	psect	text
  7654                          
  7655                          ; *************** function _isdigit *****************
  7656                          ; Defined at:
  7657                          ;		line 13 in file "../common/isdigit.c"
  7658                          ; Parameters:
  7659                          ;		c           	offs:   0	type: unsigned char 
  7660                          ; Auto variables:
  7661                          ;		None
  7662                          ; Return value:
  7663                          ;		type: bit 
  7664                          ;		size: 0
  7665                          ; Registers used:
  7666                          ;		a, CUR_PP
  7667                          ; Tracked objects:
  7668                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7669                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7670                          ;		Unchanged: 
  7671                          ; Data sizes:
  7672                          ;		Autos:    0
  7673                          ;		Params:   1
  7674                          ;		Temp:     0
  7675                          ;		Total:    1
  7676                          ; This function calls:
  7677                          ;		Nothing
  7678                          ; This function is called by:
  7679                          ;		_printf
  7680                          ; This function uses a non-reentrant model
  7681                          ; 
  7682                          	file	"../common/isdigit.c"
  7683                          	line	13
  7684  0023                    	__size_of_isdigit	equ	__end_of_isdigit-_isdigit
  7685                          ;isdigit.c: 7: bit
  7686                          ;isdigit.c: 8: isdigit(char c)
  7687                          ;isdigit.c: 13: {
  7688                          ;			
  7689  630C                    _isdigit:	
  7690                          	opt	disable
  7691                          	line	14
  7692                          ;isdigit.c: 14: return c <= '9' && c >= '0';
  7693  630C  70 CF             	and	f, 0xCF   ;select user reg space
  7694  630E  62 D0 00          	mov	reg[CUR_PP],0
  7695  6311  51 40             	mov	a,[0+((isdigit@c)^0x0)]
  7696  6313  39 3A             	cmp	a,<((03Ah))
  7697  6315  D00C              	jnc	l600001840
  7698  6317  70 CF             	and	f, 0xCF   ;select user reg space
  7699  6319  62 D0 00          	mov	reg[CUR_PP],0
  7700  631C  51 40             	mov	a,[0+((isdigit@c)^0x0)]
  7701  631E  39 30             	cmp	a,<((030h))
  7702  6320  D006              	jnc	l400001838
  7703                          ;			
  7704  6322                    l600001840:	
  7705  6322  70 FB             	clrc
  7706  6324  7D 6329           	xjmp	l400001839
  7707                          ;			
  7708  6327                    l400001838:	
  7709  6327  71 04             	setc
  7710                          ;			
  7711  6329                    l400001839:	
  7712  6329  7D 632C           	xjmp	l192
  7713                          	line	15
  7714                          ;isdigit.c: 15: }
  7715  632C                    l192:
  7716                          ;			
  7717  632C  70 CF             	and	f, 0xCF   ;select user reg space
  7718                          	
  7719  632E  7F                	ret
  7720                          GLOBAL __end_of_isdigit
  7721  632F                    	__end_of_isdigit:
  7722                          	FNSIZE	_isdigit,0,1
  7723                          ; =============== function _isdigit ends ============
  7724                          
  7725                          	signat	_isdigit,4216
  7726                          	global	___fldiv
  7727                          	global	??___fldiv
  7728                          	global	?___fldiv
  7729                          	psect	text
  7730                          
  7731                          ; *************** function ___fldiv *****************
  7732                          ; Defined at:
  7733                          ;		line 19 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fldiv.c"
  7734                          ; Parameters:
  7735                          ;		f1          	offs:   0	type: bit 
  7736                          ;		f2          	offs:   4	type: bit 
  7737                          ; Auto variables:
  7738                          ;		f3          	       	type: bit 
  7739                          ;		exp1        	       	type: unsigned char 
  7740                          ;		sign2       	       	type: unsigned char 
  7741                          ;		exp2        	       	type: unsigned char 
  7742                          ;		sign1       	       	type: unsigned char 
  7743                          ; Return value:
  7744                          ;		type: unsigned char 
  7745                          ;		size: 4
  7746                          ; Registers used:
  7747                          ;		a, x, CUR_PP
  7748                          ; Tracked objects:
  7749                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7750                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  7751                          ;		Unchanged: 
  7752                          ; Data sizes:
  7753                          ;		Autos:    8
  7754                          ;		Params:   8
  7755                          ;		Temp:     1
  7756                          ;		Total:   17
  7757                          ; This function calls:
  7758                          ;		___flunpack
  7759                          ;		___flpack
  7760                          ; This function is called by:
  7761                          ;		_calc_dewpoint
  7762                          ; This function uses a non-reentrant model
  7763                          ; 
  7764                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fldiv.c"
  7765                          	line	19
  7766  0180                    	__size_of___fldiv	equ	__end_of___fldiv-___fldiv
  7767                          ;fldiv.c: 17: double
  7768                          ;fldiv.c: 18: __fldiv(double f1, double f2)
  7769                          ;fldiv.c: 19: {
  7770                          ;			
  7771  632F                    ___fldiv:	
  7772                          	opt	disable
  7773                          	line	23
  7774                          ;fldiv.c: 20: unsigned char exp1, exp2, sign1, sign2;
  7775                          ;fldiv.c: 21: double f3;
  7776                          ;fldiv.c: 23: (*(unsigned long *)&f3) = 0;
  7777  632F  50 00             	mov	a,<(0>>24)
  7778  6331  70 CF             	and	f, 0xCF   ;select user reg space
  7779  6333  62 D0 00          	mov	reg[CUR_PP],0
  7780  6336  53 3C             	mov	[0+((___fldiv@f3)^0x0)],a
  7781  6338  50 00             	mov	a,<(0>>16)
  7782  633A  53 3D             	mov	[1+((___fldiv@f3)^0x0)],a
  7783  633C  50 00             	mov	a,<(0>>8)
  7784  633E  53 3E             	mov	[2+((___fldiv@f3)^0x0)],a
  7785  6340  50 00             	mov	a,<(0)
  7786  6342  53 3F             	mov	[3+((___fldiv@f3)^0x0)],a
  7787                          	line	24
  7788                          ;fldiv.c: 24: sign1 = __flunpack(&(*(unsigned long *)&f1), &exp1);
  7789  6344  50 34             	mov	a,<((___fldiv@f1|8000h))
  7790  6346  70 CF             	and	f, 0xCF   ;select user reg space
  7791  6348  62 D0 00          	mov	reg[CUR_PP],0
  7792  634B  53 71             	mov	[1+((?___flunpack)^0x0)],a
  7793  634D  50 80             	mov	a,>((___fldiv@f1|8000h))
  7794  634F  53 70             	mov	[0+((?___flunpack)^0x0)],a
  7795  6351  50 41             	mov	a,<((___fldiv@exp1|8000h))
  7796  6353  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  7797  6355  50 80             	mov	a,>((___fldiv@exp1|8000h))
  7798  6357  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  7799  6359  71 80             	or	f, 0x80	;select multiple RAM page mode
  7800                          	
  7801  635B  7C 7AFC           	xcall	___flunpack
  7802                          	
  7803  635E  70 CF             	and	f, 0xCF   ;select user reg space
  7804  6360  62 D0 00          	mov	reg[CUR_PP],0
  7805  6363  53 42             	mov	[0+((___fldiv@sign1)^0x0)],a
  7806                          	line	25
  7807                          ;fldiv.c: 25: if(exp1 == 0)
  7808  6365  70 CF             	and	f, 0xCF   ;select user reg space
  7809  6367  62 D0 00          	mov	reg[CUR_PP],0
  7810  636A  51 41             	mov	a,[0+((___fldiv@exp1)^0x0)]
  7811  636C  39 00             	cmp	a,(0)
  7812  636E  B019              	jnz	l362
  7813                          	line	26
  7814  6370  70 CF             	and	f, 0xCF   ;select user reg space
  7815  6372  62 D0 00          	mov	reg[CUR_PP],0
  7816  6375  51 3C             	mov	a,[0+((___fldiv@f3)^0x0)]
  7817  6377  53 34             	mov	[0+((?___fldiv)^0x0)],a
  7818  6379  51 3D             	mov	a,[1+((___fldiv@f3)^0x0)]
  7819  637B  53 35             	mov	[1+((?___fldiv)^0x0)],a
  7820  637D  51 3E             	mov	a,[2+((___fldiv@f3)^0x0)]
  7821  637F  53 36             	mov	[2+((?___fldiv)^0x0)],a
  7822  6381  51 3F             	mov	a,[3+((___fldiv@f3)^0x0)]
  7823  6383  53 37             	mov	[3+((?___fldiv)^0x0)],a
  7824  6385  7D 64AC           	xjmp	l361
  7825                          ;			
  7826  6388                    l362:	
  7827                          	line	27
  7828                          ;fldiv.c: 27: sign2 = __flunpack(&(*(unsigned long *)&f2), &exp2);
  7829  6388  50 38             	mov	a,<((___fldiv@f2|8000h))
  7830  638A  70 CF             	and	f, 0xCF   ;select user reg space
  7831  638C  62 D0 00          	mov	reg[CUR_PP],0
  7832  638F  53 71             	mov	[1+((?___flunpack)^0x0)],a
  7833  6391  50 80             	mov	a,>((___fldiv@f2|8000h))
  7834  6393  53 70             	mov	[0+((?___flunpack)^0x0)],a
  7835  6395  50 43             	mov	a,<((___fldiv@exp2|8000h))
  7836  6397  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  7837  6399  50 80             	mov	a,>((___fldiv@exp2|8000h))
  7838  639B  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  7839  639D  71 80             	or	f, 0x80	;select multiple RAM page mode
  7840                          	
  7841  639F  7C 7AFC           	xcall	___flunpack
  7842                          	
  7843  63A2  70 CF             	and	f, 0xCF   ;select user reg space
  7844  63A4  62 D0 00          	mov	reg[CUR_PP],0
  7845  63A7  53 40             	mov	[0+((___fldiv@sign2)^0x0)],a
  7846                          	line	28
  7847                          ;fldiv.c: 28: if(exp2 == 0)
  7848  63A9  70 CF             	and	f, 0xCF   ;select user reg space
  7849  63AB  62 D0 00          	mov	reg[CUR_PP],0
  7850  63AE  51 43             	mov	a,[0+((___fldiv@exp2)^0x0)]
  7851  63B0  39 00             	cmp	a,(0)
  7852  63B2  B019              	jnz	l363
  7853                          	line	29
  7854  63B4  70 CF             	and	f, 0xCF   ;select user reg space
  7855  63B6  62 D0 00          	mov	reg[CUR_PP],0
  7856  63B9  51 3C             	mov	a,[0+((___fldiv@f3)^0x0)]
  7857  63BB  53 34             	mov	[0+((?___fldiv)^0x0)],a
  7858  63BD  51 3D             	mov	a,[1+((___fldiv@f3)^0x0)]
  7859  63BF  53 35             	mov	[1+((?___fldiv)^0x0)],a
  7860  63C1  51 3E             	mov	a,[2+((___fldiv@f3)^0x0)]
  7861  63C3  53 36             	mov	[2+((?___fldiv)^0x0)],a
  7862  63C5  51 3F             	mov	a,[3+((___fldiv@f3)^0x0)]
  7863  63C7  53 37             	mov	[3+((?___fldiv)^0x0)],a
  7864  63C9  7D 64AC           	xjmp	l361
  7865                          ;			
  7866  63CC                    l363:	
  7867                          	line	30
  7868                          ;fldiv.c: 30: exp1 -= exp2-127+8;
  7869  63CC  50 89             	mov	a,<((089h))
  7870  63CE  70 CF             	and	f, 0xCF   ;select user reg space
  7871  63D0  62 D0 00          	mov	reg[CUR_PP],0
  7872  63D3  02 43             	add	a,[0+((___fldiv@exp2)^0x0)]
  7873  63D5  53 44             	mov	[(??___fldiv^0x0)+8+0],a
  7874  63D7  51 41             	mov	a,[0+((___fldiv@exp1)^0x0)]
  7875  63D9  12 44             	sub	a,[(??___fldiv^0x0)+8+0]
  7876  63DB  53 41             	mov	[0+((___fldiv@exp1)^0x0)],a
  7877                          	line	31
  7878                          ;fldiv.c: 31: sign1 ^= sign2;
  7879  63DD  51 42             	mov	a,[0+((___fldiv@sign1)^0x0)]
  7880  63DF  32 40             	xor	a,[0+((___fldiv@sign2)^0x0)]
  7881  63E1  53 42             	mov	[0+((___fldiv@sign1)^0x0)],a
  7882                          	line	32
  7883                          ;fldiv.c: 32: sign2 = 24+8;
  7884  63E3  50 20             	mov	a,<((020h))
  7885  63E5  53 40             	mov	[0+((___fldiv@sign2)^0x0)],a
  7886                          	line	33
  7887                          ;fldiv.c: 33: do {
  7888                          ;			
  7889  63E7                    l366:	
  7890                          	line	34
  7891                          ;fldiv.c: 34: (*(unsigned long *)&f3) <<= 1;
  7892  63E7  50 01             	mov	a,<((01h))
  7893  63E9  7D 63F9           	xjmp	u1883
  7894  63EC                    u1894:
  7895  63EC  70 CF             	and	f, 0xCF   ;select user reg space
  7896  63EE  62 D0 00          	mov	reg[CUR_PP],0
  7897  63F1  65 3F             	asl	[3+((___fldiv@f3)^0x0)]
  7898  63F3  6B 3E             	rlc	[2+((___fldiv@f3)^0x0)]
  7899  63F5  6B 3D             	rlc	[1+((___fldiv@f3)^0x0)]
  7900  63F7  6B 3C             	rlc	[0+((___fldiv@f3)^0x0)]
  7901  63F9                    u1883:
  7902  63F9  78                	dec	a
  7903  63FA  DFF1              	jnc	u1894
  7904                          	line	35
  7905                          ;fldiv.c: 35: if((*(unsigned long *)&f1) >= (*(unsigned long *)&f2)) {
  7906  63FC  70 CF             	and	f, 0xCF   ;select user reg space
  7907  63FE  62 D0 00          	mov	reg[CUR_PP],0
  7908  6401  51 37             	mov	a,[3+((___fldiv@f1)^0x0)]
  7909  6403  3A 3B             	cmp	a,[3+((___fldiv@f2)^0x0)]
  7910  6405  51 36             	mov	a,[2+((___fldiv@f1)^0x0)]
  7911  6407  1A 3A             	sbb	a,[2+((___fldiv@f2)^0x0)]
  7912  6409  51 35             	mov	a,[1+((___fldiv@f1)^0x0)]
  7913  640B  1A 39             	sbb	a,[1+((___fldiv@f2)^0x0)]
  7914  640D  51 34             	mov	a,[0+((___fldiv@f1)^0x0)]
  7915  640F  1A 38             	sbb	a,[0+((___fldiv@f2)^0x0)]
  7916  6411  C026              	jc	l367
  7917                          	line	36
  7918                          ;fldiv.c: 36: (*(unsigned long *)&f1) -= (*(unsigned long *)&f2);
  7919  6413  70 CF             	and	f, 0xCF   ;select user reg space
  7920  6415  62 D0 00          	mov	reg[CUR_PP],0
  7921  6418  51 3B             	mov	a,[3+((___fldiv@f2)^0x0)]
  7922  641A  14 37             	sub	[3+((___fldiv@f1)^0x0)],a
  7923  641C  51 3A             	mov	a,[2+((___fldiv@f2)^0x0)]
  7924  641E  1C 36             	sbb	[2+((___fldiv@f1)^0x0)],a
  7925  6420  51 39             	mov	a,[1+((___fldiv@f2)^0x0)]
  7926  6422  1C 35             	sbb	[1+((___fldiv@f1)^0x0)],a
  7927  6424  51 38             	mov	a,[0+((___fldiv@f2)^0x0)]
  7928  6426  1C 34             	sbb	[0+((___fldiv@f1)^0x0)],a
  7929                          	line	37
  7930                          ;fldiv.c: 37: (*(unsigned long *)&f3) |= 1;
  7931  6428  50 01             	mov	a,<(01h)
  7932  642A  2C 3F             	or	[3+((___fldiv@f3)^0x0)],a
  7933  642C  50 00             	mov	a,<(01h>>8)
  7934  642E  2C 3E             	or	[2+((___fldiv@f3)^0x0)],a
  7935  6430  50 00             	mov	a,<(01h>>16)
  7936  6432  2C 3D             	or	[1+((___fldiv@f3)^0x0)],a
  7937  6434  50 00             	mov	a,<(01h>>24)
  7938  6436  2C 3C             	or	[0+((___fldiv@f3)^0x0)],a
  7939                          	line	38
  7940                          ;			
  7941  6438                    l367:	
  7942                          	line	39
  7943                          ;fldiv.c: 38: }
  7944                          ;fldiv.c: 39: (*(unsigned long *)&f1) <<= 1;
  7945  6438  50 01             	mov	a,<((01h))
  7946  643A  7D 644A           	xjmp	u1903
  7947  643D                    u1914:
  7948  643D  70 CF             	and	f, 0xCF   ;select user reg space
  7949  643F  62 D0 00          	mov	reg[CUR_PP],0
  7950  6442  65 37             	asl	[3+((___fldiv@f1)^0x0)]
  7951  6444  6B 36             	rlc	[2+((___fldiv@f1)^0x0)]
  7952  6446  6B 35             	rlc	[1+((___fldiv@f1)^0x0)]
  7953  6448  6B 34             	rlc	[0+((___fldiv@f1)^0x0)]
  7954  644A                    u1903:
  7955  644A  78                	dec	a
  7956  644B  DFF1              	jnc	u1914
  7957                          	line	40
  7958                          ;fldiv.c: 40: } while(--sign2 != 0);
  7959  644D  70 CF             	and	f, 0xCF   ;select user reg space
  7960  644F  62 D0 00          	mov	reg[CUR_PP],0
  7961  6452  51 40             	mov	a,[0+((___fldiv@sign2)^0x0)]
  7962  6454  11 01             	sub	a,<((01h))
  7963  6456  53 40             	mov	[0+((___fldiv@sign2)^0x0)],a
  7964  6458  51 40             	mov	a,[0+((___fldiv@sign2)^0x0)]
  7965  645A  39 00             	cmp	a,(0)
  7966  645C  BF8A              	jnz	l366
  7967                          ;			
  7968  645E                    l365:	
  7969                          	line	41
  7970                          ;fldiv.c: 41: __flpack(&(*(unsigned long *)&f3), exp1);
  7971  645E  50 3C             	mov	a,<((___fldiv@f3|8000h))
  7972  6460  70 CF             	and	f, 0xCF   ;select user reg space
  7973  6462  62 D0 00          	mov	reg[CUR_PP],0
  7974  6465  53 71             	mov	[1+((?___flpack)^0x0)],a
  7975  6467  50 80             	mov	a,>((___fldiv@f3|8000h))
  7976  6469  53 70             	mov	[0+((?___flpack)^0x0)],a
  7977  646B  51 41             	mov	a,[0+((___fldiv@exp1)^0x0)]
  7978  646D  53 72             	mov	[0+((0+?___flpack+02h)^0x0)],a
  7979  646F  71 80             	or	f, 0x80	;select multiple RAM page mode
  7980                          	
  7981  6471  7C 78CD           	xcall	___flpack
  7982                          	
  7983                          	line	42
  7984                          ;fldiv.c: 42: if(sign1)
  7985  6474  70 CF             	and	f, 0xCF   ;select user reg space
  7986  6476  62 D0 00          	mov	reg[CUR_PP],0
  7987  6479  51 42             	mov	a,[0+((___fldiv@sign1)^0x0)]
  7988  647B  39 00             	cmp	a,(0)
  7989  647D  A016              	jz	l368
  7990                          	line	43
  7991                          ;fldiv.c: 43: (*(unsigned long *)&f3) |= 0x80000000;
  7992  647F  50 00             	mov	a,<(-2147483648)
  7993  6481  70 CF             	and	f, 0xCF   ;select user reg space
  7994  6483  62 D0 00          	mov	reg[CUR_PP],0
  7995  6486  2C 3F             	or	[3+((___fldiv@f3)^0x0)],a
  7996  6488  50 00             	mov	a,<(-2147483648>>8)
  7997  648A  2C 3E             	or	[2+((___fldiv@f3)^0x0)],a
  7998  648C  50 00             	mov	a,<(-2147483648>>16)
  7999  648E  2C 3D             	or	[1+((___fldiv@f3)^0x0)],a
  8000  6490  50 80             	mov	a,<(-2147483648>>24)
  8001  6492  2C 3C             	or	[0+((___fldiv@f3)^0x0)],a
  8002                          ;			
  8003  6494                    l368:	
  8004                          	line	44
  8005  6494  70 CF             	and	f, 0xCF   ;select user reg space
  8006  6496  62 D0 00          	mov	reg[CUR_PP],0
  8007  6499  51 3C             	mov	a,[0+((___fldiv@f3)^0x0)]
  8008  649B  53 34             	mov	[0+((?___fldiv)^0x0)],a
  8009  649D  51 3D             	mov	a,[1+((___fldiv@f3)^0x0)]
  8010  649F  53 35             	mov	[1+((?___fldiv)^0x0)],a
  8011  64A1  51 3E             	mov	a,[2+((___fldiv@f3)^0x0)]
  8012  64A3  53 36             	mov	[2+((?___fldiv)^0x0)],a
  8013  64A5  51 3F             	mov	a,[3+((___fldiv@f3)^0x0)]
  8014  64A7  53 37             	mov	[3+((?___fldiv)^0x0)],a
  8015  64A9  7D 64AC           	xjmp	l361
  8016                          	line	45
  8017                          ;fldiv.c: 45: }
  8018  64AC                    l361:
  8019                          ;			
  8020  64AC  70 CF             	and	f, 0xCF   ;select user reg space
  8021                          	
  8022  64AE  7F                	ret
  8023                          GLOBAL __end_of___fldiv
  8024  64AF                    	__end_of___fldiv:
  8025                          	FNSIZE	___fldiv,9,8
  8026                          ; =============== function ___fldiv ends ============
  8027                          
  8028                          	signat	___fldiv,8316
  8029                          	global	_log10
  8030                          	global	??_log10
  8031                          	global	?_log10
  8032                          	psect	text
  8033                          
  8034                          ; *************** function _log10 *****************
  8035                          ; Defined at:
  8036                          ;		line 40 in file "../common/log.c"
  8037                          ; Parameters:
  8038                          ;		x           	offs:   0	type: unsigned char 
  8039                          ; Auto variables:
  8040                          ;		None
  8041                          ; Return value:
  8042                          ;		type: unsigned char 
  8043                          ;		size: 4
  8044                          ; Registers used:
  8045                          ;		a, x, CUR_PP, mret
  8046                          ; Tracked objects:
  8047                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8048                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8049                          ;		Unchanged: 
  8050                          ; Data sizes:
  8051                          ;		Autos:    0
  8052                          ;		Params:   4
  8053                          ;		Temp:     0
  8054                          ;		Total:    4
  8055                          ; This function calls:
  8056                          ;		_log
  8057                          ;		___flmul
  8058                          ; This function is called by:
  8059                          ;		_calc_dewpoint
  8060                          ; This function uses a non-reentrant model
  8061                          ; 
  8062                          	file	"../common/log.c"
  8063                          	line	40
  8064  005F                    	__size_of_log10	equ	__end_of_log10-_log10
  8065                          ;log.c: 38: double
  8066                          ;log.c: 39: log10(double x)
  8067                          ;log.c: 40: {
  8068                          ;			
  8069  64AF                    _log10:	
  8070                          	opt	disable
  8071                          	line	41
  8072  64AF  70 CF             	and	f, 0xCF   ;select user reg space
  8073  64B1  62 D0 00          	mov	reg[CUR_PP],0
  8074  64B4  51 34             	mov	a,[0+((log10@x)^0x0)]
  8075  64B6  53 38             	mov	[0+((?_log)^0x0)],a
  8076  64B8  51 35             	mov	a,[1+((log10@x)^0x0)]
  8077  64BA  53 39             	mov	[1+((?_log)^0x0)],a
  8078  64BC  51 36             	mov	a,[2+((log10@x)^0x0)]
  8079  64BE  53 3A             	mov	[2+((?_log)^0x0)],a
  8080  64C0  51 37             	mov	a,[3+((log10@x)^0x0)]
  8081  64C2  53 3B             	mov	[3+((?_log)^0x0)],a
  8082  64C4  71 80             	or	f, 0x80	;select multiple RAM page mode
  8083                          	
  8084  64C6  7C 6BB3           	xcall	_log
  8085                          	
  8086  64C9  70 CF             	and	f, 0xCF   ;select user reg space
  8087  64CB  62 D0 00          	mov	reg[CUR_PP],0
  8088  64CE  51 38             	mov	a,[0+((0+?_log)^0x0)]
  8089  64D0  53 5D             	mov	[0+((?___flmul)^0x0)],a
  8090  64D2  51 39             	mov	a,[1+((0+?_log)^0x0)]
  8091  64D4  53 5E             	mov	[1+((?___flmul)^0x0)],a
  8092  64D6  51 3A             	mov	a,[2+((0+?_log)^0x0)]
  8093  64D8  53 5F             	mov	[2+((?___flmul)^0x0)],a
  8094  64DA  51 3B             	mov	a,[3+((0+?_log)^0x0)]
  8095  64DC  53 60             	mov	[3+((?___flmul)^0x0)],a
  8096  64DE  50 3E             	mov	a,<(0x3ede5bd9>>24)
  8097  64E0  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  8098  64E2  50 DE             	mov	a,<(0x3ede5bd9>>16)
  8099  64E4  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  8100  64E6  50 5B             	mov	a,<(0x3ede5bd9>>8)
  8101  64E8  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  8102  64EA  50 D9             	mov	a,<(0x3ede5bd9)
  8103  64EC  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  8104  64EE  71 80             	or	f, 0x80	;select multiple RAM page mode
  8105                          	
  8106  64F0  7C 7680           	xcall	___flmul
  8107                          	
  8108  64F3  70 CF             	and	f, 0xCF   ;select user reg space
  8109  64F5  62 D0 00          	mov	reg[CUR_PP],0
  8110  64F8  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  8111  64FA  53 34             	mov	[0+((?_log10)^0x0)],a
  8112  64FC  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  8113  64FE  53 35             	mov	[1+((?_log10)^0x0)],a
  8114  6500  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  8115  6502  53 36             	mov	[2+((?_log10)^0x0)],a
  8116  6504  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  8117  6506  53 37             	mov	[3+((?_log10)^0x0)],a
  8118  6508  7D 650B           	xjmp	l196
  8119                          	line	42
  8120                          ;log.c: 42: }
  8121  650B                    l196:
  8122                          ;			
  8123  650B  70 CF             	and	f, 0xCF   ;select user reg space
  8124                          	
  8125  650D  7F                	ret
  8126                          GLOBAL __end_of_log10
  8127  650E                    	__end_of_log10:
  8128                          	FNSIZE	_log10,0,4
  8129                          ; =============== function _log10 ends ============
  8130                          
  8131                          	signat	_log10,4220
  8132                          	global	___wmul
  8133                          	global	??___wmul
  8134                          	global	?___wmul
  8135                          	psect	text
  8136                          
  8137                          ; *************** function ___wmul *****************
  8138                          ; Defined at:
  8139                          ;		line 3 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\wmul.c"
  8140                          ; Parameters:
  8141                          ;		multiplier  	offs:   0	type: unsigned int 
  8142                          ;		multiplicand	offs:   2	type: unsigned int 
  8143                          ; Auto variables:
  8144                          ;		product     	       	type: unsigned int 
  8145                          ; Return value:
  8146                          ;		type: unsigned int 
  8147                          ;		size: 2
  8148                          ; Registers used:
  8149                          ;		a, CUR_PP
  8150                          ; Tracked objects:
  8151                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8152                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8153                          ;		Unchanged: 
  8154                          ; Data sizes:
  8155                          ;		Autos:    2
  8156                          ;		Params:   4
  8157                          ;		Temp:     2
  8158                          ;		Total:    8
  8159                          ; This function calls:
  8160                          ;		Nothing
  8161                          ; This function is called by:
  8162                          ;		_printf
  8163                          ; This function uses a non-reentrant model
  8164                          ; 
  8165                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\wmul.c"
  8166                          	line	3
  8167  007F                    	__size_of___wmul	equ	__end_of___wmul-___wmul
  8168                          ;wmul.c: 1: unsigned int
  8169                          ;wmul.c: 2: __wmul(unsigned int multiplier, unsigned int multiplicand)
  8170                          ;wmul.c: 3: {
  8171                          ;			
  8172  650E                    ___wmul:	
  8173                          	opt	disable
  8174                          	line	4
  8175                          ;wmul.c: 4: unsigned int product = 0;
  8176  650E  50 00             	mov	a,<(0)
  8177  6510  70 CF             	and	f, 0xCF   ;select user reg space
  8178  6512  62 D0 00          	mov	reg[CUR_PP],0
  8179  6515  53 45             	mov	[1+((___wmul@product)^0x0)],a
  8180  6517  50 00             	mov	a,>(0)
  8181  6519  53 44             	mov	[0+((___wmul@product)^0x0)],a
  8182                          	line	6
  8183                          ;wmul.c: 6: do {
  8184                          ;			
  8185  651B                    l217:	
  8186                          	line	7
  8187                          ;wmul.c: 7: if(multiplier & 1)
  8188  651B  70 CF             	and	f, 0xCF   ;select user reg space
  8189  651D  62 D0 00          	mov	reg[CUR_PP],0
  8190  6520  51 41             	mov	a,[1+((___wmul@multiplier)^0x0)]
  8191  6522  21 01             	and	a,<(01h)
  8192  6524  53 47             	mov	[(??___wmul^0x0)+2+0+1],a
  8193  6526  51 40             	mov	a,[0+((___wmul@multiplier)^0x0)]
  8194  6528  21 00             	and	a,>(01h)
  8195  652A  53 46             	mov	[(??___wmul^0x0)+2+0],a
  8196  652C  51 46             	mov	a,[(??___wmul^0x0)+2+0]
  8197  652E  39 00             	cmp	a,>(0)
  8198  6530  B005              	jnz	u1583
  8199  6532  51 47             	mov	a,[(??___wmul^0x0)+2+1]
  8200  6534  39 00             	cmp	a,<(0)
  8201  6536                    u1583:
  8202  6536  A012              	jz	l218
  8203                          	line	8
  8204                          ;wmul.c: 8: product += multiplicand;
  8205  6538  70 CF             	and	f, 0xCF   ;select user reg space
  8206  653A  62 D0 00          	mov	reg[CUR_PP],0
  8207  653D  51 45             	mov	a,[1+((___wmul@product)^0x0)]
  8208  653F  02 43             	add	a,[1+((___wmul@multiplicand)^0x0)]
  8209  6541  53 45             	mov	[1+((___wmul@product)^0x0)],a
  8210  6543  51 44             	mov	a,[0+((___wmul@product)^0x0)]
  8211  6545  0A 42             	adc	a,[0+((___wmul@multiplicand)^0x0)]
  8212  6547  53 44             	mov	[0+((___wmul@product)^0x0)],a
  8213                          ;			
  8214  6549                    l218:	
  8215                          	line	9
  8216                          ;wmul.c: 9: multiplicand <<= 1;
  8217  6549  50 01             	mov	a,<((01h))
  8218  654B  7D 6557           	xjmp	u1593
  8219  654E                    u1604:
  8220  654E  70 CF             	and	f, 0xCF   ;select user reg space
  8221  6550  62 D0 00          	mov	reg[CUR_PP],0
  8222  6553  65 43             	asl	[1+((___wmul@multiplicand)^0x0)]
  8223  6555  6B 42             	rlc	[0+((___wmul@multiplicand)^0x0)]
  8224  6557                    u1593:
  8225  6557  78                	dec	a
  8226  6558  DFF5              	jnc	u1604
  8227                          	line	10
  8228                          ;wmul.c: 10: multiplier >>= 1;
  8229  655A  50 01             	mov	a,<((01h))
  8230  655C  7D 656A           	xjmp	u1613
  8231  655F  70 FB             	clrc
  8232  6561                    u1624:
  8233  6561  70 CF             	and	f, 0xCF   ;select user reg space
  8234  6563  62 D0 00          	mov	reg[CUR_PP],0
  8235  6566  6E 40             	rrc	[0+((___wmul@multiplier)^0x0)]
  8236  6568  6E 41             	rrc	[1+((___wmul@multiplier)^0x0)]
  8237  656A                    u1613:
  8238  656A  78                	dec	a
  8239  656B  DFF5              	jnc	u1624
  8240                          	line	11
  8241                          ;wmul.c: 11: } while(multiplier != 0);
  8242  656D  70 CF             	and	f, 0xCF   ;select user reg space
  8243  656F  62 D0 00          	mov	reg[CUR_PP],0
  8244  6572  51 40             	mov	a,[0+((___wmul@multiplier)^0x0)]
  8245  6574  39 00             	cmp	a,>(0)
  8246  6576  B005              	jnz	u1633
  8247  6578  51 41             	mov	a,[1+((___wmul@multiplier)^0x0)]
  8248  657A  39 00             	cmp	a,<(0)
  8249  657C                    u1633:
  8250  657C  BF9E              	jnz	l217
  8251                          ;			
  8252  657E                    l216:	
  8253                          	line	12
  8254                          ;wmul.c: 12: return product;
  8255  657E  70 CF             	and	f, 0xCF   ;select user reg space
  8256  6580  62 D0 00          	mov	reg[CUR_PP],0
  8257  6583  51 45             	mov	a,[1+((___wmul@product)^0x0)]
  8258  6585  58 44             	mov	x,[0+((___wmul@product)^0x0)]
  8259  6587  7D 658A           	xjmp	l214
  8260                          	line	13
  8261                          ;wmul.c: 13: }
  8262  658A                    l214:
  8263                          ;			
  8264  658A  70 CF             	and	f, 0xCF   ;select user reg space
  8265                          	
  8266  658C  7F                	ret
  8267                          GLOBAL __end_of___wmul
  8268  658D                    	__end_of___wmul:
  8269                          	FNSIZE	___wmul,4,4
  8270                          ; =============== function ___wmul ends ============
  8271                          
  8272                          	signat	___wmul,8314
  8273                          	global	___lldiv
  8274                          	global	??___lldiv
  8275                          	global	?___lldiv
  8276                          	psect	text
  8277                          
  8278                          ; *************** function ___lldiv *****************
  8279                          ; Defined at:
  8280                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lldiv.c"
  8281                          ; Parameters:
  8282                          ;		dividend    	offs:   0	type: unsigned long 
  8283                          ;		divisor     	offs:   4	type: unsigned long 
  8284                          ; Auto variables:
  8285                          ;		quotient    	       	type: unsigned long 
  8286                          ;		counter     	       	type: unsigned char 
  8287                          ; Return value:
  8288                          ;		type: unsigned long 
  8289                          ;		size: 4
  8290                          ; Registers used:
  8291                          ;		a, CUR_PP
  8292                          ; Tracked objects:
  8293                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8294                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8295                          ;		Unchanged: 
  8296                          ; Data sizes:
  8297                          ;		Autos:    5
  8298                          ;		Params:   8
  8299                          ;		Temp:     4
  8300                          ;		Total:   17
  8301                          ; This function calls:
  8302                          ;		Nothing
  8303                          ; This function is called by:
  8304                          ;		_printf
  8305                          ; This function uses a non-reentrant model
  8306                          ; 
  8307                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lldiv.c"
  8308                          	line	5
  8309  012A                    	__size_of___lldiv	equ	__end_of___lldiv-___lldiv
  8310                          ;lldiv.c: 3: unsigned long int
  8311                          ;lldiv.c: 4: __lldiv(unsigned long int dividend, unsigned long int divisor)
  8312                          ;lldiv.c: 5: {
  8313                          ;			
  8314  658D                    ___lldiv:	
  8315                          	opt	disable
  8316                          	line	9
  8317                          ;lldiv.c: 6: unsigned long int quotient;
  8318                          ;lldiv.c: 7: unsigned char counter;
  8319                          ;lldiv.c: 9: quotient = 0;
  8320  658D  50 00             	mov	a,<(0>>24)
  8321  658F  70 CF             	and	f, 0xCF   ;select user reg space
  8322  6591  62 D0 00          	mov	reg[CUR_PP],0
  8323  6594  53 48             	mov	[0+((___lldiv@quotient)^0x0)],a
  8324  6596  50 00             	mov	a,<(0>>16)
  8325  6598  53 49             	mov	[1+((___lldiv@quotient)^0x0)],a
  8326  659A  50 00             	mov	a,<(0>>8)
  8327  659C  53 4A             	mov	[2+((___lldiv@quotient)^0x0)],a
  8328  659E  50 00             	mov	a,<(0)
  8329  65A0  53 4B             	mov	[3+((___lldiv@quotient)^0x0)],a
  8330                          	line	10
  8331                          ;lldiv.c: 10: if(divisor != 0) {
  8332  65A2  51 44             	mov	a,[0+((___lldiv@divisor)^0x0)]
  8333  65A4  39 00             	cmp	a,<(0>>24)
  8334  65A6  B011              	jnz	u2253
  8335  65A8  51 45             	mov	a,[1+((___lldiv@divisor)^0x0)]
  8336  65AA  39 00             	cmp	a,<(0>>16)
  8337  65AC  B00B              	jnz	u2253
  8338  65AE  51 46             	mov	a,[2+((___lldiv@divisor)^0x0)]
  8339  65B0  39 00             	cmp	a,<(0>>8)
  8340  65B2  B005              	jnz	u2253
  8341  65B4  51 47             	mov	a,[3+((___lldiv@divisor)^0x0)]
  8342  65B6  39 00             	cmp	a,<(0)
  8343  65B8                    u2253:
  8344  65B8  A0E3              	jz	l457
  8345                          	line	11
  8346                          ;lldiv.c: 11: counter = 1;
  8347  65BA  50 01             	mov	a,<((01h))
  8348  65BC  70 CF             	and	f, 0xCF   ;select user reg space
  8349  65BE  62 D0 00          	mov	reg[CUR_PP],0
  8350  65C1  53 4C             	mov	[0+((___lldiv@counter)^0x0)],a
  8351                          	line	12
  8352                          ;lldiv.c: 12: while((divisor & 0x80000000UL) == 0) {
  8353  65C3  7D 65E6           	xjmp	l458
  8354                          ;			
  8355  65C6                    l459:	
  8356                          	line	13
  8357                          ;lldiv.c: 13: divisor <<= 1;
  8358  65C6  50 01             	mov	a,<((01h))
  8359  65C8  7D 65D8           	xjmp	u2263
  8360  65CB                    u2274:
  8361  65CB  70 CF             	and	f, 0xCF   ;select user reg space
  8362  65CD  62 D0 00          	mov	reg[CUR_PP],0
  8363  65D0  65 47             	asl	[3+((___lldiv@divisor)^0x0)]
  8364  65D2  6B 46             	rlc	[2+((___lldiv@divisor)^0x0)]
  8365  65D4  6B 45             	rlc	[1+((___lldiv@divisor)^0x0)]
  8366  65D6  6B 44             	rlc	[0+((___lldiv@divisor)^0x0)]
  8367  65D8                    u2263:
  8368  65D8  78                	dec	a
  8369  65D9  DFF1              	jnc	u2274
  8370                          	line	14
  8371                          ;lldiv.c: 14: counter++;
  8372  65DB  70 CF             	and	f, 0xCF   ;select user reg space
  8373  65DD  62 D0 00          	mov	reg[CUR_PP],0
  8374  65E0  51 4C             	mov	a,[0+((___lldiv@counter)^0x0)]
  8375  65E2  01 01             	add	a,<((01h))
  8376  65E4  53 4C             	mov	[0+((___lldiv@counter)^0x0)],a
  8377                          	line	15
  8378                          ;			
  8379  65E6                    l458:	
  8380                          	line	12
  8381  65E6  70 CF             	and	f, 0xCF   ;select user reg space
  8382  65E8  62 D0 00          	mov	reg[CUR_PP],0
  8383  65EB  51 44             	mov	a,[0+((___lldiv@divisor)^0x0)]
  8384  65ED  53 4D             	mov	[(??___lldiv^0x0)+5+0],a
  8385  65EF  51 45             	mov	a,[1+((___lldiv@divisor)^0x0)]
  8386  65F1  53 4E             	mov	[(??___lldiv^0x0)+5+0+1],a
  8387  65F3  51 46             	mov	a,[2+((___lldiv@divisor)^0x0)]
  8388  65F5  53 4F             	mov	[(??___lldiv^0x0)+5+0+2],a
  8389  65F7  51 47             	mov	a,[3+((___lldiv@divisor)^0x0)]
  8390  65F9  53 50             	mov	[(??___lldiv^0x0)+5+0+3],a
  8391  65FB  50 00             	mov	a,<(-2147483648)
  8392  65FD  24 50             	and	[(??___lldiv^0x0)+5+3],a
  8393  65FF  50 00             	mov	a,<(-2147483648>>8)
  8394  6601  24 4F             	and	[(??___lldiv^0x0)+5+2],a
  8395  6603  50 00             	mov	a,<(-2147483648>>16)
  8396  6605  24 4E             	and	[(??___lldiv^0x0)+5+1],a
  8397  6607  50 80             	mov	a,<(-2147483648>>24)
  8398  6609  24 4D             	and	[(??___lldiv^0x0)+5+0],a
  8399  660B  51 4D             	mov	a,[(??___lldiv^0x0)+5+0]
  8400  660D  39 00             	cmp	a,<(0>>24)
  8401  660F  B011              	jnz	u2283
  8402  6611  51 4E             	mov	a,[(??___lldiv^0x0)+5+1]
  8403  6613  39 00             	cmp	a,<(0>>16)
  8404  6615  B00B              	jnz	u2283
  8405  6617  51 4F             	mov	a,[(??___lldiv^0x0)+5+2]
  8406  6619  39 00             	cmp	a,<(0>>8)
  8407  661B  B005              	jnz	u2283
  8408  661D  51 50             	mov	a,[(??___lldiv^0x0)+5+3]
  8409  661F  39 00             	cmp	a,<(0)
  8410  6621                    u2283:
  8411  6621  AFA4              	jz	l459
  8412                          ;			
  8413  6623                    l460:	
  8414                          	line	16
  8415                          ;lldiv.c: 15: }
  8416                          ;lldiv.c: 16: do {
  8417                          ;			
  8418  6623                    l463:	
  8419                          	line	17
  8420                          ;lldiv.c: 17: quotient <<= 1;
  8421  6623  50 01             	mov	a,<((01h))
  8422  6625  7D 6635           	xjmp	u2293
  8423  6628                    u2304:
  8424  6628  70 CF             	and	f, 0xCF   ;select user reg space
  8425  662A  62 D0 00          	mov	reg[CUR_PP],0
  8426  662D  65 4B             	asl	[3+((___lldiv@quotient)^0x0)]
  8427  662F  6B 4A             	rlc	[2+((___lldiv@quotient)^0x0)]
  8428  6631  6B 49             	rlc	[1+((___lldiv@quotient)^0x0)]
  8429  6633  6B 48             	rlc	[0+((___lldiv@quotient)^0x0)]
  8430  6635                    u2293:
  8431  6635  78                	dec	a
  8432  6636  DFF1              	jnc	u2304
  8433                          	line	18
  8434                          ;lldiv.c: 18: if(divisor <= dividend) {
  8435  6638  70 CF             	and	f, 0xCF   ;select user reg space
  8436  663A  62 D0 00          	mov	reg[CUR_PP],0
  8437  663D  51 43             	mov	a,[3+((___lldiv@dividend)^0x0)]
  8438  663F  3A 47             	cmp	a,[3+((___lldiv@divisor)^0x0)]
  8439  6641  51 42             	mov	a,[2+((___lldiv@dividend)^0x0)]
  8440  6643  1A 46             	sbb	a,[2+((___lldiv@divisor)^0x0)]
  8441  6645  51 41             	mov	a,[1+((___lldiv@dividend)^0x0)]
  8442  6647  1A 45             	sbb	a,[1+((___lldiv@divisor)^0x0)]
  8443  6649  51 40             	mov	a,[0+((___lldiv@dividend)^0x0)]
  8444  664B  1A 44             	sbb	a,[0+((___lldiv@divisor)^0x0)]
  8445  664D  C026              	jc	l464
  8446                          	line	19
  8447                          ;lldiv.c: 19: dividend -= divisor;
  8448  664F  70 CF             	and	f, 0xCF   ;select user reg space
  8449  6651  62 D0 00          	mov	reg[CUR_PP],0
  8450  6654  51 47             	mov	a,[3+((___lldiv@divisor)^0x0)]
  8451  6656  14 43             	sub	[3+((___lldiv@dividend)^0x0)],a
  8452  6658  51 46             	mov	a,[2+((___lldiv@divisor)^0x0)]
  8453  665A  1C 42             	sbb	[2+((___lldiv@dividend)^0x0)],a
  8454  665C  51 45             	mov	a,[1+((___lldiv@divisor)^0x0)]
  8455  665E  1C 41             	sbb	[1+((___lldiv@dividend)^0x0)],a
  8456  6660  51 44             	mov	a,[0+((___lldiv@divisor)^0x0)]
  8457  6662  1C 40             	sbb	[0+((___lldiv@dividend)^0x0)],a
  8458                          	line	20
  8459                          ;lldiv.c: 20: quotient |= 1;
  8460  6664  50 01             	mov	a,<(01h)
  8461  6666  2C 4B             	or	[3+((___lldiv@quotient)^0x0)],a
  8462  6668  50 00             	mov	a,<(01h>>8)
  8463  666A  2C 4A             	or	[2+((___lldiv@quotient)^0x0)],a
  8464  666C  50 00             	mov	a,<(01h>>16)
  8465  666E  2C 49             	or	[1+((___lldiv@quotient)^0x0)],a
  8466  6670  50 00             	mov	a,<(01h>>24)
  8467  6672  2C 48             	or	[0+((___lldiv@quotient)^0x0)],a
  8468                          	line	21
  8469                          ;			
  8470  6674                    l464:	
  8471                          	line	22
  8472                          ;lldiv.c: 21: }
  8473                          ;lldiv.c: 22: divisor >>= 1;
  8474  6674  50 01             	mov	a,<((01h))
  8475  6676  7D 6688           	xjmp	u2313
  8476  6679  70 FB             	clrc
  8477  667B                    u2324:
  8478  667B  70 CF             	and	f, 0xCF   ;select user reg space
  8479  667D  62 D0 00          	mov	reg[CUR_PP],0
  8480  6680  6E 44             	rrc	[0+((___lldiv@divisor)^0x0)]
  8481  6682  6E 45             	rrc	[1+((___lldiv@divisor)^0x0)]
  8482  6684  6E 46             	rrc	[2+((___lldiv@divisor)^0x0)]
  8483  6686  6E 47             	rrc	[3+((___lldiv@divisor)^0x0)]
  8484  6688                    u2313:
  8485  6688  78                	dec	a
  8486  6689  DFF1              	jnc	u2324
  8487                          	line	23
  8488                          ;lldiv.c: 23: } while(--counter != 0);
  8489  668B  70 CF             	and	f, 0xCF   ;select user reg space
  8490  668D  62 D0 00          	mov	reg[CUR_PP],0
  8491  6690  51 4C             	mov	a,[0+((___lldiv@counter)^0x0)]
  8492  6692  11 01             	sub	a,<((01h))
  8493  6694  53 4C             	mov	[0+((___lldiv@counter)^0x0)],a
  8494  6696  51 4C             	mov	a,[0+((___lldiv@counter)^0x0)]
  8495  6698  39 00             	cmp	a,(0)
  8496  669A  BF88              	jnz	l463
  8497                          ;			
  8498  669C                    l462:	
  8499                          	line	24
  8500                          ;			
  8501  669C                    l457:	
  8502                          	line	25
  8503  669C  70 CF             	and	f, 0xCF   ;select user reg space
  8504  669E  62 D0 00          	mov	reg[CUR_PP],0
  8505  66A1  51 48             	mov	a,[0+((___lldiv@quotient)^0x0)]
  8506  66A3  53 40             	mov	[0+((?___lldiv)^0x0)],a
  8507  66A5  51 49             	mov	a,[1+((___lldiv@quotient)^0x0)]
  8508  66A7  53 41             	mov	[1+((?___lldiv)^0x0)],a
  8509  66A9  51 4A             	mov	a,[2+((___lldiv@quotient)^0x0)]
  8510  66AB  53 42             	mov	[2+((?___lldiv)^0x0)],a
  8511  66AD  51 4B             	mov	a,[3+((___lldiv@quotient)^0x0)]
  8512  66AF  53 43             	mov	[3+((?___lldiv)^0x0)],a
  8513  66B1  7D 66B4           	xjmp	l456
  8514                          	line	26
  8515                          ;lldiv.c: 26: }
  8516  66B4                    l456:
  8517                          ;			
  8518  66B4  70 CF             	and	f, 0xCF   ;select user reg space
  8519                          	
  8520  66B6  7F                	ret
  8521                          GLOBAL __end_of___lldiv
  8522  66B7                    	__end_of___lldiv:
  8523                          	FNSIZE	___lldiv,9,8
  8524                          ; =============== function ___lldiv ends ============
  8525                          
  8526                          	signat	___lldiv,8316
  8527                          	global	___llmod
  8528                          	global	??___llmod
  8529                          	global	?___llmod
  8530                          	psect	text
  8531                          
  8532                          ; *************** function ___llmod *****************
  8533                          ; Defined at:
  8534                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\llmod.c"
  8535                          ; Parameters:
  8536                          ;		dividend    	offs:   0	type: unsigned long 
  8537                          ;		divisor     	offs:   4	type: unsigned long 
  8538                          ; Auto variables:
  8539                          ;		counter     	       	type: unsigned char 
  8540                          ; Return value:
  8541                          ;		type: unsigned long 
  8542                          ;		size: 4
  8543                          ; Registers used:
  8544                          ;		a, CUR_PP
  8545                          ; Tracked objects:
  8546                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8547                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8548                          ;		Unchanged: 
  8549                          ; Data sizes:
  8550                          ;		Autos:    1
  8551                          ;		Params:   8
  8552                          ;		Temp:     4
  8553                          ;		Total:   13
  8554                          ; This function calls:
  8555                          ;		Nothing
  8556                          ; This function is called by:
  8557                          ;		_printf
  8558                          ; This function uses a non-reentrant model
  8559                          ; 
  8560                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\llmod.c"
  8561                          	line	5
  8562  00E0                    	__size_of___llmod	equ	__end_of___llmod-___llmod
  8563                          ;llmod.c: 3: unsigned long int
  8564                          ;llmod.c: 4: __llmod(unsigned long int dividend, unsigned long int divisor)
  8565                          ;llmod.c: 5: {
  8566                          ;			
  8567  66B7                    ___llmod:	
  8568                          	opt	disable
  8569                          	line	8
  8570                          ;llmod.c: 6: unsigned char counter;
  8571                          ;llmod.c: 8: if(divisor != 0) {
  8572  66B7  70 CF             	and	f, 0xCF   ;select user reg space
  8573  66B9  62 D0 00          	mov	reg[CUR_PP],0
  8574  66BC  51 44             	mov	a,[0+((___llmod@divisor)^0x0)]
  8575  66BE  39 00             	cmp	a,<(0>>24)
  8576  66C0  B011              	jnz	u2133
  8577  66C2  51 45             	mov	a,[1+((___llmod@divisor)^0x0)]
  8578  66C4  39 00             	cmp	a,<(0>>16)
  8579  66C6  B00B              	jnz	u2133
  8580  66C8  51 46             	mov	a,[2+((___llmod@divisor)^0x0)]
  8581  66CA  39 00             	cmp	a,<(0>>8)
  8582  66CC  B005              	jnz	u2133
  8583  66CE  51 47             	mov	a,[3+((___llmod@divisor)^0x0)]
  8584  66D0  39 00             	cmp	a,<(0)
  8585  66D2                    u2133:
  8586  66D2  A0BE              	jz	l422
  8587                          	line	9
  8588                          ;llmod.c: 9: counter = 1;
  8589  66D4  50 01             	mov	a,<((01h))
  8590  66D6  70 CF             	and	f, 0xCF   ;select user reg space
  8591  66D8  62 D0 00          	mov	reg[CUR_PP],0
  8592  66DB  53 48             	mov	[0+((___llmod@counter)^0x0)],a
  8593                          	line	10
  8594                          ;llmod.c: 10: while((divisor & 0x80000000UL) == 0) {
  8595  66DD  7D 6700           	xjmp	l423
  8596                          ;			
  8597  66E0                    l424:	
  8598                          	line	11
  8599                          ;llmod.c: 11: divisor <<= 1;
  8600  66E0  50 01             	mov	a,<((01h))
  8601  66E2  7D 66F2           	xjmp	u2143
  8602  66E5                    u2154:
  8603  66E5  70 CF             	and	f, 0xCF   ;select user reg space
  8604  66E7  62 D0 00          	mov	reg[CUR_PP],0
  8605  66EA  65 47             	asl	[3+((___llmod@divisor)^0x0)]
  8606  66EC  6B 46             	rlc	[2+((___llmod@divisor)^0x0)]
  8607  66EE  6B 45             	rlc	[1+((___llmod@divisor)^0x0)]
  8608  66F0  6B 44             	rlc	[0+((___llmod@divisor)^0x0)]
  8609  66F2                    u2143:
  8610  66F2  78                	dec	a
  8611  66F3  DFF1              	jnc	u2154
  8612                          	line	12
  8613                          ;llmod.c: 12: counter++;
  8614  66F5  70 CF             	and	f, 0xCF   ;select user reg space
  8615  66F7  62 D0 00          	mov	reg[CUR_PP],0
  8616  66FA  51 48             	mov	a,[0+((___llmod@counter)^0x0)]
  8617  66FC  01 01             	add	a,<((01h))
  8618  66FE  53 48             	mov	[0+((___llmod@counter)^0x0)],a
  8619                          	line	13
  8620                          ;			
  8621  6700                    l423:	
  8622                          	line	10
  8623  6700  70 CF             	and	f, 0xCF   ;select user reg space
  8624  6702  62 D0 00          	mov	reg[CUR_PP],0
  8625  6705  51 44             	mov	a,[0+((___llmod@divisor)^0x0)]
  8626  6707  53 49             	mov	[(??___llmod^0x0)+1+0],a
  8627  6709  51 45             	mov	a,[1+((___llmod@divisor)^0x0)]
  8628  670B  53 4A             	mov	[(??___llmod^0x0)+1+0+1],a
  8629  670D  51 46             	mov	a,[2+((___llmod@divisor)^0x0)]
  8630  670F  53 4B             	mov	[(??___llmod^0x0)+1+0+2],a
  8631  6711  51 47             	mov	a,[3+((___llmod@divisor)^0x0)]
  8632  6713  53 4C             	mov	[(??___llmod^0x0)+1+0+3],a
  8633  6715  50 00             	mov	a,<(-2147483648)
  8634  6717  24 4C             	and	[(??___llmod^0x0)+1+3],a
  8635  6719  50 00             	mov	a,<(-2147483648>>8)
  8636  671B  24 4B             	and	[(??___llmod^0x0)+1+2],a
  8637  671D  50 00             	mov	a,<(-2147483648>>16)
  8638  671F  24 4A             	and	[(??___llmod^0x0)+1+1],a
  8639  6721  50 80             	mov	a,<(-2147483648>>24)
  8640  6723  24 49             	and	[(??___llmod^0x0)+1+0],a
  8641  6725  51 49             	mov	a,[(??___llmod^0x0)+1+0]
  8642  6727  39 00             	cmp	a,<(0>>24)
  8643  6729  B011              	jnz	u2163
  8644  672B  51 4A             	mov	a,[(??___llmod^0x0)+1+1]
  8645  672D  39 00             	cmp	a,<(0>>16)
  8646  672F  B00B              	jnz	u2163
  8647  6731  51 4B             	mov	a,[(??___llmod^0x0)+1+2]
  8648  6733  39 00             	cmp	a,<(0>>8)
  8649  6735  B005              	jnz	u2163
  8650  6737  51 4C             	mov	a,[(??___llmod^0x0)+1+3]
  8651  6739  39 00             	cmp	a,<(0)
  8652  673B                    u2163:
  8653  673B  AFA4              	jz	l424
  8654                          ;			
  8655  673D                    l425:	
  8656                          	line	14
  8657                          ;llmod.c: 13: }
  8658                          ;llmod.c: 14: do {
  8659                          ;			
  8660  673D                    l428:	
  8661                          	line	15
  8662                          ;llmod.c: 15: if((unsigned long)divisor <= (unsigned long)dividend)
  8663  673D  70 CF             	and	f, 0xCF   ;select user reg space
  8664  673F  62 D0 00          	mov	reg[CUR_PP],0
  8665  6742  51 43             	mov	a,[3+((___llmod@dividend)^0x0)]
  8666  6744  3A 47             	cmp	a,[3+((___llmod@divisor)^0x0)]
  8667  6746  51 42             	mov	a,[2+((___llmod@dividend)^0x0)]
  8668  6748  1A 46             	sbb	a,[2+((___llmod@divisor)^0x0)]
  8669  674A  51 41             	mov	a,[1+((___llmod@dividend)^0x0)]
  8670  674C  1A 45             	sbb	a,[1+((___llmod@divisor)^0x0)]
  8671  674E  51 40             	mov	a,[0+((___llmod@dividend)^0x0)]
  8672  6750  1A 44             	sbb	a,[0+((___llmod@divisor)^0x0)]
  8673  6752  C016              	jc	l429
  8674                          	line	16
  8675                          ;llmod.c: 16: dividend -= divisor;
  8676  6754  70 CF             	and	f, 0xCF   ;select user reg space
  8677  6756  62 D0 00          	mov	reg[CUR_PP],0
  8678  6759  51 47             	mov	a,[3+((___llmod@divisor)^0x0)]
  8679  675B  14 43             	sub	[3+((___llmod@dividend)^0x0)],a
  8680  675D  51 46             	mov	a,[2+((___llmod@divisor)^0x0)]
  8681  675F  1C 42             	sbb	[2+((___llmod@dividend)^0x0)],a
  8682  6761  51 45             	mov	a,[1+((___llmod@divisor)^0x0)]
  8683  6763  1C 41             	sbb	[1+((___llmod@dividend)^0x0)],a
  8684  6765  51 44             	mov	a,[0+((___llmod@divisor)^0x0)]
  8685  6767  1C 40             	sbb	[0+((___llmod@dividend)^0x0)],a
  8686                          ;			
  8687  6769                    l429:	
  8688                          	line	17
  8689                          ;llmod.c: 17: *(unsigned long int *)&divisor >>= 1;
  8690  6769  50 01             	mov	a,<((01h))
  8691  676B  7D 677D           	xjmp	u2173
  8692  676E  70 FB             	clrc
  8693  6770                    u2184:
  8694  6770  70 CF             	and	f, 0xCF   ;select user reg space
  8695  6772  62 D0 00          	mov	reg[CUR_PP],0
  8696  6775  6E 44             	rrc	[0+((___llmod@divisor)^0x0)]
  8697  6777  6E 45             	rrc	[1+((___llmod@divisor)^0x0)]
  8698  6779  6E 46             	rrc	[2+((___llmod@divisor)^0x0)]
  8699  677B  6E 47             	rrc	[3+((___llmod@divisor)^0x0)]
  8700  677D                    u2173:
  8701  677D  78                	dec	a
  8702  677E  DFF1              	jnc	u2184
  8703                          	line	18
  8704                          ;llmod.c: 18: } while(--counter != 0);
  8705  6780  70 CF             	and	f, 0xCF   ;select user reg space
  8706  6782  62 D0 00          	mov	reg[CUR_PP],0
  8707  6785  51 48             	mov	a,[0+((___llmod@counter)^0x0)]
  8708  6787  11 01             	sub	a,<((01h))
  8709  6789  53 48             	mov	[0+((___llmod@counter)^0x0)],a
  8710  678B  51 48             	mov	a,[0+((___llmod@counter)^0x0)]
  8711  678D  39 00             	cmp	a,(0)
  8712  678F  BFAD              	jnz	l428
  8713                          ;			
  8714  6791                    l427:	
  8715                          	line	19
  8716                          ;			
  8717  6791                    l422:	
  8718                          	line	20
  8719  6791  7D 6794           	xjmp	l421
  8720                          	line	21
  8721                          ;llmod.c: 21: }
  8722  6794                    l421:
  8723                          ;			
  8724  6794  70 CF             	and	f, 0xCF   ;select user reg space
  8725                          	
  8726  6796  7F                	ret
  8727                          GLOBAL __end_of___llmod
  8728  6797                    	__end_of___llmod:
  8729                          	FNSIZE	___llmod,5,8
  8730                          ; =============== function ___llmod ends ============
  8731                          
  8732                          	signat	___llmod,8316
  8733                          	global	_LTRX_CPutString
  8734                          	global	___flsub
  8735                          	global	??___flsub
  8736                          	global	?___flsub
  8737                          	psect	text
  8738                          
  8739                          ; *************** function ___flsub *****************
  8740                          ; Defined at:
  8741                          ;		line 17 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flsub.c"
  8742                          ; Parameters:
  8743                          ;		f1          	offs:   0	type: unsigned long 
  8744                          ;		f2          	offs:   4	type: unsigned long 
  8745                          ; Auto variables:
  8746                          ;		None
  8747                          ; Return value:
  8748                          ;		type: unsigned long 
  8749                          ;		size: 4
  8750                          ; Registers used:
  8751                          ;		a, x, CUR_PP, mret
  8752                          ; Tracked objects:
  8753                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8754                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8755                          ;		Unchanged: 
  8756                          ; Data sizes:
  8757                          ;		Autos:    0
  8758                          ;		Params:   8
  8759                          ;		Temp:     0
  8760                          ;		Total:    8
  8761                          ; This function calls:
  8762                          ;		___fladd
  8763                          ; This function is called by:
  8764                          ;		_calc_dewpoint
  8765                          ;		_printf
  8766                          ; This function uses a non-reentrant model
  8767                          ; 
  8768                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flsub.c"
  8769                          	line	17
  8770  005A                    	__size_of___flsub	equ	__end_of___flsub-___flsub
  8771                          ;flsub.c: 15: double
  8772                          ;flsub.c: 16: __flsub(double f1, double f2)
  8773                          ;flsub.c: 17: {
  8774                          ;			
  8775  6797                    ___flsub:	
  8776                          	opt	disable
  8777                          	line	18
  8778                          ;flsub.c: 18: (*(unsigned long *)&f2) ^= 0x80000000;
  8779  6797  50 00             	mov	a,<(-2147483648)
  8780  6799  70 CF             	and	f, 0xCF   ;select user reg space
  8781  679B  62 D0 00          	mov	reg[CUR_PP],0
  8782  679E  34 47             	xor	[3+((___flsub@f2)^0x0)],a
  8783  67A0  50 00             	mov	a,<(-2147483648>>8)
  8784  67A2  34 46             	xor	[2+((___flsub@f2)^0x0)],a
  8785  67A4  50 00             	mov	a,<(-2147483648>>16)
  8786  67A6  34 45             	xor	[1+((___flsub@f2)^0x0)],a
  8787  67A8  50 80             	mov	a,<(-2147483648>>24)
  8788  67AA  34 44             	xor	[0+((___flsub@f2)^0x0)],a
  8789                          	line	19
  8790  67AC  70 CF             	and	f, 0xCF   ;select user reg space
  8791  67AE  62 D0 00          	mov	reg[CUR_PP],0
  8792  67B1  51 40             	mov	a,[0+((___flsub@f1)^0x0)]
  8793  67B3  53 4C             	mov	[0+((?___fladd)^0x0)],a
  8794  67B5  51 41             	mov	a,[1+((___flsub@f1)^0x0)]
  8795  67B7  53 4D             	mov	[1+((?___fladd)^0x0)],a
  8796  67B9  51 42             	mov	a,[2+((___flsub@f1)^0x0)]
  8797  67BB  53 4E             	mov	[2+((?___fladd)^0x0)],a
  8798  67BD  51 43             	mov	a,[3+((___flsub@f1)^0x0)]
  8799  67BF  53 4F             	mov	[3+((?___fladd)^0x0)],a
  8800  67C1  51 44             	mov	a,[0+((___flsub@f2)^0x0)]
  8801  67C3  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  8802  67C5  51 45             	mov	a,[1+((___flsub@f2)^0x0)]
  8803  67C7  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  8804  67C9  51 46             	mov	a,[2+((___flsub@f2)^0x0)]
  8805  67CB  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  8806  67CD  51 47             	mov	a,[3+((___flsub@f2)^0x0)]
  8807  67CF  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  8808  67D1  71 80             	or	f, 0x80	;select multiple RAM page mode
  8809                          	
  8810  67D3  7C 73BA           	xcall	___fladd
  8811                          	
  8812  67D6  70 CF             	and	f, 0xCF   ;select user reg space
  8813  67D8  62 D0 00          	mov	reg[CUR_PP],0
  8814  67DB  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  8815  67DD  53 40             	mov	[0+((?___flsub)^0x0)],a
  8816  67DF  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  8817  67E1  53 41             	mov	[1+((?___flsub)^0x0)],a
  8818  67E3  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  8819  67E5  53 42             	mov	[2+((?___flsub)^0x0)],a
  8820  67E7  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  8821  67E9  53 43             	mov	[3+((?___flsub)^0x0)],a
  8822  67EB  7D 67EE           	xjmp	l360
  8823                          	line	20
  8824                          ;flsub.c: 20: }
  8825  67EE                    l360:
  8826                          ;			
  8827  67EE  70 CF             	and	f, 0xCF   ;select user reg space
  8828                          	
  8829  67F0  7F                	ret
  8830                          GLOBAL __end_of___flsub
  8831  67F1                    	__end_of___flsub:
  8832                          	FNSIZE	___flsub,0,8
  8833                          ; =============== function ___flsub ends ============
  8834                          
  8835                          	signat	___flsub,8316
  8836                          	global	___fltol
  8837                          	global	??___fltol
  8838                          	global	?___fltol
  8839                          	psect	text
  8840                          
  8841                          ; *************** function ___fltol *****************
  8842                          ; Defined at:
  8843                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fltol.c"
  8844                          ; Parameters:
  8845                          ;		f1          	offs:   0	type: unsigned long 
  8846                          ; Auto variables:
  8847                          ;		lval        	       	type: unsigned long 
  8848                          ;		exp1        	       	type: unsigned char 
  8849                          ;		sign1       	       	type: unsigned char 
  8850                          ; Return value:
  8851                          ;		type: long 
  8852                          ;		size: 4
  8853                          ; Registers used:
  8854                          ;		a, x, CUR_PP
  8855                          ; Tracked objects:
  8856                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8857                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  8858                          ;		Unchanged: 
  8859                          ; Data sizes:
  8860                          ;		Autos:    6
  8861                          ;		Params:   4
  8862                          ;		Temp:     0
  8863                          ;		Total:   10
  8864                          ; This function calls:
  8865                          ;		___flunpack
  8866                          ; This function is called by:
  8867                          ;		_printf
  8868                          ; This function uses a non-reentrant model
  8869                          ; 
  8870                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fltol.c"
  8871                          	line	16
  8872  0139                    	__size_of___fltol	equ	__end_of___fltol-___fltol
  8873                          ;fltol.c: 14: long
  8874                          ;fltol.c: 15: __fltol(double f1)
  8875                          ;fltol.c: 16: {
  8876                          ;			
  8877  67F1                    ___fltol:	
  8878                          	opt	disable
  8879                          	line	20
  8880                          ;fltol.c: 17: unsigned char sign1, exp1;
  8881                          ;fltol.c: 18: unsigned long lval;
  8882                          ;fltol.c: 20: sign1 = __flunpack(&(*(unsigned long *)&f1), &exp1);
  8883  67F1  50 40             	mov	a,<((___fltol@f1|8000h))
  8884  67F3  70 CF             	and	f, 0xCF   ;select user reg space
  8885  67F5  62 D0 00          	mov	reg[CUR_PP],0
  8886  67F8  53 71             	mov	[1+((?___flunpack)^0x0)],a
  8887  67FA  50 80             	mov	a,>((___fltol@f1|8000h))
  8888  67FC  53 70             	mov	[0+((?___flunpack)^0x0)],a
  8889  67FE  50 48             	mov	a,<((___fltol@exp1|8000h))
  8890  6800  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  8891  6802  50 80             	mov	a,>((___fltol@exp1|8000h))
  8892  6804  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  8893  6806  71 80             	or	f, 0x80	;select multiple RAM page mode
  8894                          	
  8895  6808  7C 7AFC           	xcall	___flunpack
  8896                          	
  8897  680B  70 CF             	and	f, 0xCF   ;select user reg space
  8898  680D  62 D0 00          	mov	reg[CUR_PP],0
  8899  6810  53 49             	mov	[0+((___fltol@sign1)^0x0)],a
  8900                          	line	21
  8901                          ;fltol.c: 21: lval = (*(unsigned long *)&f1);
  8902  6812  70 CF             	and	f, 0xCF   ;select user reg space
  8903  6814  62 D0 00          	mov	reg[CUR_PP],0
  8904  6817  51 40             	mov	a,[0+((___fltol@f1)^0x0)]
  8905  6819  53 44             	mov	[0+((___fltol@lval)^0x0)],a
  8906  681B  51 41             	mov	a,[1+((___fltol@f1)^0x0)]
  8907  681D  53 45             	mov	[1+((___fltol@lval)^0x0)],a
  8908  681F  51 42             	mov	a,[2+((___fltol@f1)^0x0)]
  8909  6821  53 46             	mov	[2+((___fltol@lval)^0x0)],a
  8910  6823  51 43             	mov	a,[3+((___fltol@f1)^0x0)]
  8911  6825  53 47             	mov	[3+((___fltol@lval)^0x0)],a
  8912                          	line	22
  8913                          ;fltol.c: 22: exp1 -= 127+23;
  8914  6827  70 CF             	and	f, 0xCF   ;select user reg space
  8915  6829  62 D0 00          	mov	reg[CUR_PP],0
  8916  682C  51 48             	mov	a,[0+((___fltol@exp1)^0x0)]
  8917  682E  11 96             	sub	a,<((096h))
  8918  6830  53 48             	mov	[0+((___fltol@exp1)^0x0)],a
  8919                          	line	23
  8920                          ;fltol.c: 23: if((signed char)exp1 < 0) {
  8921  6832  70 CF             	and	f, 0xCF   ;select user reg space
  8922  6834  62 D0 00          	mov	reg[CUR_PP],0
  8923  6837  51 48             	mov	a,[0+((___fltol@exp1)^0x0)]
  8924  6839  31 80             	xor	a,80h
  8925  683B  39 80             	cmp	a,(0)^80h
  8926  683D  D051              	jnc	l435
  8927                          	line	24
  8928                          ;fltol.c: 24: if((signed char)exp1 < -23)
  8929  683F  70 CF             	and	f, 0xCF   ;select user reg space
  8930  6841  62 D0 00          	mov	reg[CUR_PP],0
  8931  6844  51 48             	mov	a,[0+((___fltol@exp1)^0x0)]
  8932  6846  31 80             	xor	a,80h
  8933  6848  39 69             	cmp	a,(-23)^80h
  8934  684A  D019              	jnc	l439
  8935                          	line	25
  8936  684C  50 00             	mov	a,<(0>>24)
  8937  684E  70 CF             	and	f, 0xCF   ;select user reg space
  8938  6850  62 D0 00          	mov	reg[CUR_PP],0
  8939  6853  53 40             	mov	[0+((?___fltol)^0x0)],a
  8940  6855  50 00             	mov	a,<(0>>16)
  8941  6857  53 41             	mov	[1+((?___fltol)^0x0)],a
  8942  6859  50 00             	mov	a,<(0>>8)
  8943  685B  53 42             	mov	[2+((?___fltol)^0x0)],a
  8944  685D  50 00             	mov	a,<(0)
  8945  685F  53 43             	mov	[3+((?___fltol)^0x0)],a
  8946  6861  7D 6927           	xjmp	l434
  8947                          	line	26
  8948                          ;fltol.c: 26: do
  8949                          ;			
  8950  6864                    l439:	
  8951                          	line	27
  8952                          ;fltol.c: 27: lval >>= 1;
  8953  6864  50 01             	mov	a,<((01h))
  8954  6866  7D 6878           	xjmp	u2203
  8955  6869  70 FB             	clrc
  8956  686B                    u2214:
  8957  686B  70 CF             	and	f, 0xCF   ;select user reg space
  8958  686D  62 D0 00          	mov	reg[CUR_PP],0
  8959  6870  6E 44             	rrc	[0+((___fltol@lval)^0x0)]
  8960  6872  6E 45             	rrc	[1+((___fltol@lval)^0x0)]
  8961  6874  6E 46             	rrc	[2+((___fltol@lval)^0x0)]
  8962  6876  6E 47             	rrc	[3+((___fltol@lval)^0x0)]
  8963  6878                    u2203:
  8964  6878  78                	dec	a
  8965  6879  DFF1              	jnc	u2214
  8966                          	line	28
  8967                          ;fltol.c: 28: while(++exp1 != 0);
  8968  687B  70 CF             	and	f, 0xCF   ;select user reg space
  8969  687D  62 D0 00          	mov	reg[CUR_PP],0
  8970  6880  51 48             	mov	a,[0+((___fltol@exp1)^0x0)]
  8971  6882  01 01             	add	a,<((01h))
  8972  6884  53 48             	mov	[0+((___fltol@exp1)^0x0)],a
  8973  6886  51 48             	mov	a,[0+((___fltol@exp1)^0x0)]
  8974  6888  39 00             	cmp	a,(0)
  8975  688A  BFD9              	jnz	l439
  8976                          ;			
  8977  688C                    l438:	
  8978                          	line	29
  8979                          ;fltol.c: 29: } else {
  8980  688C  7D 68E0           	xjmp	l440
  8981                          ;			
  8982  688F                    l435:	
  8983                          	line	30
  8984                          ;fltol.c: 30: if(exp1 >= 32)
  8985  688F  70 CF             	and	f, 0xCF   ;select user reg space
  8986  6891  62 D0 00          	mov	reg[CUR_PP],0
  8987  6894  51 48             	mov	a,[0+((___fltol@exp1)^0x0)]
  8988  6896  39 20             	cmp	a,<((020h))
  8989  6898  C019              	jc	l441
  8990                          	line	31
  8991  689A  50 00             	mov	a,<(0>>24)
  8992  689C  70 CF             	and	f, 0xCF   ;select user reg space
  8993  689E  62 D0 00          	mov	reg[CUR_PP],0
  8994  68A1  53 40             	mov	[0+((?___fltol)^0x0)],a
  8995  68A3  50 00             	mov	a,<(0>>16)
  8996  68A5  53 41             	mov	[1+((?___fltol)^0x0)],a
  8997  68A7  50 00             	mov	a,<(0>>8)
  8998  68A9  53 42             	mov	[2+((?___fltol)^0x0)],a
  8999  68AB  50 00             	mov	a,<(0)
  9000  68AD  53 43             	mov	[3+((?___fltol)^0x0)],a
  9001  68AF  7D 6927           	xjmp	l434
  9002                          ;			
  9003  68B2                    l441:	
  9004                          	line	32
  9005                          ;fltol.c: 32: while(exp1 != 0) {
  9006  68B2  7D 68D5           	xjmp	l442
  9007                          ;			
  9008  68B5                    l443:	
  9009                          	line	33
  9010                          ;fltol.c: 33: lval <<= 1;
  9011  68B5  50 01             	mov	a,<((01h))
  9012  68B7  7D 68C7           	xjmp	u2223
  9013  68BA                    u2234:
  9014  68BA  70 CF             	and	f, 0xCF   ;select user reg space
  9015  68BC  62 D0 00          	mov	reg[CUR_PP],0
  9016  68BF  65 47             	asl	[3+((___fltol@lval)^0x0)]
  9017  68C1  6B 46             	rlc	[2+((___fltol@lval)^0x0)]
  9018  68C3  6B 45             	rlc	[1+((___fltol@lval)^0x0)]
  9019  68C5  6B 44             	rlc	[0+((___fltol@lval)^0x0)]
  9020  68C7                    u2223:
  9021  68C7  78                	dec	a
  9022  68C8  DFF1              	jnc	u2234
  9023                          	line	34
  9024                          ;fltol.c: 34: exp1--;
  9025  68CA  70 CF             	and	f, 0xCF   ;select user reg space
  9026  68CC  62 D0 00          	mov	reg[CUR_PP],0
  9027  68CF  51 48             	mov	a,[0+((___fltol@exp1)^0x0)]
  9028  68D1  11 01             	sub	a,<((01h))
  9029  68D3  53 48             	mov	[0+((___fltol@exp1)^0x0)],a
  9030                          	line	35
  9031                          ;			
  9032  68D5                    l442:	
  9033                          	line	32
  9034  68D5  70 CF             	and	f, 0xCF   ;select user reg space
  9035  68D7  62 D0 00          	mov	reg[CUR_PP],0
  9036  68DA  51 48             	mov	a,[0+((___fltol@exp1)^0x0)]
  9037  68DC  39 00             	cmp	a,(0)
  9038  68DE  BFD6              	jnz	l443
  9039                          ;			
  9040  68E0                    l444:	
  9041                          	line	36
  9042                          ;			
  9043  68E0                    l440:	
  9044                          	line	37
  9045                          ;fltol.c: 35: }
  9046                          ;fltol.c: 36: }
  9047                          ;fltol.c: 37: if(sign1)
  9048  68E0  70 CF             	and	f, 0xCF   ;select user reg space
  9049  68E2  62 D0 00          	mov	reg[CUR_PP],0
  9050  68E5  51 49             	mov	a,[0+((___fltol@sign1)^0x0)]
  9051  68E7  39 00             	cmp	a,(0)
  9052  68E9  A025              	jz	l445
  9053                          	line	38
  9054                          ;fltol.c: 38: lval = -lval;
  9055  68EB  70 CF             	and	f, 0xCF   ;select user reg space
  9056  68ED  62 D0 00          	mov	reg[CUR_PP],0
  9057  68F0  51 44             	mov	a,[0+((___fltol@lval)^0x0)]
  9058  68F2  73                	cpl	a
  9059  68F3  53 44             	mov	[0+((___fltol@lval)^0x0)],a
  9060  68F5  51 45             	mov	a,[1+((___fltol@lval)^0x0)]
  9061  68F7  73                	cpl	a
  9062  68F8  53 45             	mov	[1+((___fltol@lval)^0x0)],a
  9063  68FA  51 46             	mov	a,[2+((___fltol@lval)^0x0)]
  9064  68FC  73                	cpl	a
  9065  68FD  53 46             	mov	[2+((___fltol@lval)^0x0)],a
  9066  68FF  51 47             	mov	a,[3+((___fltol@lval)^0x0)]
  9067  6901  73                	cpl	a
  9068  6902  53 47             	mov	[3+((___fltol@lval)^0x0)],a
  9069  6904  76 47             	inc	[3+((___fltol@lval)^0x0)]
  9070  6906  0E 46  00         	adc	[2+((___fltol@lval)^0x0)],0
  9071  6909  0E 45  00         	adc	[1+((___fltol@lval)^0x0)],0
  9072  690C  0E 44  00         	adc	[0+((___fltol@lval)^0x0)],0
  9073                          ;			
  9074  690F                    l445:	
  9075                          	line	39
  9076  690F  70 CF             	and	f, 0xCF   ;select user reg space
  9077  6911  62 D0 00          	mov	reg[CUR_PP],0
  9078  6914  51 44             	mov	a,[0+((___fltol@lval)^0x0)]
  9079  6916  53 40             	mov	[0+((?___fltol)^0x0)],a
  9080  6918  51 45             	mov	a,[1+((___fltol@lval)^0x0)]
  9081  691A  53 41             	mov	[1+((?___fltol)^0x0)],a
  9082  691C  51 46             	mov	a,[2+((___fltol@lval)^0x0)]
  9083  691E  53 42             	mov	[2+((?___fltol)^0x0)],a
  9084  6920  51 47             	mov	a,[3+((___fltol@lval)^0x0)]
  9085  6922  53 43             	mov	[3+((?___fltol)^0x0)],a
  9086  6924  7D 6927           	xjmp	l434
  9087                          	line	40
  9088                          ;fltol.c: 40: }
  9089  6927                    l434:
  9090                          ;			
  9091  6927  70 CF             	and	f, 0xCF   ;select user reg space
  9092                          	
  9093  6929  7F                	ret
  9094                          GLOBAL __end_of___fltol
  9095  692A                    	__end_of___fltol:
  9096                          	FNSIZE	___fltol,6,4
  9097                          ; =============== function ___fltol ends ============
  9098                          
  9099                          	signat	___fltol,4220
  9100                          	global	__div_to_l_
  9101                          	global	??__div_to_l_
  9102                          	global	?__div_to_l_
  9103                          	psect	text
  9104                          
  9105                          ; *************** function __div_to_l_ *****************
  9106                          ; Defined at:
  9107                          ;		line 19 in file "fldivl.c"
  9108                          ; Parameters:
  9109                          ;		f1          	offs:   0	type: long 
  9110                          ;		f2          	offs:   4	type: long 
  9111                          ; Auto variables:
  9112                          ;		quot        	       	type: unsigned long 
  9113                          ;		exp1        	       	type: unsigned char 
  9114                          ;		cntr        	       	type: unsigned char 
  9115                          ; Return value:
  9116                          ;		type: unsigned long 
  9117                          ;		size: 4
  9118                          ; Registers used:
  9119                          ;		a, x, CUR_PP
  9120                          ; Tracked objects:
  9121                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9122                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9123                          ;		Unchanged: 
  9124                          ; Data sizes:
  9125                          ;		Autos:    6
  9126                          ;		Params:   8
  9127                          ;		Temp:     1
  9128                          ;		Total:   15
  9129                          ; This function calls:
  9130                          ;		___flunpack
  9131                          ; This function is called by:
  9132                          ;		_printf
  9133                          ; This function uses a non-reentrant model
  9134                          ; 
  9135                          	file	"fldivl.c"
  9136                          	line	19
  9137  01EA                    	__size_of__div_to_l_	equ	__end_of__div_to_l_-__div_to_l_
  9138                          ;fldivl.c: 17: unsigned long int
  9139                          ;fldivl.c: 18: _div_to_l_(double f1, double f2)
  9140                          ;fldivl.c: 19: {
  9141                          ;			
  9142  692A                    __div_to_l_:	
  9143                          	opt	disable
  9144                          	line	23
  9145                          ;fldivl.c: 20: unsigned char cntr, exp1;
  9146                          ;fldivl.c: 21: unsigned long quot;
  9147                          ;fldivl.c: 23: quot = 0;
  9148  692A  50 00             	mov	a,<(0>>24)
  9149  692C  70 CF             	and	f, 0xCF   ;select user reg space
  9150  692E  62 D0 00          	mov	reg[CUR_PP],0
  9151  6931  53 48             	mov	[0+((__div_to_l_@quot)^0x0)],a
  9152  6933  50 00             	mov	a,<(0>>16)
  9153  6935  53 49             	mov	[1+((__div_to_l_@quot)^0x0)],a
  9154  6937  50 00             	mov	a,<(0>>8)
  9155  6939  53 4A             	mov	[2+((__div_to_l_@quot)^0x0)],a
  9156  693B  50 00             	mov	a,<(0)
  9157  693D  53 4B             	mov	[3+((__div_to_l_@quot)^0x0)],a
  9158                          	line	24
  9159                          ;fldivl.c: 24: __flunpack(&(*(unsigned long *)&f1), &exp1);
  9160  693F  50 40             	mov	a,<((__div_to_l_@f1|8000h))
  9161  6941  70 CF             	and	f, 0xCF   ;select user reg space
  9162  6943  62 D0 00          	mov	reg[CUR_PP],0
  9163  6946  53 71             	mov	[1+((?___flunpack)^0x0)],a
  9164  6948  50 80             	mov	a,>((__div_to_l_@f1|8000h))
  9165  694A  53 70             	mov	[0+((?___flunpack)^0x0)],a
  9166  694C  50 4C             	mov	a,<((__div_to_l_@exp1|8000h))
  9167  694E  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  9168  6950  50 80             	mov	a,>((__div_to_l_@exp1|8000h))
  9169  6952  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  9170  6954  71 80             	or	f, 0x80	;select multiple RAM page mode
  9171                          	
  9172  6956  7C 7AFC           	xcall	___flunpack
  9173                          	
  9174                          	line	25
  9175                          ;fldivl.c: 25: if(exp1 == 0)
  9176  6959  70 CF             	and	f, 0xCF   ;select user reg space
  9177  695B  62 D0 00          	mov	reg[CUR_PP],0
  9178  695E  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9179  6960  39 00             	cmp	a,(0)
  9180  6962  B019              	jnz	l577
  9181                          	line	26
  9182  6964  70 CF             	and	f, 0xCF   ;select user reg space
  9183  6966  62 D0 00          	mov	reg[CUR_PP],0
  9184  6969  51 48             	mov	a,[0+((__div_to_l_@quot)^0x0)]
  9185  696B  53 40             	mov	[0+((?__div_to_l_)^0x0)],a
  9186  696D  51 49             	mov	a,[1+((__div_to_l_@quot)^0x0)]
  9187  696F  53 41             	mov	[1+((?__div_to_l_)^0x0)],a
  9188  6971  51 4A             	mov	a,[2+((__div_to_l_@quot)^0x0)]
  9189  6973  53 42             	mov	[2+((?__div_to_l_)^0x0)],a
  9190  6975  51 4B             	mov	a,[3+((__div_to_l_@quot)^0x0)]
  9191  6977  53 43             	mov	[3+((?__div_to_l_)^0x0)],a
  9192  6979  7D 6B11           	xjmp	l576
  9193                          ;			
  9194  697C                    l577:	
  9195                          	line	27
  9196                          ;fldivl.c: 27: __flunpack(&(*(unsigned long *)&f2), &cntr);
  9197  697C  50 44             	mov	a,<((__div_to_l_@f2|8000h))
  9198  697E  70 CF             	and	f, 0xCF   ;select user reg space
  9199  6980  62 D0 00          	mov	reg[CUR_PP],0
  9200  6983  53 71             	mov	[1+((?___flunpack)^0x0)],a
  9201  6985  50 80             	mov	a,>((__div_to_l_@f2|8000h))
  9202  6987  53 70             	mov	[0+((?___flunpack)^0x0)],a
  9203  6989  50 4D             	mov	a,<((__div_to_l_@cntr|8000h))
  9204  698B  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
  9205  698D  50 80             	mov	a,>((__div_to_l_@cntr|8000h))
  9206  698F  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
  9207  6991  71 80             	or	f, 0x80	;select multiple RAM page mode
  9208                          	
  9209  6993  7C 7AFC           	xcall	___flunpack
  9210                          	
  9211                          	line	28
  9212                          ;fldivl.c: 28: if(cntr == 0)
  9213  6996  70 CF             	and	f, 0xCF   ;select user reg space
  9214  6998  62 D0 00          	mov	reg[CUR_PP],0
  9215  699B  51 4D             	mov	a,[0+((__div_to_l_@cntr)^0x0)]
  9216  699D  39 00             	cmp	a,(0)
  9217  699F  B019              	jnz	l578
  9218                          	line	29
  9219  69A1  70 CF             	and	f, 0xCF   ;select user reg space
  9220  69A3  62 D0 00          	mov	reg[CUR_PP],0
  9221  69A6  51 48             	mov	a,[0+((__div_to_l_@quot)^0x0)]
  9222  69A8  53 40             	mov	[0+((?__div_to_l_)^0x0)],a
  9223  69AA  51 49             	mov	a,[1+((__div_to_l_@quot)^0x0)]
  9224  69AC  53 41             	mov	[1+((?__div_to_l_)^0x0)],a
  9225  69AE  51 4A             	mov	a,[2+((__div_to_l_@quot)^0x0)]
  9226  69B0  53 42             	mov	[2+((?__div_to_l_)^0x0)],a
  9227  69B2  51 4B             	mov	a,[3+((__div_to_l_@quot)^0x0)]
  9228  69B4  53 43             	mov	[3+((?__div_to_l_)^0x0)],a
  9229  69B6  7D 6B11           	xjmp	l576
  9230                          ;			
  9231  69B9                    l578:	
  9232                          	line	30
  9233                          ;fldivl.c: 30: exp1 -= 127;
  9234  69B9  70 CF             	and	f, 0xCF   ;select user reg space
  9235  69BB  62 D0 00          	mov	reg[CUR_PP],0
  9236  69BE  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9237  69C0  11 7F             	sub	a,<((07Fh))
  9238  69C2  53 4C             	mov	[0+((__div_to_l_@exp1)^0x0)],a
  9239                          	line	31
  9240                          ;fldivl.c: 31: exp1 -= cntr-127+31;
  9241  69C4  50 A0             	mov	a,<((0A0h))
  9242  69C6  02 4D             	add	a,[0+((__div_to_l_@cntr)^0x0)]
  9243  69C8  53 4E             	mov	[(??__div_to_l_^0x0)+6+0],a
  9244  69CA  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9245  69CC  12 4E             	sub	a,[(??__div_to_l_^0x0)+6+0]
  9246  69CE  53 4C             	mov	[0+((__div_to_l_@exp1)^0x0)],a
  9247                          	line	32
  9248                          ;fldivl.c: 32: cntr = 32;
  9249  69D0  50 20             	mov	a,<((020h))
  9250  69D2  53 4D             	mov	[0+((__div_to_l_@cntr)^0x0)],a
  9251                          	line	33
  9252                          ;fldivl.c: 33: do {
  9253                          ;			
  9254  69D4                    l581:	
  9255                          	line	34
  9256                          ;fldivl.c: 34: quot <<= 1;
  9257  69D4  50 01             	mov	a,<((01h))
  9258  69D6  7D 69E6           	xjmp	u2423
  9259  69D9                    u2434:
  9260  69D9  70 CF             	and	f, 0xCF   ;select user reg space
  9261  69DB  62 D0 00          	mov	reg[CUR_PP],0
  9262  69DE  65 4B             	asl	[3+((__div_to_l_@quot)^0x0)]
  9263  69E0  6B 4A             	rlc	[2+((__div_to_l_@quot)^0x0)]
  9264  69E2  6B 49             	rlc	[1+((__div_to_l_@quot)^0x0)]
  9265  69E4  6B 48             	rlc	[0+((__div_to_l_@quot)^0x0)]
  9266  69E6                    u2423:
  9267  69E6  78                	dec	a
  9268  69E7  DFF1              	jnc	u2434
  9269                          	line	35
  9270                          ;fldivl.c: 35: if((*(unsigned long *)&f1) >= (*(unsigned long *)&f2)) {
  9271  69E9  70 CF             	and	f, 0xCF   ;select user reg space
  9272  69EB  62 D0 00          	mov	reg[CUR_PP],0
  9273  69EE  51 43             	mov	a,[3+((__div_to_l_@f1)^0x0)]
  9274  69F0  3A 47             	cmp	a,[3+((__div_to_l_@f2)^0x0)]
  9275  69F2  51 42             	mov	a,[2+((__div_to_l_@f1)^0x0)]
  9276  69F4  1A 46             	sbb	a,[2+((__div_to_l_@f2)^0x0)]
  9277  69F6  51 41             	mov	a,[1+((__div_to_l_@f1)^0x0)]
  9278  69F8  1A 45             	sbb	a,[1+((__div_to_l_@f2)^0x0)]
  9279  69FA  51 40             	mov	a,[0+((__div_to_l_@f1)^0x0)]
  9280  69FC  1A 44             	sbb	a,[0+((__div_to_l_@f2)^0x0)]
  9281  69FE  C026              	jc	l582
  9282                          	line	36
  9283                          ;fldivl.c: 36: (*(unsigned long *)&f1) -= (*(unsigned long *)&f2);
  9284  6A00  70 CF             	and	f, 0xCF   ;select user reg space
  9285  6A02  62 D0 00          	mov	reg[CUR_PP],0
  9286  6A05  51 47             	mov	a,[3+((__div_to_l_@f2)^0x0)]
  9287  6A07  14 43             	sub	[3+((__div_to_l_@f1)^0x0)],a
  9288  6A09  51 46             	mov	a,[2+((__div_to_l_@f2)^0x0)]
  9289  6A0B  1C 42             	sbb	[2+((__div_to_l_@f1)^0x0)],a
  9290  6A0D  51 45             	mov	a,[1+((__div_to_l_@f2)^0x0)]
  9291  6A0F  1C 41             	sbb	[1+((__div_to_l_@f1)^0x0)],a
  9292  6A11  51 44             	mov	a,[0+((__div_to_l_@f2)^0x0)]
  9293  6A13  1C 40             	sbb	[0+((__div_to_l_@f1)^0x0)],a
  9294                          	line	37
  9295                          ;fldivl.c: 37: quot |= 1;
  9296  6A15  50 01             	mov	a,<(01h)
  9297  6A17  2C 4B             	or	[3+((__div_to_l_@quot)^0x0)],a
  9298  6A19  50 00             	mov	a,<(01h>>8)
  9299  6A1B  2C 4A             	or	[2+((__div_to_l_@quot)^0x0)],a
  9300  6A1D  50 00             	mov	a,<(01h>>16)
  9301  6A1F  2C 49             	or	[1+((__div_to_l_@quot)^0x0)],a
  9302  6A21  50 00             	mov	a,<(01h>>24)
  9303  6A23  2C 48             	or	[0+((__div_to_l_@quot)^0x0)],a
  9304                          	line	38
  9305                          ;			
  9306  6A25                    l582:	
  9307                          	line	39
  9308                          ;fldivl.c: 38: }
  9309                          ;fldivl.c: 39: (*(unsigned long *)&f1) <<= 1;
  9310  6A25  50 01             	mov	a,<((01h))
  9311  6A27  7D 6A37           	xjmp	u2443
  9312  6A2A                    u2454:
  9313  6A2A  70 CF             	and	f, 0xCF   ;select user reg space
  9314  6A2C  62 D0 00          	mov	reg[CUR_PP],0
  9315  6A2F  65 43             	asl	[3+((__div_to_l_@f1)^0x0)]
  9316  6A31  6B 42             	rlc	[2+((__div_to_l_@f1)^0x0)]
  9317  6A33  6B 41             	rlc	[1+((__div_to_l_@f1)^0x0)]
  9318  6A35  6B 40             	rlc	[0+((__div_to_l_@f1)^0x0)]
  9319  6A37                    u2443:
  9320  6A37  78                	dec	a
  9321  6A38  DFF1              	jnc	u2454
  9322                          	line	40
  9323                          ;fldivl.c: 40: } while(--cntr != 0);
  9324  6A3A  70 CF             	and	f, 0xCF   ;select user reg space
  9325  6A3C  62 D0 00          	mov	reg[CUR_PP],0
  9326  6A3F  51 4D             	mov	a,[0+((__div_to_l_@cntr)^0x0)]
  9327  6A41  11 01             	sub	a,<((01h))
  9328  6A43  53 4D             	mov	[0+((__div_to_l_@cntr)^0x0)],a
  9329  6A45  51 4D             	mov	a,[0+((__div_to_l_@cntr)^0x0)]
  9330  6A47  39 00             	cmp	a,(0)
  9331  6A49  BF8A              	jnz	l581
  9332                          ;			
  9333  6A4B                    l580:	
  9334                          	line	41
  9335                          ;fldivl.c: 41: if((signed char)exp1 < 0) {
  9336  6A4B  70 CF             	and	f, 0xCF   ;select user reg space
  9337  6A4D  62 D0 00          	mov	reg[CUR_PP],0
  9338  6A50  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9339  6A52  31 80             	xor	a,80h
  9340  6A54  39 80             	cmp	a,(0)^80h
  9341  6A56  D051              	jnc	l583
  9342                          	line	42
  9343                          ;fldivl.c: 42: if((signed char)exp1 < -31)
  9344  6A58  70 CF             	and	f, 0xCF   ;select user reg space
  9345  6A5A  62 D0 00          	mov	reg[CUR_PP],0
  9346  6A5D  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9347  6A5F  31 80             	xor	a,80h
  9348  6A61  39 61             	cmp	a,(-31)^80h
  9349  6A63  D019              	jnc	l587
  9350                          	line	43
  9351  6A65  50 00             	mov	a,<(0>>24)
  9352  6A67  70 CF             	and	f, 0xCF   ;select user reg space
  9353  6A69  62 D0 00          	mov	reg[CUR_PP],0
  9354  6A6C  53 40             	mov	[0+((?__div_to_l_)^0x0)],a
  9355  6A6E  50 00             	mov	a,<(0>>16)
  9356  6A70  53 41             	mov	[1+((?__div_to_l_)^0x0)],a
  9357  6A72  50 00             	mov	a,<(0>>8)
  9358  6A74  53 42             	mov	[2+((?__div_to_l_)^0x0)],a
  9359  6A76  50 00             	mov	a,<(0)
  9360  6A78  53 43             	mov	[3+((?__div_to_l_)^0x0)],a
  9361  6A7A  7D 6B11           	xjmp	l576
  9362                          	line	44
  9363                          ;fldivl.c: 44: do
  9364                          ;			
  9365  6A7D                    l587:	
  9366                          	line	45
  9367                          ;fldivl.c: 45: quot >>= 1;
  9368  6A7D  50 01             	mov	a,<((01h))
  9369  6A7F  7D 6A91           	xjmp	u2463
  9370  6A82  70 FB             	clrc
  9371  6A84                    u2474:
  9372  6A84  70 CF             	and	f, 0xCF   ;select user reg space
  9373  6A86  62 D0 00          	mov	reg[CUR_PP],0
  9374  6A89  6E 48             	rrc	[0+((__div_to_l_@quot)^0x0)]
  9375  6A8B  6E 49             	rrc	[1+((__div_to_l_@quot)^0x0)]
  9376  6A8D  6E 4A             	rrc	[2+((__div_to_l_@quot)^0x0)]
  9377  6A8F  6E 4B             	rrc	[3+((__div_to_l_@quot)^0x0)]
  9378  6A91                    u2463:
  9379  6A91  78                	dec	a
  9380  6A92  DFF1              	jnc	u2474
  9381                          	line	46
  9382                          ;fldivl.c: 46: while(++exp1 != 0);
  9383  6A94  70 CF             	and	f, 0xCF   ;select user reg space
  9384  6A96  62 D0 00          	mov	reg[CUR_PP],0
  9385  6A99  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9386  6A9B  01 01             	add	a,<((01h))
  9387  6A9D  53 4C             	mov	[0+((__div_to_l_@exp1)^0x0)],a
  9388  6A9F  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9389  6AA1  39 00             	cmp	a,(0)
  9390  6AA3  BFD9              	jnz	l587
  9391                          ;			
  9392  6AA5                    l586:	
  9393                          	line	47
  9394                          ;fldivl.c: 47: } else {
  9395  6AA5  7D 6AF9           	xjmp	l588
  9396                          ;			
  9397  6AA8                    l583:	
  9398                          	line	48
  9399                          ;fldivl.c: 48: if(exp1 >= 32)
  9400  6AA8  70 CF             	and	f, 0xCF   ;select user reg space
  9401  6AAA  62 D0 00          	mov	reg[CUR_PP],0
  9402  6AAD  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9403  6AAF  39 20             	cmp	a,<((020h))
  9404  6AB1  C019              	jc	l589
  9405                          	line	49
  9406  6AB3  50 00             	mov	a,<(0>>24)
  9407  6AB5  70 CF             	and	f, 0xCF   ;select user reg space
  9408  6AB7  62 D0 00          	mov	reg[CUR_PP],0
  9409  6ABA  53 40             	mov	[0+((?__div_to_l_)^0x0)],a
  9410  6ABC  50 00             	mov	a,<(0>>16)
  9411  6ABE  53 41             	mov	[1+((?__div_to_l_)^0x0)],a
  9412  6AC0  50 00             	mov	a,<(0>>8)
  9413  6AC2  53 42             	mov	[2+((?__div_to_l_)^0x0)],a
  9414  6AC4  50 00             	mov	a,<(0)
  9415  6AC6  53 43             	mov	[3+((?__div_to_l_)^0x0)],a
  9416  6AC8  7D 6B11           	xjmp	l576
  9417                          ;			
  9418  6ACB                    l589:	
  9419                          	line	50
  9420                          ;fldivl.c: 50: while(exp1 != 0) {
  9421  6ACB  7D 6AEE           	xjmp	l590
  9422                          ;			
  9423  6ACE                    l591:	
  9424                          	line	51
  9425                          ;fldivl.c: 51: quot <<= 1;
  9426  6ACE  50 01             	mov	a,<((01h))
  9427  6AD0  7D 6AE0           	xjmp	u2483
  9428  6AD3                    u2494:
  9429  6AD3  70 CF             	and	f, 0xCF   ;select user reg space
  9430  6AD5  62 D0 00          	mov	reg[CUR_PP],0
  9431  6AD8  65 4B             	asl	[3+((__div_to_l_@quot)^0x0)]
  9432  6ADA  6B 4A             	rlc	[2+((__div_to_l_@quot)^0x0)]
  9433  6ADC  6B 49             	rlc	[1+((__div_to_l_@quot)^0x0)]
  9434  6ADE  6B 48             	rlc	[0+((__div_to_l_@quot)^0x0)]
  9435  6AE0                    u2483:
  9436  6AE0  78                	dec	a
  9437  6AE1  DFF1              	jnc	u2494
  9438                          	line	52
  9439                          ;fldivl.c: 52: exp1--;
  9440  6AE3  70 CF             	and	f, 0xCF   ;select user reg space
  9441  6AE5  62 D0 00          	mov	reg[CUR_PP],0
  9442  6AE8  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9443  6AEA  11 01             	sub	a,<((01h))
  9444  6AEC  53 4C             	mov	[0+((__div_to_l_@exp1)^0x0)],a
  9445                          	line	53
  9446                          ;			
  9447  6AEE                    l590:	
  9448                          	line	50
  9449  6AEE  70 CF             	and	f, 0xCF   ;select user reg space
  9450  6AF0  62 D0 00          	mov	reg[CUR_PP],0
  9451  6AF3  51 4C             	mov	a,[0+((__div_to_l_@exp1)^0x0)]
  9452  6AF5  39 00             	cmp	a,(0)
  9453  6AF7  BFD6              	jnz	l591
  9454                          ;			
  9455  6AF9                    l592:	
  9456                          	line	54
  9457                          ;			
  9458  6AF9                    l588:	
  9459                          	line	55
  9460  6AF9  70 CF             	and	f, 0xCF   ;select user reg space
  9461  6AFB  62 D0 00          	mov	reg[CUR_PP],0
  9462  6AFE  51 48             	mov	a,[0+((__div_to_l_@quot)^0x0)]
  9463  6B00  53 40             	mov	[0+((?__div_to_l_)^0x0)],a
  9464  6B02  51 49             	mov	a,[1+((__div_to_l_@quot)^0x0)]
  9465  6B04  53 41             	mov	[1+((?__div_to_l_)^0x0)],a
  9466  6B06  51 4A             	mov	a,[2+((__div_to_l_@quot)^0x0)]
  9467  6B08  53 42             	mov	[2+((?__div_to_l_)^0x0)],a
  9468  6B0A  51 4B             	mov	a,[3+((__div_to_l_@quot)^0x0)]
  9469  6B0C  53 43             	mov	[3+((?__div_to_l_)^0x0)],a
  9470  6B0E  7D 6B11           	xjmp	l576
  9471                          	line	56
  9472                          ;fldivl.c: 56: }
  9473  6B11                    l576:
  9474                          ;			
  9475  6B11  70 CF             	and	f, 0xCF   ;select user reg space
  9476                          	
  9477  6B13  7F                	ret
  9478                          GLOBAL __end_of__div_to_l_
  9479  6B14                    	__end_of__div_to_l_:
  9480                          	FNSIZE	__div_to_l_,7,8
  9481                          ; =============== function __div_to_l_ ends ============
  9482                          
  9483                          	signat	__div_to_l_,8316
  9484                          	global	___lltofl
  9485                          	global	??___lltofl
  9486                          	global	?___lltofl
  9487                          	psect	text
  9488                          
  9489                          ; *************** function ___lltofl *****************
  9490                          ; Defined at:
  9491                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lltofl.c"
  9492                          ; Parameters:
  9493                          ;		c           	offs:   0	type: unsigned long 
  9494                          ; Auto variables:
  9495                          ;		f1          	       	type: unsigned long 
  9496                          ;		exp         	       	type: unsigned char 
  9497                          ; Return value:
  9498                          ;		type: unsigned char 
  9499                          ;		size: 4
  9500                          ; Registers used:
  9501                          ;		a, x, CUR_PP
  9502                          ; Tracked objects:
  9503                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9504                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9505                          ;		Unchanged: 
  9506                          ; Data sizes:
  9507                          ;		Autos:    5
  9508                          ;		Params:   4
  9509                          ;		Temp:     0
  9510                          ;		Total:    9
  9511                          ; This function calls:
  9512                          ;		___flpack
  9513                          ; This function is called by:
  9514                          ;		_printf
  9515                          ; This function uses a non-reentrant model
  9516                          ; 
  9517                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\lltofl.c"
  9518                          	line	16
  9519  007F                    	__size_of___lltofl	equ	__end_of___lltofl-___lltofl
  9520                          ;lltofl.c: 14: double
  9521                          ;lltofl.c: 15: __lltofl(unsigned long int c)
  9522                          ;lltofl.c: 16: {
  9523                          ;			
  9524  6B14                    ___lltofl:	
  9525                          	opt	disable
  9526                          	line	20
  9527                          ;lltofl.c: 17: double f1;
  9528                          ;lltofl.c: 18: unsigned char exp;
  9529                          ;lltofl.c: 20: if(c == 0)
  9530  6B14  70 CF             	and	f, 0xCF   ;select user reg space
  9531  6B16  62 D0 00          	mov	reg[CUR_PP],0
  9532  6B19  51 40             	mov	a,[0+((___lltofl@c)^0x0)]
  9533  6B1B  39 00             	cmp	a,<(0>>24)
  9534  6B1D  B011              	jnz	u2413
  9535  6B1F  51 41             	mov	a,[1+((___lltofl@c)^0x0)]
  9536  6B21  39 00             	cmp	a,<(0>>16)
  9537  6B23  B00B              	jnz	u2413
  9538  6B25  51 42             	mov	a,[2+((___lltofl@c)^0x0)]
  9539  6B27  39 00             	cmp	a,<(0>>8)
  9540  6B29  B005              	jnz	u2413
  9541  6B2B  51 43             	mov	a,[3+((___lltofl@c)^0x0)]
  9542  6B2D  39 00             	cmp	a,<(0)
  9543  6B2F                    u2413:
  9544  6B2F  B019              	jnz	l569
  9545                          	line	21
  9546  6B31  50 00             	mov	a,<(0x0>>24)
  9547  6B33  70 CF             	and	f, 0xCF   ;select user reg space
  9548  6B35  62 D0 00          	mov	reg[CUR_PP],0
  9549  6B38  53 40             	mov	[0+((?___lltofl)^0x0)],a
  9550  6B3A  50 00             	mov	a,<(0x0>>16)
  9551  6B3C  53 41             	mov	[1+((?___lltofl)^0x0)],a
  9552  6B3E  50 00             	mov	a,<(0x0>>8)
  9553  6B40  53 42             	mov	[2+((?___lltofl)^0x0)],a
  9554  6B42  50 00             	mov	a,<(0x0)
  9555  6B44  53 43             	mov	[3+((?___lltofl)^0x0)],a
  9556  6B46  7D 6B90           	xjmp	l568
  9557                          ;			
  9558  6B49                    l569:	
  9559                          	line	22
  9560                          ;lltofl.c: 22: exp = 127+23;
  9561  6B49  50 96             	mov	a,<((096h))
  9562  6B4B  70 CF             	and	f, 0xCF   ;select user reg space
  9563  6B4D  62 D0 00          	mov	reg[CUR_PP],0
  9564  6B50  53 48             	mov	[0+((___lltofl@exp)^0x0)],a
  9565                          	line	23
  9566                          ;lltofl.c: 23: (*(unsigned long *)&f1) = c;
  9567  6B52  51 40             	mov	a,[0+((___lltofl@c)^0x0)]
  9568  6B54  53 44             	mov	[0+((___lltofl@f1)^0x0)],a
  9569  6B56  51 41             	mov	a,[1+((___lltofl@c)^0x0)]
  9570  6B58  53 45             	mov	[1+((___lltofl@f1)^0x0)],a
  9571  6B5A  51 42             	mov	a,[2+((___lltofl@c)^0x0)]
  9572  6B5C  53 46             	mov	[2+((___lltofl@f1)^0x0)],a
  9573  6B5E  51 43             	mov	a,[3+((___lltofl@c)^0x0)]
  9574  6B60  53 47             	mov	[3+((___lltofl@f1)^0x0)],a
  9575                          	line	24
  9576                          ;lltofl.c: 24: __flpack(&(*(unsigned long *)&f1), exp);
  9577  6B62  50 44             	mov	a,<((___lltofl@f1|8000h))
  9578  6B64  70 CF             	and	f, 0xCF   ;select user reg space
  9579  6B66  62 D0 00          	mov	reg[CUR_PP],0
  9580  6B69  53 71             	mov	[1+((?___flpack)^0x0)],a
  9581  6B6B  50 80             	mov	a,>((___lltofl@f1|8000h))
  9582  6B6D  53 70             	mov	[0+((?___flpack)^0x0)],a
  9583  6B6F  51 48             	mov	a,[0+((___lltofl@exp)^0x0)]
  9584  6B71  53 72             	mov	[0+((0+?___flpack+02h)^0x0)],a
  9585  6B73  71 80             	or	f, 0x80	;select multiple RAM page mode
  9586                          	
  9587  6B75  7C 78CD           	xcall	___flpack
  9588                          	
  9589                          	line	25
  9590  6B78  70 CF             	and	f, 0xCF   ;select user reg space
  9591  6B7A  62 D0 00          	mov	reg[CUR_PP],0
  9592  6B7D  51 44             	mov	a,[0+((___lltofl@f1)^0x0)]
  9593  6B7F  53 40             	mov	[0+((?___lltofl)^0x0)],a
  9594  6B81  51 45             	mov	a,[1+((___lltofl@f1)^0x0)]
  9595  6B83  53 41             	mov	[1+((?___lltofl)^0x0)],a
  9596  6B85  51 46             	mov	a,[2+((___lltofl@f1)^0x0)]
  9597  6B87  53 42             	mov	[2+((?___lltofl)^0x0)],a
  9598  6B89  51 47             	mov	a,[3+((___lltofl@f1)^0x0)]
  9599  6B8B  53 43             	mov	[3+((?___lltofl)^0x0)],a
  9600  6B8D  7D 6B90           	xjmp	l568
  9601                          	line	26
  9602                          ;lltofl.c: 26: }
  9603  6B90                    l568:
  9604                          ;			
  9605  6B90  70 CF             	and	f, 0xCF   ;select user reg space
  9606                          	
  9607  6B92  7F                	ret
  9608                          GLOBAL __end_of___lltofl
  9609  6B93                    	__end_of___lltofl:
  9610                          	FNSIZE	___lltofl,5,4
  9611                          ; =============== function ___lltofl ends ============
  9612                          
  9613                          	signat	___lltofl,4220
  9614                          	global	_delay_5us
  9615                          	global	??_delay_5us
  9616                          	global	?_delay_5us
  9617                          	psect	text
  9618                          
  9619                          ; *************** function _delay_5us *****************
  9620                          ; Defined at:
  9621                          ;		line 303 in file "./shtxx.c"
  9622                          ; Parameters:
  9623                          ;		None
  9624                          ; Auto variables:
  9625                          ;		None
  9626                          ; Return value:
  9627                          ;		type: void 
  9628                          ;		size: 0
  9629                          ; Registers used:
  9630                          ;		None
  9631                          ; Tracked objects:
  9632                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9633                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9634                          ;		Unchanged: 
  9635                          ; Data sizes:
  9636                          ;		Autos:    0
  9637                          ;		Params:   0
  9638                          ;		Temp:     0
  9639                          ;		Total:    0
  9640                          ; This function calls:
  9641                          ;		Nothing
  9642                          ; This function is called by:
  9643                          ;		_s_write_byte
  9644                          ;		_s_read_byte
  9645                          ;		_s_transstart
  9646                          ;		_s_measure
  9647                          ; This function uses a non-reentrant model
  9648                          ; 
  9649                          	file	"./shtxx.c"
  9650                          	line	303
  9651  001A                    	__size_of_delay_5us	equ	__end_of_delay_5us-_delay_5us
  9652                          ;shtxx.c: 303: void delay_5us() {
  9653                          ;			
  9654  6B93                    _delay_5us:	
  9655                          	opt	disable
  9656                          	line	305
  9657                          # 305 "./shtxx.c"
  9658  6B93  40                nop ;#
  9659                          # 305 "./shtxx.c"
  9660  6B94  40                nop ;#
  9661                          # 305 "./shtxx.c"
  9662  6B95  40                nop ;#
  9663                          # 305 "./shtxx.c"
  9664  6B96  40                nop ;#
  9665                          # 305 "./shtxx.c"
  9666  6B97  40                nop ;#
  9667                          	line	306
  9668                          # 306 "./shtxx.c"
  9669  6B98  40                nop ;#
  9670                          # 306 "./shtxx.c"
  9671  6B99  40                nop ;#
  9672                          # 306 "./shtxx.c"
  9673  6B9A  40                nop ;#
  9674                          # 306 "./shtxx.c"
  9675  6B9B  40                nop ;#
  9676                          # 306 "./shtxx.c"
  9677  6B9C  40                nop ;#
  9678                          	line	307
  9679                          # 307 "./shtxx.c"
  9680  6B9D  40                nop ;#
  9681                          # 307 "./shtxx.c"
  9682  6B9E  40                nop ;#
  9683                          # 307 "./shtxx.c"
  9684  6B9F  40                nop ;#
  9685                          # 307 "./shtxx.c"
  9686  6BA0  40                nop ;#
  9687                          # 307 "./shtxx.c"
  9688  6BA1  40                nop ;#
  9689                          	line	308
  9690                          # 308 "./shtxx.c"
  9691  6BA2  40                nop ;#
  9692                          # 308 "./shtxx.c"
  9693  6BA3  40                nop ;#
  9694                          # 308 "./shtxx.c"
  9695  6BA4  40                nop ;#
  9696                          # 308 "./shtxx.c"
  9697  6BA5  40                nop ;#
  9698                          # 308 "./shtxx.c"
  9699  6BA6  40                nop ;#
  9700                          	psect	text
  9701                          	line	310
  9702                          ;shtxx.c: 305: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  9703                          ;shtxx.c: 306: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  9704                          ;shtxx.c: 307: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  9705                          ;shtxx.c: 308: asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
  9706                          ;shtxx.c: 310: return;
  9707  6BA7  7D 6BAA           	xjmp	l100
  9708                          	line	311
  9709                          ;shtxx.c: 311: }
  9710  6BAA                    l100:
  9711                          ;			
  9712  6BAA  70 CF             	and	f, 0xCF   ;select user reg space
  9713                          	
  9714  6BAC  7F                	ret
  9715                          GLOBAL __end_of_delay_5us
  9716  6BAD                    	__end_of_delay_5us:
  9717                          	FNSIZE	_delay_5us,0,0
  9718                          ; =============== function _delay_5us ends ============
  9719                          
  9720                          	signat	_delay_5us,88
  9721                          	global	_delay_1us
  9722                          	global	??_delay_1us
  9723                          	global	?_delay_1us
  9724                          	psect	text
  9725                          
  9726                          ; *************** function _delay_1us *****************
  9727                          ; Defined at:
  9728                          ;		line 297 in file "./shtxx.c"
  9729                          ; Parameters:
  9730                          ;		None
  9731                          ; Auto variables:
  9732                          ;		None
  9733                          ; Return value:
  9734                          ;		type: void 
  9735                          ;		size: 0
  9736                          ; Registers used:
  9737                          ;		None
  9738                          ; Tracked objects:
  9739                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9740                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9741                          ;		Unchanged: 
  9742                          ; Data sizes:
  9743                          ;		Autos:    0
  9744                          ;		Params:   0
  9745                          ;		Temp:     0
  9746                          ;		Total:    0
  9747                          ; This function calls:
  9748                          ;		Nothing
  9749                          ; This function is called by:
  9750                          ;		_s_transstart
  9751                          ;		_s_connectionreset
  9752                          ; This function uses a non-reentrant model
  9753                          ; 
  9754                          	file	"./shtxx.c"
  9755                          	line	297
  9756  0006                    	__size_of_delay_1us	equ	__end_of_delay_1us-_delay_1us
  9757                          ;shtxx.c: 297: void delay_1us() {
  9758                          ;			
  9759  6BAD                    _delay_1us:	
  9760                          	opt	disable
  9761                          	line	298
  9762                          ;shtxx.c: 298: return;
  9763  6BAD  7D 6BB0           	xjmp	l99
  9764                          	line	299
  9765                          ;shtxx.c: 299: }
  9766  6BB0                    l99:
  9767                          ;			
  9768  6BB0  70 CF             	and	f, 0xCF   ;select user reg space
  9769                          	
  9770  6BB2  7F                	ret
  9771                          GLOBAL __end_of_delay_1us
  9772  6BB3                    	__end_of_delay_1us:
  9773                          	FNSIZE	_delay_1us,0,0
  9774                          ; =============== function _delay_1us ends ============
  9775                          
  9776                          	signat	_delay_1us,88
  9777                          	global	_log
  9778                          	global	??_log
  9779                          	global	?_log
  9780                          	psect	text
  9781                          
  9782                          ; *************** function _log *****************
  9783                          ; Defined at:
  9784                          ;		line 6 in file "../common/log.c"
  9785                          ; Parameters:
  9786                          ;		x           	offs:   0	type: void 
  9787                          ; Auto variables:
  9788                          ;		exp         	       	type: int 
  9789                          ; Return value:
  9790                          ;		type: int 
  9791                          ;		size: 4
  9792                          ; Registers used:
  9793                          ;		a, x, CUR_PP, mret
  9794                          ; Tracked objects:
  9795                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9796                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  9797                          ;		Unchanged: 
  9798                          ; Data sizes:
  9799                          ;		Autos:    2
  9800                          ;		Params:   4
  9801                          ;		Temp:     1
  9802                          ;		Total:    7
  9803                          ; This function calls:
  9804                          ;		___flge
  9805                          ;		_frexp
  9806                          ;		___flmul
  9807                          ;		___fladd
  9808                          ;		_eval_poly
  9809                          ;		___awtofl
  9810                          ; This function is called by:
  9811                          ;		_log10
  9812                          ; This function uses a non-reentrant model
  9813                          ; 
  9814                          	file	"../common/log.c"
  9815                          	line	6
  9816  01F1                    	__size_of_log	equ	__end_of_log-_log
  9817                          ;log.c: 4: double
  9818                          ;log.c: 5: log(double x)
  9819                          ;log.c: 6: {
  9820                          ;			
  9821  6BB3                    _log:	
  9822                          	opt	disable
  9823                          	line	24
  9824                          ;log.c: 7: int exp;
  9825                          ;log.c: 9: static const double coeff[] =
  9826                          ;log.c: 10: {
  9827                          ;log.c: 11: 0.0000000000,
  9828                          ;log.c: 12: 0.9999964239,
  9829                          ;log.c: 13: -0.4998741238,
  9830                          ;log.c: 14: 0.3317990258,
  9831                          ;log.c: 15: -0.2407338084,
  9832                          ;log.c: 16: 0.1676540711,
  9833                          ;log.c: 17: -0.0953293897,
  9834                          ;log.c: 18: 0.0360884937,
  9835                          ;log.c: 19: -0.0064535442,
  9836                          ;log.c: 20: };
  9837                          ;log.c: 24: if(x < 0.0) {
  9838  6BB3  70 CF             	and	f, 0xCF   ;select user reg space
  9839  6BB5  62 D0 00          	mov	reg[CUR_PP],0
  9840  6BB8  51 38             	mov	a,[0+((log@x)^0x0)]
  9841  6BBA  53 40             	mov	[0+((?___flge)^0x0)],a
  9842  6BBC  51 39             	mov	a,[1+((log@x)^0x0)]
  9843  6BBE  53 41             	mov	[1+((?___flge)^0x0)],a
  9844  6BC0  51 3A             	mov	a,[2+((log@x)^0x0)]
  9845  6BC2  53 42             	mov	[2+((?___flge)^0x0)],a
  9846  6BC4  51 3B             	mov	a,[3+((log@x)^0x0)]
  9847  6BC6  53 43             	mov	[3+((?___flge)^0x0)],a
  9848  6BC8  50 00             	mov	a,<(0x0>>24)
  9849  6BCA  53 44             	mov	[0+((0+?___flge+04h)^0x0)],a
  9850  6BCC  50 00             	mov	a,<(0x0>>16)
  9851  6BCE  53 45             	mov	[1+((0+?___flge+04h)^0x0)],a
  9852  6BD0  50 00             	mov	a,<(0x0>>8)
  9853  6BD2  53 46             	mov	[2+((0+?___flge+04h)^0x0)],a
  9854  6BD4  50 00             	mov	a,<(0x0)
  9855  6BD6  53 47             	mov	[3+((0+?___flge+04h)^0x0)],a
  9856  6BD8  71 80             	or	f, 0x80	;select multiple RAM page mode
  9857                          	
  9858  6BDA  7C 70F4           	xcall	___flge
  9859                          	
  9860  6BDD  C026              	jc	l194
  9861                          	line	25
  9862                          ;log.c: 25: errno = 33;
  9863  6BDF  50 21             	mov	a,<(021h)
  9864  6BE1  70 CF             	and	f, 0xCF   ;select user reg space
  9865  6BE3  71 80             	or	f, 0x80	;select multiple RAM page mode
  9866  6BE5  62 D0 02          	mov	reg[CUR_PP],2
  9867  6BE8  53 12             	mov	[1+((_errno)^0x200)],a
  9868  6BEA  50 00             	mov	a,>(021h)
  9869  6BEC  53 11             	mov	[0+((_errno)^0x200)],a
  9870                          	line	26
  9871  6BEE  50 00             	mov	a,<(0x0>>24)
  9872  6BF0  62 D0 00          	mov	reg[CUR_PP],0
  9873  6BF3  53 38             	mov	[0+((?_log)^0x0)],a
  9874  6BF5  50 00             	mov	a,<(0x0>>16)
  9875  6BF7  53 39             	mov	[1+((?_log)^0x0)],a
  9876  6BF9  50 00             	mov	a,<(0x0>>8)
  9877  6BFB  53 3A             	mov	[2+((?_log)^0x0)],a
  9878  6BFD  50 00             	mov	a,<(0x0)
  9879  6BFF  53 3B             	mov	[3+((?_log)^0x0)],a
  9880  6C01  7D 6DA1           	xjmp	l193
  9881                          	line	27
  9882                          ;			
  9883  6C04                    l194:	
  9884                          	line	28
  9885                          ;log.c: 27: }
  9886                          ;log.c: 28: if(x == 0.0) {
  9887  6C04  70 CF             	and	f, 0xCF   ;select user reg space
  9888  6C06  62 D0 00          	mov	reg[CUR_PP],0
  9889  6C09  51 38             	mov	a,[0+((log@x)^0x0)]
  9890  6C0B  39 00             	cmp	a,<(0x0>>24)
  9891  6C0D  B011              	jnz	u1563
  9892  6C0F  51 39             	mov	a,[1+((log@x)^0x0)]
  9893  6C11  39 00             	cmp	a,<(0x0>>16)
  9894  6C13  B00B              	jnz	u1563
  9895  6C15  51 3A             	mov	a,[2+((log@x)^0x0)]
  9896  6C17  39 00             	cmp	a,<(0x0>>8)
  9897  6C19  B005              	jnz	u1563
  9898  6C1B  51 3B             	mov	a,[3+((log@x)^0x0)]
  9899  6C1D  39 00             	cmp	a,<(0x0)
  9900  6C1F                    u1563:
  9901  6C1F  B026              	jnz	l195
  9902                          	line	29
  9903                          ;log.c: 29: errno = 34;
  9904  6C21  50 22             	mov	a,<(022h)
  9905  6C23  70 CF             	and	f, 0xCF   ;select user reg space
  9906  6C25  71 80             	or	f, 0x80	;select multiple RAM page mode
  9907  6C27  62 D0 02          	mov	reg[CUR_PP],2
  9908  6C2A  53 12             	mov	[1+((_errno)^0x200)],a
  9909  6C2C  50 00             	mov	a,>(022h)
  9910  6C2E  53 11             	mov	[0+((_errno)^0x200)],a
  9911                          	line	30
  9912  6C30  50 00             	mov	a,<(0x0>>24)
  9913  6C32  62 D0 00          	mov	reg[CUR_PP],0
  9914  6C35  53 38             	mov	[0+((?_log)^0x0)],a
  9915  6C37  50 00             	mov	a,<(0x0>>16)
  9916  6C39  53 39             	mov	[1+((?_log)^0x0)],a
  9917  6C3B  50 00             	mov	a,<(0x0>>8)
  9918  6C3D  53 3A             	mov	[2+((?_log)^0x0)],a
  9919  6C3F  50 00             	mov	a,<(0x0)
  9920  6C41  53 3B             	mov	[3+((?_log)^0x0)],a
  9921  6C43  7D 6DA1           	xjmp	l193
  9922                          	line	31
  9923                          ;			
  9924  6C46                    l195:	
  9925                          	line	32
  9926                          ;log.c: 31: }
  9927                          ;log.c: 32: x = frexp(x, &exp) * 2.0 - 1.0;
  9928  6C46  70 CF             	and	f, 0xCF   ;select user reg space
  9929  6C48  62 D0 00          	mov	reg[CUR_PP],0
  9930  6C4B  51 38             	mov	a,[0+((log@x)^0x0)]
  9931  6C4D  53 3F             	mov	[0+((?_frexp)^0x0)],a
  9932  6C4F  51 39             	mov	a,[1+((log@x)^0x0)]
  9933  6C51  53 40             	mov	[1+((?_frexp)^0x0)],a
  9934  6C53  51 3A             	mov	a,[2+((log@x)^0x0)]
  9935  6C55  53 41             	mov	[2+((?_frexp)^0x0)],a
  9936  6C57  51 3B             	mov	a,[3+((log@x)^0x0)]
  9937  6C59  53 42             	mov	[3+((?_frexp)^0x0)],a
  9938  6C5B  50 3C             	mov	a,<((log@exp|8000h))
  9939  6C5D  53 44             	mov	[1+((0+?_frexp+04h)^0x0)],a
  9940  6C5F  50 80             	mov	a,>((log@exp|8000h))
  9941  6C61  53 43             	mov	[0+((0+?_frexp+04h)^0x0)],a
  9942  6C63  71 80             	or	f, 0x80	;select multiple RAM page mode
  9943                          	
  9944  6C65  7C 704D           	xcall	_frexp
  9945                          	
  9946  6C68  70 CF             	and	f, 0xCF   ;select user reg space
  9947  6C6A  62 D0 00          	mov	reg[CUR_PP],0
  9948  6C6D  51 3F             	mov	a,[0+((0+?_frexp)^0x0)]
  9949  6C6F  53 5D             	mov	[0+((?___flmul)^0x0)],a
  9950  6C71  51 40             	mov	a,[1+((0+?_frexp)^0x0)]
  9951  6C73  53 5E             	mov	[1+((?___flmul)^0x0)],a
  9952  6C75  51 41             	mov	a,[2+((0+?_frexp)^0x0)]
  9953  6C77  53 5F             	mov	[2+((?___flmul)^0x0)],a
  9954  6C79  51 42             	mov	a,[3+((0+?_frexp)^0x0)]
  9955  6C7B  53 60             	mov	[3+((?___flmul)^0x0)],a
  9956  6C7D  50 40             	mov	a,<(0x40000000>>24)
  9957  6C7F  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
  9958  6C81  50 00             	mov	a,<(0x40000000>>16)
  9959  6C83  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
  9960  6C85  50 00             	mov	a,<(0x40000000>>8)
  9961  6C87  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
  9962  6C89  50 00             	mov	a,<(0x40000000)
  9963  6C8B  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
  9964  6C8D  71 80             	or	f, 0x80	;select multiple RAM page mode
  9965                          	
  9966  6C8F  7C 7680           	xcall	___flmul
  9967                          	
  9968  6C92  70 CF             	and	f, 0xCF   ;select user reg space
  9969  6C94  62 D0 00          	mov	reg[CUR_PP],0
  9970  6C97  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
  9971  6C99  53 4C             	mov	[0+((?___fladd)^0x0)],a
  9972  6C9B  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
  9973  6C9D  53 4D             	mov	[1+((?___fladd)^0x0)],a
  9974  6C9F  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
  9975  6CA1  53 4E             	mov	[2+((?___fladd)^0x0)],a
  9976  6CA3  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
  9977  6CA5  53 4F             	mov	[3+((?___fladd)^0x0)],a
  9978  6CA7  50 BF             	mov	a,<(0xbf800000>>24)
  9979  6CA9  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
  9980  6CAB  50 80             	mov	a,<(0xbf800000>>16)
  9981  6CAD  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
  9982  6CAF  50 00             	mov	a,<(0xbf800000>>8)
  9983  6CB1  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
  9984  6CB3  50 00             	mov	a,<(0xbf800000)
  9985  6CB5  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
  9986  6CB7  71 80             	or	f, 0x80	;select multiple RAM page mode
  9987                          	
  9988  6CB9  7C 73BA           	xcall	___fladd
  9989                          	
  9990  6CBC  70 CF             	and	f, 0xCF   ;select user reg space
  9991  6CBE  62 D0 00          	mov	reg[CUR_PP],0
  9992  6CC1  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
  9993  6CC3  53 38             	mov	[0+((log@x)^0x0)],a
  9994  6CC5  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
  9995  6CC7  53 39             	mov	[1+((log@x)^0x0)],a
  9996  6CC9  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
  9997  6CCB  53 3A             	mov	[2+((log@x)^0x0)],a
  9998  6CCD  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
  9999  6CCF  53 3B             	mov	[3+((log@x)^0x0)],a
 10000                          	line	33
 10001                          ;log.c: 33: exp--;
 10002  6CD1  70 CF             	and	f, 0xCF   ;select user reg space
 10003  6CD3  62 D0 00          	mov	reg[CUR_PP],0
 10004  6CD6  51 3D             	mov	a,[1+((log@exp)^0x0)]
 10005  6CD8  01 FF             	add	a,<(-1)
 10006  6CDA  53 3D             	mov	[1+((log@exp)^0x0)],a
 10007  6CDC  51 3C             	mov	a,[0+((log@exp)^0x0)]
 10008  6CDE  09 FF             	adc	a,>(-1)
 10009  6CE0  53 3C             	mov	[0+((log@exp)^0x0)],a
 10010                          	line	34
 10011                          ;log.c: 34: x = eval_poly(x, coeff, sizeof coeff/sizeof coeff[0] - 1);
 10012  6CE2  70 CF             	and	f, 0xCF   ;select user reg space
 10013  6CE4  62 D0 00          	mov	reg[CUR_PP],0
 10014  6CE7  51 38             	mov	a,[0+((log@x)^0x0)]
 10015  6CE9  53 3F             	mov	[0+((?_eval_poly)^0x0)],a
 10016  6CEB  51 39             	mov	a,[1+((log@x)^0x0)]
 10017  6CED  53 40             	mov	[1+((?_eval_poly)^0x0)],a
 10018  6CEF  51 3A             	mov	a,[2+((log@x)^0x0)]
 10019  6CF1  53 41             	mov	[2+((?_eval_poly)^0x0)],a
 10020  6CF3  51 3B             	mov	a,[3+((log@x)^0x0)]
 10021  6CF5  53 42             	mov	[3+((?_eval_poly)^0x0)],a
 10022  6CF7  50 A4             	mov	a,<(F64)
 10023  6CF9  53 44             	mov	[1+((0+?_eval_poly+04h)^0x0)],a
 10024  6CFB  50 7D             	mov	a,>(F64)
 10025  6CFD  53 43             	mov	[0+((0+?_eval_poly+04h)^0x0)],a
 10026  6CFF  50 08             	mov	a,<(08h)
 10027  6D01  53 46             	mov	[1+((0+?_eval_poly+06h)^0x0)],a
 10028  6D03  50 00             	mov	a,>(08h)
 10029  6D05  53 45             	mov	[0+((0+?_eval_poly+06h)^0x0)],a
 10030  6D07  71 80             	or	f, 0x80	;select multiple RAM page mode
 10031                          	
 10032  6D09  7C 71EC           	xcall	_eval_poly
 10033                          	
 10034  6D0C  70 CF             	and	f, 0xCF   ;select user reg space
 10035  6D0E  62 D0 00          	mov	reg[CUR_PP],0
 10036  6D11  51 3F             	mov	a,[0+((0+?_eval_poly)^0x0)]
 10037  6D13  53 38             	mov	[0+((log@x)^0x0)],a
 10038  6D15  51 40             	mov	a,[1+((0+?_eval_poly)^0x0)]
 10039  6D17  53 39             	mov	[1+((log@x)^0x0)],a
 10040  6D19  51 41             	mov	a,[2+((0+?_eval_poly)^0x0)]
 10041  6D1B  53 3A             	mov	[2+((log@x)^0x0)],a
 10042  6D1D  51 42             	mov	a,[3+((0+?_eval_poly)^0x0)]
 10043  6D1F  53 3B             	mov	[3+((log@x)^0x0)],a
 10044                          	line	35
 10045  6D21  70 CF             	and	f, 0xCF   ;select user reg space
 10046  6D23  62 D0 00          	mov	reg[CUR_PP],0
 10047  6D26  51 3C             	mov	a,[0+((log@exp)^0x0)]
 10048  6D28  08                	push	a
 10049  6D29  51 3D             	mov	a,[1+((log@exp)^0x0)]
 10050  6D2B  53 40             	mov	[1+((?___awtofl)^0x0)],a
 10051  6D2D  18                	pop	a
 10052  6D2E  53 3F             	mov	[0+((?___awtofl)^0x0)],a
 10053  6D30  71 80             	or	f, 0x80	;select multiple RAM page mode
 10054                          	
 10055  6D32  7C 72CE           	xcall	___awtofl
 10056                          	
 10057  6D35  70 CF             	and	f, 0xCF   ;select user reg space
 10058  6D37  62 D0 00          	mov	reg[CUR_PP],0
 10059  6D3A  51 3F             	mov	a,[0+((0+?___awtofl)^0x0)]
 10060  6D3C  53 5D             	mov	[0+((?___flmul)^0x0)],a
 10061  6D3E  51 40             	mov	a,[1+((0+?___awtofl)^0x0)]
 10062  6D40  53 5E             	mov	[1+((?___flmul)^0x0)],a
 10063  6D42  51 41             	mov	a,[2+((0+?___awtofl)^0x0)]
 10064  6D44  53 5F             	mov	[2+((?___flmul)^0x0)],a
 10065  6D46  51 42             	mov	a,[3+((0+?___awtofl)^0x0)]
 10066  6D48  53 60             	mov	[3+((?___flmul)^0x0)],a
 10067  6D4A  50 3F             	mov	a,<(0x3f317218>>24)
 10068  6D4C  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
 10069  6D4E  50 31             	mov	a,<(0x3f317218>>16)
 10070  6D50  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
 10071  6D52  50 72             	mov	a,<(0x3f317218>>8)
 10072  6D54  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
 10073  6D56  50 18             	mov	a,<(0x3f317218)
 10074  6D58  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
 10075  6D5A  71 80             	or	f, 0x80	;select multiple RAM page mode
 10076                          	
 10077  6D5C  7C 7680           	xcall	___flmul
 10078                          	
 10079  6D5F  70 CF             	and	f, 0xCF   ;select user reg space
 10080  6D61  62 D0 00          	mov	reg[CUR_PP],0
 10081  6D64  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
 10082  6D66  53 4C             	mov	[0+((?___fladd)^0x0)],a
 10083  6D68  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
 10084  6D6A  53 4D             	mov	[1+((?___fladd)^0x0)],a
 10085  6D6C  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
 10086  6D6E  53 4E             	mov	[2+((?___fladd)^0x0)],a
 10087  6D70  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
 10088  6D72  53 4F             	mov	[3+((?___fladd)^0x0)],a
 10089  6D74  51 38             	mov	a,[0+((log@x)^0x0)]
 10090  6D76  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
 10091  6D78  51 39             	mov	a,[1+((log@x)^0x0)]
 10092  6D7A  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
 10093  6D7C  51 3A             	mov	a,[2+((log@x)^0x0)]
 10094  6D7E  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
 10095  6D80  51 3B             	mov	a,[3+((log@x)^0x0)]
 10096  6D82  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
 10097  6D84  71 80             	or	f, 0x80	;select multiple RAM page mode
 10098                          	
 10099  6D86  7C 73BA           	xcall	___fladd
 10100                          	
 10101  6D89  70 CF             	and	f, 0xCF   ;select user reg space
 10102  6D8B  62 D0 00          	mov	reg[CUR_PP],0
 10103  6D8E  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
 10104  6D90  53 38             	mov	[0+((?_log)^0x0)],a
 10105  6D92  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
 10106  6D94  53 39             	mov	[1+((?_log)^0x0)],a
 10107  6D96  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
 10108  6D98  53 3A             	mov	[2+((?_log)^0x0)],a
 10109  6D9A  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
 10110  6D9C  53 3B             	mov	[3+((?_log)^0x0)],a
 10111  6D9E  7D 6DA1           	xjmp	l193
 10112                          	line	36
 10113                          ;log.c: 36: }
 10114  6DA1                    l193:
 10115                          ;			
 10116  6DA1  70 CF             	and	f, 0xCF   ;select user reg space
 10117                          	
 10118  6DA3  7F                	ret
 10119                          GLOBAL __end_of_log
 10120  6DA4                    	__end_of_log:
 10121                          	FNSIZE	_log,3,4
 10122                          ; =============== function _log ends ============
 10123                          
 10124                          	signat	_log,4220
 10125                          	global	_OneWire_fReset
 10126                          	global	_oo_tx_byte
 10127                          	global	??_oo_tx_byte
 10128                          	global	?_oo_tx_byte
 10129                          	psect	text
 10130                          
 10131                          ; *************** function _oo_tx_byte *****************
 10132                          ; Defined at:
 10133                          ;		line 62 in file "./oo.c"
 10134                          ; Parameters:
 10135                          ;		data        	offs:   0	type: unsigned char 
 10136                          ; Auto variables:
 10137                          ;		None
 10138                          ; Return value:
 10139                          ;		type: void 
 10140                          ;		size: 0
 10141                          ; Registers used:
 10142                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
 10143                          ; Tracked objects:
 10144                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10145                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10146                          ;		Unchanged: 
 10147                          ; Data sizes:
 10148                          ;		Autos:    0
 10149                          ;		Params:   1
 10150                          ;		Temp:     0
 10151                          ;		Total:    1
 10152                          ; This function calls:
 10153                          ;		_OneWire_WriteByte
 10154                          ; This function is called by:
 10155                          ;		_oo_read_scratchpad
 10156                          ;		_oo_start_conversion
 10157                          ; This function uses a non-reentrant model
 10158                          ; 
 10159                          	file	"./oo.c"
 10160                          	line	62
 10161  0014                    	__size_of_oo_tx_byte	equ	__end_of_oo_tx_byte-_oo_tx_byte
 10162                          ;oo.c: 62: void oo_tx_byte(char data){
 10163                          ;			
 10164  6DA4                    _oo_tx_byte:	
 10165                          	opt	disable
 10166                          	line	63
 10167                          ;oo.c: 63: OneWire_WriteByte(data);
 10168  6DA4  70 CF             	and	f, 0xCF   ;select user reg space
 10169  6DA6  62 D0 00          	mov	reg[CUR_PP],0
 10170  6DA9  51 33             	mov	a,[0+((oo_tx_byte@data)^0x0)]
 10171  6DAB  71 80             	or	f, 0x80	;select multiple RAM page mode
 10172                          	
 10173  6DAD  7C 3E21           	xcall	_OneWire_WriteByte
 10174                          	
 10175  6DB0  38 00             	add	sp,0
 10176                          	line	64
 10177                          ;oo.c: 64: return;
 10178  6DB2  7D 6DB5           	xjmp	l18
 10179                          	line	65
 10180                          ;oo.c: 65: }
 10181  6DB5                    l18:
 10182                          ;			
 10183  6DB5  70 CF             	and	f, 0xCF   ;select user reg space
 10184                          	
 10185  6DB7  7F                	ret
 10186                          GLOBAL __end_of_oo_tx_byte
 10187  6DB8                    	__end_of_oo_tx_byte:
 10188                          	FNSIZE	_oo_tx_byte,0,1
 10189                          ; =============== function _oo_tx_byte ends ============
 10190                          
 10191                          	signat	_oo_tx_byte,4216
 10192                          	global	_LTRX_PutChar
 10193                          	global	___awdiv
 10194                          	global	??___awdiv
 10195                          	global	?___awdiv
 10196                          	psect	text
 10197                          
 10198                          ; *************** function ___awdiv *****************
 10199                          ; Defined at:
 10200                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awdiv.c"
 10201                          ; Parameters:
 10202                          ;		dividend    	offs:   0	type: int 
 10203                          ;		divisor     	offs:   2	type: int 
 10204                          ; Auto variables:
 10205                          ;		quotient    	       	type: int 
 10206                          ;		sign        	       	type: unsigned char 
 10207                          ;		counter     	       	type: unsigned char 
 10208                          ; Return value:
 10209                          ;		type: int 
 10210                          ;		size: 2
 10211                          ; Registers used:
 10212                          ;		a, CUR_PP
 10213                          ; Tracked objects:
 10214                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10215                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10216                          ;		Unchanged: 
 10217                          ; Data sizes:
 10218                          ;		Autos:    4
 10219                          ;		Params:   4
 10220                          ;		Temp:     2
 10221                          ;		Total:   10
 10222                          ; This function calls:
 10223                          ;		Nothing
 10224                          ; This function is called by:
 10225                          ;		_fround
 10226                          ;		_scale
 10227                          ;		_printf
 10228                          ; This function uses a non-reentrant model
 10229                          ; 
 10230                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awdiv.c"
 10231                          	line	5
 10232  013F                    	__size_of___awdiv	equ	__end_of___awdiv-___awdiv
 10233                          ;awdiv.c: 3: signed int
 10234                          ;awdiv.c: 4: __awdiv(signed int dividend, signed int divisor)
 10235                          ;awdiv.c: 5: {
 10236                          ;			
 10237  6DB8                    ___awdiv:	
 10238                          	opt	disable
 10239                          	line	9
 10240                          ;awdiv.c: 6: signed int quotient;
 10241                          ;awdiv.c: 7: unsigned char counter, sign;
 10242                          ;awdiv.c: 9: sign = 0;
 10243  6DB8  50 00             	mov	a,<((0))
 10244  6DBA  70 CF             	and	f, 0xCF   ;select user reg space
 10245  6DBC  62 D0 00          	mov	reg[CUR_PP],0
 10246  6DBF  53 63             	mov	[0+((___awdiv@sign)^0x0)],a
 10247                          	line	10
 10248                          ;awdiv.c: 10: if(divisor < 0) {
 10249  6DC1  51 60             	mov	a,[1+((___awdiv@divisor)^0x0)]
 10250  6DC3  39 00             	cmp	a,<(0)
 10251  6DC5  51 5F             	mov	a,[0+((___awdiv@divisor)^0x0)]
 10252  6DC7  31 80             	xor	a,80h
 10253  6DC9  19 80             	sbb	a,(>0)^80h
 10254  6DCB  D017              	jnc	l410
 10255                          	line	11
 10256                          ;awdiv.c: 11: divisor = -divisor;
 10257  6DCD  70 CF             	and	f, 0xCF   ;select user reg space
 10258  6DCF  62 D0 00          	mov	reg[CUR_PP],0
 10259  6DD2  51 60             	mov	a,[1+((___awdiv@divisor)^0x0)]
 10260  6DD4  73                	cpl	a
 10261  6DD5  74                	inc	a
 10262  6DD6  53 60             	mov	[1+((___awdiv@divisor)^0x0)],a
 10263  6DD8  51 5F             	mov	a,[0+((___awdiv@divisor)^0x0)]
 10264  6DDA  73                	cpl	a
 10265  6DDB  09 00             	adc	a,0
 10266  6DDD  53 5F             	mov	[0+((___awdiv@divisor)^0x0)],a
 10267                          	line	12
 10268                          ;awdiv.c: 12: sign = 1;
 10269  6DDF  50 01             	mov	a,<((01h))
 10270  6DE1  53 63             	mov	[0+((___awdiv@sign)^0x0)],a
 10271                          	line	13
 10272                          ;			
 10273  6DE3                    l410:	
 10274                          	line	14
 10275                          ;awdiv.c: 13: }
 10276                          ;awdiv.c: 14: if(dividend < 0) {
 10277  6DE3  70 CF             	and	f, 0xCF   ;select user reg space
 10278  6DE5  62 D0 00          	mov	reg[CUR_PP],0
 10279  6DE8  51 5E             	mov	a,[1+((___awdiv@dividend)^0x0)]
 10280  6DEA  39 00             	cmp	a,<(0)
 10281  6DEC  51 5D             	mov	a,[0+((___awdiv@dividend)^0x0)]
 10282  6DEE  31 80             	xor	a,80h
 10283  6DF0  19 80             	sbb	a,(>0)^80h
 10284  6DF2  D019              	jnc	l411
 10285                          	line	15
 10286                          ;awdiv.c: 15: dividend = -dividend;
 10287  6DF4  70 CF             	and	f, 0xCF   ;select user reg space
 10288  6DF6  62 D0 00          	mov	reg[CUR_PP],0
 10289  6DF9  51 5E             	mov	a,[1+((___awdiv@dividend)^0x0)]
 10290  6DFB  73                	cpl	a
 10291  6DFC  74                	inc	a
 10292  6DFD  53 5E             	mov	[1+((___awdiv@dividend)^0x0)],a
 10293  6DFF  51 5D             	mov	a,[0+((___awdiv@dividend)^0x0)]
 10294  6E01  73                	cpl	a
 10295  6E02  09 00             	adc	a,0
 10296  6E04  53 5D             	mov	[0+((___awdiv@dividend)^0x0)],a
 10297                          	line	16
 10298                          ;awdiv.c: 16: sign ^= 1;
 10299  6E06  51 63             	mov	a,[0+((___awdiv@sign)^0x0)]
 10300  6E08  31 01             	xor	a,<((01h))
 10301  6E0A  53 63             	mov	[0+((___awdiv@sign)^0x0)],a
 10302                          	line	17
 10303                          ;			
 10304  6E0C                    l411:	
 10305                          	line	18
 10306                          ;awdiv.c: 17: }
 10307                          ;awdiv.c: 18: quotient = 0;
 10308  6E0C  50 00             	mov	a,<(0)
 10309  6E0E  70 CF             	and	f, 0xCF   ;select user reg space
 10310  6E10  62 D0 00          	mov	reg[CUR_PP],0
 10311  6E13  53 62             	mov	[1+((___awdiv@quotient)^0x0)],a
 10312  6E15  50 00             	mov	a,>(0)
 10313  6E17  53 61             	mov	[0+((___awdiv@quotient)^0x0)],a
 10314                          	line	19
 10315                          ;awdiv.c: 19: if(divisor != 0) {
 10316  6E19  51 5F             	mov	a,[0+((___awdiv@divisor)^0x0)]
 10317  6E1B  39 00             	cmp	a,>(0)
 10318  6E1D  B005              	jnz	u2043
 10319  6E1F  51 60             	mov	a,[1+((___awdiv@divisor)^0x0)]
 10320  6E21  39 00             	cmp	a,<(0)
 10321  6E23                    u2043:
 10322  6E23  A0A7              	jz	l412
 10323                          	line	20
 10324                          ;awdiv.c: 20: counter = 1;
 10325  6E25  50 01             	mov	a,<((01h))
 10326  6E27  70 CF             	and	f, 0xCF   ;select user reg space
 10327  6E29  62 D0 00          	mov	reg[CUR_PP],0
 10328  6E2C  53 64             	mov	[0+((___awdiv@counter)^0x0)],a
 10329                          	line	21
 10330                          ;awdiv.c: 21: while((divisor & 0x8000U) == 0) {
 10331  6E2E  7D 6E4D           	xjmp	l413
 10332                          ;			
 10333  6E31                    l414:	
 10334                          	line	22
 10335                          ;awdiv.c: 22: divisor <<= 1;
 10336  6E31  50 01             	mov	a,<((01h))
 10337  6E33  7D 6E3F           	xjmp	u2053
 10338  6E36                    u2064:
 10339  6E36  70 CF             	and	f, 0xCF   ;select user reg space
 10340  6E38  62 D0 00          	mov	reg[CUR_PP],0
 10341  6E3B  65 60             	asl	[1+((___awdiv@divisor)^0x0)]
 10342  6E3D  6B 5F             	rlc	[0+((___awdiv@divisor)^0x0)]
 10343  6E3F                    u2053:
 10344  6E3F  78                	dec	a
 10345  6E40  DFF5              	jnc	u2064
 10346                          	line	23
 10347                          ;awdiv.c: 23: counter++;
 10348  6E42  70 CF             	and	f, 0xCF   ;select user reg space
 10349  6E44  62 D0 00          	mov	reg[CUR_PP],0
 10350  6E47  51 64             	mov	a,[0+((___awdiv@counter)^0x0)]
 10351  6E49  01 01             	add	a,<((01h))
 10352  6E4B  53 64             	mov	[0+((___awdiv@counter)^0x0)],a
 10353                          	line	24
 10354                          ;			
 10355  6E4D                    l413:	
 10356                          	line	21
 10357  6E4D  70 CF             	and	f, 0xCF   ;select user reg space
 10358  6E4F  62 D0 00          	mov	reg[CUR_PP],0
 10359  6E52  51 60             	mov	a,[1+((___awdiv@divisor)^0x0)]
 10360  6E54  21 00             	and	a,<(08000h)
 10361  6E56  53 66             	mov	[(??___awdiv^0x0)+4+0+1],a
 10362  6E58  51 5F             	mov	a,[0+((___awdiv@divisor)^0x0)]
 10363  6E5A  21 80             	and	a,>(08000h)
 10364  6E5C  53 65             	mov	[(??___awdiv^0x0)+4+0],a
 10365  6E5E  51 65             	mov	a,[(??___awdiv^0x0)+4+0]
 10366  6E60  39 00             	cmp	a,>(0)
 10367  6E62  B005              	jnz	u2073
 10368  6E64  51 66             	mov	a,[(??___awdiv^0x0)+4+1]
 10369  6E66  39 00             	cmp	a,<(0)
 10370  6E68                    u2073:
 10371  6E68  AFC8              	jz	l414
 10372                          ;			
 10373  6E6A                    l415:	
 10374                          	line	25
 10375                          ;awdiv.c: 24: }
 10376                          ;awdiv.c: 25: do {
 10377                          ;			
 10378  6E6A                    l418:	
 10379                          	line	26
 10380                          ;awdiv.c: 26: quotient <<= 1;
 10381  6E6A  50 01             	mov	a,<((01h))
 10382  6E6C  7D 6E78           	xjmp	u2083
 10383  6E6F                    u2094:
 10384  6E6F  70 CF             	and	f, 0xCF   ;select user reg space
 10385  6E71  62 D0 00          	mov	reg[CUR_PP],0
 10386  6E74  65 62             	asl	[1+((___awdiv@quotient)^0x0)]
 10387  6E76  6B 61             	rlc	[0+((___awdiv@quotient)^0x0)]
 10388  6E78                    u2083:
 10389  6E78  78                	dec	a
 10390  6E79  DFF5              	jnc	u2094
 10391                          	line	27
 10392                          ;awdiv.c: 27: if((unsigned int)divisor <= (unsigned int)dividend) {
 10393  6E7B  70 CF             	and	f, 0xCF   ;select user reg space
 10394  6E7D  62 D0 00          	mov	reg[CUR_PP],0
 10395  6E80  51 5E             	mov	a,[1+((___awdiv@dividend)^0x0)]
 10396  6E82  3A 60             	cmp	a,[1+((___awdiv@divisor)^0x0)]
 10397  6E84  51 5D             	mov	a,[0+((___awdiv@dividend)^0x0)]
 10398  6E86  1A 5F             	sbb	a,[0+((___awdiv@divisor)^0x0)]
 10399  6E88                    u2103:
 10400  6E88  C01E              	jc	l419
 10401                          	line	28
 10402                          ;awdiv.c: 28: dividend -= divisor;
 10403  6E8A  70 CF             	and	f, 0xCF   ;select user reg space
 10404  6E8C  62 D0 00          	mov	reg[CUR_PP],0
 10405  6E8F  51 5E             	mov	a,[1+((___awdiv@dividend)^0x0)]
 10406  6E91  12 60             	sub	a,[1+((___awdiv@divisor)^0x0)]
 10407  6E93  53 5E             	mov	[1+((___awdiv@dividend)^0x0)],a
 10408  6E95  51 5D             	mov	a,[0+((___awdiv@dividend)^0x0)]
 10409  6E97  1A 5F             	sbb	a,[0+((___awdiv@divisor)^0x0)]
 10410  6E99  53 5D             	mov	[0+((___awdiv@dividend)^0x0)],a
 10411                          	line	29
 10412                          ;awdiv.c: 29: quotient |= 1;
 10413  6E9B  51 62             	mov	a,[1+((___awdiv@quotient)^0x0)]
 10414  6E9D  29 01             	or	a,<(01h)
 10415  6E9F  53 62             	mov	[1+((___awdiv@quotient)^0x0)],a
 10416  6EA1  51 61             	mov	a,[0+((___awdiv@quotient)^0x0)]
 10417  6EA3  29 00             	or	a,>(01h)
 10418  6EA5  53 61             	mov	[0+((___awdiv@quotient)^0x0)],a
 10419                          	line	30
 10420                          ;			
 10421  6EA7                    l419:	
 10422                          	line	31
 10423                          ;awdiv.c: 30: }
 10424                          ;awdiv.c: 31: *(unsigned int *)&divisor >>= 1;
 10425  6EA7  50 01             	mov	a,<((01h))
 10426  6EA9  7D 6EB7           	xjmp	u2113
 10427  6EAC  70 FB             	clrc
 10428  6EAE                    u2124:
 10429  6EAE  70 CF             	and	f, 0xCF   ;select user reg space
 10430  6EB0  62 D0 00          	mov	reg[CUR_PP],0
 10431  6EB3  6E 5F             	rrc	[0+((___awdiv@divisor)^0x0)]
 10432  6EB5  6E 60             	rrc	[1+((___awdiv@divisor)^0x0)]
 10433  6EB7                    u2113:
 10434  6EB7  78                	dec	a
 10435  6EB8  DFF5              	jnc	u2124
 10436                          	line	32
 10437                          ;awdiv.c: 32: } while(--counter != 0);
 10438  6EBA  70 CF             	and	f, 0xCF   ;select user reg space
 10439  6EBC  62 D0 00          	mov	reg[CUR_PP],0
 10440  6EBF  51 64             	mov	a,[0+((___awdiv@counter)^0x0)]
 10441  6EC1  11 01             	sub	a,<((01h))
 10442  6EC3  53 64             	mov	[0+((___awdiv@counter)^0x0)],a
 10443  6EC5  51 64             	mov	a,[0+((___awdiv@counter)^0x0)]
 10444  6EC7  39 00             	cmp	a,(0)
 10445  6EC9  BFA0              	jnz	l418
 10446                          ;			
 10447  6ECB                    l417:	
 10448                          	line	33
 10449                          ;			
 10450  6ECB                    l412:	
 10451                          	line	34
 10452                          ;awdiv.c: 33: }
 10453                          ;awdiv.c: 34: if(sign)
 10454  6ECB  70 CF             	and	f, 0xCF   ;select user reg space
 10455  6ECD  62 D0 00          	mov	reg[CUR_PP],0
 10456  6ED0  51 63             	mov	a,[0+((___awdiv@sign)^0x0)]
 10457  6ED2  39 00             	cmp	a,(0)
 10458  6ED4  A013              	jz	l420
 10459                          	line	35
 10460                          ;awdiv.c: 35: quotient = -quotient;
 10461  6ED6  70 CF             	and	f, 0xCF   ;select user reg space
 10462  6ED8  62 D0 00          	mov	reg[CUR_PP],0
 10463  6EDB  51 62             	mov	a,[1+((___awdiv@quotient)^0x0)]
 10464  6EDD  73                	cpl	a
 10465  6EDE  74                	inc	a
 10466  6EDF  53 62             	mov	[1+((___awdiv@quotient)^0x0)],a
 10467  6EE1  51 61             	mov	a,[0+((___awdiv@quotient)^0x0)]
 10468  6EE3  73                	cpl	a
 10469  6EE4  09 00             	adc	a,0
 10470  6EE6  53 61             	mov	[0+((___awdiv@quotient)^0x0)],a
 10471                          ;			
 10472  6EE8                    l420:	
 10473                          	line	36
 10474                          ;awdiv.c: 36: return quotient;
 10475  6EE8  70 CF             	and	f, 0xCF   ;select user reg space
 10476  6EEA  62 D0 00          	mov	reg[CUR_PP],0
 10477  6EED  51 62             	mov	a,[1+((___awdiv@quotient)^0x0)]
 10478  6EEF  58 61             	mov	x,[0+((___awdiv@quotient)^0x0)]
 10479  6EF1  7D 6EF4           	xjmp	l409
 10480                          	line	37
 10481                          ;awdiv.c: 37: }
 10482  6EF4                    l409:
 10483                          ;			
 10484  6EF4  70 CF             	and	f, 0xCF   ;select user reg space
 10485                          	
 10486  6EF6  7F                	ret
 10487                          GLOBAL __end_of___awdiv
 10488  6EF7                    	__end_of___awdiv:
 10489                          	FNSIZE	___awdiv,6,4
 10490                          ; =============== function ___awdiv ends ============
 10491                          
 10492                          	signat	___awdiv,8314
 10493                          	global	___awmod
 10494                          	global	??___awmod
 10495                          	global	?___awmod
 10496                          	psect	text
 10497                          
 10498                          ; *************** function ___awmod *****************
 10499                          ; Defined at:
 10500                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awmod.c"
 10501                          ; Parameters:
 10502                          ;		dividend    	offs:   0	type: int 
 10503                          ;		divisor     	offs:   2	type: int 
 10504                          ; Auto variables:
 10505                          ;		counter     	       	type: unsigned char 
 10506                          ;		sign        	       	type: unsigned char 
 10507                          ; Return value:
 10508                          ;		type: int 
 10509                          ;		size: 2
 10510                          ; Registers used:
 10511                          ;		a, CUR_PP
 10512                          ; Tracked objects:
 10513                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10514                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10515                          ;		Unchanged: 
 10516                          ; Data sizes:
 10517                          ;		Autos:    2
 10518                          ;		Params:   4
 10519                          ;		Temp:     2
 10520                          ;		Total:    8
 10521                          ; This function calls:
 10522                          ;		Nothing
 10523                          ; This function is called by:
 10524                          ;		_fround
 10525                          ;		_scale
 10526                          ; This function uses a non-reentrant model
 10527                          ; 
 10528                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awmod.c"
 10529                          	line	5
 10530  0114                    	__size_of___awmod	equ	__end_of___awmod-___awmod
 10531                          ;awmod.c: 3: signed int
 10532                          ;awmod.c: 4: __awmod(signed int dividend, signed int divisor)
 10533                          ;awmod.c: 5: {
 10534                          ;			
 10535  6EF7                    ___awmod:	
 10536                          	opt	disable
 10537                          	line	8
 10538                          ;awmod.c: 6: unsigned char counter, sign;
 10539                          ;awmod.c: 8: sign = 0;
 10540  6EF7  50 00             	mov	a,<((0))
 10541  6EF9  70 CF             	and	f, 0xCF   ;select user reg space
 10542  6EFB  62 D0 00          	mov	reg[CUR_PP],0
 10543  6EFE  53 61             	mov	[0+((___awmod@sign)^0x0)],a
 10544                          	line	9
 10545                          ;awmod.c: 9: if(dividend < 0) {
 10546  6F00  51 5E             	mov	a,[1+((___awmod@dividend)^0x0)]
 10547  6F02  39 00             	cmp	a,<(0)
 10548  6F04  51 5D             	mov	a,[0+((___awmod@dividend)^0x0)]
 10549  6F06  31 80             	xor	a,80h
 10550  6F08  19 80             	sbb	a,(>0)^80h
 10551  6F0A  D017              	jnc	l490
 10552                          	line	10
 10553                          ;awmod.c: 10: dividend = -dividend;
 10554  6F0C  70 CF             	and	f, 0xCF   ;select user reg space
 10555  6F0E  62 D0 00          	mov	reg[CUR_PP],0
 10556  6F11  51 5E             	mov	a,[1+((___awmod@dividend)^0x0)]
 10557  6F13  73                	cpl	a
 10558  6F14  74                	inc	a
 10559  6F15  53 5E             	mov	[1+((___awmod@dividend)^0x0)],a
 10560  6F17  51 5D             	mov	a,[0+((___awmod@dividend)^0x0)]
 10561  6F19  73                	cpl	a
 10562  6F1A  09 00             	adc	a,0
 10563  6F1C  53 5D             	mov	[0+((___awmod@dividend)^0x0)],a
 10564                          	line	11
 10565                          ;awmod.c: 11: sign = 1;
 10566  6F1E  50 01             	mov	a,<((01h))
 10567  6F20  53 61             	mov	[0+((___awmod@sign)^0x0)],a
 10568                          	line	12
 10569                          ;			
 10570  6F22                    l490:	
 10571                          	line	13
 10572                          ;awmod.c: 12: }
 10573                          ;awmod.c: 13: if(divisor < 0)
 10574  6F22  70 CF             	and	f, 0xCF   ;select user reg space
 10575  6F24  62 D0 00          	mov	reg[CUR_PP],0
 10576  6F27  51 60             	mov	a,[1+((___awmod@divisor)^0x0)]
 10577  6F29  39 00             	cmp	a,<(0)
 10578  6F2B  51 5F             	mov	a,[0+((___awmod@divisor)^0x0)]
 10579  6F2D  31 80             	xor	a,80h
 10580  6F2F  19 80             	sbb	a,(>0)^80h
 10581  6F31  D013              	jnc	l491
 10582                          	line	14
 10583                          ;awmod.c: 14: divisor = -divisor;
 10584  6F33  70 CF             	and	f, 0xCF   ;select user reg space
 10585  6F35  62 D0 00          	mov	reg[CUR_PP],0
 10586  6F38  51 60             	mov	a,[1+((___awmod@divisor)^0x0)]
 10587  6F3A  73                	cpl	a
 10588  6F3B  74                	inc	a
 10589  6F3C  53 60             	mov	[1+((___awmod@divisor)^0x0)],a
 10590  6F3E  51 5F             	mov	a,[0+((___awmod@divisor)^0x0)]
 10591  6F40  73                	cpl	a
 10592  6F41  09 00             	adc	a,0
 10593  6F43  53 5F             	mov	[0+((___awmod@divisor)^0x0)],a
 10594                          ;			
 10595  6F45                    l491:	
 10596                          	line	15
 10597                          ;awmod.c: 15: if(divisor != 0) {
 10598  6F45  70 CF             	and	f, 0xCF   ;select user reg space
 10599  6F47  62 D0 00          	mov	reg[CUR_PP],0
 10600  6F4A  51 5F             	mov	a,[0+((___awmod@divisor)^0x0)]
 10601  6F4C  39 00             	cmp	a,>(0)
 10602  6F4E  B005              	jnz	u2333
 10603  6F50  51 60             	mov	a,[1+((___awmod@divisor)^0x0)]
 10604  6F52  39 00             	cmp	a,<(0)
 10605  6F54                    u2333:
 10606  6F54  A08A              	jz	l492
 10607                          	line	16
 10608                          ;awmod.c: 16: counter = 1;
 10609  6F56  50 01             	mov	a,<((01h))
 10610  6F58  70 CF             	and	f, 0xCF   ;select user reg space
 10611  6F5A  62 D0 00          	mov	reg[CUR_PP],0
 10612  6F5D  53 62             	mov	[0+((___awmod@counter)^0x0)],a
 10613                          	line	17
 10614                          ;awmod.c: 17: while(((unsigned int)divisor & 0x8000U) == 0) {
 10615  6F5F  7D 6F7E           	xjmp	l493
 10616                          ;			
 10617  6F62                    l494:	
 10618                          	line	18
 10619                          ;awmod.c: 18: divisor <<= 1;
 10620  6F62  50 01             	mov	a,<((01h))
 10621  6F64  7D 6F70           	xjmp	u2343
 10622  6F67                    u2354:
 10623  6F67  70 CF             	and	f, 0xCF   ;select user reg space
 10624  6F69  62 D0 00          	mov	reg[CUR_PP],0
 10625  6F6C  65 60             	asl	[1+((___awmod@divisor)^0x0)]
 10626  6F6E  6B 5F             	rlc	[0+((___awmod@divisor)^0x0)]
 10627  6F70                    u2343:
 10628  6F70  78                	dec	a
 10629  6F71  DFF5              	jnc	u2354
 10630                          	line	19
 10631                          ;awmod.c: 19: counter++;
 10632  6F73  70 CF             	and	f, 0xCF   ;select user reg space
 10633  6F75  62 D0 00          	mov	reg[CUR_PP],0
 10634  6F78  51 62             	mov	a,[0+((___awmod@counter)^0x0)]
 10635  6F7A  01 01             	add	a,<((01h))
 10636  6F7C  53 62             	mov	[0+((___awmod@counter)^0x0)],a
 10637                          	line	20
 10638                          ;			
 10639  6F7E                    l493:	
 10640                          	line	17
 10641  6F7E  70 CF             	and	f, 0xCF   ;select user reg space
 10642  6F80  62 D0 00          	mov	reg[CUR_PP],0
 10643  6F83  51 60             	mov	a,[1+((___awmod@divisor)^0x0)]
 10644  6F85  21 00             	and	a,<(08000h)
 10645  6F87  53 64             	mov	[(??___awmod^0x0)+2+0+1],a
 10646  6F89  51 5F             	mov	a,[0+((___awmod@divisor)^0x0)]
 10647  6F8B  21 80             	and	a,>(08000h)
 10648  6F8D  53 63             	mov	[(??___awmod^0x0)+2+0],a
 10649  6F8F  51 63             	mov	a,[(??___awmod^0x0)+2+0]
 10650  6F91  39 00             	cmp	a,>(0)
 10651  6F93  B005              	jnz	u2363
 10652  6F95  51 64             	mov	a,[(??___awmod^0x0)+2+1]
 10653  6F97  39 00             	cmp	a,<(0)
 10654  6F99                    u2363:
 10655  6F99  AFC8              	jz	l494
 10656                          ;			
 10657  6F9B                    l495:	
 10658                          	line	21
 10659                          ;awmod.c: 20: }
 10660                          ;awmod.c: 21: do {
 10661                          ;			
 10662  6F9B                    l498:	
 10663                          	line	22
 10664                          ;awmod.c: 22: if((unsigned int)divisor <= (unsigned int)dividend)
 10665  6F9B  70 CF             	and	f, 0xCF   ;select user reg space
 10666  6F9D  62 D0 00          	mov	reg[CUR_PP],0
 10667  6FA0  51 5E             	mov	a,[1+((___awmod@dividend)^0x0)]
 10668  6FA2  3A 60             	cmp	a,[1+((___awmod@divisor)^0x0)]
 10669  6FA4  51 5D             	mov	a,[0+((___awmod@dividend)^0x0)]
 10670  6FA6  1A 5F             	sbb	a,[0+((___awmod@divisor)^0x0)]
 10671  6FA8                    u2373:
 10672  6FA8  C012              	jc	l499
 10673                          	line	23
 10674                          ;awmod.c: 23: dividend -= divisor;
 10675  6FAA  70 CF             	and	f, 0xCF   ;select user reg space
 10676  6FAC  62 D0 00          	mov	reg[CUR_PP],0
 10677  6FAF  51 5E             	mov	a,[1+((___awmod@dividend)^0x0)]
 10678  6FB1  12 60             	sub	a,[1+((___awmod@divisor)^0x0)]
 10679  6FB3  53 5E             	mov	[1+((___awmod@dividend)^0x0)],a
 10680  6FB5  51 5D             	mov	a,[0+((___awmod@dividend)^0x0)]
 10681  6FB7  1A 5F             	sbb	a,[0+((___awmod@divisor)^0x0)]
 10682  6FB9  53 5D             	mov	[0+((___awmod@dividend)^0x0)],a
 10683                          ;			
 10684  6FBB                    l499:	
 10685                          	line	24
 10686                          ;awmod.c: 24: *(unsigned int *)&divisor >>= 1;
 10687  6FBB  50 01             	mov	a,<((01h))
 10688  6FBD  7D 6FCB           	xjmp	u2383
 10689  6FC0  70 FB             	clrc
 10690  6FC2                    u2394:
 10691  6FC2  70 CF             	and	f, 0xCF   ;select user reg space
 10692  6FC4  62 D0 00          	mov	reg[CUR_PP],0
 10693  6FC7  6E 5F             	rrc	[0+((___awmod@divisor)^0x0)]
 10694  6FC9  6E 60             	rrc	[1+((___awmod@divisor)^0x0)]
 10695  6FCB                    u2383:
 10696  6FCB  78                	dec	a
 10697  6FCC  DFF5              	jnc	u2394
 10698                          	line	25
 10699                          ;awmod.c: 25: } while(--counter != 0);
 10700  6FCE  70 CF             	and	f, 0xCF   ;select user reg space
 10701  6FD0  62 D0 00          	mov	reg[CUR_PP],0
 10702  6FD3  51 62             	mov	a,[0+((___awmod@counter)^0x0)]
 10703  6FD5  11 01             	sub	a,<((01h))
 10704  6FD7  53 62             	mov	[0+((___awmod@counter)^0x0)],a
 10705  6FD9  51 62             	mov	a,[0+((___awmod@counter)^0x0)]
 10706  6FDB  39 00             	cmp	a,(0)
 10707  6FDD  BFBD              	jnz	l498
 10708                          ;			
 10709  6FDF                    l497:	
 10710                          	line	26
 10711                          ;			
 10712  6FDF                    l492:	
 10713                          	line	27
 10714                          ;awmod.c: 26: }
 10715                          ;awmod.c: 27: if(sign)
 10716  6FDF  70 CF             	and	f, 0xCF   ;select user reg space
 10717  6FE1  62 D0 00          	mov	reg[CUR_PP],0
 10718  6FE4  51 61             	mov	a,[0+((___awmod@sign)^0x0)]
 10719  6FE6  39 00             	cmp	a,(0)
 10720  6FE8  A013              	jz	l500
 10721                          	line	28
 10722                          ;awmod.c: 28: dividend = -dividend;
 10723  6FEA  70 CF             	and	f, 0xCF   ;select user reg space
 10724  6FEC  62 D0 00          	mov	reg[CUR_PP],0
 10725  6FEF  51 5E             	mov	a,[1+((___awmod@dividend)^0x0)]
 10726  6FF1  73                	cpl	a
 10727  6FF2  74                	inc	a
 10728  6FF3  53 5E             	mov	[1+((___awmod@dividend)^0x0)],a
 10729  6FF5  51 5D             	mov	a,[0+((___awmod@dividend)^0x0)]
 10730  6FF7  73                	cpl	a
 10731  6FF8  09 00             	adc	a,0
 10732  6FFA  53 5D             	mov	[0+((___awmod@dividend)^0x0)],a
 10733                          ;			
 10734  6FFC                    l500:	
 10735                          	line	29
 10736                          ;awmod.c: 29: return dividend;
 10737  6FFC  70 CF             	and	f, 0xCF   ;select user reg space
 10738  6FFE  62 D0 00          	mov	reg[CUR_PP],0
 10739  7001  51 5E             	mov	a,[1+((___awmod@dividend)^0x0)]
 10740  7003  58 5D             	mov	x,[0+((___awmod@dividend)^0x0)]
 10741  7005  7D 7008           	xjmp	l489
 10742                          	line	30
 10743                          ;awmod.c: 30: }
 10744  7008                    l489:
 10745                          ;			
 10746  7008  70 CF             	and	f, 0xCF   ;select user reg space
 10747                          	
 10748  700A  7F                	ret
 10749                          GLOBAL __end_of___awmod
 10750  700B                    	__end_of___awmod:
 10751                          	FNSIZE	___awmod,4,4
 10752                          ; =============== function ___awmod ends ============
 10753                          
 10754                          	signat	___awmod,8314
 10755                          	global	_oo_crc_init
 10756                          	global	??_oo_crc_init
 10757                          	global	?_oo_crc_init
 10758                          	psect	text
 10759                          
 10760                          ; *************** function _oo_crc_init *****************
 10761                          ; Defined at:
 10762                          ;		line 212 in file "./oo.c"
 10763                          ; Parameters:
 10764                          ;		None
 10765                          ; Auto variables:
 10766                          ;		None
 10767                          ; Return value:
 10768                          ;		type: void 
 10769                          ;		size: 0
 10770                          ; Registers used:
 10771                          ;		a, CUR_PP
 10772                          ; Tracked objects:
 10773                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10774                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10775                          ;		Unchanged: 
 10776                          ; Data sizes:
 10777                          ;		Autos:    0
 10778                          ;		Params:   0
 10779                          ;		Temp:     0
 10780                          ;		Total:    0
 10781                          ; This function calls:
 10782                          ;		Nothing
 10783                          ; This function is called by:
 10784                          ;		_oo_read_scratchpad
 10785                          ; This function uses a non-reentrant model
 10786                          ; 
 10787                          	file	"./oo.c"
 10788                          	line	212
 10789  000E                    	__size_of_oo_crc_init	equ	__end_of_oo_crc_init-_oo_crc_init
 10790                          ;oo.c: 212: void oo_crc_init(){
 10791                          ;			
 10792  700B                    _oo_crc_init:	
 10793                          	opt	disable
 10794                          	line	213
 10795                          ;oo.c: 213: crc = 0;
 10796  700B  50 00             	mov	a,<((0))
 10797  700D  70 CF             	and	f, 0xCF   ;select user reg space
 10798  700F  71 80             	or	f, 0x80	;select multiple RAM page mode
 10799  7011  62 D0 02          	mov	reg[CUR_PP],2
 10800  7014  53 14             	mov	[0+((_crc)^0x200)],a
 10801                          	line	214
 10802                          ;oo.c: 214: }
 10803  7016                    l39:
 10804                          ;			
 10805  7016  70 CF             	and	f, 0xCF   ;select user reg space
 10806                          	
 10807  7018  7F                	ret
 10808                          GLOBAL __end_of_oo_crc_init
 10809  7019                    	__end_of_oo_crc_init:
 10810                          	FNSIZE	_oo_crc_init,0,0
 10811                          ; =============== function _oo_crc_init ends ============
 10812                          
 10813                          	signat	_oo_crc_init,88
 10814                          	global	_oo_rx_byte
 10815                          	global	??_oo_rx_byte
 10816                          	global	?_oo_rx_byte
 10817                          	psect	text
 10818                          
 10819                          ; *************** function _oo_rx_byte *****************
 10820                          ; Defined at:
 10821                          ;		line 72 in file "./oo.c"
 10822                          ; Parameters:
 10823                          ;		None
 10824                          ; Auto variables:
 10825                          ;		data        	       	type: unsigned char 
 10826                          ; Return value:
 10827                          ;		type: unsigned char 
 10828                          ;		size: 1
 10829                          ; Registers used:
 10830                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
 10831                          ; Tracked objects:
 10832                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10833                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10834                          ;		Unchanged: 
 10835                          ; Data sizes:
 10836                          ;		Autos:    1
 10837                          ;		Params:   0
 10838                          ;		Temp:     0
 10839                          ;		Total:    1
 10840                          ; This function calls:
 10841                          ;		_OneWire_bReadByte
 10842                          ;		_oo_crc_shuffle_byte
 10843                          ; This function is called by:
 10844                          ;		_oo_read_scratchpad
 10845                          ;		_oo_conversion_busy
 10846                          ; This function uses a non-reentrant model
 10847                          ; 
 10848                          	file	"./oo.c"
 10849                          	line	72
 10850  0034                    	__size_of_oo_rx_byte	equ	__end_of_oo_rx_byte-_oo_rx_byte
 10851                          ;oo.c: 72: char oo_rx_byte(){
 10852                          ;			
 10853  7019                    _oo_rx_byte:	
 10854                          	opt	disable
 10855                          	line	74
 10856                          ;oo.c: 74: char data = 0;
 10857  7019  50 00             	mov	a,<((0))
 10858  701B  70 CF             	and	f, 0xCF   ;select user reg space
 10859  701D  62 D0 00          	mov	reg[CUR_PP],0
 10860  7020  53 33             	mov	[0+((oo_rx_byte@data)^0x0)],a
 10861                          	line	76
 10862                          ;oo.c: 76: data = OneWire_bReadByte();
 10863  7022  71 80             	or	f, 0x80	;select multiple RAM page mode
 10864  7024  70 CF             	and	f, 0xCF   ;select user reg space
 10865                          	
 10866  7026  7C 3E3C           	xcall	_OneWire_bReadByte
 10867                          	
 10868  7029  38 00             	add	sp,0
 10869  702B  70 CF             	and	f, 0xCF   ;select user reg space
 10870  702D  62 D0 00          	mov	reg[CUR_PP],0
 10871  7030  53 33             	mov	[0+((oo_rx_byte@data)^0x0)],a
 10872                          	line	79
 10873                          ;oo.c: 79: oo_crc_shuffle_byte(data);
 10874  7032  70 CF             	and	f, 0xCF   ;select user reg space
 10875  7034  62 D0 00          	mov	reg[CUR_PP],0
 10876  7037  51 33             	mov	a,[0+((oo_rx_byte@data)^0x0)]
 10877  7039  53 34             	mov	[0+((?_oo_crc_shuffle_byte)^0x0)],a
 10878  703B  71 80             	or	f, 0x80	;select multiple RAM page mode
 10879                          	
 10880  703D  7C 70D1           	xcall	_oo_crc_shuffle_byte
 10881                          	
 10882                          	line	81
 10883                          ;oo.c: 81: return data;
 10884  7040  70 CF             	and	f, 0xCF   ;select user reg space
 10885  7042  62 D0 00          	mov	reg[CUR_PP],0
 10886  7045  51 33             	mov	a,[0+((oo_rx_byte@data)^0x0)]
 10887  7047  7D 704A           	xjmp	l19
 10888                          	line	82
 10889                          ;oo.c: 82: }
 10890  704A                    l19:
 10891                          ;			
 10892  704A  70 CF             	and	f, 0xCF   ;select user reg space
 10893                          	
 10894  704C  7F                	ret
 10895                          GLOBAL __end_of_oo_rx_byte
 10896  704D                    	__end_of_oo_rx_byte:
 10897                          	FNSIZE	_oo_rx_byte,1,0
 10898                          ; =============== function _oo_rx_byte ends ============
 10899                          
 10900                          	signat	_oo_rx_byte,89
 10901                          	global	_frexp
 10902                          	global	??_frexp
 10903                          	global	?_frexp
 10904                          	psect	text
 10905                          
 10906                          ; *************** function _frexp *****************
 10907                          ; Defined at:
 10908                          ;		line 255 in file "../common/frexp.c"
 10909                          ; Parameters:
 10910                          ;		value       	offs:   0	type: unsigned char 
 10911                          ;		eptr        	offs:   4	type: PTR int ; Largest target is 2
 10912                          ;		 -> log@exp(2), 
 10913                          ; Auto variables:
 10914                          ;		None
 10915                          ; Return value:
 10916                          ;		type: PTR int 
 10917                          ;		size: 4
 10918                          ; Registers used:
 10919                          ;		a, x, CUR_PP
 10920                          ; Tracked objects:
 10921                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10922                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 10923                          ;		Unchanged: 
 10924                          ; Data sizes:
 10925                          ;		Autos:    0
 10926                          ;		Params:   6
 10927                          ;		Temp:     3
 10928                          ;		Total:    9
 10929                          ; This function calls:
 10930                          ;		Nothing
 10931                          ; This function is called by:
 10932                          ;		_log
 10933                          ; This function uses a non-reentrant model
 10934                          ; 
 10935                          	file	"../common/frexp.c"
 10936                          	line	255
 10937  0084                    	__size_of_frexp	equ	__end_of_frexp-_frexp
 10938                          ;frexp.c: 116: typedef union both
 10939                          ;frexp.c: 117: {
 10940                          ;frexp.c: 118: struct flt
 10941                          ;frexp.c: 119: {
 10942                          ;frexp.c: 120: unsigned sign:1;
 10943                          ;frexp.c: 121: unsigned exp:8;
 10944                          ;frexp.c: 122: unsigned hmant:7;
 10945                          ;frexp.c: 123: unsigned char mant[2];
 10946                          ;frexp.c: 124: } flt;
 10947                          ;frexp.c: 125: double fl;
 10948                          ;frexp.c: 126: } both_t;
 10949                          ;frexp.c: 253: double
 10950                          ;frexp.c: 254: frexp(double value, int * eptr)
 10951                          ;frexp.c: 255: {
 10952                          ;			
 10953  704D                    _frexp:	
 10954                          	opt	disable
 10955                          	line	256
 10956                          ;frexp.c: 256: if (value == 0.0) {
 10957  704D  70 CF             	and	f, 0xCF   ;select user reg space
 10958  704F  62 D0 00          	mov	reg[CUR_PP],0
 10959  7052  51 3F             	mov	a,[0+((frexp@value)^0x0)]
 10960  7054  39 00             	cmp	a,<(0x0>>24)
 10961  7056  B011              	jnz	u1573
 10962  7058  51 40             	mov	a,[1+((frexp@value)^0x0)]
 10963  705A  39 00             	cmp	a,<(0x0>>16)
 10964  705C  B00B              	jnz	u1573
 10965  705E  51 41             	mov	a,[2+((frexp@value)^0x0)]
 10966  7060  39 00             	cmp	a,<(0x0>>8)
 10967  7062  B005              	jnz	u1573
 10968  7064  51 42             	mov	a,[3+((frexp@value)^0x0)]
 10969  7066  39 00             	cmp	a,<(0x0)
 10970  7068                    u1573:
 10971  7068  B02C              	jnz	l200
 10972                          	line	257
 10973                          ;frexp.c: 257: *eptr = 0;
 10974  706A  70 CF             	and	f, 0xCF   ;select user reg space
 10975  706C  62 D0 00          	mov	reg[CUR_PP],0
 10976  706F  51 43             	mov	a,[0+((frexp@eptr)^0x0)]
 10977  7071  58 44             	mov	x,[1+((frexp@eptr)^0x0)]
 10978  7073  60 D3             	mov	reg[0xd3],a
 10979  7075  50 00             	mov	a,<(0)
 10980  7077  54 01             	mov	[1+x],a
 10981  7079  50 00             	mov	a,>(0)
 10982  707B  54 00             	mov	[0+x],a
 10983                          	line	258
 10984  707D  50 00             	mov	a,<(0x0>>24)
 10985  707F  70 CF             	and	f, 0xCF   ;select user reg space
 10986  7081  62 D0 00          	mov	reg[CUR_PP],0
 10987  7084  53 3F             	mov	[0+((?_frexp)^0x0)],a
 10988  7086  50 00             	mov	a,<(0x0>>16)
 10989  7088  53 40             	mov	[1+((?_frexp)^0x0)],a
 10990  708A  50 00             	mov	a,<(0x0>>8)
 10991  708C  53 41             	mov	[2+((?_frexp)^0x0)],a
 10992  708E  50 00             	mov	a,<(0x0)
 10993  7090  53 42             	mov	[3+((?_frexp)^0x0)],a
 10994  7092  7D 70CE           	xjmp	l199
 10995                          	line	259
 10996                          ;			
 10997  7095                    l200:	
 10998                          	line	265
 10999                          ;frexp.c: 259: }
 11000                          ;frexp.c: 265: *eptr = ((both_t *)&value)->flt.exp - 126;
 11001  7095  70 CF             	and	f, 0xCF   ;select user reg space
 11002  7097  62 D0 00          	mov	reg[CUR_PP],0
 11003  709A  51 40             	mov	a,[1+((frexp@value)^0x0)]
 11004  709C  6A                	rlc	a
 11005  709D  51 3F             	mov	a,[0+((frexp@value)^0x0)]
 11006  709F  6A                	rlc	a
 11007  70A0  21 FF             	and	a,((1<<8)-1)
 11008  70A2  53 45             	mov	[(??_frexp^0x0)+0+0],a
 11009  70A4  08                	push	a
 11010  70A5  51 43             	mov	a,[0+((frexp@eptr)^0x0)]
 11011  70A7  08                	push	a
 11012  70A8  58 44             	mov	x,[1+((frexp@eptr)^0x0)]
 11013  70AA  18                	pop	a
 11014  70AB  60 D3             	mov	reg[0xd3],a
 11015  70AD  18                	pop	a
 11016  70AE  51 45             	mov	a,[(??_frexp^0x0)+0+0]
 11017  70B0  01 82             	add	a,<(-126)
 11018  70B2  54 01             	mov	[1+x],a
 11019  70B4  50 00             	mov	a,0
 11020  70B6  09 FF             	adc	a,>(-126)
 11021  70B8  54 00             	mov	[0+x],a
 11022                          	line	271
 11023                          ;frexp.c: 271: ((both_t *)&value)->flt.exp = 126;
 11024  70BA  70 CF             	and	f, 0xCF   ;select user reg space
 11025  70BC  62 D0 00          	mov	reg[CUR_PP],0
 11026  70BF  26 3F  80         	and	[0+((frexp@value)^0x0)],>(not (((1<<8)-1)<<7))
 11027  70C2  2E 3F  3F         	or	[0+((frexp@value)^0x0)],>((07Eh & ((1<<8)-1))<<7)
 11028  70C5  26 40  7F         	and	[1+((frexp@value)^0x0)],<(not (((1<<8)-1)<<7))
 11029  70C8  2E 40  00         	or	[1+((frexp@value)^0x0)],<((07Eh & ((1<<8)-1))<<7)
 11030                          	line	273
 11031  70CB  7D 70CE           	xjmp	l199
 11032                          	line	274
 11033                          ;frexp.c: 274: }
 11034  70CE                    l199:
 11035                          ;			
 11036  70CE  70 CF             	and	f, 0xCF   ;select user reg space
 11037                          	
 11038  70D0  7F                	ret
 11039                          GLOBAL __end_of_frexp
 11040  70D1                    	__end_of_frexp:
 11041                          	FNSIZE	_frexp,3,6
 11042                          ; =============== function _frexp ends ============
 11043                          
 11044                          	signat	_frexp,8316
 11045                          	global	_oo_crc_shuffle_byte
 11046                          	global	??_oo_crc_shuffle_byte
 11047                          	global	?_oo_crc_shuffle_byte
 11048                          	psect	text
 11049                          
 11050                          ; *************** function _oo_crc_shuffle_byte *****************
 11051                          ; Defined at:
 11052                          ;		line 221 in file "./oo.c"
 11053                          ; Parameters:
 11054                          ;		input       	offs:   0	type: unsigned char 
 11055                          ; Auto variables:
 11056                          ;		None
 11057                          ; Return value:
 11058                          ;		type: void 
 11059                          ;		size: 0
 11060                          ; Registers used:
 11061                          ;		a, x, CUR_PP
 11062                          ; Tracked objects:
 11063                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11064                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11065                          ;		Unchanged: 
 11066                          ; Data sizes:
 11067                          ;		Autos:    0
 11068                          ;		Params:   1
 11069                          ;		Temp:     1
 11070                          ;		Total:    2
 11071                          ; This function calls:
 11072                          ;		Nothing
 11073                          ; This function is called by:
 11074                          ;		_oo_rx_byte
 11075                          ; This function uses a non-reentrant model
 11076                          ; 
 11077                          	file	"./oo.c"
 11078                          	line	221
 11079  0023                    	__size_of_oo_crc_shuffle_byte	equ	__end_of_oo_crc_shuffle_byte-_oo_crc_shuffle_byte
 11080                          ;oo.c: 221: void oo_crc_shuffle_byte(char input){
 11081                          ;			
 11082  70D1                    _oo_crc_shuffle_byte:	
 11083                          	opt	disable
 11084                          	line	222
 11085                          ;oo.c: 222: crc = crc_rom[crc ^ input];
 11086  70D1  70 CF             	and	f, 0xCF   ;select user reg space
 11087  70D3  71 80             	or	f, 0x80	;select multiple RAM page mode
 11088  70D5  62 D0 02          	mov	reg[CUR_PP],2
 11089  70D8  51 14             	mov	a,[0+((_crc)^0x200)]
 11090  70DA  62 D0 00          	mov	reg[CUR_PP],0
 11091  70DD  32 34             	xor	a,[0+((oo_crc_shuffle_byte@input)^0x0)]
 11092  70DF  53 35             	mov	[(??_oo_crc_shuffle_byte^0x0)+0+0],a
 11093  70E1  51 35             	mov	a,[(??_oo_crc_shuffle_byte^0x0)+0+0]
 11094  70E3  01 00             	add	a,<(8000h+_crc_rom)
 11095  70E5  5C                	mov	x,a
 11096  70E6  50 81             	mov	a,>(8000h+_crc_rom)
 11097  70E8  60 D3             	mov	reg[0xd3],a
 11098  70EA  52 00             	mov	a,[x+0]
 11099  70EC  62 D0 02          	mov	reg[CUR_PP],2
 11100  70EF  53 14             	mov	[0+((_crc)^0x200)],a
 11101                          	line	223
 11102                          ;oo.c: 223: }
 11103  70F1                    l40:
 11104                          ;			
 11105  70F1  70 CF             	and	f, 0xCF   ;select user reg space
 11106                          	
 11107  70F3  7F                	ret
 11108                          GLOBAL __end_of_oo_crc_shuffle_byte
 11109  70F4                    	__end_of_oo_crc_shuffle_byte:
 11110                          	FNSIZE	_oo_crc_shuffle_byte,1,1
 11111                          ; =============== function _oo_crc_shuffle_byte ends ============
 11112                          
 11113                          	signat	_oo_crc_shuffle_byte,4216
 11114                          	global	___flge
 11115                          	global	??___flge
 11116                          	global	?___flge
 11117                          	psect	text
 11118                          
 11119                          ; *************** function ___flge *****************
 11120                          ; Defined at:
 11121                          ;		line 5 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flge.c"
 11122                          ; Parameters:
 11123                          ;		ff1         	offs:   0	type: void 
 11124                          ;		ff2         	offs:   4	type: void 
 11125                          ; Auto variables:
 11126                          ;		None
 11127                          ; Return value:
 11128                          ;		type: bit 
 11129                          ;		size: 0
 11130                          ; Registers used:
 11131                          ;		a, CUR_PP
 11132                          ; Tracked objects:
 11133                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11134                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11135                          ;		Unchanged: 
 11136                          ; Data sizes:
 11137                          ;		Autos:    0
 11138                          ;		Params:   8
 11139                          ;		Temp:     4
 11140                          ;		Total:   12
 11141                          ; This function calls:
 11142                          ;		Nothing
 11143                          ; This function is called by:
 11144                          ;		_calc_sth11
 11145                          ;		_printf
 11146                          ;		_log
 11147                          ; This function uses a non-reentrant model
 11148                          ; 
 11149                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flge.c"
 11150                          	line	5
 11151  00F8                    	__size_of___flge	equ	__end_of___flge-___flge
 11152                          ;flge.c: 3: bit
 11153                          ;flge.c: 4: __flge(double ff1, double ff2)
 11154                          ;flge.c: 5: {
 11155                          ;			
 11156  70F4                    ___flge:	
 11157                          	opt	disable
 11158                          	line	6
 11159                          ;flge.c: 6: if((*(unsigned long *)&ff1) & 0x80000000UL)
 11160  70F4  70 CF             	and	f, 0xCF   ;select user reg space
 11161  70F6  62 D0 00          	mov	reg[CUR_PP],0
 11162  70F9  51 40             	mov	a,[0+((___flge@ff1)^0x0)]
 11163  70FB  53 48             	mov	[(??___flge^0x0)+0+0],a
 11164  70FD  51 41             	mov	a,[1+((___flge@ff1)^0x0)]
 11165  70FF  53 49             	mov	[(??___flge^0x0)+0+0+1],a
 11166  7101  51 42             	mov	a,[2+((___flge@ff1)^0x0)]
 11167  7103  53 4A             	mov	[(??___flge^0x0)+0+0+2],a
 11168  7105  51 43             	mov	a,[3+((___flge@ff1)^0x0)]
 11169  7107  53 4B             	mov	[(??___flge^0x0)+0+0+3],a
 11170  7109  50 00             	mov	a,<(-2147483648)
 11171  710B  24 4B             	and	[(??___flge^0x0)+0+3],a
 11172  710D  50 00             	mov	a,<(-2147483648>>8)
 11173  710F  24 4A             	and	[(??___flge^0x0)+0+2],a
 11174  7111  50 00             	mov	a,<(-2147483648>>16)
 11175  7113  24 49             	and	[(??___flge^0x0)+0+1],a
 11176  7115  50 80             	mov	a,<(-2147483648>>24)
 11177  7117  24 48             	and	[(??___flge^0x0)+0+0],a
 11178  7119  51 48             	mov	a,[(??___flge^0x0)+0+0]
 11179  711B  39 00             	cmp	a,<(0>>24)
 11180  711D  B011              	jnz	u2023
 11181  711F  51 49             	mov	a,[(??___flge^0x0)+0+1]
 11182  7121  39 00             	cmp	a,<(0>>16)
 11183  7123  B00B              	jnz	u2023
 11184  7125  51 4A             	mov	a,[(??___flge^0x0)+0+2]
 11185  7127  39 00             	cmp	a,<(0>>8)
 11186  7129  B005              	jnz	u2023
 11187  712B  51 4B             	mov	a,[(??___flge^0x0)+0+3]
 11188  712D  39 00             	cmp	a,<(0)
 11189  712F                    u2023:
 11190  712F  A01E              	jz	l381
 11191                          	line	7
 11192                          ;flge.c: 7: (*(unsigned long *)&ff1) = 0x80000000UL - (*(unsigned long *)&ff1);
 11193  7131  50 00             	mov	a,<(-2147483648)
 11194  7133  70 CF             	and	f, 0xCF   ;select user reg space
 11195  7135  62 D0 00          	mov	reg[CUR_PP],0
 11196  7138  12 43             	sub	a,[3+((___flge@ff1)^0x0)]
 11197  713A  53 43             	mov	[3+((___flge@ff1)^0x0)],a
 11198  713C  50 00             	mov	a,<(-2147483648>>8)
 11199  713E  1A 42             	sbb	a,[2+((___flge@ff1)^0x0)]
 11200  7140  53 42             	mov	[2+((___flge@ff1)^0x0)],a
 11201  7142  50 00             	mov	a,<(-2147483648>>16)
 11202  7144  1A 41             	sbb	a,[1+((___flge@ff1)^0x0)]
 11203  7146  53 41             	mov	[1+((___flge@ff1)^0x0)],a
 11204  7148  50 80             	mov	a,<(-2147483648>>24)
 11205  714A  1A 40             	sbb	a,[0+((___flge@ff1)^0x0)]
 11206  714C  53 40             	mov	[0+((___flge@ff1)^0x0)],a
 11207                          ;			
 11208  714E                    l381:	
 11209                          	line	8
 11210                          ;flge.c: 8: if((*(unsigned long *)&ff2) & 0x80000000UL)
 11211  714E  70 CF             	and	f, 0xCF   ;select user reg space
 11212  7150  62 D0 00          	mov	reg[CUR_PP],0
 11213  7153  51 44             	mov	a,[0+((___flge@ff2)^0x0)]
 11214  7155  53 48             	mov	[(??___flge^0x0)+0+0],a
 11215  7157  51 45             	mov	a,[1+((___flge@ff2)^0x0)]
 11216  7159  53 49             	mov	[(??___flge^0x0)+0+0+1],a
 11217  715B  51 46             	mov	a,[2+((___flge@ff2)^0x0)]
 11218  715D  53 4A             	mov	[(??___flge^0x0)+0+0+2],a
 11219  715F  51 47             	mov	a,[3+((___flge@ff2)^0x0)]
 11220  7161  53 4B             	mov	[(??___flge^0x0)+0+0+3],a
 11221  7163  50 00             	mov	a,<(-2147483648)
 11222  7165  24 4B             	and	[(??___flge^0x0)+0+3],a
 11223  7167  50 00             	mov	a,<(-2147483648>>8)
 11224  7169  24 4A             	and	[(??___flge^0x0)+0+2],a
 11225  716B  50 00             	mov	a,<(-2147483648>>16)
 11226  716D  24 49             	and	[(??___flge^0x0)+0+1],a
 11227  716F  50 80             	mov	a,<(-2147483648>>24)
 11228  7171  24 48             	and	[(??___flge^0x0)+0+0],a
 11229  7173  51 48             	mov	a,[(??___flge^0x0)+0+0]
 11230  7175  39 00             	cmp	a,<(0>>24)
 11231  7177  B011              	jnz	u2033
 11232  7179  51 49             	mov	a,[(??___flge^0x0)+0+1]
 11233  717B  39 00             	cmp	a,<(0>>16)
 11234  717D  B00B              	jnz	u2033
 11235  717F  51 4A             	mov	a,[(??___flge^0x0)+0+2]
 11236  7181  39 00             	cmp	a,<(0>>8)
 11237  7183  B005              	jnz	u2033
 11238  7185  51 4B             	mov	a,[(??___flge^0x0)+0+3]
 11239  7187  39 00             	cmp	a,<(0)
 11240  7189                    u2033:
 11241  7189  A01E              	jz	l382
 11242                          	line	9
 11243                          ;flge.c: 9: (*(unsigned long *)&ff2) = 0x80000000UL - (*(unsigned long *)&ff2);
 11244  718B  50 00             	mov	a,<(-2147483648)
 11245  718D  70 CF             	and	f, 0xCF   ;select user reg space
 11246  718F  62 D0 00          	mov	reg[CUR_PP],0
 11247  7192  12 47             	sub	a,[3+((___flge@ff2)^0x0)]
 11248  7194  53 47             	mov	[3+((___flge@ff2)^0x0)],a
 11249  7196  50 00             	mov	a,<(-2147483648>>8)
 11250  7198  1A 46             	sbb	a,[2+((___flge@ff2)^0x0)]
 11251  719A  53 46             	mov	[2+((___flge@ff2)^0x0)],a
 11252  719C  50 00             	mov	a,<(-2147483648>>16)
 11253  719E  1A 45             	sbb	a,[1+((___flge@ff2)^0x0)]
 11254  71A0  53 45             	mov	[1+((___flge@ff2)^0x0)],a
 11255  71A2  50 80             	mov	a,<(-2147483648>>24)
 11256  71A4  1A 44             	sbb	a,[0+((___flge@ff2)^0x0)]
 11257  71A6  53 44             	mov	[0+((___flge@ff2)^0x0)],a
 11258                          ;			
 11259  71A8                    l382:	
 11260                          	line	10
 11261                          ;flge.c: 10: (*(unsigned long *)&ff1) ^= 0x80000000UL;
 11262  71A8  50 00             	mov	a,<(-2147483648)
 11263  71AA  70 CF             	and	f, 0xCF   ;select user reg space
 11264  71AC  62 D0 00          	mov	reg[CUR_PP],0
 11265  71AF  34 43             	xor	[3+((___flge@ff1)^0x0)],a
 11266  71B1  50 00             	mov	a,<(-2147483648>>8)
 11267  71B3  34 42             	xor	[2+((___flge@ff1)^0x0)],a
 11268  71B5  50 00             	mov	a,<(-2147483648>>16)
 11269  71B7  34 41             	xor	[1+((___flge@ff1)^0x0)],a
 11270  71B9  50 80             	mov	a,<(-2147483648>>24)
 11271  71BB  34 40             	xor	[0+((___flge@ff1)^0x0)],a
 11272                          	line	11
 11273                          ;flge.c: 11: (*(unsigned long *)&ff2) ^= 0x80000000UL;
 11274  71BD  50 00             	mov	a,<(-2147483648)
 11275  71BF  34 47             	xor	[3+((___flge@ff2)^0x0)],a
 11276  71C1  50 00             	mov	a,<(-2147483648>>8)
 11277  71C3  34 46             	xor	[2+((___flge@ff2)^0x0)],a
 11278  71C5  50 00             	mov	a,<(-2147483648>>16)
 11279  71C7  34 45             	xor	[1+((___flge@ff2)^0x0)],a
 11280  71C9  50 80             	mov	a,<(-2147483648>>24)
 11281  71CB  34 44             	xor	[0+((___flge@ff2)^0x0)],a
 11282                          	line	12
 11283                          ;flge.c: 12: return (*(unsigned long *)&ff1) >= (*(unsigned long *)&ff2);
 11284  71CD  51 43             	mov	a,[3+((___flge@ff1)^0x0)]
 11285  71CF  3A 47             	cmp	a,[3+((___flge@ff2)^0x0)]
 11286  71D1  51 42             	mov	a,[2+((___flge@ff1)^0x0)]
 11287  71D3  1A 46             	sbb	a,[2+((___flge@ff2)^0x0)]
 11288  71D5  51 41             	mov	a,[1+((___flge@ff1)^0x0)]
 11289  71D7  1A 45             	sbb	a,[1+((___flge@ff2)^0x0)]
 11290  71D9  51 40             	mov	a,[0+((___flge@ff1)^0x0)]
 11291  71DB  1A 44             	sbb	a,[0+((___flge@ff2)^0x0)]
 11292  71DD  D006              	jnc	l400001852
 11293  71DF  70 FB             	clrc
 11294  71E1  7D 71E6           	xjmp	l400001853
 11295                          ;			
 11296  71E4                    l400001852:	
 11297  71E4  71 04             	setc
 11298                          ;			
 11299  71E6                    l400001853:	
 11300  71E6  7D 71E9           	xjmp	l380
 11301                          	line	13
 11302                          ;flge.c: 13: }
 11303  71E9                    l380:
 11304                          ;			
 11305  71E9  70 CF             	and	f, 0xCF   ;select user reg space
 11306                          	
 11307  71EB  7F                	ret
 11308                          GLOBAL __end_of___flge
 11309  71EC                    	__end_of___flge:
 11310                          	FNSIZE	___flge,4,8
 11311                          ; =============== function ___flge ends ============
 11312                          
 11313                          	signat	___flge,8312
 11314                          	global	_eval_poly
 11315                          	global	??_eval_poly
 11316                          	global	?_eval_poly
 11317                          	psect	text
 11318                          
 11319                          ; *************** function _eval_poly *****************
 11320                          ; Defined at:
 11321                          ;		line 5 in file "../common/evalpoly.c"
 11322                          ; Parameters:
 11323                          ;		x           	offs:   0	type: bit 
 11324                          ;		d           	offs:   4	type: PTR const ; Largest target is 36
 11325                          ;		 -> F64(36), 
 11326                          ;		n           	offs:   6	type: int 
 11327                          ; Auto variables:
 11328                          ;		res         	       	type: int 
 11329                          ; Return value:
 11330                          ;		type: int 
 11331                          ;		size: 4
 11332                          ; Registers used:
 11333                          ;		a, x, CUR_PP, mret
 11334                          ; Tracked objects:
 11335                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11336                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11337                          ;		Unchanged: 
 11338                          ; Data sizes:
 11339                          ;		Autos:    4
 11340                          ;		Params:   8
 11341                          ;		Temp:     1
 11342                          ;		Total:   13
 11343                          ; This function calls:
 11344                          ;		___flmul
 11345                          ;		___fladd
 11346                          ; This function is called by:
 11347                          ;		_log
 11348                          ; This function uses a non-reentrant model
 11349                          ; 
 11350                          	file	"../common/evalpoly.c"
 11351                          	line	5
 11352  00E2                    	__size_of_eval_poly	equ	__end_of_eval_poly-_eval_poly
 11353                          ;evalpoly.c: 3: double
 11354                          ;evalpoly.c: 4: eval_poly(double x, const double * d, int n)
 11355                          ;evalpoly.c: 5: {
 11356                          ;			
 11357  71EC                    _eval_poly:	
 11358                          	opt	disable
 11359                          	line	8
 11360                          ;evalpoly.c: 6: double res;
 11361                          ;evalpoly.c: 8: res = d[n];
 11362  71EC  50 01             	mov	a,<((01h))
 11363  71EE  01 45             	add	a,<(8000h+eval_poly@n)
 11364  71F0  5C                	mov	x,a
 11365  71F1  50 80             	mov	a,>(8000h+eval_poly@n)
 11366  71F3  70 CF             	and	f, 0xCF   ;select user reg space
 11367  71F5  60 D3             	mov	reg[0xd3],a
 11368  71F7  52 00             	mov	a,[x+0]
 11369  71F9  64                	asl	a
 11370  71FA  64                	asl	a
 11371  71FB  62 D0 00          	mov	reg[CUR_PP],0
 11372  71FE  02 44             	add	a,[1+((eval_poly@d)^0x0)]
 11373  7200  5C                	mov	x,a
 11374  7201  50 00             	mov	a,0
 11375  7203  0A 43             	adc	a,[0+((eval_poly@d)^0x0)]
 11376  7205  08                	push	a
 11377  7206  28                	romx
 11378  7207  53 47             	mov	[0+((eval_poly@res)^0x0)],a
 11379  7209  18                	pop	a
 11380  720A  75                	inc	x
 11381  720B  08                	push	a
 11382  720C  28                	romx
 11383  720D  53 48             	mov	[1+((eval_poly@res)^0x0)],a
 11384  720F  18                	pop	a
 11385  7210  75                	inc	x
 11386  7211  08                	push	a
 11387  7212  28                	romx
 11388  7213  53 49             	mov	[2+((eval_poly@res)^0x0)],a
 11389  7215  18                	pop	a
 11390  7216  75                	inc	x
 11391  7217  28                	romx
 11392  7218  53 4A             	mov	[3+((eval_poly@res)^0x0)],a
 11393                          	line	9
 11394                          ;evalpoly.c: 9: while(n)
 11395  721A  7D 72A2           	xjmp	l641
 11396                          ;			
 11397  721D                    l642:	
 11398                          	line	10
 11399                          ;evalpoly.c: 10: res = x * res + d[--n];
 11400  721D  70 CF             	and	f, 0xCF   ;select user reg space
 11401  721F  62 D0 00          	mov	reg[CUR_PP],0
 11402  7222  51 3F             	mov	a,[0+((eval_poly@x)^0x0)]
 11403  7224  53 5D             	mov	[0+((?___flmul)^0x0)],a
 11404  7226  51 40             	mov	a,[1+((eval_poly@x)^0x0)]
 11405  7228  53 5E             	mov	[1+((?___flmul)^0x0)],a
 11406  722A  51 41             	mov	a,[2+((eval_poly@x)^0x0)]
 11407  722C  53 5F             	mov	[2+((?___flmul)^0x0)],a
 11408  722E  51 42             	mov	a,[3+((eval_poly@x)^0x0)]
 11409  7230  53 60             	mov	[3+((?___flmul)^0x0)],a
 11410  7232  51 47             	mov	a,[0+((eval_poly@res)^0x0)]
 11411  7234  53 61             	mov	[0+((0+?___flmul+04h)^0x0)],a
 11412  7236  51 48             	mov	a,[1+((eval_poly@res)^0x0)]
 11413  7238  53 62             	mov	[1+((0+?___flmul+04h)^0x0)],a
 11414  723A  51 49             	mov	a,[2+((eval_poly@res)^0x0)]
 11415  723C  53 63             	mov	[2+((0+?___flmul+04h)^0x0)],a
 11416  723E  51 4A             	mov	a,[3+((eval_poly@res)^0x0)]
 11417  7240  53 64             	mov	[3+((0+?___flmul+04h)^0x0)],a
 11418  7242  71 80             	or	f, 0x80	;select multiple RAM page mode
 11419                          	
 11420  7244  7C 7680           	xcall	___flmul
 11421                          	
 11422  7247  70 CF             	and	f, 0xCF   ;select user reg space
 11423  7249  62 D0 00          	mov	reg[CUR_PP],0
 11424  724C  51 5D             	mov	a,[0+((0+?___flmul)^0x0)]
 11425  724E  53 4C             	mov	[0+((?___fladd)^0x0)],a
 11426  7250  51 5E             	mov	a,[1+((0+?___flmul)^0x0)]
 11427  7252  53 4D             	mov	[1+((?___fladd)^0x0)],a
 11428  7254  51 5F             	mov	a,[2+((0+?___flmul)^0x0)]
 11429  7256  53 4E             	mov	[2+((?___fladd)^0x0)],a
 11430  7258  51 60             	mov	a,[3+((0+?___flmul)^0x0)]
 11431  725A  53 4F             	mov	[3+((?___fladd)^0x0)],a
 11432  725C  51 46             	mov	a,[1+((eval_poly@n)^0x0)]
 11433  725E  01 FF             	add	a,<(-1)
 11434  7260  53 46             	mov	[1+((eval_poly@n)^0x0)],a
 11435  7262  51 45             	mov	a,[0+((eval_poly@n)^0x0)]
 11436  7264  09 FF             	adc	a,>(-1)
 11437  7266  53 45             	mov	[0+((eval_poly@n)^0x0)],a
 11438  7268  51 46             	mov	a,[1+((eval_poly@n)^0x0)]
 11439  726A  64                	asl	a
 11440  726B  64                	asl	a
 11441  726C  02 44             	add	a,[1+((eval_poly@d)^0x0)]
 11442  726E  5C                	mov	x,a
 11443  726F  50 00             	mov	a,0
 11444  7271  0A 43             	adc	a,[0+((eval_poly@d)^0x0)]
 11445  7273  08                	push	a
 11446  7274  28                	romx
 11447  7275  53 50             	mov	[0+((0+?___fladd+04h)^0x0)],a
 11448  7277  18                	pop	a
 11449  7278  75                	inc	x
 11450  7279  08                	push	a
 11451  727A  28                	romx
 11452  727B  53 51             	mov	[1+((0+?___fladd+04h)^0x0)],a
 11453  727D  18                	pop	a
 11454  727E  75                	inc	x
 11455  727F  08                	push	a
 11456  7280  28                	romx
 11457  7281  53 52             	mov	[2+((0+?___fladd+04h)^0x0)],a
 11458  7283  18                	pop	a
 11459  7284  75                	inc	x
 11460  7285  28                	romx
 11461  7286  53 53             	mov	[3+((0+?___fladd+04h)^0x0)],a
 11462  7288  71 80             	or	f, 0x80	;select multiple RAM page mode
 11463                          	
 11464  728A  7C 73BA           	xcall	___fladd
 11465                          	
 11466  728D  70 CF             	and	f, 0xCF   ;select user reg space
 11467  728F  62 D0 00          	mov	reg[CUR_PP],0
 11468  7292  51 4C             	mov	a,[0+((0+?___fladd)^0x0)]
 11469  7294  53 47             	mov	[0+((eval_poly@res)^0x0)],a
 11470  7296  51 4D             	mov	a,[1+((0+?___fladd)^0x0)]
 11471  7298  53 48             	mov	[1+((eval_poly@res)^0x0)],a
 11472  729A  51 4E             	mov	a,[2+((0+?___fladd)^0x0)]
 11473  729C  53 49             	mov	[2+((eval_poly@res)^0x0)],a
 11474  729E  51 4F             	mov	a,[3+((0+?___fladd)^0x0)]
 11475  72A0  53 4A             	mov	[3+((eval_poly@res)^0x0)],a
 11476                          ;			
 11477  72A2                    l641:	
 11478                          	line	9
 11479  72A2  70 CF             	and	f, 0xCF   ;select user reg space
 11480  72A4  62 D0 00          	mov	reg[CUR_PP],0
 11481  72A7  51 45             	mov	a,[0+((eval_poly@n)^0x0)]
 11482  72A9  39 00             	cmp	a,>(0)
 11483  72AB  B005              	jnz	u2503
 11484  72AD  51 46             	mov	a,[1+((eval_poly@n)^0x0)]
 11485  72AF  39 00             	cmp	a,<(0)
 11486  72B1                    u2503:
 11487  72B1  BF6B              	jnz	l642
 11488                          ;			
 11489  72B3                    l643:	
 11490                          	line	11
 11491  72B3  70 CF             	and	f, 0xCF   ;select user reg space
 11492  72B5  62 D0 00          	mov	reg[CUR_PP],0
 11493  72B8  51 47             	mov	a,[0+((eval_poly@res)^0x0)]
 11494  72BA  53 3F             	mov	[0+((?_eval_poly)^0x0)],a
 11495  72BC  51 48             	mov	a,[1+((eval_poly@res)^0x0)]
 11496  72BE  53 40             	mov	[1+((?_eval_poly)^0x0)],a
 11497  72C0  51 49             	mov	a,[2+((eval_poly@res)^0x0)]
 11498  72C2  53 41             	mov	[2+((?_eval_poly)^0x0)],a
 11499  72C4  51 4A             	mov	a,[3+((eval_poly@res)^0x0)]
 11500  72C6  53 42             	mov	[3+((?_eval_poly)^0x0)],a
 11501  72C8  7D 72CB           	xjmp	l640
 11502                          	line	12
 11503                          ;evalpoly.c: 12: }
 11504  72CB                    l640:
 11505                          ;			
 11506  72CB  70 CF             	and	f, 0xCF   ;select user reg space
 11507                          	
 11508  72CD  7F                	ret
 11509                          GLOBAL __end_of_eval_poly
 11510  72CE                    	__end_of_eval_poly:
 11511                          	FNSIZE	_eval_poly,5,8
 11512                          ; =============== function _eval_poly ends ============
 11513                          
 11514                          	signat	_eval_poly,12412
 11515                          	global	_OneWire_WriteByte
 11516                          	global	___awtofl
 11517                          	global	??___awtofl
 11518                          	global	?___awtofl
 11519                          	psect	text
 11520                          
 11521                          ; *************** function ___awtofl *****************
 11522                          ; Defined at:
 11523                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awtofl.c"
 11524                          ; Parameters:
 11525                          ;		c           	offs:   0	type: int 
 11526                          ; Auto variables:
 11527                          ;		f1          	       	type: int 
 11528                          ; Return value:
 11529                          ;		type: int 
 11530                          ;		size: 4
 11531                          ; Registers used:
 11532                          ;		a, x, CUR_PP, mret
 11533                          ; Tracked objects:
 11534                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11535                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11536                          ;		Unchanged: 
 11537                          ; Data sizes:
 11538                          ;		Autos:    4
 11539                          ;		Params:   4
 11540                          ;		Temp:     4
 11541                          ;		Total:   12
 11542                          ; This function calls:
 11543                          ;		___flpack
 11544                          ;		___flneg
 11545                          ; This function is called by:
 11546                          ;		_log
 11547                          ; This function uses a non-reentrant model
 11548                          ; 
 11549                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\awtofl.c"
 11550                          	line	16
 11551  00EC                    	__size_of___awtofl	equ	__end_of___awtofl-___awtofl
 11552                          ;awtofl.c: 14: double
 11553                          ;awtofl.c: 15: __awtofl(signed int c)
 11554                          ;awtofl.c: 16: {
 11555                          ;			
 11556  72CE                    ___awtofl:	
 11557                          	opt	disable
 11558                          	line	19
 11559                          ;awtofl.c: 17: double f1;
 11560                          ;awtofl.c: 19: if(c == 0)
 11561  72CE  70 CF             	and	f, 0xCF   ;select user reg space
 11562  72D0  62 D0 00          	mov	reg[CUR_PP],0
 11563  72D3  51 3F             	mov	a,[0+((___awtofl@c)^0x0)]
 11564  72D5  39 00             	cmp	a,>(0)
 11565  72D7  B005              	jnz	u2243
 11566  72D9  51 40             	mov	a,[1+((___awtofl@c)^0x0)]
 11567  72DB  39 00             	cmp	a,<(0)
 11568  72DD                    u2243:
 11569  72DD  B019              	jnz	l453
 11570                          	line	20
 11571  72DF  50 00             	mov	a,<(0x0>>24)
 11572  72E1  70 CF             	and	f, 0xCF   ;select user reg space
 11573  72E3  62 D0 00          	mov	reg[CUR_PP],0
 11574  72E6  53 3F             	mov	[0+((?___awtofl)^0x0)],a
 11575  72E8  50 00             	mov	a,<(0x0>>16)
 11576  72EA  53 40             	mov	[1+((?___awtofl)^0x0)],a
 11577  72EC  50 00             	mov	a,<(0x0>>8)
 11578  72EE  53 41             	mov	[2+((?___awtofl)^0x0)],a
 11579  72F0  50 00             	mov	a,<(0x0)
 11580  72F2  53 42             	mov	[3+((?___awtofl)^0x0)],a
 11581  72F4  7D 73B7           	xjmp	l452
 11582                          ;			
 11583  72F7                    l453:	
 11584                          	line	21
 11585                          ;awtofl.c: 21: (*(unsigned long *)&f1) = (signed long)c;
 11586  72F7  70 CF             	and	f, 0xCF   ;select user reg space
 11587  72F9  62 D0 00          	mov	reg[CUR_PP],0
 11588  72FC  51 40             	mov	a,[1+((___awtofl@c)^0x0)]
 11589  72FE  53 4A             	mov	[(??___awtofl^0x0)+4+0+3],a
 11590  7300  51 3F             	mov	a,[0+((___awtofl@c)^0x0)]
 11591  7302  53 49             	mov	[(??___awtofl^0x0)+4+0+2],a
 11592  7304  6A                	rlc	a
 11593  7305  50 00             	mov	a,0
 11594  7307  19 00             	sbb	a,0
 11595  7309  53 48             	mov	[(??___awtofl^0x0)+4+0+1],a
 11596  730B  53 47             	mov	[(??___awtofl^0x0)+4+0],a
 11597  730D  5F 43  47         	mov	[((___awtofl@f1)^0x0)],[(??___awtofl^0x0)+4+0]
 11598  7310  5F 44  48         	mov	[((___awtofl@f1+1)^0x0)],[(??___awtofl^0x0)+4+1]
 11599  7313  5F 45  49         	mov	[((___awtofl@f1+2)^0x0)],[(??___awtofl^0x0)+4+2]
 11600  7316  5F 46  4A         	mov	[((___awtofl@f1+3)^0x0)],[(??___awtofl^0x0)+4+3]
 11601                          	line	22
 11602                          ;awtofl.c: 22: if(c < 0)
 11603  7319  51 40             	mov	a,[1+((___awtofl@c)^0x0)]
 11604  731B  39 00             	cmp	a,<(0)
 11605  731D  51 3F             	mov	a,[0+((___awtofl@c)^0x0)]
 11606  731F  31 80             	xor	a,80h
 11607  7321  19 80             	sbb	a,(>0)^80h
 11608  7323  D025              	jnc	l454
 11609                          	line	23
 11610                          ;awtofl.c: 23: (*(unsigned long *)&f1) = -(*(unsigned long *)&f1);
 11611  7325  70 CF             	and	f, 0xCF   ;select user reg space
 11612  7327  62 D0 00          	mov	reg[CUR_PP],0
 11613  732A  51 43             	mov	a,[0+((___awtofl@f1)^0x0)]
 11614  732C  73                	cpl	a
 11615  732D  53 43             	mov	[0+((___awtofl@f1)^0x0)],a
 11616  732F  51 44             	mov	a,[1+((___awtofl@f1)^0x0)]
 11617  7331  73                	cpl	a
 11618  7332  53 44             	mov	[1+((___awtofl@f1)^0x0)],a
 11619  7334  51 45             	mov	a,[2+((___awtofl@f1)^0x0)]
 11620  7336  73                	cpl	a
 11621  7337  53 45             	mov	[2+((___awtofl@f1)^0x0)],a
 11622  7339  51 46             	mov	a,[3+((___awtofl@f1)^0x0)]
 11623  733B  73                	cpl	a
 11624  733C  53 46             	mov	[3+((___awtofl@f1)^0x0)],a
 11625  733E  76 46             	inc	[3+((___awtofl@f1)^0x0)]
 11626  7340  0E 45  00         	adc	[2+((___awtofl@f1)^0x0)],0
 11627  7343  0E 44  00         	adc	[1+((___awtofl@f1)^0x0)],0
 11628  7346  0E 43  00         	adc	[0+((___awtofl@f1)^0x0)],0
 11629                          ;			
 11630  7349                    l454:	
 11631                          	line	24
 11632                          ;awtofl.c: 24: __flpack(&(*(unsigned long *)&f1), 127+23);
 11633  7349  50 43             	mov	a,<((___awtofl@f1|8000h))
 11634  734B  70 CF             	and	f, 0xCF   ;select user reg space
 11635  734D  62 D0 00          	mov	reg[CUR_PP],0
 11636  7350  53 71             	mov	[1+((?___flpack)^0x0)],a
 11637  7352  50 80             	mov	a,>((___awtofl@f1|8000h))
 11638  7354  53 70             	mov	[0+((?___flpack)^0x0)],a
 11639  7356  50 96             	mov	a,<((096h))
 11640  7358  53 72             	mov	[0+((0+?___flpack+02h)^0x0)],a
 11641  735A  71 80             	or	f, 0x80	;select multiple RAM page mode
 11642                          	
 11643  735C  7C 78CD           	xcall	___flpack
 11644                          	
 11645                          	line	25
 11646                          ;awtofl.c: 25: if(c < 0)
 11647  735F  70 CF             	and	f, 0xCF   ;select user reg space
 11648  7361  62 D0 00          	mov	reg[CUR_PP],0
 11649  7364  51 40             	mov	a,[1+((___awtofl@c)^0x0)]
 11650  7366  39 00             	cmp	a,<(0)
 11651  7368  51 3F             	mov	a,[0+((___awtofl@c)^0x0)]
 11652  736A  31 80             	xor	a,80h
 11653  736C  19 80             	sbb	a,(>0)^80h
 11654  736E  D030              	jnc	l455
 11655                          	line	26
 11656                          ;awtofl.c: 26: f1 = -f1;
 11657  7370  70 CF             	and	f, 0xCF   ;select user reg space
 11658  7372  62 D0 00          	mov	reg[CUR_PP],0
 11659  7375  51 43             	mov	a,[0+((___awtofl@f1)^0x0)]
 11660  7377  53 4B             	mov	[0+((?___flneg)^0x0)],a
 11661  7379  51 44             	mov	a,[1+((___awtofl@f1)^0x0)]
 11662  737B  53 4C             	mov	[1+((?___flneg)^0x0)],a
 11663  737D  51 45             	mov	a,[2+((___awtofl@f1)^0x0)]
 11664  737F  53 4D             	mov	[2+((?___flneg)^0x0)],a
 11665  7381  51 46             	mov	a,[3+((___awtofl@f1)^0x0)]
 11666  7383  53 4E             	mov	[3+((?___flneg)^0x0)],a
 11667  7385  71 80             	or	f, 0x80	;select multiple RAM page mode
 11668                          	
 11669  7387  7C 7895           	xcall	___flneg
 11670                          	
 11671  738A  70 CF             	and	f, 0xCF   ;select user reg space
 11672  738C  62 D0 00          	mov	reg[CUR_PP],0
 11673  738F  51 4B             	mov	a,[0+((0+?___flneg)^0x0)]
 11674  7391  53 43             	mov	[0+((___awtofl@f1)^0x0)],a
 11675  7393  51 4C             	mov	a,[1+((0+?___flneg)^0x0)]
 11676  7395  53 44             	mov	[1+((___awtofl@f1)^0x0)],a
 11677  7397  51 4D             	mov	a,[2+((0+?___flneg)^0x0)]
 11678  7399  53 45             	mov	[2+((___awtofl@f1)^0x0)],a
 11679  739B  51 4E             	mov	a,[3+((0+?___flneg)^0x0)]
 11680  739D  53 46             	mov	[3+((___awtofl@f1)^0x0)],a
 11681                          ;			
 11682  739F                    l455:	
 11683                          	line	27
 11684  739F  70 CF             	and	f, 0xCF   ;select user reg space
 11685  73A1  62 D0 00          	mov	reg[CUR_PP],0
 11686  73A4  51 43             	mov	a,[0+((___awtofl@f1)^0x0)]
 11687  73A6  53 3F             	mov	[0+((?___awtofl)^0x0)],a
 11688  73A8  51 44             	mov	a,[1+((___awtofl@f1)^0x0)]
 11689  73AA  53 40             	mov	[1+((?___awtofl)^0x0)],a
 11690  73AC  51 45             	mov	a,[2+((___awtofl@f1)^0x0)]
 11691  73AE  53 41             	mov	[2+((?___awtofl)^0x0)],a
 11692  73B0  51 46             	mov	a,[3+((___awtofl@f1)^0x0)]
 11693  73B2  53 42             	mov	[3+((?___awtofl)^0x0)],a
 11694  73B4  7D 73B7           	xjmp	l452
 11695                          	line	28
 11696                          ;awtofl.c: 28: }
 11697  73B7                    l452:
 11698                          ;			
 11699  73B7  70 CF             	and	f, 0xCF   ;select user reg space
 11700                          	
 11701  73B9  7F                	ret
 11702                          GLOBAL __end_of___awtofl
 11703  73BA                    	__end_of___awtofl:
 11704                          	FNSIZE	___awtofl,8,4
 11705                          ; =============== function ___awtofl ends ============
 11706                          
 11707                          	signat	___awtofl,4220
 11708                          	global	_OneWire_bReadByte
 11709                          	global	___fladd
 11710                          	global	??___fladd
 11711                          	global	?___fladd
 11712                          	psect	text
 11713                          
 11714                          ; *************** function ___fladd *****************
 11715                          ; Defined at:
 11716                          ;		line 17 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fladd.c"
 11717                          ; Parameters:
 11718                          ;		f1          	offs:   0	type: int 
 11719                          ;		f2          	offs:   4	type: int 
 11720                          ; Auto variables:
 11721                          ;		exp1        	       	type: unsigned char 
 11722                          ;		exp2        	       	type: unsigned char 
 11723                          ;		sign1       	       	type: unsigned char 
 11724                          ;		sign2       	       	type: unsigned char 
 11725                          ;		cntr        	       	type: unsigned char 
 11726                          ; Return value:
 11727                          ;		type: unsigned char 
 11728                          ;		size: 4
 11729                          ; Registers used:
 11730                          ;		a, x, CUR_PP
 11731                          ; Tracked objects:
 11732                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11733                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 11734                          ;		Unchanged: 
 11735                          ; Data sizes:
 11736                          ;		Autos:    5
 11737                          ;		Params:   8
 11738                          ;		Temp:     4
 11739                          ;		Total:   17
 11740                          ; This function calls:
 11741                          ;		___flunpack
 11742                          ;		___flpack
 11743                          ; This function is called by:
 11744                          ;		_calc_sth11
 11745                          ;		_calc_dewpoint
 11746                          ;		_printf
 11747                          ;		_log
 11748                          ;		___flsub
 11749                          ;		_eval_poly
 11750                          ; This function uses a non-reentrant model
 11751                          ; 
 11752                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\fladd.c"
 11753                          	line	17
 11754  02C6                    	__size_of___fladd	equ	__end_of___fladd-___fladd
 11755                          ;fladd.c: 15: double
 11756                          ;fladd.c: 16: __fladd(double f1, double f2)
 11757                          ;fladd.c: 17: {
 11758                          ;			
 11759  73BA                    ___fladd:	
 11760                          	opt	disable
 11761                          	line	20
 11762                          ;fladd.c: 18: unsigned char exp1, exp2, sign1, sign2, cntr;
 11763                          ;fladd.c: 20: if(sizeof((*(unsigned long *)&f1)) != 4)
 11764  73BA  7D 73BD           	xjmp	l334
 11765                          	line	21
 11766                          ;			
 11767  73BD                    l334:	
 11768                          	line	22
 11769                          ;fladd.c: 22: sign1 = __flunpack(&(*(unsigned long *)&f1), &exp1);
 11770  73BD  50 4C             	mov	a,<((___fladd@f1|8000h))
 11771  73BF  70 CF             	and	f, 0xCF   ;select user reg space
 11772  73C1  62 D0 00          	mov	reg[CUR_PP],0
 11773  73C4  53 71             	mov	[1+((?___flunpack)^0x0)],a
 11774  73C6  50 80             	mov	a,>((___fladd@f1|8000h))
 11775  73C8  53 70             	mov	[0+((?___flunpack)^0x0)],a
 11776  73CA  50 54             	mov	a,<((___fladd@exp1|8000h))
 11777  73CC  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 11778  73CE  50 80             	mov	a,>((___fladd@exp1|8000h))
 11779  73D0  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 11780  73D2  71 80             	or	f, 0x80	;select multiple RAM page mode
 11781                          	
 11782  73D4  7C 7AFC           	xcall	___flunpack
 11783                          	
 11784  73D7  70 CF             	and	f, 0xCF   ;select user reg space
 11785  73D9  62 D0 00          	mov	reg[CUR_PP],0
 11786  73DC  53 56             	mov	[0+((___fladd@sign1)^0x0)],a
 11787                          	line	23
 11788                          ;fladd.c: 23: if(exp1 == 0)
 11789  73DE  70 CF             	and	f, 0xCF   ;select user reg space
 11790  73E0  62 D0 00          	mov	reg[CUR_PP],0
 11791  73E3  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 11792  73E5  39 00             	cmp	a,(0)
 11793  73E7  B019              	jnz	l335
 11794                          	line	24
 11795  73E9  70 CF             	and	f, 0xCF   ;select user reg space
 11796  73EB  62 D0 00          	mov	reg[CUR_PP],0
 11797  73EE  51 50             	mov	a,[0+((___fladd@f2)^0x0)]
 11798  73F0  53 4C             	mov	[0+((?___fladd)^0x0)],a
 11799  73F2  51 51             	mov	a,[1+((___fladd@f2)^0x0)]
 11800  73F4  53 4D             	mov	[1+((?___fladd)^0x0)],a
 11801  73F6  51 52             	mov	a,[2+((___fladd@f2)^0x0)]
 11802  73F8  53 4E             	mov	[2+((?___fladd)^0x0)],a
 11803  73FA  51 53             	mov	a,[3+((___fladd@f2)^0x0)]
 11804  73FC  53 4F             	mov	[3+((?___fladd)^0x0)],a
 11805  73FE  7D 767D           	xjmp	l333
 11806                          ;			
 11807  7401                    l335:	
 11808                          	line	25
 11809                          ;fladd.c: 25: sign2 = __flunpack(&(*(unsigned long *)&f2), &exp2);
 11810  7401  50 50             	mov	a,<((___fladd@f2|8000h))
 11811  7403  70 CF             	and	f, 0xCF   ;select user reg space
 11812  7405  62 D0 00          	mov	reg[CUR_PP],0
 11813  7408  53 71             	mov	[1+((?___flunpack)^0x0)],a
 11814  740A  50 80             	mov	a,>((___fladd@f2|8000h))
 11815  740C  53 70             	mov	[0+((?___flunpack)^0x0)],a
 11816  740E  50 55             	mov	a,<((___fladd@exp2|8000h))
 11817  7410  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 11818  7412  50 80             	mov	a,>((___fladd@exp2|8000h))
 11819  7414  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 11820  7416  71 80             	or	f, 0x80	;select multiple RAM page mode
 11821                          	
 11822  7418  7C 7AFC           	xcall	___flunpack
 11823                          	
 11824  741B  70 CF             	and	f, 0xCF   ;select user reg space
 11825  741D  62 D0 00          	mov	reg[CUR_PP],0
 11826  7420  53 58             	mov	[0+((___fladd@sign2)^0x0)],a
 11827                          	line	26
 11828                          ;fladd.c: 26: if(exp2 != 0) {
 11829  7422  70 CF             	and	f, 0xCF   ;select user reg space
 11830  7424  62 D0 00          	mov	reg[CUR_PP],0
 11831  7427  51 55             	mov	a,[0+((___fladd@exp2)^0x0)]
 11832  7429  39 00             	cmp	a,(0)
 11833  742B  A218              	jz	l336
 11834                          	line	27
 11835                          ;fladd.c: 27: cntr = 6;
 11836  742D  50 06             	mov	a,<((06h))
 11837  742F  70 CF             	and	f, 0xCF   ;select user reg space
 11838  7431  62 D0 00          	mov	reg[CUR_PP],0
 11839  7434  53 57             	mov	[0+((___fladd@cntr)^0x0)],a
 11840                          	line	29
 11841                          ;fladd.c: 29: if(exp1 < exp2) {
 11842  7436  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 11843  7438  3A 55             	cmp	a,[0+((___fladd@exp2)^0x0)]
 11844  743A  D098              	jnc	l337
 11845                          	line	30
 11846                          ;fladd.c: 30: if((unsigned char)(exp2-exp1) > sizeof(f1)*8) {
 11847  743C  70 CF             	and	f, 0xCF   ;select user reg space
 11848  743E  62 D0 00          	mov	reg[CUR_PP],0
 11849  7441  51 55             	mov	a,[0+((___fladd@exp2)^0x0)]
 11850  7443  12 54             	sub	a,[0+((___fladd@exp1)^0x0)]
 11851  7445  39 21             	cmp	a,<((021h))
 11852  7447  C021              	jc	l342
 11853                          	line	32
 11854                          ;fladd.c: 32: (*(unsigned long *)&f1) = 0;
 11855  7449  50 00             	mov	a,<(0>>24)
 11856  744B  70 CF             	and	f, 0xCF   ;select user reg space
 11857  744D  62 D0 00          	mov	reg[CUR_PP],0
 11858  7450  53 4C             	mov	[0+((___fladd@f1)^0x0)],a
 11859  7452  50 00             	mov	a,<(0>>16)
 11860  7454  53 4D             	mov	[1+((___fladd@f1)^0x0)],a
 11861  7456  50 00             	mov	a,<(0>>8)
 11862  7458  53 4E             	mov	[2+((___fladd@f1)^0x0)],a
 11863  745A  50 00             	mov	a,<(0)
 11864  745C  53 4F             	mov	[3+((___fladd@f1)^0x0)],a
 11865                          	line	33
 11866                          ;fladd.c: 33: exp1 = exp2;
 11867  745E  51 55             	mov	a,[0+((___fladd@exp2)^0x0)]
 11868  7460  53 54             	mov	[0+((___fladd@exp1)^0x0)],a
 11869                          	line	34
 11870                          ;fladd.c: 34: sign1 = sign2;
 11871  7462  51 58             	mov	a,[0+((___fladd@sign2)^0x0)]
 11872  7464  53 56             	mov	[0+((___fladd@sign1)^0x0)],a
 11873                          	line	35
 11874                          ;fladd.c: 35: } else {
 11875  7466  7D 74D0           	xjmp	l339
 11876                          	line	38
 11877                          ;fladd.c: 38: do {
 11878                          ;			
 11879  7469                    l342:	
 11880                          	line	39
 11881                          ;fladd.c: 39: (*(unsigned long *)&f2) <<= 1;
 11882  7469  50 01             	mov	a,<((01h))
 11883  746B  7D 747B           	xjmp	u1793
 11884  746E                    u1804:
 11885  746E  70 CF             	and	f, 0xCF   ;select user reg space
 11886  7470  62 D0 00          	mov	reg[CUR_PP],0
 11887  7473  65 53             	asl	[3+((___fladd@f2)^0x0)]
 11888  7475  6B 52             	rlc	[2+((___fladd@f2)^0x0)]
 11889  7477  6B 51             	rlc	[1+((___fladd@f2)^0x0)]
 11890  7479  6B 50             	rlc	[0+((___fladd@f2)^0x0)]
 11891  747B                    u1793:
 11892  747B  78                	dec	a
 11893  747C  DFF1              	jnc	u1804
 11894                          	line	40
 11895                          ;fladd.c: 40: exp2--;
 11896  747E  70 CF             	and	f, 0xCF   ;select user reg space
 11897  7480  62 D0 00          	mov	reg[CUR_PP],0
 11898  7483  51 55             	mov	a,[0+((___fladd@exp2)^0x0)]
 11899  7485  11 01             	sub	a,<((01h))
 11900  7487  53 55             	mov	[0+((___fladd@exp2)^0x0)],a
 11901                          	line	41
 11902                          ;fladd.c: 41: } while(exp2 != exp1 && --cntr != 0);
 11903  7489  51 55             	mov	a,[0+((___fladd@exp2)^0x0)]
 11904  748B  3A 54             	cmp	a,[0+((___fladd@exp1)^0x0)]
 11905  748D  A012              	jz	l341
 11906  748F  70 CF             	and	f, 0xCF   ;select user reg space
 11907  7491  62 D0 00          	mov	reg[CUR_PP],0
 11908  7494  51 57             	mov	a,[0+((___fladd@cntr)^0x0)]
 11909  7496  11 01             	sub	a,<((01h))
 11910  7498  53 57             	mov	[0+((___fladd@cntr)^0x0)],a
 11911  749A  51 57             	mov	a,[0+((___fladd@cntr)^0x0)]
 11912  749C  39 00             	cmp	a,(0)
 11913  749E  BFCA              	jnz	l342
 11914                          ;			
 11915  74A0                    l600001849:	
 11916                          ;			
 11917  74A0                    l341:	
 11918                          	line	42
 11919                          ;fladd.c: 42: while(exp1 != exp2) {
 11920  74A0  7D 74C5           	xjmp	l343
 11921                          ;			
 11922  74A3                    l344:	
 11923                          	line	43
 11924                          ;fladd.c: 43: (*(unsigned long *)&f1) >>= 1;
 11925  74A3  50 01             	mov	a,<((01h))
 11926  74A5  7D 74B7           	xjmp	u1813
 11927  74A8  70 FB             	clrc
 11928  74AA                    u1824:
 11929  74AA  70 CF             	and	f, 0xCF   ;select user reg space
 11930  74AC  62 D0 00          	mov	reg[CUR_PP],0
 11931  74AF  6E 4C             	rrc	[0+((___fladd@f1)^0x0)]
 11932  74B1  6E 4D             	rrc	[1+((___fladd@f1)^0x0)]
 11933  74B3  6E 4E             	rrc	[2+((___fladd@f1)^0x0)]
 11934  74B5  6E 4F             	rrc	[3+((___fladd@f1)^0x0)]
 11935  74B7                    u1813:
 11936  74B7  78                	dec	a
 11937  74B8  DFF1              	jnc	u1824
 11938                          	line	44
 11939                          ;fladd.c: 44: exp1++;
 11940  74BA  70 CF             	and	f, 0xCF   ;select user reg space
 11941  74BC  62 D0 00          	mov	reg[CUR_PP],0
 11942  74BF  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 11943  74C1  01 01             	add	a,<((01h))
 11944  74C3  53 54             	mov	[0+((___fladd@exp1)^0x0)],a
 11945                          	line	45
 11946                          ;			
 11947  74C5                    l343:	
 11948                          	line	42
 11949  74C5  70 CF             	and	f, 0xCF   ;select user reg space
 11950  74C7  62 D0 00          	mov	reg[CUR_PP],0
 11951  74CA  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 11952  74CC  3A 55             	cmp	a,[0+((___fladd@exp2)^0x0)]
 11953  74CE  BFD4              	jnz	l344
 11954                          ;			
 11955  74D0                    l345:	
 11956                          	line	46
 11957                          ;			
 11958  74D0                    l339:	
 11959                          	line	47
 11960                          ;fladd.c: 45: }
 11961                          ;fladd.c: 46: }
 11962                          ;fladd.c: 47: } else if(exp1 != exp2) {
 11963  74D0  7D 756A           	xjmp	l346
 11964                          ;			
 11965  74D3                    l337:	
 11966  74D3  70 CF             	and	f, 0xCF   ;select user reg space
 11967  74D5  62 D0 00          	mov	reg[CUR_PP],0
 11968  74D8  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 11969  74DA  3A 55             	cmp	a,[0+((___fladd@exp2)^0x0)]
 11970  74DC  A08D              	jz	l346
 11971                          	line	48
 11972                          ;fladd.c: 48: if((unsigned char)(exp1-exp2) > sizeof(f1)*8)
 11973  74DE  70 CF             	and	f, 0xCF   ;select user reg space
 11974  74E0  62 D0 00          	mov	reg[CUR_PP],0
 11975  74E3  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 11976  74E5  12 55             	sub	a,[0+((___fladd@exp2)^0x0)]
 11977  74E7  39 21             	cmp	a,<((021h))
 11978  74E9  C019              	jc	l352
 11979                          	line	49
 11980                          ;fladd.c: 49: (*(unsigned long *)&f2) = 0;
 11981  74EB  50 00             	mov	a,<(0>>24)
 11982  74ED  70 CF             	and	f, 0xCF   ;select user reg space
 11983  74EF  62 D0 00          	mov	reg[CUR_PP],0
 11984  74F2  53 50             	mov	[0+((___fladd@f2)^0x0)],a
 11985  74F4  50 00             	mov	a,<(0>>16)
 11986  74F6  53 51             	mov	[1+((___fladd@f2)^0x0)],a
 11987  74F8  50 00             	mov	a,<(0>>8)
 11988  74FA  53 52             	mov	[2+((___fladd@f2)^0x0)],a
 11989  74FC  50 00             	mov	a,<(0)
 11990  74FE  53 53             	mov	[3+((___fladd@f2)^0x0)],a
 11991  7500  7D 756A           	xjmp	l346
 11992                          	line	53
 11993                          ;fladd.c: 50: else {
 11994                          ;fladd.c: 53: do {
 11995                          ;			
 11996  7503                    l352:	
 11997                          	line	54
 11998                          ;fladd.c: 54: (*(unsigned long *)&f1) <<= 1;
 11999  7503  50 01             	mov	a,<((01h))
 12000  7505  7D 7515           	xjmp	u1833
 12001  7508                    u1844:
 12002  7508  70 CF             	and	f, 0xCF   ;select user reg space
 12003  750A  62 D0 00          	mov	reg[CUR_PP],0
 12004  750D  65 4F             	asl	[3+((___fladd@f1)^0x0)]
 12005  750F  6B 4E             	rlc	[2+((___fladd@f1)^0x0)]
 12006  7511  6B 4D             	rlc	[1+((___fladd@f1)^0x0)]
 12007  7513  6B 4C             	rlc	[0+((___fladd@f1)^0x0)]
 12008  7515                    u1833:
 12009  7515  78                	dec	a
 12010  7516  DFF1              	jnc	u1844
 12011                          	line	55
 12012                          ;fladd.c: 55: exp1--;
 12013  7518  70 CF             	and	f, 0xCF   ;select user reg space
 12014  751A  62 D0 00          	mov	reg[CUR_PP],0
 12015  751D  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 12016  751F  11 01             	sub	a,<((01h))
 12017  7521  53 54             	mov	[0+((___fladd@exp1)^0x0)],a
 12018                          	line	56
 12019                          ;fladd.c: 56: } while(exp2 != exp1 && --cntr != 0);
 12020  7523  51 55             	mov	a,[0+((___fladd@exp2)^0x0)]
 12021  7525  3A 54             	cmp	a,[0+((___fladd@exp1)^0x0)]
 12022  7527  A012              	jz	l351
 12023  7529  70 CF             	and	f, 0xCF   ;select user reg space
 12024  752B  62 D0 00          	mov	reg[CUR_PP],0
 12025  752E  51 57             	mov	a,[0+((___fladd@cntr)^0x0)]
 12026  7530  11 01             	sub	a,<((01h))
 12027  7532  53 57             	mov	[0+((___fladd@cntr)^0x0)],a
 12028  7534  51 57             	mov	a,[0+((___fladd@cntr)^0x0)]
 12029  7536  39 00             	cmp	a,(0)
 12030  7538  BFCA              	jnz	l352
 12031                          ;			
 12032  753A                    l600001850:	
 12033                          ;			
 12034  753A                    l351:	
 12035                          	line	57
 12036                          ;fladd.c: 57: while(exp1 != exp2) {
 12037  753A  7D 755F           	xjmp	l353
 12038                          ;			
 12039  753D                    l354:	
 12040                          	line	58
 12041                          ;fladd.c: 58: (*(unsigned long *)&f2) >>= 1;
 12042  753D  50 01             	mov	a,<((01h))
 12043  753F  7D 7551           	xjmp	u1853
 12044  7542  70 FB             	clrc
 12045  7544                    u1864:
 12046  7544  70 CF             	and	f, 0xCF   ;select user reg space
 12047  7546  62 D0 00          	mov	reg[CUR_PP],0
 12048  7549  6E 50             	rrc	[0+((___fladd@f2)^0x0)]
 12049  754B  6E 51             	rrc	[1+((___fladd@f2)^0x0)]
 12050  754D  6E 52             	rrc	[2+((___fladd@f2)^0x0)]
 12051  754F  6E 53             	rrc	[3+((___fladd@f2)^0x0)]
 12052  7551                    u1853:
 12053  7551  78                	dec	a
 12054  7552  DFF1              	jnc	u1864
 12055                          	line	59
 12056                          ;fladd.c: 59: exp2++;
 12057  7554  70 CF             	and	f, 0xCF   ;select user reg space
 12058  7556  62 D0 00          	mov	reg[CUR_PP],0
 12059  7559  51 55             	mov	a,[0+((___fladd@exp2)^0x0)]
 12060  755B  01 01             	add	a,<((01h))
 12061  755D  53 55             	mov	[0+((___fladd@exp2)^0x0)],a
 12062                          	line	60
 12063                          ;			
 12064  755F                    l353:	
 12065                          	line	57
 12066  755F  70 CF             	and	f, 0xCF   ;select user reg space
 12067  7561  62 D0 00          	mov	reg[CUR_PP],0
 12068  7564  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 12069  7566  3A 55             	cmp	a,[0+((___fladd@exp2)^0x0)]
 12070  7568  BFD4              	jnz	l354
 12071                          ;			
 12072  756A                    l355:	
 12073                          	line	61
 12074                          ;			
 12075  756A                    l349:	
 12076                          	line	62
 12077                          ;			
 12078  756A                    l347:	
 12079                          	line	63
 12080                          ;			
 12081  756A                    l346:	
 12082                          ;fladd.c: 60: }
 12083                          ;fladd.c: 61: }
 12084                          ;fladd.c: 62: }
 12085                          ;fladd.c: 63: if(sign1 != 0) {
 12086  756A  70 CF             	and	f, 0xCF   ;select user reg space
 12087  756C  62 D0 00          	mov	reg[CUR_PP],0
 12088  756F  51 56             	mov	a,[0+((___fladd@sign1)^0x0)]
 12089  7571  39 00             	cmp	a,(0)
 12090  7573  A026              	jz	l356
 12091                          	line	65
 12092                          ;fladd.c: 65: (*(unsigned long *)&f1) ^= 0xFFFFFFFFUL;
 12093  7575  50 FF             	mov	a,<(-1)
 12094  7577  70 CF             	and	f, 0xCF   ;select user reg space
 12095  7579  62 D0 00          	mov	reg[CUR_PP],0
 12096  757C  34 4F             	xor	[3+((___fladd@f1)^0x0)],a
 12097  757E  50 FF             	mov	a,<(-1>>8)
 12098  7580  34 4E             	xor	[2+((___fladd@f1)^0x0)],a
 12099  7582  50 FF             	mov	a,<(-1>>16)
 12100  7584  34 4D             	xor	[1+((___fladd@f1)^0x0)],a
 12101  7586  50 FF             	mov	a,<(-1>>24)
 12102  7588  34 4C             	xor	[0+((___fladd@f1)^0x0)],a
 12103                          	line	66
 12104                          ;fladd.c: 66: (*(unsigned long *)&f1)++;
 12105  758A  50 01             	mov	a,<(01h)
 12106  758C  04 4F             	add	[3+((___fladd@f1)^0x0)],a
 12107  758E  50 00             	mov	a,<(01h>>8)
 12108  7590  0C 4E             	adc	[2+((___fladd@f1)^0x0)],a
 12109  7592  50 00             	mov	a,<(01h>>16)
 12110  7594  0C 4D             	adc	[1+((___fladd@f1)^0x0)],a
 12111  7596  50 00             	mov	a,<(01h>>24)
 12112  7598  0C 4C             	adc	[0+((___fladd@f1)^0x0)],a
 12113                          	line	67
 12114                          ;			
 12115  759A                    l356:	
 12116                          	line	68
 12117                          ;fladd.c: 67: }
 12118                          ;fladd.c: 68: if(sign2 != 0) {
 12119  759A  70 CF             	and	f, 0xCF   ;select user reg space
 12120  759C  62 D0 00          	mov	reg[CUR_PP],0
 12121  759F  51 58             	mov	a,[0+((___fladd@sign2)^0x0)]
 12122  75A1  39 00             	cmp	a,(0)
 12123  75A3  A026              	jz	l357
 12124                          	line	70
 12125                          ;fladd.c: 70: (*(unsigned long *)&f2) ^= 0xFFFFFFFFUL;
 12126  75A5  50 FF             	mov	a,<(-1)
 12127  75A7  70 CF             	and	f, 0xCF   ;select user reg space
 12128  75A9  62 D0 00          	mov	reg[CUR_PP],0
 12129  75AC  34 53             	xor	[3+((___fladd@f2)^0x0)],a
 12130  75AE  50 FF             	mov	a,<(-1>>8)
 12131  75B0  34 52             	xor	[2+((___fladd@f2)^0x0)],a
 12132  75B2  50 FF             	mov	a,<(-1>>16)
 12133  75B4  34 51             	xor	[1+((___fladd@f2)^0x0)],a
 12134  75B6  50 FF             	mov	a,<(-1>>24)
 12135  75B8  34 50             	xor	[0+((___fladd@f2)^0x0)],a
 12136                          	line	71
 12137                          ;fladd.c: 71: (*(unsigned long *)&f2)++;
 12138  75BA  50 01             	mov	a,<(01h)
 12139  75BC  04 53             	add	[3+((___fladd@f2)^0x0)],a
 12140  75BE  50 00             	mov	a,<(01h>>8)
 12141  75C0  0C 52             	adc	[2+((___fladd@f2)^0x0)],a
 12142  75C2  50 00             	mov	a,<(01h>>16)
 12143  75C4  0C 51             	adc	[1+((___fladd@f2)^0x0)],a
 12144  75C6  50 00             	mov	a,<(01h>>24)
 12145  75C8  0C 50             	adc	[0+((___fladd@f2)^0x0)],a
 12146                          	line	72
 12147                          ;			
 12148  75CA                    l357:	
 12149                          	line	73
 12150                          ;fladd.c: 72: }
 12151                          ;fladd.c: 73: sign1 = 0;
 12152  75CA  50 00             	mov	a,<((0))
 12153  75CC  70 CF             	and	f, 0xCF   ;select user reg space
 12154  75CE  62 D0 00          	mov	reg[CUR_PP],0
 12155  75D1  53 56             	mov	[0+((___fladd@sign1)^0x0)],a
 12156                          	line	74
 12157                          ;fladd.c: 74: (*(unsigned long *)&f1) += (*(unsigned long *)&f2);
 12158  75D3  51 53             	mov	a,[3+((___fladd@f2)^0x0)]
 12159  75D5  04 4F             	add	[3+((___fladd@f1)^0x0)],a
 12160  75D7  51 52             	mov	a,[2+((___fladd@f2)^0x0)]
 12161  75D9  0C 4E             	adc	[2+((___fladd@f1)^0x0)],a
 12162  75DB  51 51             	mov	a,[1+((___fladd@f2)^0x0)]
 12163  75DD  0C 4D             	adc	[1+((___fladd@f1)^0x0)],a
 12164  75DF  51 50             	mov	a,[0+((___fladd@f2)^0x0)]
 12165  75E1  0C 4C             	adc	[0+((___fladd@f1)^0x0)],a
 12166                          	line	75
 12167                          ;fladd.c: 75: if((*(unsigned long *)&f1) & 0x80000000UL) {
 12168  75E3  51 4C             	mov	a,[0+((___fladd@f1)^0x0)]
 12169  75E5  53 59             	mov	[(??___fladd^0x0)+5+0],a
 12170  75E7  51 4D             	mov	a,[1+((___fladd@f1)^0x0)]
 12171  75E9  53 5A             	mov	[(??___fladd^0x0)+5+0+1],a
 12172  75EB  51 4E             	mov	a,[2+((___fladd@f1)^0x0)]
 12173  75ED  53 5B             	mov	[(??___fladd^0x0)+5+0+2],a
 12174  75EF  51 4F             	mov	a,[3+((___fladd@f1)^0x0)]
 12175  75F1  53 5C             	mov	[(??___fladd^0x0)+5+0+3],a
 12176  75F3  50 00             	mov	a,<(-2147483648)
 12177  75F5  24 5C             	and	[(??___fladd^0x0)+5+3],a
 12178  75F7  50 00             	mov	a,<(-2147483648>>8)
 12179  75F9  24 5B             	and	[(??___fladd^0x0)+5+2],a
 12180  75FB  50 00             	mov	a,<(-2147483648>>16)
 12181  75FD  24 5A             	and	[(??___fladd^0x0)+5+1],a
 12182  75FF  50 80             	mov	a,<(-2147483648>>24)
 12183  7601  24 59             	and	[(??___fladd^0x0)+5+0],a
 12184  7603  51 59             	mov	a,[(??___fladd^0x0)+5+0]
 12185  7605  39 00             	cmp	a,<(0>>24)
 12186  7607  B011              	jnz	u1873
 12187  7609  51 5A             	mov	a,[(??___fladd^0x0)+5+1]
 12188  760B  39 00             	cmp	a,<(0>>16)
 12189  760D  B00B              	jnz	u1873
 12190  760F  51 5B             	mov	a,[(??___fladd^0x0)+5+2]
 12191  7611  39 00             	cmp	a,<(0>>8)
 12192  7613  B005              	jnz	u1873
 12193  7615  51 5C             	mov	a,[(??___fladd^0x0)+5+3]
 12194  7617  39 00             	cmp	a,<(0)
 12195  7619                    u1873:
 12196  7619  A02A              	jz	l336
 12197                          	line	76
 12198                          ;fladd.c: 76: (*(unsigned long *)&f1) ^= 0xFFFFFFFFUL;
 12199  761B  50 FF             	mov	a,<(-1)
 12200  761D  70 CF             	and	f, 0xCF   ;select user reg space
 12201  761F  62 D0 00          	mov	reg[CUR_PP],0
 12202  7622  34 4F             	xor	[3+((___fladd@f1)^0x0)],a
 12203  7624  50 FF             	mov	a,<(-1>>8)
 12204  7626  34 4E             	xor	[2+((___fladd@f1)^0x0)],a
 12205  7628  50 FF             	mov	a,<(-1>>16)
 12206  762A  34 4D             	xor	[1+((___fladd@f1)^0x0)],a
 12207  762C  50 FF             	mov	a,<(-1>>24)
 12208  762E  34 4C             	xor	[0+((___fladd@f1)^0x0)],a
 12209                          	line	77
 12210                          ;fladd.c: 77: (*(unsigned long *)&f1)++;
 12211  7630  50 01             	mov	a,<(01h)
 12212  7632  04 4F             	add	[3+((___fladd@f1)^0x0)],a
 12213  7634  50 00             	mov	a,<(01h>>8)
 12214  7636  0C 4E             	adc	[2+((___fladd@f1)^0x0)],a
 12215  7638  50 00             	mov	a,<(01h>>16)
 12216  763A  0C 4D             	adc	[1+((___fladd@f1)^0x0)],a
 12217  763C  50 00             	mov	a,<(01h>>24)
 12218  763E  0C 4C             	adc	[0+((___fladd@f1)^0x0)],a
 12219                          	line	78
 12220                          ;fladd.c: 78: sign1 = 1;
 12221  7640  50 01             	mov	a,<((01h))
 12222  7642  53 56             	mov	[0+((___fladd@sign1)^0x0)],a
 12223                          	line	79
 12224                          ;			
 12225  7644                    l358:	
 12226                          	line	80
 12227                          ;			
 12228  7644                    l336:	
 12229                          	line	81
 12230                          ;fladd.c: 79: }
 12231                          ;fladd.c: 80: }
 12232                          ;fladd.c: 81: __flpack(&(*(unsigned long *)&f1), exp1);
 12233  7644  50 4C             	mov	a,<((___fladd@f1|8000h))
 12234  7646  70 CF             	and	f, 0xCF   ;select user reg space
 12235  7648  62 D0 00          	mov	reg[CUR_PP],0
 12236  764B  53 71             	mov	[1+((?___flpack)^0x0)],a
 12237  764D  50 80             	mov	a,>((___fladd@f1|8000h))
 12238  764F  53 70             	mov	[0+((?___flpack)^0x0)],a
 12239  7651  51 54             	mov	a,[0+((___fladd@exp1)^0x0)]
 12240  7653  53 72             	mov	[0+((0+?___flpack+02h)^0x0)],a
 12241  7655  71 80             	or	f, 0x80	;select multiple RAM page mode
 12242                          	
 12243  7657  7C 78CD           	xcall	___flpack
 12244                          	
 12245                          	line	82
 12246                          ;fladd.c: 82: if(sign1)
 12247  765A  70 CF             	and	f, 0xCF   ;select user reg space
 12248  765C  62 D0 00          	mov	reg[CUR_PP],0
 12249  765F  51 56             	mov	a,[0+((___fladd@sign1)^0x0)]
 12250  7661  39 00             	cmp	a,(0)
 12251  7663  A016              	jz	l359
 12252                          	line	83
 12253                          ;fladd.c: 83: (*(unsigned long *)&f1) ^= 0x80000000UL;
 12254  7665  50 00             	mov	a,<(-2147483648)
 12255  7667  70 CF             	and	f, 0xCF   ;select user reg space
 12256  7669  62 D0 00          	mov	reg[CUR_PP],0
 12257  766C  34 4F             	xor	[3+((___fladd@f1)^0x0)],a
 12258  766E  50 00             	mov	a,<(-2147483648>>8)
 12259  7670  34 4E             	xor	[2+((___fladd@f1)^0x0)],a
 12260  7672  50 00             	mov	a,<(-2147483648>>16)
 12261  7674  34 4D             	xor	[1+((___fladd@f1)^0x0)],a
 12262  7676  50 80             	mov	a,<(-2147483648>>24)
 12263  7678  34 4C             	xor	[0+((___fladd@f1)^0x0)],a
 12264                          ;			
 12265  767A                    l359:	
 12266                          	line	84
 12267  767A  7D 767D           	xjmp	l333
 12268                          	line	85
 12269                          ;fladd.c: 85: }
 12270  767D                    l333:
 12271                          ;			
 12272  767D  70 CF             	and	f, 0xCF   ;select user reg space
 12273                          	
 12274  767F  7F                	ret
 12275                          GLOBAL __end_of___fladd
 12276  7680                    	__end_of___fladd:
 12277                          	FNSIZE	___fladd,9,8
 12278                          ; =============== function ___fladd ends ============
 12279                          
 12280                          	signat	___fladd,8316
 12281                          	global	___flmul
 12282                          	global	??___flmul
 12283                          	global	?___flmul
 12284                          	psect	text
 12285                          
 12286                          ; *************** function ___flmul *****************
 12287                          ; Defined at:
 12288                          ;		line 18 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flmul.c"
 12289                          ; Parameters:
 12290                          ;		f1          	offs:   0	type: unsigned char 
 12291                          ;		f2          	offs:   4	type: unsigned char 
 12292                          ; Auto variables:
 12293                          ;		f3          	       	type: unsigned char 
 12294                          ;		cntr        	       	type: unsigned char 
 12295                          ;		exp1        	       	type: unsigned char 
 12296                          ;		sign1       	       	type: unsigned char 
 12297                          ; Return value:
 12298                          ;		type: unsigned char 
 12299                          ;		size: 4
 12300                          ; Registers used:
 12301                          ;		a, x, CUR_PP
 12302                          ; Tracked objects:
 12303                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12304                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12305                          ;		Unchanged: 
 12306                          ; Data sizes:
 12307                          ;		Autos:    7
 12308                          ;		Params:   8
 12309                          ;		Temp:     4
 12310                          ;		Total:   19
 12311                          ; This function calls:
 12312                          ;		___flunpack
 12313                          ;		___flpack
 12314                          ; This function is called by:
 12315                          ;		_calc_sth11
 12316                          ;		_calc_dewpoint
 12317                          ;		_fround
 12318                          ;		_scale
 12319                          ;		_printf
 12320                          ;		_log
 12321                          ;		_log10
 12322                          ;		_eval_poly
 12323                          ; This function uses a non-reentrant model
 12324                          ; 
 12325                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flmul.c"
 12326                          	line	18
 12327  0215                    	__size_of___flmul	equ	__end_of___flmul-___flmul
 12328                          ;flmul.c: 16: double
 12329                          ;flmul.c: 17: __flmul(double f1, double f2)
 12330                          ;flmul.c: 18: {
 12331                          ;			
 12332  7680                    ___flmul:	
 12333                          	opt	disable
 12334                          	line	22
 12335                          ;flmul.c: 19: unsigned char exp1, sign1, cntr;
 12336                          ;flmul.c: 20: double f3;
 12337                          ;flmul.c: 22: (*(unsigned long *)&f3) = 0;
 12338  7680  50 00             	mov	a,<(0>>24)
 12339  7682  70 CF             	and	f, 0xCF   ;select user reg space
 12340  7684  62 D0 00          	mov	reg[CUR_PP],0
 12341  7687  53 65             	mov	[0+((___flmul@f3)^0x0)],a
 12342  7689  50 00             	mov	a,<(0>>16)
 12343  768B  53 66             	mov	[1+((___flmul@f3)^0x0)],a
 12344  768D  50 00             	mov	a,<(0>>8)
 12345  768F  53 67             	mov	[2+((___flmul@f3)^0x0)],a
 12346  7691  50 00             	mov	a,<(0)
 12347  7693  53 68             	mov	[3+((___flmul@f3)^0x0)],a
 12348                          	line	23
 12349                          ;flmul.c: 23: sign1 = __flunpack(&(*(unsigned long *)&f1), &exp1);
 12350  7695  50 5D             	mov	a,<((___flmul@f1|8000h))
 12351  7697  70 CF             	and	f, 0xCF   ;select user reg space
 12352  7699  62 D0 00          	mov	reg[CUR_PP],0
 12353  769C  53 71             	mov	[1+((?___flunpack)^0x0)],a
 12354  769E  50 80             	mov	a,>((___flmul@f1|8000h))
 12355  76A0  53 70             	mov	[0+((?___flunpack)^0x0)],a
 12356  76A2  50 6A             	mov	a,<((___flmul@exp1|8000h))
 12357  76A4  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 12358  76A6  50 80             	mov	a,>((___flmul@exp1|8000h))
 12359  76A8  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 12360  76AA  71 80             	or	f, 0x80	;select multiple RAM page mode
 12361                          	
 12362  76AC  7C 7AFC           	xcall	___flunpack
 12363                          	
 12364  76AF  70 CF             	and	f, 0xCF   ;select user reg space
 12365  76B1  62 D0 00          	mov	reg[CUR_PP],0
 12366  76B4  53 6B             	mov	[0+((___flmul@sign1)^0x0)],a
 12367                          	line	24
 12368                          ;flmul.c: 24: sign1 ^= __flunpack(&(*(unsigned long *)&f2), &cntr);
 12369  76B6  50 61             	mov	a,<((___flmul@f2|8000h))
 12370  76B8  70 CF             	and	f, 0xCF   ;select user reg space
 12371  76BA  62 D0 00          	mov	reg[CUR_PP],0
 12372  76BD  53 71             	mov	[1+((?___flunpack)^0x0)],a
 12373  76BF  50 80             	mov	a,>((___flmul@f2|8000h))
 12374  76C1  53 70             	mov	[0+((?___flunpack)^0x0)],a
 12375  76C3  50 69             	mov	a,<((___flmul@cntr|8000h))
 12376  76C5  53 73             	mov	[1+((0+?___flunpack+02h)^0x0)],a
 12377  76C7  50 80             	mov	a,>((___flmul@cntr|8000h))
 12378  76C9  53 72             	mov	[0+((0+?___flunpack+02h)^0x0)],a
 12379  76CB  71 80             	or	f, 0x80	;select multiple RAM page mode
 12380                          	
 12381  76CD  7C 7AFC           	xcall	___flunpack
 12382                          	
 12383  76D0  70 CF             	and	f, 0xCF   ;select user reg space
 12384  76D2  62 D0 00          	mov	reg[CUR_PP],0
 12385  76D5  53 6C             	mov	[(??___flmul^0x0)+7+0],a
 12386  76D7  51 6B             	mov	a,[0+((___flmul@sign1)^0x0)]
 12387  76D9  32 6C             	xor	a,[(??___flmul^0x0)+7+0]
 12388  76DB  53 6B             	mov	[0+((___flmul@sign1)^0x0)],a
 12389                          	line	25
 12390                          ;flmul.c: 25: if(cntr == 0 || exp1 == 0)
 12391  76DD  51 69             	mov	a,[0+((___flmul@cntr)^0x0)]
 12392  76DF  39 00             	cmp	a,(0)
 12393  76E1  A00C              	jz	l600001851
 12394  76E3  70 CF             	and	f, 0xCF   ;select user reg space
 12395  76E5  62 D0 00          	mov	reg[CUR_PP],0
 12396  76E8  51 6A             	mov	a,[0+((___flmul@exp1)^0x0)]
 12397  76EA  39 00             	cmp	a,(0)
 12398  76EC  B019              	jnz	l370
 12399                          ;			
 12400  76EE                    l600001851:	
 12401                          	line	26
 12402  76EE  70 CF             	and	f, 0xCF   ;select user reg space
 12403  76F0  62 D0 00          	mov	reg[CUR_PP],0
 12404  76F3  51 65             	mov	a,[0+((___flmul@f3)^0x0)]
 12405  76F5  53 5D             	mov	[0+((?___flmul)^0x0)],a
 12406  76F7  51 66             	mov	a,[1+((___flmul@f3)^0x0)]
 12407  76F9  53 5E             	mov	[1+((?___flmul)^0x0)],a
 12408  76FB  51 67             	mov	a,[2+((___flmul@f3)^0x0)]
 12409  76FD  53 5F             	mov	[2+((?___flmul)^0x0)],a
 12410  76FF  51 68             	mov	a,[3+((___flmul@f3)^0x0)]
 12411  7701  53 60             	mov	[3+((?___flmul)^0x0)],a
 12412  7703  7D 7892           	xjmp	l369
 12413                          ;			
 12414  7706                    l370:	
 12415                          	line	27
 12416                          ;flmul.c: 27: exp1 += cntr-127-6;
 12417  7706  50 7B             	mov	a,<((07Bh))
 12418  7708  70 CF             	and	f, 0xCF   ;select user reg space
 12419  770A  62 D0 00          	mov	reg[CUR_PP],0
 12420  770D  02 69             	add	a,[0+((___flmul@cntr)^0x0)]
 12421  770F  53 6C             	mov	[(??___flmul^0x0)+7+0],a
 12422  7711  51 6A             	mov	a,[0+((___flmul@exp1)^0x0)]
 12423  7713  02 6C             	add	a,[(??___flmul^0x0)+7+0]
 12424  7715  53 6A             	mov	[0+((___flmul@exp1)^0x0)],a
 12425                          	line	28
 12426                          ;flmul.c: 28: cntr = 7;
 12427  7717  50 07             	mov	a,<((07h))
 12428  7719  53 69             	mov	[0+((___flmul@cntr)^0x0)],a
 12429                          	line	29
 12430                          ;flmul.c: 29: do {
 12431                          ;			
 12432  771B                    l373:	
 12433                          	line	30
 12434                          ;flmul.c: 30: if((*(unsigned long *)&f1) & 1)
 12435  771B  70 CF             	and	f, 0xCF   ;select user reg space
 12436  771D  62 D0 00          	mov	reg[CUR_PP],0
 12437  7720  51 5D             	mov	a,[0+((___flmul@f1)^0x0)]
 12438  7722  53 6C             	mov	[(??___flmul^0x0)+7+0],a
 12439  7724  51 5E             	mov	a,[1+((___flmul@f1)^0x0)]
 12440  7726  53 6D             	mov	[(??___flmul^0x0)+7+0+1],a
 12441  7728  51 5F             	mov	a,[2+((___flmul@f1)^0x0)]
 12442  772A  53 6E             	mov	[(??___flmul^0x0)+7+0+2],a
 12443  772C  51 60             	mov	a,[3+((___flmul@f1)^0x0)]
 12444  772E  53 6F             	mov	[(??___flmul^0x0)+7+0+3],a
 12445  7730  50 01             	mov	a,<(01h)
 12446  7732  24 6F             	and	[(??___flmul^0x0)+7+3],a
 12447  7734  50 00             	mov	a,<(01h>>8)
 12448  7736  24 6E             	and	[(??___flmul^0x0)+7+2],a
 12449  7738  50 00             	mov	a,<(01h>>16)
 12450  773A  24 6D             	and	[(??___flmul^0x0)+7+1],a
 12451  773C  50 00             	mov	a,<(01h>>24)
 12452  773E  24 6C             	and	[(??___flmul^0x0)+7+0],a
 12453  7740  51 6C             	mov	a,[(??___flmul^0x0)+7+0]
 12454  7742  39 00             	cmp	a,<(0>>24)
 12455  7744  B011              	jnz	u1923
 12456  7746  51 6D             	mov	a,[(??___flmul^0x0)+7+1]
 12457  7748  39 00             	cmp	a,<(0>>16)
 12458  774A  B00B              	jnz	u1923
 12459  774C  51 6E             	mov	a,[(??___flmul^0x0)+7+2]
 12460  774E  39 00             	cmp	a,<(0>>8)
 12461  7750  B005              	jnz	u1923
 12462  7752  51 6F             	mov	a,[(??___flmul^0x0)+7+3]
 12463  7754  39 00             	cmp	a,<(0)
 12464  7756                    u1923:
 12465  7756  A016              	jz	l374
 12466                          	line	31
 12467                          ;flmul.c: 31: (*(unsigned long *)&f3) += (*(unsigned long *)&f2);
 12468  7758  70 CF             	and	f, 0xCF   ;select user reg space
 12469  775A  62 D0 00          	mov	reg[CUR_PP],0
 12470  775D  51 64             	mov	a,[3+((___flmul@f2)^0x0)]
 12471  775F  04 68             	add	[3+((___flmul@f3)^0x0)],a
 12472  7761  51 63             	mov	a,[2+((___flmul@f2)^0x0)]
 12473  7763  0C 67             	adc	[2+((___flmul@f3)^0x0)],a
 12474  7765  51 62             	mov	a,[1+((___flmul@f2)^0x0)]
 12475  7767  0C 66             	adc	[1+((___flmul@f3)^0x0)],a
 12476  7769  51 61             	mov	a,[0+((___flmul@f2)^0x0)]
 12477  776B  0C 65             	adc	[0+((___flmul@f3)^0x0)],a
 12478                          ;			
 12479  776D                    l374:	
 12480                          	line	32
 12481                          ;flmul.c: 32: (*(unsigned long *)&f1) >>= 1;
 12482  776D  50 01             	mov	a,<((01h))
 12483  776F  7D 7781           	xjmp	u1933
 12484  7772  70 FB             	clrc
 12485  7774                    u1944:
 12486  7774  70 CF             	and	f, 0xCF   ;select user reg space
 12487  7776  62 D0 00          	mov	reg[CUR_PP],0
 12488  7779  6E 5D             	rrc	[0+((___flmul@f1)^0x0)]
 12489  777B  6E 5E             	rrc	[1+((___flmul@f1)^0x0)]
 12490  777D  6E 5F             	rrc	[2+((___flmul@f1)^0x0)]
 12491  777F  6E 60             	rrc	[3+((___flmul@f1)^0x0)]
 12492  7781                    u1933:
 12493  7781  78                	dec	a
 12494  7782  DFF1              	jnc	u1944
 12495                          	line	33
 12496                          ;flmul.c: 33: (*(unsigned long *)&f2) <<= 1;
 12497  7784  50 01             	mov	a,<((01h))
 12498  7786  7D 7796           	xjmp	u1953
 12499  7789                    u1964:
 12500  7789  70 CF             	and	f, 0xCF   ;select user reg space
 12501  778B  62 D0 00          	mov	reg[CUR_PP],0
 12502  778E  65 64             	asl	[3+((___flmul@f2)^0x0)]
 12503  7790  6B 63             	rlc	[2+((___flmul@f2)^0x0)]
 12504  7792  6B 62             	rlc	[1+((___flmul@f2)^0x0)]
 12505  7794  6B 61             	rlc	[0+((___flmul@f2)^0x0)]
 12506  7796                    u1953:
 12507  7796  78                	dec	a
 12508  7797  DFF1              	jnc	u1964
 12509                          	line	34
 12510                          ;flmul.c: 34: } while(--cntr != 0);
 12511  7799  70 CF             	and	f, 0xCF   ;select user reg space
 12512  779B  62 D0 00          	mov	reg[CUR_PP],0
 12513  779E  51 69             	mov	a,[0+((___flmul@cntr)^0x0)]
 12514  77A0  11 01             	sub	a,<((01h))
 12515  77A2  53 69             	mov	[0+((___flmul@cntr)^0x0)],a
 12516  77A4  51 69             	mov	a,[0+((___flmul@cntr)^0x0)]
 12517  77A6  39 00             	cmp	a,(0)
 12518  77A8  BF72              	jnz	l373
 12519                          ;			
 12520  77AA                    l372:	
 12521                          	line	35
 12522                          ;flmul.c: 35: cntr = 17;
 12523  77AA  50 11             	mov	a,<((011h))
 12524  77AC  70 CF             	and	f, 0xCF   ;select user reg space
 12525  77AE  62 D0 00          	mov	reg[CUR_PP],0
 12526  77B1  53 69             	mov	[0+((___flmul@cntr)^0x0)],a
 12527                          	line	36
 12528                          ;flmul.c: 36: do {
 12529                          ;			
 12530  77B3                    l377:	
 12531                          	line	37
 12532                          ;flmul.c: 37: if((*(unsigned long *)&f1) & 1)
 12533  77B3  70 CF             	and	f, 0xCF   ;select user reg space
 12534  77B5  62 D0 00          	mov	reg[CUR_PP],0
 12535  77B8  51 5D             	mov	a,[0+((___flmul@f1)^0x0)]
 12536  77BA  53 6C             	mov	[(??___flmul^0x0)+7+0],a
 12537  77BC  51 5E             	mov	a,[1+((___flmul@f1)^0x0)]
 12538  77BE  53 6D             	mov	[(??___flmul^0x0)+7+0+1],a
 12539  77C0  51 5F             	mov	a,[2+((___flmul@f1)^0x0)]
 12540  77C2  53 6E             	mov	[(??___flmul^0x0)+7+0+2],a
 12541  77C4  51 60             	mov	a,[3+((___flmul@f1)^0x0)]
 12542  77C6  53 6F             	mov	[(??___flmul^0x0)+7+0+3],a
 12543  77C8  50 01             	mov	a,<(01h)
 12544  77CA  24 6F             	and	[(??___flmul^0x0)+7+3],a
 12545  77CC  50 00             	mov	a,<(01h>>8)
 12546  77CE  24 6E             	and	[(??___flmul^0x0)+7+2],a
 12547  77D0  50 00             	mov	a,<(01h>>16)
 12548  77D2  24 6D             	and	[(??___flmul^0x0)+7+1],a
 12549  77D4  50 00             	mov	a,<(01h>>24)
 12550  77D6  24 6C             	and	[(??___flmul^0x0)+7+0],a
 12551  77D8  51 6C             	mov	a,[(??___flmul^0x0)+7+0]
 12552  77DA  39 00             	cmp	a,<(0>>24)
 12553  77DC  B011              	jnz	u1973
 12554  77DE  51 6D             	mov	a,[(??___flmul^0x0)+7+1]
 12555  77E0  39 00             	cmp	a,<(0>>16)
 12556  77E2  B00B              	jnz	u1973
 12557  77E4  51 6E             	mov	a,[(??___flmul^0x0)+7+2]
 12558  77E6  39 00             	cmp	a,<(0>>8)
 12559  77E8  B005              	jnz	u1973
 12560  77EA  51 6F             	mov	a,[(??___flmul^0x0)+7+3]
 12561  77EC  39 00             	cmp	a,<(0)
 12562  77EE                    u1973:
 12563  77EE  A016              	jz	l378
 12564                          	line	38
 12565                          ;flmul.c: 38: (*(unsigned long *)&f3) += (*(unsigned long *)&f2);
 12566  77F0  70 CF             	and	f, 0xCF   ;select user reg space
 12567  77F2  62 D0 00          	mov	reg[CUR_PP],0
 12568  77F5  51 64             	mov	a,[3+((___flmul@f2)^0x0)]
 12569  77F7  04 68             	add	[3+((___flmul@f3)^0x0)],a
 12570  77F9  51 63             	mov	a,[2+((___flmul@f2)^0x0)]
 12571  77FB  0C 67             	adc	[2+((___flmul@f3)^0x0)],a
 12572  77FD  51 62             	mov	a,[1+((___flmul@f2)^0x0)]
 12573  77FF  0C 66             	adc	[1+((___flmul@f3)^0x0)],a
 12574  7801  51 61             	mov	a,[0+((___flmul@f2)^0x0)]
 12575  7803  0C 65             	adc	[0+((___flmul@f3)^0x0)],a
 12576                          ;			
 12577  7805                    l378:	
 12578                          	line	39
 12579                          ;flmul.c: 39: (*(unsigned long *)&f1) >>= 1;
 12580  7805  50 01             	mov	a,<((01h))
 12581  7807  7D 7819           	xjmp	u1983
 12582  780A  70 FB             	clrc
 12583  780C                    u1994:
 12584  780C  70 CF             	and	f, 0xCF   ;select user reg space
 12585  780E  62 D0 00          	mov	reg[CUR_PP],0
 12586  7811  6E 5D             	rrc	[0+((___flmul@f1)^0x0)]
 12587  7813  6E 5E             	rrc	[1+((___flmul@f1)^0x0)]
 12588  7815  6E 5F             	rrc	[2+((___flmul@f1)^0x0)]
 12589  7817  6E 60             	rrc	[3+((___flmul@f1)^0x0)]
 12590  7819                    u1983:
 12591  7819  78                	dec	a
 12592  781A  DFF1              	jnc	u1994
 12593                          	line	40
 12594                          ;flmul.c: 40: (*(unsigned long *)&f3) >>= 1;
 12595  781C  50 01             	mov	a,<((01h))
 12596  781E  7D 7830           	xjmp	u2003
 12597  7821  70 FB             	clrc
 12598  7823                    u2014:
 12599  7823  70 CF             	and	f, 0xCF   ;select user reg space
 12600  7825  62 D0 00          	mov	reg[CUR_PP],0
 12601  7828  6E 65             	rrc	[0+((___flmul@f3)^0x0)]
 12602  782A  6E 66             	rrc	[1+((___flmul@f3)^0x0)]
 12603  782C  6E 67             	rrc	[2+((___flmul@f3)^0x0)]
 12604  782E  6E 68             	rrc	[3+((___flmul@f3)^0x0)]
 12605  7830                    u2003:
 12606  7830  78                	dec	a
 12607  7831  DFF1              	jnc	u2014
 12608                          	line	41
 12609                          ;flmul.c: 41: } while(--cntr != 0);
 12610  7833  70 CF             	and	f, 0xCF   ;select user reg space
 12611  7835  62 D0 00          	mov	reg[CUR_PP],0
 12612  7838  51 69             	mov	a,[0+((___flmul@cntr)^0x0)]
 12613  783A  11 01             	sub	a,<((01h))
 12614  783C  53 69             	mov	[0+((___flmul@cntr)^0x0)],a
 12615  783E  51 69             	mov	a,[0+((___flmul@cntr)^0x0)]
 12616  7840  39 00             	cmp	a,(0)
 12617  7842  BF70              	jnz	l377
 12618                          ;			
 12619  7844                    l376:	
 12620                          	line	42
 12621                          ;flmul.c: 42: __flpack(&(*(unsigned long *)&f3), exp1);
 12622  7844  50 65             	mov	a,<((___flmul@f3|8000h))
 12623  7846  70 CF             	and	f, 0xCF   ;select user reg space
 12624  7848  62 D0 00          	mov	reg[CUR_PP],0
 12625  784B  53 71             	mov	[1+((?___flpack)^0x0)],a
 12626  784D  50 80             	mov	a,>((___flmul@f3|8000h))
 12627  784F  53 70             	mov	[0+((?___flpack)^0x0)],a
 12628  7851  51 6A             	mov	a,[0+((___flmul@exp1)^0x0)]
 12629  7853  53 72             	mov	[0+((0+?___flpack+02h)^0x0)],a
 12630  7855  71 80             	or	f, 0x80	;select multiple RAM page mode
 12631                          	
 12632  7857  7C 78CD           	xcall	___flpack
 12633                          	
 12634                          	line	43
 12635                          ;flmul.c: 43: if(sign1)
 12636  785A  70 CF             	and	f, 0xCF   ;select user reg space
 12637  785C  62 D0 00          	mov	reg[CUR_PP],0
 12638  785F  51 6B             	mov	a,[0+((___flmul@sign1)^0x0)]
 12639  7861  39 00             	cmp	a,(0)
 12640  7863  A016              	jz	l379
 12641                          	line	44
 12642                          ;flmul.c: 44: (*(unsigned long *)&f3) |= 0x80000000;
 12643  7865  50 00             	mov	a,<(-2147483648)
 12644  7867  70 CF             	and	f, 0xCF   ;select user reg space
 12645  7869  62 D0 00          	mov	reg[CUR_PP],0
 12646  786C  2C 68             	or	[3+((___flmul@f3)^0x0)],a
 12647  786E  50 00             	mov	a,<(-2147483648>>8)
 12648  7870  2C 67             	or	[2+((___flmul@f3)^0x0)],a
 12649  7872  50 00             	mov	a,<(-2147483648>>16)
 12650  7874  2C 66             	or	[1+((___flmul@f3)^0x0)],a
 12651  7876  50 80             	mov	a,<(-2147483648>>24)
 12652  7878  2C 65             	or	[0+((___flmul@f3)^0x0)],a
 12653                          ;			
 12654  787A                    l379:	
 12655                          	line	45
 12656  787A  70 CF             	and	f, 0xCF   ;select user reg space
 12657  787C  62 D0 00          	mov	reg[CUR_PP],0
 12658  787F  51 65             	mov	a,[0+((___flmul@f3)^0x0)]
 12659  7881  53 5D             	mov	[0+((?___flmul)^0x0)],a
 12660  7883  51 66             	mov	a,[1+((___flmul@f3)^0x0)]
 12661  7885  53 5E             	mov	[1+((?___flmul)^0x0)],a
 12662  7887  51 67             	mov	a,[2+((___flmul@f3)^0x0)]
 12663  7889  53 5F             	mov	[2+((?___flmul)^0x0)],a
 12664  788B  51 68             	mov	a,[3+((___flmul@f3)^0x0)]
 12665  788D  53 60             	mov	[3+((?___flmul)^0x0)],a
 12666  788F  7D 7892           	xjmp	l369
 12667                          	line	46
 12668                          ;flmul.c: 46: }
 12669  7892                    l369:
 12670                          ;			
 12671  7892  70 CF             	and	f, 0xCF   ;select user reg space
 12672                          	
 12673  7894  7F                	ret
 12674                          GLOBAL __end_of___flmul
 12675  7895                    	__end_of___flmul:
 12676                          	FNSIZE	___flmul,11,8
 12677                          ; =============== function ___flmul ends ============
 12678                          
 12679                          	signat	___flmul,8316
 12680                          	global	___flneg
 12681                          	global	??___flneg
 12682                          	global	?___flneg
 12683                          	psect	text
 12684                          
 12685                          ; *************** function ___flneg *****************
 12686                          ; Defined at:
 12687                          ;		line 16 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flneg.c"
 12688                          ; Parameters:
 12689                          ;		f1          	offs:   0	type: unsigned char 
 12690                          ; Auto variables:
 12691                          ;		None
 12692                          ; Return value:
 12693                          ;		type: unsigned char 
 12694                          ;		size: 4
 12695                          ; Registers used:
 12696                          ;		a, CUR_PP
 12697                          ; Tracked objects:
 12698                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12699                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12700                          ;		Unchanged: 
 12701                          ; Data sizes:
 12702                          ;		Autos:    0
 12703                          ;		Params:   4
 12704                          ;		Temp:     0
 12705                          ;		Total:    4
 12706                          ; This function calls:
 12707                          ;		Nothing
 12708                          ; This function is called by:
 12709                          ;		_printf
 12710                          ;		___awtofl
 12711                          ; This function uses a non-reentrant model
 12712                          ; 
 12713                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\flneg.c"
 12714                          	line	16
 12715  0038                    	__size_of___flneg	equ	__end_of___flneg-___flneg
 12716                          ;flneg.c: 14: double
 12717                          ;flneg.c: 15: __flneg(double f1)
 12718                          ;flneg.c: 16: {
 12719                          ;			
 12720  7895                    ___flneg:	
 12721                          	opt	disable
 12722                          	line	17
 12723                          ;flneg.c: 17: if(f1 != 0)
 12724  7895  70 CF             	and	f, 0xCF   ;select user reg space
 12725  7897  62 D0 00          	mov	reg[CUR_PP],0
 12726  789A  51 4B             	mov	a,[0+((___flneg@f1)^0x0)]
 12727  789C  39 00             	cmp	a,<(0x0>>24)
 12728  789E  B011              	jnz	u2193
 12729  78A0  51 4C             	mov	a,[1+((___flneg@f1)^0x0)]
 12730  78A2  39 00             	cmp	a,<(0x0>>16)
 12731  78A4  B00B              	jnz	u2193
 12732  78A6  51 4D             	mov	a,[2+((___flneg@f1)^0x0)]
 12733  78A8  39 00             	cmp	a,<(0x0>>8)
 12734  78AA  B005              	jnz	u2193
 12735  78AC  51 4E             	mov	a,[3+((___flneg@f1)^0x0)]
 12736  78AE  39 00             	cmp	a,<(0x0)
 12737  78B0                    u2193:
 12738  78B0  A016              	jz	l433
 12739                          	line	18
 12740                          ;flneg.c: 18: (*(unsigned long *)&f1) ^= 0x80000000UL;
 12741  78B2  50 00             	mov	a,<(-2147483648)
 12742  78B4  70 CF             	and	f, 0xCF   ;select user reg space
 12743  78B6  62 D0 00          	mov	reg[CUR_PP],0
 12744  78B9  34 4E             	xor	[3+((___flneg@f1)^0x0)],a
 12745  78BB  50 00             	mov	a,<(-2147483648>>8)
 12746  78BD  34 4D             	xor	[2+((___flneg@f1)^0x0)],a
 12747  78BF  50 00             	mov	a,<(-2147483648>>16)
 12748  78C1  34 4C             	xor	[1+((___flneg@f1)^0x0)],a
 12749  78C3  50 80             	mov	a,<(-2147483648>>24)
 12750  78C5  34 4B             	xor	[0+((___flneg@f1)^0x0)],a
 12751                          ;			
 12752  78C7                    l433:	
 12753                          	line	19
 12754  78C7  7D 78CA           	xjmp	l432
 12755                          	line	20
 12756                          ;flneg.c: 20: }
 12757  78CA                    l432:
 12758                          ;			
 12759  78CA  70 CF             	and	f, 0xCF   ;select user reg space
 12760                          	
 12761  78CC  7F                	ret
 12762                          GLOBAL __end_of___flneg
 12763  78CD                    	__end_of___flneg:
 12764                          	FNSIZE	___flneg,0,4
 12765                          ; =============== function ___flneg ends ============
 12766                          
 12767                          	signat	___flneg,4220
 12768                          	global	___flpack
 12769                          	global	??___flpack
 12770                          	global	?___flpack
 12771                          	psect	text
 12772                          
 12773                          ; *************** function ___flpack *****************
 12774                          ; Defined at:
 12775                          ;		line 33 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\double.c"
 12776                          ; Parameters:
 12777                          ;		arg         	offs:   0	type: PTR unsigned long ; Largest target is 4
 12778                          ;		 -> __lttofl@f1(4), __attofl@f1(4), __lltofl@f1(4), __altofl@f1(4), 
 12779                          ;		 -> __lwtofl@f1(4), __awtofl@f1(4), __lbtofl@f1(4), __abtofl@f1(4), 
 12780                          ;		 -> __flmul@f3(4), __fldiv@f3(4), __fladd@f1(4), 
 12781                          ;		exp         	offs:   2	type: unsigned char 
 12782                          ; Auto variables:
 12783                          ;		None
 12784                          ; Return value:
 12785                          ;		type: void 
 12786                          ;		size: 0
 12787                          ; Registers used:
 12788                          ;		a, x, CUR_PP
 12789                          ; Tracked objects:
 12790                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12791                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 12792                          ;		Unchanged: 
 12793                          ; Data sizes:
 12794                          ;		Autos:    0
 12795                          ;		Params:   3
 12796                          ;		Temp:     6
 12797                          ;		Total:    9
 12798                          ; This function calls:
 12799                          ;		Nothing
 12800                          ; This function is called by:
 12801                          ;		___fladd
 12802                          ;		___fldiv
 12803                          ;		___flmul
 12804                          ;		___awtofl
 12805                          ;		___lwtofl
 12806                          ;		___lltofl
 12807                          ; This function uses a non-reentrant model
 12808                          ; 
 12809                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\double.c"
 12810                          	line	33
 12811  022F                    	__size_of___flpack	equ	__end_of___flpack-___flpack
 12812                          ;double.c: 31: void
 12813                          ;double.c: 32: __flpack(unsigned long * arg, unsigned char exp)
 12814                          ;double.c: 33: {
 12815                          ;			
 12816  78CD                    ___flpack:	
 12817                          	opt	disable
 12818                          	line	34
 12819                          ;double.c: 34: if(exp == 0 || *arg == 0) {
 12820  78CD  70 CF             	and	f, 0xCF   ;select user reg space
 12821  78CF  62 D0 00          	mov	reg[CUR_PP],0
 12822  78D2  51 72             	mov	a,[0+((___flpack@exp)^0x0)]
 12823  78D4  39 00             	cmp	a,(0)
 12824  78D6  A024              	jz	l600001848
 12825  78D8  70 CF             	and	f, 0xCF   ;select user reg space
 12826  78DA  62 D0 00          	mov	reg[CUR_PP],0
 12827  78DD  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 12828  78DF  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 12829  78E1  60 D3             	mov	reg[0xd3],a
 12830  78E3  52 00             	mov	a,[0+x]
 12831  78E5  39 00             	cmp	a,<(0>>24)
 12832  78E7  B011              	jnz	u1653
 12833  78E9  52 01             	mov	a,[1+x]
 12834  78EB  39 00             	cmp	a,<(0>>16)
 12835  78ED  B00B              	jnz	u1653
 12836  78EF  52 02             	mov	a,[2+x]
 12837  78F1  39 00             	cmp	a,<(0>>8)
 12838  78F3  B005              	jnz	u1653
 12839  78F5  52 03             	mov	a,[3+x]
 12840  78F7  39 00             	cmp	a,<(0)
 12841  78F9                    u1653:
 12842  78F9  B01F              	jnz	l322
 12843                          ;			
 12844  78FB                    l600001848:	
 12845                          	line	35
 12846                          ;double.c: 35: *arg = 0;
 12847  78FB  70 CF             	and	f, 0xCF   ;select user reg space
 12848  78FD  62 D0 00          	mov	reg[CUR_PP],0
 12849  7900  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 12850  7902  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 12851  7904  60 D3             	mov	reg[0xd3],a
 12852  7906  50 00             	mov	a,<(0>>24)
 12853  7908  54 00             	mov	[0+x],a
 12854  790A  50 00             	mov	a,<(0>>16)
 12855  790C  54 01             	mov	[1+x],a
 12856  790E  50 00             	mov	a,<(0>>8)
 12857  7910  54 02             	mov	[2+x],a
 12858  7912  50 00             	mov	a,<(0)
 12859  7914  54 03             	mov	[3+x],a
 12860                          	line	36
 12861                          ;double.c: 36: return;
 12862  7916  7D 7AF9           	xjmp	l321
 12863                          	line	37
 12864                          ;			
 12865  7919                    l322:	
 12866                          	line	38
 12867                          ;double.c: 37: }
 12868                          ;double.c: 38: while(*arg & ~0x1FFFFFFUL) {
 12869  7919  7D 7948           	xjmp	l323
 12870                          ;			
 12871  791C                    l324:	
 12872                          	line	39
 12873                          ;double.c: 39: exp++;
 12874  791C  70 CF             	and	f, 0xCF   ;select user reg space
 12875  791E  62 D0 00          	mov	reg[CUR_PP],0
 12876  7921  51 72             	mov	a,[0+((___flpack@exp)^0x0)]
 12877  7923  01 01             	add	a,<((01h))
 12878  7925  53 72             	mov	[0+((___flpack@exp)^0x0)],a
 12879                          	line	40
 12880                          ;double.c: 40: *arg >>= 1;
 12881  7927  50 01             	mov	a,<((01h))
 12882  7929  08                	push	a
 12883  792A  70 CF             	and	f, 0xCF   ;select user reg space
 12884  792C  62 D0 00          	mov	reg[CUR_PP],0
 12885  792F  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 12886  7931  08                	push	a
 12887  7932  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 12888  7934  18                	pop	a
 12889  7935  60 D3             	mov	reg[0xd3],a
 12890  7937  18                	pop	a
 12891  7938  7D 7945           	xjmp	u1663
 12892  793B  70 FB             	clrc
 12893  793D                    u1674:
 12894  793D  6F 00             	rrc	[0+x]
 12895  793F  6F 01             	rrc	[1+x]
 12896  7941  6F 02             	rrc	[2+x]
 12897  7943  6F 03             	rrc	[3+x]
 12898  7945                    u1663:
 12899  7945  78                	dec	a
 12900  7946  DFF6              	jnc	u1674
 12901                          	line	41
 12902                          ;			
 12903  7948                    l323:	
 12904                          	line	38
 12905  7948  70 CF             	and	f, 0xCF   ;select user reg space
 12906  794A  62 D0 00          	mov	reg[CUR_PP],0
 12907  794D  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 12908  794F  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 12909  7951  60 D3             	mov	reg[0xd3],a
 12910  7953  52 00             	mov	a,[x+0]
 12911  7955  53 73             	mov	[(??___flpack^0x0)+0+0],a
 12912  7957  52 01             	mov	a,[x+1]
 12913  7959  53 74             	mov	[(??___flpack^0x0)+0+0+1],a
 12914  795B  52 02             	mov	a,[x+2]
 12915  795D  53 75             	mov	[(??___flpack^0x0)+0+0+2],a
 12916  795F  52 03             	mov	a,[x+3]
 12917  7961  53 76             	mov	[(??___flpack^0x0)+0+0+3],a
 12918  7963  50 00             	mov	a,<(-33554432)
 12919  7965  24 76             	and	[(??___flpack^0x0)+0+3],a
 12920  7967  50 00             	mov	a,<(-33554432>>8)
 12921  7969  24 75             	and	[(??___flpack^0x0)+0+2],a
 12922  796B  50 00             	mov	a,<(-33554432>>16)
 12923  796D  24 74             	and	[(??___flpack^0x0)+0+1],a
 12924  796F  50 FE             	mov	a,<(-33554432>>24)
 12925  7971  24 73             	and	[(??___flpack^0x0)+0+0],a
 12926  7973  51 73             	mov	a,[(??___flpack^0x0)+0+0]
 12927  7975  39 00             	cmp	a,<(0>>24)
 12928  7977  B011              	jnz	u1683
 12929  7979  51 74             	mov	a,[(??___flpack^0x0)+0+1]
 12930  797B  39 00             	cmp	a,<(0>>16)
 12931  797D  B00B              	jnz	u1683
 12932  797F  51 75             	mov	a,[(??___flpack^0x0)+0+2]
 12933  7981  39 00             	cmp	a,<(0>>8)
 12934  7983  B005              	jnz	u1683
 12935  7985  51 76             	mov	a,[(??___flpack^0x0)+0+3]
 12936  7987  39 00             	cmp	a,<(0)
 12937  7989                    u1683:
 12938  7989  BF92              	jnz	l324
 12939                          ;			
 12940  798B                    l325:	
 12941                          	line	42
 12942                          ;double.c: 41: }
 12943                          ;double.c: 42: while(*arg & ~0xFFFFFFUL) {
 12944  798B  7D 79D5           	xjmp	l326
 12945                          ;			
 12946  798E                    l327:	
 12947                          	line	43
 12948                          ;double.c: 43: exp++;
 12949  798E  70 CF             	and	f, 0xCF   ;select user reg space
 12950  7990  62 D0 00          	mov	reg[CUR_PP],0
 12951  7993  51 72             	mov	a,[0+((___flpack@exp)^0x0)]
 12952  7995  01 01             	add	a,<((01h))
 12953  7997  53 72             	mov	[0+((___flpack@exp)^0x0)],a
 12954                          	line	44
 12955                          ;double.c: 44: (*arg)++;
 12956  7999  70 CF             	and	f, 0xCF   ;select user reg space
 12957  799B  62 D0 00          	mov	reg[CUR_PP],0
 12958  799E  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 12959  79A0  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 12960  79A2  60 D3             	mov	reg[0xd3],a
 12961  79A4  50 01             	mov	a,<(01h)
 12962  79A6  05 03             	add	[3+x],a
 12963  79A8  50 00             	mov	a,<(01h>>8)
 12964  79AA  0D 02             	adc	[2+x],a
 12965  79AC  50 00             	mov	a,<(01h>>16)
 12966  79AE  0D 01             	adc	[1+x],a
 12967  79B0  50 00             	mov	a,<(01h>>24)
 12968  79B2  0D 00             	adc	[0+x],a
 12969                          	line	45
 12970                          ;double.c: 45: *arg >>= 1;
 12971  79B4  50 01             	mov	a,<((01h))
 12972  79B6  08                	push	a
 12973  79B7  70 CF             	and	f, 0xCF   ;select user reg space
 12974  79B9  62 D0 00          	mov	reg[CUR_PP],0
 12975  79BC  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 12976  79BE  08                	push	a
 12977  79BF  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 12978  79C1  18                	pop	a
 12979  79C2  60 D3             	mov	reg[0xd3],a
 12980  79C4  18                	pop	a
 12981  79C5  7D 79D2           	xjmp	u1693
 12982  79C8  70 FB             	clrc
 12983  79CA                    u1704:
 12984  79CA  6F 00             	rrc	[0+x]
 12985  79CC  6F 01             	rrc	[1+x]
 12986  79CE  6F 02             	rrc	[2+x]
 12987  79D0  6F 03             	rrc	[3+x]
 12988  79D2                    u1693:
 12989  79D2  78                	dec	a
 12990  79D3  DFF6              	jnc	u1704
 12991                          	line	46
 12992                          ;			
 12993  79D5                    l326:	
 12994                          	line	42
 12995  79D5  70 CF             	and	f, 0xCF   ;select user reg space
 12996  79D7  62 D0 00          	mov	reg[CUR_PP],0
 12997  79DA  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 12998  79DC  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 12999  79DE  60 D3             	mov	reg[0xd3],a
 13000  79E0  52 00             	mov	a,[x+0]
 13001  79E2  53 73             	mov	[(??___flpack^0x0)+0+0],a
 13002  79E4  52 01             	mov	a,[x+1]
 13003  79E6  53 74             	mov	[(??___flpack^0x0)+0+0+1],a
 13004  79E8  52 02             	mov	a,[x+2]
 13005  79EA  53 75             	mov	[(??___flpack^0x0)+0+0+2],a
 13006  79EC  52 03             	mov	a,[x+3]
 13007  79EE  53 76             	mov	[(??___flpack^0x0)+0+0+3],a
 13008  79F0  50 00             	mov	a,<(-16777216)
 13009  79F2  24 76             	and	[(??___flpack^0x0)+0+3],a
 13010  79F4  50 00             	mov	a,<(-16777216>>8)
 13011  79F6  24 75             	and	[(??___flpack^0x0)+0+2],a
 13012  79F8  50 00             	mov	a,<(-16777216>>16)
 13013  79FA  24 74             	and	[(??___flpack^0x0)+0+1],a
 13014  79FC  50 FF             	mov	a,<(-16777216>>24)
 13015  79FE  24 73             	and	[(??___flpack^0x0)+0+0],a
 13016  7A00  51 73             	mov	a,[(??___flpack^0x0)+0+0]
 13017  7A02  39 00             	cmp	a,<(0>>24)
 13018  7A04  B011              	jnz	u1713
 13019  7A06  51 74             	mov	a,[(??___flpack^0x0)+0+1]
 13020  7A08  39 00             	cmp	a,<(0>>16)
 13021  7A0A  B00B              	jnz	u1713
 13022  7A0C  51 75             	mov	a,[(??___flpack^0x0)+0+2]
 13023  7A0E  39 00             	cmp	a,<(0>>8)
 13024  7A10  B005              	jnz	u1713
 13025  7A12  51 76             	mov	a,[(??___flpack^0x0)+0+3]
 13026  7A14  39 00             	cmp	a,<(0)
 13027  7A16                    u1713:
 13028  7A16  BF77              	jnz	l327
 13029                          ;			
 13030  7A18                    l328:	
 13031                          	line	47
 13032                          ;double.c: 46: }
 13033                          ;double.c: 47: while(!(*arg & 0x800000UL)) {
 13034  7A18  7D 7A45           	xjmp	l329
 13035                          ;			
 13036  7A1B                    l330:	
 13037                          	line	48
 13038                          ;double.c: 48: exp--;
 13039  7A1B  70 CF             	and	f, 0xCF   ;select user reg space
 13040  7A1D  62 D0 00          	mov	reg[CUR_PP],0
 13041  7A20  51 72             	mov	a,[0+((___flpack@exp)^0x0)]
 13042  7A22  11 01             	sub	a,<((01h))
 13043  7A24  53 72             	mov	[0+((___flpack@exp)^0x0)],a
 13044                          	line	49
 13045                          ;double.c: 49: *arg <<= 1;
 13046  7A26  50 01             	mov	a,<((01h))
 13047  7A28  08                	push	a
 13048  7A29  70 CF             	and	f, 0xCF   ;select user reg space
 13049  7A2B  62 D0 00          	mov	reg[CUR_PP],0
 13050  7A2E  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 13051  7A30  08                	push	a
 13052  7A31  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 13053  7A33  18                	pop	a
 13054  7A34  60 D3             	mov	reg[0xd3],a
 13055  7A36  18                	pop	a
 13056  7A37  7D 7A42           	xjmp	u1723
 13057  7A3A                    u1734:
 13058  7A3A  66 03             	asl	[3+x]
 13059  7A3C  6C 02             	rlc	[2+x]
 13060  7A3E  6C 01             	rlc	[1+x]
 13061  7A40  6C 00             	rlc	[0+x]
 13062  7A42                    u1723:
 13063  7A42  78                	dec	a
 13064  7A43  DFF6              	jnc	u1734
 13065                          	line	50
 13066                          ;			
 13067  7A45                    l329:	
 13068                          	line	47
 13069  7A45  70 CF             	and	f, 0xCF   ;select user reg space
 13070  7A47  62 D0 00          	mov	reg[CUR_PP],0
 13071  7A4A  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 13072  7A4C  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 13073  7A4E  60 D3             	mov	reg[0xd3],a
 13074  7A50  52 00             	mov	a,[x+0]
 13075  7A52  53 73             	mov	[(??___flpack^0x0)+0+0],a
 13076  7A54  52 01             	mov	a,[x+1]
 13077  7A56  53 74             	mov	[(??___flpack^0x0)+0+0+1],a
 13078  7A58  52 02             	mov	a,[x+2]
 13079  7A5A  53 75             	mov	[(??___flpack^0x0)+0+0+2],a
 13080  7A5C  52 03             	mov	a,[x+3]
 13081  7A5E  53 76             	mov	[(??___flpack^0x0)+0+0+3],a
 13082  7A60  50 00             	mov	a,<(0800000h)
 13083  7A62  24 76             	and	[(??___flpack^0x0)+0+3],a
 13084  7A64  50 00             	mov	a,<(0800000h>>8)
 13085  7A66  24 75             	and	[(??___flpack^0x0)+0+2],a
 13086  7A68  50 80             	mov	a,<(0800000h>>16)
 13087  7A6A  24 74             	and	[(??___flpack^0x0)+0+1],a
 13088  7A6C  50 00             	mov	a,<(0800000h>>24)
 13089  7A6E  24 73             	and	[(??___flpack^0x0)+0+0],a
 13090  7A70  51 73             	mov	a,[(??___flpack^0x0)+0+0]
 13091  7A72  39 00             	cmp	a,<(0>>24)
 13092  7A74  B011              	jnz	u1743
 13093  7A76  51 74             	mov	a,[(??___flpack^0x0)+0+1]
 13094  7A78  39 00             	cmp	a,<(0>>16)
 13095  7A7A  B00B              	jnz	u1743
 13096  7A7C  51 75             	mov	a,[(??___flpack^0x0)+0+2]
 13097  7A7E  39 00             	cmp	a,<(0>>8)
 13098  7A80  B005              	jnz	u1743
 13099  7A82  51 76             	mov	a,[(??___flpack^0x0)+0+3]
 13100  7A84  39 00             	cmp	a,<(0)
 13101  7A86                    u1743:
 13102  7A86  AF94              	jz	l330
 13103                          ;			
 13104  7A88                    l331:	
 13105                          	line	51
 13106                          ;double.c: 50: }
 13107                          ;double.c: 51: if(!(exp & 1))
 13108  7A88  70 CF             	and	f, 0xCF   ;select user reg space
 13109  7A8A  62 D0 00          	mov	reg[CUR_PP],0
 13110  7A8D  51 72             	mov	a,[0+((___flpack@exp)^0x0)]
 13111  7A8F  21 01             	and	a,<((01h))
 13112  7A91  39 00             	cmp	a,(0)
 13113  7A93  B01C              	jnz	l332
 13114                          	line	52
 13115                          ;double.c: 52: *arg &= ~0x800000UL;
 13116  7A95  70 CF             	and	f, 0xCF   ;select user reg space
 13117  7A97  62 D0 00          	mov	reg[CUR_PP],0
 13118  7A9A  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 13119  7A9C  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 13120  7A9E  60 D3             	mov	reg[0xd3],a
 13121  7AA0  50 FF             	mov	a,<(-8388609)
 13122  7AA2  25 03             	and	[3+x],a
 13123  7AA4  50 FF             	mov	a,<(-8388609>>8)
 13124  7AA6  25 02             	and	[2+x],a
 13125  7AA8  50 7F             	mov	a,<(-8388609>>16)
 13126  7AAA  25 01             	and	[1+x],a
 13127  7AAC  50 FF             	mov	a,<(-8388609>>24)
 13128  7AAE  25 00             	and	[0+x],a
 13129                          ;			
 13130  7AB0                    l332:	
 13131                          	line	53
 13132                          ;double.c: 53: exp >>= 1;
 13133  7AB0  50 01             	mov	a,<((01h))
 13134  7AB2  7D 7ABE           	xjmp	u1753
 13135  7AB5  70 FB             	clrc
 13136  7AB7                    u1764:
 13137  7AB7  70 CF             	and	f, 0xCF   ;select user reg space
 13138  7AB9  62 D0 00          	mov	reg[CUR_PP],0
 13139  7ABC  6E 72             	rrc	[0+((___flpack@exp)^0x0)]
 13140  7ABE                    u1753:
 13141  7ABE  78                	dec	a
 13142  7ABF  DFF7              	jnc	u1764
 13143                          	line	54
 13144                          ;double.c: 54: *arg |= (unsigned long)exp << 24;
 13145  7AC1  70 CF             	and	f, 0xCF   ;select user reg space
 13146  7AC3  62 D0 00          	mov	reg[CUR_PP],0
 13147  7AC6  51 72             	mov	a,[0+((___flpack@exp)^0x0)]
 13148  7AC8  53 76             	mov	[(??___flpack^0x0)+0+0+3],a
 13149  7ACA  55 75  00         	mov	[(??___flpack^0x0)+0+0+2],0
 13150  7ACD  55 74  00         	mov	[(??___flpack^0x0)+0+0+1],0
 13151  7AD0  55 73  00         	mov	[(??___flpack^0x0)+0+0+0],0
 13152  7AD3  50 18             	mov	a,<((018h))
 13153  7AD5  7D 7AE0           	xjmp	u1773
 13154  7AD8                    u1784:
 13155  7AD8  65 76             	asl	[(??___flpack^0x0)+0+3]
 13156  7ADA  6B 75             	rlc	[(??___flpack^0x0)+0+2]
 13157  7ADC  6B 74             	rlc	[(??___flpack^0x0)+0+1]
 13158  7ADE  6B 73             	rlc	[(??___flpack^0x0)+0+0]
 13159  7AE0                    u1773:
 13160  7AE0  78                	dec	a
 13161  7AE1  DFF6              	jnc	u1784
 13162  7AE3  51 70             	mov	a,[0+((___flpack@arg)^0x0)]
 13163  7AE5  58 71             	mov	x,[1+((___flpack@arg)^0x0)]
 13164  7AE7  60 D3             	mov	reg[0xd3],a
 13165  7AE9  51 76             	mov	a,[(??___flpack^0x0)+0+3]
 13166  7AEB  2D 03             	or	[3+x],a
 13167  7AED  51 75             	mov	a,[(??___flpack^0x0)+0+2]
 13168  7AEF  2D 02             	or	[2+x],a
 13169  7AF1  51 74             	mov	a,[(??___flpack^0x0)+0+1]
 13170  7AF3  2D 01             	or	[1+x],a
 13171  7AF5  51 73             	mov	a,[(??___flpack^0x0)+0+0]
 13172  7AF7  2D 00             	or	[0+x],a
 13173                          	line	55
 13174                          ;double.c: 55: }
 13175  7AF9                    l321:
 13176                          ;			
 13177  7AF9  70 CF             	and	f, 0xCF   ;select user reg space
 13178                          	
 13179  7AFB  7F                	ret
 13180                          GLOBAL __end_of___flpack
 13181  7AFC                    	__end_of___flpack:
 13182                          	FNSIZE	___flpack,6,3
 13183                          ; =============== function ___flpack ends ============
 13184                          
 13185                          	signat	___flpack,8312
 13186                          	global	___flunpack
 13187                          	global	??___flunpack
 13188                          	global	?___flunpack
 13189                          	psect	text
 13190                          
 13191                          ; *************** function ___flunpack *****************
 13192                          ; Defined at:
 13193                          ;		line 13 in file "C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\double.c"
 13194                          ; Parameters:
 13195                          ;		arg         	offs:   0	type: PTR unsigned long ; Largest target is 4
 13196                          ;		 -> _div_to_l_@f2(4), _div_to_l_@f1(4), __fltol@f1(4), __flmul@f2(4), 
 13197                          ;		 -> __flmul@f1(4), __fldiv@f2(4), __fldiv@f1(4), __fladd@f2(4), 
 13198                          ;		 -> __fladd@f1(4), 
 13199                          ;		exp         	offs:   2	type: PTR unsigned char ; Largest target is 1
 13200                          ;		 -> _div_to_l_@cntr(1), _div_to_l_@exp1(1), __fltol@exp1(1), __flmul@cntr(1), 
 13201                          ;		 -> __flmul@exp1(1), __fldiv@exp2(1), __fldiv@exp1(1), __fladd@exp2(1), 
 13202                          ;		 -> __fladd@exp1(1), 
 13203                          ; Auto variables:
 13204                          ;		sign        	       	type: unsigned char 
 13205                          ; Return value:
 13206                          ;		type: unsigned char 
 13207                          ;		size: 1
 13208                          ; Registers used:
 13209                          ;		a, x, CUR_PP
 13210                          ; Tracked objects:
 13211                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13212                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13213                          ;		Unchanged: 
 13214                          ; Data sizes:
 13215                          ;		Autos:    1
 13216                          ;		Params:   4
 13217                          ;		Temp:     6
 13218                          ;		Total:   11
 13219                          ; This function calls:
 13220                          ;		Nothing
 13221                          ; This function is called by:
 13222                          ;		___fladd
 13223                          ;		___fldiv
 13224                          ;		___flmul
 13225                          ;		___fltol
 13226                          ;		__div_to_l_
 13227                          ; This function uses a non-reentrant model
 13228                          ; 
 13229                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\sources\double.c"
 13230                          	line	13
 13231  00E4                    	__size_of___flunpack	equ	__end_of___flunpack-___flunpack
 13232                          ;double.c: 11: unsigned char
 13233                          ;double.c: 12: __flunpack(unsigned long * arg, unsigned char * exp)
 13234                          ;double.c: 13: {
 13235                          ;			
 13236  7AFC                    ___flunpack:	
 13237                          	opt	disable
 13238                          	line	16
 13239                          ;double.c: 14: unsigned char sign;
 13240                          ;double.c: 16: *exp = sign = *arg >> 23;
 13241  7AFC  70 CF             	and	f, 0xCF   ;select user reg space
 13242  7AFE  62 D0 00          	mov	reg[CUR_PP],0
 13243  7B01  51 70             	mov	a,[0+((___flunpack@arg)^0x0)]
 13244  7B03  58 71             	mov	x,[1+((___flunpack@arg)^0x0)]
 13245  7B05  60 D3             	mov	reg[0xd3],a
 13246  7B07  52 01             	mov	a,[1+x]
 13247  7B09  6A                	rlc	a
 13248  7B0A  52 00             	mov	a,[0+x]
 13249  7B0C  6A                	rlc	a
 13250  7B0D  53 74             	mov	[0+((___flunpack@sign)^0x0)],a
 13251  7B0F  08                	push	a
 13252  7B10  51 72             	mov	a,[0+((___flunpack@exp)^0x0)]
 13253  7B12  08                	push	a
 13254  7B13  58 73             	mov	x,[1+((___flunpack@exp)^0x0)]
 13255  7B15  18                	pop	a
 13256  7B16  60 D3             	mov	reg[0xd3],a
 13257  7B18  18                	pop	a
 13258  7B19  54 00             	mov	[0+x],a
 13259                          	line	17
 13260                          ;double.c: 17: if(sign == 0) {
 13261  7B1B  70 CF             	and	f, 0xCF   ;select user reg space
 13262  7B1D  62 D0 00          	mov	reg[CUR_PP],0
 13263  7B20  51 74             	mov	a,[0+((___flunpack@sign)^0x0)]
 13264  7B22  39 00             	cmp	a,(0)
 13265  7B24  B021              	jnz	l319
 13266                          	line	18
 13267                          ;double.c: 18: *arg = 0;
 13268  7B26  70 CF             	and	f, 0xCF   ;select user reg space
 13269  7B28  62 D0 00          	mov	reg[CUR_PP],0
 13270  7B2B  51 70             	mov	a,[0+((___flunpack@arg)^0x0)]
 13271  7B2D  58 71             	mov	x,[1+((___flunpack@arg)^0x0)]
 13272  7B2F  60 D3             	mov	reg[0xd3],a
 13273  7B31  50 00             	mov	a,<(0>>24)
 13274  7B33  54 00             	mov	[0+x],a
 13275  7B35  50 00             	mov	a,<(0>>16)
 13276  7B37  54 01             	mov	[1+x],a
 13277  7B39  50 00             	mov	a,<(0>>8)
 13278  7B3B  54 02             	mov	[2+x],a
 13279  7B3D  50 00             	mov	a,<(0)
 13280  7B3F  54 03             	mov	[3+x],a
 13281                          	line	19
 13282                          ;double.c: 19: return 0;
 13283  7B41  50 00             	mov	a,<((0))
 13284  7B43  7D 7BDD           	xjmp	l318
 13285                          	line	20
 13286                          ;			
 13287  7B46                    l319:	
 13288                          	line	21
 13289                          ;double.c: 20: }
 13290                          ;double.c: 21: sign = 0;
 13291  7B46  50 00             	mov	a,<((0))
 13292  7B48  70 CF             	and	f, 0xCF   ;select user reg space
 13293  7B4A  62 D0 00          	mov	reg[CUR_PP],0
 13294  7B4D  53 74             	mov	[0+((___flunpack@sign)^0x0)],a
 13295                          	line	22
 13296                          ;double.c: 22: *arg |= 0x800000UL;
 13297  7B4F  70 CF             	and	f, 0xCF   ;select user reg space
 13298  7B51  62 D0 00          	mov	reg[CUR_PP],0
 13299  7B54  51 70             	mov	a,[0+((___flunpack@arg)^0x0)]
 13300  7B56  58 71             	mov	x,[1+((___flunpack@arg)^0x0)]
 13301  7B58  60 D3             	mov	reg[0xd3],a
 13302  7B5A  50 00             	mov	a,<(0800000h)
 13303  7B5C  2D 03             	or	[3+x],a
 13304  7B5E  50 00             	mov	a,<(0800000h>>8)
 13305  7B60  2D 02             	or	[2+x],a
 13306  7B62  50 80             	mov	a,<(0800000h>>16)
 13307  7B64  2D 01             	or	[1+x],a
 13308  7B66  50 00             	mov	a,<(0800000h>>24)
 13309  7B68  2D 00             	or	[0+x],a
 13310                          	line	23
 13311                          ;double.c: 23: if(*arg & 0x80000000UL)
 13312  7B6A  70 CF             	and	f, 0xCF   ;select user reg space
 13313  7B6C  62 D0 00          	mov	reg[CUR_PP],0
 13314  7B6F  51 70             	mov	a,[0+((___flunpack@arg)^0x0)]
 13315  7B71  58 71             	mov	x,[1+((___flunpack@arg)^0x0)]
 13316  7B73  60 D3             	mov	reg[0xd3],a
 13317  7B75  52 00             	mov	a,[x+0]
 13318  7B77  53 75             	mov	[(??___flunpack^0x0)+1+0],a
 13319  7B79  52 01             	mov	a,[x+1]
 13320  7B7B  53 76             	mov	[(??___flunpack^0x0)+1+0+1],a
 13321  7B7D  52 02             	mov	a,[x+2]
 13322  7B7F  53 77             	mov	[(??___flunpack^0x0)+1+0+2],a
 13323  7B81  52 03             	mov	a,[x+3]
 13324  7B83  53 78             	mov	[(??___flunpack^0x0)+1+0+3],a
 13325  7B85  50 00             	mov	a,<(-2147483648)
 13326  7B87  24 78             	and	[(??___flunpack^0x0)+1+3],a
 13327  7B89  50 00             	mov	a,<(-2147483648>>8)
 13328  7B8B  24 77             	and	[(??___flunpack^0x0)+1+2],a
 13329  7B8D  50 00             	mov	a,<(-2147483648>>16)
 13330  7B8F  24 76             	and	[(??___flunpack^0x0)+1+1],a
 13331  7B91  50 80             	mov	a,<(-2147483648>>24)
 13332  7B93  24 75             	and	[(??___flunpack^0x0)+1+0],a
 13333  7B95  51 75             	mov	a,[(??___flunpack^0x0)+1+0]
 13334  7B97  39 00             	cmp	a,<(0>>24)
 13335  7B99  B011              	jnz	u1643
 13336  7B9B  51 76             	mov	a,[(??___flunpack^0x0)+1+1]
 13337  7B9D  39 00             	cmp	a,<(0>>16)
 13338  7B9F  B00B              	jnz	u1643
 13339  7BA1  51 77             	mov	a,[(??___flunpack^0x0)+1+2]
 13340  7BA3  39 00             	cmp	a,<(0>>8)
 13341  7BA5  B005              	jnz	u1643
 13342  7BA7  51 78             	mov	a,[(??___flunpack^0x0)+1+3]
 13343  7BA9  39 00             	cmp	a,<(0)
 13344  7BAB                    u1643:
 13345  7BAB  A00C              	jz	l320
 13346                          	line	24
 13347                          ;double.c: 24: sign++;
 13348  7BAD  70 CF             	and	f, 0xCF   ;select user reg space
 13349  7BAF  62 D0 00          	mov	reg[CUR_PP],0
 13350  7BB2  51 74             	mov	a,[0+((___flunpack@sign)^0x0)]
 13351  7BB4  01 01             	add	a,<((01h))
 13352  7BB6  53 74             	mov	[0+((___flunpack@sign)^0x0)],a
 13353                          ;			
 13354  7BB8                    l320:	
 13355                          	line	25
 13356                          ;double.c: 25: *arg &= 0xFFFFFFUL;
 13357  7BB8  70 CF             	and	f, 0xCF   ;select user reg space
 13358  7BBA  62 D0 00          	mov	reg[CUR_PP],0
 13359  7BBD  51 70             	mov	a,[0+((___flunpack@arg)^0x0)]
 13360  7BBF  58 71             	mov	x,[1+((___flunpack@arg)^0x0)]
 13361  7BC1  60 D3             	mov	reg[0xd3],a
 13362  7BC3  50 FF             	mov	a,<(0FFFFFFh)
 13363  7BC5  25 03             	and	[3+x],a
 13364  7BC7  50 FF             	mov	a,<(0FFFFFFh>>8)
 13365  7BC9  25 02             	and	[2+x],a
 13366  7BCB  50 FF             	mov	a,<(0FFFFFFh>>16)
 13367  7BCD  25 01             	and	[1+x],a
 13368  7BCF  50 00             	mov	a,<(0FFFFFFh>>24)
 13369  7BD1  25 00             	and	[0+x],a
 13370                          	line	26
 13371                          ;double.c: 26: return sign;
 13372  7BD3  70 CF             	and	f, 0xCF   ;select user reg space
 13373  7BD5  62 D0 00          	mov	reg[CUR_PP],0
 13374  7BD8  51 74             	mov	a,[0+((___flunpack@sign)^0x0)]
 13375  7BDA  7D 7BDD           	xjmp	l318
 13376                          	line	27
 13377                          ;double.c: 27: }
 13378  7BDD                    l318:
 13379                          ;			
 13380  7BDD  70 CF             	and	f, 0xCF   ;select user reg space
 13381                          	
 13382  7BDF  7F                	ret
 13383                          GLOBAL __end_of___flunpack
 13384  7BE0                    	__end_of___flunpack:
 13385                          	FNSIZE	___flunpack,7,4
 13386                          ; =============== function ___flunpack ends ============
 13387                          
 13388                          	signat	___flunpack,8313
 13389                          	global	_Ticker_ISR
 13390                          	global	??_Ticker_ISR
 13391                          	global	?_Ticker_ISR
 13392                          	psect	intrtext,class=CODE,space=0
 13393                          
 13394                          ; *************** function _Ticker_ISR *****************
 13395                          ; Defined at:
 13396                          ;		line 15 in file "./main.c"
 13397                          ; Parameters:
 13398                          ;		None
 13399                          ; Auto variables:
 13400                          ;		None
 13401                          ; Return value:
 13402                          ;		type: void 
 13403                          ;		size: 0
 13404                          ; Registers used:
 13405                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
 13406                          ; Tracked objects:
 13407                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=0 MVR_PP? MVW_PP? 
 13408                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
 13409                          ;		Unchanged: 
 13410                          ; Data sizes:
 13411                          ;		Autos:    0
 13412                          ;		Params:   0
 13413                          ;		Temp:    10
 13414                          ;		Total:   10
 13415                          ; This function calls:
 13416                          ;		_LED1_Invert
 13417                          ; This function is called by:
 13418                          ;		Interrupt level 1
 13419                          ; This function uses a non-reentrant model
 13420                          ; 
 13421                          	file	"./main.c"
 13422                          	line	15
 13423  0041                    	__size_of_Ticker_ISR	equ	__end_of_Ticker_ISR-_Ticker_ISR
 13424                          ;main.c: 14: void Ticker_ISR()
 13425                          ;main.c: 15: {
 13426  7C88                    _Ticker_ISR:
 13427  7C88                    Ticker_ISR:
 13428                          	global	Ticker_ISR ; in case PD tries to call an assembler ISR by this name
 13429                          
 13430                          	opt	disable
 13431  7C88  08                	push	a
 13432  7C89  10                	push	x
 13433  7C8A  5D 6C             	mov a,reg[TMP_DR0]
 13434  7C8C  08                	push	a
 13435  7C8D  5D 6D             	mov a,reg[TMP_DR1]
 13436  7C8F  08                	push	a
 13437  7C90  5D 6E             	mov a,reg[TMP_DR2]
 13438  7C92  08                	push	a
 13439  7C93  5D 6F             	mov a,reg[TMP_DR3]
 13440  7C95  08                	push	a
 13441  7C96  5D D0             	mov a,reg[CUR_PP]
 13442  7C98  08                	push	a
 13443  7C99  5D D3             	mov a,reg[IDX_PP]
 13444  7C9B  08                	push	a
 13445  7C9C  5D D4             	mov a,reg[MVR_PP]
 13446  7C9E  08                	push	a
 13447  7C9F  5D D5             	mov a,reg[MVW_PP]
 13448  7CA1  08                	push	a
 13449                          	line	16
 13450                          ;main.c: 16: LED1_Invert();
 13451  7CA2  71 80             	or	f, 0x80	;select multiple RAM page mode
 13452                          	
 13453  7CA4  7C 3B53           	xcall	_LED1_Invert
 13454                          	
 13455  7CA7  38 00             	add	sp,0
 13456                          	line	18
 13457                          ;main.c: 18: return;
 13458  7CA9  7D 7CAC           	xjmp	l3
 13459                          	line	19
 13460                          ;main.c: 19: }
 13461  7CAC                    l3:
 13462                          ;			
 13463  7CAC  70 CF             	and	f, 0xCF   ;select user reg space
 13464                          	
 13465  7CAE  18                	pop	a
 13466  7CAF  60 D5             	mov reg[MVW_PP],a
 13467  7CB1  18                	pop	a
 13468  7CB2  60 D4             	mov reg[MVR_PP],a
 13469  7CB4  18                	pop	a
 13470  7CB5  60 D3             	mov reg[IDX_PP],a
 13471  7CB7  18                	pop	a
 13472  7CB8  60 D0             	mov reg[CUR_PP],a
 13473  7CBA  18                	pop	a
 13474  7CBB  60 6F             	mov reg[TMP_DR3],a
 13475  7CBD  18                	pop	a
 13476  7CBE  60 6E             	mov reg[TMP_DR2],a
 13477  7CC0  18                	pop	a
 13478  7CC1  60 6D             	mov reg[TMP_DR1],a
 13479  7CC3  18                	pop	a
 13480  7CC4  60 6C             	mov reg[TMP_DR0],a
 13481  7CC6  20                	pop	x
 13482  7CC7  18                	pop	a
 13483  7CC8  7E                	reti
 13484                          GLOBAL __end_of_Ticker_ISR
 13485  7CC9                    	__end_of_Ticker_ISR:
 13486                          	FNSIZE	_Ticker_ISR,10,0
 13487                          ; =============== function _Ticker_ISR ends ============
 13488                          
 13489                          	signat	_Ticker_ISR,88
 13490                          	global	_LED1_Invert
 13491                          	FNCALL	_main,_hardware_init
 13492                          	FNCALL	_main,_print_help
 13493                          	FNCALL	_main,_LTRX_bCmdCheck
 13494                          	FNCALL	_main,_LTRX_szGetParam
 13495                          	FNCALL	_main,_printf
 13496                          	FNCALL	_main,_oo_report
 13497                          	FNCALL	_main,_s_do_measure
 13498                          	FNCALL	_main,_LTRX_CmdReset
 13499                          	FNCALL	_print_help,_print_header
 13500                          	FNCALL	_print_help,_LTRX_CPutString
 13501                          	FNCALL	_print_help,_LTRX_PutCRLF
 13502                          	FNCALL	_s_do_measure,_s_connectionreset
 13503                          	FNCALL	_s_do_measure,_s_measure
 13504                          	FNCALL	_s_do_measure,_LTRX_CPutString
 13505                          	FNCALL	_s_do_measure,_LTRX_PutSHexByte
 13506                          	FNCALL	_s_do_measure,___lwtofl
 13507                          	FNCALL	_s_do_measure,_calc_sth11
 13508                          	FNCALL	_s_do_measure,_calc_dewpoint
 13509                          	FNCALL	_s_do_measure,_printf
 13510                          	FNCALL	_oo_report,_OneWire_fReset
 13511                          	FNCALL	_oo_report,_LTRX_CPutString
 13512                          	FNCALL	_oo_report,_LTRX_PutCRLF
 13513                          	FNCALL	_oo_report,_oo_start_conversion
 13514                          	FNCALL	_oo_report,_oo_wait_for_completion
 13515                          	FNCALL	_oo_report,_OneWire_fFindFirst
 13516                          	FNCALL	_oo_report,_oo_read_device
 13517                          	FNCALL	_oo_report,_oo_print_data
 13518                          	FNCALL	_oo_report,_OneWire_fFindNext
 13519                          	FNCALL	_hardware_init,_Counter8_ltrx_Start
 13520                          	FNCALL	_hardware_init,_LED1_Start
 13521                          	FNCALL	_hardware_init,_Ticker_Start
 13522                          	FNCALL	_hardware_init,_OneWire_Start
 13523                          	FNCALL	_hardware_init,_s_Start
 13524                          	FNCALL	_hardware_init,_LTRX_CmdReset
 13525                          	FNCALL	_hardware_init,_LTRX_EnableInt
 13526                          	FNCALL	_hardware_init,_LTRX_Start
 13527                          	FNCALL	_hardware_init,_Ticker_EnableInt
 13528                          	FNCALL	_oo_start_conversion,_oo_tx_byte
 13529                          	FNCALL	_s_measure,_s_transstart
 13530                          	FNCALL	_s_measure,_s_write_byte
 13531                          	FNCALL	_s_measure,_delay_5us
 13532                          	FNCALL	_s_measure,_s_read_byte
 13533                          	FNCALL	_calc_dewpoint,___flmul
 13534                          	FNCALL	_calc_dewpoint,_log10
 13535                          	FNCALL	_calc_dewpoint,___fladd
 13536                          	FNCALL	_calc_dewpoint,___fldiv
 13537                          	FNCALL	_calc_dewpoint,___flsub
 13538                          	FNCALL	_calc_sth11,___flmul
 13539                          	FNCALL	_calc_sth11,___fladd
 13540                          	FNCALL	_calc_sth11,___flge
 13541                          	FNCALL	___lwtofl,___flpack
 13542                          	FNCALL	_oo_read_device,_OneWire_GetROM
 13543                          	FNCALL	_oo_read_device,_oo_busreset
 13544                          	FNCALL	_oo_read_device,_OneWire_SetROM
 13545                          	FNCALL	_oo_read_device,_OneWire_fVerify
 13546                          	FNCALL	_oo_read_device,_oo_read_scratchpad
 13547                          	FNCALL	_oo_print_data,_LTRX_CPutString
 13548                          	FNCALL	_oo_print_data,_LTRX_PutSHexByte
 13549                          	FNCALL	_oo_print_data,_LTRX_PutChar
 13550                          	FNCALL	_oo_print_data,_LTRX_PutCRLF
 13551                          	FNCALL	_oo_wait_for_completion,_delay_10ms
 13552                          	FNCALL	_oo_wait_for_completion,_oo_conversion_busy
 13553                          	FNCALL	_s_connectionreset,_delay_1us
 13554                          	FNCALL	_s_connectionreset,_s_transstart
 13555                          	FNCALL	_print_header,_LTRX_PutCRLF
 13556                          	FNCALL	_print_header,_LTRX_CPutString
 13557                          	FNCALL	_printf,_putch
 13558                          	FNCALL	_printf,_isdigit
 13559                          	FNCALL	_printf,___wmul
 13560                          	FNCALL	_printf,___flge
 13561                          	FNCALL	_printf,___flneg
 13562                          	FNCALL	_printf,___awdiv
 13563                          	FNCALL	_printf,_scale
 13564                          	FNCALL	_printf,___flmul
 13565                          	FNCALL	_printf,_fround
 13566                          	FNCALL	_printf,___fladd
 13567                          	FNCALL	_printf,___fltol
 13568                          	FNCALL	_printf,__div_to_l_
 13569                          	FNCALL	_printf,___lltofl
 13570                          	FNCALL	_printf,___flsub
 13571                          	FNCALL	_printf,___lldiv
 13572                          	FNCALL	_printf,___llmod
 13573                          	FNCALL	_oo_conversion_busy,_oo_rx_byte
 13574                          	FNCALL	_s_transstart,_delay_1us
 13575                          	FNCALL	_s_transstart,_delay_5us
 13576                          	FNCALL	_oo_busreset,_OneWire_fReset
 13577                          	FNCALL	_oo_read_scratchpad,_oo_tx_byte
 13578                          	FNCALL	_oo_read_scratchpad,_oo_crc_init
 13579                          	FNCALL	_oo_read_scratchpad,_oo_rx_byte
 13580                          	FNCALL	_s_read_byte,_delay_5us
 13581                          	FNCALL	_scale,___awdiv
 13582                          	FNCALL	_scale,___awmod
 13583                          	FNCALL	_scale,___flmul
 13584                          	FNCALL	_fround,___awdiv
 13585                          	FNCALL	_fround,___awmod
 13586                          	FNCALL	_fround,___flmul
 13587                          	FNCALL	_s_write_byte,_delay_5us
 13588                          	FNCALL	_putch,_LTRX_PutChar
 13589                          	FNCALL	___fldiv,___flunpack
 13590                          	FNCALL	___fldiv,___flpack
 13591                          	FNCALL	_log10,_log
 13592                          	FNCALL	_log10,___flmul
 13593                          	FNCALL	___flsub,___fladd
 13594                          	FNCALL	___fltol,___flunpack
 13595                          	FNCALL	__div_to_l_,___flunpack
 13596                          	FNCALL	___lltofl,___flpack
 13597                          	FNCALL	_log,___flge
 13598                          	FNCALL	_log,_frexp
 13599                          	FNCALL	_log,___flmul
 13600                          	FNCALL	_log,___fladd
 13601                          	FNCALL	_log,_eval_poly
 13602                          	FNCALL	_log,___awtofl
 13603                          	FNCALL	_oo_tx_byte,_OneWire_WriteByte
 13604                          	FNCALL	_oo_rx_byte,_OneWire_bReadByte
 13605                          	FNCALL	_oo_rx_byte,_oo_crc_shuffle_byte
 13606                          	FNCALL	_eval_poly,___flmul
 13607                          	FNCALL	_eval_poly,___fladd
 13608                          	FNCALL	___awtofl,___flpack
 13609                          	FNCALL	___awtofl,___flneg
 13610                          	FNCALL	___fladd,___flunpack
 13611                          	FNCALL	___fladd,___flpack
 13612                          	FNCALL	___flmul,___flunpack
 13613                          	FNCALL	___flmul,___flpack
 13614                          	FNROOT	_main
 13615                          	FNCALL	_Ticker_ISR,_LED1_Invert
 13616                          	FNCALL	intlevel1,_Ticker_ISR
 13617                          	global	intlevel1
 13618                          	FNROOT	intlevel1
 13619                          	global	_crc_rom
 13620                          	psect	ramdata1,class=RAM,space=1
 13621  0100                    _crc_rom:
 13622  0100                    	blk	256
 13623                          	psect	romdata1,class=BANKROM,space=0
 13624                          	file	"./oo.c"
 13625                          	line	29
 13626                          
 13627                          ;initializer for _crc_rom
 13628  0100  00                	db	(0)
 13629  0101  5E                	db	(05Eh)
 13630  0102  BC                	db	(0BCh)
 13631  0103  E2                	db	(0E2h)
 13632  0104  61                	db	(061h)
 13633  0105  3F                	db	(03Fh)
 13634  0106  DD                	db	(0DDh)
 13635  0107  83                	db	(083h)
 13636  0108  C2                	db	(0C2h)
 13637  0109  9C                	db	(09Ch)
 13638  010A  7E                	db	(07Eh)
 13639  010B  20                	db	(020h)
 13640  010C  A3                	db	(0A3h)
 13641  010D  FD                	db	(0FDh)
 13642  010E  1F                	db	(01Fh)
 13643  010F  41                	db	(041h)
 13644  0110  9D                	db	(09Dh)
 13645  0111  C3                	db	(0C3h)
 13646  0112  21                	db	(021h)
 13647  0113  7F                	db	(07Fh)
 13648  0114  FC                	db	(0FCh)
 13649  0115  A2                	db	(0A2h)
 13650  0116  40                	db	(040h)
 13651  0117  1E                	db	(01Eh)
 13652  0118  5F                	db	(05Fh)
 13653  0119  01                	db	(01h)
 13654  011A  E3                	db	(0E3h)
 13655  011B  BD                	db	(0BDh)
 13656  011C  3E                	db	(03Eh)
 13657  011D  60                	db	(060h)
 13658  011E  82                	db	(082h)
 13659  011F  DC                	db	(0DCh)
 13660  0120  23                	db	(023h)
 13661  0121  7D                	db	(07Dh)
 13662  0122  9F                	db	(09Fh)
 13663  0123  C1                	db	(0C1h)
 13664  0124  42                	db	(042h)
 13665  0125  1C                	db	(01Ch)
 13666  0126  FE                	db	(0FEh)
 13667  0127  A0                	db	(0A0h)
 13668  0128  E1                	db	(0E1h)
 13669  0129  BF                	db	(0BFh)
 13670  012A  5D                	db	(05Dh)
 13671  012B  03                	db	(03h)
 13672  012C  80                	db	(080h)
 13673  012D  DE                	db	(0DEh)
 13674  012E  3C                	db	(03Ch)
 13675  012F  62                	db	(062h)
 13676  0130  BE                	db	(0BEh)
 13677  0131  E0                	db	(0E0h)
 13678  0132  02                	db	(02h)
 13679  0133  5C                	db	(05Ch)
 13680  0134  DF                	db	(0DFh)
 13681  0135  81                	db	(081h)
 13682  0136  63                	db	(063h)
 13683  0137  3D                	db	(03Dh)
 13684  0138  7C                	db	(07Ch)
 13685  0139  22                	db	(022h)
 13686  013A  C0                	db	(0C0h)
 13687  013B  9E                	db	(09Eh)
 13688  013C  1D                	db	(01Dh)
 13689  013D  43                	db	(043h)
 13690  013E  A1                	db	(0A1h)
 13691  013F  FF                	db	(0FFh)
 13692  0140  46                	db	(046h)
 13693  0141  18                	db	(018h)
 13694  0142  FA                	db	(0FAh)
 13695  0143  A4                	db	(0A4h)
 13696  0144  27                	db	(027h)
 13697  0145  79                	db	(079h)
 13698  0146  9B                	db	(09Bh)
 13699  0147  C5                	db	(0C5h)
 13700  0148  84                	db	(084h)
 13701  0149  DA                	db	(0DAh)
 13702  014A  38                	db	(038h)
 13703  014B  66                	db	(066h)
 13704  014C  E5                	db	(0E5h)
 13705  014D  BB                	db	(0BBh)
 13706  014E  59                	db	(059h)
 13707  014F  07                	db	(07h)
 13708  0150  DB                	db	(0DBh)
 13709  0151  85                	db	(085h)
 13710  0152  67                	db	(067h)
 13711  0153  39                	db	(039h)
 13712  0154  BA                	db	(0BAh)
 13713  0155  E4                	db	(0E4h)
 13714  0156  06                	db	(06h)
 13715  0157  58                	db	(058h)
 13716  0158  19                	db	(019h)
 13717  0159  47                	db	(047h)
 13718  015A  A5                	db	(0A5h)
 13719  015B  FB                	db	(0FBh)
 13720  015C  78                	db	(078h)
 13721  015D  26                	db	(026h)
 13722  015E  C4                	db	(0C4h)
 13723  015F  9A                	db	(09Ah)
 13724  0160  65                	db	(065h)
 13725  0161  3B                	db	(03Bh)
 13726  0162  D9                	db	(0D9h)
 13727  0163  87                	db	(087h)
 13728  0164  04                	db	(04h)
 13729  0165  5A                	db	(05Ah)
 13730  0166  B8                	db	(0B8h)
 13731  0167  E6                	db	(0E6h)
 13732  0168  A7                	db	(0A7h)
 13733  0169  F9                	db	(0F9h)
 13734  016A  1B                	db	(01Bh)
 13735  016B  45                	db	(045h)
 13736  016C  C6                	db	(0C6h)
 13737  016D  98                	db	(098h)
 13738  016E  7A                	db	(07Ah)
 13739  016F  24                	db	(024h)
 13740  0170  F8                	db	(0F8h)
 13741  0171  A6                	db	(0A6h)
 13742  0172  44                	db	(044h)
 13743  0173  1A                	db	(01Ah)
 13744  0174  99                	db	(099h)
 13745  0175  C7                	db	(0C7h)
 13746  0176  25                	db	(025h)
 13747  0177  7B                	db	(07Bh)
 13748  0178  3A                	db	(03Ah)
 13749  0179  64                	db	(064h)
 13750  017A  86                	db	(086h)
 13751  017B  D8                	db	(0D8h)
 13752  017C  5B                	db	(05Bh)
 13753  017D  05                	db	(05h)
 13754  017E  E7                	db	(0E7h)
 13755  017F  B9                	db	(0B9h)
 13756  0180  8C                	db	(08Ch)
 13757  0181  D2                	db	(0D2h)
 13758  0182  30                	db	(030h)
 13759  0183  6E                	db	(06Eh)
 13760  0184  ED                	db	(0EDh)
 13761  0185  B3                	db	(0B3h)
 13762  0186  51                	db	(051h)
 13763  0187  0F                	db	(0Fh)
 13764  0188  4E                	db	(04Eh)
 13765  0189  10                	db	(010h)
 13766  018A  F2                	db	(0F2h)
 13767  018B  AC                	db	(0ACh)
 13768  018C  2F                	db	(02Fh)
 13769  018D  71                	db	(071h)
 13770  018E  93                	db	(093h)
 13771  018F  CD                	db	(0CDh)
 13772  0190  11                	db	(011h)
 13773  0191  4F                	db	(04Fh)
 13774  0192  AD                	db	(0ADh)
 13775  0193  F3                	db	(0F3h)
 13776  0194  70                	db	(070h)
 13777  0195  2E                	db	(02Eh)
 13778  0196  CC                	db	(0CCh)
 13779  0197  92                	db	(092h)
 13780  0198  D3                	db	(0D3h)
 13781  0199  8D                	db	(08Dh)
 13782  019A  6F                	db	(06Fh)
 13783  019B  31                	db	(031h)
 13784  019C  B2                	db	(0B2h)
 13785  019D  EC                	db	(0ECh)
 13786  019E  0E                	db	(0Eh)
 13787  019F  50                	db	(050h)
 13788  01A0  AF                	db	(0AFh)
 13789  01A1  F1                	db	(0F1h)
 13790  01A2  13                	db	(013h)
 13791  01A3  4D                	db	(04Dh)
 13792  01A4  CE                	db	(0CEh)
 13793  01A5  90                	db	(090h)
 13794  01A6  72                	db	(072h)
 13795  01A7  2C                	db	(02Ch)
 13796  01A8  6D                	db	(06Dh)
 13797  01A9  33                	db	(033h)
 13798  01AA  D1                	db	(0D1h)
 13799  01AB  8F                	db	(08Fh)
 13800  01AC  0C                	db	(0Ch)
 13801  01AD  52                	db	(052h)
 13802  01AE  B0                	db	(0B0h)
 13803  01AF  EE                	db	(0EEh)
 13804  01B0  32                	db	(032h)
 13805  01B1  6C                	db	(06Ch)
 13806  01B2  8E                	db	(08Eh)
 13807  01B3  D0                	db	(0D0h)
 13808  01B4  53                	db	(053h)
 13809  01B5  0D                	db	(0Dh)
 13810  01B6  EF                	db	(0EFh)
 13811  01B7  B1                	db	(0B1h)
 13812  01B8  F0                	db	(0F0h)
 13813  01B9  AE                	db	(0AEh)
 13814  01BA  4C                	db	(04Ch)
 13815  01BB  12                	db	(012h)
 13816  01BC  91                	db	(091h)
 13817  01BD  CF                	db	(0CFh)
 13818  01BE  2D                	db	(02Dh)
 13819  01BF  73                	db	(073h)
 13820  01C0  CA                	db	(0CAh)
 13821  01C1  94                	db	(094h)
 13822  01C2  76                	db	(076h)
 13823  01C3  28                	db	(028h)
 13824  01C4  AB                	db	(0ABh)
 13825  01C5  F5                	db	(0F5h)
 13826  01C6  17                	db	(017h)
 13827  01C7  49                	db	(049h)
 13828  01C8  08                	db	(08h)
 13829  01C9  56                	db	(056h)
 13830  01CA  B4                	db	(0B4h)
 13831  01CB  EA                	db	(0EAh)
 13832  01CC  69                	db	(069h)
 13833  01CD  37                	db	(037h)
 13834  01CE  D5                	db	(0D5h)
 13835  01CF  8B                	db	(08Bh)
 13836  01D0  57                	db	(057h)
 13837  01D1  09                	db	(09h)
 13838  01D2  EB                	db	(0EBh)
 13839  01D3  B5                	db	(0B5h)
 13840  01D4  36                	db	(036h)
 13841  01D5  68                	db	(068h)
 13842  01D6  8A                	db	(08Ah)
 13843  01D7  D4                	db	(0D4h)
 13844  01D8  95                	db	(095h)
 13845  01D9  CB                	db	(0CBh)
 13846  01DA  29                	db	(029h)
 13847  01DB  77                	db	(077h)
 13848  01DC  F4                	db	(0F4h)
 13849  01DD  AA                	db	(0AAh)
 13850  01DE  48                	db	(048h)
 13851  01DF  16                	db	(016h)
 13852  01E0  E9                	db	(0E9h)
 13853  01E1  B7                	db	(0B7h)
 13854  01E2  55                	db	(055h)
 13855  01E3  0B                	db	(0Bh)
 13856  01E4  88                	db	(088h)
 13857  01E5  D6                	db	(0D6h)
 13858  01E6  34                	db	(034h)
 13859  01E7  6A                	db	(06Ah)
 13860  01E8  2B                	db	(02Bh)
 13861  01E9  75                	db	(075h)
 13862  01EA  97                	db	(097h)
 13863  01EB  C9                	db	(0C9h)
 13864  01EC  4A                	db	(04Ah)
 13865  01ED  14                	db	(014h)
 13866  01EE  F6                	db	(0F6h)
 13867  01EF  A8                	db	(0A8h)
 13868  01F0  74                	db	(074h)
 13869  01F1  2A                	db	(02Ah)
 13870  01F2  C8                	db	(0C8h)
 13871  01F3  96                	db	(096h)
 13872  01F4  15                	db	(015h)
 13873  01F5  4B                	db	(04Bh)
 13874  01F6  A9                	db	(0A9h)
 13875  01F7  F7                	db	(0F7h)
 13876  01F8  B6                	db	(0B6h)
 13877  01F9  E8                	db	(0E8h)
 13878  01FA  0A                	db	(0Ah)
 13879  01FB  54                	db	(054h)
 13880  01FC  D7                	db	(0D7h)
 13881  01FD  89                	db	(089h)
 13882  01FE  6B                	db	(06Bh)
 13883  01FF  35                	db	(035h)
 13884                          	psect	cdata,class=ROM,space=0,reloc=256
 13885                          	file	"C:\Program Files\HI-TECH Software\HCPSOC\PRO\9.61\lib\doprnt.c"
 13886                          	line	376
 13887  7D00                    __npowers_:
 13888                          ;powers.c: 7: const double _powers_[] =
 13889                          ;powers.c: 8: {
 13890                          ;powers.c: 9: 1e0,
 13891                          ;powers.c: 10: 1e1,
 13892                          ;powers.c: 11: 1e2,
 13893                          ;powers.c: 12: 1e3,
 13894                          ;powers.c: 13: 1e4,
 13895                          ;powers.c: 14: 1e5,
 13896                          ;powers.c: 15: 1e6,
 13897                          ;powers.c: 16: 1e7,
 13898                          ;powers.c: 17: 1e8,
 13899                          ;powers.c: 18: 1e9,
 13900                          ;powers.c: 19: 1e10,
 13901                          ;powers.c: 21: 1e20,
 13902                          ;powers.c: 22: 1e30,
 13903                          ;powers.c: 37: };
 13904  7D00  3F80              	dw	0x3f800000>>16
 13905  7D02  0000              	dw	0x3f800000&0xffff
 13906                          ;powers.c: 7: const double _powers_[] =
 13907                          ;powers.c: 8: {
 13908                          ;powers.c: 9: 1e0,
 13909                          ;powers.c: 10: 1e1,
 13910                          ;powers.c: 11: 1e2,
 13911                          ;powers.c: 12: 1e3,
 13912                          ;powers.c: 13: 1e4,
 13913                          ;powers.c: 14: 1e5,
 13914                          ;powers.c: 15: 1e6,
 13915                          ;powers.c: 16: 1e7,
 13916                          ;powers.c: 17: 1e8,
 13917                          ;powers.c: 18: 1e9,
 13918                          ;powers.c: 19: 1e10,
 13919                          ;powers.c: 21: 1e20,
 13920                          ;powers.c: 22: 1e30,
 13921                          ;powers.c: 37: };
 13922  7D04  3DCC              	dw	0x3dcccccd>>16
 13923  7D06  CCCD              	dw	0x3dcccccd&0xffff
 13924                          ;powers.c: 7: const double _powers_[] =
 13925                          ;powers.c: 8: {
 13926                          ;powers.c: 9: 1e0,
 13927                          ;powers.c: 10: 1e1,
 13928                          ;powers.c: 11: 1e2,
 13929                          ;powers.c: 12: 1e3,
 13930                          ;powers.c: 13: 1e4,
 13931                          ;powers.c: 14: 1e5,
 13932                          ;powers.c: 15: 1e6,
 13933                          ;powers.c: 16: 1e7,
 13934                          ;powers.c: 17: 1e8,
 13935                          ;powers.c: 18: 1e9,
 13936                          ;powers.c: 19: 1e10,
 13937                          ;powers.c: 21: 1e20,
 13938                          ;powers.c: 22: 1e30,
 13939                          ;powers.c: 37: };
 13940  7D08  3C23              	dw	0x3c23d70a>>16
 13941  7D0A  D70A              	dw	0x3c23d70a&0xffff
 13942                          ;powers.c: 7: const double _powers_[] =
 13943                          ;powers.c: 8: {
 13944                          ;powers.c: 9: 1e0,
 13945                          ;powers.c: 10: 1e1,
 13946                          ;powers.c: 11: 1e2,
 13947                          ;powers.c: 12: 1e3,
 13948                          ;powers.c: 13: 1e4,
 13949                          ;powers.c: 14: 1e5,
 13950                          ;powers.c: 15: 1e6,
 13951                          ;powers.c: 16: 1e7,
 13952                          ;powers.c: 17: 1e8,
 13953                          ;powers.c: 18: 1e9,
 13954                          ;powers.c: 19: 1e10,
 13955                          ;powers.c: 21: 1e20,
 13956                          ;powers.c: 22: 1e30,
 13957                          ;powers.c: 37: };
 13958  7D0C  3A83              	dw	0x3a83126f>>16
 13959  7D0E  126F              	dw	0x3a83126f&0xffff
 13960                          ;powers.c: 7: const double _powers_[] =
 13961                          ;powers.c: 8: {
 13962                          ;powers.c: 9: 1e0,
 13963                          ;powers.c: 10: 1e1,
 13964                          ;powers.c: 11: 1e2,
 13965                          ;powers.c: 12: 1e3,
 13966                          ;powers.c: 13: 1e4,
 13967                          ;powers.c: 14: 1e5,
 13968                          ;powers.c: 15: 1e6,
 13969                          ;powers.c: 16: 1e7,
 13970                          ;powers.c: 17: 1e8,
 13971                          ;powers.c: 18: 1e9,
 13972                          ;powers.c: 19: 1e10,
 13973                          ;powers.c: 21: 1e20,
 13974                          ;powers.c: 22: 1e30,
 13975                          ;powers.c: 37: };
 13976  7D10  38D1              	dw	0x38d1b717>>16
 13977  7D12  B717              	dw	0x38d1b717&0xffff
 13978                          ;powers.c: 7: const double _powers_[] =
 13979                          ;powers.c: 8: {
 13980                          ;powers.c: 9: 1e0,
 13981                          ;powers.c: 10: 1e1,
 13982                          ;powers.c: 11: 1e2,
 13983                          ;powers.c: 12: 1e3,
 13984                          ;powers.c: 13: 1e4,
 13985                          ;powers.c: 14: 1e5,
 13986                          ;powers.c: 15: 1e6,
 13987                          ;powers.c: 16: 1e7,
 13988                          ;powers.c: 17: 1e8,
 13989                          ;powers.c: 18: 1e9,
 13990                          ;powers.c: 19: 1e10,
 13991                          ;powers.c: 21: 1e20,
 13992                          ;powers.c: 22: 1e30,
 13993                          ;powers.c: 37: };
 13994  7D14  3727              	dw	0x3727c5ac>>16
 13995  7D16  C5AC              	dw	0x3727c5ac&0xffff
 13996                          ;powers.c: 7: const double _powers_[] =
 13997                          ;powers.c: 8: {
 13998                          ;powers.c: 9: 1e0,
 13999                          ;powers.c: 10: 1e1,
 14000                          ;powers.c: 11: 1e2,
 14001                          ;powers.c: 12: 1e3,
 14002                          ;powers.c: 13: 1e4,
 14003                          ;powers.c: 14: 1e5,
 14004                          ;powers.c: 15: 1e6,
 14005                          ;powers.c: 16: 1e7,
 14006                          ;powers.c: 17: 1e8,
 14007                          ;powers.c: 18: 1e9,
 14008                          ;powers.c: 19: 1e10,
 14009                          ;powers.c: 21: 1e20,
 14010                          ;powers.c: 22: 1e30,
 14011                          ;powers.c: 37: };
 14012  7D18  3586              	dw	0x358637bd>>16
 14013  7D1A  37BD              	dw	0x358637bd&0xffff
 14014                          ;powers.c: 7: const double _powers_[] =
 14015                          ;powers.c: 8: {
 14016                          ;powers.c: 9: 1e0,
 14017                          ;powers.c: 10: 1e1,
 14018                          ;powers.c: 11: 1e2,
 14019                          ;powers.c: 12: 1e3,
 14020                          ;powers.c: 13: 1e4,
 14021                          ;powers.c: 14: 1e5,
 14022                          ;powers.c: 15: 1e6,
 14023                          ;powers.c: 16: 1e7,
 14024                          ;powers.c: 17: 1e8,
 14025                          ;powers.c: 18: 1e9,
 14026                          ;powers.c: 19: 1e10,
 14027                          ;powers.c: 21: 1e20,
 14028                          ;powers.c: 22: 1e30,
 14029                          ;powers.c: 37: };
 14030  7D1C  33D6              	dw	0x33d6bf95>>16
 14031  7D1E  BF95              	dw	0x33d6bf95&0xffff
 14032                          ;powers.c: 7: const double _powers_[] =
 14033                          ;powers.c: 8: {
 14034                          ;powers.c: 9: 1e0,
 14035                          ;powers.c: 10: 1e1,
 14036                          ;powers.c: 11: 1e2,
 14037                          ;powers.c: 12: 1e3,
 14038                          ;powers.c: 13: 1e4,
 14039                          ;powers.c: 14: 1e5,
 14040                          ;powers.c: 15: 1e6,
 14041                          ;powers.c: 16: 1e7,
 14042                          ;powers.c: 17: 1e8,
 14043                          ;powers.c: 18: 1e9,
 14044                          ;powers.c: 19: 1e10,
 14045                          ;powers.c: 21: 1e20,
 14046                          ;powers.c: 22: 1e30,
 14047                          ;powers.c: 37: };
 14048  7D20  322B              	dw	0x322bcc77>>16
 14049  7D22  CC77              	dw	0x322bcc77&0xffff
 14050                          ;powers.c: 7: const double _powers_[] =
 14051                          ;powers.c: 8: {
 14052                          ;powers.c: 9: 1e0,
 14053                          ;powers.c: 10: 1e1,
 14054                          ;powers.c: 11: 1e2,
 14055                          ;powers.c: 12: 1e3,
 14056                          ;powers.c: 13: 1e4,
 14057                          ;powers.c: 14: 1e5,
 14058                          ;powers.c: 15: 1e6,
 14059                          ;powers.c: 16: 1e7,
 14060                          ;powers.c: 17: 1e8,
 14061                          ;powers.c: 18: 1e9,
 14062                          ;powers.c: 19: 1e10,
 14063                          ;powers.c: 21: 1e20,
 14064                          ;powers.c: 22: 1e30,
 14065                          ;powers.c: 37: };
 14066  7D24  3089              	dw	0x3089705f>>16
 14067  7D26  705F              	dw	0x3089705f&0xffff
 14068                          ;powers.c: 7: const double _powers_[] =
 14069                          ;powers.c: 8: {
 14070                          ;powers.c: 9: 1e0,
 14071                          ;powers.c: 10: 1e1,
 14072                          ;powers.c: 11: 1e2,
 14073                          ;powers.c: 12: 1e3,
 14074                          ;powers.c: 13: 1e4,
 14075                          ;powers.c: 14: 1e5,
 14076                          ;powers.c: 15: 1e6,
 14077                          ;powers.c: 16: 1e7,
 14078                          ;powers.c: 17: 1e8,
 14079                          ;powers.c: 18: 1e9,
 14080                          ;powers.c: 19: 1e10,
 14081                          ;powers.c: 21: 1e20,
 14082                          ;powers.c: 22: 1e30,
 14083                          ;powers.c: 37: };
 14084  7D28  2EDB              	dw	0x2edbe6ff>>16
 14085  7D2A  E6FF              	dw	0x2edbe6ff&0xffff
 14086                          ;powers.c: 7: const double _powers_[] =
 14087                          ;powers.c: 8: {
 14088                          ;powers.c: 9: 1e0,
 14089                          ;powers.c: 10: 1e1,
 14090                          ;powers.c: 11: 1e2,
 14091                          ;powers.c: 12: 1e3,
 14092                          ;powers.c: 13: 1e4,
 14093                          ;powers.c: 14: 1e5,
 14094                          ;powers.c: 15: 1e6,
 14095                          ;powers.c: 16: 1e7,
 14096                          ;powers.c: 17: 1e8,
 14097                          ;powers.c: 18: 1e9,
 14098                          ;powers.c: 19: 1e10,
 14099                          ;powers.c: 21: 1e20,
 14100                          ;powers.c: 22: 1e30,
 14101                          ;powers.c: 37: };
 14102  7D2C  1E3C              	dw	0x1e3ce508>>16
 14103  7D2E  E508              	dw	0x1e3ce508&0xffff
 14104                          ;powers.c: 7: const double _powers_[] =
 14105                          ;powers.c: 8: {
 14106                          ;powers.c: 9: 1e0,
 14107                          ;powers.c: 10: 1e1,
 14108                          ;powers.c: 11: 1e2,
 14109                          ;powers.c: 12: 1e3,
 14110                          ;powers.c: 13: 1e4,
 14111                          ;powers.c: 14: 1e5,
 14112                          ;powers.c: 15: 1e6,
 14113                          ;powers.c: 16: 1e7,
 14114                          ;powers.c: 17: 1e8,
 14115                          ;powers.c: 18: 1e9,
 14116                          ;powers.c: 19: 1e10,
 14117                          ;powers.c: 21: 1e20,
 14118                          ;powers.c: 22: 1e30,
 14119                          ;powers.c: 37: };
 14120  7D30  0DA2              	dw	0xda24260>>16
 14121  7D32  4260              	dw	0xda24260&0xffff
 14122  7D34                    __powers_:
 14123  7D34  3F80              	dw	0x3f800000>>16
 14124  7D36  0000              	dw	0x3f800000&0xffff
 14125  7D38  4120              	dw	0x41200000>>16
 14126  7D3A  0000              	dw	0x41200000&0xffff
 14127  7D3C  42C8              	dw	0x42c80000>>16
 14128  7D3E  0000              	dw	0x42c80000&0xffff
 14129  7D40  447A              	dw	0x447a0000>>16
 14130  7D42  0000              	dw	0x447a0000&0xffff
 14131  7D44  461C              	dw	0x461c4000>>16
 14132  7D46  4000              	dw	0x461c4000&0xffff
 14133  7D48  47C3              	dw	0x47c35000>>16
 14134  7D4A  5000              	dw	0x47c35000&0xffff
 14135  7D4C  4974              	dw	0x49742400>>16
 14136  7D4E  2400              	dw	0x49742400&0xffff
 14137  7D50  4B18              	dw	0x4b189680>>16
 14138  7D52  9680              	dw	0x4b189680&0xffff
 14139  7D54  4CBE              	dw	0x4cbebc20>>16
 14140  7D56  BC20              	dw	0x4cbebc20&0xffff
 14141  7D58  4E6E              	dw	0x4e6e6b28>>16
 14142  7D5A  6B28              	dw	0x4e6e6b28&0xffff
 14143  7D5C  5015              	dw	0x501502f9>>16
 14144  7D5E  02F9              	dw	0x501502f9&0xffff
 14145  7D60  60AD              	dw	0x60ad78ec>>16
 14146  7D62  78EC              	dw	0x60ad78ec&0xffff
 14147  7D64  7149              	dw	0x7149f2ca>>16
 14148  7D66  F2CA              	dw	0x7149f2ca&0xffff
 14149                          	line	342
 14150  7D68                    _dpowers:
 14151  7D68  0000              	dw	01h>>16
 14152  7D6A  0001              	dw	01h&0xffff
 14153  7D6C  0000              	dw	0Ah>>16
 14154  7D6E  000A              	dw	0Ah&0xffff
 14155  7D70  0000              	dw	064h>>16
 14156  7D72  0064              	dw	064h&0xffff
 14157  7D74  0000              	dw	03E8h>>16
 14158  7D76  03E8              	dw	03E8h&0xffff
 14159  7D78  0000              	dw	02710h>>16
 14160  7D7A  2710              	dw	02710h&0xffff
 14161  7D7C  0001              	dw	0186A0h>>16
 14162  7D7E  86A0              	dw	0186A0h&0xffff
 14163  7D80  000F              	dw	0F4240h>>16
 14164  7D82  4240              	dw	0F4240h&0xffff
 14165  7D84  0098              	dw	0989680h>>16
 14166  7D86  9680              	dw	0989680h&0xffff
 14167  7D88  05F5              	dw	05F5E100h>>16
 14168  7D8A  E100              	dw	05F5E100h&0xffff
 14169  7D8C  3B9A              	dw	03B9ACA00h>>16
 14170  7D8E  CA00              	dw	03B9ACA00h&0xffff
 14171                          	file	"./shtxx.c"
 14172                          	line	222
 14173  7D90                    F815:
 14174  7D90  C080              	dw	0xc0800000>>16
 14175  7D92  0000              	dw	0xc0800000&0xffff
 14176                          	line	223
 14177  7D94                    F816:
 14178  7D94  3D25              	dw	0x3d25e354>>16
 14179  7D96  E354              	dw	0x3d25e354&0xffff
 14180                          	line	225
 14181  7D98                    F818:
 14182  7D98  3C23              	dw	0x3c23d70a>>16
 14183  7D9A  D70A              	dw	0x3c23d70a&0xffff
 14184                          	line	226
 14185  7D9C                    F819:
 14186  7D9C  38A7              	dw	0x38a7c5ac>>16
 14187  7D9E  C5AC              	dw	0x38a7c5ac&0xffff
 14188                          	file	"output\__custom.c"
 14189                          	line	2
 14190  7DA0                    __flash_size:
 14191  7DA0  8000              	dw	08000h
 14192                          	line	1
 14193  7DA2                    __flash_banks:
 14194  7DA2  04                	db	(04h)
 14195                          	line	3
 14196  7DA3                    __flash_blocksize:
 14197  7DA3  40                	db	(040h)
 14198                          	file	"../common/log.c"
 14199                          	line	9
 14200  7DA4                    F64:
 14201  7DA4  0000              	dw	0x0>>16
 14202  7DA6  0000              	dw	0x0&0xffff
 14203  7DA8  3F7F              	dw	0x3f7fffc4>>16
 14204  7DAA  FFC4              	dw	0x3f7fffc4&0xffff
 14205  7DAC  BEFF              	dw	0xbeffef80>>16
 14206  7DAE  EF80              	dw	0xbeffef80&0xffff
 14207  7DB0  3EA9              	dw	0x3ea9e190>>16
 14208  7DB2  E190              	dw	0x3ea9e190&0xffff
 14209  7DB4  BE76              	dw	0xbe7682ec>>16
 14210  7DB6  82EC              	dw	0xbe7682ec&0xffff
 14211  7DB8  3E2B              	dw	0x3e2bad82>>16
 14212  7DBA  AD82              	dw	0x3e2bad82&0xffff
 14213  7DBC  BDC3              	dw	0xbdc33c0e>>16
 14214  7DBE  3C0E              	dw	0xbdc33c0e&0xffff
 14215  7DC0  3D13              	dw	0x3d13d187>>16
 14216  7DC2  D187              	dw	0x3d13d187&0xffff
 14217  7DC4  BBD3              	dw	0xbbd37841>>16
 14218  7DC6  7841              	dw	0xbbd37841&0xffff
 14219                          	file	"./shtxx.c"
 14220                          	line	224
 14221  7DC8                    F817:
 14222  7DC8  B63B              	dw	0xb63be7a2>>16
 14223  7DCA  E7A2              	dw	0xb63be7a2&0xffff
 14224                          	global	__npowers_
 14225                          	global	__powers_
 14226                          	global	_dpowers
 14227                          	global	F815
 14228                          	global	F816
 14229                          	global	F818
 14230                          	global	F819
 14231                          	global	__flash_size
 14232                          	global	__flash_banks
 14233                          	global	__flash_blocksize
 14234                          	global	F64
 14235                          	global	F817
 14236                          	global	__npowers_
 14237                          	global	__powers_
 14238                          	global	_dpowers
 14239                          	global	F815
 14240                          	global	F816
 14241                          	global	F818
 14242                          	global	F819
 14243                          	global	__flash_size
 14244                          	global	__flash_banks
 14245                          	global	__flash_blocksize
 14246                          	global	F64
 14247                          	global	F817
 14248                          	global	_oo_scratchpad
 14249                          	psect	bss2,class=RAM,space=1
 14250  0200                    _oo_scratchpad:
 14251  0200                    	blk	9
 14252                          	global	_id
 14253  0209                    _id:
 14254  0209                    	blk	8
 14255                          	global	_errno
 14256  0211                    _errno:
 14257  0211                    	blk	2
 14258                          	global	_conflict
 14259  0213                    _conflict:
 14260  0213                    	blk	1
 14261                          	global	_crc
 14262  0214                    _crc:
 14263  0214                    	blk	1
 14264                          	global	_new_conflict
 14265                          	psect	rbit0,class=RAM,bit,space=1
 14266  0000                    _new_conflict:
 14267  0000                    	blk	1
 14268                          	psect	strings,class=ROM,space=0,reloc=256
 14269                          ;			XIO=0 
 14270  7E00                    STR_4:	
 14271  7E00  50                	db	80	;'P'
 14272  7E01  72                	db	114	;'r'
 14273  7E02  65                	db	101	;'e'
 14274  7E03  73                	db	115	;'s'
 14275  7E04  73                	db	115	;'s'
 14276  7E05  20                	db	32
 14277  7E06  27                	db	39	;'''
 14278  7E07  3F                	db	63	;'?'
 14279  7E08  27                	db	39	;'''
 14280  7E09  20                	db	32
 14281  7E0A  74                	db	116	;'t'
 14282  7E0B  6F                	db	111	;'o'
 14283  7E0C  20                	db	32
 14284  7E0D  61                	db	97	;'a'
 14285  7E0E  63                	db	99	;'c'
 14286  7E0F  71                	db	113	;'q'
 14287  7E10  75                	db	117	;'u'
 14288  7E11  69                	db	105	;'i'
 14289  7E12  72                	db	114	;'r'
 14290  7E13  65                	db	101	;'e'
 14291  7E14  20                	db	32
 14292  7E15  73                	db	115	;'s'
 14293  7E16  65                	db	101	;'e'
 14294  7E17  6E                	db	110	;'n'
 14295  7E18  73                	db	115	;'s'
 14296  7E19  6F                	db	111	;'o'
 14297  7E1A  72                	db	114	;'r'
 14298  7E1B  20                	db	32
 14299  7E1C  76                	db	118	;'v'
 14300  7E1D  61                	db	97	;'a'
 14301  7E1E  6C                	db	108	;'l'
 14302  7E1F  75                	db	117	;'u'
 14303  7E20  65                	db	101	;'e'
 14304  7E21  73                	db	115	;'s'
 14305  7E22  20                	db	32
 14306  7E23  61                	db	97	;'a'
 14307  7E24  6E                	db	110	;'n'
 14308  7E25  64                	db	100	;'d'
 14309  7E26  20                	db	32
 14310  7E27  74                	db	116	;'t'
 14311  7E28  6F                	db	111	;'o'
 14312  7E29  20                	db	32
 14313  7E2A  67                	db	103	;'g'
 14314  7E2B  65                	db	101	;'e'
 14315  7E2C  6E                	db	110	;'n'
 14316  7E2D  65                	db	101	;'e'
 14317  7E2E  72                	db	114	;'r'
 14318  7E2F  61                	db	97	;'a'
 14319  7E30  74                	db	116	;'t'
 14320  7E31  65                	db	101	;'e'
 14321  7E32  20                	db	32
 14322  7E33  61                	db	97	;'a'
 14323  7E34  20                	db	32
 14324  7E35  72                	db	114	;'r'
 14325  7E36  65                	db	101	;'e'
 14326  7E37  70                	db	112	;'p'
 14327  7E38  6F                	db	111	;'o'
 14328  7E39  72                	db	114	;'r'
 14329  7E3A  74                	db	116	;'t'
 14330  7E3B  00                	db	0
 14331                          ;			XIO=0 
 14332  7E3C                    STR_15:	
 14333  7E3C  53                	db	83	;'S'
 14334  7E3D  48                	db	72	;'H'
 14335  7E3E  54                	db	84	;'T'
 14336  7E3F  78                	db	120	;'x'
 14337  7E40  78                	db	120	;'x'
 14338  7E41  20                	db	32
 14339  7E42  54                	db	84	;'T'
 14340  7E43  3A                	db	58	;':'
 14341  7E44  25                	db	37	;'%'
 14342  7E45  35                	db	53	;'5'
 14343  7E46  2E                	db	46	;'.'
 14344  7E47  31                	db	49	;'1'
 14345  7E48  66                	db	102	;'f'
 14346  7E49  20                	db	32
 14347  7E4A  43                	db	67	;'C'
 14348  7E4B  20                	db	32
 14349  7E4C  52                	db	82	;'R'
 14350  7E4D  48                	db	72	;'H'
 14351  7E4E  3A                	db	58	;':'
 14352  7E4F  25                	db	37	;'%'
 14353  7E50  35                	db	53	;'5'
 14354  7E51  2E                	db	46	;'.'
 14355  7E52  31                	db	49	;'1'
 14356  7E53  66                	db	102	;'f'
 14357  7E54  25                	db	37	;'%'
 14358  7E55  25                	db	37	;'%'
 14359  7E56  20                	db	32
 14360  7E57  44                	db	68	;'D'
 14361  7E58  65                	db	101	;'e'
 14362  7E59  77                	db	119	;'w'
 14363  7E5A  50                	db	80	;'P'
 14364  7E5B  74                	db	116	;'t'
 14365  7E5C  3A                	db	58	;':'
 14366  7E5D  25                	db	37	;'%'
 14367  7E5E  35                	db	53	;'5'
 14368  7E5F  2E                	db	46	;'.'
 14369  7E60  31                	db	49	;'1'
 14370  7E61  66                	db	102	;'f'
 14371  7E62  20                	db	32
 14372  7E63  43                	db	67	;'C'
 14373  7E64  0D                	db	13
 14374  7E65  0A                	db	10
 14375  7E66  00                	db	0
 14376                          ;			XIO=0 
 14377  7E67                    STR_13:	
 14378  7E67  50                	db	80	;'P'
 14379  7E68  72                	db	114	;'r'
 14380  7E69  6F                	db	111	;'o'
 14381  7E6A  62                	db	98	;'b'
 14382  7E6B  6C                	db	108	;'l'
 14383  7E6C  65                	db	101	;'e'
 14384  7E6D  6D                	db	109	;'m'
 14385  7E6E  20                	db	32
 14386  7E6F  64                	db	100	;'d'
 14387  7E70  65                	db	101	;'e'
 14388  7E71  74                	db	116	;'t'
 14389  7E72  65                	db	101	;'e'
 14390  7E73  63                	db	99	;'c'
 14391  7E74  74                	db	116	;'t'
 14392  7E75  69                	db	105	;'i'
 14393  7E76  6E                	db	110	;'n'
 14394  7E77  67                	db	103	;'g'
 14395  7E78  20                	db	32
 14396  7E79  66                	db	102	;'f'
 14397  7E7A  69                	db	105	;'i'
 14398  7E7B  72                	db	114	;'r'
 14399  7E7C  73                	db	115	;'s'
 14400  7E7D  74                	db	116	;'t'
 14401  7E7E  20                	db	32
 14402  7E7F  64                	db	100	;'d'
 14403  7E80  65                	db	101	;'e'
 14404  7E81  76                	db	118	;'v'
 14405  7E82  69                	db	105	;'i'
 14406  7E83  63                	db	99	;'c'
 14407  7E84  65                	db	101	;'e'
 14408  7E85  20                	db	32
 14409  7E86  6F                	db	111	;'o'
 14410  7E87  6E                	db	110	;'n'
 14411  7E88  20                	db	32
 14412  7E89  74                	db	116	;'t'
 14413  7E8A  68                	db	104	;'h'
 14414  7E8B  65                	db	101	;'e'
 14415  7E8C  20                	db	32
 14416  7E8D  62                	db	98	;'b'
 14417  7E8E  75                	db	117	;'u'
 14418  7E8F  73                	db	115	;'s'
 14419  7E90  00                	db	0
 14420                          ;			XIO=0 
 14421  7E91                    STR_12:	
 14422  7E91  54                	db	84	;'T'
 14423  7E92  69                	db	105	;'i'
 14424  7E93  6D                	db	109	;'m'
 14425  7E94  65                	db	101	;'e'
 14426  7E95  64                	db	100	;'d'
 14427  7E96  20                	db	32
 14428  7E97  6F                	db	111	;'o'
 14429  7E98  75                	db	117	;'u'
 14430  7E99  74                	db	116	;'t'
 14431  7E9A  20                	db	32
 14432  7E9B  77                	db	119	;'w'
 14433  7E9C  68                	db	104	;'h'
 14434  7E9D  69                	db	105	;'i'
 14435  7E9E  6C                	db	108	;'l'
 14436  7E9F  65                	db	101	;'e'
 14437  7EA0  20                	db	32
 14438  7EA1  77                	db	119	;'w'
 14439  7EA2  61                	db	97	;'a'
 14440  7EA3  69                	db	105	;'i'
 14441  7EA4  74                	db	116	;'t'
 14442  7EA5  69                	db	105	;'i'
 14443  7EA6  6E                	db	110	;'n'
 14444  7EA7  67                	db	103	;'g'
 14445  7EA8  20                	db	32
 14446  7EA9  66                	db	102	;'f'
 14447  7EAA  6F                	db	111	;'o'
 14448  7EAB  72                	db	114	;'r'
 14449  7EAC  20                	db	32
 14450  7EAD  63                	db	99	;'c'
 14451  7EAE  6F                	db	111	;'o'
 14452  7EAF  6E                	db	110	;'n'
 14453  7EB0  76                	db	118	;'v'
 14454  7EB1  65                	db	101	;'e'
 14455  7EB2  72                	db	114	;'r'
 14456  7EB3  73                	db	115	;'s'
 14457  7EB4  69                	db	105	;'i'
 14458  7EB5  6F                	db	111	;'o'
 14459  7EB6  6E                	db	110	;'n'
 14460  7EB7  21                	db	33	;'!'
 14461  7EB8  00                	db	0
 14462                          ;			XIO=0 
 14463  7EB9                    STR_11:	
 14464  7EB9  4E                	db	78	;'N'
 14465  7EBA  6F                	db	111	;'o'
 14466  7EBB  20                	db	32
 14467  7EBC  4F                	db	79	;'O'
 14468  7EBD  6E                	db	110	;'n'
 14469  7EBE  65                	db	101	;'e'
 14470  7EBF  57                	db	87	;'W'
 14471  7EC0  69                	db	105	;'i'
 14472  7EC1  72                	db	114	;'r'
 14473  7EC2  65                	db	101	;'e'
 14474  7EC3  20                	db	32
 14475  7EC4  64                	db	100	;'d'
 14476  7EC5  65                	db	101	;'e'
 14477  7EC6  76                	db	118	;'v'
 14478  7EC7  69                	db	105	;'i'
 14479  7EC8  63                	db	99	;'c'
 14480  7EC9  65                	db	101	;'e'
 14481  7ECA  73                	db	115	;'s'
 14482  7ECB  20                	db	32
 14483  7ECC  66                	db	102	;'f'
 14484  7ECD  6F                	db	111	;'o'
 14485  7ECE  75                	db	117	;'u'
 14486  7ECF  6E                	db	110	;'n'
 14487  7ED0  64                	db	100	;'d'
 14488  7ED1  20                	db	32
 14489  7ED2  6F                	db	111	;'o'
 14490  7ED3  6E                	db	110	;'n'
 14491  7ED4  20                	db	32
 14492  7ED5  74                	db	116	;'t'
 14493  7ED6  68                	db	104	;'h'
 14494  7ED7  65                	db	101	;'e'
 14495  7ED8  20                	db	32
 14496  7ED9  62                	db	98	;'b'
 14497  7EDA  75                	db	117	;'u'
 14498  7EDB  73                	db	115	;'s'
 14499  7EDC  21                	db	33	;'!'
 14500  7EDD  00                	db	0
 14501                          ;			XIO=0 
 14502  7EDE                    STR_3:	
 14503  7EDE  4C                	db	76	;'L'
 14504  7EDF  69                	db	105	;'i'
 14505  7EE0  65                	db	101	;'e'
 14506  7EE1  76                	db	118	;'v'
 14507  7EE2  65                	db	101	;'e'
 14508  7EE3  6E                	db	110	;'n'
 14509  7EE4  20                	db	32
 14510  7EE5  48                	db	72	;'H'
 14511  7EE6  6F                	db	111	;'o'
 14512  7EE7  6C                	db	108	;'l'
 14513  7EE8  6C                	db	108	;'l'
 14514  7EE9  65                	db	101	;'e'
 14515  7EEA  76                	db	118	;'v'
 14516  7EEB  6F                	db	111	;'o'
 14517  7EEC  65                	db	101	;'e'
 14518  7EED  74                	db	116	;'t'
 14519  7EEE  2C                	db	44	;','
 14520  7EEF  20                	db	32
 14521  7EF0  32                	db	50	;'2'
 14522  7EF1  30                	db	48	;'0'
 14523  7EF2  30                	db	48	;'0'
 14524  7EF3  39                	db	57	;'9'
 14525  7EF4  00                	db	0
 14526                          ;			XIO=0 
 14527  7EF5                    STR_8:	
 14528  7EF5  4F                	db	79	;'O'
 14529  7EF6  6E                	db	110	;'n'
 14530  7EF7  65                	db	101	;'e'
 14531  7EF8  57                	db	87	;'W'
 14532  7EF9  69                	db	105	;'i'
 14533  7EFA  72                	db	114	;'r'
 14534  7EFB  65                	db	101	;'e'
 14535  7EFC  20                	db	32
 14536  7EFD  00                	db	0
 14537  7EFE  00                	db	(0)
 14538  7EFF  00                	db	(0)
 14539                          ;			XIO=0 
 14540  7F00                    STR_5:	
 14541  7F00  2D                	db	45	;'-'
 14542  7F01  3E                	db	62	;'>'
 14543  7F02  20                	db	32
 14544  7F03  4F                	db	79	;'O'
 14545  7F04  6E                	db	110	;'n'
 14546  7F05  65                	db	101	;'e'
 14547  7F06  57                	db	87	;'W'
 14548  7F07  69                	db	105	;'i'
 14549  7F08  72                	db	114	;'r'
 14550  7F09  65                	db	101	;'e'
 14551  7F0A  20                	db	32
 14552  7F0B  64                	db	100	;'d'
 14553  7F0C  65                	db	101	;'e'
 14554  7F0D  76                	db	118	;'v'
 14555  7F0E  69                	db	105	;'i'
 14556  7F0F  63                	db	99	;'c'
 14557  7F10  65                	db	101	;'e'
 14558  7F11  73                	db	115	;'s'
 14559  7F12  0D                	db	13
 14560  7F13  0A                	db	10
 14561  7F14  00                	db	0
 14562                          ;			XIO=0 
 14563  7F15                    STR_6:	
 14564  7F15  2D                	db	45	;'-'
 14565  7F16  3E                	db	62	;'>'
 14566  7F17  20                	db	32
 14567  7F18  53                	db	83	;'S'
 14568  7F19  48                	db	72	;'H'
 14569  7F1A  54                	db	84	;'T'
 14570  7F1B  78                	db	120	;'x'
 14571  7F1C  78                	db	120	;'x'
 14572  7F1D  20                	db	32
 14573  7F1E  73                	db	115	;'s'
 14574  7F1F  65                	db	101	;'e'
 14575  7F20  6E                	db	110	;'n'
 14576  7F21  73                	db	115	;'s'
 14577  7F22  6F                	db	111	;'o'
 14578  7F23  72                	db	114	;'r'
 14579  7F24  73                	db	115	;'s'
 14580  7F25  0D                	db	13
 14581  7F26  0A                	db	10
 14582  7F27  00                	db	0
 14583                          ;			XIO=0 
 14584  7F28                    STR_1:	
 14585  7F28  53                	db	83	;'S'
 14586  7F29  65                	db	101	;'e'
 14587  7F2A  6E                	db	110	;'n'
 14588  7F2B  73                	db	115	;'s'
 14589  7F2C  6F                	db	111	;'o'
 14590  7F2D  72                	db	114	;'r'
 14591  7F2E  20                	db	32
 14592  7F2F  67                	db	103	;'g'
 14593  7F30  61                	db	97	;'a'
 14594  7F31  74                	db	116	;'t'
 14595  7F32  65                	db	101	;'e'
 14596  7F33  77                	db	119	;'w'
 14597  7F34  61                	db	97	;'a'
 14598  7F35  79                	db	121	;'y'
 14599  7F36  20                	db	32
 14600  7F37  76                	db	118	;'v'
 14601  7F38  2E                	db	46	;'.'
 14602  7F39  00                	db	0
 14603                          ;			XIO=0 
 14604  7F3A                    STR_14:	
 14605  7F3A  53                	db	83	;'S'
 14606  7F3B  48                	db	72	;'H'
 14607  7F3C  54                	db	84	;'T'
 14608  7F3D  78                	db	120	;'x'
 14609  7F3E  78                	db	120	;'x'
 14610  7F3F  20                	db	32
 14611  7F40  65                	db	101	;'e'
 14612  7F41  72                	db	114	;'r'
 14613  7F42  72                	db	114	;'r'
 14614  7F43  6F                	db	111	;'o'
 14615  7F44  72                	db	114	;'r'
 14616  7F45  3A                	db	58	;':'
 14617  7F46  20                	db	32
 14618  7F47  00                	db	0
 14619                          ;			XIO=0 
 14620  7F48                    STR_7:	
 14621  7F48  2D                	db	45	;'-'
 14622  7F49  3E                	db	62	;'>'
 14623  7F4A  20                	db	32
 14624  7F4B  45                	db	69	;'E'
 14625  7F4C  4F                	db	79	;'O'
 14626  7F4D  54                	db	84	;'T'
 14627  7F4E  0D                	db	13
 14628  7F4F  0A                	db	10
 14629  7F50  00                	db	0
 14630                          ;			XIO=0 
 14631  7F51                    STR_2:	
 14632  7F51  30                	db	48	;'0'
 14633  7F52  2E                	db	46	;'.'
 14634  7F53  39                	db	57	;'9'
 14635  7F54  39                	db	57	;'9'
 14636  7F55  00                	db	0
 14637                          ;			XIO=0 
 14638  7F56                    STR_9:	
 14639  7F56  20                	db	32
 14640  7F57  2D                	db	45	;'-'
 14641  7F58  20                	db	32
 14642  7F59  00                	db	0
 14643  7F56                    STR_10	equ	STR_9+0
 14644                          	file "(null)"
 14645                          	line	1
 14646                          	psect	text
 14647                          	global	___end_of_c_program_code,___start_of_c_program_code
 14648  7BE0                    ___end_of_c_program_code:


HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:23 2009

           ?_oo_crc_shuffle_byte 0034        __end_of_s_connectionreset 4D3D                 ___awdiv@dividend 005D  
                              l3 7CAC                                l4 4D82                                l5 4156  
                              l6 43DA                                l8 7C82                                l9 7BEA  
          ??_oo_crc_shuffle_byte 0035                               F64 7DA4                      _oo_busreset 5A59  
         _oo_wait_for_completion 4C9C                               l11 7C82                               l20 5ABC  
                             l12 7C79                               l21 5AA5                               l13 7C74  
                             l22 5A87                               l30 59E1                               l14 7C79  
                             l15 6309                               l23 5AB0                               l31 59C3  
                             l40 70F1                               l32 59E1                               l17 5A65  
                             l18 6DB5                               l26 59F7                               l34 4CD1  
                             l42 4BFA                               l50 42F2                               l19 704A  
                             l27 59F2                               l35 4CC3                               l43 4B83  
                             l51 4319                               l60 62F5                               l36 4CA8  
                             l44 4BDB                               l52 4329                               l61 6274  
                             l37 4CCC                               l45 4C99                               l29 43FC  
                             l62 62C5                               l70 5B01                               l46 4C21  
                             l39 7016                               l71 5B37                               l47 4C4A  
                             l55 4386                               l64 628C                               l72 5B3F  
                             l56 4342                               l65 6294                               l73 5A56  
                             l81 452D                               l49 4386                               l66 5B64  
                             l74 4D3A                               l90 448D                               l82 446E  
                             l67 5AE7                               l59 4D8D                               l75 4D05  
                             l91 44C7                               l83 445F                               l68 5B21  
                             l76 4D35                               l92 4AA7                               l84 4414  
                             l93 4A35                               l85 4438                               l94 4A76  
                             l86 445C                               l95 4741                               l87 448A  
                             l88 44AF                               l96 42C9                               l97 41E6  
                             l98 42C9                               l99 6BB0                 calc_sth11@rh_lin 0024  
                             _id 0209              __end_of_oo_busreset 5A68                        l400001852 71E4  
                      l400001853 71E6                        l400001838 6327                        l400001839 6329  
                     _oo_rx_byte 7019                              F815 7D90                              F816 7D94  
                            F817 7DC8                              F818 7D98                              F819 7D9C  
                   calc_sth11@rh 001C                       _Ticker_ISR 7C88                       _oo_tx_byte 6DA4  
             __end_of_oo_rx_byte 704D                   calc_dewpoint@h 0014                   calc_dewpoint@t 0018  
                       ___flpack 78CD               __end_of_Ticker_ISR 7CC9                              l100 6BAA  
                            l110 5FC0                              l111 5D9D                              l200 7095  
                            l112 5CC4                              l120 59A4                              l113 5D77  
                            l121 5988                              l106 625B                              l130 4EC6  
                            l122 4DA4                              l107 6132                              l115 5EE7  
                            l123 59A1                              l131 4E7A                              l108 620B  
                            l116 5F9A                              l140 57B7                              l132 4ED9  
                            l124 4DC0                              l141 4F7D                              l133 4EF5  
                            l125 4E54                              l214 658A                              l150 52CE  
                            l142 500C                              l134 4F33                              l151 52DF  
                            l143 51B1                              l135 4F12                              l127 4E54  
                            l320 7BB8                              l216 657E                              l160 54CF  
                            l152 53ED                              l144 50DC                              l136 4EF8  
                            l128 4DF5                              l321 7AF9                              l217 651B  
                            l161 54FF                              l153 5404                              l145 5174  
                            l137 59A1                              l129 4EDC                              l330 7A1B  
                            l322 7919                              l410 6DE3                              l218 6549  
                            l170 5612                              l162 552A                              l154 544D  
                            l146 51B1                              l138 4EFB                              l331 7A88  
                            l323 7948                              l411 6E0C                              l171 5647  
                            l163 559F                              l147 51B1                              l139 4F0F  
                            l332 7AB0                              l324 791C                              l500 6FFC  
                            l420 6EE8                              l412 6ECB                              l180 585C  
                            l172 5770                              l164 552D                              l156 543C  
                            l148 5218                              l325 798B                              l341 74A0  
                            l333 767D                              l413 6E4D                              l421 6794  
                            l181 585C                              l173 56B1                              l165 55B0  
                            l157 549E                              l149 535D                              l318 7BDD  
                            l326 79D5                              l342 7469                              l334 73BD  
                            l414 6E31               __end_of_oo_tx_byte 6DB8                              l422 6791  
                            l190 5932                              l182 589B                              l174 5781  
                            l166 55D2                              l158 54CC                              l319 7B46  
                            l327 798E                              l351 753A                              l343 74C5  
                            l335 7401                              l415 6E6A                              l423 6700  
                            l191 5988                              l183 58C6                              l175 57A3  
                            l167 55B3                              l159 54EE                              l503 4B20  
                            l328 7A18                              l432 78CA                              l352 7503  
                            l344 74A3                              l336 7644                              l440 68E0  
                            l360 67EE                              l424 66E0                              l192 632C  
                            l184 58D3                              l176 5784                              l168 55E3  
                            l504 4AD3                              l329 7A45                              l433 78C7  
                            l353 755F                              l345 74D0                              l337 74D3  
                            l409 6EF4                              l417 6ECB                              l193 6DA1  
                            l441 68B2                              l425 673D                              l361 64AC  
                            l185 5914                              l177 57B4                              l169 5600  
                            l370 7706                              l354 753D                              l346 756A  
                            l418 6E6A                              l194 6C04                              l442 68D5  
                            l434 6927                              l362 6388                              l186 5921  
                            l178 57F6                              l347 756A                              l355 756A  
                            l339 74D0                              l419 6EA7                              l195 6C46  
                            l443 68B5                              l435 688F                              l427 6791  
                            l363 63CC                              l187 595D                              l179 582D  
                            l372 77AA                              l356 759A                              l452 73B7  
                            l380 71E9                              l444 68E0                              l428 673D  
                            l460 6623                              l196 650B                              l373 771B  
                            l357 75CA                              l349 756A                              l453 72F7  
                            l381 714E                              l445 690F                              l429 6769  
                            l365 645E                              l189 595D                              l374 776D  
                            l358 7644                              l454 7349                              l382 71A8  
                            l438 688C                              l462 669C                              l366 63E7  
                            l359 767A                              l455 739F                              l199 70CE  
                            l439 6864                              l463 6623                              l367 6438  
                            l376 7844                              l640 72CB                              l456 66B4  
                            l464 6674                              l368 6494                              l377 77B3  
                            l369 7892                              l641 72A2                              l457 669C  
                            l378 7805                              l642 721D                              l490 6F22  
                            l458 65E6                              l379 787A                              l643 72B3  
                            l491 6F45                              l459 65C6                              l492 6FDF  
                            l580 6A4B                              l493 6F7E                              l581 69D4  
                            l494 6F62                              l590 6AEE                              l582 6A25  
                            l495 6F9B                              l591 6ACE                              l583 6AA8  
                            l568 6B90                              l592 6AF9                              l576 6B11  
                            l489 7008                              l497 6FDF                              l569 6B49  
                            l577 697C                              l498 6F9B                              l586 6AA5  
                            l578 69B9                              l499 6FBB                              l587 6A7D  
                            l588 6AF9                              l589 6ACB                         ___awtofl 72CE  
                 _OneWire_GetROM 3E71                     ___fladd@exp1 0054                     ___fladd@exp2 0055  
                      ?___flpack 0070                     ___fladd@cntr 0057                        l600001840 6322  
                      l600001850 753A                        l600001826 528E                        l600001851 76EE  
                      l600001848 78FB                        l600001849 74A0                         ___lltofl 6B14  
              oo_print_data@data 0014                calc_sth11@rh_true 0018                              _crc 0214  
              oo_print_data@cntr 0021                _OneWire_WriteByte 3E21                        ?___awtofl 003F  
                            _log 6BB3                         ___lwtofl 4AAA                     ?_s_read_byte 0021  
                      printf@exp 0030                   s_read_byte@ack 0021                   _OneWire_SetROM 3E9B  
                      ?___lltofl 0040                   s_read_byte@val 0023                  __div_to_l_@exp1 004C  
                __div_to_l_@cntr 004D                        ?___lwtofl 0014                       ??___flpack 0073  
                __div_to_l_@quot 0048                    calc_sth11@t_C 0020                       ??___awtofl 0043  
                 _OneWire_fReset 3DEB                      ?_oo_tx_byte 0033                oo_read_device@crc 002E  
                     ??___lltofl 0044              _Counter8_ltrx_Start 3AEE                       ??___lwtofl 0018  
                        ??_frexp 0045                          ??_scale 0044                             ?_log 0038  
                 ?_calc_dewpoint 0014                             STR_1 7F28                             STR_2 7F51  
                           STR_3 7EDE                             STR_4 7E00                             STR_5 7F00  
                           STR_6 7F15                             STR_7 7F48                             STR_8 7EF5  
                           STR_9 7F56                             u2003 7830                             u2014 7823  
                           u2023 712F                             u2103 6E88                             u2033 7189  
                           u2113 6EB7                             u1313 62B7                             u2043 6E23  
                           u2203 6878                             u1403 505A                             u2124 6EAE  
                           u1324 62B0                             u2053 6E3F                             u2133 66D2  
                           u1333 5B15                             u2214 686B                             u1414 5052  
                           u2223 68C7                             u2143 66F2                             u1503 584C  
                           u1423 5244                             u2064 6E36                             u2304 6628  
                           u1344 5B10                             u2073 6E68                             u2313 6688  
                           u1513 586B                             u1433 527B                             u1353 4485  
                           u2234 68BA                             u2154 66E5                             u2243 72DD  
                           u2083 6E78                             u2163 673B                             u1523 5888  
                           u1443 548B                             u2403 4AB9                             u1363 44AD  
                           u2324 667B                             u1604 654E                             u2333 6F54  
                           u2413 6B2F                             u2173 677D                             u2253 65B8  
                           u1613 656A                             u1533 5930                             u1453 54B9  
                           u1373 4F4E                             u2094 6E6F                             u2503 72B1  
                           u2343 6F70                             u2423 69E6                             u2263 65D8  
                           u1543 595B                             u1463 551A                             u1383 4F6E  
                           u1704 79CA                             u2184 6770                             u1624 6561  
                           u1713 7A16                             u2193 78B0                             u1633 657C  
                           u1553 5978                             u1473 57B2                             u1393 5034  
                           u2513 4B78                             u2354 6F67                             u2434 69D9  
                           u2274 65CB                             u1643 7BAB                             u1723 7A42  
                           u2363 6F99                             u1563 6C1F                             u2443 6A37  
                           u2283 6621                             u1483 57C6                             u2523 4BEF  
                           u1804 746E                             u1653 78F9                             u1813 74B7  
                           u1573 7068                             u2373 6FA8                             u2293 6635  
                           u1493 57E3                             u2533 435B                             u1734 7A3A  
                           u2454 6A2A                             u1743 7A86                             u1663 7945  
                           u2383 6FCB                             u2463 6A91                             u1583 6536  
                           u1903 644A                             u2543 436C                             u1824 74AA  
                           u1753 7ABE                             u1833 7515                             u1593 6557  
                           u2553 7C1E                             u1674 793D                             u2394 6FC2  
                           u2474 6A84                             u1914 643D                             u1683 7989  
                           u1923 7756                             u2483 6AE0                             u1764 7AB7  
                           u1844 7508                             u1773 7AE0                             u1693 79D2  
                           u1933 7781                             u1853 7551                             u2494 6AD3  
                           u1784 7AD8                             u1944 7774                             u1864 7544  
                           u1953 7796                             u1873 7619                             u1793 747B  
                           u1883 63F9                             u1964 7789                             u1973 77EE  
                           u1894 63EC                             u1983 7819                             u1994 780C  
                   ___fldiv@exp1 0041                     ___fldiv@exp2 0043                 ___awdiv@quotient 0061  
                       __powers_ 7D34                  ??_calc_dewpoint 001C                         _conflict 0213  
                  ___fladd@sign1 0056                    ___fladd@sign2 0058                     ___awdiv@sign 0063  
                     _print_help 413B                             _main 7BE0               calc_dewpoint@logEx 001C  
             __end_of_print_help 4159                       printf@_val 0026                       printf@flag 0034  
                           log@x 0038                       printf@fval 0022                       printf@prec 002E  
                 ??_s_write_byte 0022                     ___flpack@arg 0070                     ___flpack@exp 0072  
         calc_dewpoint@dew_point 0020          ___end_of_c_program_code 7BE0              s_measure@p_checksum 0016  
                     _LTRX_Start 3B97                     ___awmod@sign 0061                     ??_oo_rx_byte 0033  
                     ___fladd@f1 004C                       ___fladd@f2 0050                          ?___flge 0040  
                   ___flmul@exp1 006A                     ___flmul@cntr 0069                       ___flge@ff1 0040  
                     ___flge@ff2 0044               oo_read_device@data 0021                     s_read_byte@i 0022  
       ??_oo_wait_for_completion 0014                  _OneWire_fVerify 3FFC                         ??___flge 0048  
                      _delay_1us 6BAD                          ?___wmul 0040                        _delay_5us 6B93  
                __end_of___fladd 7680                __end_of_delay_1us 6BB3                __end_of_delay_5us 6BAD  
                __end_of___fldiv 64AF                       ___fldiv@f1 0034                       ___fldiv@f2 0038  
                __end_of___awdiv 6EF7                       ___fldiv@f3 003C                  __end_of___flneg 78CD  
                          ??_log 003C                         ??___wmul 0044                  __end_of___awmod 700B  
                __end_of___flmul 7895                  __end_of___flsub 67F1                  __end_of___fltol 692A  
                __end_of___lldiv 66B7                  __end_of___llmod 6797                       ___flneg@f1 004B  
                          IDX_PP 00D3                     ___fltol@exp1 0048                            CUR_PP 00D0  
                   ___fltol@lval 0044                   ___wmul@product 0044                          ?_fround 0040  
                     ___flmul@f1 005D                       ___flmul@f2 0061                       ___flmul@f3 0065  
                   _Ticker_Start 40E1                    s_measure@mode 0018                         ??_fround 0044  
                     ___flsub@f1 0040                       ___flsub@f2 0044                       ___fltol@f1 0040  
                   _s_transstart 59FA                            MVR_PP 00D4                            MVW_PP 00D5  
                        ?_printf 0014                            STR_10 7F56                            STR_11 7EB9  
                          STR_12 7E91                            STR_13 7E67                            STR_14 7F3A  
                          STR_15 7E3C                    __end_of_log10 650E                       ___awtofl@c 003F  
                      __npowers_ 7D00                       ___flunpack 7AFC                         ??_printf 0022  
                  _oo_scratchpad 0200                    __end_of_frexp 70D1                    __end_of_scale 5FC3  
                 _oo_read_device 4B23               __end_of___flunpack 7BE0                    __end_of_putch 630C  
                __end_of_s_Start 4D90                    ___fldiv@sign1 0042                    ___fldiv@sign2 0040  
                  ??_s_read_byte 0022                  ?_oo_read_device 0014             __end_of_s_transstart 5A59  
                __end_of_isdigit 632F                   ___flunpack@arg 0070                   ___flunpack@exp 0072  
                     ___lltofl@c 0040                 ??_oo_read_device 0021                            _log10 64AF  
              _s_connectionreset 4CD4                      ?___flunpack 0070              _oo_start_conversion 43DD  
                          _frexp 704D                            _errno 0211                  ___llmod@divisor 0044  
                          _scale 5B67                        _eval_poly 71EC                  ___llmod@counter 0048  
                          _putch 62F8                __end_of_eval_poly 72CE                         isdigit@c 0040  
                     ___lwtofl@c 0014                         scale@scl 0040          calc_sth11@p_temperature 0016  
                    printf@integ 002A                      printf@width 0032                       ?_eval_poly 003F  
                     __div_to_l_ 692A                s_do_measure@error 0010                         intlevel1 00A5  
             __end_of__div_to_l_ 6B14                    _oo_print_data 4BFD                     _s_write_byte 625E  
                    _LED1_Invert 3B53                    oo_report@data 0004             s_do_measure@checksum 0011  
                 ??_s_do_measure 0004                       _calc_sth11 4744                ___wmul@multiplier 0040  
             __end_of_calc_sth11 4AAA                       eval_poly@d 0043                       eval_poly@n 0045  
                     eval_poly@x 003F                   oo_rx_byte@data 0033       __end_of_oo_conversion_busy 59FA  
                      _s_measure 43FF                __end_of_s_measure 4530                 _LTRX_PutSHexByte 3BF1  
           __end_of_s_write_byte 62F8              _oo_crc_shuffle_byte 70D1                      ??_eval_poly 0047  
    __end_of_oo_start_conversion 43FF                      ?__div_to_l_ 0040           __end_of_oo_read_device 4BFD  
                   ___lltofl@exp 0048       __end_of_oo_read_scratchpad 5ABF                  ___awdiv@divisor 005F  
                     ?_s_measure 0014                        _oo_report 42CC                  ___awdiv@counter 0064  
                  __div_to_l_@f1 0040                    __div_to_l_@f2 0044                      ?_calc_sth11 0014  
                   ??___flunpack 0074                __end_of_oo_report 4389                      calc_sth11@t 0028  
          __end_of_oo_print_data 4C9C                          ___fladd 73BA                          ___fldiv 632F  
                        ___awdiv 6DB8                          ___flneg 7895                          ___awmod 6EF7  
                        ___flmul 7680                          ___flsub 6797                          ___fltol 67F1  
                       ?___fladd 004C                          ___lldiv 658D                          ___llmod 66B7  
                       ?___fldiv 0034                    s_write_byte@i 0022                         ?___awdiv 005D  
                       ?___flneg 004B                 s_measure@p_value 0014                       _delay_10ms 59A7  
                     frexp@value 003F                         ?___awmod 005D                         ?___flmul 005D  
                       ?___flsub 0040                         ?___fltol 0040                         ?___lldiv 0040  
                       printf@ap 0036                         ?___llmod 0040                    ___flmul@sign1 006B  
             __end_of_delay_10ms 59E4                        ??___fladd 0054                        ??___fldiv 003C  
                      ??___awdiv 0061                        ??___awmod 0061                        ??___flmul 0065  
                  _OneWire_Start 3DD3                        ??___fltol 0044                        ??___lldiv 0048  
           s_do_measure@humi_val 0008                        ??___llmod 0048                           ??_main 0001  
               __end_of___flpack 7AFC                      ??_s_measure 0019                          _crc_rom 0100  
               __end_of___awtofl 73BA                 __end_of___lltofl 6B93                          _s_Start 4D85  
    __end_of_oo_crc_shuffle_byte 70F4                delay_10ms@counter 0015                          _dpowers 7D68  
           s_do_measure@temp_val 0004                 __end_of___lwtofl 4B23                          _isdigit 630C  
                  ___fltol@sign1 0049                      ??_oo_report 0004                         ?_isdigit 0040  
                 _LTRX_EnableInt 3B77                     ??__div_to_l_ 0048                   s_measure@error 0019  
           calc_sth11@p_humidity 0014                   __end_of___flge 71EC                           ?_log10 0034  
                         TMP_DR0 006C                           TMP_DR1 006D                           TMP_DR2 006E  
                   ??_calc_sth11 0018                           TMP_DR3 006F                           ?_frexp 003F  
                 __end_of___wmul 658D                    _calc_dewpoint 4530                           ?_scale 0040  
                    ___awtofl@f1 0043                           ?_putch 0040        oo_read_scratchpad@counter 0032  
                   __end_of_main 7C88                   __end_of_fround 625E                   __end_of_printf 59A7  
                     fround@prec 0040                     _s_do_measure 4159                    _hardware_init 4389  
                  ?_s_write_byte 0021                  _LTRX_szGetParam 3CF6             ??_oo_read_scratchpad 0032  
                _calc_sth11$2720 002C                  _calc_sth11$2713 0030                  _calc_sth11$2714 0034  
                 oo_tx_byte@data 0033            __end_of_calc_dewpoint 4744                     ??_delay_10ms 0015  
                     _LED1_Start 3B37                     __flash_banks 7DA2                 _Ticker_EnableInt 40D9  
           __end_of_s_do_measure 42CC                s_write_byte@error 0023                      ___lltofl@f1 0044  
                ___flunpack@sign 0074                s_write_byte@value 0021                   _LTRX_bCmdCheck 3CDD  
                         ___flge 70F4                        frexp@eptr 0043                           ___exit 7C85  
                        printf@c 0038                          printf@f 0014                      _fround$2745 004C  
                    _fround$2753 0044                      _fround$2746 004A                      _fround$2747 004E  
                    _fround$2748 0046              ??_s_connectionreset 0014                           ___wmul 650E  
                   _print_header 4D3D                    _LTRX_CmdReset 3CC7                       s_measure@i 001B  
          __end_of_hardware_init 43DD                 ___llmod@dividend 0040                           _fround 5FC3  
             s_connectionreset@i 0014                           log10@x 0034                           _printf 4D90  
           __end_of_print_header 4D85    oo_wait_for_completion@counter 0014                      __end_of_log 6DA4  
               ___lldiv@dividend 0040                      ___lwtofl@f1 0018                           log@exp 003C  
                     _scale$2761 005A                       _scale$2762 0058                       _scale$2763 0056  
                     _scale$2764 0052                       _scale$2782 0044                       _scale$2775 004E  
                     _scale$2768 0050                       _scale$2776 004C                       _scale$2777 004A  
                     _scale$2778 0046                     _new_conflict 0000                     main@UART_bfr 0001  
 __end_of_oo_wait_for_completion 4CD4                      __flash_size 7DA0              ___wmul@multiplicand 0042  
                         putch@c 0040                     eval_poly@res 0047               _calc_dewpoint$2734 0028  
             _calc_dewpoint$2735 0024               _calc_dewpoint$2728 0030               _calc_dewpoint$2729 002C  
               __flash_blocksize 7DA3                  _LTRX_CPutString 3CAC                  ___lldiv@divisor 0044  
       oo_crc_shuffle_byte@input 0034               _oo_conversion_busy 59E4                  ___lldiv@counter 004C  
             _OneWire_fFindFirst 3EC5                     _LTRX_PutCRLF 3CBE               _oo_read_scratchpad 5A68  
                 ?_oo_print_data 0014                _OneWire_bReadByte 3E3C                     _LTRX_PutChar 3C0B  
              _OneWire_fFindNext 3EDA                  ??_oo_print_data 0021                      _s_read_byte 5ABF  
               ___awmod@dividend 005D                      _oo_crc_init 700B            s_do_measure@dew_point 000C  
               ___lldiv@quotient 0048                        Ticker_ISR 7C88        ___start_of_c_program_code 413B  
                ___awmod@divisor 005F              __end_of_s_read_byte 5B67              __end_of_oo_crc_init 7019  
                ___awmod@counter 0062  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:15 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter8 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Counter8_ltrx API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Counter8_ltrx_CONTROL_REG_START_BIT:       equ 0x01    ; Control register start bit
    22  00E1                    Counter8_ltrx_INT_REG:                     equ 0x0e1
    23  0010                    Counter8_ltrx_INT_MASK:                    equ 0x10
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Counter8_ltrx user defined values
    28                          ;--------------------------------------------------
    29                          
    30  0027                    Counter8_ltrx_PERIOD:                      equ 0x27
    31  0013                    Counter8_ltrx_COMPARE_VALUE:               equ 0x13
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Counter8_ltrx
    36                          ;--------------------------------------------------
    37                          
    38  0030                    Counter8_ltrx_COUNTER_REG:             equ 0x30   ; DR0 Counter register
    39  0031                    Counter8_ltrx_PERIOD_REG:              equ 0x31   ; DR1 Period register
    40  0032                    Counter8_ltrx_COMPARE_REG:             equ 0x32   ; DR2 CompareValue register
    41  0033                    Counter8_ltrx_CONTROL_REG:             equ 0x33   ; Control register
    42  0030                    Counter8_ltrx_FUNC_REG:                equ 0x30   ; Function register
    43  0031                    Counter8_ltrx_INPUT_REG:               equ 0x31   ; Input register
    44  0032                    Counter8_ltrx_OUTPUT_REG:              equ 0x32   ; Output register
    45                          
    46                          
    47                          ;--------------------------------------------------
    48                          ; Counter8_ltrx Macro 'Functions'
    49                          ;--------------------------------------------------
    50                          
    51                             macro Counter8_ltrx_Start_M
    52                             or    reg[Counter8_ltrx_CONTROL_REG],  Counter8_ltrx_CONTROL_REG_START_BIT
    53  7BE0                       endm
    54                          
    55                             macro Counter8_ltrx_Stop_M
    56                             and   reg[Counter8_ltrx_CONTROL_REG], ~Counter8_ltrx_CONTROL_REG_START_BIT
    57  7BE0                       endm
    58                          
    59                             macro Counter8_ltrx_EnableInt_M
    60                             M8C_EnableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    61  7BE0                       endm
    62                          
    63                             macro Counter8_ltrx_DisableInt_M
    64                             M8C_DisableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    65  7BE0                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter8 User Module software implementation file
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "Counter8_ltrx.inc"
    26                          
    27                          ;-----------------------------------------------
    28                          ;  Global Symbols
    29                          ;-----------------------------------------------
    30                          export  Counter8_ltrx_EnableInt
    31                          export _Counter8_ltrx_EnableInt
    32                          export  Counter8_ltrx_DisableInt
    33                          export _Counter8_ltrx_DisableInt
    34                          export  Counter8_ltrx_Start
    35                          export _Counter8_ltrx_Start
    36                          export  Counter8_ltrx_Stop
    37                          export _Counter8_ltrx_Stop
    38                          export  Counter8_ltrx_WritePeriod
    39                          export _Counter8_ltrx_WritePeriod
    40                          export  Counter8_ltrx_WriteCompareValue
    41                          export _Counter8_ltrx_WriteCompareValue
    42                          export  Counter8_ltrx_bReadCompareValue
    43                          export _Counter8_ltrx_bReadCompareValue
    44                          export  Counter8_ltrx_bReadCounter
    45                          export _Counter8_ltrx_bReadCounter
    46                          
    47                          ; The following functions are deprecated and subject to omission in future releases
    48                          ;
    49                          export  bCounter8_ltrx_ReadCompareValue  ; deprecated
    50                          export _bCounter8_ltrx_ReadCompareValue  ; deprecated
    51                          export  bCounter8_ltrx_ReadCounter       ; deprecated
    52                          export _bCounter8_ltrx_ReadCounter       ; deprecated
    53                          
    54                          
    55                          AREA sensor_gateway_RAM (RAM,REL)
    56                          
    57                          ;-----------------------------------------------
    58                          ;  Constant Definitions
    59                          ;-----------------------------------------------
    60                          
    61  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    62                          
    63                          
    64                          ;-----------------------------------------------
    65                          ; Variable Allocation
    66                          ;-----------------------------------------------
    67                          
    68                          
    69                          AREA UserModules (ROM, REL)
    70                          
    71                          .SECTION
    72                          ;-----------------------------------------------------------------------------
    73                          ;  FUNCTION NAME: Counter8_ltrx_EnableInt
    74                          ;
    75                          ;  DESCRIPTION:
    76                          ;     Enables this counter's interrupt by setting the interrupt enable mask bit
    77                          ;     associated with this User Module. This function has no effect until and
    78                          ;     unless the global interrupts are enabled (for example by using the
    79                          ;     macro M8C_EnableGInt).
    80                          ;-----------------------------------------------------------------------------
    81                          ;
    82                          ;  ARGUMENTS:    None.
    83                          ;  RETURNS:      Nothing.
    84                          ;  SIDE EFFECTS: 
    85                          ;    The A and X registers may be modified by this or future implementations
    86                          ;    of this function.  The same is true for all RAM page pointer registers in
    87                          ;    the Large Memory Model.  When necessary, it is the calling function's
    88                          ;    responsibility to perserve their values across calls to fastcall16 
    89                          ;    functions.
    90                          ;
    91  3AE6                     Counter8_ltrx_EnableInt:
    92  3AE6                    _Counter8_ltrx_EnableInt:
    93                             RAM_PROLOGUE RAM_USE_CLASS_1
    94  3AE6  43 E1 10             Counter8_ltrx_EnableInt_M
    95                             RAM_EPILOGUE RAM_USE_CLASS_1
    96  3AE9  7F                   ret
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: Counter8_ltrx_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this counter's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS: 
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  3AEA                     Counter8_ltrx_DisableInt:
   119  3AEA                    _Counter8_ltrx_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  3AEA  41 E1 EF             Counter8_ltrx_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  3AED  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: Counter8_ltrx_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     counter will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS: 
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  3AEE                     Counter8_ltrx_Start:
   148  3AEE                    _Counter8_ltrx_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  3AEE  43 33 01             Counter8_ltrx_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  3AF1  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: Counter8_ltrx_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables counter operation by clearing the start bit in the Control
   163                          ;     register.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  3AF2                     Counter8_ltrx_Stop:
   176  3AF2                    _Counter8_ltrx_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  3AF2  41 33 FE             Counter8_ltrx_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  3AF5  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: Counter8_ltrx_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 8-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the counter user module is stopped, then this value will also be
   197                          ;    latched into the Count register (DR0).
   198                          ;     
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  3AF6                     Counter8_ltrx_WritePeriod:
   206  3AF6                    _Counter8_ltrx_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  3AF6  60 31                mov   reg[Counter8_ltrx_PERIOD_REG], A
   209                             RAM_EPILOGUE RAM_USE_CLASS_1
   210  3AF8  7F                   ret
   211                          
   212                          
   213                          .ENDSECTION
   214                          
   215                          .SECTION
   216                          ;-----------------------------------------------------------------------------
   217                          ;  FUNCTION NAME: Counter8_ltrx_WriteCompareValue
   218                          ;
   219                          ;  DESCRIPTION:
   220                          ;     Writes compare value into the Compare register (DR2).
   221                          ;-----------------------------------------------------------------------------
   222                          ;
   223                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   224                          ;  RETURNS:      Nothing
   225                          ;  SIDE EFFECTS: 
   226                          ;    The A and X registers may be modified by this or future implementations
   227                          ;    of this function.  The same is true for all RAM page pointer registers in
   228                          ;    the Large Memory Model.  When necessary, it is the calling function's
   229                          ;    responsibility to perserve their values across calls to fastcall16 
   230                          ;    functions.
   231                          ;
   232  3AF9                     Counter8_ltrx_WriteCompareValue:
   233  3AF9                    _Counter8_ltrx_WriteCompareValue:
   234                             RAM_PROLOGUE RAM_USE_CLASS_1
   235  3AF9  60 32                mov   reg[Counter8_ltrx_COMPARE_REG], A
   236                             RAM_EPILOGUE RAM_USE_CLASS_1
   237  3AFB  7F                   ret
   238                          
   239                          
   240                          .ENDSECTION
   241                          
   242                          .SECTION
   243                          ;-----------------------------------------------------------------------------
   244                          ;  FUNCTION NAME: Counter8_ltrx_bReadCompareValue
   245                          ;
   246                          ;  DESCRIPTION:
   247                          ;     Reads the Compare register.
   248                          ;-----------------------------------------------------------------------------
   249                          ;
   250                          ;  ARGUMENTS:    None
   251                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   252                          ;  SIDE EFFECTS: 
   253                          ;    The A and X registers may be modified by this or future implementations
   254                          ;    of this function.  The same is true for all RAM page pointer registers in
   255                          ;    the Large Memory Model.  When necessary, it is the calling function's
   256                          ;    responsibility to perserve their values across calls to fastcall16 
   257                          ;    functions.
   258                          ;
   259  3AFC                     Counter8_ltrx_bReadCompareValue:
   260  3AFC                    _Counter8_ltrx_bReadCompareValue:
   261  3AFC                     bCounter8_ltrx_ReadCompareValue:                ; this name deprecated
   262  3AFC                    _bCounter8_ltrx_ReadCompareValue:                ; this name deprecated
   263                             RAM_PROLOGUE RAM_USE_CLASS_1
   264  3AFC  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]
   265                             RAM_EPILOGUE RAM_USE_CLASS_1
   266  3AFE  7F                   ret
   267                          
   268                          
   269                          .ENDSECTION
   270                          
   271                          .SECTION
   272                          ;-----------------------------------------------------------------------------
   273                          ;  FUNCTION NAME: Counter8_ltrx_bReadCounter
   274                          ;
   275                          ;  DESCRIPTION:
   276                          ;     Returns the value in the Count register (DR0), preserving the value in
   277                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   278                          ;     from the Count to the Compare registers by holding the clock low in
   279                          ;     the PSoC block.
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS: None
   283                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   284                          ;  SIDE EFFECTS:
   285                          ;     1) If running, the user module is stopped momentarily and one or more
   286                          ;        counts may be missed.
   287                          ;     2) The A and X registers may be modified by this or future implementations
   288                          ;        of this function.  The same is true for all RAM page pointer registers in
   289                          ;        the Large Memory Model.  When necessary, it is the calling function's
   290                          ;        responsibility to perserve their values across calls to fastcall16 
   291                          ;        functions.
   292                          ;
   293  3AFF                     Counter8_ltrx_bReadCounter:
   294  3AFF                    _Counter8_ltrx_bReadCounter:
   295  3AFF                     bCounter8_ltrx_ReadCounter:                     ; this name deprecated
   296  3AFF                    _bCounter8_ltrx_ReadCounter:                     ; this name deprecated
   297                          
   298  0000                       bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
   299  0001                       bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
   300  0002                       bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
   301  0003                       wCounter:               EQU   3               ; Frame offset to temp Count   store
   302  0004                       STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
   303                          
   304  3AFF  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   305  3B01  4F                   mov   X, SP                                   ; X <- stack frame pointer
   306  3B02  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]       ; Save the Compare register on the stack
   307  3B04  08                   push  A                                       ;
   308  3B05  5D 33                mov   A, reg[Counter8_ltrx_CONTROL_REG]       ; Save CR0 (running or stopped state)
   309  3B07  08                   push  A                                       ;
   310  3B08  41 33 FE             Counter8_ltrx_Stop_M                          ; Disable (stop) the Counter if running
   311  3B0B  71 10                M8C_SetBank1                                  ;
   312  3B0D  5D 31                mov   A, reg[Counter8_ltrx_INPUT_REG]         ; save the clock input setting
   313  3B0F  08                   push  A                                       ;   on the stack (now 2 bytes) and ...
   314                                                                           ;   hold the clock low:
   315  3B10  62 31 00             mov   reg[Counter8_ltrx_INPUT_REG], INPUT_REG_NULL
   316  3B13  70 EF                M8C_SetBank0
   317                                                                           ; Extract the Count via DR2 register
   318  3B15  5D 30                mov   A, reg[Counter8_ltrx_COUNTER_REG]       ; DR2 <- DR0
   319  3B17  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]       ; Stash the Count on the stack
   320  3B19  08                   push  A                                       ;  -stack frame is now 3 bytes
   321  3B1A  52 00                mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
   322  3B1C  60 32                mov   reg[Counter8_ltrx_COMPARE_REG], A
   323  3B1E  71 10                M8C_SetBank1                                  ; Restore the counter operation:
   324  3B20  52 02                mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
   325  3B22  60 31                mov   reg[Counter8_ltrx_INPUT_REG], A         ;
   326  3B24  70 EF                M8C_SetBank0                                  ;   then re-enable (start) the counter
   327  3B26  52 01                mov   A, [X+bOrigControlReg]                  ;     if it was running when
   328  3B28  60 33                mov   reg[Counter8_ltrx_CONTROL_REG], A       ;     this function was first called
   329  3B2A  18                   pop   A                                       ; Setup the return value
   330  3B2B  38 FD                ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
   331  3B2D  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   332  3B31  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:15 2009
           Counter8_ltrx_PERIOD_REG 0031             _Counter8_ltrx_EnableInt 3AE6                  _Counter8_ltrx_Stop 3AF2  
         _Counter8_ltrx_WritePeriod 3AF6           bCounter8_ltrx_ReadCounter 3AFF          _Counter8_ltrx_bReadCounter 3AFF  
                           MAC0_CL0 00EE                             MAC0_CL1 00EF                             MAC1_CL0 00AE  
                           MAC1_CL1 00AF                 _Counter8_ltrx_Start 3AEE                                MAC_X 00EC  
                              MAC_Y 00ED            _Counter8_ltrx_DisableInt 3AEA      Counter8_ltrx_bReadCompareValue 3AFC  
                  bOrigClockSetting 0002                               MAC0_X 00EC                               MAC0_Y 00ED  
                             MAC1_X 00AC                               MAC1_Y 00AD                               HITECH 0002  
                    FLAG_PGMODE_01b 0040                      FLAG_PGMODE_10b 0080      bCounter8_ltrx_ReadCompareValue 3AFC  
              Counter8_ltrx_INT_REG 00E1                  Counter8_ltrx_Start 3AEE     _Counter8_ltrx_WriteCompareValue 3AF9  
Counter8_ltrx_CONTROL_REG_START_BIT 0001          _bCounter8_ltrx_ReadCounter 3AFF                       INPUT_REG_NULL 0000  
          Counter8_ltrx_COMPARE_REG 0032            SYSTEM_LARGE_MEMORY_MODEL 0001              Counter8_ltrx_INPUT_REG 0031  
                            MAC_CL0 00EE                              MAC_CL1 00EF            Counter8_ltrx_CONTROL_REG 0033  
                  bOrigCompareValue 0000                     FLAG_PGMODE_MASK 00C0                      RAM_USE_CLASS_1 0001  
                    RAM_USE_CLASS_2 0002                      RAM_USE_CLASS_3 0004                      RAM_USE_CLASS_4 0008  
          Counter8_ltrx_COUNTER_REG 0030             Counter8_ltrx_DisableInt 3AEA                   Counter8_ltrx_Stop 3AF2  
                    bOrigControlReg 0001      Counter8_ltrx_WriteCompareValue 3AF9               Counter8_ltrx_INT_MASK 0010  
                   STACK_FRAME_SIZE 0004            Counter8_ltrx_WritePeriod 3AF6              Counter8_ltrx_EnableInt 3AE6  
   _Counter8_ltrx_bReadCompareValue 3AFC           Counter8_ltrx_bReadCounter 3AFF                        FLAG_XIO_MASK 0010  
         SYSTEM_IDXPG_TRACKS_IDX_PP 0001           SYSTEM_IDXPG_TRACKS_STK_PP 0000     _bCounter8_ltrx_ReadCompareValue 3AFC  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:16 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter8 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Counter8_ltrx API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Counter8_ltrx_CONTROL_REG_START_BIT:       equ 0x01    ; Control register start bit
    22  00E1                    Counter8_ltrx_INT_REG:                     equ 0x0e1
    23  0010                    Counter8_ltrx_INT_MASK:                    equ 0x10
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Counter8_ltrx user defined values
    28                          ;--------------------------------------------------
    29                          
    30  0027                    Counter8_ltrx_PERIOD:                      equ 0x27
    31  0013                    Counter8_ltrx_COMPARE_VALUE:               equ 0x13
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Counter8_ltrx
    36                          ;--------------------------------------------------
    37                          
    38  0030                    Counter8_ltrx_COUNTER_REG:             equ 0x30   ; DR0 Counter register
    39  0031                    Counter8_ltrx_PERIOD_REG:              equ 0x31   ; DR1 Period register
    40  0032                    Counter8_ltrx_COMPARE_REG:             equ 0x32   ; DR2 CompareValue register
    41  0033                    Counter8_ltrx_CONTROL_REG:             equ 0x33   ; Control register
    42  0030                    Counter8_ltrx_FUNC_REG:                equ 0x30   ; Function register
    43  0031                    Counter8_ltrx_INPUT_REG:               equ 0x31   ; Input register
    44  0032                    Counter8_ltrx_OUTPUT_REG:              equ 0x32   ; Output register
    45                          
    46                          
    47                          ;--------------------------------------------------
    48                          ; Counter8_ltrx Macro 'Functions'
    49                          ;--------------------------------------------------
    50                          
    51                             macro Counter8_ltrx_Start_M
    52                             or    reg[Counter8_ltrx_CONTROL_REG],  Counter8_ltrx_CONTROL_REG_START_BIT
    53  7BE0                       endm
    54                          
    55                             macro Counter8_ltrx_Stop_M
    56                             and   reg[Counter8_ltrx_CONTROL_REG], ~Counter8_ltrx_CONTROL_REG_START_BIT
    57  7BE0                       endm
    58                          
    59                             macro Counter8_ltrx_EnableInt_M
    60                             M8C_EnableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    61  7BE0                       endm
    62                          
    63                             macro Counter8_ltrx_DisableInt_M
    64                             M8C_DisableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    65  7BE0                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrxINT.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Counter8_ltrx.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Counter8_ltrx_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Counter8_ltrx_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  3B32                    _Counter8_ltrx_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                          
    71                             ;---------------------------------------------------
    72                             ; Insert your custom code above this banner
    73                             ;---------------------------------------------------
    74                             ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76  3B32  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:16 2009
                 _Counter8_ltrx_ISR 3B32                             MAC0_CL0 00EE                             MAC0_CL1 00EF  
                           MAC1_CL0 00AE                             MAC1_CL1 00AF                                MAC_X 00EC  
                              MAC_Y 00ED                               MAC0_X 00EC                               MAC0_Y 00ED  
                             MAC1_X 00AC                               MAC1_Y 00AD                               HITECH 0002  
                            MAC_CL0 00EE                              MAC_CL1 00EF  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:16 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LED1.inc
     4                          ;;  Version: 1.2, Updated on 2008/6/23 at 12:24:56
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the LED user module interface
     8                          ;;                for the 22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2006. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16  0003                    LED1_Port:      equ   0x3
    17                          
    18                          
    19  000C                    LED1_PortDR:    equ   PRT3DR
    20                          
    21  0080                    LED1_PinMask:   equ  0x80
    22                          
    23  0000                    LED1_Drive:     equ   0
    24                          
    25  0000                    LED1_ON:        equ   0
    26  0001                    LED1_OFF:       equ   1
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LED1.asm
     4                          ;;  Version: 1.2, Updated on 2008/6/23 at 12:24:56
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: LED user module for 22/24/27/29xxx PSoC family of devices.
     8                          ;;
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2005. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "LED1.inc"
    24                          include "memory.inc"
    25                          
    26                          export _LED1_Start
    27                          export  LED1_Start
    28                          
    29                          export _LED1_Stop
    30                          export  LED1_Stop
    31                          
    32                          export _LED1_On
    33                          export  LED1_On
    34                          
    35                          export _LED1_Off
    36                          export  LED1_Off
    37                          
    38                          export _LED1_Switch
    39                          export  LED1_Switch
    40                          
    41                          export _LED1_Invert
    42                          export  LED1_Invert
    43                          
    44                          export _LED1_GetState
    45                          export  LED1_GetState
    46                          
    47                          
    48                          AREA UserModules (ROM, REL)
    49                          
    50                          
    51                          .SECTION
    52                          ;-----------------------------------------------------------------------------
    53                          ;  FUNCTION NAME: LED1_Start(void)
    54                          ;  FUNCTION NAME: LED1_Stop(void)
    55                          ;
    56                          ;  FUNCTION NAME: LED1_Switch(void)
    57                          ;
    58                          ;  DESCRIPTION: ( Switch )
    59                          ;     Turn LED on or off     
    60                          ;
    61                          ;  DESCRIPTION: ( Start, Stop )
    62                          ;     Turn LED off                       
    63                          ;
    64                          ;-----------------------------------------------------------------------------
    65                          ;
    66                          ;  ARGUMENTS:  ( Switch )
    67                          ;     A => If 0, turn off LED, if > 0 turn on LED
    68                          ;
    69                          ;  ARGUMENTS:  ( Start, Stop )
    70                          ;      None
    71                          ;
    72                          ;  RETURNS:  none
    73                          ;
    74                          ;  SIDE EFFECTS:
    75                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
    76                          ;
    77                          ;-----------------------------------------------------------------------------
    78  3B33                    _LED1_On:
    79  3B33                     LED1_On:
    80  3B33  50 01                mov  A,0x01
    81  3B35  8003                 jmp  LED1_Switch 
    82                          
    83  3B37                    _LED1_Start:
    84  3B37                     LED1_Start:
    85  3B37                    _LED1_Stop:
    86  3B37                     LED1_Stop:
    87  3B37                    _LED1_Off:
    88  3B37                     LED1_Off:
    89  3B37  50 00                mov  A,0x00
    90                          
    91  3B39                    _LED1_Switch:
    92  3B39                     LED1_Switch:
    93                             RAM_PROLOGUE RAM_USE_CLASS_4
    94  3B39  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
    95  3B3B  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
    96                          
    97  3B3E  29 00                or   A,0x00                                   ; Check mode
    98  3B40  A006                 jz   .Turn_Off_LED
    99                          
   100  3B42                    .Turn_On_LED:
   101                          IF(0)                                            ; Active High Digit Drive
   102                             or   [Port_3_Data_SHADE],LED1_PinMask
   103                          ELSE                                             ; Active Low Digit Drive
   104  3B42  26 87  7F            and  [Port_3_Data_SHADE],~LED1_PinMask
   105                          ENDIF
   106  3B45  8004                 jmp  .Switch_LED
   107                          
   108  3B47                    .Turn_Off_LED:
   109                          IF(0)                      ; Active High Digit Drive
   110                             and  [Port_3_Data_SHADE],~LED1_PinMask
   111                          ELSE                              ; Active Low Digit Drive
   112  3B47  2E 87  80            or   [Port_3_Data_SHADE],LED1_PinMask
   113                          ENDIF
   114                          
   115  3B4A                    .Switch_LED:
   116  3B4A  51 87                mov  A,[Port_3_Data_SHADE]
   117  3B4C  60 0C                mov  reg[LED1_PortDR],A
   118                          
   119  3B4E  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   120                             RAM_EPILOGUE RAM_USE_CLASS_4
   121  3B52  7F                   ret
   122                          .ENDSECTION
   123                          
   124                          
   125                          
   126                          .SECTION
   127                          ;-----------------------------------------------------------------------------
   128                          ;  FUNCTION NAME: LED1_Invert(void)
   129                          ;
   130                          ;  DESCRIPTION:
   131                          ;     Invert state of LED                               
   132                          ;
   133                          ;-----------------------------------------------------------------------------
   134                          ;
   135                          ;  ARGUMENTS: none
   136                          ;
   137                          ;  RETURNS:  none
   138                          ;
   139                          ;  SIDE EFFECTS:
   140                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
   141                          ;
   142                          ;-----------------------------------------------------------------------------
   143  3B53                    _LED1_Invert:
   144  3B53                     LED1_Invert:
   145                             RAM_PROLOGUE RAM_USE_CLASS_4
   146  3B53  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   147  3B55  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
   148                          
   149  3B58  36 87  80            xor  [Port_3_Data_SHADE],LED1_PinMask
   150  3B5B  51 87                mov  A,[Port_3_Data_SHADE]
   151  3B5D  60 0C                mov  reg[LED1_PortDR],A
   152                          
   153  3B5F  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   154                             RAM_EPILOGUE RAM_USE_CLASS_4
   155  3B63  7F                   ret
   156                          .ENDSECTION
   157                          
   158                          .SECTION
   159                          ;-----------------------------------------------------------------------------
   160                          ;  FUNCTION NAME: LED1_GetState(void)
   161                          ;
   162                          ;  DESCRIPTION:
   163                          ;     Get state of LED
   164                          ;
   165                          ;-----------------------------------------------------------------------------
   166                          ;
   167                          ;  ARGUMENTS: none
   168                          ;
   169                          ;  RETURNS:  
   170                          ;    State of LED   1 = ON,  0 = OFF
   171                          ;
   172                          ;  SIDE EFFECTS:
   173                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
   174                          ;
   175                          ;-----------------------------------------------------------------------------
   176  3B64                    _LED1_GetState:
   177  3B64                     LED1_GetState:
   178                             RAM_PROLOGUE RAM_USE_CLASS_4
   179  3B64  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   180  3B66  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
   181                          
   182  3B69  51 87                mov   A,[Port_3_Data_SHADE]         ; Get shade value
   183                          IF(0)                                  ; Active High Digit Drive
   184                             // Nothing for now
   185                          ELSE                                   ; Active Low Digit Drive
   186  3B6B  73                   cpl   A                             ; Invert bit if Active low
   187                          ENDIF
   188  3B6C  21 80                and   A,LED1_PinMask                ; Mask off the trash
   189  3B6E  A003                 jz    .End_LED_GS                   ; If zero, we're done
   190  3B70  50 01                mov   A,0x01                        ; Return a 1 no mater what the mask is.
   191                          
   192  3B72                    .End_LED_GS:
   193  3B72  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   194                             RAM_EPILOGUE RAM_USE_CLASS_4
   195  3B76  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:16 2009
             LED1_GetState 3B64                    MAC0_CL0 00EE                    MAC0_CL1 00EF                    MAC1_CL0 00AE  
                  MAC1_CL1 00AF                       MAC_X 00EC                       MAC_Y 00ED                    LED1_Off 3B37  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
                    HITECH 0002                 LED1_Invert 3B53             FLAG_PGMODE_01b 0040             FLAG_PGMODE_10b 0080  
                    CUR_PP 00D0                 LED1_PortDR 000C                      PRT3DR 000C                 LED1_Switch 3B39  
                 LED1_Stop 3B37                    _LED1_On 3B33                  _LED1_Stop 3B37           Port_3_Data_SHADE 0087  
              _LED1_Invert 3B53                _LED1_Switch 3B39   SYSTEM_LARGE_MEMORY_MODEL 0001                     LED1_On 3B33  
                   MAC_CL0 00EE                     MAC_CL1 00EF                LED1_PinMask 0080            FLAG_PGMODE_MASK 00C0  
           RAM_USE_CLASS_1 0001             RAM_USE_CLASS_2 0002             RAM_USE_CLASS_3 0004             RAM_USE_CLASS_4 0008  
                LED1_Start 3B37                   _LED1_Off 3B37                 _LED1_Start 3B37              _LED1_GetState 3B64  
SYSTEM_IDXPG_TRACKS_IDX_PP 0001  SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:16 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202+ 0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRX.inc
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module for the
     8                          ;;                22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          ;--------------------------------------------------
    15                          ; Constants for LTRX API's
    16                          ;--------------------------------------------------
    17                          
    18                          ;mask value for global int reg bit for TX instance
    19  0040                    LTRX_TX_INT_MASK:                            equ 0x40
    20  00E1                    LTRX_TX_INT_REG:                             equ 0x0e1  ;TX interrupt address
    21  0080                    LTRX_RX_INT_MASK:                            equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    22  00E1                    LTRX_RX_INT_REG:                             equ 0x0e1  ;RX interrupt address
    23                          
    24  0001                    LTRX_RXBUF_ENABLE:                           equ 1
    25                          
    26                          ; Interrupt control masks
    27  0001                    LTRX_ENABLE_RX_INT:                          equ 0x01
    28  0000                    LTRX_DISABLE_RX_INT:                         equ 0x00
    29  0002                    LTRX_ENABLE_TX_INT:                          equ 0x02
    30  0000                    LTRX_DISABLE_TX_INT:                         equ 0x00
    31                          
    32  0000                    LTRX_INT_MODE_TX_REG_EMPTY:                  equ 0x00
    33  0001                    LTRX_INT_MODE_TX_COMPLETE:                   equ 0x01
    34                          
    35  0020                    LTRX_RX_IGNORE_BELOW:                        equ 0x20
    36  0010                    LTRX_RX_BUFFER_SIZE:                         equ 0x10
    37  000D                    LTRX_CMD_TERM:                               equ 0xd
    38  0020                    LTRX_DELIMITER:                              equ 0x20
    39  0000                    LTRX_BACKSPACE_ENABLE:                       equ 0x0
    40                          
    41                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                          ;       WARNING WARNING WARNING
    43                          ; The following equates are for backwards
    44                          ; compatibility only and should not be used
    45                          ; for new designs.
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;------------------------------------
    49                          ;  Parity masks
    50                          ;------------------------------------
    51  0000                    UART_PARITY_NONE:       equ   00h
    52  0002                    UART_PARITY_EVEN:       equ   02h
    53  0006                    UART_PARITY_ODD:        equ   06h
    54                          
    55                          ;------------------------------------
    56                          ;  TX Status Register masks
    57                          ;------------------------------------
    58  0020                    UART_TX_COMPLETE:       equ   20h
    59  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    60                          
    61                          ;------------------------------------
    62                          ;  RX Status Register masks
    63                          ;------------------------------------
    64  0010                    UART_RX_ACTIVE:         equ   10h
    65  0008                    UART_RX_COMPLETE:       equ   08h
    66  0080                    UART_RX_PARITY_ERROR:   equ   80h
    67  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    68  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    69  00E0                    UART_RX_NO_ERROR:       equ   E0h
    70                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    71                          ;             END WARNING
    72                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    73                          
    74                          
    75                          
    76                          ;------------------------------------
    77                          ;  Parity masks
    78                          ;------------------------------------
    79  0000                    LTRX_PARITY_NONE:                       equ   00h
    80  0002                    LTRX_PARITY_EVEN:                       equ   02h
    81  0006                    LTRX_PARITY_ODD:                        equ   06h
    82                          
    83                          ;------------------------------------
    84                          ;  TX Status Register masks
    85                          ;------------------------------------
    86  0020                    LTRX_TX_COMPLETE:                       equ   20h
    87  0010                    LTRX_TX_BUFFER_EMPTY:                   equ   10h
    88                          
    89                          ;------------------------------------
    90                          ;  RX Status Register masks
    91                          ;------------------------------------
    92  0010                    LTRX_RX_ACTIVE:                         equ   10h
    93  0008                    LTRX_RX_COMPLETE:                       equ   08h
    94  0008                    LTRX_RX_REG_FULL:                       equ   08h
    95  0080                    LTRX_RX_PARITY_ERROR:                   equ   80h
    96  0040                    LTRX_RX_OVERRUN_ERROR:                  equ   40h
    97  0020                    LTRX_RX_FRAMING_ERROR:                  equ   20h
    98  00E0                    LTRX_RX_ERROR:                          equ   E0h
    99  0001                    LTRX_RX_ENABLE:                         equ   01h
   100                          
   101  00F0                    LTRX_RX_BUF_ERROR:                      equ   F0h  ; Mask for any Rx that may occur.
   102  0010                    LTRX_RX_BUF_OVERRUN:                    equ   10h  ; This indicates the software buffer has
   103                                                                                  ; been over run.
   104  0001                    LTRX_RX_BUF_CMDTERM:                    equ   01h  ; Command terminator has been received.
   105                          
   106  0001                    LTRX_RX_NO_DATA:                        equ   01h
   107  00E0                    LTRX_RX_NO_ERROR:                       equ   E0h
   108                          
   109                          
   110                          ;--------------------------------------------------
   111                          ; Registers Address Constants for LTRX
   112                          ;--------------------------------------------------
   113                          ;---------------------------------
   114                          ;  Registers used by TX
   115                          ;---------------------------------
   116  003B                    LTRX_TX_CONTROL_REG:    equ 3bh            ; Control register
   117  0038                    LTRX_TX_SHIFT_REG:  equ 38h               ; TX Shift Register register
   118  0039                    LTRX_TX_BUFFER_REG: equ 39h               ; TX Buffer Register
   119  0038                    LTRX_TX_FUNC_REG:   equ 38h             ; Function register
   120  0039                    LTRX_TX_INPUT_REG:  equ 39h             ; Input register
   121  003A                    LTRX_TX_OUTPUT_REG: equ 3ah             ; Output register
   122                          
   123                          ;---------------------------------
   124                          ;  Registers used by RX
   125                          ;---------------------------------
   126  003F                    LTRX_RX_CONTROL_REG:    equ 3fh            ; Control register
   127  003C                    LTRX_RX_SHIFT_REG:  equ 3ch               ; RX Shift Register register
   128  003E                    LTRX_RX_BUFFER_REG: equ 3eh               ; RX Buffer Register
   129  003C                    LTRX_RX_FUNC_REG:   equ 3ch             ; Function register
   130  003D                    LTRX_RX_INPUT_REG:  equ 3dh             ; Input register
   131  003E                    LTRX_RX_OUTPUT_REG: equ 3eh             ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   LTRX.asm
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "LTRX.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  LTRX_SetTxIntMode
    41                          export _LTRX_SetTxIntMode
    42                          export  LTRX_EnableInt
    43                          export _LTRX_EnableInt
    44                          export  LTRX_DisableInt
    45                          export _LTRX_DisableInt
    46                          
    47                          export  LTRX_Start
    48                          export _LTRX_Start
    49                          export  LTRX_Stop
    50                          export _LTRX_Stop
    51                          export  LTRX_SendData
    52                          export _LTRX_SendData
    53                          export  LTRX_bReadTxStatus
    54                          export _LTRX_bReadTxStatus
    55                          export  LTRX_bReadRxData
    56                          export _LTRX_bReadRxData
    57                          export  LTRX_bReadRxStatus
    58                          export _LTRX_bReadRxStatus
    59                          
    60                          export  LTRX_IntCntl
    61                          export _LTRX_IntCntl
    62                          
    63                          export  LTRX_TxIntMode
    64                          export _LTRX_TxIntMode
    65                          
    66                          export  LTRX_PutSHexByte
    67                          export _LTRX_PutSHexByte
    68                          export  LTRX_PutSHexInt
    69                          export _LTRX_PutSHexInt
    70                          
    71                          export  LTRX_CPutString
    72                          export _LTRX_CPutString
    73                          export  LTRX_PutString
    74                          export _LTRX_PutString
    75                          export  LTRX_PutChar
    76                          export _LTRX_PutChar
    77                          export  LTRX_Write
    78                          export _LTRX_Write
    79                          export  LTRX_CWrite
    80                          export _LTRX_CWrite
    81                          
    82                          export  LTRX_cGetChar
    83                          export _LTRX_cGetChar
    84                          export  LTRX_cReadChar
    85                          export _LTRX_cReadChar
    86                          export  LTRX_iReadChar
    87                          export _LTRX_iReadChar
    88                          export  LTRX_PutCRLF
    89                          export _LTRX_PutCRLF
    90                          
    91                          IF (LTRX_RXBUF_ENABLE)
    92                          export  LTRX_CmdReset
    93                          export _LTRX_CmdReset
    94                          export  LTRX_bCmdCheck
    95                          export _LTRX_bCmdCheck
    96                          export  LTRX_bCmdLength
    97                          export _LTRX_bCmdLength
    98                          export  LTRX_bErrCheck
    99                          export _LTRX_bErrCheck
   100                          
   101                          export  LTRX_szGetParam
   102                          export _LTRX_szGetParam
   103                          export  LTRX_szGetRestOfParams
   104                          export _LTRX_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bLTRX_ReadTxStatus
   114                          export _bLTRX_ReadTxStatus
   115                          export  bLTRX_ReadRxData
   116                          export _bLTRX_ReadRxData
   117                          export  bLTRX_ReadRxStatus
   118                          export _bLTRX_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (LTRX_RXBUF_ENABLE)
   128                              
   129                          area LTRX_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: LTRX_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  3B77                     LTRX_EnableInt:
   177  3B77                    _LTRX_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  3B77  43 E1 40             M8C_EnableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   180  3B7A  43 E1 80             M8C_EnableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  3B7D  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: LTRX_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  3B7E                     LTRX_DisableInt:
   209  3B7E                    _LTRX_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  3B7E  41 E1 BF             M8C_DisableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   212  3B81  41 E1 7F             M8C_DisableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  3B84  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: LTRX_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  3B85                     LTRX_SetTxIntMode:
   245  3B85                    _LTRX_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  3B85  71 10                M8C_SetBank1
   248  3B87  21 01                and   A, LTRX_INT_MODE_TX_COMPLETE
   249  3B89  A007                 jz    .SetModeRegEmpty
   250  3B8B  43 38 10             or    REG[LTRX_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  3B8E  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  3B90  7F                   ret
   254                          
   255  3B91                    .SetModeRegEmpty:
   256  3B91  41 38 EF             and   REG[LTRX_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  3B94  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  3B96  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: LTRX_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  3B97                     LTRX_Start:
   286  3B97                    _LTRX_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  3B97  29 01                or    A, bfCONTROL_REG_START_BIT
   291  3B99  60 3B                mov   REG[LTRX_TX_CONTROL_REG], A
   292  3B9B  60 3F                mov   REG[LTRX_RX_CONTROL_REG], A
   293                          IF ( LTRX_RXBUF_ENABLE )
   294  3B9D  9128                 call  _LTRX_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  3B9F  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: LTRX_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  3BA0                     LTRX_Stop:
   323  3BA0                    _LTRX_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  3BA0  41 3B FE             and   REG[LTRX_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  3BA3  41 3F FE             and   REG[LTRX_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  3BA6  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: LTRX_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  3BA7                     LTRX_SendData:
   354  3BA7                    _LTRX_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  3BA7  60 39                mov REG[LTRX_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  3BA9  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: LTRX_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  3BAA                     LTRX_bReadTxStatus:
   385  3BAA                    _LTRX_bReadTxStatus:
   386  3BAA                     bLTRX_ReadTxStatus:                             ; For backwards compatibility only
   387  3BAA                    _bLTRX_ReadTxStatus:                             ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  3BAA  5D 3B                mov A,  REG[LTRX_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  3BAC  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: LTRX_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  3BAD                     LTRX_bReadRxData:
   418  3BAD                    _LTRX_bReadRxData:
   419  3BAD                     bLTRX_ReadRxData:                               ; For backwards compatibility only
   420  3BAD                    _bLTRX_ReadRxData:                               ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  3BAD  5D 3E                mov A, REG[LTRX_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  3BAF  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: LTRX_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  3BB0                     LTRX_bReadRxStatus:
   452  3BB0                    _LTRX_bReadRxStatus:
   453  3BB0                     bLTRX_ReadRxStatus:                             ; For backwards compatibility only
   454  3BB0                    _bLTRX_ReadRxStatus:                             ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  3BB0  5D 3F                mov A,  REG[LTRX_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  3BB2  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: LTRX_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  3BB3                     LTRX_TxIntMode:
   486  3BB3                    _LTRX_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  3BB3  21 01                and  A,LTRX_INT_MODE_TX_COMPLETE
   490  3BB5  71 10                M8C_SetBank1
   491  3BB7  39 01                cmp  A,LTRX_INT_MODE_TX_COMPLETE
   492  3BB9  A006                 jz   .SetTxCmpMode
   493                          
   494  3BBB  41 38 EF             and  reg[LTRX_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
   495  3BBE  8004                 jmp  .TxIntMode_End
   496                          
   497  3BC0                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  3BC0  43 38 10             or   reg[LTRX_TX_FUNC_REG],0x10
   499                          
   500  3BC3                    .TxIntMode_End:
   501  3BC3  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  3BC5  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: LTRX_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  3BC6                     LTRX_IntCntl:
   533  3BC6                    _LTRX_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  3BC6  08                   push A
   537  3BC7  21 01                and  A,LTRX_ENABLE_RX_INT
   538  3BC9  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  3BCB  43 E1 80             M8C_EnableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   541  3BCE  8004                 jmp  .CheckTxInt
   542  3BD0                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  3BD0  41 E1 7F             M8C_DisableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   545                          
   546  3BD3                    .CheckTxInt:
   547  3BD3  18                   pop  A
   548  3BD4  21 02                and  A,LTRX_ENABLE_TX_INT
   549  3BD6  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  3BD8  43 E1 40             M8C_EnableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   552  3BDB  8004                 jmp  .End_IntCntl
   553  3BDD                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  3BDD  41 E1 BF             M8C_DisableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   556                          
   557  3BE0                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  3BE0  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: LTRX_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  3BE1                    LTRX_HEX_STR:
   594  3BE1  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  3BF1                     LTRX_PutSHexByte:
   599  3BF1                    _LTRX_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  3BF1  08                   push  A                             ; Save lower nibble
   602  3BF2  67                   asr   A                             ; Shift high nibble to right
   603  3BF3  67                   asr   A
   604  3BF4  67                   asr   A
   605  3BF5  67                   asr   A
   606  3BF6  21 0F                and   A,0Fh                         ; Mask off nibble
   607  3BF8  FFE7                 index LTRX_HEX_STR                  ; Get Hex value
   608  3BFA  900F                 call  LTRX_PutChar                  ; Write data to screen
   609  3BFC  18                   pop   A                             ; Restore value
   610  3BFD  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  3BFF  FFE0                 index LTRX_HEX_STR                  ; Get Hex value
   612  3C01  9008                 call  LTRX_PutChar                  ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  3C03  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: LTRX_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  3C04                     LTRX_PutSHexInt:
   643  3C04                    _LTRX_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  3C04  4B                   swap  A,X
   646  3C05  9FEA                 call  LTRX_PutSHexByte              ; Print MSB
   647  3C07  5B                   mov   A,X                           ; Move LSB into position
   648  3C08  9FE7                 call  LTRX_PutSHexByte              ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  3C0A  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: LTRX_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[LTRX_TX_CONTROL_REG], LTRX_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[LTRX_TX_BUFFER_REG], @Source          ; Write data to Tx Port
   681  3C0B                       endm
   682                          
   683  3C0B                     LTRX_PutChar:
   684  3C0B                    _LTRX_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686  3C0B                       InLinePutChar A
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  3C12  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: LTRX_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  3C13                     LTRX_cGetChar:
   718  3C13                    _LTRX_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  3C13  49 3F 08             tst REG[LTRX_RX_CONTROL_REG],LTRX_RX_REG_FULL    ; Check if a character is ready
   721  3C16  AFFC                 jz  LTRX_cGetChar                             ; If not loop
   722  3C18  5D 3E                mov A, REG[LTRX_RX_BUFFER_REG]                ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  3C1A  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: LTRX_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  3C1B                     LTRX_cReadChar:
   753  3C1B                    _LTRX_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  3C1B  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Get Status of RX
   756  3C1D  08                   push A
   757  3C1E  21 08                and  A,LTRX_RX_COMPLETE                                 ; Check if a character is ready
   758  3C20  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  3C22  18                   pop  A
   760  3C23  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  3C25                    .RX_DATA_RDY:
   763  3C25  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]          
   764  3C27  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  3C28  18                   pop  A                                                  ; Check for errors
   767  3C29  21 A0                and  A,(LTRX_RX_PARITY_ERROR | LTRX_RX_FRAMING_ERROR)
   768  3C2B  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  3C2D  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  3C2E  7F                   ret
   772                          
   773  3C2F                    .RX_NO_VALID_CHAR:
   774  3C2F  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  3C31                     End_LTRX_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  3C31  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: LTRX_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  3C32                     LTRX_iReadChar:
   814  3C32                    _LTRX_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  3C32  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  3C34  21 E8                and  A,(LTRX_RX_ERROR|LTRX_RX_REG_FULL)
   819  3C36  08                   push A
   820  3C37  21 08                and  A,LTRX_RX_COMPLETE                                 ; Check if a character is ready
   821  3C39  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  3C3B  18                   pop  A
   823  3C3C  29 01                or   A,LTRX_RX_NO_DATA                                  ; Add no data flag
   824  3C3E  4B                   swap A,X
   825  3C3F  8007                 jmp  End_LTRX_iReadChar
   826                          
   827  3C41                    .RX_GET_DATA:
   828  3C41  18                   pop  A
   829  3C42  21 E0                and  A,LTRX_RX_ERROR
   830  3C44  4B                   swap A,X
   831  3C45  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]                         ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  3C47                     End_LTRX_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  3C47  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: LTRX_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  3C48                     LTRX_PutString:
   867  3C48                    _LTRX_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  3C48  60 D3                RAM_SETPAGE_IDX A
   870  3C4A                    .PutStringLoop:
   871  3C4A  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  3C4C  A006                 jz    End_PutString                           ; Check for end of string
   873  3C4E  9FBB                 call  LTRX_PutChar                            ; Send character to Tx port
   874  3C50  75                   inc   X                                       ; Advance pointer to next character
   875  3C51  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  3C53                    End_PutString:
   878  3C53  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
   879  3C57  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: LTRX_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  3C58                     LTRX_Write:
   914  3C58                    _LTRX_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  3C58  62 D3 07             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  3C5B  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  3C5C                    .NextByteLoop:
   920  3C5C  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  3C5E  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  3C60  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  3C62  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  3C64  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  3C66  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  3C68  52 00                mov   A, [X]                                  ; Grab the data
   931  3C6A                       InLinePutChar A                               ; Put data in empty TX buf reg
   932  3C71  4F                   mov   X, SP                                   ; Recover frame pointer
   933  3C72  62 D3 07             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  3C75  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  3C77  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  3C79                    .End_Write:
   938  3C79  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
   939  3C7D  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: LTRX_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  3C7E                     LTRX_CWrite:
   975  3C7E                    _LTRX_CWrite:
   976  3C7E  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  3C80  4F                   mov   X,SP
   978  3C81                    .CW_Loop:
   979  3C81  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  3C84  B006                 jnz   .CW_WRITEIT
   981  3C86  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  3C89  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  3C8B                    .CW_WRITEIT:                                
   985  3C8B  10                   push  X                                  ; Save frame pointer
   986  3C8C  52 FC                mov   A,[X+CSTR_MSB]
   987  3C8E  59 FD                mov   X,[X+CSTR_LSB]
   988  3C90  28                   romx                                     ; Get character from ROM
   989  3C91                       InLinePutChar A                          ; Put data in empty TX buf reg
   990  3C98  20                   pop   X                                  ; Restore frame pointer
   991  3C99  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  3C9C  0F FC 00             adc   [X+CSTR_MSB],0
   993  3C9F  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  3CA2  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  3CA5  8FDB                 jmp   .CW_Loop
   996                          
   997  3CA7                    .End_CWrite:
   998  3CA7  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   999  3CAB  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: LTRX_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  3CAC                     LTRX_CPutString:
  1027  3CAC                    _LTRX_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  3CAC  08                   push  A                                       ; Store ROM pointer
  1030  3CAD  10                   push  X
  1031  3CAE  28                   romx                                          ; Get character from ROM
  1032  3CAF  A00B                 jz    .End_CPutString
  1033  3CB1  9F58                 call  LTRX_PutChar                            ; Print character
  1034  3CB3  20                   pop   X
  1035  3CB4  18                   pop   A
  1036  3CB5  75                   inc   X                                       ; Inc LSB of pointer
  1037  3CB6  DFF5                 jnc   LTRX_CPutString                         ; Check for carry
  1038  3CB8  74                   inc   A                                       ; Inc MSB of pointer
  1039  3CB9  8FF2                 jmp   LTRX_CPutString
  1040                          
  1041                          
  1042  3CBB                    .End_CPutString:
  1043  3CBB  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  3CBD  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: LTRX_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  3CBE                     LTRX_PutCRLF:
  1071  3CBE                    _LTRX_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  3CBE  50 0D                mov  A,0x0D                        ; Send CR
  1074  3CC0  9F49                 call LTRX_PutChar
  1075  3CC2  50 0A                mov  A,0x0A                        ; Send LF
  1076  3CC4  9F45                 call LTRX_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  3CC6  7F                   ret
  1079                          .ENDSECTION
  1080                          
  1081                          
  1082                          IF (LTRX_RXBUF_ENABLE)
  1083                          ;=============================================================================
  1084                          ;=============================================================================
  1085                          ;
  1086                          ;     Command Buffer commands
  1087                          ;
  1088                          ;=============================================================================
  1089                          ;=============================================================================
  1090                          
  1091                          .SECTION
  1092                          ;-----------------------------------------------------------------------------
  1093                          ;  FUNCTION NAME: LTRX_CmdReset
  1094                          ;
  1095                          ;  DESCRIPTION:
  1096                          ;     Reset command string and status flags
  1097                          ;-----------------------------------------------------------------------------
  1098                          ;
  1099                          ;  ARGUMENTS:
  1100                          ;     none.
  1101                          ;
  1102                          ;  RETURNS:
  1103                          ;     none.
  1104                          ;
  1105                          ;  SIDE EFFECTS:
  1106                          ;    The A and X registers may be modified by this or future implementations
  1107                          ;    of this function.  The same is true for all RAM page pointer registers in
  1108                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1109                          ;    responsibility to perserve their values across calls to fastcall16 
  1110                          ;    functions.
  1111                          ;          
  1112                          ;    Currently only the page pointer registers listed below are modified: 
  1113                          ;          CUR_PP
  1114                          ;
  1115                          ;  THEORY of OPERATION or PROCEDURE:
  1116                          ;     Clear the command buffer, command counter, and flag.
  1117                          ;
  1118  3CC7                     LTRX_CmdReset:
  1119  3CC7                    _LTRX_CmdReset:
  1120                             RAM_PROLOGUE RAM_USE_CLASS_4
  1121  3CC7  62 D0 00             RAM_SETPAGE_CUR >LTRX_aRxBuffer
  1122  3CCA  55 88  00            mov [LTRX_aRxBuffer], 0x00
  1123  3CCD  62 D0 00             RAM_SETPAGE_CUR >LTRX_bRxCnt
  1124  3CD0  55 86  00            mov [LTRX_bRxCnt], 0x00
  1125  3CD3  26 85  00            and [LTRX_fStatus], 0x00
  1126  3CD6  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1127  3CD9  55 A4  00            mov [ptrParam],0x00
  1128                             RAM_EPILOGUE RAM_USE_CLASS_4
  1129  3CDC  7F                   ret
  1130                          .ENDSECTION
  1131                          
  1132                          
  1133                          .SECTION
  1134                          ;-----------------------------------------------------------------------------
  1135                          ;  FUNCTION NAME: LTRX_bCmdCheck
  1136                          ;
  1137                          ;  DESCRIPTION:
  1138                          ;     Check to see if valid command in buffer.
  1139                          ;-----------------------------------------------------------------------------
  1140                          ;
  1141                          ;  ARGUMENTS:
  1142                          ;     none.
  1143                          ;
  1144                          ;  RETURNS:
  1145                          ;     BYTE  fStatus - Status of command receive buffer.
  1146                          ;                     Returns non-zero value in A if command is valid.
  1147                          ;
  1148                          ;  SIDE EFFECTS:
  1149                          ;    The A and X registers may be modified by this or future implementations
  1150                          ;    of this function.  The same is true for all RAM page pointer registers in
  1151                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1152                          ;    responsibility to perserve their values across calls to fastcall16 
  1153                          ;    functions.
  1154                          ;          
  1155                          ;    Currently only the page pointer registers listed below are modified: 
  1156                          ;          CUR_PP
  1157                          ;
  1158                          ;  THEORY of OPERATION or PROCEDURE:
  1159                          ;     Read the status and control register.
  1160                          ;
  1161  3CDD                     LTRX_bCmdCheck:
  1162  3CDD                    _LTRX_bCmdCheck:
  1163                             RAM_PROLOGUE RAM_USE_CLASS_4
  1164  3CDD  62 D0 00             RAM_SETPAGE_CUR >LTRX_fStatus
  1165  3CE0  51 85                mov A,  [LTRX_fStatus]
  1166  3CE2  21 01                and A, LTRX_RX_BUF_CMDTERM                    ; Mask off Command status
  1167                             RAM_EPILOGUE RAM_USE_CLASS_4
  1168  3CE4  7F                   ret
  1169                          .ENDSECTION
  1170                              
  1171                          
  1172                          .SECTION
  1173                          ;-----------------------------------------------------------------------------
  1174                          ;  FUNCTION NAME: LTRX_bErrCheck
  1175                          ;
  1176                          ;  DESCRIPTION:
  1177                          ;     Check to see if an error has occured since last CmdReset
  1178                          ;-----------------------------------------------------------------------------
  1179                          ;
  1180                          ;  ARGUMENTS:
  1181                          ;     none.
  1182                          ;
  1183                          ;  RETURNS:
  1184                          ;     BYTE  fStatus - Status of command receive buffer.
  1185                          ;                     Returns non-zero value in A if command is valid.
  1186                          ;           0x80 => Parity Error
  1187                          ;           0x40 => OverRun Error
  1188                          ;           0x20 => Framing Error
  1189                          ;           0x10 => Software Buffer OverRun
  1190                          ;
  1191                          ;  SIDE EFFECTS:
  1192                          ;    The A and X registers may be modified by this or future implementations
  1193                          ;    of this function.  The same is true for all RAM page pointer registers in
  1194                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1195                          ;    responsibility to perserve their values across calls to fastcall16 
  1196                          ;    functions.
  1197                          ;          
  1198                          ;    Currently only the page pointer registers listed below are modified: 
  1199                          ;          CUR_PP
  1200                          ;     Error Status is clear when read.
  1201                          ;
  1202                          ;  THEORY of OPERATION or PROCEDURE:
  1203                          ;     Read RX buffer error status and clear status
  1204                          ;
  1205  3CE5                     LTRX_bErrCheck:
  1206  3CE5                    _LTRX_bErrCheck:
  1207                             RAM_PROLOGUE RAM_USE_CLASS_4
  1208  3CE5  62 D0 00             RAM_SETPAGE_CUR >LTRX_fStatus
  1209  3CE8  51 85                mov A,  [LTRX_fStatus]
  1210  3CEA  21 F0                and A, LTRX_RX_BUF_ERROR                      ; Mask off Error status
  1211  3CEC  26 85  0F            and [LTRX_fStatus], ~LTRX_RX_BUF_ERROR
  1212                             RAM_EPILOGUE RAM_USE_CLASS_4
  1213  3CEF  7F                   ret
  1214                          .ENDSECTION
  1215                          
  1216                          .SECTION
  1217                          ;-----------------------------------------------------------------------------
  1218                          ;  FUNCTION NAME: LTRX_bCmdLength
  1219                          ;
  1220                          ;  DESCRIPTION:
  1221                          ;     Get length of command string
  1222                          ;-----------------------------------------------------------------------------
  1223                          ;
  1224                          ;  ARGUMENTS:
  1225                          ;     none.
  1226                          ;
  1227                          ;  RETURNS:
  1228                          ;     BYTE  bRxCnt    Returns the command length in A.
  1229                          ;
  1230                          ;  SIDE EFFECTS:
  1231                          ;    The A and X registers may be modified by this or future implementations
  1232                          ;    of this function.  The same is true for all RAM page pointer registers in
  1233                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1234                          ;    responsibility to perserve their values across calls to fastcall16 
  1235                          ;    functions.
  1236                          ;          
  1237                          ;    Currently only the page pointer registers listed below are modified: 
  1238                          ;          CUR_PP
  1239                          ;
  1240  3CF0                     LTRX_bCmdLength:
  1241  3CF0                    _LTRX_bCmdLength:
  1242                             RAM_PROLOGUE RAM_USE_CLASS_4
  1243  3CF0  62 D0 00             RAM_SETPAGE_CUR >LTRX_bRxCnt
  1244  3CF3  51 86                mov A,  [LTRX_bRxCnt]
  1245                             RAM_EPILOGUE RAM_USE_CLASS_4
  1246  3CF5  7F                   ret
  1247                          .ENDSECTION
  1248                          
  1249                          
  1250                          .SECTION
  1251                          ;-----------------------------------------------------------------------------
  1252                          ;  FUNCTION NAME: LTRX_szGetParam
  1253                          ;
  1254                          ;  DESCRIPTION:
  1255                          ;      Return next parameter from LTRX Rx buffer
  1256                          ;-----------------------------------------------------------------------------
  1257                          ;
  1258                          ;  ARGUMENTS:  none
  1259                          ;
  1260                          ;  RETURNS:
  1261                          ;     A => MSB of parameter address
  1262                          ;     X => LSB of parameter address
  1263                          ;
  1264                          ;  SIDE EFFECTS:
  1265                          ;    The A and X registers may be modified by this or future implementations
  1266                          ;    of this function.  The same is true for all RAM page pointer registers in
  1267                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1268                          ;    responsibility to perserve their values across calls to fastcall16 
  1269                          ;    functions.
  1270                          ;          
  1271                          ;    Currently only the page pointer registers listed below are modified: 
  1272                          ;          CUR_PP
  1273                          ;          IDX_PP
  1274                          ;
  1275                          ;     The receive string is modified by placing Null characters at the end
  1276                          ;     of each parameter as they are recovered.
  1277                          ;
  1278                          ;  THEORY OF OPERATION:
  1279                          ;     This function is a stateful generator of addresses to the "parameters"
  1280                          ;     of an input "Command". It scans the (optional) input buffer and breaks
  1281                          ;     each lexically distinct element into a null-terminated string by replacing
  1282                          ;     delimiters with nulls, as appropriate. The state of the generator is 
  1283                          ;     maintained by the private variable ptrParam, which is a buffer-relative
  1284                          ;     offset. The generator is initialized by a call to the function
  1285                          ;     LTRX_CmdReset which resets the entire buffer to the 'empty'
  1286                          ;     state. Typically this function, LTRX_szGetParam, is
  1287                          ;     not called until the buffer has been loaded with an entire command
  1288                          ;     (See LTRX_bCmdCheck).
  1289                          ;
  1290                          ;     Note, there is no special distinction between the "command" and the 
  1291                          ;     "parameters". The first non-delimiter character of the buffer---the first
  1292                          ;     character of the "command"---is also, for the purposes of this function,
  1293                          ;     the first "parameter" to which it returns an address.
  1294                          ;
  1295                          ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
  1296                          ;     is determined at configuration time by a user module parameter.
  1297                          ;
  1298  3CF6                     LTRX_szGetParam:
  1299  3CF6                    _LTRX_szGetParam:
  1300                             RAM_PROLOGUE RAM_USE_CLASS_4
  1301                             RAM_PROLOGUE RAM_USE_CLASS_3
  1302                              
  1303  3CF6  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1304  3CF9  50 88                mov   A, <LTRX_aRxBuffer                 ; Get address to receive buffer
  1305  3CFB  02 A4                add   A, [ptrParam]                      ; Add string offset
  1306  3CFD  5C                   mov   X, A
  1307  3CFE  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer
  1308  3D01  52 00                mov   A, [X]                             ; Get character pointed by X
  1309  3D03  B004                 jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
  1310  3D05  10                   push  X                                  ;       Yes, Save LSB of current pointer
  1311  3D06  8033                 jmp   .End_GetNextParam
  1312                                                                      ; Check for delimiter and keep looping until
  1313                                                                      ; all leading delimiters have been found.
  1314  3D08                    .SkipOverDelimitersLoop:
  1315  3D08  39 20                cmp   A, LTRX_DELIMITER                  ; Do we have a delimiter?
  1316  3D0A  B011                 jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
  1317  3D0C  75                   inc   X                                  ;   Yes, Increment both index and...
  1318  3D0D  76 A4                inc   [ptrParam]                         ;          the stored pointer.
  1319  3D0F  52 00                mov   A, [X]                             ; Get character pointed by X
  1320  3D11  3C A4  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; End of buffer?
  1321  3D14  BFF3                 jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
  1322                          
  1323  3D16                    .EndOfString:                               ;   Yes, end of string found...
  1324  3D16  10                   push  X                                  ;        Save ptr
  1325  3D17                    .TerminateString:
  1326  3D17  56 00 00             mov   [X], 0x00                          ; Make sure string is zero
  1327  3D1A  801F                 jmp   .End_GetNextParam
  1328                          
  1329  3D1C                    .ParamStartFound:
  1330  3D1C  10                   push  X                                  ; Beginning of parameter found, save pointer
  1331                          
  1332  3D1D                    .ParamLoop:                                 ; Now loop until end of parameter found.
  1333  3D1D  75                   inc   X                                  ; Advance pointers.
  1334  3D1E  76 A4                inc   [ptrParam]
  1335  3D20  3C A4  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
  1336  3D23  AFF3                 jz    .TerminateString
  1337  3D25  52 00                mov   A, [X]                             ; Get next character
  1338  3D27  A012                 jz    .End_GetNextParam
  1339  3D29  39 20                cmp   A, LTRX_DELIMITER                  ; Check if we have a delimiter
  1340  3D2B  BFF1                 jnz   .ParamLoop                         ; Still no delimiter, loop again
  1341  3D2D  56 00 00             mov   [X], 0x00                          ; Replace delimiter with null for end of substring
  1342  3D30  76 A4                inc   [ptrParam]
  1343  3D32  3C A4  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
  1344  3D35  B004                 jnz   .End_GetNextParam                  ; If not end of string leave
  1345  3D37  55 A4  0F            mov   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
  1346                          
  1347  3D3A                    .End_GetNextParam:
  1348  3D3A  20                   pop   X
  1349  3D3B  10                   push  X
  1350  3D3C  3D 00 00             cmp   [X], 0x00
  1351  3D3F  B00B                 jnz   .NotNullString
  1352  3D41  20                   pop   X
  1353  3D42  57 00                mov   X, 0x00
  1354  3D44  50 00                mov   A, >LTRX_aRxBuffer
  1355  3D46  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
  1356                             RAM_EPILOGUE RAM_USE_CLASS_4
  1357  3D4A  7F                   ret
  1358                          
  1359  3D4B                    .NotNullString:
  1360  3D4B  20                   pop  X
  1361  3D4C  50 00                mov  A, >LTRX_aRxBuffer                  ; Return pointer
  1362  3D4E  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
  1363                             RAM_EPILOGUE RAM_USE_CLASS_4
  1364  3D52  7F                   ret
  1365                          .ENDSECTION
  1366                          
  1367                          
  1368                          .SECTION
  1369                          ;-----------------------------------------------------------------------------
  1370                          ;  FUNCTION NAME: LTRX_szGetRestOfParams
  1371                          ;
  1372                          ;  DESCRIPTION:
  1373                          ;      Returns a pointer to the rest of the UART RX buffer
  1374                          ;-----------------------------------------------------------------------------
  1375                          ;
  1376                          ;  ARGUMENTS:  none
  1377                          ;
  1378                          ;  RETURNS:
  1379                          ;     A => MSB of parameter
  1380                          ;     X => LSB of parameter
  1381                          ;
  1382                          ;  SIDE EFFECTS:
  1383                          ;    The A and X registers may be modified by this or future implementations
  1384                          ;    of this function.  The same is true for all RAM page pointer registers in
  1385                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1386                          ;    responsibility to perserve their values across calls to fastcall16 
  1387                          ;    functions.
  1388                          ;          
  1389                          ;    Currently only the page pointer registers listed below are modified: 
  1390                          ;          CUR_PP
  1391                          ;
  1392  3D53                     LTRX_szGetRestOfParams:
  1393  3D53                    _LTRX_szGetRestOfParams:
  1394                             RAM_PROLOGUE RAM_USE_CLASS_4
  1395  3D53  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1396  3D56  50 88                mov  A, <LTRX_aRxBuffer                  ; Get address to receive buffer
  1397  3D58  02 A4                add  A, [ptrParam]                       ; Add string offset
  1398  3D5A  5C                   mov  X,A
  1399  3D5B  50 00                mov  A,>LTRX_aRxBuffer                   ; Return pointer
  1400                             RAM_EPILOGUE RAM_USE_CLASS_4
  1401  3D5D  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:16 2009
              LTRX_RX_COMPLETE 0008          LTRX_szGetRestOfParams 3D53                LTRX_RX_INT_MASK 0080  
                 LTRX_RX_ERROR 00E0                        MAC0_CL0 00EE                        MAC0_CL1 00EF  
                      MAC1_CL0 00AE                        MAC1_CL1 00AF                        CLEN_LSB FFFFFFFB  
                      CLEN_MSB FFFFFFFA                LTRX_RX_REG_FULL 0008                   LTRX_CmdReset 3CC7  
                         MAC_X 00EC                           MAC_Y 00ED               LTRX_RX_BUF_ERROR 00F0  
                    LTRX_Start 3B97                      LTRX_Write 3C58                 LTRX_szGetParam 3CF6  
               LTRX_PutSHexInt 3C04                        CSTR_LSB FFFFFFFD                        CSTR_MSB FFFFFFFC  
       bfCONTROL_REG_START_BIT 0001         _LTRX_szGetRestOfParams 3D53              LTRX_RX_BUFFER_REG 003E  
              LTRX_TX_FUNC_REG 0038           LTRX_RX_FRAMING_ERROR 0020                          ??0000 3C0B  
                        ??0001 3C6A                          ??0002 3C91                     _LTRX_Start 3B97  
                   _LTRX_Write 3C58                   End_PutString 3C53                   LTRX_SendData 3BA7  
              LTRX_TX_INT_MASK 0040                   LTRX_cGetChar 3C13                _LTRX_DisableInt 3B7E  
                   LTRX_CWrite 3C7E                          MAC0_X 00EC                          MAC0_Y 00ED  
                        MAC1_X 00AC                          MAC1_Y 00AD                          HITECH 0002  
               FLAG_PGMODE_01b 0040                 FLAG_PGMODE_10b 0080                          IDX_PP 00D3  
                        CUR_PP 00D0                     LTRX_bRxCnt 0086                  LTRX_EnableInt 3B77  
              LTRX_bReadRxData 3BAD                 LTRX_CPutString 3CAC                LTRX_PutSHexByte 3BF1  
            End_LTRX_cReadChar 3C31             LTRX_RX_BUFFER_SIZE 0010                    _LTRX_CWrite 3C7E  
             LTRX_SetTxIntMode 3B85               LTRX_RXBUF_ENABLE 0001               _LTRX_bReadRxData 3BAD  
                LTRX_bCmdCheck 3CDD               _LTRX_PutSHexByte 3BF1                    LTRX_HEX_STR 3BE1  
     SYSTEM_LARGE_MEMORY_MODEL 0001              End_LTRX_iReadChar 3C47              LTRX_bReadRxStatus 3BB0  
        SYSTEM_MULTIPAGE_STACK 0000                _LTRX_bCmdLength 3CF0                  LTRX_bErrCheck 3CE5  
            LTRX_bReadTxStatus 3BAA                 LTRX_RX_INT_REG 00E1             LTRX_RX_CONTROL_REG 003F  
            bLTRX_ReadRxStatus 3BB0                       LTRX_Stop 3BA0                 LTRX_RX_NO_DATA 0001  
                       MAC_CL0 00EE                         MAC_CL1 00EF             LTRX_RX_BUF_CMDTERM 0001  
                       CNT_LEN FFFFFFFB              bLTRX_ReadTxStatus 3BAA                  LTRX_cReadChar 3C1B  
                LTRX_TxIntMode 3BB3             LTRX_TX_CONTROL_REG 003B                    LTRX_IntCntl 3BC6  
                LTRX_aRxBuffer 0088                FLAG_PGMODE_MASK 00C0                      _LTRX_Stop 3BA0  
               _LTRX_EnableInt 3B77                 LTRX_TX_INT_REG 00E1                bLTRX_ReadRxData 3BAD  
               RAM_USE_CLASS_1 0001                 RAM_USE_CLASS_2 0002                 RAM_USE_CLASS_3 0004  
               RAM_USE_CLASS_4 0008                    LTRX_PutCRLF 3CBE              _LTRX_SetTxIntMode 3B85  
                  LTRX_PutChar 3C0B                  LTRX_PutString 3C48              LTRX_ENABLE_RX_INT 0001  
                       STR_LSB FFFFFFFD                         STR_MSB FFFFFFFC              LTRX_ENABLE_TX_INT 0002  
                  LTRX_fStatus 0085  bfFUNCTION_REG_TX_INT_MODE_BIT 0010                  LTRX_iReadChar 3C32  
               LTRX_DisableInt 3B7E                _LTRX_szGetParam 3CF6              LTRX_TX_BUFFER_REG 0039  
             _bLTRX_ReadRxData 3BAD                _LTRX_PutSHexInt 3C04                 _LTRX_bCmdCheck 3CDD  
                      ptrParam 00A4                  _LTRX_CmdReset 3CC7                  LTRX_DELIMITER 0020  
               _LTRX_bErrCheck 3CE5                 _LTRX_cReadChar 3C1B                 _LTRX_TxIntMode 3BB3  
                _LTRX_SendData 3BA7       LTRX_INT_MODE_TX_COMPLETE 0001                  _LTRX_cGetChar 3C13  
             SYSTEM_STACK_PAGE 0007            LTRX_TX_BUFFER_EMPTY 0010             _LTRX_bReadRxStatus 3BB0  
              _LTRX_CPutString 3CAC                   FLAG_XIO_MASK 0010                 _LTRX_PutString 3C48  
                 _LTRX_IntCntl 3BC6             _LTRX_bReadTxStatus 3BAA      SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
          LTRX_RX_PARITY_ERROR 0080                   _LTRX_PutCRLF 3CBE      SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           _bLTRX_ReadRxStatus 3BB0                   _LTRX_PutChar 3C0B                 _LTRX_iReadChar 3C32  
           _bLTRX_ReadTxStatus 3BAA                 LTRX_bCmdLength 3CF0  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:16 2009
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRX.inc
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module for the
     8                          ;;                22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          ;--------------------------------------------------
    15                          ; Constants for LTRX API's
    16                          ;--------------------------------------------------
    17                          
    18                          ;mask value for global int reg bit for TX instance
    19  0040                    LTRX_TX_INT_MASK:                            equ 0x40
    20  00E1                    LTRX_TX_INT_REG:                             equ 0x0e1  ;TX interrupt address
    21  0080                    LTRX_RX_INT_MASK:                            equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    22  00E1                    LTRX_RX_INT_REG:                             equ 0x0e1  ;RX interrupt address
    23                          
    24  0001                    LTRX_RXBUF_ENABLE:                           equ 1
    25                          
    26                          ; Interrupt control masks
    27  0001                    LTRX_ENABLE_RX_INT:                          equ 0x01
    28  0000                    LTRX_DISABLE_RX_INT:                         equ 0x00
    29  0002                    LTRX_ENABLE_TX_INT:                          equ 0x02
    30  0000                    LTRX_DISABLE_TX_INT:                         equ 0x00
    31                          
    32  0000                    LTRX_INT_MODE_TX_REG_EMPTY:                  equ 0x00
    33  0001                    LTRX_INT_MODE_TX_COMPLETE:                   equ 0x01
    34                          
    35  0020                    LTRX_RX_IGNORE_BELOW:                        equ 0x20
    36  0010                    LTRX_RX_BUFFER_SIZE:                         equ 0x10
    37  000D                    LTRX_CMD_TERM:                               equ 0xd
    38  0020                    LTRX_DELIMITER:                              equ 0x20
    39  0000                    LTRX_BACKSPACE_ENABLE:                       equ 0x0
    40                          
    41                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                          ;       WARNING WARNING WARNING
    43                          ; The following equates are for backwards
    44                          ; compatibility only and should not be used
    45                          ; for new designs.
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;------------------------------------
    49                          ;  Parity masks
    50                          ;------------------------------------
    51  0000                    UART_PARITY_NONE:       equ   00h
    52  0002                    UART_PARITY_EVEN:       equ   02h
    53  0006                    UART_PARITY_ODD:        equ   06h
    54                          
    55                          ;------------------------------------
    56                          ;  TX Status Register masks
    57                          ;------------------------------------
    58  0020                    UART_TX_COMPLETE:       equ   20h
    59  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    60                          
    61                          ;------------------------------------
    62                          ;  RX Status Register masks
    63                          ;------------------------------------
    64  0010                    UART_RX_ACTIVE:         equ   10h
    65  0008                    UART_RX_COMPLETE:       equ   08h
    66  0080                    UART_RX_PARITY_ERROR:   equ   80h
    67  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    68  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    69  00E0                    UART_RX_NO_ERROR:       equ   E0h
    70                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    71                          ;             END WARNING
    72                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    73                          
    74                          
    75                          
    76                          ;------------------------------------
    77                          ;  Parity masks
    78                          ;------------------------------------
    79  0000                    LTRX_PARITY_NONE:                       equ   00h
    80  0002                    LTRX_PARITY_EVEN:                       equ   02h
    81  0006                    LTRX_PARITY_ODD:                        equ   06h
    82                          
    83                          ;------------------------------------
    84                          ;  TX Status Register masks
    85                          ;------------------------------------
    86  0020                    LTRX_TX_COMPLETE:                       equ   20h
    87  0010                    LTRX_TX_BUFFER_EMPTY:                   equ   10h
    88                          
    89                          ;------------------------------------
    90                          ;  RX Status Register masks
    91                          ;------------------------------------
    92  0010                    LTRX_RX_ACTIVE:                         equ   10h
    93  0008                    LTRX_RX_COMPLETE:                       equ   08h
    94  0008                    LTRX_RX_REG_FULL:                       equ   08h
    95  0080                    LTRX_RX_PARITY_ERROR:                   equ   80h
    96  0040                    LTRX_RX_OVERRUN_ERROR:                  equ   40h
    97  0020                    LTRX_RX_FRAMING_ERROR:                  equ   20h
    98  00E0                    LTRX_RX_ERROR:                          equ   E0h
    99  0001                    LTRX_RX_ENABLE:                         equ   01h
   100                          
   101  00F0                    LTRX_RX_BUF_ERROR:                      equ   F0h  ; Mask for any Rx that may occur.
   102  0010                    LTRX_RX_BUF_OVERRUN:                    equ   10h  ; This indicates the software buffer has
   103                                                                                  ; been over run.
   104  0001                    LTRX_RX_BUF_CMDTERM:                    equ   01h  ; Command terminator has been received.
   105                          
   106  0001                    LTRX_RX_NO_DATA:                        equ   01h
   107  00E0                    LTRX_RX_NO_ERROR:                       equ   E0h
   108                          
   109                          
   110                          ;--------------------------------------------------
   111                          ; Registers Address Constants for LTRX
   112                          ;--------------------------------------------------
   113                          ;---------------------------------
   114                          ;  Registers used by TX
   115                          ;---------------------------------
   116  003B                    LTRX_TX_CONTROL_REG:    equ 3bh            ; Control register
   117  0038                    LTRX_TX_SHIFT_REG:  equ 38h               ; TX Shift Register register
   118  0039                    LTRX_TX_BUFFER_REG: equ 39h               ; TX Buffer Register
   119  0038                    LTRX_TX_FUNC_REG:   equ 38h             ; Function register
   120  0039                    LTRX_TX_INPUT_REG:  equ 39h             ; Input register
   121  003A                    LTRX_TX_OUTPUT_REG: equ 3ah             ; Output register
   122                          
   123                          ;---------------------------------
   124                          ;  Registers used by RX
   125                          ;---------------------------------
   126  003F                    LTRX_RX_CONTROL_REG:    equ 3fh            ; Control register
   127  003C                    LTRX_RX_SHIFT_REG:  equ 3ch               ; RX Shift Register register
   128  003E                    LTRX_RX_BUFFER_REG: equ 3eh               ; RX Buffer Register
   129  003C                    LTRX_RX_FUNC_REG:   equ 3ch             ; Function register
   130  003D                    LTRX_RX_INPUT_REG:  equ 3dh             ; Input register
   131  003E                    LTRX_RX_OUTPUT_REG: equ 3eh             ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRXINT.asm
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "LTRX.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _LTRX_TX_ISR
    22                          export  _LTRX_RX_ISR
    23                          
    24                          IF (LTRX_RXBUF_ENABLE)
    25                          export  LTRX_aRxBuffer
    26                          export _LTRX_aRxBuffer
    27                          export  LTRX_bRxCnt
    28                          export _LTRX_bRxCnt
    29                          export  LTRX_fStatus
    30                          export _LTRX_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (LTRX_RXBUF_ENABLE)
    40  0085                     LTRX_fStatus:
    41  0085                    _LTRX_fStatus:      BLK  1
    42  0086                     LTRX_bRxCnt:
    43  0086                    _LTRX_bRxCnt:       BLK  1
    44                          AREA LTRX_RAM (RAM, REL, CON)
    45  0088                     LTRX_aRxBuffer:
    46  0088                    _LTRX_aRxBuffer:    BLK LTRX_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _LTRX_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance LTRX.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  3D5E                    _LTRX_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom code above this banner
    99                             ;---------------------------------------------------
   100                             ;@PSoC_UserCode_END@ (Do not change this line.)
   101  3D5E  7E                   reti
   102                          
   103                          
   104                          ;-----------------------------------------------------------------------------
   105                          ;  FUNCTION NAME: _LTRX_RX_ISR
   106                          ;
   107                          ;  DESCRIPTION:
   108                          ;     UART RX interrupt handler for instance LTRX.
   109                          ;     This ISR handles the background processing of received characters if
   110                          ;     the buffer is enabled.
   111                          ;
   112                          ;
   113                          ;  The following assumes that the RX buffer feature has been enabled.
   114                          ;
   115                          ;  SIDE EFFECTS:
   116                          ;     There are 3 posible errors that may occur with the serial port.
   117                          ;      1) Parity Error
   118                          ;      2) Framing Error
   119                          ;      3) OverRun Error
   120                          ;
   121                          ;  This user module check for parity and framing error.  If either of these
   122                          ;  two errors are detected, the data is read and ignored.  When an overRun
   123                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   124                          ;  this reason this error is ignored at this time.  Code could be added to
   125                          ;  this ISR to set a flag if an error condition occurs.
   126                          ;
   127                          ;  THEORY of OPERATION:
   128                          ;     When using the RX buffer feature, the ISR collects received characters
   129                          ;     in a buffer until the user defined command terminator is detected.  After
   130                          ;     the command terminator is detected, the command bit is set and all other
   131                          ;     characters will be ignored until the command bit is reset.  Up to
   132                          ;     buffer_size - 1 characters will be collected waiting for a command
   133                          ;     terminator.  After that, the characters will be discarded, although
   134                          ;     a command determinator will still cause the command bit to be set.
   135                          ;
   136                          ;-----------------------------------------------------------------------------
   137  3D5F                    _LTRX_RX_ISR:
   138                          
   139                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   140                             ;---------------------------------------------------
   141                             ; Insert your custom code below this banner
   142                             ;---------------------------------------------------
   143                             ;   NOTE: interrupt service routines must preserve
   144                             ;   the values of the A and X CPU registers.
   145                          
   146                             ;---------------------------------------------------
   147                             ; Insert your custom code above this banner
   148                             ;---------------------------------------------------
   149                             ;@PSoC_UserCode_END@ (Do not change this line.)
   150                          
   151                          IF (LTRX_RXBUF_ENABLE)
   152  3D5F  08                   push A
   153  3D60  10                   push X
   154                             
   155                             IF SYSTEM_LARGE_MEMORY_MODEL
   156  3D61  5D D3                   REG_PRESERVE IDX_PP
   157                             ENDIF
   158                             
   159  3D64  58 86                mov  X,[LTRX_bRxCnt]                                    ; Load X with byte counter
   160  3D66  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Read the control register
   161  3D68  08                   push A                                                  ; Store copy for later test
   162                                                                                     ; IF real RX interrupt
   163  3D69  21 08                and  A,LTRX_RX_REG_FULL                                 ; Did really really get an IRQ
   164  3D6B  B004                 jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   165  3D6D  18                   pop  A                                                  ; Restore stack
   166  3D6E  805E                 jmp  .RESTORE_IDX_PP
   167                          
   168  3D70                    .UARTRX_ReadRx:
   169  3D70  18                   pop  A                                                  ; Restore status flags
   170                                                                                     ; IF there is no error, get data
   171                                                                                     ; Check for parity or framing error
   172  3D71  21 E0                and  A,LTRX_RX_ERROR
   173  3D73  A012                 jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   174                          
   175  3D75  2C 85                or   [LTRX_fStatus],A                                   ; Set error flags (parity,framing,overrun
                                ) bits
   176  3D77  49 3E 00             tst  REG[LTRX_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
   177  3D7A  21 20                and  A,LTRX_RX_FRAMING_ERROR                            ; Check for framing error special case
   178  3D7C  A050                 jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   179                          
   180                                                                                     ; Disable and re-enable RX to reset after
   181                                                                                     ; framing error.
   182  3D7E  41 3F FE             and   REG[LTRX_RX_CONTROL_REG], ~LTRX_RX_ENABLE         ; Disable RX
   183  3D81  43 3F 01             or    REG[LTRX_RX_CONTROL_REG],  LTRX_RX_ENABLE         ; Enable RX
   184  3D84  8048                 jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   185                          
   186                          
   187  3D86                    .UARTRX_NO_ERROR:
   188  3D86  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]                         ; Read the data buffer
   189                          
   190                                                                                     ; IF buffer not full
   191  3D88  47 85  01            tst  [LTRX_fStatus],LTRX_RX_BUF_CMDTERM                 ; Check for buffer full
   192  3D8B  B041                 jnz  .RESTORE_IDX_PP                                    ; All done
   193                          
   194  3D8D  39 0D                cmp  A,LTRX_CMD_TERM                                    ; Check for End of command
   195  3D8F  B014                 jnz  .UARTRX_CHK_BACKSPACE
   196  3D91  2E 85  01            or   [LTRX_fStatus],LTRX_RX_BUF_CMDTERM                 ; Set command ready bit
   197                          
   198                          
   199                          
   200  3D94  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer
   201  3D97  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   202  3D9B  56 88  00            mov  [X + LTRX_aRxBuffer],00h                           ; Zero out last data
   203  3D9E  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   204  3DA2  802A                 jmp  .RESTORE_IDX_PP
   205                          
   206  3DA4                    .UARTRX_CHK_BACKSPACE:                                     ; 
   207                          IF(LTRX_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
   208                             cmp  A,LTRX_BACKSPACE_ENABLE                            ; Check for backspace character
   209                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   210                             cmp  [LTRX_bRxCnt],00h                                  ; Check if buffer empty
   211                             jz   .RESTORE_IDX_PP                                    ; 
   212                             dec  [LTRX_bRxCnt]                                      ; Decrement buffer count by one.
   213                             jmp  .RESTORE_IDX_PP
   214                          ENDIF                                                      ; 
   215                          
   216  3DA4                    .UARTRX_IGNORE:
   217                          IF(LTRX_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
   218  3DA4  39 20                cmp  A,LTRX_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
   219  3DA6  C026                 jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   220                          ENDIF
   221                          
   222  3DA8                    .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   223                          	
   224  3DA8  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer                         ;   using idexed address mode
   225  3DAB  3C 86  0F            cmp  [LTRX_bRxCnt],(LTRX_RX_BUFFER_SIZE - 1)
   226  3DAE  C011                 jc   .UARTRX_ISR_GETDATA
   227  3DB0  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   228  3DB4  56 88  00            mov  [X + LTRX_aRxBuffer],00h                           ; Zero out last data in the buffer
   229  3DB7  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   230  3DBB  2E 85  10            or   [LTRX_fStatus],LTRX_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun
                                ) bits
   231  3DBE  800E                 jmp  .RESTORE_IDX_PP
   232                          
   233  3DC0                    .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   234                                                                                     ; X is already loaded with pointer
   235  3DC0  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   236  3DC4  54 88                mov  [X+LTRX_aRxBuffer],A                               ; store data in array
   237  3DC6  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   238  3DCA  75                   inc  X                                                  ; Inc the pointer
   239  3DCB  5A 86                mov  [LTRX_bRxCnt],X                                    ; Restore the pointer
   240                                                                                     ; ENDIF max string size
   241  3DCD                    .RESTORE_IDX_PP:
   242                             IF SYSTEM_LARGE_MEMORY_MODEL
   243  3DCD  18                      REG_RESTORE IDX_PP
   244                             ENDIF
   245                          
   246  3DD0                    .END_UARTRX_ISR:
   247  3DD0  20                   pop  X
   248  3DD1  18                   pop  A
   249                          
   250                          ENDIF
   251                          
   252  3DD2                    LTRX_RX_ISR_END:
   253  3DD2  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:16 2009
             _LTRX_fStatus 0085               LTRX_RX_ERROR 00E0                    MAC0_CL0 00EE                    MAC0_CL1 00EF  
                  MAC1_CL0 00AE                    MAC1_CL1 00AF            LTRX_RX_REG_FULL 0008                       MAC_X 00EC  
                     MAC_Y 00ED          LTRX_RX_BUFFER_REG 003E       LTRX_RX_FRAMING_ERROR 0020              LTRX_RX_ENABLE 0001  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
                    HITECH 0002             FLAG_PGMODE_00b 0000             FLAG_PGMODE_10b 0080        LTRX_RX_IGNORE_BELOW 0020  
                    IDX_PP 00D3                 LTRX_bRxCnt 0086         LTRX_RX_BUFFER_SIZE 0010       LTRX_BACKSPACE_ENABLE 0000  
              _LTRX_RX_ISR 3D5F                _LTRX_TX_ISR 3D5E           LTRX_RXBUF_ENABLE 0001                _LTRX_bRxCnt 0086  
 SYSTEM_LARGE_MEMORY_MODEL 0001             LTRX_RX_ISR_END 3DD2         LTRX_RX_CONTROL_REG 003F                     MAC_CL0 00EE  
                   MAC_CL1 00EF         LTRX_RX_BUF_CMDTERM 0001              LTRX_aRxBuffer 0088            FLAG_PGMODE_MASK 00C0  
       LTRX_RX_BUF_OVERRUN 0010                LTRX_fStatus 0085             _LTRX_aRxBuffer 0088               LTRX_CMD_TERM 000D  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:17 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.inc
     4                          ;;  Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the OneWire user module interface
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          
    13                          ;;*****************************************************************************
    14                          
    15                          ;--------------------------------
    16                          ;  Interrupt registers and masks
    17                          ;--------------------------------
    18  0040                    OneWire_BIT_INT_MASK:                   equ 0x40
    19  00DF                    OneWire_BIT_INT_REG:                    equ 0x0df
    20                          
    21                          IF (OneWire_BIT_INT_REG - INT_MSK1)
    22  00DC                    OneWire_BIT_INT_CLR:                    equ INT_CLR2
    23                          ELSE
    24                          OneWire_BIT_INT_CLR:                    equ INT_CLR1
    25                          ENDIF
    26                          
    27                          ;--------------------------------
    28                          ;  Parasite Power Pin selected
    29                          ;--------------------------------
    30  0001                    OneWire_OUT_PORT_DM1:                   equ PRT0DM1
    31  0001                    OneWire_OUT_PORT_MASK:                  equ 0x1
    32                          
    33                          ;---------------------------
    34                          ; One Wire constants and masks
    35                          ;---------------------------
    36  0000                    OneWire_CRC16_ENABLE:                   equ   0
    37  0001                    OneWire_SEARCH_ENABLE:                  equ   1
    38  0000                    OneWire_OVERDRIVE_ENABLE:               equ   0
    39  0000                    OneWire_PARASITE_ENABLE:                equ   0
    40                          
    41                          ;-----------------------------------------------
    42                          ;  Registers used by OneWire
    43                          ;-----------------------------------------------
    44  0054                    OneWire_BITCLK_FUNC_REG:    equ 54h              ;Function register
    45  0055                    OneWire_BITCLK_INPUT_REG:   equ 55h              ;Input register
    46  0056                    OneWire_BITCLK_OUTPUT_REG:  equ 56h              ;Output register
    47  0057                    OneWire_BITCLK_CONTROL_REG: equ 57h              ;Control register
    48  0054                    OneWire_BITCLK_COUNTER_REG: equ 54h              ;Counter register
    49  0055                    OneWire_BITCLK_PERIOD_REG:  equ 55h              ;Period register
    50  0056                    OneWire_BITCLK_COMPARE_REG: equ 56h              ;Compare register
    51  0058                    OneWire_XCVR_FUNC_REG:  equ 58h                  ;Function register
    52  0059                    OneWire_XCVR_INPUT_REG: equ 59h                  ;Input register
    53  005A                    OneWire_XCVR_OUTPUT_REG:    equ 5ah              ;Output register
    54  005B                    OneWire_XCVR_CONTROL_REG:   equ 5bh              ;Control register
    55  0058                    OneWire_XCVR_SHIFT_REG: equ 58h                  ;Counter register
    56  0059                    OneWire_XCVR_TX_BUFFER_REG: equ 59h              ;Period register
    57  005A                    OneWire_XCVR_RX_BUFFER_REG: equ 5ah              ;Compare register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.asm
     4                          ;;   Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: OneWire User Module software implementation file
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API function
    14                          ;;        returns. For Large Memory Model devices it is also the caller's
    15                          ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;   Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "OneWire.inc"
    26                          
    27                          export  OneWire_Start
    28                          export _OneWire_Start
    29                          export  OneWire_Stop
    30                          export _OneWire_Stop
    31                          
    32                          export  OneWire_fReset
    33                          export _OneWire_fReset
    34                          export  OneWire_WriteBit
    35                          export _OneWire_WriteBit
    36                          export  OneWire_bReadBit
    37                          export _OneWire_bReadBit
    38                          export  OneWire_WriteByte
    39                          export _OneWire_WriteByte
    40                          export  OneWire_bReadByte
    41                          export _OneWire_bReadByte
    42                          export  OneWire_ClearCRC8
    43                          export _OneWire_ClearCRC8
    44                          export  OneWire_bCRC8
    45                          export _OneWire_bCRC8
    46                          
    47                          export  OneWire_bCRC8Value
    48                          export _OneWire_bCRC8Value
    49                          IF (OneWire_CRC16_ENABLE)
    50                          export  OneWire_ClearCRC16
    51                          export _OneWire_ClearCRC16
    52                          export  OneWire_wCRC16
    53                          export _OneWire_wCRC16
    54                          export  OneWire_wCRC16Value
    55                          export _OneWire_wCRC16Value
    56                          ENDIF
    57                          
    58                          IF (OneWire_SEARCH_ENABLE)
    59                          export   OneWire_GetROM
    60                          export  _OneWire_GetROM
    61                          export   OneWire_SetROM
    62                          export  _OneWire_SetROM
    63                          export   OneWire_fFindFirst
    64                          export  _OneWire_fFindFirst
    65                          export   OneWire_fFindNext
    66                          export  _OneWire_fFindNext
    67                          export   OneWire_fVerify
    68                          export  _OneWire_fVerify
    69                          export   OneWire_FamilyTargetSetup
    70                          export  _OneWire_FamilyTargetSetup
    71                          export   OneWire_FamilySkipSetup
    72                          export  _OneWire_FamilySkipSetup
    73                          ENDIF
    74                          
    75                          IF (OneWire_OVERDRIVE_ENABLE)
    76                          export  OneWire_SetOverdrive
    77                          export _OneWire_SetOverdrive
    78                          export  OneWire_ClearOverdrive
    79                          export _OneWire_ClearOverdrive
    80                          ENDIF
    81                          
    82                          IF (OneWire_PARASITE_ENABLE)
    83                          export  OneWire_WriteByteStrong
    84                          export _OneWire_WriteByteStrong
    85                          export  OneWire_SetResistive
    86                          export _OneWire_SetResistive
    87                          ENDIF
    88                          
    89                          AREA bss
    90                          
    91  0098                    _OneWire_bCRC8Value:
    92  0098                     OneWire_bCRC8Value:                             blk   1
    93                          
    94                          IF (OneWire_CRC16_ENABLE)
    95                          _OneWire_wCRC16Value:
    96                           OneWire_wCRC16Value:                            blk   2
    97                          ENDIF
    98                          
    99                          IF (OneWire_SEARCH_ENABLE)
   100  0099                    OneWire_ROM:                                     blk   8
   101  00A1                    OneWire_LastDiscrepancy:                         blk   1
   102  00A2                    OneWire_LastFamilyDiscrepancy:                   blk   1
   103  00A3                    OneWire_LastDeviceFlag:                          blk   1
   104                          ENDIF
   105                          
   106                          IF (OneWire_OVERDRIVE_ENABLE )
   107                          OneWire_bMode:                                   blk   1
   108                          ENDIF
   109                          
   110                          AREA UserModules (ROM, REL)
   111                          
   112  00F1                    RESET_PATTERN:                          equ   F1h
   113  0001                    ZERO_PATTERN:                           equ   01h
   114  00FD                    ONE_PATTERN:                            equ   FDh
   115  000F                    INIT_PERIOD:                            equ   0Fh
   116  00F9                    RESET_PERIOD:                           equ   F9h      ;Divide by 250 (249+1)
   117  000D                    BIT_PERIOD:                             equ   0Dh      ;Divide by 14 (13+1)
   118  0019                    OD_RESET_PERIOD:                        equ   19h      ;Divide by 26 (25+1)
   119  0001                    OD_BIT_PERIOD:                          equ   01h      ;Divide by 2 (1+1)
   120                          
   121  0020                    SPIM_SPI_COMPLETE:              equ 0x20    ;SPI Tx/Rx cycle has completed
   122  0000                    SPIM_MODE_0:                   equ 0x00    ; MODE 0 - Leading edge latches data - pos clock
   123  0080                    SPIM_LSB_FIRST:                equ 0x80    ; LSB bit transmitted/received first
   124  0001                    CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
   125  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
   126  000F                    INPUT_REG_CLOCK_MASK:          equ 0x0F    ; Input register clock mask
   127  0001                    OD_MODE:                       equ 0x01    ;OverDrive
   128                          
   129                          .SECTION
   130                          ;-----------------------------------------------------------------------------
   131                          ;  FUNCTION NAME: OneWire_Start
   132                          ;
   133                          ;  DESCRIPTION:
   134                          ;     Enables the clock divider and tranceiver blocks.  Initializes the
   135                          ;     OneWireOut pin to high.  Sets the clock divider period.
   136                          ;-----------------------------------------------------------------------------
   137                          ;  ARGUMENTS:
   138                          ;     none.
   139                          ;
   140                          ;  RETURNS:
   141                          ;     none.
   142                          ;
   143                          ;  SIDE EFFECTS:
   144                          ;    The A and X registers may be modified by this or future implementations
   145                          ;    of this function.  The same is true for all RAM page pointer registers in
   146                          ;    the Large Memory Model.  When necessary, it is the calling function's
   147                          ;    responsibility to perserve their values across calls to fastcall16
   148                          ;    functions.   Currently only the page pointer registers listed below are modified:
   149                          ;       CUR_PP
   150                          ;
   151                          ;  THEORY of OPERATION:
   152                          ;     Set the start bit in the Control register.
   153                          ;-----------------------------------------------------------------------------
   154  3DD3                     OneWire_Start:
   155  3DD3                    _OneWire_Start:
   156                             RAM_PROLOGUE RAM_USE_CLASS_4
   157                          
   158                          IF (OneWire_OVERDRIVE_ENABLE | OneWire_PARASITE_ENABLE)
   159                              RAM_SETPAGE_CUR >OneWire_bMode
   160                              mov   [OneWire_bMode], 00h
   161                          ENDIF
   162  3DD3  62 55 0F              mov   reg[OneWire_BITCLK_PERIOD_REG], INIT_PERIOD        ; Set divider period to initialize OneW
                                ireOut
   163  3DD6  43 57 01              or    reg[OneWire_BITCLK_CONTROL_REG], CONTROL_REG_START_BIT  ; Start the clock divider
   164  3DD9  62 5B 81              mov   reg[OneWire_XCVR_CONTROL_REG], SPIM_MODE_0|SPIM_LSB_FIRST|CONTROL_REG_START_BIT
   165  3DDC  50 FF                 mov   A, FFh                                 ; Initialize OneWireOut to high
   166  3DDE  92EF                  call  OneWire_SendTxDataWait
   167  3DE0  62 55 0D              mov   reg[OneWire_BITCLK_PERIOD_REG], BIT_PERIOD
   168                          
   169                              RAM_EPILOGUE RAM_USE_CLASS_4
   170  3DE3  7F                    ret
   171                          .ENDSECTION
   172                          
   173                          .SECTION
   174                          ;-----------------------------------------------------------------------------
   175                          ;  FUNCTION NAME: OneWire_Stop
   176                          ;
   177                          ;  DESCRIPTION:
   178                          ;     Disables BitClk and XCVR operation.
   179                          ;-----------------------------------------------------------------------------
   180                          ;  ARGUMENTS:
   181                          ;     none.
   182                          ;
   183                          ;  RETURNS:
   184                          ;     none.
   185                          ;
   186                          ;  SIDE EFFECTS:
   187                          ;    The A and X registers may be modified by this or future implementations
   188                          ;    of this function.  The same is true for all RAM page pointer registers in
   189                          ;    the Large Memory Model.  When necessary, it is the calling function's
   190                          ;    responsibility to preserve their values across calls to fastcall16
   191                          ;    functions.
   192                          ;
   193                          ;  THEORY of OPERATION:
   194                          ;     Clear the start bits in the Control registers.
   195                          ;-----------------------------------------------------------------------------
   196  3DE4                     OneWire_Stop:
   197  3DE4                    _OneWire_Stop:
   198                              RAM_PROLOGUE RAM_USE_CLASS_1
   199                          
   200  3DE4  41 57 FE              and   reg[OneWire_BITCLK_CONTROL_REG], ~CONTROL_REG_START_BIT
   201  3DE7  41 5B FE              and   reg[OneWire_XCVR_CONTROL_REG], ~CONTROL_REG_START_BIT
   202                          
   203                              RAM_EPILOGUE RAM_USE_CLASS_1
   204  3DEA  7F                    ret
   205                          .ENDSECTION
   206                          
   207                          .SECTION
   208                          ;-----------------------------------------------------------------------------
   209                          ;  FUNCTION NAME: OneWire_fReset
   210                          ;
   211                          ;  DESCRIPTION:
   212                          ;     Reset the OneWireOut pin
   213                          ;-----------------------------------------------------------------------------
   214                          ;
   215                          ;  ARGUMENTS:
   216                          ;     none.
   217                          ;
   218                          ;  RETURNS:
   219                          ;     A = 01h if one or more devices responded.
   220                          ;
   221                          ;  SIDE EFFECTS:
   222                          ;    The A and X registers may be modified by this or future implementations
   223                          ;    of this function.  The same is true for all RAM page pointer registers in
   224                          ;    the Large Memory Model.  When necessary, it is the calling function's
   225                          ;    responsibility to preserve their values across calls to fastcall16
   226                          ;    functions. Currently only the page pointer registers listed below
   227                          ;    are modified: CUR_PP
   228                          ;
   229                          ;-----------------------------------------------------------------------------
   230  3DEB                     OneWire_fReset:
   231  3DEB                    _OneWire_fReset:
   232                              RAM_PROLOGUE RAM_USE_CLASS_4
   233                          
   234                          IF (OneWire_OVERDRIVE_ENABLE)
   235                              RAM_SETPAGE_CUR >OneWire_bMode
   236                          ENDIF
   237  3DEB  50 F9                 mov   A, RESET_PERIOD                        ; Reset period
   238                          IF (OneWire_OVERDRIVE_ENABLE)
   239                              tst   [OneWire_bMode],OD_MODE                ; Test for OverDrive mode
   240                              jz    .Reset_Normal
   241                              mov   reg[OneWire_BITCLK_PERIOD_REG], OD_RESET_PERIOD  ; OverDrive Reset period
   242                              mov   A, RESET_PATTERN                       ; Reset bit pattern
   243                              call  OneWire_SendTxDataWait
   244                              mov   A, OD_BIT_PERIOD                       ; OverDrive Bit period
   245                              jmp   .Reset_WriteBitPeriod
   246                          ENDIF
   247  3DED                    .Reset_Normal:
   248  3DED  60 55                 mov   reg[OneWire_BITCLK_PERIOD_REG], A
   249  3DEF  50 F1                 mov   A, RESET_PATTERN                       ; Reset bit pattern
   250  3DF1  92DC                  call  OneWire_SendTxDataWait
   251  3DF3  50 0D                 mov   A, BIT_PERIOD                          ; Bit period
   252  3DF5                    .Reset_WriteBitPeriod:
   253  3DF5  60 55                 mov   reg[OneWire_BITCLK_PERIOD_REG], A
   254  3DF7  5D 5A                 mov   A, reg[OneWire_XCVR_RX_BUFFER_REG]
   255  3DF9  39 F1                 cmp   A, RESET_PATTERN
   256  3DFB  D005                  jnc   .Reset_NoResponse
   257  3DFD  50 01                 mov   A,01h
   258  3DFF  8003                  jmp   .Reset_done
   259  3E01                    .Reset_NoResponse:
   260  3E01  50 00                 mov   A,00h
   261  3E03                    .Reset_done:
   262                          
   263                              RAM_EPILOGUE RAM_USE_CLASS_4
   264  3E03  7F                    ret
   265                          .ENDSECTION
   266                          
   267                          .SECTION
   268                          ;-----------------------------------------------------------------------------
   269                          ;  FUNCTION NAME: OneWire_WriteBit
   270                          ;
   271                          ;  DESCRIPTION:
   272                          ;     Write a bit to the OneWireOut pin.
   273                          ;-----------------------------------------------------------------------------
   274                          ;  ARGUMENTS:
   275                          ;     A  => less significant bit is output to OneWireOut pin
   276                          ;
   277                          ;  RETURNS:
   278                          ;     none.
   279                          ;
   280                          ;  SIDE EFFECTS:
   281                          ;    The A and X registers may be modified by this or future implementations
   282                          ;    of this function.  The same is true for all RAM page pointer registers in
   283                          ;    the Large Memory Model.  When necessary, it is the calling function's
   284                          ;    responsibility to preserve their values across calls to fastcall16
   285                          ;    functions.
   286                          ;
   287                          ;-----------------------------------------------------------------------------
   288  3E04                     OneWire_WriteBit:
   289  3E04                    _OneWire_WriteBit:
   290                              RAM_PROLOGUE RAM_USE_CLASS_1
   291                          
   292  3E04  6D                    rrc   A                                      ; Rotate LSB into CF to test
   293  3E05  C005                  jc    .WriteBit_1                            ; LSB is 1
   294  3E07  50 01                 mov   A, ZERO_PATTERN                        ; "0" bit pattern
   295  3E09  8003                  jmp   .WriteBit_Send
   296  3E0B                    .WriteBit_1:
   297  3E0B  50 FD                 mov   A, ONE_PATTERN                         ; "1" bit pattern
   298  3E0D                    .WriteBit_Send:
   299  3E0D  92C0                  call  OneWire_SendTxDataWait
   300                          
   301                              RAM_EPILOGUE RAM_USE_CLASS_1
   302  3E0F  7F                    ret
   303                          .ENDSECTION
   304                          
   305                          
   306                          .SECTION
   307                          ;-----------------------------------------------------------------------------
   308                          ;  FUNCTION NAME: OneWire_bReadBit
   309                          ;
   310                          ;  DESCRIPTION:
   311                          ;     Read the OneWireIn pin
   312                          ;-----------------------------------------------------------------------------
   313                          ;
   314                          ;  ARGUMENTS:
   315                          ;     none.
   316                          ;
   317                          ;  RETURNS:
   318                          ;     the less significant bit of A returns value read from OneWire pin.
   319                          ;
   320                          ;  SIDE EFFECTS:
   321                          ;    The A and X registers may be modified by this or future implementations
   322                          ;    of this function.  The same is true for all RAM page pointer registers in
   323                          ;    the Large Memory Model.  When necessary, it is the calling function's
   324                          ;    responsibility to preserve their values across calls to fastcall16
   325                          ;    functions.
   326                          ;
   327                          ;-----------------------------------------------------------------------------
   328  3E10                     OneWire_bReadBit:
   329  3E10                    _OneWire_bReadBit:
   330                              RAM_PROLOGUE RAM_USE_CLASS_1
   331                          
   332  3E10  50 FD                 mov    A, ONE_PATTERN
   333  3E12  92BB                  call   OneWire_SendTxDataWait
   334  3E14  5D 5A                 mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
   335  3E16  39 FD                 cmp    A, ONE_PATTERN
   336  3E18  D005                  jnc    .ReadBit_One
   337  3E1A  50 00                 mov    A, 00h
   338  3E1C  8003                  jmp    .Done
   339  3E1E                    .ReadBit_One:
   340  3E1E  50 01                 mov    A, 01h
   341  3E20                    .Done:
   342                          
   343                              RAM_EPILOGUE RAM_USE_CLASS_1
   344  3E20  7F                    ret
   345                          .ENDSECTION
   346                          
   347                          .SECTION
   348                          ;-----------------------------------------------------------------------------
   349                          ;  FUNCTION NAME: OneWire_WriteByte
   350                          ;
   351                          ;  DESCRIPTION:
   352                          ;     Write a byte to the OneWireOut pin
   353                          ;-----------------------------------------------------------------------------
   354                          ;
   355                          ;  ARGUMENTS:
   356                          ;     A => byte output to the OneWireOut pin
   357                          ;
   358                          ;  RETURNS:
   359                          ;     none.
   360                          ;
   361                          ;  SIDE EFFECTS:
   362                          ;    The A and X registers may be modified by this or future implementations
   363                          ;    of this function.  The same is true for all RAM page pointer registers in
   364                          ;    the Large Memory Model.  When necessary, it is the calling function's
   365                          ;    responsibility to preserve their values across calls to fastcall16
   366                          ;    functions.
   367                          ;
   368                          ;-----------------------------------------------------------------------------
   369  3E21                     OneWire_WriteByte:
   370  3E21                    _OneWire_WriteByte:
   371                              RAM_PROLOGUE RAM_USE_CLASS_1
   372                              
   373  3E21  08                    push   A
   374  3E22  57 08                 mov    X, 08h
   375  3E24                    .ByteLoop:
   376  3E24  18                    pop    A
   377  3E25  6D                    rrc    A
   378  3E26  08                    push   A
   379  3E27  C005                  jc     .LoadPattern_1
   380  3E29  50 01                 mov    A, ZERO_PATTERN
   381  3E2B  8003                  jmp    .SendPattern
   382  3E2D                    .LoadPattern_1:
   383  3E2D  50 FD                 mov    A, ONE_PATTERN
   384  3E2F                    .SendPattern:
   385  3E2F  60 59             	mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
   386  3E31                    .WaitForEmptyBuf:
   387  3E31  5D 5B                 mov    A, reg[OneWire_XCVR_CONTROL_REG]
   388  3E33  21 20                 and    A, SPIM_SPI_COMPLETE
   389  3E35  AFFB                  jz     .WaitForEmptyBuf
   390  3E37  79                    dec    X
   391  3E38  BFEB                  jnz    .ByteLoop
   392  3E3A  18                    pop    A
   393                          
   394                              RAM_EPILOGUE RAM_USE_CLASS_1
   395  3E3B  7F                    ret
   396                          .ENDSECTION
   397                          
   398                          .SECTION
   399                          ;-----------------------------------------------------------------------------
   400                          ;  FUNCTION NAME: OneWire_bReadByte
   401                          ;
   402                          ;  DESCRIPTION:
   403                          ;     Read a byte from the OneWireIn pin
   404                          ;-----------------------------------------------------------------------------
   405                          ;
   406                          ;  ARGUMENTS:
   407                          ;     none.
   408                          ;
   409                          ;  RETURNS:
   410                          ;     A returns byte read from OneWireIn pin.
   411                          ;
   412                          ;  SIDE EFFECTS:
   413                          ;    The A and X registers may be modified by this or future implementations
   414                          ;    of this function.  The same is true for all RAM page pointer registers in
   415                          ;    the Large Memory Model.  When necessary, it is the calling function's
   416                          ;    responsibility to perserve their values across calls to fastcall16
   417                          ;    functions.
   418                          ;
   419                          ;-----------------------------------------------------------------------------
   420  3E3C                     OneWire_bReadByte:
   421  3E3C                    _OneWire_bReadByte:
   422                              RAM_PROLOGUE RAM_USE_CLASS_1
   423                              
   424  3E3C  08                    push   A
   425  3E3D  57 08                 mov    X,08h
   426  3E3F                    .ByteLoop:
   427  3E3F  50 FD                 mov    A, ONE_PATTERN
   428  3E41  928C                  call   OneWire_SendTxDataWait
   429  3E43  5D 5A                 mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
   430  3E45  39 FD                 cmp    A, ONE_PATTERN
   431  3E47  18                    pop    A
   432  3E48  6D                    rrc    A
   433  3E49  08                    push   A
   434  3E4A  79                    dec    X
   435  3E4B  BFF3                  jnz    .ByteLoop
   436  3E4D  18                    pop    A
   437  3E4E  73                	cpl    A
   438                              RAM_EPILOGUE RAM_USE_CLASS_1
   439                              
   440  3E4F  7F                    ret
   441                          .ENDSECTION
   442                          
   443                          .SECTION
   444                          ;-----------------------------------------------------------------------------
   445                          ;  FUNCTION NAME: OneWire_ClearCRC8
   446                          ;
   447                          ;  DESCRIPTION:
   448                          ;     Clear the CRC8 RAM location
   449                          ;-----------------------------------------------------------------------------
   450                          ;
   451                          ;  ARGUMENTS:
   452                          ;     none.
   453                          ;
   454                          ;  RETURNS:
   455                          ;     none.
   456                          ;
   457                          ;  SIDE EFFECTS:
   458                          ;    The A and X registers may be modified by this or future implementations
   459                          ;    of this function.  The same is true for all RAM page pointer registers in
   460                          ;    the Large Memory Model.  When necessary, it is the calling function's
   461                          ;    responsibility to preserve their values across calls to fastcall16
   462                          ;    functions.   Currently only the page pointer registers listed below are modified:
   463                          ;    CUR_PP
   464                          ;
   465                          ;-----------------------------------------------------------------------------
   466  3E50                     OneWire_ClearCRC8:
   467  3E50                    _OneWire_ClearCRC8:
   468                              RAM_PROLOGUE RAM_USE_CLASS_4
   469  3E50  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   470                              
   471  3E53  55 98  00             mov   [OneWire_bCRC8Value], 00h
   472                              
   473                              RAM_EPILOGUE RAM_USE_CLASS_4
   474  3E56  7F                    ret
   475                          .ENDSECTION
   476                          
   477                          .SECTION
   478                          ;-----------------------------------------------------------------------------
   479                          ;  FUNCTION NAME: OneWire_bCRC8
   480                          ;
   481                          ;  DESCRIPTION:
   482                          ;     CRC for One Wire
   483                          ;-----------------------------------------------------------------------------
   484                          ;
   485                          ;  ARGUMENTS:
   486                          ;     A contains the byte to CRC.
   487                          ;
   488                          ;  RETURNS:
   489                          ;     A contains current CRC value.
   490                          ;
   491                          ;  SIDE EFFECTS:
   492                          ;    The A and X registers may be modified by this or future implementations
   493                          ;    of this function.  The same is true for all RAM page pointer registers in
   494                          ;    the Large Memory Model.  When necessary, it is the calling function's
   495                          ;    responsibility to preserve their values across calls to fastcall16
   496                          ;    functions. Currently only the page pointer registers listed below are modified:
   497                          ;     CUR_PP
   498                          ;-----------------------------------------------------------------------------
   499  3E57                     OneWire_bCRC8:
   500  3E57                    _OneWire_bCRC8:
   501                              RAM_PROLOGUE RAM_USE_CLASS_4
   502  3E57  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   503                              
   504  3E5A  08                    push  A                                      ; Save the bits to shift
   505  3E5B  57 08                 mov   X, 08h                                 ; Set up to shift one byte
   506  3E5D                    .OW_crc8_loop:
   507  3E5D  32 98                 xor   A, [OneWire_bCRC8Value]                ; Determine feedback
   508  3E5F  6D                    rrc   A                                      ; Move it into CF
   509  3E60  D004                  jnc   .OW_crc8_FB_zero                       ; If feedback is 0, no XOR of the byte needed
   510  3E62  36 98  18             xor   [OneWire_bCRC8Value],18h               ; XOR the CRC byte
   511  3E65                    .OW_crc8_FB_zero:
   512  3E65  6E 98                 rrc   [OneWire_bCRC8Value]                   ; Rotate CF into the CRC byte
   513  3E67  18                    pop   A                                      ; Restore the remaining bits
   514  3E68  6D                    rrc   A                                      ; Rotate for the next bit
   515  3E69  08                    push  A                                      ; Save the remaining bits
   516  3E6A  79                    dec   X                                      
   517  3E6B  BFF1                  jnz   .OW_crc8_loop                          ; Loop until whole input byte is shifted
   518  3E6D  18                    pop   A                                      ; Clean up stack
   519  3E6E  51 98                 mov   A, [OneWire_bCRC8Value]                ; Load computed CRC byte into A
   520                              
   521                              RAM_EPILOGUE RAM_USE_CLASS_4
   522  3E70  7F                    ret
   523                          .ENDSECTION
   524                          
   525                          IF (OneWire_CRC16_ENABLE)
   526                          .SECTION
   527                          ;-----------------------------------------------------------------------------
   528                          ;  FUNCTION NAME: OneWire_ClearCRC16
   529                          ;
   530                          ;  DESCRIPTION:
   531                          ;     Clear the CRC16 RAM locations
   532                          ;-----------------------------------------------------------------------------
   533                          ;  ARGUMENTS:
   534                          ;     none.
   535                          ;
   536                          ;  RETURNS:
   537                          ;     none.
   538                          ;
   539                          ;  SIDE EFFECTS:
   540                          ;    The A and X registers may be modified by this or future implementations
   541                          ;    of this function.  The same is true for all RAM page pointer registers in
   542                          ;    the Large Memory Model.  When necessary, it is the calling function's
   543                          ;    responsibility to preserve their values across calls to fastcall16
   544                          ;    functions. Currently only the page pointer registers listed below are modified:
   545                          ;     CUR_PP
   546                          ;
   547                          ;-----------------------------------------------------------------------------
   548                           OneWire_ClearCRC16:
   549                          _OneWire_ClearCRC16:
   550                              RAM_PROLOGUE RAM_USE_CLASS_4
   551                              RAM_SETPAGE_CUR >OneWire_wCRC16Value
   552                              
   553                              mov   [OneWire_wCRC16Value+0],00h
   554                              mov   [OneWire_wCRC16Value+1],00h
   555                                  
   556                              RAM_EPILOGUE RAM_USE_CLASS_4
   557                              ret
   558                          .ENDSECTION
   559                          
   560                          .SECTION
   561                          ;-----------------------------------------------------------------------------
   562                          ;  FUNCTION NAME: OneWire_wCRC16
   563                          ;
   564                          ;  DESCRIPTION:
   565                          ;     CRC-16 for One Wire
   566                          ;-----------------------------------------------------------------------------
   567                          ;  ARGUMENTS:
   568                          ;     A contains the byte to CRC.
   569                          ;
   570                          ;  RETURNS:
   571                          ;     A contains current CRC LO byte value.
   572                          ;     X contains current CRC HI byte value.
   573                          ;     This returns as an unsigned integer in C.
   574                          ;
   575                          ;  SIDE EFFECTS:
   576                          ;    The A and X registers may be modified by this or future implementations
   577                          ;    of this function.  The same is true for all RAM page pointer registers in
   578                          ;    the Large Memory Model.  When necessary, it is the calling function's
   579                          ;    responsibility to preserve their values across calls to fastcall16
   580                          ;    functions.  Currently only the page pointer registers listed below are modified:
   581                          ;     CUR_PP
   582                          ;
   583                          ;-----------------------------------------------------------------------------
   584                           OneWire_wCRC16:
   585                          _OneWire_wCRC16:
   586                              RAM_PROLOGUE RAM_USE_CLASS_4
   587                              RAM_SETPAGE_CUR >OneWire_wCRC16Value
   588                              
   589                              push  A                                      ; Save the bits to shift
   590                              mov   X,08h                                  ; Set up to shift one byte
   591                          .CRC16_loop:
   592                              xor   A,[OneWire_wCRC16Value+1]              ; Determine feedback
   593                              rrc   A                                      ; Move it into CF
   594                              jnc   .CRC16_FB_zero                         ; If feedback is 0, no XOR of the byte needed
   595                              xor   [OneWire_wCRC16Value+0],40h            ; XOR the CRC HI byte
   596                              xor   [OneWire_wCRC16Value+1],02h            ; XOR the CRC LO byte
   597                          .CRC16_FB_zero:
   598                              rrc   [OneWire_wCRC16Value+0]                ; Rotate CF into the CRC HI byte
   599                              rrc   [OneWire_wCRC16Value+1]                ; Rotate CF into the CRC LO byte
   600                              pop   A                                      ; Restore the remaining bits
   601                              rrc   A                                      ; Rotate for the next bit
   602                              push  A                                      ; Save the remaining bits
   603                              dec   X
   604                              jnz   .CRC16_loop                            ; Loop until whole input byte is shifted
   605                              pop   A                                      ; Clean up stack
   606                              mov   X,[OneWire_wCRC16Value+0]              ; Load computed CRC HI byte into X
   607                              mov   A,[OneWire_wCRC16Value+1]              ; Load computed CRC LO byte into A
   608                          
   609                              RAM_EPILOGUE RAM_USE_CLASS_4
   610                              ret
   611                          .ENDSECTION
   612                          ENDIF
   613                          
   614                          IF (OneWire_SEARCH_ENABLE)
   615                          .SECTION
   616                          ;-----------------------------------------------------------------------------
   617                          ;  FUNCTION NAME: OneWire_GetROM
   618                          ;
   619                          ;  DESCRIPTION:
   620                          ;     Takes the RAM defined for holding a 64-bit 1-Wire ROM number and
   621                          ;     passes it via a pointer in A and X.
   622                          ;-----------------------------------------------------------------------------
   623                          ;
   624                          ;  ARGUMENTS:
   625                          ;     A:X - contains pointer
   626                          ;       X - contains LSB of the pointer to the RAM buffer
   627                          ;       A - contains MSB or page of the pointer to the RAM buffer
   628                          ;
   629                          ;  RAM BUFFER CONTENTS:
   630                          ;     OneWire_ROM = ROM number of 1-Wire device
   631                          ;
   632                          ;  RETURNS:
   633                          ;     none.
   634                          ;
   635                          ;  SIDE EFFECTS:
   636                          ;    The A and X registers may be modified by this or future implementations
   637                          ;    of this function.  The same is true for all RAM page pointer registers in
   638                          ;    the Large Memory Model.  When necessary, it is the calling function's
   639                          ;    responsibility to perserve their values across calls to fastcall16
   640                          ;    functions.  Currently only the page pointer registers listed below are modified:
   641                          ;     CUR_PP
   642                          ;     IDX_PP
   643                          ;-----------------------------------------------------------------------------
   644  3E71                     OneWire_GetROM:
   645  3E71                    _OneWire_GetROM:
   646                              RAM_PROLOGUE RAM_USE_CLASS_4
   647                              RAM_PROLOGUE RAM_USE_CLASS_3
   648  3E71  60 D3                 RAM_SETPAGE_IDX A
   649  3E73  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   650                              
   651  3E76  51 99                 mov    A,[OneWire_ROM+0]
   652  3E78  54 00                 mov    [X+0],A
   653  3E7A  51 9A                 mov    A,[OneWire_ROM+1]
   654  3E7C  54 01                 mov    [X+1],A
   655  3E7E  51 9B                 mov    A,[OneWire_ROM+2]
   656  3E80  54 02                 mov    [X+2],A
   657  3E82  51 9C                 mov    A,[OneWire_ROM+3]
   658  3E84  54 03                 mov    [X+3],A
   659  3E86  51 9D                 mov    A,[OneWire_ROM+4]
   660  3E88  54 04                 mov    [X+4],A
   661  3E8A  51 9E                 mov    A,[OneWire_ROM+5]
   662  3E8C  54 05                 mov    [X+5],A
   663  3E8E  51 9F                 mov    A,[OneWire_ROM+6]
   664  3E90  54 06                 mov    [X+6],A
   665  3E92  51 A0                 mov    A,[OneWire_ROM+7]
   666  3E94  54 07                 mov    [X+7],A
   667                              
   668  3E96  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   669                              RAM_EPILOGUE RAM_USE_CLASS_4
   670  3E9A  7F                    ret
   671                          .ENDSECTION
   672                          
   673                          
   674                          .SECTION
   675                          ;-----------------------------------------------------------------------------
   676                          ;  FUNCTION NAME: OneWire_SetROM
   677                          ;
   678                          ;  DESCRIPTION:
   679                          ;     Takes the array passed via a pointer in A and X and puts it
   680                          ;     into the RAM defined for holding a 64-bit 1-Wire ROM number.
   681                          ;-----------------------------------------------------------------------------
   682                          ;  ARGUMENTS:
   683                          ;     A:X - contains pointer
   684                          ;       X - contains LSB of the pointer to the RAM buffer
   685                          ;       A - contains MSB or page of the pointer to the RAM buffer
   686                          ;
   687                          ;  RAM BUFFER CONTENTS:
   688                          ;     OneWire_ROM = ROM number of 1-Wire device
   689                          ;
   690                          ;  RETURNS:
   691                          ;     none.
   692                          ;
   693                          ;  SIDE EFFECTS:
   694                          ;    The A and X registers may be modified by this or future implementations
   695                          ;    of this function.  The same is true for all RAM page pointer registers in
   696                          ;    the Large Memory Model.  When necessary, it is the calling function's
   697                          ;    responsibility to preserve their values across calls to fastcall16
   698                          ;    functions.  Currently only the page pointer registers listed below are modified:
   699                          ;     CUR_PP
   700                          ;     IDX_PP
   701                          ;-----------------------------------------------------------------------------
   702  3E9B                     OneWire_SetROM:
   703  3E9B                    _OneWire_SetROM:
   704                              RAM_PROLOGUE RAM_USE_CLASS_4
   705                              RAM_PROLOGUE RAM_USE_CLASS_3
   706  3E9B  60 D3                 RAM_SETPAGE_IDX A
   707  3E9D  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   708                              
   709  3EA0  52 00                 mov    A,[X+0]
   710  3EA2  53 99                 mov    [OneWire_ROM+0], A
   711  3EA4  52 01                 mov    A,[X+1]
   712  3EA6  53 9A                 mov    [OneWire_ROM+1], A
   713  3EA8  52 02                 mov    A,[X+2]
   714  3EAA  53 9B                 mov    [OneWire_ROM+2], A
   715  3EAC  52 03                 mov    A,[X+3]
   716  3EAE  53 9C                 mov    [OneWire_ROM+3], A
   717  3EB0  52 04                 mov    A,[X+4]
   718  3EB2  53 9D                 mov    [OneWire_ROM+4], A
   719  3EB4  52 05                 mov    A,[X+5]
   720  3EB6  53 9E                 mov    [OneWire_ROM+5], A
   721  3EB8  52 06                 mov    A,[X+6]
   722  3EBA  53 9F                 mov    [OneWire_ROM+6], A
   723  3EBC  52 07                 mov    A,[X+7]
   724  3EBE  53 A0                 mov    [OneWire_ROM+7], A
   725                              
   726  3EC0  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   727                              RAM_EPILOGUE RAM_USE_CLASS_4
   728  3EC4  7F                    ret
   729                          .ENDSECTION
   730                          
   731                          .SECTION
   732                          ;-----------------------------------------------------------------------------
   733                          ;  FUNCTION NAME: OneWire_fFindFirst
   734                          ;
   735                          ;  DESCRIPTION:
   736                          ;     Find the first device on the 1-Wire bus.
   737                          ;-----------------------------------------------------------------------------
   738                          ;  ARGUMENTS:
   739                          ;     none.
   740                          ;
   741                          ;  RAM BUFFER CONTENTS:
   742                          ;     OneWire_ROM = ROM number of 1-Wire device
   743                          ;
   744                          ;  RETURNS:
   745                          ;     A = 01h if device found
   746                          ;     A = 00h if device not found
   747                          ;
   748                          ;  SIDE EFFECTS:
   749                          ;    The A and X registers may be modified by this or future implementations
   750                          ;    of this function.  The same is true for all RAM page pointer registers in
   751                          ;    the Large Memory Model.  When necessary, it is the calling function's
   752                          ;    responsibility to preserve their values across calls to fastcall16
   753                          ;    functions.  Currently only the page pointer registers listed below are modified:
   754                          ;    CUR_PP
   755                          ;    IDX_PP
   756                          ;-----------------------------------------------------------------------------
   757  3EC5                     OneWire_fFindFirst:
   758  3EC5                    _OneWire_fFindFirst:
   759                              RAM_PROLOGUE RAM_USE_CLASS_4
   760                              
   761  3EC5  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   762  3EC8  55 A1  00             mov   [OneWire_LastDiscrepancy], 00h
   763  3ECB  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   764  3ECE  55 A3  00             mov   [OneWire_LastDeviceFlag], 00h
   765  3ED1  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   766  3ED4  55 A2  00             mov   [OneWire_LastFamilyDiscrepancy], 00h
   767  3ED7  9004                  call  OneWire_Search
   768                          
   769                              RAM_EPILOGUE RAM_USE_CLASS_4
   770  3ED9  7F                    ret
   771                          .ENDSECTION
   772                          
   773                          .SECTION
   774                          ;-----------------------------------------------------------------------------
   775                          ;  FUNCTION NAME: OneWire_fFindNext
   776                          ;
   777                          ;  DESCRIPTION:
   778                          ;     Find the first device on the 1-Wire bus.
   779                          ;-----------------------------------------------------------------------------
   780                          ;
   781                          ;  ARGUMENTS:
   782                          ;     none.
   783                          ;
   784                          ;  RAM BUFFER CONTENTS:
   785                          ;     OneWire_ROM = ROM number of 1-Wire device
   786                          ;
   787                          ;  RETURNS:
   788                          ;     A = 01h if device found
   789                          ;     A = 00h if device not found, end of search
   790                          ;
   791                          ;  SIDE EFFECTS:
   792                          ;    The A and X registers may be modified by this or future implementations
   793                          ;    of this function.  The same is true for all RAM page pointer registers in
   794                          ;    the Large Memory Model.  When necessary, it is the calling function's
   795                          ;    responsibility to preserve their values across calls to fastcall16
   796                          ;    functions.  Currently only the page pointer registers listed below are modified:
   797                          ;    CUR_PP
   798                          ;    IDX_PP
   799                          ;-----------------------------------------------------------------------------
   800  3EDA                     OneWire_fFindNext:
   801  3EDA                    _OneWire_fFindNext:
   802                              RAM_PROLOGUE RAM_USE_CLASS_4
   803                              
   804  3EDA  9001                  call  OneWire_Search
   805                              
   806                              RAM_EPILOGUE RAM_USE_CLASS_4
   807  3EDC  7F                    ret
   808                          .ENDSECTION
   809                          
   810                          .SECTION
   811                          ;-----------------------------------------------------------------------------
   812                          ;  FUNCTION NAME: OneWire_Search
   813                          ;
   814                          ;  DESCRIPTION:
   815                          ;     Perform the 1-Wire search algorithm with the current search state.
   816                          ;-----------------------------------------------------------------------------
   817                          ;  ARGUMENTS:
   818                          ;     none.
   819                          ;
   820                          ;  RAM BUFFER CONTENTS:
   821                          ;     OneWire_ROM = ROM number of 1-Wire device
   822                          ;
   823                          ;  RETURNS:
   824                          ;     A = 01h if device found
   825                          ;     A = 00h if device not found, end of search
   826                          ;
   827                          ;  SIDE EFFECTS:
   828                          ;    The A and X registers may be modified by this or future implementations
   829                          ;    of this function.  The same is true for all RAM page pointer registers in
   830                          ;    the Large Memory Model.  When necessary, it is the calling function's
   831                          ;    responsibility to perserve their values across calls to fastcall16
   832                          ;    functions. Currently only the page pointer registers listed below are modified:
   833                          ;    CUR_PP
   834                          ;    IDX_PP
   835                          ;-----------------------------------------------------------------------------
   836  0000                    ID_BIT_NUMBER:              equ   0
   837  0001                    LAST_ZERO:                  equ   1
   838  0002                    ROM_BYTE_NUMBER:            equ   2
   839  0003                    SEARCH_RESULT:              equ   3
   840  0004                    ID_BIT:                     equ   4
   841  0005                    CMP_ID_BIT:                 equ   5
   842  0006                    ROM_BYTE_MASK:              equ   6
   843  0007                    SEARCH_DIRECTION:           equ   7
   844                          
   845  3EDD                     OneWire_Search:
   846  3EDD                    _OneWire_Search:
   847                              RAM_PROLOGUE RAM_USE_CLASS_4
   848                              RAM_PROLOGUE RAM_USE_CLASS_3
   849                              
   850  3EDD  4F                    mov   X,SP                                   ; Get location of stack
   851  3EDE  38 08                 add   SP,08h                                 ; Make locations for local variables
   852  3EE0  62 D3 07              RAM_SETPAGE_IDX2STK
   853  3EE3  56 00 01              mov   [X+ID_BIT_NUMBER],01h                  ; Initialize for search
   854  3EE6  56 01 00              mov   [X+LAST_ZERO],00h
   855  3EE9  56 02 00              mov   [X+ROM_BYTE_NUMBER],00h
   856  3EEC  56 06 01              mov   [X+ROM_BYTE_MASK],01h
   857  3EEF  56 03 00              mov   [X+SEARCH_RESULT],00h
   858  3EF2  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   859  3EF5  55 98  00             mov   [OneWire_bCRC8Value],00h
   860  3EF8  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   861  3EFB  51 A3                 mov   A,[OneWire_LastDeviceFlag]
   862  3EFD  B0D4                  jnz   .check_result
   863  3EFF  9EEA                  call  OneWire_fReset
   864  3F01  A0DF                  jz    .search_return_false
   865                          
   866  3F03  50 F0                 mov   A,F0h                                  ; Search command
   867  3F05  10                    push  X
   868  3F06  9F19                  call  OneWire_WriteByte
   869  3F08  20                    pop   X
   870  3F09                    .search_loop:
   871  3F09  9F05                  call  OneWire_bReadBit
   872  3F0B  54 04                 mov   [X+ID_BIT],A
   873  3F0D  9F01                  call  OneWire_bReadBit
   874  3F0F  54 05                 mov   [X+CMP_ID_BIT],A
   875  3F11  21 01                 and   A,01h
   876  3F13  23 04                 and   A,[X+ID_BIT]
   877  3F15  B09D                  jnz   .check_search
   878                          
   879  3F17                    .search_else_1:
   880  3F17  52 04                 mov   A,[X+ID_BIT]                           ; If ID_BIT != CMP_ID_BIT
   881  3F19  3B 05                 cmp   A,[X+CMP_ID_BIT]
   882  3F1B  A007                  jz    .search_else_2
   883  3F1D  52 04                 mov   A,[X+ID_BIT]
   884  3F1F  54 07                 mov   [X+SEARCH_DIRECTION],A
   885  3F21  8048                  jmp   .search_set_or_clear
   886  3F23                    .search_else_2:
   887  3F23  52 00                 mov   A,[X+ID_BIT_NUMBER]
   888  3F25  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   889  3F28  3A A1                 cmp   A,[OneWire_LastDiscrepancy]
   890  3F2A  D01B                  jnc   .search_else_3
   891  3F2C  10                    push  X
   892  3F2D  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   893  3F2F  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   894  3F32  52 99                 mov   A,[X+OneWire_ROM]
   895  3F34  62 D3 07              RAM_SETPAGE_IDX2STK
   896  3F37  20                    pop   X
   897  3F38  23 06                 and   A,[X+ROM_BYTE_MASK]
   898  3F3A  B006                  jnz   .search_dir_1
   899  3F3C  56 07 00              mov   [X+SEARCH_DIRECTION],00h
   900  3F3F  8017                  jmp   .search_is_dir_0
   901  3F41                    .search_dir_1:
   902  3F41  56 07 01              mov   [X+SEARCH_DIRECTION],01h
   903  3F44  8012                  jmp   .search_is_dir_0
   904  3F46                    .search_else_3:
   905  3F46  52 00                 mov   A,[X+ID_BIT_NUMBER]
   906  3F48  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   907  3F4B  3A A1                 cmp   A,[OneWire_LastDiscrepancy]            ;SEARCH_DIRECTION = (ID_BIT_NUMBER == LastDiscrepan
                                cy search_direction)
   908  3F4D  B006                  jnz   .search_dir_1_2
   909  3F4F  56 07 01              mov   [X+SEARCH_DIRECTION],01h
   910  3F52  8004                  jmp   .search_is_dir_0
   911  3F54                    .search_dir_1_2:
   912  3F54  56 07 00              mov   [X+SEARCH_DIRECTION],00h
   913  3F57                    .search_is_dir_0:
   914  3F57  52 07                 mov   A,[X+SEARCH_DIRECTION]
   915  3F59  B010                  jnz   .search_set_or_clear
   916  3F5B  52 00                 mov   A,[X+ID_BIT_NUMBER]
   917  3F5D  54 01                 mov   [X+LAST_ZERO],A
   918  3F5F  39 09                 cmp   A,09h
   919  3F61  D008                  jnc   .search_set_or_clear
   920  3F63  52 01                 mov   A,[X+LAST_ZERO]
   921  3F65  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   922  3F68  53 A2                 mov   [OneWire_LastFamilyDiscrepancy],A
   923  3F6A                    .search_set_or_clear:
   924  3F6A  3D 07 01              cmp   [X+SEARCH_DIRECTION],01h
   925  3F6D  B011                  jnz   .search_else_4
   926  3F6F  52 06                 mov   A,[X+ROM_BYTE_MASK]
   927  3F71  10                    push  X
   928  3F72  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   929  3F74  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   930  3F77  2D 99                 or    [X+OneWire_ROM],A
   931  3F79  62 D3 07              RAM_SETPAGE_IDX2STK
   932  3F7C  20                    pop   X
   933  3F7D  8010                  jmp   .search_write_direction
   934  3F7F                    .search_else_4:
   935  3F7F  52 06                 mov   A,[X+ROM_BYTE_MASK]
   936  3F81  10                    push  X
   937  3F82  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   938  3F84  73                    cpl   A
   939  3F85  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   940  3F88  25 99                 and   [X+OneWire_ROM],A
   941  3F8A  62 D3 07              RAM_SETPAGE_IDX2STK
   942  3F8D  20                    pop   X
   943  3F8E                    .search_write_direction:
   944  3F8E  52 07                 mov   A,[X+SEARCH_DIRECTION]
   945  3F90  9E72                  call  OneWire_WriteBit
   946  3F92  77 00                 inc   [X+ID_BIT_NUMBER]
   947  3F94  66 06                 asl   [X+ROM_BYTE_MASK]
   948  3F96  3D 06 00              cmp   [X+ROM_BYTE_MASK],00h
   949  3F99  B014                  jnz   .check_if_loop
   950  3F9B  10                    push  X
   951  3F9C  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   952  3F9E  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   953  3FA1  52 99                 mov   A,[X+OneWire_ROM]
   954  3FA3  62 D3 07              RAM_SETPAGE_IDX2STK
   955  3FA6  9EAF                  call  OneWire_bCRC8
   956                              RAM_PROLOGUE RAM_USE_CLASS_4
   957  3FA8  20                    pop   X
   958  3FA9  77 02                 inc   [X+ROM_BYTE_NUMBER]
   959  3FAB  56 06 01              mov   [X+ROM_BYTE_MASK],01h
   960  3FAE                    .check_if_loop:
   961  3FAE  3D 02 08              cmp   [X+ROM_BYTE_NUMBER],08h
   962  3FB1  CF57                  jc    .search_loop
   963  3FB3                    .check_search:
   964  3FB3  3D 00 41              cmp   [X+ID_BIT_NUMBER],41h
   965  3FB6  C01B                  jc    .check_result
   966  3FB8  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   967  3FBB  3C 98  00             cmp   [OneWire_bCRC8Value],00h
   968  3FBE  B013                  jnz   .check_result
   969  3FC0  52 01                 mov   A,[X+LAST_ZERO]
   970  3FC2  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   971  3FC5  53 A1                 mov   [OneWire_LastDiscrepancy],A
   972  3FC7  B007                  jnz   .search_not_last
   973  3FC9  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   974  3FCC  55 A3  01             mov   [OneWire_LastDeviceFlag],01h
   975  3FCF                    .search_not_last:
   976  3FCF  56 03 01              mov   [X+SEARCH_RESULT],01h
   977                          ; If no device found then reset counter so next search will be like a first
   978  3FD2                    .check_result:
   979  3FD2  52 03                 mov   A,[X+SEARCH_RESULT]
   980  3FD4  A00C                  jz    .search_return_false
   981  3FD6  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   982  3FD9  51 99                 mov   A,[OneWire_ROM+0]
   983  3FDB  A005                  jz    .search_return_false
   984  3FDD                    .search_return_true:
   985  3FDD  50 01                 mov   A,01h
   986  3FDF  8015                  jmp   .search_clean_up
   987  3FE1                    .search_return_false:
   988  3FE1  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   989  3FE4  55 A1  00             mov   [OneWire_LastDiscrepancy],00h
   990  3FE7  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   991  3FEA  55 A3  00             mov   [OneWire_LastDeviceFlag],00h
   992  3FED  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   993  3FF0  55 A2  00             mov   [OneWire_LastFamilyDiscrepancy],00h
   994  3FF3  50 00                 mov   A,00h
   995  3FF5                    .search_clean_up:
   996  3FF5  38 F8                 add   SP,-08h                                ; Restore SP
   997                          
   998  3FF7  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   999                              RAM_EPILOGUE RAM_USE_CLASS_4
  1000  3FFB  7F                    ret
  1001                          .ENDSECTION
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: OneWire_fVerify
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Verify the device with the ROM number in OneWire_ROM is present.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;  ARGUMENTS:
  1011                          ;     none.
  1012                          ;
  1013                          ;  RAM BUFFER CONTENTS:
  1014                          ;     OneWire_ROM = ROM number of 1-Wire device
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     A = 01h if device found
  1018                          ;     A = 00h if device not found
  1019                          ;
  1020                          ;  SIDE EFFECTS:
  1021                          ;    The A and X registers may be modified by this or future implementations
  1022                          ;    of this function.  The same is true for all RAM page pointer registers in
  1023                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1024                          ;    responsibility to perserve their values across calls to fastcall16
  1025                          ;    functions. Currently only the page pointer registers listed below are modified:
  1026                          ;    CUR_PP, IDX_PP
  1027                          ;-----------------------------------------------------------------------------
  1028  0000                    ROM_BACKUP:                 equ   0
  1029  0008                    LD_BACKUP:                  equ   8
  1030  0009                    LDF_BACKUP:                 equ   9
  1031  000A                    LFD_BACKUP:                 equ   0x0A
  1032                          
  1033  3FFC                     OneWire_fVerify:
  1034  3FFC                    _OneWire_fVerify:
  1035                              RAM_PROLOGUE RAM_USE_CLASS_4
  1036                              RAM_PROLOGUE RAM_USE_CLASS_3
  1037                              
  1038  3FFC  4F                    mov   X, SP                                  ; Get location of stack
  1039  3FFD  38 0B                 add   SP, 0Bh                                ; Make locations for local variables
  1040                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
  1041  3FFF  5D D1                 mov   A, reg[STK_PP]                         ; Set A to right page to back up ROM to stack
  1042                          ELSE
  1043                              mov   A, 00h
  1044                          ENDIF
  1045  4001  9E6E                  call  OneWire_GetROM
  1046                              RAM_PROLOGUE RAM_USE_CLASS_4
  1047                              RAM_PROLOGUE RAM_USE_CLASS_3
  1048  4003  62 D3 07              RAM_SETPAGE_IDX2STK
  1049  4006  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1050  4009  51 A1                 mov   A,[OneWire_LastDiscrepancy]
  1051  400B  54 08                 mov   [X+LD_BACKUP],A
  1052  400D  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1053  4010  51 A3                 mov   A,[OneWire_LastDeviceFlag]
  1054  4012  54 09                 mov   [X+LDF_BACKUP],A
  1055  4014  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1056  4017  51 A2                 mov   A,[OneWire_LastFamilyDiscrepancy]
  1057  4019  54 0A                 mov   [X+LFD_BACKUP],A
  1058  401B  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1059  401E  55 A1  40             mov   [OneWire_LastDiscrepancy],40h
  1060  4021  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1061  4024  55 A3  00             mov   [OneWire_LastDeviceFlag],00h
  1062  4027  10                    push  X                                      ; Search does not preserve X
  1063  4028  9EB3                  call  OneWire_Search
  1064  402A  20                    pop   X
  1065  402B  08                    push  A                                      ; Save result
  1066  402C  70 BF                 RAM_X_POINTS_TO_INDEXPAGE
  1067  402E  A03B                  jz    .Verify_End
  1068  4030  62 D3 07              RAM_SETPAGE_IDX2STK
  1069  4033  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
  1070  4036  51 99                 mov   A,[OneWire_ROM+0]
  1071  4038  3B 00                 cmp   A,[X+ROM_BACKUP]
  1072  403A  B02B                  jnz   .Verify_Fail
  1073  403C  51 9A                 mov   A,[OneWire_ROM+1]
  1074  403E  3B 01                 cmp   A,[X+ROM_BACKUP+1]
  1075  4040  B025                  jnz   .Verify_Fail
  1076  4042  51 9B                 mov   A,[OneWire_ROM+2]
  1077  4044  3B 02                 cmp   A,[X+ROM_BACKUP+2]
  1078  4046  B01F                  jnz   .Verify_Fail
  1079  4048  51 9C                 mov   A,[OneWire_ROM+3]
  1080  404A  3B 03                 cmp   A,[X+ROM_BACKUP+3]
  1081  404C  B019                  jnz   .Verify_Fail
  1082  404E  51 9D                 mov   A,[OneWire_ROM+4]
  1083  4050  3B 04                 cmp   A,[X+ROM_BACKUP+4]
  1084  4052  B013                  jnz   .Verify_Fail
  1085  4054  51 9E                 mov   A,[OneWire_ROM+5]
  1086  4056  3B 05                 cmp   A,[X+ROM_BACKUP+5]
  1087  4058  B00D                  jnz   .Verify_Fail
  1088  405A  51 9F                 mov   A,[OneWire_ROM+6]
  1089  405C  3B 06                 cmp   A,[X+ROM_BACKUP+6]
  1090  405E  B007                  jnz   .Verify_Fail
  1091  4060  51 A0                 mov   A,[OneWire_ROM+7]
  1092  4062  3B 07                 cmp   A,[X+ROM_BACKUP+7]
  1093  4064  A005                  jz    .Verify_End
  1094  4066                    .Verify_Fail:
  1095  4066  18                    pop   A                                      ; Replace result
  1096  4067  50 00                 mov   A,00h
  1097  4069  08                    push  A
  1098  406A                    .Verify_End:
  1099                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
  1100  406A  5D D1                 mov   A, reg[STK_PP]                         ; Set A to right page to recover ROM from stack
  1101                          ELSE
  1102                              mov   A, 00h
  1103                          ENDIF
  1104  406C  9E2D                  call  OneWire_SetROM
  1105  406E  70 BF                 RAM_X_POINTS_TO_INDEXPAGE
  1106  4070  62 D3 07              RAM_SETPAGE_IDX2STK
  1107  4073  52 08                 mov   A, [X+LD_BACKUP]
  1108  4075  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1109  4078  53 A1                 mov   [OneWire_LastDiscrepancy], A
  1110  407A  52 09                 mov   A, [X+LDF_BACKUP]
  1111  407C  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1112  407F  53 A3                 mov   [OneWire_LastDeviceFlag], A
  1113  4081  52 0A                 mov   A, [X+LFD_BACKUP]
  1114  4083  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1115  4086  53 A2                 mov   [OneWire_LastFamilyDiscrepancy], A
  1116  4088  18                    pop   A                                      ; Restore result
  1117  4089  38 F5                 add   SP, -0Bh                               ; Restore SP
  1118                          
  1119  408B  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
  1120                              RAM_EPILOGUE RAM_USE_CLASS_4
  1121  408F  7F                    ret
  1122                          .ENDSECTION
  1123                          
  1124                          .SECTION
  1125                          ;-----------------------------------------------------------------------------
  1126                          ;  FUNCTION NAME: OneWire_FamilyTargetSetup
  1127                          ;
  1128                          ;  DESCRIPTION:
  1129                          ;     Setup the search to find the device type family code on the next call
  1130                          ;     to OneWire_Next().
  1131                          ;-----------------------------------------------------------------------------
  1132                          ;  ARGUMENTS:
  1133                          ;     A contains family code.
  1134                          ;
  1135                          ;  RAM BUFFER CONTENTS:
  1136                          ;     OneWire_ROM = ROM number of 1-Wire device
  1137                          ;
  1138                          ;  RETURNS:
  1139                          ;     none.
  1140                          ;
  1141                          ;  SIDE EFFECTS:
  1142                          ;    The A and X registers may be modified by this or future implementations
  1143                          ;    of this function.  The same is true for all RAM page pointer registers in
  1144                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1145                          ;    responsibility to preserve their values across calls to fastcall16
  1146                          ;    functions.  Currently only the page pointer registers listed below are modified:
  1147                          ;    CUR_PP
  1148                          ;    IDX_PP
  1149                          ;-----------------------------------------------------------------------------
  1150  4090                     OneWire_FamilyTargetSetup:
  1151  4090                    _OneWire_FamilyTargetSetup:
  1152                              RAM_PROLOGUE RAM_USE_CLASS_4
  1153                              RAM_PROLOGUE RAM_USE_CLASS_3
  1154  4090  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
  1155  4093  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
  1156                              
  1157  4096  53 99                 mov   [OneWire_ROM+0], A
  1158  4098  10                    push  X
  1159  4099  57 07                 mov   X, 07h
  1160  409B                    .loop:
  1161  409B  56 99  00             mov   [X+OneWire_ROM], 00h
  1162  409E  79                    dec   X
  1163  409F  BFFB                  jnz   .loop
  1164  40A1  20                    pop   X
  1165  40A2  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1166  40A5  55 A1  40             mov   [OneWire_LastDiscrepancy], 40h
  1167  40A8  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1168  40AB  55 A2  00             mov   [OneWire_LastFamilyDiscrepancy], 00h
  1169  40AE  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1170  40B1  55 A3  00             mov   [OneWire_LastDeviceFlag], 00h
  1171                              
  1172  40B4  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
  1173                              RAM_EPILOGUE RAM_USE_CLASS_4
  1174  40B8  7F                    ret
  1175                          .ENDSECTION
  1176                          
  1177                          .SECTION
  1178                          ;-----------------------------------------------------------------------------
  1179                          ;  FUNCTION NAME: OneWire_FamilySkipSetup
  1180                          ;
  1181                          ;  DESCRIPTION:
  1182                          ;     Setup the search to skip the current device type on the next call
  1183                          ;     to OneWire_fFindNext().
  1184                          ;-----------------------------------------------------------------------------
  1185                          ;  ARGUMENTS:
  1186                          ;     None.
  1187                          ;
  1188                          ;  RAM BUFFER CONTENTS:
  1189                          ;     OneWire_ROM = ROM number of 1-Wire device
  1190                          ;
  1191                          ;  RETURNS:
  1192                          ;     none.
  1193                          ;
  1194                          ;  SIDE EFFECTS:
  1195                          ;    The A and X registers may be modified by this or future implementations
  1196                          ;    of this function.  The same is true for all RAM page pointer registers in
  1197                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1198                          ;    responsibility to preserve their values across calls to fastcall16
  1199                          ;    functions.  Currently only the page pointer registers listed below are modified:
  1200                          ;     CUR_PP
  1201                          ;-----------------------------------------------------------------------------
  1202  40B9                     OneWire_FamilySkipSetup:
  1203  40B9                    _OneWire_FamilySkipSetup:
  1204                              RAM_PROLOGUE RAM_USE_CLASS_4
  1205                              
  1206  40B9  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1207  40BC  51 A2                 mov   A,[OneWire_LastFamilyDiscrepancy]
  1208  40BE  55 A2  00             mov   [OneWire_LastFamilyDiscrepancy],00h
  1209  40C1  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1210  40C4  53 A1                 mov   [OneWire_LastDiscrepancy],A
  1211  40C6  B007                  jnz   .EndOfList
  1212  40C8  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1213  40CB  55 A3  01             mov   [OneWire_LastDeviceFlag],01h
  1214  40CE                    .EndOfList:
  1215                          
  1216                              RAM_EPILOGUE RAM_USE_CLASS_4
  1217  40CE  7F                    ret
  1218                          .ENDSECTION
  1219                          ENDIF
  1220                          
  1221                          .SECTION
  1222                          ;-----------------------------------------------------------------------------
  1223                          ;  FUNCTION NAME: OneWire_SendTxDataWait
  1224                          ;
  1225                          ;  DESCRIPTION:
  1226                          ;     Initiates an XCVR data transfer and waits for it to complete.
  1227                          ;
  1228                          ;-----------------------------------------------------------------------------
  1229                          ;  ARGUMENTS:
  1230                          ;     BYTE  bTxData - data to transmit.
  1231                          ;        Passed in Accumulator.
  1232                          ;
  1233                          ;  RETURNS:
  1234                          ;     none.
  1235                          ;
  1236                          ;  SIDE EFFECTS:
  1237                          ;    The A and X registers may be modified by this or future implementations
  1238                          ;    of this function.  The same is true for all RAM page pointer registers in
  1239                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1240                          ;    responsibility to preserve their values across calls to fastcall16
  1241                          ;    functions.
  1242                          ;
  1243                          ;  THEORY of OPERATION:
  1244                          ;     Writes data to the TX buffer register.
  1245                          ;-----------------------------------------------------------------------------
  1246  40CF                     OneWire_SendTxDataWait:
  1247  40CF                    _OneWire_SendTxDataWait:
  1248                              RAM_PROLOGUE RAM_USE_CLASS_1
  1249                          
  1250  40CF  60 59                 mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
  1251  40D1                    .WaitForTxComplete:
  1252  40D1  5D 5B                 mov    A,  reg[OneWire_XCVR_CONTROL_REG]
  1253  40D3  21 20                 and    A, SPIM_SPI_COMPLETE
  1254  40D5  AFFB                  jz     .WaitForTxComplete
  1255                          
  1256                              RAM_EPILOGUE RAM_USE_CLASS_1
  1257  40D7  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:17 2009
   OneWire_XCVR_RX_BUFFER_REG 005A              SPIM_SPI_COMPLETE 0020                    ONE_PATTERN 00FD  
                 RESET_PERIOD 00F9                  RESET_PATTERN 00F1      OneWire_BITCLK_PERIOD_REG 0055  
              _OneWire_GetROM 3E71             _OneWire_WriteByte 3E21                _OneWire_SetROM 3E9B  
              _OneWire_Search 3EDD                  ID_BIT_NUMBER 0000                _OneWire_fReset 3DEB  
                     MAC0_CL0 00EE                       MAC0_CL1 00EF                       MAC1_CL0 00AE  
                     MAC1_CL1 00AF                          MAC_X 00EC         OneWire_SendTxDataWait 40CF  
                        MAC_Y 00ED                     ROM_BACKUP 0000          CONTROL_REG_START_BIT 0001  
                 ZERO_PATTERN 0001        OneWire_FamilySkipSetup 40B9                  SEARCH_RESULT 0003  
                     INT_CLR2 00DC                       INT_MSK1 00E1        _OneWire_SendTxDataWait 40CF  
             _OneWire_fVerify 3FFC                         MAC0_X 00EC                         MAC0_Y 00ED  
                       MAC1_X 00AC                         MAC1_Y 00AD                         HITECH 0002  
                       ID_BIT 0004                FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080  
                       IDX_PP 00D3                         CUR_PP 00D0            OneWire_BIT_INT_REG 00DF  
                       STK_PP 00D1            _OneWire_bCRC8Value 0098                    SPIM_MODE_0 0000  
        OneWire_SEARCH_ENABLE 0001               OneWire_bReadBit 3E10               SEARCH_DIRECTION 0007  
                    LD_BACKUP 0008                      LAST_ZERO 0001        OneWire_PARASITE_ENABLE 0000  
     _OneWire_FamilySkipSetup 40B9               OneWire_WriteBit 3E04                   OneWire_Stop 3DE4  
     OneWire_OVERDRIVE_ENABLE 0000              _OneWire_bReadBit 3E10              OneWire_ClearCRC8 3E50  
                ROM_BYTE_MASK 0006      SYSTEM_LARGE_MEMORY_MODEL 0001     OneWire_XCVR_TX_BUFFER_REG 0059  
               _OneWire_bCRC8 3E57         SYSTEM_MULTIPAGE_STACK 0000              _OneWire_WriteBit 3E04  
           OneWire_fFindFirst 3EC5                 _OneWire_Start 3DD3                        MAC_CL0 00EE  
                      MAC_CL1 00EF               FLAG_PGMODE_MASK 00C0                        PRT0DM1 0001  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008                     BIT_PERIOD 000D             _OneWire_ClearCRC8 3E50  
    OneWire_FamilyTargetSetup 4090                     CMP_ID_BIT 0005                    INIT_PERIOD 000F  
OneWire_LastFamilyDiscrepancy 00A2        OneWire_LastDiscrepancy 00A1                    OneWire_ROM 0099  
                   LDF_BACKUP 0009                OneWire_fVerify 3FFC                     LFD_BACKUP 000A  
               SPIM_LSB_FIRST 0080              OneWire_bReadByte 3E3C                  _OneWire_Stop 3DE4  
       OneWire_LastDeviceFlag 00A3              OneWire_fFindNext 3EDA                 OneWire_GetROM 3E71  
     OneWire_XCVR_CONTROL_REG 005B                 OneWire_SetROM 3E9B                 OneWire_Search 3EDD  
               OneWire_fReset 3DEB                  OneWire_bCRC8 3E57              SYSTEM_STACK_PAGE 0007  
            OneWire_WriteByte 3E21                  OneWire_Start 3DD3     SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
         OneWire_CRC16_ENABLE 0000                ROM_BYTE_NUMBER 0002            _OneWire_fFindFirst 3EC5  
           OneWire_bCRC8Value 0098             _OneWire_bReadByte 3E3C     SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           _OneWire_fFindNext 3EDA     _OneWire_FamilyTargetSetup 4090     OneWire_BITCLK_CONTROL_REG 0057  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:18 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.inc
     4                          ;;  Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the OneWire user module interface
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          
    13                          ;;*****************************************************************************
    14                          
    15                          ;--------------------------------
    16                          ;  Interrupt registers and masks
    17                          ;--------------------------------
    18  0040                    OneWire_BIT_INT_MASK:                   equ 0x40
    19  00DF                    OneWire_BIT_INT_REG:                    equ 0x0df
    20                          
    21                          IF (OneWire_BIT_INT_REG - INT_MSK1)
    22  00DC                    OneWire_BIT_INT_CLR:                    equ INT_CLR2
    23                          ELSE
    24                          OneWire_BIT_INT_CLR:                    equ INT_CLR1
    25                          ENDIF
    26                          
    27                          ;--------------------------------
    28                          ;  Parasite Power Pin selected
    29                          ;--------------------------------
    30  0001                    OneWire_OUT_PORT_DM1:                   equ PRT0DM1
    31  0001                    OneWire_OUT_PORT_MASK:                  equ 0x1
    32                          
    33                          ;---------------------------
    34                          ; One Wire constants and masks
    35                          ;---------------------------
    36  0000                    OneWire_CRC16_ENABLE:                   equ   0
    37  0001                    OneWire_SEARCH_ENABLE:                  equ   1
    38  0000                    OneWire_OVERDRIVE_ENABLE:               equ   0
    39  0000                    OneWire_PARASITE_ENABLE:                equ   0
    40                          
    41                          ;-----------------------------------------------
    42                          ;  Registers used by OneWire
    43                          ;-----------------------------------------------
    44  0054                    OneWire_BITCLK_FUNC_REG:    equ 54h              ;Function register
    45  0055                    OneWire_BITCLK_INPUT_REG:   equ 55h              ;Input register
    46  0056                    OneWire_BITCLK_OUTPUT_REG:  equ 56h              ;Output register
    47  0057                    OneWire_BITCLK_CONTROL_REG: equ 57h              ;Control register
    48  0054                    OneWire_BITCLK_COUNTER_REG: equ 54h              ;Counter register
    49  0055                    OneWire_BITCLK_PERIOD_REG:  equ 55h              ;Period register
    50  0056                    OneWire_BITCLK_COMPARE_REG: equ 56h              ;Compare register
    51  0058                    OneWire_XCVR_FUNC_REG:  equ 58h                  ;Function register
    52  0059                    OneWire_XCVR_INPUT_REG: equ 59h                  ;Input register
    53  005A                    OneWire_XCVR_OUTPUT_REG:    equ 5ah              ;Output register
    54  005B                    OneWire_XCVR_CONTROL_REG:   equ 5bh              ;Control register
    55  0058                    OneWire_XCVR_SHIFT_REG: equ 58h                  ;Counter register
    56  0059                    OneWire_XCVR_TX_BUFFER_REG: equ 59h              ;Period register
    57  005A                    OneWire_XCVR_RX_BUFFER_REG: equ 5ah              ;Compare register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWireINT.asm
     4                          ;;   Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: OneWire Interrupt Service Routine
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;
    10                          ;;-----------------------------------------------------------------------------
    11                          ;;   Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    12                          ;;*****************************************************************************
    13                          ;;*****************************************************************************
    14                          
    15                          include "m8c.inc"
    16                          include "OneWire.inc"
    17                          
    18                          
    19                          ;-----------------------------------------------
    20                          ;  Global Symbols
    21                          ;-----------------------------------------------
    22                          export  _OneWire_ISR
    23                          
    24                          AREA UserModules (ROM, REL)
    25                          
    26                          ;-----------------------------------------------------------------------------
    27                          ;  FUNCTION NAME: _OneWire_ISR
    28                          ;
    29                          ;  DESCRIPTION: With ParasitePower enabled this ISR sets TX pin to strong
    30                          ;               drive mode immediately after transmission of last data bit.
    31                          ;-----------------------------------------------------------------------------
    32                          
    33  40D8                    _OneWire_ISR:
    34                          IF (OneWire_PARASITE_ENABLE)
    35                              M8C_SetBank1
    36                              and   REG[OneWire_OUT_PORT_DM1],~OneWire_OUT_PORT_MASK
    37                              M8C_SetBank0
    38                          ENDIF
    39  40D8  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:18 2009
                  MAC0_CL0 00EE                    MAC0_CL1 00EF                    MAC1_CL0 00AE                    MAC1_CL1 00AF  
                     MAC_X 00EC                       MAC_Y 00ED                    INT_CLR2 00DC                    INT_MSK1 00E1  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
       OneWire_BIT_INT_REG 00DF     OneWire_PARASITE_ENABLE 0000                     MAC_CL0 00EE                     MAC_CL1 00EF  
                   PRT0DM1 0001                _OneWire_ISR 40D8  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:18 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       2 August 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C29566
    11                          ;
    12                          ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h		;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h		;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31  0000                    SLEEP_TIMER:			equ	0h		;Sleep Timer value
    32  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    33  0000                    SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
    34  0001                    SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
    35  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
    36  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    37  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    38  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    39  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    40  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    41  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    42  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    43                          
    44  0008                    POWER_SETTING:			equ	8h
    45  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    46  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    47  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    48  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    49  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    50  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    51  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    52  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    53  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    54  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    55                          
    56  0001                    COMM_RX_PRESENT:		equ	1		;1 = TRUE
    57  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    58                          
    59  0003                    CLOCK_DIV_VC1:			equ	3h	;VC1 clock divider
    60  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    61  0030                    CLOCK_DIV_VC1_JUST:		equ	30h	;VC1 clock divider justified
    62  0000                    CLOCK_DIV_VC2:			equ	0h	;VC2 clock divider
    63  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    64  0000                    CLOCK_DIV_VC2_JUST:		equ	0h	;VC2 clock divider justified
    65  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    66  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    67  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    68  0002                    CLOCK_DIV_VC3:			equ	2h	;VC3 clock divider
    69  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    70  0002                    CLOCK_DIV_VC3_JUST:		equ	2h	;VC3 clock divider justified
    71  0000                    ANALOG_BUFFER_PWR:		equ	0h	;Analog buffer power level
    72  0001                    ANALOG_BUFFER_PWR_MASK:	equ	1h	;Analog buffer power level mask
    73  0000                    ANALOG_BUFFER_PWR_JUST:	equ	0h	;Analog buffer power level justified
    74  0005                    ANALOG_POWER:			equ	5h	;Analog power control
    75  0007                    ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
    76  0005                    ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
    77  0000                    OP_AMP_BIAS:			equ	0h	;Op amp bias level
    78  0040                    OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
    79  0000                    OP_AMP_BIAS_JUST:		equ	0h	;Op amp bias level justified
    80  0000                    REF_MUX:				equ	0h	;Ref mux setting
    81  0038                    REF_MUX_MASK:			equ	38h	;Ref mux setting mask
    82  0000                    REF_MUX_JUST:			equ	0h	;Ref mux setting justified
    83  0000                    AGND_BYPASS:				equ	0h	;AGndBypass setting
    84  0040                    AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
    85  0000                    AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
    86  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    87  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    88  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    89  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    90  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    91  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    92                          ;
    93                          ; register initial values
    94                          ;
    95  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    96  0005                    PORT_0_GLOBAL_SELECT:	equ 5h	;Port 0 global select register (PRT0GS)
    97  0006                    PORT_0_DRIVE_0:			equ 6h	;Port 0 drive mode 0 register (PRT0DM0)
    98  00FB                    PORT_0_DRIVE_1:			equ fbh	;Port 0 drive mode 1 register (PRT0DM1)
    99  00F8                    PORT_0_DRIVE_2:			equ f8h	;Port 0 drive mode 2 register (PRT0DM2)
   100  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
   101  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
   102  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
   103  0044                    PORT_1_GLOBAL_SELECT:	equ 44h	;Port 1 global select register (PRT1GS)
   104  0040                    PORT_1_DRIVE_0:			equ 40h	;Port 1 drive mode 0 register (PRT1DM0)
   105  00BF                    PORT_1_DRIVE_1:			equ bfh	;Port 1 drive mode 1 register (PRT1DM1)
   106  00BB                    PORT_1_DRIVE_2:			equ bbh	;Port 1 drive mode 2 register (PRT1DM2)
   107  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
   108  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   109  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   110  0000                    PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
   111  0040                    PORT_2_DRIVE_0:			equ 40h	;Port 2 drive mode 0 register (PRT2DM0)
   112  00BF                    PORT_2_DRIVE_1:			equ bfh	;Port 2 drive mode 1 register (PRT2DM1)
   113  00FF                    PORT_2_DRIVE_2:			equ ffh	;Port 2 drive mode 2 register (PRT2DM2)
   114  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   115  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   116  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   117  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   118  0080                    PORT_3_DRIVE_0:			equ 80h	;Port 3 drive mode 0 register (PRT3DM0)
   119  007F                    PORT_3_DRIVE_1:			equ 7fh	;Port 3 drive mode 1 register (PRT3DM1)
   120  007F                    PORT_3_DRIVE_2:			equ 7fh	;Port 3 drive mode 2 register (PRT3DM2)
   121  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   122  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   123  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
   124  0000                    PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
   125  0005                    PORT_4_DRIVE_0:			equ 5h	;Port 4 drive mode 0 register (PRT4DM0)
   126  00FB                    PORT_4_DRIVE_1:			equ fbh	;Port 4 drive mode 1 register (PRT4DM1)
   127  00FF                    PORT_4_DRIVE_2:			equ ffh	;Port 4 drive mode 2 register (PRT4DM2)
   128  0000                    PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
   129  0000                    PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
   130  0000                    PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
   131  0000                    PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
   132  0000                    PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
   133  0000                    PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
   134  0000                    PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
   135  0000                    PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
   136  0000                    PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
   137  0000                    PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
   138  0000                    PORT_6_GLOBAL_SELECT:	equ 0h	;Port 6 global select register (PRT6GS)
   139  0000                    PORT_6_DRIVE_0:			equ 0h	;Port 6 drive mode 0 register (PRT6DM0)
   140  0000                    PORT_6_DRIVE_1:			equ 0h	;Port 6 drive mode 1 register (PRT6DM1)
   141  0000                    PORT_6_DRIVE_2:			equ 0h	;Port 6 drive mode 2 register (PRT6DM2)
   142  0000                    PORT_6_INTENABLE:		equ 0h	;Port 6 interrupt enable register (PRT6IE)
   143  0000                    PORT_6_INTCTRL_0:		equ 0h	;Port 6 interrupt control 0 register (PRT6IC0)
   144  0000                    PORT_6_INTCTRL_1:		equ 0h	;Port 6 interrupt control 1 register (PRT6IC1)
   145  0000                    PORT_7_GLOBAL_SELECT:	equ 0h	;Port 7 global select register (PRT7GS)
   146  0000                    PORT_7_DRIVE_0:			equ 0h	;Port 7 drive mode 0 register (PRT7DM0)
   147  0000                    PORT_7_DRIVE_1:			equ 0h	;Port 7 drive mode 1 register (PRT7DM1)
   148  0000                    PORT_7_DRIVE_2:			equ 0h	;Port 7 drive mode 2 register (PRT7DM2)
   149  0000                    PORT_7_INTENABLE:		equ 0h	;Port 7 interrupt enable register (PRT7IE)
   150  0000                    PORT_7_INTCTRL_0:		equ 0h	;Port 7 interrupt control 0 register (PRT7IC0)
   151  0000                    PORT_7_INTCTRL_1:		equ 0h	;Port 7 interrupt control 1 register (PRT7IC1)
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;==========================================================================
     4                          ;  PSoCConfig.asm
     5                          ;  @PSOC_VERSION
     6                          ;
     7                          ;  Version: 0.85
     8                          ;  Revised: June 22, 2004
     9                          ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;
    11                          ;  This file is generated by the Device Editor on Application Generation.
    12                          ;  It contains code which loads the configuration data table generated in
    13                          ;  the file PSoCConfigTBL.asm
    14                          ;
    15                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    16                          ;  Edits to this file will not be preserved.
    17                          ;==========================================================================
    18                          ;
    19                          include "m8c.inc"
    20                          include "memory.inc"
    21                          include "GlobalParams.inc"
    22                          
    23                          export LoadConfigInit
    24                          export _LoadConfigInit
    25                          export LoadConfig_sensor_gateway
    26                          export _LoadConfig_sensor_gateway
    27                          export Port_3_Data_SHADE
    28                          export _Port_3_Data_SHADE
    29                          
    30                          
    31                          export NO_SHADOW
    32                          export _NO_SHADOW
    33                          
    34  0010                    FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
    35  00FF                    END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
    36                          
    37                          AREA psoc_config(rom, rel)
    38                          
    39                          ;---------------------------------------------------------------------------
    40                          ; LoadConfigInit - Establish the start-up configuration (except for a few
    41                          ;                  parameters handled by boot code, like CPU speed). This
    42                          ;                  function can be called from user code, but typically it
    43                          ;                  is only called from boot.
    44                          ;
    45                          ;       INPUTS: None.
    46                          ;      RETURNS: Nothing.
    47                          ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
    48                          ;               In the large memory model currently only the page
    49                          ;               pointer registers listed below are modified.  This does
    50                          ;               not guarantee that in future implementations of this
    51                          ;               function other page pointer registers will not be
    52                          ;               modified.
    53                          ;          
    54                          ;               Page Pointer Registers Modified: 
    55                          ;               CUR_PP
    56                          ;
    57  03B1                    _LoadConfigInit:
    58  03B1                     LoadConfigInit:
    59                              RAM_PROLOGUE RAM_USE_CLASS_4
    60                              
    61  03B1  55 87  00         	mov		[Port_3_Data_SHADE], 0h
    62                          
    63  03B4  7C 0200           	lcall	LoadConfigTBL_sensor_gateway_Ordered
    64  03B7  7C 03BB           	lcall	LoadConfig_sensor_gateway
    65                          
    66                          
    67                              RAM_EPILOGUE RAM_USE_CLASS_4
    68  03BA  7F                    ret
    69                          
    70                          ;---------------------------------------------------------------------------
    71                          ; Load Configuration sensor_gateway
    72                          ;
    73                          ;    Load configuration registers for sensor_gateway.
    74                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
    75                          ;
    76                          ;       INPUTS: None.
    77                          ;      RETURNS: Nothing.
    78                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
    79                          ;               modified as may the Page Pointer registers!
    80                          ;               In the large memory model currently only the page
    81                          ;               pointer registers listed below are modified.  This does
    82                          ;               not guarantee that in future implementations of this
    83                          ;               function other page pointer registers will not be
    84                          ;               modified.
    85                          ;          
    86                          ;               Page Pointer Registers Modified: 
    87                          ;               CUR_PP
    88                          ;
    89  03BB                    _LoadConfig_sensor_gateway:
    90  03BB                     LoadConfig_sensor_gateway:
    91                              RAM_PROLOGUE RAM_USE_CLASS_4
    92                          
    93  03BB  10                	push	x
    94  03BC  70 EF                 M8C_SetBank0                    ; Force bank 0
    95  03BE  50 00                 mov     a, 0                    ; Specify bank 0
    96  03C0  67                    asr     a                       ; Store in carry flag
    97                                                              ; Load bank 0 table:
    98  03C1  50 02                 mov     A, >LoadConfigTBL_sensor_gateway_Bank0
    99  03C3  57 E9                 mov     X, <LoadConfigTBL_sensor_gateway_Bank0
   100  03C5  7C 03D6               lcall   LoadConfig              ; Load the bank 0 values
   101                          
   102  03C8  50 01                 mov     a, 1                    ; Specify bank 1
   103  03CA  67                    asr     a                       ; Store in carry flag
   104                                                              ; Load bank 1 table:
   105  03CB  50 03                 mov     A, >LoadConfigTBL_sensor_gateway_Bank1
   106  03CD  57 62                 mov     X, <LoadConfigTBL_sensor_gateway_Bank1
   107  03CF  7C 03D6               lcall   LoadConfig              ; Load the bank 1 values
   108                          
   109  03D2  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   110  03D4  20                	pop		x
   111                          
   112                              RAM_EPILOGUE RAM_USE_CLASS_4
   113  03D5  7F                    ret
   114                          
   115                          
   116                          
   117                          
   118                          ;---------------------------------------------------------------------------
   119                          ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
   120                          ;              pairs. Terminate on address=0xFF.
   121                          ;
   122                          ;  INPUTS:  [A,X] points to the table to be loaded
   123                          ;           Flag Register Carry bit encodes the Register Bank
   124                          ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
   125                          ;
   126                          ;  RETURNS: nothing.
   127                          ;
   128                          ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
   129                          ;                X-3 Temporary store for register address
   130                          ;                X-2 LSB of config table address
   131                          ;                X-1 MSB of config table address
   132                          ;
   133  03D6                    LoadConfig:
   134  03D6  71 40                 RAM_PROLOGUE RAM_USE_CLASS_2
   135  03D8  38 02                 add     SP, 2                   ; Set up local vars
   136  03DA  10                    push    X                       ; Save config table address on stack
   137  03DB  08                    push    A
   138  03DC  4F                    mov     X, SP
   139  03DD  56 FC 00              mov     [X-4], 0                ; Set default Destination to Bank 0
   140  03E0  D004                  jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
   141  03E2  56 FC 01              mov     [X-4], 1                ; No Carry: default to Bank 1
   142  03E5                    .BankSelectSaved:
   143  03E5  18                    pop     A
   144  03E6  20                    pop     X
   145                          
   146  03E7                    LoadConfigLp:
   147  03E7  70 EF                 M8C_SetBank0                    ; Switch to bank 0
   148  03E9  62 E3 00              M8C_ClearWDT                    ; Clear the watchdog for long inits
   149  03EC  10                    push    X                       ; Preserve the config table address
   150  03ED  08                    push    A
   151  03EE  28                    romx                            ; Load register address from table
   152  03EF  39 FF                 cmp     A, END_CONFIG_TABLE     ; End of table?
   153  03F1  A01F                  jz      EndLoadConfig           ;   Yes, go wrap it up
   154  03F3  4F                    mov     X, SP                   ;
   155  03F4  48 FC 01              tst     [X-4], 1                ; Loading IO Bank 1?
   156  03F7  A003                  jz      .IOBankNowSet           ;    No, Bank 0 is fine
   157  03F9  71 10                 M8C_SetBank1                    ;   Yes, switch to Bank 1
   158  03FB                    .IOBankNowSet:
   159  03FB  54 FD                 mov     [X-3], A                ; Stash the register address
   160  03FD  18                    pop     A                       ; Retrieve the table address
   161  03FE  20                    pop     X
   162  03FF  75                    inc     X                       ; Advance to the data byte
   163  0400  09 00                 adc     A, 0
   164  0402  10                    push    X                       ; Save the config table address again
   165  0403  08                    push    A
   166  0404  28                    romx                            ; load config data from the table
   167  0405  4F                    mov     X, SP                   ; retrieve the register address
   168  0406  59 FD                 mov     X, [X-3]
   169  0408  61 00                 mov     reg[X], A               ; Configure the register
   170  040A  18                    pop     A                       ; retrieve the table address
   171  040B  20                    pop     X
   172  040C  75                    inc     X                       ; advance to next table entry
   173  040D  09 00                 adc     A, 0
   174  040F  8FD7                  jmp     LoadConfigLp            ; loop to configure another register
   175  0411                    EndLoadConfig:
   176  0411  38 FC                 add     SP, -4
   177  0413  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_2
   178  0417  7F                    ret
   179                          
   180                          AREA InterruptRAM(ram, rel)
   181                          
   182  0087                    NO_SHADOW:
   183  0087                    _NO_SHADOW:
   184                          ; write only register shadows
   185  0087                    _Port_3_Data_SHADE:
   186  0087                    Port_3_Data_SHADE:	BLK	1
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:18 2009
                     _LoadConfigInit 03B1                              MAC0_CL0 00EE                              MAC0_CL1 00EF  
                            MAC1_CL0 00AE                              MAC1_CL1 00AF                                 MAC_X 00EC  
                               MAC_Y 00ED                                MAC0_X 00EC                                MAC0_Y 00ED  
                              MAC1_X 00AC                                MAC1_Y 00AD                                HITECH 0002  
                     FLAG_PGMODE_01b 0040                       FLAG_PGMODE_10b 0080    LoadConfigTBL_sensor_gateway_Bank0 02E9  
  LoadConfigTBL_sensor_gateway_Bank1 0362                     Port_3_Data_SHADE 0087             SYSTEM_LARGE_MEMORY_MODEL 0001  
                           NO_SHADOW 0087                               MAC_CL0 00EE                               MAC_CL1 00EF  
           LoadConfig_sensor_gateway 03BB                    _Port_3_Data_SHADE 0087                            _NO_SHADOW 0087  
                    FLAG_PGMODE_MASK 00C0                               RES_WDT 00E3                       RAM_USE_CLASS_1 0001  
                     RAM_USE_CLASS_2 0002                       RAM_USE_CLASS_3 0004                       RAM_USE_CLASS_4 0008  
                          LoadConfig 03D6                        LoadConfigInit 03B1                      END_CONFIG_TABLE 00FF  
                       EndLoadConfig 0411            _LoadConfig_sensor_gateway 03BB                         FLAG_XIO_MASK 0010  
          SYSTEM_IDXPG_TRACKS_IDX_PP 0001                          LoadConfigLp 03E7            SYSTEM_IDXPG_TRACKS_STK_PP 0000  
LoadConfigTBL_sensor_gateway_Ordered 0200  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:18 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          include "m8c.inc"
     4                          ;  Personalization tables 
     5                          export LoadConfigTBL_sensor_gateway_Bank1
     6                          export LoadConfigTBL_sensor_gateway_Bank0
     7                          export LoadConfigTBL_sensor_gateway_Ordered
     8                          AREA lit(rom, rel)
     9  0200                    LoadConfigTBL_sensor_gateway_Ordered:
    10                          ;  Ordered Global Register values
    11  0200  71 10             	M8C_SetBank1
    12  0202  62 00 06          	mov	reg[00h], 06h		; Port_0_DriveMode_0 register (PRT0DM0)
    13  0205  62 01 FB          	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
    14  0208  70 EF             	M8C_SetBank0
    15  020A  62 03 F8          	mov	reg[03h], f8h		; Port_0_DriveMode_2 register (PRT0DM2)
    16  020D  62 02 05          	mov	reg[02h], 05h		; Port_0_GlobalSelect register (PRT0GS)
    17  0210  71 10             	M8C_SetBank1
    18  0212  62 02 00          	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
    19  0215  62 03 00          	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
    20  0218  70 EF             	M8C_SetBank0
    21  021A  62 01 00          	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
    22  021D  71 10             	M8C_SetBank1
    23  021F  62 04 40          	mov	reg[04h], 40h		; Port_1_DriveMode_0 register (PRT1DM0)
    24  0222  62 05 BF          	mov	reg[05h], bfh		; Port_1_DriveMode_1 register (PRT1DM1)
    25  0225  70 EF             	M8C_SetBank0
    26  0227  62 07 BB          	mov	reg[07h], bbh		; Port_1_DriveMode_2 register (PRT1DM2)
    27  022A  62 06 44          	mov	reg[06h], 44h		; Port_1_GlobalSelect register (PRT1GS)
    28  022D  71 10             	M8C_SetBank1
    29  022F  62 06 00          	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
    30  0232  62 07 00          	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
    31  0235  70 EF             	M8C_SetBank0
    32  0237  62 05 00          	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
    33  023A  71 10             	M8C_SetBank1
    34  023C  62 08 40          	mov	reg[08h], 40h		; Port_2_DriveMode_0 register (PRT2DM0)
    35  023F  62 09 BF          	mov	reg[09h], bfh		; Port_2_DriveMode_1 register (PRT2DM1)
    36  0242  70 EF             	M8C_SetBank0
    37  0244  62 0B FF          	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
    38  0247  62 0A 00          	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
    39  024A  71 10             	M8C_SetBank1
    40  024C  62 0A 00          	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
    41  024F  62 0B 00          	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
    42  0252  70 EF             	M8C_SetBank0
    43  0254  62 09 00          	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
    44  0257  71 10             	M8C_SetBank1
    45  0259  62 0C 80          	mov	reg[0ch], 80h		; Port_3_DriveMode_0 register (PRT3DM0)
    46  025C  62 0D 7F          	mov	reg[0dh], 7fh		; Port_3_DriveMode_1 register (PRT3DM1)
    47  025F  70 EF             	M8C_SetBank0
    48  0261  62 0F 7F          	mov	reg[0fh], 7fh		; Port_3_DriveMode_2 register (PRT3DM2)
    49  0264  62 0E 00          	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
    50  0267  71 10             	M8C_SetBank1
    51  0269  62 0E 00          	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
    52  026C  62 0F 00          	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
    53  026F  70 EF             	M8C_SetBank0
    54  0271  62 0D 00          	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
    55  0274  71 10             	M8C_SetBank1
    56  0276  62 10 05          	mov	reg[10h], 05h		; Port_4_DriveMode_0 register (PRT4DM0)
    57  0279  62 11 FB          	mov	reg[11h], fbh		; Port_4_DriveMode_1 register (PRT4DM1)
    58  027C  70 EF             	M8C_SetBank0
    59  027E  62 13 FF          	mov	reg[13h], ffh		; Port_4_DriveMode_2 register (PRT4DM2)
    60  0281  62 12 00          	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
    61  0284  71 10             	M8C_SetBank1
    62  0286  62 12 00          	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
    63  0289  62 13 00          	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
    64  028C  70 EF             	M8C_SetBank0
    65  028E  62 11 00          	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
    66  0291  71 10             	M8C_SetBank1
    67  0293  62 14 00          	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
    68  0296  62 15 00          	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
    69  0299  70 EF             	M8C_SetBank0
    70  029B  62 17 00          	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
    71  029E  62 16 00          	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
    72  02A1  71 10             	M8C_SetBank1
    73  02A3  62 16 00          	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
    74  02A6  62 17 00          	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
    75  02A9  70 EF             	M8C_SetBank0
    76  02AB  62 15 00          	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
    77  02AE  71 10             	M8C_SetBank1
    78  02B0  62 18 00          	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
    79  02B3  62 19 00          	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
    80  02B6  70 EF             	M8C_SetBank0
    81  02B8  62 1B 00          	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
    82  02BB  62 1A 00          	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
    83  02BE  71 10             	M8C_SetBank1
    84  02C0  62 1A 00          	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
    85  02C3  62 1B 00          	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
    86  02C6  70 EF             	M8C_SetBank0
    87  02C8  62 19 00          	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
    88  02CB  71 10             	M8C_SetBank1
    89  02CD  62 1C 00          	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
    90  02D0  62 1D 00          	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
    91  02D3  70 EF             	M8C_SetBank0
    92  02D5  62 1F 00          	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
    93  02D8  62 1E 00          	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
    94  02DB  71 10             	M8C_SetBank1
    95  02DD  62 1E 00          	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
    96  02E0  62 1F 00          	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
    97  02E3  70 EF             	M8C_SetBank0
    98  02E5  62 1D 00          	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
    99  02E8  7F                	ret
   100  02E9                    LoadConfigTBL_sensor_gateway_Bank0:
   101                          ;  Global Register values
   102  02E9  60 28             	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
   103  02EB  66 00             	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
   104  02ED  63 05             	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
   105  02EF  65 00             	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
   106  02F1  E6 00             	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
   107  02F3  E7 00             	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
   108  02F5  D6 00             	db		d6h, 00h		; I2CConfig register (I2CCFG)
   109  02F7  B0 01             	db		b0h, 01h		; Row_0_InputMux register (RDI0RI)
   110  02F9  B1 00             	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
   111  02FB  B2 00             	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
   112  02FD  B3 33             	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
   113  02FF  B4 33             	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
   114  0301  B5 00             	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
   115  0303  B6 00             	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
   116  0305  B8 65             	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
   117  0307  B9 00             	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
   118  0309  BA 10             	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
   119  030B  BB 33             	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
   120  030D  BC 33             	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
   121  030F  BD 00             	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
   122  0311  BE 08             	db		beh, 08h		; Row_1_OutputDrive_1 register (RDI1SRO1)
   123  0313  C0 00             	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
   124  0315  C1 00             	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
   125  0317  C2 20             	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
   126  0319  C3 33             	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
   127  031B  C4 33             	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
   128  031D  C5 00             	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
   129  031F  C6 00             	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
   130  0321  C8 54             	db		c8h, 54h		; Row_3_InputMux register (RDI3RI)
   131  0323  C9 00             	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
   132  0325  CA 30             	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
   133  0327  CB 33             	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
   134  0329  CC 33             	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
   135  032B  CD 00             	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
   136  032D  CE 01             	db		ceh, 01h		; Row_3_OutputDrive_1 register (RDI3SRO1)
   137  032F  6C 00             	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
   138  0331  6D 00             	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
   139  0333  6E 00             	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
   140  0335  6F 00             	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
   141                          ;  Instance name Counter8_ltrx, User Module Counter8
   142                          ;       Instance name Counter8_ltrx, Block Name CNTR8(DBB10)
   143  0337  33 00             	db		33h, 00h		;Counter8_ltrx_CONTROL_REG(DBB10CR0)
   144  0339  31 27             	db		31h, 27h		;Counter8_ltrx_PERIOD_REG(DBB10DR1)
   145  033B  32 13             	db		32h, 13h		;Counter8_ltrx_COMPARE_REG(DBB10DR2)
   146                          ;  Instance name LED1, User Module LED
   147                          ;  Instance name LTRX, User Module UART
   148                          ;       Instance name LTRX, Block Name RX(DCB13)
   149  033D  3F 00             	db		3fh, 00h		;LTRX_RX_CONTROL_REG(DCB13CR0)
   150  033F  3D 00             	db		3dh, 00h		;LTRX_(DCB13DR1)
   151  0341  3E 00             	db		3eh, 00h		;LTRX_RX_BUFFER_REG (DCB13DR2)
   152                          ;       Instance name LTRX, Block Name TX(DCB12)
   153  0343  3B 00             	db		3bh, 00h		;LTRX_TX_CONTROL_REG(DCB12CR0)
   154  0345  39 00             	db		39h, 00h		;LTRX_TX_BUFFER_REG (DCB12DR1)
   155  0347  3A 00             	db		3ah, 00h		;LTRX_(DCB12DR2)
   156                          ;  Instance name OneWire, User Module OneWire
   157                          ;       Instance name OneWire, Block Name BitClk(DBB31)
   158  0349  57 00             	db		57h, 00h		;OneWire_BITCLK_CONTROL_REG(DBB31CR0)
   159  034B  55 00             	db		55h, 00h		;OneWire_BITCLK_PERIOD_REG (DBB31DR1)
   160  034D  56 00             	db		56h, 00h		;OneWire_BITCLK_COMPARE_REG(DBB31DR2)
   161                          ;       Instance name OneWire, Block Name XCVR(DCB32)
   162  034F  5B 00             	db		5bh, 00h		;OneWire_XCVR_CONTROL_REG(DCB32CR0)
   163  0351  59 00             	db		59h, 00h		;OneWire_XCVR_TX_BUFFER_REG(DCB32DR1)
   164  0353  5A 00             	db		5ah, 00h		;OneWire_XCVR_RX_BUFFER_REG(DCB32DR2)
   165                          ;  Instance name Ticker, User Module Counter16
   166                          ;       Instance name Ticker, Block Name CNTR16_LSB(DCB22)
   167  0355  4B 00             	db		4bh, 00h		;Ticker_CONTROL_LSB_REG(DCB22CR0)
   168  0357  49 FF             	db		49h, ffh		;Ticker_PERIOD_LSB_REG(DCB22DR1)
   169  0359  4A 01             	db		4ah, 01h		;Ticker_COMPARE_LSB_REG(DCB22DR2)
   170                          ;       Instance name Ticker, Block Name CNTR16_MSB(DCB23)
   171  035B  4F 00             	db		4fh, 00h		;Ticker_CONTROL_MSB_REG(DCB23CR0)
   172  035D  4D FF             	db		4dh, ffh		;Ticker_PERIOD_MSB_REG(DCB23DR1)
   173  035F  4E 00             	db		4eh, 00h		;Ticker_COMPARE_MSB_REG(DCB23DR2)
   174  0361  FF                	db		ffh
   175  0362                    LoadConfigTBL_sensor_gateway_Bank1:
   176                          ;  Global Register values
   177  0362  61 00             	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
   178  0364  69 00             	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
   179  0366  60 00             	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
   180  0368  62 00             	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
   181  036A  67 33             	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
   182  036C  68 33             	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
   183  036E  63 00             	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
   184  0370  66 00             	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
   185  0372  D1 00             	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
   186  0374  D3 00             	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
   187  0376  D0 00             	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
   188  0378  D2 00             	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
   189  037A  E1 30             	db		e1h, 30h		; OscillatorControl_1 register (OSC_CR1)
   190  037C  E2 00             	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
   191  037E  DF 02             	db		dfh, 02h		; OscillatorControl_3 register (OSC_CR3)
   192  0380  DE 01             	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
   193  0382  DD 00             	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
   194  0384  E7 00             	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
   195                          ;  Instance name Counter8_ltrx, User Module Counter8
   196                          ;       Instance name Counter8_ltrx, Block Name CNTR8(DBB10)
   197  0386  30 61             	db		30h, 61h		;Counter8_ltrx_FUNC_REG(DBB10FN)
   198  0388  31 15             	db		31h, 15h		;Counter8_ltrx_INPUT_REG(DBB10IN)
   199  038A  32 40             	db		32h, 40h		;Counter8_ltrx_OUTPUT_REG(DBB10OU)
   200                          ;  Instance name LED1, User Module LED
   201                          ;  Instance name LTRX, User Module UART
   202                          ;       Instance name LTRX, Block Name RX(DCB13)
   203  038C  3C 05             	db		3ch, 05h		;LTRX_RX_FUNC_REG   (DCB13FN)
   204  038E  3D E2             	db		3dh, e2h		;LTRX_RX_INPUT_REG  (DCB13IN)
   205  0390  3E 40             	db		3eh, 40h		;LTRX_RX_OUTPUT_REG (DCB13OU)
   206                          ;       Instance name LTRX, Block Name TX(DCB12)
   207  0392  38 1D             	db		38h, 1dh		;LTRX_TX_FUNC_REG   (DCB12FN)
   208  0394  39 02             	db		39h, 02h		;LTRX_TX_INPUT_REG  (DCB12IN)
   209  0396  3A 46             	db		3ah, 46h		;LTRX_TX_OUTPUT_REG (DCB12OU)
   210                          ;  Instance name OneWire, User Module OneWire
   211                          ;       Instance name OneWire, Block Name BitClk(DBB31)
   212  0398  54 21             	db		54h, 21h		;OneWire_BITCLK_FUNC_REG(DBB31FN)
   213  039A  55 11             	db		55h, 11h		;OneWire_BITCLK_INPUT_REG(DBB31IN)
   214  039C  56 40             	db		56h, 40h		;OneWire_BITCLK_OUTPUT_REG(DBB31OU)
   215                          ;       Instance name OneWire, Block Name XCVR(DCB32)
   216  039E  58 16             	db		58h, 16h		;OneWire_XCVR_FUNC_REG(DCB32FN)
   217  03A0  59 C3             	db		59h, c3h		;OneWire_XCVR_INPUT_REG(DCB32IN)
   218  03A2  5A 46             	db		5ah, 46h		;OneWire_XCVR_OUTPUT_REG(DCB32OU)
   219                          ;  Instance name Ticker, User Module Counter16
   220                          ;       Instance name Ticker, Block Name CNTR16_LSB(DCB22)
   221  03A4  48 01             	db		48h, 01h		;Ticker_FUNC_LSB_REG(DCB22FN)
   222  03A6  49 17             	db		49h, 17h		;Ticker_INPUT_LSB_REG(DCB22IN)
   223  03A8  4A 40             	db		4ah, 40h		;Ticker_OUTPUT_LSB_REG(DCB22OU)
   224                          ;       Instance name Ticker, Block Name CNTR16_MSB(DCB23)
   225  03AA  4C 21             	db		4ch, 21h		;Ticker_FUNC_MSB_REG(DCB23FN)
   226  03AC  4D 37             	db		4dh, 37h		;Ticker_INPUT_MSB_REG(DCB23IN)
   227  03AE  4E 40             	db		4eh, 40h		;Ticker_OUTPUT_MSB_REG(DCB23OU)
   228  03B0  FF                	db		ffh
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:18 2009
                            MAC0_CL0 00EE                              MAC0_CL1 00EF                              MAC1_CL0 00AE  
                            MAC1_CL1 00AF                                 MAC_X 00EC                                 MAC_Y 00ED  
                              MAC0_X 00EC                                MAC0_Y 00ED                                MAC1_X 00AC  
                              MAC1_Y 00AD    LoadConfigTBL_sensor_gateway_Bank0 02E9    LoadConfigTBL_sensor_gateway_Bank1 0362  
                             MAC_CL0 00EE                               MAC_CL1 00EF                         FLAG_XIO_MASK 0010  
LoadConfigTBL_sensor_gateway_Ordered 0200  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:19 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter16 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Ticker API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Ticker_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    22  00DF                    Ticker_INT_REG:                            equ 0x0df
    23  0008                    Ticker_INT_MASK:                           equ 0x08
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Ticker user defined values
    28                          ;--------------------------------------------------
    29                          
    30  FFFF                    Ticker_PERIOD:                             equ 0xffff
    31  0001                    Ticker_COMPARE_VALUE:                      equ 0x1
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Ticker
    36                          ;--------------------------------------------------
    37                          
    38  0048                    Ticker_COUNTER_LSB_REG:                equ 0x48   ; DR0 Counter register
    39  004C                    Ticker_COUNTER_MSB_REG:                equ 0x4c
    40  0049                    Ticker_PERIOD_LSB_REG:                 equ 0x49   ; DR1 Period register
    41  004D                    Ticker_PERIOD_MSB_REG:                 equ 0x4d
    42  004A                    Ticker_COMPARE_LSB_REG:                equ 0x4a   ; DR2 CompareValue register
    43  004E                    Ticker_COMPARE_MSB_REG:                equ 0x4e
    44  004B                    Ticker_CONTROL_LSB_REG:                equ 0x4b   ; Control register
    45  004F                    Ticker_CONTROL_MSB_REG:                equ 0x4f
    46  0048                    Ticker_FUNC_LSB_REG:                   equ 0x48   ; Function register
    47  004C                    Ticker_FUNC_MSB_REG:                   equ 0x4c
    48  0049                    Ticker_INPUT_LSB_REG:                  equ 0x49   ; Input register
    49  004D                    Ticker_INPUT_MSB_REG:                  equ 0x4d
    50  004A                    Ticker_OUTPUT_LSB_REG:                 equ 0x4a   ; Output register
    51  004E                    Ticker_OUTPUT_MSB_REG:                 equ 0x4e
    52                          
    53                          
    54                          ;--------------------------------------------------
    55                          ; Ticker Macro 'Functions'
    56                          ;--------------------------------------------------
    57                          
    58                             macro Ticker_Start_M
    59                             or    reg[Ticker_CONTROL_LSB_REG],  Ticker_CONTROL_REG_START_BIT
    60  7BE0                       endm
    61                          
    62                             macro Ticker_Stop_M
    63                             and   reg[Ticker_CONTROL_LSB_REG], ~Ticker_CONTROL_REG_START_BIT
    64  7BE0                       endm
    65                          
    66                             macro Ticker_EnableInt_M
    67                             M8C_EnableIntMask Ticker_INT_REG, Ticker_INT_MASK
    68  7BE0                       endm
    69                          
    70                             macro Ticker_DisableInt_M
    71                             M8C_DisableIntMask Ticker_INT_REG, Ticker_INT_MASK
    72  7BE0                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter16 User Module software implementation file
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "Ticker.inc"
    26                          
    27                          ;-----------------------------------------------
    28                          ;  Global Symbols
    29                          ;-----------------------------------------------
    30                          export  Ticker_EnableInt
    31                          export _Ticker_EnableInt
    32                          export  Ticker_DisableInt
    33                          export _Ticker_DisableInt
    34                          export  Ticker_Start
    35                          export _Ticker_Start
    36                          export  Ticker_Stop
    37                          export _Ticker_Stop
    38                          export  Ticker_WritePeriod
    39                          export _Ticker_WritePeriod
    40                          export  Ticker_WriteCompareValue
    41                          export _Ticker_WriteCompareValue
    42                          export  Ticker_wReadCompareValue
    43                          export _Ticker_wReadCompareValue
    44                          export  Ticker_wReadCounter
    45                          export _Ticker_wReadCounter
    46                          
    47                          ; The following functions are deprecated and subject to omission in future releases
    48                          ;
    49                          export  wTicker_ReadCompareValue  ; deprecated
    50                          export _wTicker_ReadCompareValue  ; deprecated
    51                          export  wTicker_ReadCounter       ; deprecated
    52                          export _wTicker_ReadCounter       ; deprecated
    53                          
    54                          
    55                          AREA sensor_gateway_RAM (RAM,REL)
    56                          
    57                          ;-----------------------------------------------
    58                          ;  Constant Definitions
    59                          ;-----------------------------------------------
    60                          
    61  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    62                          
    63                          
    64                          ;-----------------------------------------------
    65                          ; Variable Allocation
    66                          ;-----------------------------------------------
    67                          
    68                          
    69                          AREA UserModules (ROM, REL)
    70                          
    71                          .SECTION
    72                          ;-----------------------------------------------------------------------------
    73                          ;  FUNCTION NAME: Ticker_EnableInt
    74                          ;
    75                          ;  DESCRIPTION:
    76                          ;     Enables this counter's interrupt by setting the interrupt enable mask bit
    77                          ;     associated with this User Module. This function has no effect until and
    78                          ;     unless the global interrupts are enabled (for example by using the
    79                          ;     macro M8C_EnableGInt).
    80                          ;-----------------------------------------------------------------------------
    81                          ;
    82                          ;  ARGUMENTS:    None.
    83                          ;  RETURNS:      Nothing.
    84                          ;  SIDE EFFECTS: 
    85                          ;    The A and X registers may be modified by this or future implementations
    86                          ;    of this function.  The same is true for all RAM page pointer registers in
    87                          ;    the Large Memory Model.  When necessary, it is the calling function's
    88                          ;    responsibility to perserve their values across calls to fastcall16 
    89                          ;    functions.
    90                          ;
    91  40D9                     Ticker_EnableInt:
    92  40D9                    _Ticker_EnableInt:
    93                             RAM_PROLOGUE RAM_USE_CLASS_1
    94  40D9  43 DF 08             Ticker_EnableInt_M
    95                             RAM_EPILOGUE RAM_USE_CLASS_1
    96  40DC  7F                   ret
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: Ticker_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this counter's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS: 
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  40DD                     Ticker_DisableInt:
   119  40DD                    _Ticker_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  40DD  41 DF F7             Ticker_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  40E0  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: Ticker_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     counter will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS: 
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  40E1                     Ticker_Start:
   148  40E1                    _Ticker_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  40E1  43 4B 01             Ticker_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  40E4  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: Ticker_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables counter operation by clearing the start bit in the Control
   163                          ;     register of the LSB block.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  40E5                     Ticker_Stop:
   176  40E5                    _Ticker_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  40E5  41 4B FE             Ticker_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  40E8  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: Ticker_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 16-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the counter user module is stopped, then this value will also be
   197                          ;    latched into the Count registers (DR0).
   198                          ;     
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  40E9                     Ticker_WritePeriod:
   206  40E9                    _Ticker_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  40E9  60 49                mov   reg[Ticker_PERIOD_LSB_REG], A
   209  40EB  5B                   mov   A, X
   210  40EC  60 4D                mov   reg[Ticker_PERIOD_MSB_REG], A
   211                             RAM_EPILOGUE RAM_USE_CLASS_1
   212  40EE  7F                   ret
   213                          
   214                          
   215                          .ENDSECTION
   216                          
   217                          .SECTION
   218                          ;-----------------------------------------------------------------------------
   219                          ;  FUNCTION NAME: Ticker_WriteCompareValue
   220                          ;
   221                          ;  DESCRIPTION:
   222                          ;     Writes compare value into the Compare register (DR2).
   223                          ;-----------------------------------------------------------------------------
   224                          ;
   225                          ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
   226                          ;  RETURNS:      Nothing
   227                          ;  SIDE EFFECTS: 
   228                          ;    The A and X registers may be modified by this or future implementations
   229                          ;    of this function.  The same is true for all RAM page pointer registers in
   230                          ;    the Large Memory Model.  When necessary, it is the calling function's
   231                          ;    responsibility to perserve their values across calls to fastcall16 
   232                          ;    functions.
   233                          ;
   234  40EF                     Ticker_WriteCompareValue:
   235  40EF                    _Ticker_WriteCompareValue:
   236                             RAM_PROLOGUE RAM_USE_CLASS_1
   237  40EF  60 4A                mov   reg[Ticker_COMPARE_LSB_REG], A
   238  40F1  5B                   mov   A, X
   239  40F2  60 4E                mov   reg[Ticker_COMPARE_MSB_REG], A
   240                             RAM_EPILOGUE RAM_USE_CLASS_1
   241  40F4  7F                   ret
   242                          
   243                          
   244                          .ENDSECTION
   245                          
   246                          .SECTION
   247                          ;-----------------------------------------------------------------------------
   248                          ;  FUNCTION NAME: Ticker_wReadCompareValue
   249                          ;
   250                          ;  DESCRIPTION:
   251                          ;     Reads the Compare registers.
   252                          ;-----------------------------------------------------------------------------
   253                          ;
   254                          ;  ARGUMENTS:    None
   255                          ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
   256                          ;  SIDE EFFECTS: 
   257                          ;    The A and X registers may be modified by this or future implementations
   258                          ;    of this function.  The same is true for all RAM page pointer registers in
   259                          ;    the Large Memory Model.  When necessary, it is the calling function's
   260                          ;    responsibility to perserve their values across calls to fastcall16 
   261                          ;    functions.
   262                          ;
   263  40F5                     Ticker_wReadCompareValue:
   264  40F5                    _Ticker_wReadCompareValue:
   265  40F5                     wTicker_ReadCompareValue:                       ; this name deprecated
   266  40F5                    _wTicker_ReadCompareValue:                       ; this name deprecated
   267                             RAM_PROLOGUE RAM_USE_CLASS_1
   268  40F5  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]
   269  40F7  5C                   mov   X, A
   270  40F8  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]
   271                             RAM_EPILOGUE RAM_USE_CLASS_1
   272  40FA  7F                   ret
   273                          
   274                          
   275                          .ENDSECTION
   276                          
   277                          .SECTION
   278                          ;-----------------------------------------------------------------------------
   279                          ;  FUNCTION NAME: Ticker_wReadCounter
   280                          ;
   281                          ;  DESCRIPTION:
   282                          ;     Returns the value in the Count register (DR0), preserving the value in
   283                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   284                          ;     from the Count to the Compare registers by holding the clock low in
   285                          ;     the MSB PSoC block.
   286                          ;-----------------------------------------------------------------------------
   287                          ;
   288                          ;  ARGUMENTS: None
   289                          ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
   290                          ;  SIDE EFFECTS:
   291                          ;     1) The user module is stopped momentarily and one or more counts may be missed.
   292                          ;     2) The A and X registers may be modified by this or future implementations
   293                          ;        of this function.  The same is true for all RAM page pointer registers in
   294                          ;        the Large Memory Model.  When necessary, it is the calling function's
   295                          ;        responsibility to perserve their values across calls to fastcall16 
   296                          ;        functions.
   297                          ;
   298  40FB                     Ticker_wReadCounter:
   299  40FB                    _Ticker_wReadCounter:
   300  40FB                     wTicker_ReadCounter:                            ; this name deprecated
   301  40FB                    _wTicker_ReadCounter:                            ; this name deprecated
   302                          
   303  0000                       bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
   304  0002                       bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
   305  0003                       bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
   306  0004                       wCounter:               EQU   4                  ; Frame offset to temp Count   store
   307  0006                       STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
   308                          
   309  40FB  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   310  40FD  4F                   mov   X, SP                                      ; X <-  stack frame pointer
   311  40FE  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]          ; Save the Compare register on the stack
   312  4100  08                   push  A                                          ;
   313  4101  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]          ;
   314  4103  08                   push  A                                          ;   -stack frame now 2 bytes-
   315  4104  5D 4B                mov   A, reg[Ticker_CONTROL_LSB_REG]          ; Save CR0 (running or stopped state)
   316  4106  08                   push  A                                          ;   -stack frame now 3 bytes-
   317  4107  41 4B FE             Ticker_Stop_M                                 ; Disable (stop) the Counter if running
   318  410A  71 10                M8C_SetBank1                                     ;
   319  410C  5D 49                mov   A, reg[Ticker_INPUT_LSB_REG]            ; save the LSB clock input setting
   320  410E  08                   push  A                                          ;   on the stack (now 4 bytes) and ...
   321                                                                              ;   hold the clock low:
   322  410F  62 49 00             mov   reg[Ticker_INPUT_LSB_REG], INPUT_REG_NULL
   323  4112  70 EF                M8C_SetBank0                                     ; Extract the Count via DR2 register
   324  4114  5D 4C                mov   A, reg[Ticker_COUNTER_MSB_REG]          ; DR2 <- DR0 (in the MSB block)
   325  4116  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]          ; Stash the Count MSB on the stack
   326  4118  08                   push  A                                          ;   -stack frame is now 5 bytes
   327  4119  5D 48                mov   A, reg[Ticker_COUNTER_LSB_REG]          ; DR2 <- DR0 (in the LSB block)
   328  411B  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]          ; Stash the Count LSB on the stack
   329  411D  08                   push  A                                          ;   -stack frame is now 6 bytes-
   330  411E  52 00                mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
   331  4120  60 4E                mov   reg[Ticker_COMPARE_MSB_REG], A          ;
   332  4122  52 01                mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
   333  4124  60 4A                mov   reg[Ticker_COMPARE_LSB_REG], A          ;
   334  4126  71 10                M8C_SetBank1                                     ; ---Restore the counter operation
   335  4128  52 03                mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
   336  412A  60 49                mov   reg[Ticker_INPUT_LSB_REG], A            ;   and restore it
   337  412C  70 EF                M8C_SetBank0                                     ; Now re-enable (start) the counter
   338  412E  52 02                mov   A, [X+bOrigControlReg]                     ;   if it was running when
   339  4130  60 4B                mov   reg[Ticker_CONTROL_LSB_REG], A          ;   this function was first called
   340  4132  18                   pop   A                                          ; Setup the return value
   341  4133  20                   pop   X                                          ;
   342  4134  38 FC                ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
   343  4136  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   344  413A  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:19 2009
          Ticker_WritePeriod 40E9        Ticker_COMPARE_LSB_REG 004A        Ticker_COMPARE_MSB_REG 004E  
                    MAC0_CL0 00EE                      MAC0_CL1 00EF                      MAC1_CL0 00AE  
                    MAC1_CL1 00AF                         MAC_X 00EC                         MAC_Y 00ED  
                _Ticker_Stop 40E5          Ticker_INPUT_LSB_REG 0049      wTicker_ReadCompareValue 40F5  
           bOrigClockSetting 0003                        MAC0_X 00EC                        MAC0_Y 00ED  
                      MAC1_X 00AC                        MAC1_Y 00AD                        HITECH 0002  
             FLAG_PGMODE_01b 0040               FLAG_PGMODE_10b 0080  Ticker_CONTROL_REG_START_BIT 0001  
           Ticker_DisableInt 40DD                 _Ticker_Start 40E1     _Ticker_wReadCompareValue 40F5  
        _wTicker_ReadCounter 40FB      Ticker_WriteCompareValue 40EF           _Ticker_WritePeriod 40E9  
              INPUT_REG_NULL 0000     SYSTEM_LARGE_MEMORY_MODEL 0001            _Ticker_DisableInt 40DD  
        _Ticker_wReadCounter 40FB                       MAC_CL0 00EE                       MAC_CL1 00EF  
           bOrigCompareValue 0000           wTicker_ReadCounter 40FB              FLAG_PGMODE_MASK 00C0  
             RAM_USE_CLASS_1 0001               RAM_USE_CLASS_2 0002               RAM_USE_CLASS_3 0004  
             RAM_USE_CLASS_4 0008              Ticker_EnableInt 40D9               Ticker_INT_MASK 0008  
   _wTicker_ReadCompareValue 40F5         Ticker_PERIOD_LSB_REG 0049         Ticker_PERIOD_MSB_REG 004D  
             bOrigControlReg 0002             _Ticker_EnableInt 40D9           Ticker_wReadCounter 40FB  
            STACK_FRAME_SIZE 0006                Ticker_INT_REG 00DF      Ticker_wReadCompareValue 40F5  
      Ticker_COUNTER_LSB_REG 0048        Ticker_COUNTER_MSB_REG 004C     _Ticker_WriteCompareValue 40EF  
               FLAG_XIO_MASK 0010    SYSTEM_IDXPG_TRACKS_IDX_PP 0001        Ticker_CONTROL_LSB_REG 004B  
  SYSTEM_IDXPG_TRACKS_STK_PP 0000                  Ticker_Start 40E1                   Ticker_Stop 40E5  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:19 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  0000'                       endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  0000'                       endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  0000'                       endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  0000'                       endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  0000'                       endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  0000'                       endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  0000'                       endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  0000'                       endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  0000'                       endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  0000'                       endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  0000'                       endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  0000'                       endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  0000'                       endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  0000'                       endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  0000'                       endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  0000'                       endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  0000'                      endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  0000'                      endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  0000'                      endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  0000'                      endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  0000'                      endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  0000'                      endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  0000'                      endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  0000'                      endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  0000'                      endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  0000'                      endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  0000'                      endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  0000'                      endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  0000'                      endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  0000'                      endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  0000'                      endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  0000'                      endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  0000'                      endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  0000'                       endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  0000'                       endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  0000'                       endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  0000'                       endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  0000'                       endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  0000'                       endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  0000'                       endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  0000'                       endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  0000'                       endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  0000'                       endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  0000'                       endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  0000'                       endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  0000'                       endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  0000'                       endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  0000'                       endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  0000'                       endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter16 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Ticker API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Ticker_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    22  00DF                    Ticker_INT_REG:                            equ 0x0df
    23  0008                    Ticker_INT_MASK:                           equ 0x08
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Ticker user defined values
    28                          ;--------------------------------------------------
    29                          
    30  FFFF                    Ticker_PERIOD:                             equ 0xffff
    31  0001                    Ticker_COMPARE_VALUE:                      equ 0x1
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Ticker
    36                          ;--------------------------------------------------
    37                          
    38  0048                    Ticker_COUNTER_LSB_REG:                equ 0x48   ; DR0 Counter register
    39  004C                    Ticker_COUNTER_MSB_REG:                equ 0x4c
    40  0049                    Ticker_PERIOD_LSB_REG:                 equ 0x49   ; DR1 Period register
    41  004D                    Ticker_PERIOD_MSB_REG:                 equ 0x4d
    42  004A                    Ticker_COMPARE_LSB_REG:                equ 0x4a   ; DR2 CompareValue register
    43  004E                    Ticker_COMPARE_MSB_REG:                equ 0x4e
    44  004B                    Ticker_CONTROL_LSB_REG:                equ 0x4b   ; Control register
    45  004F                    Ticker_CONTROL_MSB_REG:                equ 0x4f
    46  0048                    Ticker_FUNC_LSB_REG:                   equ 0x48   ; Function register
    47  004C                    Ticker_FUNC_MSB_REG:                   equ 0x4c
    48  0049                    Ticker_INPUT_LSB_REG:                  equ 0x49   ; Input register
    49  004D                    Ticker_INPUT_MSB_REG:                  equ 0x4d
    50  004A                    Ticker_OUTPUT_LSB_REG:                 equ 0x4a   ; Output register
    51  004E                    Ticker_OUTPUT_MSB_REG:                 equ 0x4e
    52                          
    53                          
    54                          ;--------------------------------------------------
    55                          ; Ticker Macro 'Functions'
    56                          ;--------------------------------------------------
    57                          
    58                             macro Ticker_Start_M
    59                             or    reg[Ticker_CONTROL_LSB_REG],  Ticker_CONTROL_REG_START_BIT
    60  0000'                      endm
    61                          
    62                             macro Ticker_Stop_M
    63                             and   reg[Ticker_CONTROL_LSB_REG], ~Ticker_CONTROL_REG_START_BIT
    64  0000'                      endm
    65                          
    66                             macro Ticker_EnableInt_M
    67                             M8C_EnableIntMask Ticker_INT_REG, Ticker_INT_MASK
    68  0000'                      endm
    69                          
    70                             macro Ticker_DisableInt_M
    71                             M8C_DisableIntMask Ticker_INT_REG, Ticker_INT_MASK
    72  0000'                      endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TickerINT.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter16 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Ticker.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Ticker_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Ticker_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0000'                   _Ticker_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                          
    71                             ;---------------------------------------------------
    72                             ; Insert your custom code above this banner
    73                             ;---------------------------------------------------
    74                             ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76  0000' 7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:19 2009
                 _Ticker_ISR 0000                      MAC0_CL0 00EE                      MAC0_CL1 00EF  
                    MAC1_CL0 00AE                      MAC1_CL1 00AF                         MAC_X 00EC  
                       MAC_Y 00ED                        MAC0_X 00EC                        MAC0_Y 00ED  
                      MAC1_X 00AC                        MAC1_Y 00AD                        HITECH 0002  
                     MAC_CL0 00EE                       MAC_CL1 00EF  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:19 2009
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       2 August 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C29566
    11                          ;
    12                          ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h		;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h		;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31  0000                    SLEEP_TIMER:			equ	0h		;Sleep Timer value
    32  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    33  0000                    SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
    34  0001                    SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
    35  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
    36  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    37  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    38  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    39  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    40  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    41  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    42  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    43                          
    44  0008                    POWER_SETTING:			equ	8h
    45  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    46  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    47  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    48  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    49  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    50  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    51  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    52  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    53  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    54  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    55                          
    56  0001                    COMM_RX_PRESENT:		equ	1		;1 = TRUE
    57  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    58                          
    59  0003                    CLOCK_DIV_VC1:			equ	3h	;VC1 clock divider
    60  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    61  0030                    CLOCK_DIV_VC1_JUST:		equ	30h	;VC1 clock divider justified
    62  0000                    CLOCK_DIV_VC2:			equ	0h	;VC2 clock divider
    63  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    64  0000                    CLOCK_DIV_VC2_JUST:		equ	0h	;VC2 clock divider justified
    65  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    66  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    67  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    68  0002                    CLOCK_DIV_VC3:			equ	2h	;VC3 clock divider
    69  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    70  0002                    CLOCK_DIV_VC3_JUST:		equ	2h	;VC3 clock divider justified
    71  0000                    ANALOG_BUFFER_PWR:		equ	0h	;Analog buffer power level
    72  0001                    ANALOG_BUFFER_PWR_MASK:	equ	1h	;Analog buffer power level mask
    73  0000                    ANALOG_BUFFER_PWR_JUST:	equ	0h	;Analog buffer power level justified
    74  0005                    ANALOG_POWER:			equ	5h	;Analog power control
    75  0007                    ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
    76  0005                    ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
    77  0000                    OP_AMP_BIAS:			equ	0h	;Op amp bias level
    78  0040                    OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
    79  0000                    OP_AMP_BIAS_JUST:		equ	0h	;Op amp bias level justified
    80  0000                    REF_MUX:				equ	0h	;Ref mux setting
    81  0038                    REF_MUX_MASK:			equ	38h	;Ref mux setting mask
    82  0000                    REF_MUX_JUST:			equ	0h	;Ref mux setting justified
    83  0000                    AGND_BYPASS:				equ	0h	;AGndBypass setting
    84  0040                    AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
    85  0000                    AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
    86  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    87  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    88  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    89  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    90  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    91  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    92                          ;
    93                          ; register initial values
    94                          ;
    95  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    96  0005                    PORT_0_GLOBAL_SELECT:	equ 5h	;Port 0 global select register (PRT0GS)
    97  0006                    PORT_0_DRIVE_0:			equ 6h	;Port 0 drive mode 0 register (PRT0DM0)
    98  00FB                    PORT_0_DRIVE_1:			equ fbh	;Port 0 drive mode 1 register (PRT0DM1)
    99  00F8                    PORT_0_DRIVE_2:			equ f8h	;Port 0 drive mode 2 register (PRT0DM2)
   100  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
   101  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
   102  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
   103  0044                    PORT_1_GLOBAL_SELECT:	equ 44h	;Port 1 global select register (PRT1GS)
   104  0040                    PORT_1_DRIVE_0:			equ 40h	;Port 1 drive mode 0 register (PRT1DM0)
   105  00BF                    PORT_1_DRIVE_1:			equ bfh	;Port 1 drive mode 1 register (PRT1DM1)
   106  00BB                    PORT_1_DRIVE_2:			equ bbh	;Port 1 drive mode 2 register (PRT1DM2)
   107  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
   108  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   109  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   110  0000                    PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
   111  0040                    PORT_2_DRIVE_0:			equ 40h	;Port 2 drive mode 0 register (PRT2DM0)
   112  00BF                    PORT_2_DRIVE_1:			equ bfh	;Port 2 drive mode 1 register (PRT2DM1)
   113  00FF                    PORT_2_DRIVE_2:			equ ffh	;Port 2 drive mode 2 register (PRT2DM2)
   114  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   115  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   116  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   117  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   118  0080                    PORT_3_DRIVE_0:			equ 80h	;Port 3 drive mode 0 register (PRT3DM0)
   119  007F                    PORT_3_DRIVE_1:			equ 7fh	;Port 3 drive mode 1 register (PRT3DM1)
   120  007F                    PORT_3_DRIVE_2:			equ 7fh	;Port 3 drive mode 2 register (PRT3DM2)
   121  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   122  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   123  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
   124  0000                    PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
   125  0005                    PORT_4_DRIVE_0:			equ 5h	;Port 4 drive mode 0 register (PRT4DM0)
   126  00FB                    PORT_4_DRIVE_1:			equ fbh	;Port 4 drive mode 1 register (PRT4DM1)
   127  00FF                    PORT_4_DRIVE_2:			equ ffh	;Port 4 drive mode 2 register (PRT4DM2)
   128  0000                    PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
   129  0000                    PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
   130  0000                    PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
   131  0000                    PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
   132  0000                    PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
   133  0000                    PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
   134  0000                    PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
   135  0000                    PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
   136  0000                    PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
   137  0000                    PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
   138  0000                    PORT_6_GLOBAL_SELECT:	equ 0h	;Port 6 global select register (PRT6GS)
   139  0000                    PORT_6_DRIVE_0:			equ 0h	;Port 6 drive mode 0 register (PRT6DM0)
   140  0000                    PORT_6_DRIVE_1:			equ 0h	;Port 6 drive mode 1 register (PRT6DM1)
   141  0000                    PORT_6_DRIVE_2:			equ 0h	;Port 6 drive mode 2 register (PRT6DM2)
   142  0000                    PORT_6_INTENABLE:		equ 0h	;Port 6 interrupt enable register (PRT6IE)
   143  0000                    PORT_6_INTCTRL_0:		equ 0h	;Port 6 interrupt control 0 register (PRT6IC0)
   144  0000                    PORT_6_INTCTRL_1:		equ 0h	;Port 6 interrupt control 1 register (PRT6IC1)
   145  0000                    PORT_7_GLOBAL_SELECT:	equ 0h	;Port 7 global select register (PRT7GS)
   146  0000                    PORT_7_DRIVE_0:			equ 0h	;Port 7 drive mode 0 register (PRT7DM0)
   147  0000                    PORT_7_DRIVE_1:			equ 0h	;Port 7 drive mode 1 register (PRT7DM1)
   148  0000                    PORT_7_DRIVE_2:			equ 0h	;Port 7 drive mode 2 register (PRT7DM2)
   149  0000                    PORT_7_INTENABLE:		equ 0h	;Port 7 interrupt enable register (PRT7IE)
   150  0000                    PORT_7_INTCTRL_0:		equ 0h	;Port 7 interrupt control 0 register (PRT7IC0)
   151  0000                    PORT_7_INTCTRL_1:		equ 0h	;Port 7 interrupt control 1 register (PRT7IC1)
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7BE0                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7BE0                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7BE0                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7BE0                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7BE0                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7BE0                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7BE0                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7BE0                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7BE0                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7BE0                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7BE0                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7BE0                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7BE0                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7BE0                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7BE0                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7BE0                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7BE0                        endm
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- M8C29xxx Microcontroller Family SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2003-2004, Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 27x6x Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: June 8, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHz:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                              ; legacy names:
    67  00F8                        VOLTAGE_TRIM_2V:                equ      0F8h   ; Table 2 2.7V bandgap voltage trim value
    68  00F9                        OSCILLATOR_TRIM_SLOW_2V_12MHZ:  equ      0F9h   ; Table 2 2.7V SLOW IMO Trim 12MHz, 2.7V
    69  00FC                        OSCILLATOR_TRIM_SLOW_3V_6MHZ:   equ      0FCh   ; Table 2 2.7V SLOW IMO Trim  6MHz, 3.3V
    70  00FD                        OSCILLATOR_TRIM_SLOW_2V_6MHZ:   equ      0FDh   ; Table 2 2.7V SLOW IMO Trim  6MHz, 2.7V
    71                          
    72                          
    73                          ;-----------------------------------------------------------------------------
    74                          ;  MACRO SSC_Action( OpCode )
    75                          ;
    76                          ;  DESCRIPTION:
    77                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    78                          ;     section of Technical Reference Manual and/or Datasheet.
    79                          ;-----------------------------------------------------------------------------
    80                          ;
    81                          ;  ARGUMENTS:
    82                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    83                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    84                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    85                          ;  RETURNS:
    86                          ;     Nothing
    87                          ;
    88                          ;  SIDE EFFECTS:
    89                          ;     The values of the A and X registers are modified
    90                          ;
    91                          ;  PROCEDURE:
    92                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    93                          ;     2) insert the flash Supervisory key in [KEY1]
    94                          ;     3) store function code in A
    95                          ;     4) call the supervisory code
    96                          ;
    97                              macro SSC_Action( OpCode )
    98                          ;   !!! DO NOT CHANGE THIS CODE !!!
    99                          ;       This sequence of opcodes provides a
   100                          ;       signature for the debugger and ICE.
   101                              mov   X, SP                            ; copy SP into X
   102                              mov   A, X                             ; mov to A
   103                              add   A, 3                             ; create 3 byte stack frame
   104                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   105                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   106                              mov   A, @OpCode                       ; load A with specific Flash operation
   107                              SSC                                    ; SSC call the supervisory code
   108                          ;   !!! DO NOT CHANGE THIS CODE !!!
   109  7BE0                        endm
   110                          
   111                          
   112                          ;-----------------------------------------------------------------------------
   113                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
   114                          ;
   115                          ;  DESCRIPTION:
   116                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   117                          ;     registers with values from from the specified flash System Parameter
   118                          ;     table entries. Note that both trim values must come from the same table.
   119                          ;     Also, see M8SSC_Set2TableTrims below.
   120                          ;-----------------------------------------------------------------------------
   121                          ;
   122                          ;  ARGUMENTS:
   123                          ;     BYTE Table     - 0..3 for the desired system parameter table
   124                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   125                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   126                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   127                          ;
   128                          ;  RETURNS:
   129                          ;     Nothing
   130                          ;
   131                          ;  SIDE EFFECTS:
   132                          ;     The values of the A and X registers are modified
   133                          ;
   134                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
   135                              mov A, reg[0xD0]  ; CUR_PP
   136                          	push A
   137                          	mov reg[0xD0], 0
   138                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   139                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   140                              M8C_SetBank1
   141                              mov   A, [@IMO_Trim]
   142                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   143                              mov   A, [@Volt_Trim]
   144                            IF ( @Bypass )
   145                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
   146                            ENDIF
   147                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   148                              M8C_SetBank0
   149                          	pop A
   150                          	mov reg[0xD0], A
   151  7BE0                        endm
   152                          
   153                          
   154                          ;-----------------------------------------------------------------------------
   155                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   159                          ;     registers with values from from the specified flash System Parameter
   160                          ;     table entries. Each trim value comes from a different table.
   161                          ;     Also, see M8SSC_SetTableTrims above.
   162                          ;-----------------------------------------------------------------------------
   163                          ;
   164                          ;  ARGUMENTS:
   165                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   166                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   167                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   168                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   169                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   170                          ;
   171                          ;  RETURNS:
   172                          ;     Nothing
   173                          ;
   174                          ;  SIDE EFFECTS:
   175                          ;     The values of the A and X registers are modified
   176                          ;
   177                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
   178                              mov A, reg[0xD0]  ; CUR_PP
   179                          	push A
   180                          	mov reg[0xD0], 0
   181                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   182                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   183                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   184                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   185                              mov   reg[IMO_TR], A
   186                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   187                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   188                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   189                            IF ( @Bypass )
   190                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
   191                            ENDIF
   192                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   193                              M8C_SetBank0
   194                          	pop A
   195                          	mov reg[0xD0], A
   196  7BE0                        endm
   197                          
   198                          
   199                          ;-----------------------------------------------------------------------------
   200                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
   201                          ;
   202                          ;  DESCRIPTION:
   203                          ;     Loads Bandgap Voltage Trim register with values from from the
   204                          ;     specified flash System Parameter table entry.
   205                          ;-----------------------------------------------------------------------------
   206                          ;
   207                          ;  ARGUMENTS:
   208                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   209                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   210                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   211                          ;
   212                          ;  RETURNS:
   213                          ;     Nothing
   214                          ;
   215                          ;  SIDE EFFECTS:
   216                          ;     The values of the A and X registers are modified
   217                          ;
   218                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
   219                              mov A, reg[0xD0]  ; CUR_PP
   220                          	push A
   221                          	mov reg[0xD0], 0
   222                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   223                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   224                              M8C_SetBank1
   225                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   226                            IF ( @Bypass )
   227                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting, if any
   228                            ENDIF
   229                              mov   reg[BDG_TR], A                   ; Update the register value
   230                              M8C_SetBank0
   231                          	pop A
   232                          	mov reg[0xD0], A
   233  7BE0                        endm
   234                          
   235                          
   236                          ;-----------------------------------------------------------------------------
   237                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                          ;
   239                          ;  DESCRIPTION:
   240                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   241                          ;     from the specified flash System Parameter table entry.
   242                          ;-----------------------------------------------------------------------------
   243                          ;
   244                          ;  ARGUMENTS:
   245                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   246                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   247                          ;
   248                          ;  RETURNS:
   249                          ;     Nothing
   250                          ;
   251                          ;  SIDE EFFECTS:
   252                          ;     The values of the A and X registers are modified
   253                          ;
   254                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   255                              mov A, reg[0xD0]  ; CUR_PP
   256                          	push A
   257                          	mov reg[0xD0], 0
   258                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   259                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   260                              M8C_SetBank1
   261                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   262                              mov   reg[IMO_TR], A               ; Update the register value
   263                              M8C_SetBank0
   264                          	pop A
   265                          	mov reg[0xD0], A
   266  7BE0                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7BE0                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7BE0                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7BE0                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7BE0                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7BE0                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7BE0                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7BE0                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7BE0                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7BE0                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7BE0                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7BE0                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7BE0                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7BE0                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7BE0                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7BE0                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7BE0                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7BE0                       endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;@Id: boot.tpl#851 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  VERSION:    4.18
     7                          ;  DATE:       28 June 2007
     8                          ;
     9                          ;  DESCRIPTION:
    10                          ;  M8C Boot Code for CY8C29xxx microcontroller family.
    11                          ;
    12                          ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    16                          ; the project's root directory to create BOOT.ASM. Any changes made to
    17                          ; BOOT.ASM will be  overwritten every time the project is generated; therfore
    18                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    19                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    20                          ; are not accidentally modified.
    21                          ;
    22                          ;=============================================================================
    23                          
    24                          include ".\lib\GlobalParams.inc"
    25                          include "m8c.inc"
    26                          include "m8ssc.inc"
    27                          include "memory.inc"
    28                          
    29                          ;--------------------------------------
    30                          ; Export Declarations
    31                          ;--------------------------------------
    32                          
    33                          export __Start
    34                          IF	(TOOLCHAIN & HITECH)
    35                          ELSE
    36                          export __bss_start
    37                          export __data_start
    38                          export __idata_start
    39                          export __func_lit_start
    40                          export __text_start
    41                          ENDIF
    42                          export  _bGetPowerSetting
    43                          export   bGetPowerSetting
    44                          
    45                          
    46                          ;--------------------------------------
    47                          ; Optimization flags
    48                          ;--------------------------------------
    49                          ;
    50                          ; To change the value of these flags, modify the file boot.tpl, not
    51                          ; boot.asm. See the notes in the banner comment at the beginning of
    52                          ; this file.
    53                          
    54                          ; Optimization for Assembly language (only) projects and C-language projects
    55                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    56                          ;   Set to 1: Support for C Run-time Environment initialization
    57                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    58                          ;
    59                          IF	(TOOLCHAIN & HITECH)
    60                          ; The C compiler will customize the startup code - it's not required here
    61                          
    62  0000                    C_LANGUAGE_SUPPORT:              equ 0
    63                          ELSE
    64                          C_LANGUAGE_SUPPORT:              equ 1
    65                          ENDIF
    66                          
    67                          
    68                          ; The following equate is required for proper operation. Reseting its value
    69                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    70                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    71                          ; and PLL_Lock must take place within user code. See the family data sheet for
    72                          ; the requirements of starting the ECO and PLL lock mode.
    73                          ;
    74                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    75                          ;                invoking main
    76                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    77                          ;               the time code in main starts executing.
    78                          ;
    79  0001                    WAIT_FOR_32K:                    equ 1
    80                          
    81                          
    82                          ; For historical reasons, by default the boot code uses an lcall instruction
    83                          ; to invoke the user's _main code. If _main executes a return instruction,
    84                          ; boot provides an infinite loop. By changing the following equate from zero
    85                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    86                          ; bytes on the stack which are otherwise required for the return address. If
    87                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    88                          ; release, the C compiler automatically places an infinite loop at the end
    89                          ; of main, rather than a return instruction.)
    90                          ;
    91  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    92                          
    93                          
    94                          ;-----------------------------------------------------------------------------
    95                          ; Interrupt Vector Table
    96                          ;-----------------------------------------------------------------------------
    97                          ;
    98                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    99                          ; a jump instruction to an ISR (Interrupt Service Routine), although
   100                          ; very short ISRs could be encoded within the table itself. Normally,
   101                          ; vector jump targets are modified automatically according to the user
   102                          ; modules selected. This occurs when the 'Generate Application' opera-
   103                          ; tion is run causing PSoC Designer to create boot.asm and the other
   104                          ; configuration files. If you need to hard code a vector, update the
   105                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   106                          ; of this file.
   107                          ;-----------------------------------------------------------------------------
   108                          
   109                              AREA TOP (ROM, ABS, CON)
   110                          
   111  0000                        org   0                        ;Reset Interrupt Vector
   112                          IF	(TOOLCHAIN & HITECH)
   113                          ;   jmp   __Start                  ;C compiler fills in this vector
   114                          ELSE
   115                              jmp   __Start                  ;First instruction executed following a Reset
   116                          ENDIF
   117                          
   118  0004                        org   04h                      ;Supply Monitor Interrupt Vector
   119  0004  30                    halt                           ;Stop execution if power falls too low
   120                          
   121  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   122                              // call	void_handler
   123  0008  7E                    reti
   124                          
   125  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   126                              // call	void_handler
   127  000C  7E                    reti
   128                          
   129  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   130                              // call	void_handler
   131  0010  7E                    reti
   132                          
   133  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   134                              // call	void_handler
   135  0014  7E                    reti
   136                          
   137  0018                        org   18h                      ;VC3 Interrupt Vector
   138                              // call	void_handler
   139  0018  7E                    reti
   140                          
   141  001C                        org   1Ch                      ;GPIO Interrupt Vector
   142                              // call	void_handler
   143  001C  7E                    reti
   144                          
   145  0020                        org   20h                      ;PSoC Block DBB00 Interrupt Vector
   146                              // call	void_handler
   147  0020  7E                    reti
   148                          
   149  0024                        org   24h                      ;PSoC Block DBB01 Interrupt Vector
   150                              // call	void_handler
   151  0024  7E                    reti
   152                          
   153  0028                        org   28h                      ;PSoC Block DCB02 Interrupt Vector
   154                              // call	void_handler
   155  0028  7E                    reti
   156                          
   157  002C                        org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
   158                              // call	void_handler
   159  002C  7E                    reti
   160                          
   161  0030                        org   30h                      ;PSoC Block DBB10 Interrupt Vector
   162  0030  7D 3B32               ljmp	_Counter8_ltrx_ISR
   163  0033  7E                    reti
   164                          
   165  0034                        org   34h                      ;PSoC Block DBB11 Interrupt Vector
   166                              // call	void_handler
   167  0034  7E                    reti
   168                          
   169  0038                        org   38h                      ;PSoC Block DCB12 Interrupt Vector
   170  0038  7D 3D5E               ljmp	_LTRX_TX_ISR
   171  003B  7E                    reti
   172                          
   173  003C                        org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
   174  003C  7D 3D5F               ljmp	_LTRX_RX_ISR
   175  003F  7E                    reti
   176                          
   177  0040                        org   40h                      ;PSoC Block DBB20 Interrupt Vector
   178                              // call	void_handler
   179  0040  7E                    reti
   180                          
   181  0044                        org   44h                      ;PSoC Block DBB21 Interrupt Vector
   182                              // call	void_handler
   183  0044  7E                    reti
   184                          
   185  0048                        org   48h                      ;PSoC Block DCB22 Interrupt Vector
   186                              // call	void_handler
   187  0048  7E                    reti
   188                          
   189  004C                        org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
   190  004C  7D 7C88               ljmp	_Ticker_ISR
   191  004F  7E                    reti
   192                          
   193  0050                        org   50h                      ;PSoC Block DBB30 Interrupt Vector
   194                              // call	void_handler
   195  0050  7E                    reti
   196                          
   197  0054                        org   54h                      ;PSoC Block DBB31 Interrupt Vector
   198                              // call	void_handler
   199  0054  7E                    reti
   200                          
   201  0058                        org   58h                      ;PSoC Block DCB32 Interrupt Vector
   202  0058  7D 40D8               ljmp	_OneWire_ISR
   203  005B  7E                    reti
   204                          
   205  005C                        org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
   206                              // call	void_handler
   207  005C  7E                    reti
   208                          
   209  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   210                              // call	void_handler
   211  0060  7E                    reti
   212                          
   213  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   214                              // call	void_handler
   215  0064  7E                    reti
   216                          
   217                          ;-----------------------------------------------------------------------------
   218                          ;  Start of Execution.
   219                          ;-----------------------------------------------------------------------------
   220                          ;  The Supervisory ROM SWBootReset function has already completed the
   221                          ;  calibrate1 process, loading trim values for 5 volt operation.
   222                          ;
   223                          
   224                          IF	(TOOLCHAIN & HITECH)
   225                           	AREA PD_startup(CODE, REL, CON)
   226                          ELSE
   227                              org 68h
   228                          ENDIF
   229  7F5A                    __Start:
   230                          
   231                              ; initialize SMP values for voltage stabilization, if required,
   232                              ; leaving power-on reset (POR) level at the default (low) level, at
   233                              ; least for now. 
   234                              ;
   235  7F5A  71 10                 M8C_SetBank1
   236  7F5C  62 FA 00              mov reg[0FAh], 0				;Reset flash location
   237  7F5F  62 E3 80              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   238  7F62  70 EF                 M8C_SetBank0
   239                          
   240                              ; %53%20%46%46% Apply Erratum 001-05137 workaround
   241  7F64  50 20                 mov   A, 20h
   242  7F66  28                    romx
   243  7F67  50 40                 mov   A, 40h
   244  7F69  28                    romx
   245  7F6A  50 60                 mov   A, 60h
   246  7F6C  28                    romx
   247                              ; %45%20%46%46% End workaround
   248                          
   249                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   250                              M8C_EnableWatchDog
   251                          ENDIF
   252                          
   253                          IF ( SELECT_32K )
   254                              or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
   255                          ELSE
   256  7F6D  41 FE FB              and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
   257                          ENDIF
   258                          
   259                              ;---------------------------
   260                              ; Set up the Temporary stack
   261                              ;---------------------------
   262                              ; A temporary stack is set up for the SSC instructions.
   263                              ; The real stack start will be assigned later.
   264                              ;
   265  0080                    _stack_start:          equ 80h
   266  7F70  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   267  7F72  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   268                          
   269                              ;-----------------------------------------------
   270                              ; Set Power-related Trim & the AGND Bypass bit.
   271                              ;-----------------------------------------------
   272                          
   273                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   274                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
   277                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   278                            IF ( AGND_BYPASS )
   279                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   280                              ; The 5V trim has already been set, but we need to update the AGNDBYP
   281                              ; bit in the write-only BDG_TR register. Recalculate the register
   282                              ; value using the proper trim values.
   283                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   284                              M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
   285                            ENDIF
   286                           ENDIF
   287                          ENDIF ; 5.0 V Operation
   288                          
   289                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   290                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   291                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   292                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
   293                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   294  7F73  5D D0                 M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
   295                           ENDIF
   296                          ENDIF ; 3.3 Volt Operation
   297                          
   298  7F97  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   299  7F9A  55 F9 00              mov  [bSSC_KEYSP], 0
   300                          
   301                              ;---------------------------------------
   302                              ; Initialize Crystal Oscillator and PLL
   303                              ;---------------------------------------
   304                          
   305                          IF ( SELECT_32K & WAIT_FOR_32K )
   306                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   307                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   308                              ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
   309                              ; the ECO to stabilize.
   310                              ;
   311                              M8C_SetBank1
   312                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   313                              M8C_SetBank0
   314                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   315                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   316                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   317                          .WaitFor1s:
   318                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   319                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   320                                                                    ;   since interrupts are not globally enabled
   321                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   322                              ; Either no ECO, or waiting for stable clock is to be done in main
   323  7F9D  71 10                 M8C_SetBank1
   324  7F9F  62 E0 02              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   325  7FA2  70 EF                 M8C_SetBank0
   326  7FA4  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   327                          
   328                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   329                          
   330                          IF ( PLL_MODE )
   331                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   332                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   333                              ;
   334                              M8C_SetBank1
   335                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   336                              M8C_SetBank0
   337                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   338                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   339                          
   340                          .WaitFor16ms:
   341                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   342                              jz   .WaitFor16ms
   343                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   344                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   345                              M8C_SetBank0
   346                          
   347                          IF      ( WAIT_FOR_32K )
   348                          ELSE ; !( WAIT_FOR_32K )
   349                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   350                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   351                          ENDIF ;(WAIT_FOR_32K)
   352                          ENDIF ;(PLL_MODE)
   353                          
   354                              ;------------------------
   355                              ; Close CT leakage path.
   356                              ;------------------------
   357  7FA7  62 71 05              mov   reg[ACB00CR0], 05h
   358  7FAA  62 75 05              mov   reg[ACB01CR0], 05h
   359  7FAD  62 79 05              mov   reg[ACB02CR0], 05h
   360  7FB0  62 7D 05              mov   reg[ACB03CR0], 05h
   361                          
   362                          
   363                          IF	(TOOLCHAIN & HITECH)
   364                              ;---------------------------------------------
   365                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   366                              ;---------------------------------------------
   367                          	global		__Lstackps
   368  7FB3  50 00             	mov     a,low __Lstackps
   369  7FB5  4E                	swap    a,sp
   370                          
   371                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   372  7FB6  62 D1 07              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   373  7FB9  62 D3 07              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374  7FBC  62 D0 00              RAM_SETPAGE_CUR 0
   375  7FBF  62 D5 00              RAM_SETPAGE_MVW 0
   376  7FC2  62 D4 00              RAM_SETPAGE_MVR 0
   377                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   378                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   379                              ELSE
   380  7FC5  71 80                 or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   381                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   382                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   383                          ELSE
   384                              ;---------------------------------------------
   385                              ; ImageCraft Enter the Large Memory Model, if applicable
   386                              ;---------------------------------------------
   387                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   388                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   389                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   390                              swap  A, SP
   391                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   392                              RAM_SETPAGE_CUR 0
   393                              RAM_SETPAGE_MVW 0
   394                              RAM_SETPAGE_MVR 0
   395                          
   396                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   397                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   398                            ELSE
   399                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   400                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   401                          ELSE
   402                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   403                              swap  SP, A
   404                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   405                          ENDIF ;	TOOLCHAIN
   406                          
   407                              ;-------------------------
   408                              ; Load Base Configuration
   409                              ;-------------------------
   410                              ; Load global parameter settings and load the user modules in the
   411                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   412                              ; to minimize start up time; (2) We may still need to play with the
   413                              ; Sleep Timer.
   414                              ;
   415  7FC7  7C 03B1               lcall LoadConfigInit
   416                          
   417                              ;-----------------------------------
   418                              ; Initialize C Run-Time Environment
   419                              ;-----------------------------------
   420                          IF ( C_LANGUAGE_SUPPORT )
   421                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   422                              mov  A,0                           ; clear the 'bss' segment to zero
   423                              mov  [__r0],<__bss_start
   424                          BssLoop:
   425                              cmp  [__r0],<__bss_end
   426                              jz   BssDone
   427                              mvi  [__r0],A
   428                              jmp  BssLoop
   429                          BssDone:
   430                              mov  A,>__idata_start              ; copy idata to data segment
   431                              mov  X,<__idata_start
   432                              mov  [__r0],<__data_start
   433                          IDataLoop:
   434                              cmp  [__r0],<__data_end
   435                              jz   C_RTE_Done
   436                              push A
   437                              romx
   438                              mvi  [__r0],A
   439                              pop  A
   440                              inc  X
   441                              adc  A,0
   442                              jmp  IDataLoop
   443                          
   444                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   445                          
   446                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   447                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   448                                                                 ; to use the Virtual Register page.
   449                          
   450                              ; Dereference the constant (flash) pointer pXIData to access the start
   451                              ; of the extended idata area, "xidata." Xidata follows the end of the
   452                              ; text segment and may have been relocated by the Code Compressor.
   453                              ;
   454                              mov   A, >__pXIData                ; Get the address of the flash
   455                              mov   X, <__pXIData                ;   pointer to the xidata area.
   456                              push  A
   457                              romx                               ; get the MSB of xidata's address
   458                              mov   [__r0], A
   459                              pop   A
   460                              inc   X
   461                              adc   A, 0
   462                              romx                               ; get the LSB of xidata's address
   463                              swap  A, X
   464                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   465                                                                 ;   XIData structure list in flash
   466                              jmp   .AccessStruct
   467                          
   468                              ; Unpack one element in the xidata "structure list" that specifies the
   469                              ; values of C variables. Each structure contains 3 member elements.
   470                              ; The first is a pointer to a contiguous block of RAM to be initial-
   471                              ; ized. Blocks are always 255 bytes or less in length and never cross
   472                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   473                              ; contains 0xFF. There are two formats for the struct depending on the
   474                              ; value in the second member element, an unsigned byte:
   475                              ; (1) If the value of the second element is non-zero, it represents
   476                              ; the 'size' of the block of RAM to be initialized. In this case, the
   477                              ; third member of the struct is an array of bytes of length 'size' and
   478                              ; the bytes are copied to the block of RAM.
   479                              ; (2) If the value of the second element is zero, the block of RAM is
   480                              ; to be cleared to zero. In this case, the third member of the struct
   481                              ; is an unsigned byte containing the number of bytes to clear.
   482                          
   483                          .AccessNextStructLoop:
   484                              inc   X                            ; pXIData++
   485                              adc   A, 0
   486                          .AccessStruct:                         ; Entry point for first block
   487                              ;
   488                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   489                              ;
   490                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   491                              push  A
   492                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   494                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   495                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   496                              pop   A                            ; restore pXIData to [A,X]
   497                              inc   X                            ; pXIData++
   498                              adc   A, 0
   499                              push  A
   500                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   501                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   502                              pop   A                            ; restore pXIData to [A,X]
   503                              inc   X                            ; pXIData++ (point to size)
   504                              adc   A, 0
   505                              push  A
   506                              romx                               ; Get the size (CPU.A <- *pXIData)
   507                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   508                              mov   [__r1], A                    ;             else downcount in __r1
   509                              pop   A                            ; restore pXIData to [A,X]
   510                          
   511                          .CopyNextByteLoop:
   512                              ; For each byte in the structure's array member, copy from flash to RAM.
   513                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   514                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   515                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   516                              ;
   517                              inc   X                            ; pXIData++ (point to next data byte)
   518                              adc   A, 0
   519                              push  A
   520                              romx                               ; Get the data value (CPU.A <- *pXIData)
   521                              mvi   [__r0], A                    ; Transfer the data to RAM
   522                              tst   [__r0], 0xff                 ; Check for page crossing
   523                              jnz   .CopyLoopTail                ;   No crossing, keep going
   524                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   525                              inc   A
   526                              mov   reg[ MVW_PP], A
   527                          .CopyLoopTail:
   528                              pop   A                            ; restore pXIData to [A,X]
   529                              dec   [__r1]                       ; End of this array in flash?
   530                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   531                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   532                          
   533                          .ClearRAMBlockToZero:
   534                              pop   A                            ; restore pXIData to [A,X]
   535                              inc   X                            ; pXIData++ (point to next data byte)
   536                              adc   A, 0
   537                              push  A
   538                              romx                               ; Get the run length (CPU.A <- *pXIData)
   539                              mov   [__r1], A                    ; Initialize downcounter
   540                              mov   A, 0                         ; Initialize source data
   541                          
   542                          .ClearRAMBlockLoop:
   543                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   544                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   545                              ;
   546                              mvi   [__r0], A                    ; Clear a byte
   547                              tst   [__r0], 0xff                 ; Check for page crossing
   548                              jnz   .ClearLoopTail               ;   No crossing, keep going
   549                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   550                              inc   A
   551                              mov   reg[ MVW_PP], A
   552                              mov   A, 0                         ; Restore the zero used for clearing
   553                          .ClearLoopTail:
   554                              dec   [__r1]                       ; Was this the last byte?
   555                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   556                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   557                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   558                          
   559                          .C_RTE_WrapUp:
   560                              pop   A                            ; balance stack
   561                          
   562                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   563                          
   564                          C_RTE_Done:
   565                          
   566                          ENDIF ; C_LANGUAGE_SUPPORT
   567                          
   568                              ;-------------------------------
   569                              ; Voltage Stabilization for SMP
   570                              ;-------------------------------
   571                          
   572                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   573                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   574                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   575                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   576                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   577                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   578                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   579                              M8C_SetBank1
   580                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   581                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   582                              M8C_SetBank0
   583                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   584                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   585                          .WaitFor2ms:
   586                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   587                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   588                          ENDIF ; SMP is operational
   589                          ENDIF ; 5.0V Operation
   590                          
   591                              ;-------------------------------
   592                              ; Set Power-On Reset (POR) Level
   593                              ;-------------------------------
   594  7FCA  71 10                 M8C_SetBank1
   595                          
   596                          IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
   597                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
   598                           ELSE                                       ;    No, fast mode
   599                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
   600                                                                      ;       no, set midpoint POR in user code, if desired
   601                            ELSE ; 24HMz                              ;
   602                              or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
   603                            ENDIF ; 24MHz
   604                           ENDIF ; Slow Mode
   605                          ENDIF ; 5.0V Operation
   606                          
   607  7FCC  70 EF                 M8C_SetBank0
   608                          
   609                              ;----------------------------
   610                              ; Wrap up and invoke "main"
   611                              ;----------------------------
   612                          
   613                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   614                              ; no interrupts should be enabled now, so may as well clear the register.
   615                              ;
   616  7FCE  62 E0 00              mov  reg[INT_MSK0],0
   617                          
   618                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   619                              ; And put decimator in full mode so it does not consume too much current.
   620                              ;
   621  7FD1  71 10                 M8C_SetBank1
   622  7FD3  62 E0 03              mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   623  7FD6  43 E7 80              or   reg[DEC_CR2],80h                    ; Put decimator in full mode
   624  7FD9  70 EF                 M8C_SetBank0
   625                          
   626                              ; Global Interrupt are NOT enabled, this should be done in main().
   627                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   628                              ; Global Interrupts should be enabled as soon as possible in main().
   629                              ;
   630  7FDB  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   631                                                             ; have been set during the boot process.
   632                          IF	(TOOLCHAIN & HITECH)
   633  7FDE  7D 7CC9           	ljmp  startup                  ; Jump to C compiler startup code
   634                          ELSE
   635                          IF ENABLE_LJMP_TO_MAIN
   636                              ljmp  _main                    ; goto main (no return)
   637                          ELSE
   638                              lcall _main                    ; call main
   639                          .Exit:
   640                              jmp  .Exit                     ; Wait here after return till power-off or reset
   641                          ENDIF
   642                          ENDIF ; TOOLCHAIN
   643                          
   644                              ;---------------------------------
   645                              ; Library Access to Global Parms
   646                              ;---------------------------------
   647                              ;
   648  7FE1                     bGetPowerSetting:
   649  7FE1                    _bGetPowerSetting:
   650                              ; Returns value of POWER_SETTING in the A register.
   651                              ; No inputs. No Side Effects.
   652                              ;
   653  7FE1  50 08                 mov   A, POWER_SETTING
   654  7FE3  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:19 2009
              SELECT_32K_JUST 0000                       ACB00CR0 0071                       ACB01CR0 0075  
           _Counter8_ltrx_ISR 3B32                       ACB02CR0 0079                       ACB03CR0 007D  
                   __Lstackps 0700             C_LANGUAGE_SUPPORT 0000                    _Ticker_ISR 7C88  
                POWER_SET_3V3 0008                  POWER_SETTING 0008                  POWER_SET_5V0 0010  
                     MAC0_CL0 00EE                       MAC0_CL1 00EF                       MAC1_CL0 00AE  
                     MAC1_CL1 00AF                          MAC_X 00EC                          MAC_Y 00ED  
             SLEEP_TIMER_JUST 0000                       CPU_SCR1 00FE               bGetPowerSetting 7FE1  
                     INT_MSK0 00E0                       OPER_KEY 003A                       PLL_MODE 0000  
                       BDG_TR 00EA                         MAC0_X 00EC                         MAC0_Y 00ED  
                       MAC1_X 00AC                         MAC1_Y 00AD                         HITECH 0002  
              FLAG_PGMODE_10b 0080                         IDX_PP 00D3                         CUR_PP 00D0  
                       IMO_TR 00E8                         INT_VC 00E2                 CPU_CLOCK_JUST 0003  
                       MVR_PP 00D4                         MVW_PP 00D5              _bGetPowerSetting 7FE1  
                 WAIT_FOR_32K 0001                         STK_PP 00D1                  LVD_TBEN_JUST 0000  
                       VLT_CR 00E3          SWITCH_MODE_PUMP_JUST 0080                   _stack_start 0080  
                 _LTRX_RX_ISR 3D5F                   _LTRX_TX_ISR 3D5E      SYSTEM_LARGE_MEMORY_MODEL 0001  
       SYSTEM_MULTIPAGE_STACK 0000             POWER_SET_SLOW_IMO 0001                  PLL_MODE_JUST 0000  
                      DEC_CR2 00E7      SSCTBL1_TRIM_IMO_3V_24MHZ 00F9                      TOOLCHAIN 0002  
                      MAC_CL0 00EE                        MAC_CL1 00EF                        OSC_CR0 00E0  
                      RES_WDT 00E3                WATCHDOG_ENABLE 0000                     bSSC_KEYSP 00F9  
         CPU_SCR1_ECO_ALLOWED 0004                 LoadConfigInit 03B1            SSCTBL1_TRIM_BGR_3V 00F8  
                      __Start 7F5A               AGND_BYPASS_JUST 0000                      bSSC_KEY1 00F8  
                   TABLE_READ 0006                   _OneWire_ISR 40D8              OSC_CR0_CPU_12MHz 0002  
                      startup 7CC9              SYSTEM_STACK_PAGE 0007                  FLAG_XIO_MASK 0010  
                   SELECT_32K 0000              TRIP_VOLTAGE_JUST 0000     SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           bSSC_TABLE_TableId 00FA  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Sat Feb 07 16:14:23 2009
     1                          
     2                          	; HI-TECH C COMPILER (Cypress PSOC) V9.61PL1
     3                          	; Copyright (C) 1984-2008 HI-TECH Software
     4                          
     5                          	; Auto-generated runtime startup code for final link stage.
     6                          
     7                          	;
     8                          	; Compiler options:
     9                          	;
    10                          	; --asmlist --errformat --chip=CY8C29566 --WARN=0 --OPT=asm,9 \
    11                          	; -Osensor_gateway -Moutput/sensor_gateway.mp --OUTDIR=./output \
    12                          	; ./obj/boot.obj ./obj/main.p1 ./obj/oo.p1 ./obj/shtxx.p1 \
    13                          	; lib/libpsoc.lib lib/libpsoc.lpp \
    14                          	; C:/PROGRA~1/Cypress/Common/CYPRES~2/tools/lib/CY8C29000/cms.lib
    15                          	;
    16                          
    17                          
    18                          	processor	CY8C29566
    19                          	macro	M8C_ClearWDT
    20                          	mov reg[0xE3],0x38
    21  413B                    	endm
    22                          
    23                          	psect	PD_startup,class=CODE
    24                          	psect	init,class=CODE
    25                          	psect	end_init,class=CODE
    26                          	psect	powerup,class=CODE
    27                          	psect	vectors,ovrld,class=CODE
    28                          	psect	text,class=CODE
    29                          	psect	maintext,class=CODE
    30                          	psect	intrtext,class=CODE
    31                          	psect	fnauto,class=RAM,space=1
    32                          	psect	bss,class=RAM,space=1
    33                          	psect	InterruptRAM,class=RAM,space=1
    34                          	psect	cdata,class=ROM,space=0,reloc=256
    35                          	psect	psoc_config,class=ROM
    36                          	psect	UserModules,class=ROM
    37                          	psect	strings,class=ROM
    38                          	psect	SSCParmBlk,abs,ovrld,class=RAM,space=1
    39  00F8                    	org	0xF8
    40  00F8                    	blk	8
    41                          
    42                          	psect	stackps,class=RAM
    43                          	global	__Lstackps, __stack_start__
    44  0700                    __stack_start__:
    45                          	psect	bss0,class=RAM,space=1
    46                          	psect	nvram0,class=RAM,space=1
    47                          	psect	rbit0,bit,class=RAM,space=1
    48                          	psect	nvbit0,bit,class=RAM,space=1
    49                          	psect	ramdata0,class=RAM,space=1
    50                          	psect	romdata0,class=BANKROM,space=0
    51                          	psect	bss1,class=RAM,space=1
    52                          	psect	nvram1,class=RAM,space=1
    53                          	psect	rbit1,bit,class=RAM,space=1
    54                          	psect	nvbit1,bit,class=RAM,space=1
    55                          	psect	ramdata1,class=RAM,space=1
    56                          	psect	romdata1,class=BANKROM,space=0
    57                          	psect	bss2,class=RAM,space=1
    58                          	psect	nvram2,class=RAM,space=1
    59                          	psect	rbit2,bit,class=RAM,space=1
    60                          	psect	nvbit2,bit,class=RAM,space=1
    61                          	psect	ramdata2,class=RAM,space=1
    62                          	psect	romdata2,class=BANKROM,space=0
    63                          	psect	bss3,class=RAM,space=1
    64                          	psect	nvram3,class=RAM,space=1
    65                          	psect	rbit3,bit,class=RAM,space=1
    66                          	psect	nvbit3,bit,class=RAM,space=1
    67                          	psect	ramdata3,class=RAM,space=1
    68                          	psect	romdata3,class=BANKROM,space=0
    69                          	psect	bss4,class=RAM,space=1
    70                          	psect	nvram4,class=RAM,space=1
    71                          	psect	rbit4,bit,class=RAM,space=1
    72                          	psect	nvbit4,bit,class=RAM,space=1
    73                          	psect	ramdata4,class=RAM,space=1
    74                          	psect	romdata4,class=BANKROM,space=0
    75                          	psect	bss5,class=RAM,space=1
    76                          	psect	nvram5,class=RAM,space=1
    77                          	psect	rbit5,bit,class=RAM,space=1
    78                          	psect	nvbit5,bit,class=RAM,space=1
    79                          	psect	ramdata5,class=RAM,space=1
    80                          	psect	romdata5,class=BANKROM,space=0
    81                          	psect	bss6,class=RAM,space=1
    82                          	psect	nvram6,class=RAM,space=1
    83                          	psect	rbit6,bit,class=RAM,space=1
    84                          	psect	nvbit6,bit,class=RAM,space=1
    85                          	psect	ramdata6,class=RAM,space=1
    86                          	psect	romdata6,class=BANKROM,space=0
    87                          	psect	bss7,class=RAM,space=1
    88                          	psect	nvram7,class=RAM,space=1
    89                          	psect	rbit7,bit,class=RAM,space=1
    90                          	psect	nvbit7,bit,class=RAM,space=1
    91                          	psect	ramdata7,class=RAM,space=1
    92                          	psect	romdata7,class=BANKROM,space=0
    93                          
    94                          ;Declare areas defined in usermodules and other assembler code
    95                          	psect	InterruptRAM,class=RAM,space=1
    96                          	psect	LTRX_RAM,class=RAM,space=1
    97                          	psect	bss,class=RAM,space=1
    98                          
    99                          	global	start,startup,_main
   100                          	global	reset_vec,intlevel0,intlevel1,intlevel2
   101  00A5                    intlevel0:
   102  00A5                    intlevel1:
   103  00A5                    intlevel2:		; for C funcs called from assembler
   104                          
   105                          	fnconf	fnauto,??,?
   106                          	fnroot	_main
   107  006C                    TMP_DR0	equ	108
   108  006D                    TMP_DR1	equ	109
   109  006E                    TMP_DR2	equ	110
   110  006F                    TMP_DR3	equ	111
   111  00D0                    CUR_PP	equ	208
   112  00D1                    STK_PP	equ	209
   113  00D3                    IDX_PP	equ	211
   114  00D4                    MVR_PP	equ	212
   115  00D5                    MVW_PP	equ	213
   116  00F7                    CPU_F	equ	247
   117                          	psect	vectors
   118  0000                    reset_vec:
   119  0000                    start:
   120                          	global	__Start
   121  0000  7D 7F5A           	ljmp	__Start
   122                          
   123                          	psect	init
   124  7CC9                    startup:
   125  7CC9  62 E3 38          	M8C_ClearWDT
   126  7CCC  71 80             	or	f, 0x80	;select multiple RAM page mode
   127  7CCE  70 BF             	and	f, 0xBF
   128                          
   129                          ;	Clear uninitialized variables in bank 0
   130                          	global	__Lbss0
   131  7CD0  62 D0 00          	mov	reg[CUR_PP],0
   132  7CD3  50 00             	mov	a,0
   133  7CD5  53 00             	mov	[__Lbss0+0],a
   134                          
   135                          ;	Copy initialized data into bank 1
   136                          	global	__Lromdata1,__Lramdata1
   137  7CD7  62 D1 01          	mov	reg[STK_PP],1
   138  7CDA  57 00             	mov	x,low __Lromdata1
   139  7CDC  50 00             	mov	a,low __Lramdata1
   140  7CDE  4E                	swap	a,sp
   141  7CDF                    dataloop1:
   142  7CDF  50 01             	mov	a,high __Lromdata1
   143  7CE1  28                	romx
   144  7CE2  08                	push	a
   145  7CE3  75                	inc	x
   146  7CE4  5B                		mov	a,x
   147  7CE5  39 00             cmp	a,low (__Lromdata1+256)
   148  7CE7  BFF7              	jnz	dataloop1
   149                          
   150                          ;	Clear uninitialized variables in bank 2
   151                          	global	__Lbss2
   152  7CE9  62 D1 02          	mov	reg[STK_PP],2
   153  7CEC  50 00             	mov	a,low __Lbss2
   154  7CEE  4E                	swap	a,sp
   155  7CEF  50 00             	mov	a,0
   156  7CF1  57 15             	mov	x,21
   157  7CF3                    bssloop2:
   158  7CF3  08                	push	a
   159  7CF4  79                	dec	x
   160  7CF5  BFFD              	jnz	bssloop2
   161  7CF7  62 D1 07          	mov	reg[STK_PP],7
   162  7CFA  50 00             	mov	a,low __Lstackps
   163  7CFC  4E                	swap	a,sp
   164                          
   165  7CFD  7D 7BE0           	ljmp	_main
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Sat Feb 07 16:14:23 2009
    __Lramdata1 0100       __Lstackps 0700      __Lromdata1 0100            _main 7BE0            start 0000        dataloop1 7CDF  
         CUR_PP 00D0           STK_PP 00D1        intlevel0 00A5        intlevel1 00A5        intlevel2 00A5        reset_vec 0000  
       bssloop2 7CF3          __Lbss0 0000          __Lbss2 0200          __Start 7F5A          startup 7CC9  __stack_start__ 0700  
