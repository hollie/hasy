//*****************************************************************************
//*****************************************************************************
//  FILENAME:  LTRX.h
//  Version: 5.2, Updated on 2008/6/23 at 12:26:23
//  Generated by PSoC Designer ???
//
//  DESCRIPTION:  UART User Module C Language interface file for the
//                22/24/25/26/27xxx PSoC family of devices.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

// include the global header file
#include <m8c.h>

#define LTRX_RXBUF_ENABLE 1

//-------------------------------------------------
// Prototypes of the LTRX API.
//-------------------------------------------------

#if ( LTRX_RXBUF_ENABLE )
extern char LTRX_aRxBuffer[];
extern BYTE LTRX_bRxCnt;
extern BYTE LTRX_fStatus;
#endif



// Create pragmas to support proper argument and return value passing

#pragma fastcall16  LTRX_SetTxIntMode
#pragma fastcall16  LTRX_EnableInt
#pragma fastcall16  LTRX_DisableInt
#pragma fastcall16  LTRX_Start
#pragma fastcall16  LTRX_Stop
#pragma fastcall16  LTRX_SendData
#pragma fastcall16  LTRX_bReadTxStatus
#pragma fastcall16  LTRX_bReadRxData
#pragma fastcall16  LTRX_bReadRxStatus
#pragma fastcall16  LTRX_PutSHexByte
#pragma fastcall16  LTRX_PutSHexInt
#pragma fastcall16  LTRX_CPutString
#pragma fastcall16  LTRX_PutString
#pragma fastcall16  LTRX_PutChar
#pragma fastcall16  LTRX_Write
#pragma fastcall16  LTRX_CWrite

#pragma fastcall16  LTRX_cGetChar
#pragma fastcall16  LTRX_cReadChar
#pragma fastcall16  LTRX_iReadChar
#pragma fastcall16  LTRX_IntCntl
#pragma fastcall16  LTRX_TxIntMode
#pragma fastcall16  LTRX_PutCRLF

#if ( LTRX_RXBUF_ENABLE )
#pragma fastcall16  LTRX_CmdReset
#pragma fastcall16  LTRX_bCmdCheck
#pragma fastcall16  LTRX_bErrCheck
#pragma fastcall16  LTRX_bCmdLength
#pragma fastcall16  LTRX_szGetParam
#pragma fastcall16  LTRX_szGetRestOfParams
#endif

//**************************************************
// Prototypes of UART API.
//**************************************************
extern void  LTRX_SetTxIntMode(BYTE bTxIntMode);
extern void  LTRX_EnableInt(void);
extern void  LTRX_DisableInt(void);
extern void  LTRX_Start(BYTE bParitySetting);
extern void  LTRX_Stop(void);
extern void  LTRX_SendData(BYTE bTxData);
extern BYTE  LTRX_bReadTxStatus(void);
extern BYTE  LTRX_bReadRxData(void);
extern BYTE  LTRX_bReadRxStatus(void);

// High level TX functions
extern void   LTRX_CPutString(const BYTE * szRomString);
extern void   LTRX_PutString(BYTE * szRamString);
extern void   LTRX_PutChar(CHAR cData);
extern void   LTRX_Write(BYTE * szRamString, BYTE bCount);
extern void   LTRX_CWrite(const BYTE * szRomString, INT iCount);
extern void   LTRX_PutSHexByte(BYTE bValue);
extern void   LTRX_PutSHexInt(INT iValue);
extern void   LTRX_PutCRLF(void);
extern void   LTRX_TxIntMode(BYTE bMask);

// High level RX functions
extern CHAR   LTRX_cGetChar(void);
extern CHAR   LTRX_cReadChar(void);
extern INT    LTRX_iReadChar(void);
extern void   LTRX_IntCntl(BYTE bMask);

#if ( LTRX_RXBUF_ENABLE )
extern void   LTRX_CmdReset(void);
extern BYTE   LTRX_bCmdCheck(void);
extern BYTE   LTRX_bErrCheck(void);
extern BYTE   LTRX_bCmdLength(void);
extern BYTE * LTRX_szGetParam(void);
extern BYTE * LTRX_szGetRestOfParams(void);
#endif

//-------------------------------------------------
// Defines for LTRX API's.
//-------------------------------------------------



//------------------------------------
//  Parity masks
//------------------------------------
#define  LTRX_PARITY_NONE        0x00
#define  LTRX_PARITY_EVEN        0x02
#define  LTRX_PARITY_ODD         0x06
//------------------------------------
//  Transmitter Status Register masks
//------------------------------------
#define  LTRX_TX_COMPLETE        0x20
#define  LTRX_TX_BUFFER_EMPTY    0x10

//------------------------------------
//  Receiver Status Register masks
//------------------------------------
#define  LTRX_RX_ACTIVE          0x10
#define  LTRX_RX_COMPLETE        0x08
#define  LTRX_RX_REG_FULL        0x08
#define  LTRX_RX_PARITY_ERROR    0x80
#define  LTRX_RX_OVERRUN_ERROR   0x40
#define  LTRX_RX_FRAMING_ERROR   0x20
#define  LTRX_RX_ERROR           0xE0
#define  LTRX_RX_NO_ERROR        0xE0          // This symbol is deprecated and will removed in the future

#define  LTRX_RX_NO_DATA         0x01

#define  LTRX_RX_BUF_ERROR                0xF0  // Mask for any Rx that may occur.
#define  LTRX_RX_BUF_OVERRUN              0x10  // This indicates the software buffer has
                                                           // been over run.
#define  LTRX_RX_BUF_CMDTERM              0x01  // Command terminator has been received.

// Interrupt control used with  LTRX_IntCntl() function
#define LTRX_ENABLE_RX_INT  0x01
#define LTRX_ENABLE_TX_INT  0x02
#define LTRX_DISABLE_RX_INT 0x00
#define LTRX_DISABLE_TX_INT 0x00

// Interrupt Modes
#define LTRX_INT_MODE_TX_REG_EMPTY 0x00
#define LTRX_INT_MODE_TX_COMPLETE  0x01

//-------------------------------------------------
// Register Address Constants for LTRX
//-------------------------------------------------

#pragma ioport  LTRX_TX_CONTROL_REG:    0x03b               // Control register
BYTE            LTRX_TX_CONTROL_REG;
#pragma ioport  LTRX_TX_SHIFT_REG:  0x038                   // TX Shift Register register
BYTE            LTRX_TX_SHIFT_REG;
#pragma ioport  LTRX_TX_BUFFER_REG: 0x039                   // TX Buffer Register
BYTE            LTRX_TX_BUFFER_REG;
#pragma ioport  LTRX_TX_FUNC_REG:   0x138                   // Function register
BYTE            LTRX_TX_FUNC_REG;
#pragma ioport  LTRX_TX_INPUT_REG:  0x139                   // Input register
BYTE            LTRX_TX_INPUT_REG;
#pragma ioport  LTRX_TX_OUTPUT_REG: 0x13a                   // Output register
BYTE            LTRX_TX_OUTPUT_REG;
#pragma ioport  LTRX_RX_CONTROL_REG:    0x03f               // Control register
BYTE            LTRX_RX_CONTROL_REG;
#pragma ioport  LTRX_RX_SHIFT_REG:  0x03c                   // RX Shift Register register
BYTE            LTRX_RX_SHIFT_REG;
#pragma ioport  LTRX_RX_BUFFER_REG: 0x03e                   // RX Buffer Register
BYTE            LTRX_RX_BUFFER_REG;
#pragma ioport  LTRX_RX_FUNC_REG:   0x13c                   // Function register
BYTE            LTRX_RX_FUNC_REG;
#pragma ioport  LTRX_RX_INPUT_REG:  0x13d                   // Input register
BYTE            LTRX_RX_INPUT_REG;
#pragma ioport  LTRX_RX_OUTPUT_REG: 0x13e                   // Output register
BYTE            LTRX_RX_OUTPUT_REG;

#pragma ioport  LTRX_TX_INT_REG:       0x0e1               // TX Interrupt Mask Register
BYTE            LTRX_TX_INT_REG;
#pragma ioport  LTRX_RX_INT_REG:       0x0e1               // RX Interrupt Mask Register
BYTE            LTRX_RX_INT_REG;

// Masks to use with LTRX_TX_INT_REG and LTRX_RX_INT_REG Registers
#define LTRX_TX_INT_MASK            (0x40) // TX Interrupt register Mask
#define LTRX_RX_INT_MASK            (0x80) // RX Interrupt register Mask


//-------------------------------------------
//       WARNING WARNING WARNING
// The following defines and function prototypes
// are for backwards compatibility only and
// should not be used for new designs.
//-------------------------------------------
#pragma fastcall16  bLTRX_ReadTxStatus
#pragma fastcall16  bLTRX_ReadRxData
#pragma fastcall16  bLTRX_ReadRxStatus
extern BYTE  bLTRX_ReadTxStatus(void);
extern BYTE  bLTRX_ReadRxData(void);
extern BYTE  bLTRX_ReadRxStatus(void);
//------------------------------------
//  Parity masks
//------------------------------------
#define  UART_PARITY_NONE        0x00
#define  UART_PARITY_EVEN        0x02
#define  UART_PARITY_ODD         0x06

//------------------------------------
//  Transmitter Status Register masks
//------------------------------------
#define  UART_TX_COMPLETE        0x20
#define  UART_TX_BUFFER_EMPTY    0x10

//------------------------------------
//  Receiver Status Register masks
//------------------------------------
#define  UART_RX_ACTIVE          0x10
#define  UART_RX_COMPLETE        0x08
#define  UART_RX_PARITY_ERROR    0x80
#define  UART_RX_OVERRUN_ERROR   0x40
#define  UART_RX_FRAMING_ERROR   0x20
#define  UART_RX_NO_ERROR        0xE0

//-------------------------------------------
//             END WARNING
//-------------------------------------------
// end of file LTRX.h
