

HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:20 2009


     1                          	processor	CY8C29566
     2                          opt	jumpopt
     3                          opt	noundef
     4                          setz	macro
     5                          	or	f,2
     6  748D                    	endm
     7                          clrz	macro
     8                          	and	f,not 2
     9  748D                    	endm
    10                          setc	macro
    11                          	or	f,4
    12  748D                    	endm
    13                          clrc	macro
    14                          	and	f,not 4
    15  748D                    	endm
    16                          cplc	macro
    17                          	xor	f,4
    18  748D                    	endm
    19                          nand	macro nand_arg1,nand_arg2
    20                          	and	nand_arg1,not (nand_arg2)
    21  748D                    	endm
    22  006C                    TMP_DR0	equ	108
    23  006D                    TMP_DR1	equ	109
    24  006E                    TMP_DR2	equ	110
    25  006F                    TMP_DR3	equ	111
    26  00D0                    CUR_PP	equ	208
    27  00D1                    STK_PP	equ	209
    28  00D3                    IDX_PP	equ	211
    29  00D4                    MVR_PP	equ	212
    30  00D5                    MVW_PP	equ	213
    31  00E8                    MUL0_X	equ	232
    32  00E9                    MUL0_Y	equ	233
    33  00EA                    MUL0_DH	equ	234
    34  00EB                    MUL0_DL	equ	235
    35  00A8                    MUL1_X	equ	168
    36  00A9                    MUL1_Y	equ	169
    37  00AA                    MUL1_DH	equ	170
    38  00AB                    MUL1_DL	equ	171
    39                          ;stack_size is 72 bss 39
    40                          
    41                          ; Stacksize: 72; Bank 0 TOTAL: 72 (0x48); Other banks TOTAL: 295 (0x127)
    42                          ;stack_size is 72 bss 39
    43                          
    44                          ; Stacksize: 72; Bank 0 TOTAL: -223 (0xFFFFFF21); Other banks TOTAL: 295 (0x127)
    45  0001                    main@strPtr	equ	??_main+0
    46                          	global	main@strPtr
    47  0004                    get_sensors@next_found	equ	??_get_sensors+0
    48                          	global	get_sensors@next_found
    49  0004                    oo_report@data	equ	??_oo_report+0
    50                          	global	oo_report@data
    51  0011                    oo_report@id	equ	??_oo_report+13
    52                          	global	oo_report@id
    53  0029                    oo_print_data@cntr	equ	??_oo_print_data+0
    54                          	global	oo_print_data@cntr
    55  001C                    oo_print_data@data	equ	?_oo_print_data+0
    56                          	global	oo_print_data@data
    57  001C                    oo_wait_for_completion@counter	equ	??_oo_wait_for_completion+0
    58                          	global	oo_wait_for_completion@counter
    59  0029                    oo_read_device@data	equ	??_oo_read_device+0
    60                          	global	oo_read_device@data
    61  0036                    oo_read_device@crc	equ	??_oo_read_device+13
    62                          	global	oo_read_device@crc
    63  0006                    print_id@cntr	equ	??_print_id+0
    64                          	global	print_id@cntr
    65  0004                    print_id@id	equ	?_print_id+0
    66                          	global	print_id@id
    67  001D                    delay_10ms@counter	equ	??_delay_10ms+0
    68                          	global	delay_10ms@counter
    69  003A                    oo_read_scratchpad@counter	equ	??_oo_read_scratchpad+0
    70                          	global	oo_read_scratchpad@counter
    71  003B                    oo_tx_byte@data	equ	?_oo_tx_byte+0
    72                          	global	oo_tx_byte@data
    73  003B                    oo_rx_byte@data	equ	??_oo_rx_byte+0
    74                          	global	oo_rx_byte@data
    75  003C                    oo_crc_shuffle_byte@input	equ	?_oo_crc_shuffle_byte+0
    76                          	global	oo_crc_shuffle_byte@input
    77                          ;Data sizes: Strings 379, constant 4, data 256, bss 39, persistent 0 stack 71
    78                          	global	_main
    79                          	global	??_main
    80                          	global	?_main
    81                          	psect	maintext,class=CODE,space=0
    82                          
    83                          ; *************** function _main *****************
    84                          ; Defined at:
    85                          ;		line 70 in file "./main.c"
    86                          ; Parameters:
    87                          ;		None
    88                          ; Auto variables:
    89                          ;		strPtr      	       	type: PTR unsigned char ; Largest target is 2048
    90                          ;		 -> RAM(255), RAM(2048), 
    91                          ; Return value:
    92                          ;		type: void 
    93                          ;		size: 0
    94                          ; Registers used:
    95                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
    96                          ; Tracked objects:
    97                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
    98                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
    99                          ;		Unchanged: 
   100                          ; Data sizes:
   101                          ;		Autos:    2
   102                          ;		Params:   0
   103                          ;		Temp:     1
   104                          ;		Total:    3
   105                          ; This function calls:
   106                          ;		_hardware_init
   107                          ;		_get_sensors
   108                          ;		_get_temp
   109                          ;		_print_data
   110                          ;		_LTRX_bCmdCheck
   111                          ;		_LTRX_szGetParam
   112                          ;		_oo_report
   113                          ;		_print_help
   114                          ;		_LTRX_CmdReset
   115                          ; This function is called by:
   116                          ;		Startup code after reset
   117                          ; This function uses a non-reentrant model
   118                          ; 
   119                          	file	"./main.c"
   120                          	line	70
   121  0095                    	__size_of_main	equ	__end_of_main-_main
   122                          ;main.c: 69: void main()
   123                          ;main.c: 70: {
   124                          ;			
   125  7C6B                    _main:	
   126                          	opt	disable
   127                          	line	75
   128                          ;main.c: 72: char * strPtr;
   129                          ;main.c: 75: hardware_init();
   130  7C6B  71 80             	or	f, 0x80	;select multiple RAM page mode
   131                          	
   132  7C6D  7C 7848           	xcall	_hardware_init
   133                          	
   134                          	line	77
   135                          ;main.c: 77: get_sensors();
   136  7C70  71 80             	or	f, 0x80	;select multiple RAM page mode
   137                          	
   138  7C72  7C 760F           	xcall	_get_sensors
   139                          	
   140                          	line	78
   141                          ;main.c: 78: get_temp();
   142  7C75  71 80             	or	f, 0x80	;select multiple RAM page mode
   143                          	
   144  7C77  7C 748D           	xcall	_get_temp
   145                          	
   146                          	line	79
   147                          ;main.c: 79: print_data();
   148  7C7A  71 80             	or	f, 0x80	;select multiple RAM page mode
   149                          	
   150  7C7C  7C 76BD           	xcall	_print_data
   151                          	
   152                          	line	81
   153                          ;main.c: 81: while(1) {
   154                          ;			
   155  7C7F                    l8:	
   156                          	line	84
   157                          ;main.c: 84: if (LTRX_bCmdCheck()) {
   158  7C7F  71 80             	or	f, 0x80	;select multiple RAM page mode
   159  7C81  70 CF             	and	f, 0xCF   ;select user reg space
   160                          	
   161  7C83  7C 702F           	xcall	_LTRX_bCmdCheck
   162                          	
   163  7C86  38 00             	add	sp,0
   164  7C88  39 00             	cmp	a,(0)
   165  7C8A  A06F              	jz	l7
   166                          	line	85
   167                          ;main.c: 85: if(strPtr = LTRX_szGetParam()) {
   168  7C8C  71 80             	or	f, 0x80	;select multiple RAM page mode
   169  7C8E  70 CF             	and	f, 0xCF   ;select user reg space
   170                          	
   171  7C90  7C 7048           	xcall	_LTRX_szGetParam
   172                          	
   173  7C93  38 00             	add	sp,0
   174  7C95  64                	asl	a
   175  7C96  4B                	swap	a,x
   176  7C97  39 01             	cmp	a,1
   177  7C99  4B                	swap	a,x
   178  7C9A  6D                	rrc	a
   179  7C9B  31 80             	xor	a,80h
   180  7C9D  08                	push	a
   181  7C9E  5B                	mov	a,x
   182  7C9F  70 CF             	and	f, 0xCF   ;select user reg space
   183  7CA1  62 D0 00          	mov	reg[CUR_PP],0
   184  7CA4  53 02             	mov	[1+((main@strPtr)^0x0)],a
   185  7CA6  18                	pop	a
   186  7CA7  53 01             	mov	[0+((main@strPtr)^0x0)],a
   187  7CA9  51 01             	mov	a,[0+((main@strPtr)^0x0)]
   188  7CAB  39 00             	cmp	a,>(0)
   189  7CAD  B005              	jnz	u233
   190  7CAF  51 02             	mov	a,[1+((main@strPtr)^0x0)]
   191  7CB1  39 00             	cmp	a,<(0)
   192  7CB3                    u233:
   193  7CB3  A03D              	jz	l11
   194                          	line	86
   195                          ;main.c: 86: if (*strPtr == '#'){
   196  7CB5  70 CF             	and	f, 0xCF   ;select user reg space
   197  7CB7  62 D0 00          	mov	reg[CUR_PP],0
   198  7CBA  51 01             	mov	a,[0+((main@strPtr)^0x0)]
   199  7CBC  58 02             	mov	x,[1+((main@strPtr)^0x0)]
   200  7CBE  60 D3             	mov	reg[0xd3],a
   201  7CC0  52 00             	mov	a,[x+0]
   202  7CC2  39 23             	cmp	a,(023h)
   203  7CC4  B00E              	jnz	l12
   204                          	line	87
   205                          ;main.c: 87: get_sensors();
   206  7CC6  71 80             	or	f, 0x80	;select multiple RAM page mode
   207                          	
   208  7CC8  7C 760F           	xcall	_get_sensors
   209                          	
   210                          	line	88
   211                          ;main.c: 88: print_data();
   212  7CCB  71 80             	or	f, 0x80	;select multiple RAM page mode
   213                          	
   214  7CCD  7C 76BD           	xcall	_print_data
   215                          	
   216                          	line	89
   217                          ;main.c: 89: } else if (*strPtr == 'T'){
   218  7CD0  7D 7CF1           	xjmp	l11
   219                          ;			
   220  7CD3                    l12:	
   221  7CD3  70 CF             	and	f, 0xCF   ;select user reg space
   222  7CD5  62 D0 00          	mov	reg[CUR_PP],0
   223  7CD8  51 01             	mov	a,[0+((main@strPtr)^0x0)]
   224  7CDA  58 02             	mov	x,[1+((main@strPtr)^0x0)]
   225  7CDC  60 D3             	mov	reg[0xd3],a
   226  7CDE  52 00             	mov	a,[x+0]
   227  7CE0  39 54             	cmp	a,(054h)
   228  7CE2  B009              	jnz	l14
   229                          	line	90
   230                          ;main.c: 90: oo_report();
   231  7CE4  71 80             	or	f, 0x80	;select multiple RAM page mode
   232                          	
   233  7CE6  7C 778F           	xcall	_oo_report
   234                          	
   235                          	line	91
   236                          ;main.c: 91: } else {
   237  7CE9  7D 7CF1           	xjmp	l11
   238                          ;			
   239  7CEC                    l14:	
   240                          	line	92
   241                          ;main.c: 92: print_help();
   242  7CEC  71 80             	or	f, 0x80	;select multiple RAM page mode
   243                          	
   244  7CEE  7C 75E8           	xcall	_print_help
   245                          	
   246                          	line	93
   247                          ;			
   248  7CF1                    l15:	
   249                          ;			
   250  7CF1                    l13:	
   251                          	line	95
   252                          ;			
   253  7CF1                    l11:	
   254                          	line	96
   255                          ;main.c: 93: }
   256                          ;main.c: 95: }
   257                          ;main.c: 96: LTRX_CmdReset();
   258  7CF1  71 80             	or	f, 0x80	;select multiple RAM page mode
   259  7CF3  70 CF             	and	f, 0xCF   ;select user reg space
   260                          	
   261  7CF5  7C 7019           	xcall	_LTRX_CmdReset
   262                          	
   263  7CF8  38 00             	add	sp,0
   264                          	line	97
   265                          ;			
   266  7CFA                    l10:	
   267                          	line	98
   268                          ;			
   269  7CFA                    l7:	
   270                          	line	81
   271  7CFA  7D 7C7F           	xjmp	l8
   272  7CFD                    ___exit:	;where's that confounded watchdog?
   273  7CFD  7D 7CFD           	jmp	___exit
   274                          GLOBAL __end_of_main
   275  7D00                    	__end_of_main:
   276                          	FNSIZE	_main,3,0
   277                          ; =============== function _main ends ============
   278                          
   279                          	psect	maintext
   280                          	line	101
   281                          	signat	_main,88
   282                          	global	_get_temp
   283                          	global	??_get_temp
   284                          	global	?_get_temp
   285                          	psect	text,class=CODE,space=0
   286                          
   287  748D                    ___start_of_c_program_code:
   288                          
   289                          ; *************** function _get_temp *****************
   290                          ; Defined at:
   291                          ;		line 153 in file "./main.c"
   292                          ; Parameters:
   293                          ;		None
   294                          ; Auto variables:
   295                          ;		None
   296                          ; Return value:
   297                          ;		type: void 
   298                          ;		size: 0
   299                          ; Registers used:
   300                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   301                          ; Tracked objects:
   302                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   303                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   304                          ;		Unchanged: 
   305                          ; Data sizes:
   306                          ;		Autos:    0
   307                          ;		Params:   0
   308                          ;		Temp:     2
   309                          ;		Total:    2
   310                          ; This function calls:
   311                          ;		_OneWire_fReset
   312                          ;		_LTRX_CPutString
   313                          ;		_LTRX_PutCRLF
   314                          ;		_OneWire_WriteByte
   315                          ;		_OneWire_bReadByte
   316                          ;		_OneWire_SetROM
   317                          ;		_OneWire_fVerify
   318                          ; This function is called by:
   319                          ;		_main
   320                          ; This function uses a non-reentrant model
   321                          ; 
   322                          	file	"./main.c"
   323                          	line	153
   324  015B                    	__size_of_get_temp	equ	__end_of_get_temp-_get_temp
   325                          ;main.c: 153: void get_temp(){
   326                          ;			
   327  748D                    _get_temp:	
   328                          	opt	disable
   329                          	line	157
   330                          ;main.c: 157: if (!OneWire_fReset()){
   331  748D  71 80             	or	f, 0x80	;select multiple RAM page mode
   332  748F  70 CF             	and	f, 0xCF   ;select user reg space
   333                          	
   334  7491  7C 713D           	xcall	_OneWire_fReset
   335                          	
   336  7494  38 00             	add	sp,0
   337  7496  39 00             	cmp	a,(0)
   338  7498  B01A              	jnz	l24
   339                          	line	158
   340                          ;main.c: 158: LTRX_CPutString("No sensor found on bus");
   341  749A  57 1B             	mov	x,<(STR_15)
   342  749C  50 7F             	mov	a,>(STR_15)
   343  749E  71 80             	or	f, 0x80	;select multiple RAM page mode
   344  74A0  70 CF             	and	f, 0xCF   ;select user reg space
   345                          	
   346  74A2  7C 6FFE           	xcall	_LTRX_CPutString
   347                          	
   348  74A5  38 00             	add	sp,0
   349                          	line	159
   350                          ;main.c: 159: LTRX_PutCRLF();
   351  74A7  71 80             	or	f, 0x80	;select multiple RAM page mode
   352  74A9  70 CF             	and	f, 0xCF   ;select user reg space
   353                          	
   354  74AB  7C 7010           	xcall	_LTRX_PutCRLF
   355                          	
   356  74AE  38 00             	add	sp,0
   357                          	line	160
   358                          ;main.c: 160: return;
   359  74B0  7D 75E5           	xjmp	l23
   360                          	line	161
   361                          ;			
   362  74B3                    l24:	
   363                          	line	164
   364                          ;main.c: 161: }
   365                          ;main.c: 164: OneWire_WriteByte(0xCC);
   366  74B3  50 CC             	mov	a,<((0CCh))
   367  74B5  71 80             	or	f, 0x80	;select multiple RAM page mode
   368  74B7  70 CF             	and	f, 0xCF   ;select user reg space
   369                          	
   370  74B9  7C 7173           	xcall	_OneWire_WriteByte
   371                          	
   372  74BC  38 00             	add	sp,0
   373                          	line	167
   374                          ;main.c: 167: OneWire_WriteByte(0x44);
   375  74BE  50 44             	mov	a,<((044h))
   376  74C0  71 80             	or	f, 0x80	;select multiple RAM page mode
   377  74C2  70 CF             	and	f, 0xCF   ;select user reg space
   378                          	
   379  74C4  7C 7173           	xcall	_OneWire_WriteByte
   380                          	
   381  74C7  38 00             	add	sp,0
   382                          	line	170
   383                          ;main.c: 170: while (!OneWire_bReadByte()){};
   384  74C9  7D 74CC           	xjmp	l25
   385                          ;			
   386  74CC                    l25:	
   387  74CC  71 80             	or	f, 0x80	;select multiple RAM page mode
   388  74CE  70 CF             	and	f, 0xCF   ;select user reg space
   389                          	
   390  74D0  7C 718E           	xcall	_OneWire_bReadByte
   391                          	
   392  74D3  38 00             	add	sp,0
   393  74D5  39 00             	cmp	a,(0)
   394  74D7  AFF4              	jz	l25
   395                          ;			
   396  74D9                    l27:	
   397                          	line	174
   398                          ;main.c: 174: OneWire_fReset();
   399  74D9  71 80             	or	f, 0x80	;select multiple RAM page mode
   400  74DB  70 CF             	and	f, 0xCF   ;select user reg space
   401                          	
   402  74DD  7C 713D           	xcall	_OneWire_fReset
   403                          	
   404  74E0  38 00             	add	sp,0
   405                          	line	175
   406                          ;main.c: 175: OneWire_SetROM(id0);
   407  74E2  57 17             	mov	x,<((_id0|8000h))
   408  74E4  50 82             	mov	a,>((_id0|8000h))
   409  74E6  71 80             	or	f, 0x80	;select multiple RAM page mode
   410  74E8  70 CF             	and	f, 0xCF   ;select user reg space
   411                          	
   412  74EA  7C 71ED           	xcall	_OneWire_SetROM
   413                          	
   414  74ED  38 00             	add	sp,0
   415                          	line	176
   416                          ;main.c: 176: OneWire_fVerify();
   417  74EF  71 80             	or	f, 0x80	;select multiple RAM page mode
   418  74F1  70 CF             	and	f, 0xCF   ;select user reg space
   419                          	
   420  74F3  7C 734E           	xcall	_OneWire_fVerify
   421                          	
   422  74F6  38 00             	add	sp,0
   423                          	line	177
   424                          ;main.c: 177: OneWire_WriteByte(0xBE);
   425  74F8  50 BE             	mov	a,<((0BEh))
   426  74FA  71 80             	or	f, 0x80	;select multiple RAM page mode
   427  74FC  70 CF             	and	f, 0xCF   ;select user reg space
   428                          	
   429  74FE  7C 7173           	xcall	_OneWire_WriteByte
   430                          	
   431  7501  38 00             	add	sp,0
   432                          	line	178
   433                          ;main.c: 178: temp0 = OneWire_bReadByte();
   434  7503  71 80             	or	f, 0x80	;select multiple RAM page mode
   435  7505  70 CF             	and	f, 0xCF   ;select user reg space
   436                          	
   437  7507  7C 718E           	xcall	_OneWire_bReadByte
   438                          	
   439  750A  38 00             	add	sp,0
   440  750C  70 CF             	and	f, 0xCF   ;select user reg space
   441  750E  62 D0 00          	mov	reg[CUR_PP],0
   442  7511  53 04             	mov	[(??_get_temp^0x0)+0+0],a
   443  7513  51 04             	mov	a,[(??_get_temp^0x0)+0+0]
   444  7515  71 80             	or	f, 0x80	;select multiple RAM page mode
   445  7517  62 D0 02          	mov	reg[CUR_PP],2
   446  751A  53 12             	mov	[1+((_temp0)^0x200)],a
   447  751C  50 00             	mov	a,0
   448  751E  53 11             	mov	[0+((_temp0)^0x200)],a
   449                          	line	179
   450                          ;main.c: 179: temp0 += OneWire_bReadByte() << 8;
   451                          	
   452  7520  7C 718E           	xcall	_OneWire_bReadByte
   453                          	
   454  7523  38 00             	add	sp,0
   455  7525  70 CF             	and	f, 0xCF   ;select user reg space
   456  7527  62 D0 00          	mov	reg[CUR_PP],0
   457  752A  53 05             	mov	[(??_get_temp^0x0)+0+0+1],a
   458  752C  55 04  00         	mov	[(??_get_temp^0x0)+0+0],0
   459+ 752F  50 08             	mov	a,<((08h))
   460  7531  7D 7538           	xjmp	u243
   461  7534                    u254:
   462  7534  65 05             	asl	[(??_get_temp^0x0)+0+1]
   463  7536  6B 04             	rlc	[(??_get_temp^0x0)+0+0]
   464  7538                    u243:
   465  7538  78                	dec	a
   466  7539  DFFA              	jnc	u254
   467  753B  71 80             	or	f, 0x80	;select multiple RAM page mode
   468  753D  62 D0 02          	mov	reg[CUR_PP],2
   469  7540  51 12             	mov	a,[1+((_temp0)^0x200)]
   470  7542  62 D0 00          	mov	reg[CUR_PP],0
   471  7545  02 05             	add	a,[(??_get_temp^0x0)+0+1]
   472  7547  62 D0 02          	mov	reg[CUR_PP],2
   473  754A  53 12             	mov	[1+((_temp0)^0x200)],a
   474  754C  51 11             	mov	a,[0+((_temp0)^0x200)]
   475  754E  62 D0 00          	mov	reg[CUR_PP],0
   476  7551  0A 04             	adc	a,[(??_get_temp^0x0)+0+0]
   477  7553  62 D0 02          	mov	reg[CUR_PP],2
   478  7556  53 11             	mov	[0+((_temp0)^0x200)],a
   479                          	line	182
   480                          ;main.c: 182: OneWire_fReset();
   481                          	
   482  7558  7C 713D           	xcall	_OneWire_fReset
   483                          	
   484  755B  38 00             	add	sp,0
   485                          	line	183
   486                          ;main.c: 183: OneWire_SetROM(id1);
   487  755D  57 1F             	mov	x,<((_id1|8000h))
   488  755F  50 82             	mov	a,>((_id1|8000h))
   489  7561  71 80             	or	f, 0x80	;select multiple RAM page mode
   490  7563  70 CF             	and	f, 0xCF   ;select user reg space
   491                          	
   492  7565  7C 71ED           	xcall	_OneWire_SetROM
   493                          	
   494  7568  38 00             	add	sp,0
   495                          	line	184
   496                          ;main.c: 184: OneWire_fVerify();
   497  756A  71 80             	or	f, 0x80	;select multiple RAM page mode
   498  756C  70 CF             	and	f, 0xCF   ;select user reg space
   499                          	
   500  756E  7C 734E           	xcall	_OneWire_fVerify
   501                          	
   502  7571  38 00             	add	sp,0
   503                          	line	185
   504                          ;main.c: 185: OneWire_WriteByte(0xBE);
   505  7573  50 BE             	mov	a,<((0BEh))
   506  7575  71 80             	or	f, 0x80	;select multiple RAM page mode
   507  7577  70 CF             	and	f, 0xCF   ;select user reg space
   508                          	
   509  7579  7C 7173           	xcall	_OneWire_WriteByte
   510                          	
   511  757C  38 00             	add	sp,0
   512                          	line	186
   513                          ;main.c: 186: temp1 = OneWire_bReadByte();
   514  757E  71 80             	or	f, 0x80	;select multiple RAM page mode
   515  7580  70 CF             	and	f, 0xCF   ;select user reg space
   516                          	
   517  7582  7C 718E           	xcall	_OneWire_bReadByte
   518                          	
   519  7585  38 00             	add	sp,0
   520  7587  70 CF             	and	f, 0xCF   ;select user reg space
   521  7589  62 D0 00          	mov	reg[CUR_PP],0
   522  758C  53 04             	mov	[(??_get_temp^0x0)+0+0],a
   523  758E  51 04             	mov	a,[(??_get_temp^0x0)+0+0]
   524  7590  71 80             	or	f, 0x80	;select multiple RAM page mode
   525  7592  62 D0 02          	mov	reg[CUR_PP],2
   526  7595  53 14             	mov	[1+((_temp1)^0x200)],a
   527  7597  50 00             	mov	a,0
   528  7599  53 13             	mov	[0+((_temp1)^0x200)],a
   529                          	line	187
   530                          ;main.c: 187: temp1 += OneWire_bReadByte() << 8;
   531                          	
   532  759B  7C 718E           	xcall	_OneWire_bReadByte
   533                          	
   534  759E  38 00             	add	sp,0
   535  75A0  70 CF             	and	f, 0xCF   ;select user reg space
   536  75A2  62 D0 00          	mov	reg[CUR_PP],0
   537  75A5  53 05             	mov	[(??_get_temp^0x0)+0+0+1],a
   538  75A7  55 04  00         	mov	[(??_get_temp^0x0)+0+0],0
   539  75AA  50 08             	mov	a,<((08h))
   540  75AC  7D 75B3           	xjmp	u263
   541  75AF                    u274:
   542  75AF  65 05             	asl	[(??_get_temp^0x0)+0+1]
   543  75B1  6B 04             	rlc	[(??_get_temp^0x0)+0+0]
   544  75B3                    u263:
   545  75B3  78                	dec	a
   546  75B4  DFFA              	jnc	u274
   547  75B6  71 80             	or	f, 0x80	;select multiple RAM page mode
   548  75B8  62 D0 02          	mov	reg[CUR_PP],2
   549  75BB  51 14             	mov	a,[1+((_temp1)^0x200)]
   550  75BD  62 D0 00          	mov	reg[CUR_PP],0
   551  75C0  02 05             	add	a,[(??_get_temp^0x0)+0+1]
   552  75C2  62 D0 02          	mov	reg[CUR_PP],2
   553  75C5  53 14             	mov	[1+((_temp1)^0x200)],a
   554  75C7  51 13             	mov	a,[0+((_temp1)^0x200)]
   555  75C9  62 D0 00          	mov	reg[CUR_PP],0
   556  75CC  0A 04             	adc	a,[(??_get_temp^0x0)+0+0]
   557  75CE  62 D0 02          	mov	reg[CUR_PP],2
   558  75D1  53 13             	mov	[0+((_temp1)^0x200)],a
   559                          	line	189
   560                          ;main.c: 189: LTRX_CPutString("Conversion/grabbing done...");
   561  75D3  57 B8             	mov	x,<(STR_16)
   562  75D5  50 7E             	mov	a,>(STR_16)
   563                          	
   564  75D7  7C 6FFE           	xcall	_LTRX_CPutString
   565                          	
   566  75DA  38 00             	add	sp,0
   567                          	line	190
   568                          ;main.c: 190: LTRX_PutCRLF();
   569  75DC  71 80             	or	f, 0x80	;select multiple RAM page mode
   570  75DE  70 CF             	and	f, 0xCF   ;select user reg space
   571                          	
   572  75E0  7C 7010           	xcall	_LTRX_PutCRLF
   573                          	
   574  75E3  38 00             	add	sp,0
   575                          	line	192
   576                          ;main.c: 192: }
   577  75E5                    l23:
   578                          ;			
   579  75E5  70 CF             	and	f, 0xCF   ;select user reg space
   580                          	
   581  75E7  7F                	ret
   582                          GLOBAL __end_of_get_temp
   583  75E8                    	__end_of_get_temp:
   584                          	FNSIZE	_get_temp,2,0
   585                          ; =============== function _get_temp ends ============
   586                          
   587                          	signat	_get_temp,88
   588                          	global	_print_help
   589                          	global	??_print_help
   590                          	global	?_print_help
   591                          	psect	text
   592                          
   593                          ; *************** function _print_help *****************
   594                          ; Defined at:
   595                          ;		line 62 in file "./main.c"
   596                          ; Parameters:
   597                          ;		None
   598                          ; Auto variables:
   599                          ;		None
   600                          ; Return value:
   601                          ;		type: void 
   602                          ;		size: 0
   603                          ; Registers used:
   604                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   605                          ; Tracked objects:
   606                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   607                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   608                          ;		Unchanged: 
   609                          ; Data sizes:
   610                          ;		Autos:    0
   611                          ;		Params:   0
   612                          ;		Temp:     0
   613                          ;		Total:    0
   614                          ; This function calls:
   615                          ;		_print_header
   616                          ;		_LTRX_PutCRLF
   617                          ;		_LTRX_CPutString
   618                          ; This function is called by:
   619                          ;		_main
   620                          ; This function uses a non-reentrant model
   621                          ; 
   622                          	file	"./main.c"
   623                          	line	62
   624  0027                    	__size_of_print_help	equ	__end_of_print_help-_print_help
   625                          ;main.c: 62: void print_help(){
   626                          ;			
   627  75E8                    _print_help:	
   628                          	opt	disable
   629                          	line	63
   630                          ;main.c: 63: print_header();
   631  75E8  71 80             	or	f, 0x80	;select multiple RAM page mode
   632                          	
   633  75EA  7C 7AEF           	xcall	_print_header
   634                          	
   635                          	line	64
   636                          ;main.c: 64: LTRX_PutCRLF();
   637  75ED  71 80             	or	f, 0x80	;select multiple RAM page mode
   638  75EF  70 CF             	and	f, 0xCF   ;select user reg space
   639                          	
   640  75F1  7C 7010           	xcall	_LTRX_PutCRLF
   641                          	
   642  75F4  38 00             	add	sp,0
   643                          	line	65
   644                          ;main.c: 65: LTRX_CPutString("Press 'T' to initiate temperature conversion and to get a report");
   645  75F6  57 00             	mov	x,<(STR_10)
   646  75F8  50 7E             	mov	a,>(STR_10)
   647  75FA  71 80             	or	f, 0x80	;select multiple RAM page mode
   648  75FC  70 CF             	and	f, 0xCF   ;select user reg space
   649                          	
   650  75FE  7C 6FFE           	xcall	_LTRX_CPutString
   651                          	
   652  7601  38 00             	add	sp,0
   653                          	line	66
   654                          ;main.c: 66: LTRX_PutCRLF();
   655  7603  71 80             	or	f, 0x80	;select multiple RAM page mode
   656  7605  70 CF             	and	f, 0xCF   ;select user reg space
   657                          	
   658  7607  7C 7010           	xcall	_LTRX_PutCRLF
   659                          	
   660  760A  38 00             	add	sp,0
   661                          	line	67
   662                          ;main.c: 67: }
   663  760C                    l5:
   664                          ;			
   665  760C  70 CF             	and	f, 0xCF   ;select user reg space
   666                          	
   667  760E  7F                	ret
   668                          GLOBAL __end_of_print_help
   669  760F                    	__end_of_print_help:
   670                          	FNSIZE	_print_help,0,0
   671                          ; =============== function _print_help ends ============
   672                          
   673                          	signat	_print_help,88
   674                          	global	_get_sensors
   675                          	global	??_get_sensors
   676                          	global	?_get_sensors
   677                          	psect	text
   678                          
   679                          ; *************** function _get_sensors *****************
   680                          ; Defined at:
   681                          ;		line 124 in file "./main.c"
   682                          ; Parameters:
   683                          ;		None
   684                          ; Auto variables:
   685                          ;		next_found  	       	type: unsigned char 
   686                          ; Return value:
   687                          ;		type: void 
   688                          ;		size: 0
   689                          ; Registers used:
   690                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   691                          ; Tracked objects:
   692                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   693                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   694                          ;		Unchanged: 
   695                          ; Data sizes:
   696                          ;		Autos:    1
   697                          ;		Params:   0
   698                          ;		Temp:     0
   699                          ;		Total:    1
   700                          ; This function calls:
   701                          ;		_OneWire_fReset
   702                          ;		_LTRX_CPutString
   703                          ;		_LTRX_PutCRLF
   704                          ;		_OneWire_fFindFirst
   705                          ;		_OneWire_GetROM
   706                          ;		_OneWire_fFindNext
   707                          ; This function is called by:
   708                          ;		_main
   709                          ; This function uses a non-reentrant model
   710                          ; 
   711                          	file	"./main.c"
   712                          	line	124
   713  00AE                    	__size_of_get_sensors	equ	__end_of_get_sensors-_get_sensors
   714                          ;main.c: 124: void get_sensors(){
   715                          ;			
   716  760F                    _get_sensors:	
   717                          	opt	disable
   718                          	line	126
   719                          ;main.c: 126: char next_found = 0;
   720  760F  50 00             	mov	a,<((0))
   721  7611  70 CF             	and	f, 0xCF   ;select user reg space
   722  7613  62 D0 00          	mov	reg[CUR_PP],0
   723  7616  53 04             	mov	[0+((get_sensors@next_found)^0x0)],a
   724                          	line	128
   725                          ;main.c: 128: if (!OneWire_fReset()){
   726  7618  71 80             	or	f, 0x80	;select multiple RAM page mode
   727  761A  70 CF             	and	f, 0xCF   ;select user reg space
   728                          	
   729  761C  7C 713D           	xcall	_OneWire_fReset
   730                          	
   731  761F  38 00             	add	sp,0
   732  7621  39 00             	cmp	a,(0)
   733  7623  B01A              	jnz	l18
   734                          	line	129
   735                          ;main.c: 129: LTRX_CPutString("No sensor found on bus");
   736  7625  57 1B             	mov	x,<(STR_11)
   737  7627  50 7F             	mov	a,>(STR_11)
   738  7629  71 80             	or	f, 0x80	;select multiple RAM page mode
   739  762B  70 CF             	and	f, 0xCF   ;select user reg space
   740                          	
   741  762D  7C 6FFE           	xcall	_LTRX_CPutString
   742                          	
   743  7630  38 00             	add	sp,0
   744                          	line	130
   745                          ;main.c: 130: LTRX_PutCRLF();
   746  7632  71 80             	or	f, 0x80	;select multiple RAM page mode
   747  7634  70 CF             	and	f, 0xCF   ;select user reg space
   748                          	
   749  7636  7C 7010           	xcall	_LTRX_PutCRLF
   750                          	
   751  7639  38 00             	add	sp,0
   752                          	line	131
   753                          ;main.c: 131: return;
   754  763B  7D 76BA           	xjmp	l17
   755                          	line	132
   756                          ;			
   757  763E                    l18:	
   758                          	line	134
   759                          ;main.c: 132: }
   760                          ;main.c: 134: if (OneWire_fFindFirst()){
   761  763E  71 80             	or	f, 0x80	;select multiple RAM page mode
   762  7640  70 CF             	and	f, 0xCF   ;select user reg space
   763                          	
   764  7642  7C 7217           	xcall	_OneWire_fFindFirst
   765                          	
   766  7645  38 00             	add	sp,0
   767  7647  39 00             	cmp	a,(0)
   768  7649  A011              	jz	l19
   769                          	line	135
   770                          ;main.c: 135: OneWire_GetROM(id0);
   771  764B  57 17             	mov	x,<((_id0|8000h))
   772  764D  50 82             	mov	a,>((_id0|8000h))
   773  764F  71 80             	or	f, 0x80	;select multiple RAM page mode
   774  7651  70 CF             	and	f, 0xCF   ;select user reg space
   775                          	
   776  7653  7C 71C3           	xcall	_OneWire_GetROM
   777                          	
   778  7656  38 00             	add	sp,0
   779                          	line	136
   780                          ;main.c: 136: } else {
   781  7658  7D 7671           	xjmp	l20
   782                          ;			
   783  765B                    l19:	
   784                          	line	137
   785                          ;main.c: 137: LTRX_CPutString("Problem detecting sensor 1");
   786  765B  57 00             	mov	x,<(STR_12)
   787  765D  50 7F             	mov	a,>(STR_12)
   788  765F  71 80             	or	f, 0x80	;select multiple RAM page mode
   789  7661  70 CF             	and	f, 0xCF   ;select user reg space
   790                          	
   791  7663  7C 6FFE           	xcall	_LTRX_CPutString
   792                          	
   793  7666  38 00             	add	sp,0
   794                          	line	138
   795                          ;main.c: 138: LTRX_PutCRLF();
   796  7668  71 80             	or	f, 0x80	;select multiple RAM page mode
   797  766A  70 CF             	and	f, 0xCF   ;select user reg space
   798                          	
   799  766C  7C 7010           	xcall	_LTRX_PutCRLF
   800                          	
   801  766F  38 00             	add	sp,0
   802                          	line	139
   803                          ;			
   804  7671                    l20:	
   805                          	line	140
   806                          ;main.c: 139: }
   807                          ;main.c: 140: if (OneWire_fFindNext()){
   808  7671  71 80             	or	f, 0x80	;select multiple RAM page mode
   809  7673  70 CF             	and	f, 0xCF   ;select user reg space
   810                          	
   811  7675  7C 722C           	xcall	_OneWire_fFindNext
   812                          	
   813  7678  38 00             	add	sp,0
   814  767A  39 00             	cmp	a,(0)
   815  767C  A011              	jz	l21
   816                          	line	141
   817                          ;main.c: 141: OneWire_GetROM(id1);
   818  767E  57 1F             	mov	x,<((_id1|8000h))
   819  7680  50 82             	mov	a,>((_id1|8000h))
   820  7682  71 80             	or	f, 0x80	;select multiple RAM page mode
   821  7684  70 CF             	and	f, 0xCF   ;select user reg space
   822                          	
   823  7686  7C 71C3           	xcall	_OneWire_GetROM
   824                          	
   825  7689  38 00             	add	sp,0
   826                          	line	142
   827                          ;main.c: 142: } else {
   828  768B  7D 76A4           	xjmp	l22
   829                          ;			
   830  768E                    l21:	
   831                          	line	143
   832                          ;main.c: 143: LTRX_CPutString("Problem detecting sensor 2");
   833  768E  57 D4             	mov	x,<(STR_13)
   834  7690  50 7E             	mov	a,>(STR_13)
   835  7692  71 80             	or	f, 0x80	;select multiple RAM page mode
   836  7694  70 CF             	and	f, 0xCF   ;select user reg space
   837                          	
   838  7696  7C 6FFE           	xcall	_LTRX_CPutString
   839                          	
   840  7699  38 00             	add	sp,0
   841                          	line	144
   842                          ;main.c: 144: LTRX_PutCRLF();
   843  769B  71 80             	or	f, 0x80	;select multiple RAM page mode
   844  769D  70 CF             	and	f, 0xCF   ;select user reg space
   845                          	
   846  769F  7C 7010           	xcall	_LTRX_PutCRLF
   847                          	
   848  76A2  38 00             	add	sp,0
   849                          	line	145
   850                          ;			
   851  76A4                    l22:	
   852                          	line	147
   853                          ;main.c: 145: }
   854                          ;main.c: 147: LTRX_CPutString("get_sensors done...");
   855  76A4  57 32             	mov	x,<(STR_14)
   856  76A6  50 7F             	mov	a,>(STR_14)
   857  76A8  71 80             	or	f, 0x80	;select multiple RAM page mode
   858  76AA  70 CF             	and	f, 0xCF   ;select user reg space
   859                          	
   860  76AC  7C 6FFE           	xcall	_LTRX_CPutString
   861                          	
   862  76AF  38 00             	add	sp,0
   863                          	line	148
   864                          ;main.c: 148: LTRX_PutCRLF();
   865  76B1  71 80             	or	f, 0x80	;select multiple RAM page mode
   866  76B3  70 CF             	and	f, 0xCF   ;select user reg space
   867                          	
   868  76B5  7C 7010           	xcall	_LTRX_PutCRLF
   869                          	
   870  76B8  38 00             	add	sp,0
   871                          	line	151
   872                          ;main.c: 151: }
   873  76BA                    l17:
   874                          ;			
   875  76BA  70 CF             	and	f, 0xCF   ;select user reg space
   876                          	
   877  76BC  7F                	ret
   878                          GLOBAL __end_of_get_sensors
   879  76BD                    	__end_of_get_sensors:
   880                          	FNSIZE	_get_sensors,1,0
   881                          ; =============== function _get_sensors ends ============
   882                          
   883                          	signat	_get_sensors,88
   884                          	global	_print_data
   885                          	global	??_print_data
   886                          	global	?_print_data
   887                          	psect	text
   888                          
   889                          ; *************** function _print_data *****************
   890                          ; Defined at:
   891                          ;		line 32 in file "./main.c"
   892                          ; Parameters:
   893                          ;		None
   894                          ; Auto variables:
   895                          ;		None
   896                          ; Return value:
   897                          ;		type: void 
   898                          ;		size: 0
   899                          ; Registers used:
   900                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   901                          ; Tracked objects:
   902                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   903                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
   904                          ;		Unchanged: 
   905                          ; Data sizes:
   906                          ;		Autos:    0
   907                          ;		Params:   0
   908                          ;		Temp:     0
   909                          ;		Total:    0
   910                          ; This function calls:
   911                          ;		_LTRX_PutCRLF
   912                          ;		_LTRX_CPutString
   913                          ;		_print_id
   914                          ;		_LTRX_PutSHexInt
   915                          ; This function is called by:
   916                          ;		_main
   917                          ; This function uses a non-reentrant model
   918                          ; 
   919                          	file	"./main.c"
   920                          	line	32
   921  00D2                    	__size_of_print_data	equ	__end_of_print_data-_print_data
   922                          ;main.c: 31: void print_data()
   923                          ;main.c: 32: {
   924                          ;			
   925  76BD                    _print_data:	
   926                          	opt	disable
   927                          	line	33
   928                          ;main.c: 33: LTRX_PutCRLF();
   929  76BD  71 80             	or	f, 0x80	;select multiple RAM page mode
   930  76BF  70 CF             	and	f, 0xCF   ;select user reg space
   931                          	
   932  76C1  7C 7010           	xcall	_LTRX_PutCRLF
   933                          	
   934  76C4  38 00             	add	sp,0
   935                          	line	34
   936                          ;main.c: 34: LTRX_CPutString("OneWire gateway v.");
   937  76C6  57 46             	mov	x,<(STR_1)
   938  76C8  50 7F             	mov	a,>(STR_1)
   939  76CA  71 80             	or	f, 0x80	;select multiple RAM page mode
   940  76CC  70 CF             	and	f, 0xCF   ;select user reg space
   941                          	
   942  76CE  7C 6FFE           	xcall	_LTRX_CPutString
   943                          	
   944  76D1  38 00             	add	sp,0
   945                          	line	35
   946                          ;main.c: 35: LTRX_CPutString("1.0");
   947  76D3  57 71             	mov	x,<(STR_2)
   948  76D5  50 7F             	mov	a,>(STR_2)
   949  76D7  71 80             	or	f, 0x80	;select multiple RAM page mode
   950  76D9  70 CF             	and	f, 0xCF   ;select user reg space
   951                          	
   952  76DB  7C 6FFE           	xcall	_LTRX_CPutString
   953                          	
   954  76DE  38 00             	add	sp,0
   955                          	line	36
   956                          ;main.c: 36: LTRX_PutCRLF();
   957  76E0  71 80             	or	f, 0x80	;select multiple RAM page mode
   958  76E2  70 CF             	and	f, 0xCF   ;select user reg space
   959                          	
   960  76E4  7C 7010           	xcall	_LTRX_PutCRLF
   961                          	
   962  76E7  38 00             	add	sp,0
   963                          	line	37
   964                          ;main.c: 37: LTRX_CPutString("Node 1 ID: ");
   965  76E9  57 59             	mov	x,<(STR_3)
   966  76EB  50 7F             	mov	a,>(STR_3)
   967  76ED  71 80             	or	f, 0x80	;select multiple RAM page mode
   968  76EF  70 CF             	and	f, 0xCF   ;select user reg space
   969                          	
   970  76F1  7C 6FFE           	xcall	_LTRX_CPutString
   971                          	
   972  76F4  38 00             	add	sp,0
   973                          	line	38
   974                          ;main.c: 38: print_id(id0);
   975  76F6  50 17             	mov	a,<((_id0|8000h))
   976  76F8  70 CF             	and	f, 0xCF   ;select user reg space
   977  76FA  62 D0 00          	mov	reg[CUR_PP],0
   978  76FD  53 05             	mov	[1+((?_print_id)^0x0)],a
   979  76FF  50 82             	mov	a,>((_id0|8000h))
   980  7701  53 04             	mov	[0+((?_print_id)^0x0)],a
   981  7703  71 80             	or	f, 0x80	;select multiple RAM page mode
   982                          	
   983  7705  7C 7AA9           	xcall	_print_id
   984                          	
   985                          	line	39
   986                          ;main.c: 39: LTRX_CPutString(" - ");
   987  7708  57 75             	mov	x,<(STR_4)
   988  770A  50 7F             	mov	a,>(STR_4)
   989  770C  71 80             	or	f, 0x80	;select multiple RAM page mode
   990  770E  70 CF             	and	f, 0xCF   ;select user reg space
   991                          	
   992  7710  7C 6FFE           	xcall	_LTRX_CPutString
   993                          	
   994  7713  38 00             	add	sp,0
   995                          	line	40
   996                          ;main.c: 40: LTRX_PutSHexInt(temp0);
   997  7715  70 CF             	and	f, 0xCF   ;select user reg space
   998  7717  71 80             	or	f, 0x80	;select multiple RAM page mode
   999  7719  62 D0 02          	mov	reg[CUR_PP],2
  1000  771C  51 12             	mov	a,[1+((_temp0)^0x200)]
  1001  771E  58 11             	mov	x,[0+((_temp0)^0x200)]
  1002                          	
  1003  7720  7C 6F56           	xcall	_LTRX_PutSHexInt
  1004                          	
  1005  7723  38 00             	add	sp,0
  1006                          	line	41
  1007                          ;main.c: 41: LTRX_PutCRLF();
  1008  7725  71 80             	or	f, 0x80	;select multiple RAM page mode
  1009  7727  70 CF             	and	f, 0xCF   ;select user reg space
  1010                          	
  1011  7729  7C 7010           	xcall	_LTRX_PutCRLF
  1012                          	
  1013  772C  38 00             	add	sp,0
  1014                          	line	42
  1015                          ;main.c: 42: LTRX_CPutString("Node 2 ID: ");
  1016  772E  57 65             	mov	x,<(STR_5)
  1017  7730  50 7F             	mov	a,>(STR_5)
  1018  7732  71 80             	or	f, 0x80	;select multiple RAM page mode
  1019  7734  70 CF             	and	f, 0xCF   ;select user reg space
  1020                          	
  1021  7736  7C 6FFE           	xcall	_LTRX_CPutString
  1022                          	
  1023  7739  38 00             	add	sp,0
  1024                          	line	43
  1025                          ;main.c: 43: print_id(id1);
  1026  773B  50 1F             	mov	a,<((_id1|8000h))
  1027  773D  70 CF             	and	f, 0xCF   ;select user reg space
  1028  773F  62 D0 00          	mov	reg[CUR_PP],0
  1029  7742  53 05             	mov	[1+((?_print_id)^0x0)],a
  1030  7744  50 82             	mov	a,>((_id1|8000h))
  1031  7746  53 04             	mov	[0+((?_print_id)^0x0)],a
  1032  7748  71 80             	or	f, 0x80	;select multiple RAM page mode
  1033                          	
  1034  774A  7C 7AA9           	xcall	_print_id
  1035                          	
  1036                          	line	44
  1037                          ;main.c: 44: LTRX_CPutString(" - ");
  1038  774D  57 75             	mov	x,<(STR_6)
  1039  774F  50 7F             	mov	a,>(STR_6)
  1040  7751  71 80             	or	f, 0x80	;select multiple RAM page mode
  1041  7753  70 CF             	and	f, 0xCF   ;select user reg space
  1042                          	
  1043  7755  7C 6FFE           	xcall	_LTRX_CPutString
  1044                          	
  1045  7758  38 00             	add	sp,0
  1046                          	line	45
  1047                          ;main.c: 45: LTRX_PutSHexInt(temp1);
  1048  775A  70 CF             	and	f, 0xCF   ;select user reg space
  1049  775C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1050  775E  62 D0 02          	mov	reg[CUR_PP],2
  1051  7761  51 14             	mov	a,[1+((_temp1)^0x200)]
  1052  7763  58 13             	mov	x,[0+((_temp1)^0x200)]
  1053                          	
  1054  7765  7C 6F56           	xcall	_LTRX_PutSHexInt
  1055                          	
  1056  7768  38 00             	add	sp,0
  1057                          	line	46
  1058                          ;main.c: 46: LTRX_PutCRLF();
  1059  776A  71 80             	or	f, 0x80	;select multiple RAM page mode
  1060  776C  70 CF             	and	f, 0xCF   ;select user reg space
  1061                          	
  1062  776E  7C 7010           	xcall	_LTRX_PutCRLF
  1063                          	
  1064  7771  38 00             	add	sp,0
  1065                          	line	47
  1066                          ;main.c: 47: LTRX_CPutString("EOT");
  1067  7773  57 FC             	mov	x,<(STR_7)
  1068  7775  50 7E             	mov	a,>(STR_7)
  1069  7777  71 80             	or	f, 0x80	;select multiple RAM page mode
  1070  7779  70 CF             	and	f, 0xCF   ;select user reg space
  1071                          	
  1072  777B  7C 6FFE           	xcall	_LTRX_CPutString
  1073                          	
  1074  777E  38 00             	add	sp,0
  1075                          	line	48
  1076                          ;main.c: 48: LTRX_PutCRLF();
  1077  7780  71 80             	or	f, 0x80	;select multiple RAM page mode
  1078  7782  70 CF             	and	f, 0xCF   ;select user reg space
  1079                          	
  1080  7784  7C 7010           	xcall	_LTRX_PutCRLF
  1081                          	
  1082  7787  38 00             	add	sp,0
  1083                          	line	50
  1084                          ;main.c: 50: return;
  1085  7789  7D 778C           	xjmp	l3
  1086                          	line	51
  1087                          ;main.c: 51: }
  1088  778C                    l3:
  1089                          ;			
  1090  778C  70 CF             	and	f, 0xCF   ;select user reg space
  1091                          	
  1092  778E  7F                	ret
  1093                          GLOBAL __end_of_print_data
  1094  778F                    	__end_of_print_data:
  1095                          	FNSIZE	_print_data,0,0
  1096                          ; =============== function _print_data ends ============
  1097                          
  1098                          	signat	_print_data,88
  1099                          	global	_LTRX_bCmdCheck
  1100                          	global	_oo_report
  1101                          	global	??_oo_report
  1102                          	global	?_oo_report
  1103                          	psect	text
  1104                          
  1105                          ; *************** function _oo_report *****************
  1106                          ; Defined at:
  1107                          ;		line 308 in file "./oo.c"
  1108                          ; Parameters:
  1109                          ;		None
  1110                          ; Auto variables:
  1111                          ;		data        	       	type: struct s_oo_data
  1112                          ;		id          	       	type: unsigned char [8]
  1113                          ; Return value:
  1114                          ;		type: void 
  1115                          ;		size: 0
  1116                          ; Registers used:
  1117                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1118                          ; Tracked objects:
  1119                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1120                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1121                          ;		Unchanged: 
  1122                          ; Data sizes:
  1123                          ;		Autos:   21
  1124                          ;		Params:   0
  1125                          ;		Temp:     3
  1126                          ;		Total:   24
  1127                          ; This function calls:
  1128                          ;		_oo_busreset
  1129                          ;		_LTRX_CPutString
  1130                          ;		_LTRX_PutCRLF
  1131                          ;		_oo_start_conversion
  1132                          ;		_oo_wait_for_completion
  1133                          ;		_OneWire_fFindFirst
  1134                          ;		_OneWire_GetROM
  1135                          ;		_oo_read_device
  1136                          ;		_oo_print_data
  1137                          ; This function is called by:
  1138                          ;		_main
  1139                          ; This function uses a non-reentrant model
  1140                          ; 
  1141                          	file	"./oo.c"
  1142                          	line	308
  1143  00B9                    	__size_of_oo_report	equ	__end_of_oo_report-_oo_report
  1144                          ;oo.c: 308: void oo_report(){
  1145                          ;			
  1146  778F                    _oo_report:	
  1147                          	opt	disable
  1148                          	line	315
  1149                          ;oo.c: 310: oo_tdata data;
  1150                          ;oo.c: 312: unsigned char id[8];
  1151                          ;oo.c: 315: if (!oo_busreset()){
  1152  778F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1153                          	
  1154  7791  7C 7BEA           	xcall	_oo_busreset
  1155                          	
  1156  7794  39 00             	cmp	a,(0)
  1157  7796  B01A              	jnz	l65
  1158                          	line	316
  1159                          ;oo.c: 316: LTRX_CPutString("No OneWire devices found on the bus!");
  1160  7798  57 93             	mov	x,<(STR_22)
  1161  779A  50 7E             	mov	a,>(STR_22)
  1162  779C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1163  779E  70 CF             	and	f, 0xCF   ;select user reg space
  1164                          	
  1165  77A0  7C 6FFE           	xcall	_LTRX_CPutString
  1166                          	
  1167  77A3  38 00             	add	sp,0
  1168                          	line	317
  1169                          ;oo.c: 317: LTRX_PutCRLF();
  1170  77A5  71 80             	or	f, 0x80	;select multiple RAM page mode
  1171  77A7  70 CF             	and	f, 0xCF   ;select user reg space
  1172                          	
  1173  77A9  7C 7010           	xcall	_LTRX_PutCRLF
  1174                          	
  1175  77AC  38 00             	add	sp,0
  1176                          	line	318
  1177                          ;oo.c: 318: return;
  1178  77AE  7D 7845           	xjmp	l64
  1179                          	line	319
  1180                          ;			
  1181  77B1                    l65:	
  1182                          	line	322
  1183                          ;oo.c: 319: }
  1184                          ;oo.c: 322: oo_start_conversion();
  1185  77B1  71 80             	or	f, 0x80	;select multiple RAM page mode
  1186                          	
  1187  77B3  7C 7963           	xcall	_oo_start_conversion
  1188                          	
  1189                          	line	325
  1190                          ;oo.c: 325: if (!oo_wait_for_completion()){
  1191  77B6  71 80             	or	f, 0x80	;select multiple RAM page mode
  1192                          	
  1193  77B8  7C 7985           	xcall	_oo_wait_for_completion
  1194                          	
  1195  77BB  39 00             	cmp	a,(0)
  1196  77BD  B01A              	jnz	l66
  1197                          	line	326
  1198                          ;oo.c: 326: LTRX_CPutString("Timed out while waiting for conversion!");
  1199  77BF  57 6B             	mov	x,<(STR_23)
  1200  77C1  50 7E             	mov	a,>(STR_23)
  1201  77C3  71 80             	or	f, 0x80	;select multiple RAM page mode
  1202  77C5  70 CF             	and	f, 0xCF   ;select user reg space
  1203                          	
  1204  77C7  7C 6FFE           	xcall	_LTRX_CPutString
  1205                          	
  1206  77CA  38 00             	add	sp,0
  1207                          	line	327
  1208                          ;oo.c: 327: LTRX_PutCRLF();
  1209  77CC  71 80             	or	f, 0x80	;select multiple RAM page mode
  1210  77CE  70 CF             	and	f, 0xCF   ;select user reg space
  1211                          	
  1212  77D0  7C 7010           	xcall	_LTRX_PutCRLF
  1213                          	
  1214  77D3  38 00             	add	sp,0
  1215                          	line	328
  1216                          ;oo.c: 328: return;
  1217  77D5  7D 7845           	xjmp	l64
  1218                          	line	329
  1219                          ;			
  1220  77D8                    l66:	
  1221                          	line	332
  1222                          ;oo.c: 329: }
  1223                          ;oo.c: 332: if (OneWire_fFindFirst()){
  1224  77D8  71 80             	or	f, 0x80	;select multiple RAM page mode
  1225  77DA  70 CF             	and	f, 0xCF   ;select user reg space
  1226                          	
  1227  77DC  7C 7217           	xcall	_OneWire_fFindFirst
  1228                          	
  1229  77DF  38 00             	add	sp,0
  1230  77E1  39 00             	cmp	a,(0)
  1231  77E3  A011              	jz	l67
  1232                          	line	333
  1233                          ;oo.c: 333: OneWire_GetROM(id);
  1234  77E5  57 11             	mov	x,<((oo_report@id|8000h))
  1235  77E7  50 80             	mov	a,>((oo_report@id|8000h))
  1236  77E9  71 80             	or	f, 0x80	;select multiple RAM page mode
  1237  77EB  70 CF             	and	f, 0xCF   ;select user reg space
  1238                          	
  1239  77ED  7C 71C3           	xcall	_OneWire_GetROM
  1240                          	
  1241  77F0  38 00             	add	sp,0
  1242                          	line	334
  1243                          ;oo.c: 334: } else {
  1244  77F2  7D 780E           	xjmp	l68
  1245                          ;			
  1246  77F5                    l67:	
  1247                          	line	335
  1248                          ;oo.c: 335: LTRX_CPutString("Problem detecting first device on the bus");
  1249  77F5  57 41             	mov	x,<(STR_24)
  1250  77F7  50 7E             	mov	a,>(STR_24)
  1251  77F9  71 80             	or	f, 0x80	;select multiple RAM page mode
  1252  77FB  70 CF             	and	f, 0xCF   ;select user reg space
  1253                          	
  1254  77FD  7C 6FFE           	xcall	_LTRX_CPutString
  1255                          	
  1256  7800  38 00             	add	sp,0
  1257                          	line	336
  1258                          ;oo.c: 336: LTRX_PutCRLF();
  1259  7802  71 80             	or	f, 0x80	;select multiple RAM page mode
  1260  7804  70 CF             	and	f, 0xCF   ;select user reg space
  1261                          	
  1262  7806  7C 7010           	xcall	_LTRX_PutCRLF
  1263                          	
  1264  7809  38 00             	add	sp,0
  1265                          	line	337
  1266                          ;oo.c: 337: return;
  1267  780B  7D 7845           	xjmp	l64
  1268                          	line	338
  1269                          ;			
  1270  780E                    l68:	
  1271                          	line	341
  1272                          ;oo.c: 338: }
  1273                          ;oo.c: 341: data = oo_read_device();
  1274  780E  71 80             	or	f, 0x80	;select multiple RAM page mode
  1275                          	
  1276  7810  7C 79BD           	xcall	_oo_read_device
  1277                          	
  1278  7813  70 CF             	and	f, 0xCF   ;select user reg space
  1279  7815  62 D0 00          	mov	reg[CUR_PP],0
  1280  7818  55 19  1C         	mov	[(??_oo_report^0x0)+21+0],<(0+?_oo_read_device)
  1281  781B  62 D4 00          	mov	reg[MVR_PP],0
  1282                          	
  1283  781E  55 1A  04         	mov	[(??_oo_report^0x0)+22+0],<(oo_report@data)
  1284  7821  62 D5 00          	mov	reg[MVW_PP],0
  1285                          	
  1286  7824  55 1B  0D         	mov	[(??_oo_report^0x0)+23+0],13
  1287  7827                    u213:
  1288  7827  3E 19             	mvi	a,[[(??_oo_report^0x0)+21+0]++]
  1289  7829  3F 1A             	mvi	[[(??_oo_report^0x0)+22+0]++],a
  1290  782B  7A 1B             	dec	[(??_oo_report^0x0)+23+0]
  1291  782D  BFF9              	jnz	u213
  1292                          	line	343
  1293                          ;oo.c: 343: oo_print_data(data);
  1294  782F  55 19  04         	mov	[(??_oo_report^0x0)+21+0],<(oo_report@data)
  1295                          	
  1296  7832  55 1A  1C         	mov	[(??_oo_report^0x0)+22+0],<(?_oo_print_data)
  1297                          	
  1298  7835  55 1B  0D         	mov	[(??_oo_report^0x0)+23+0],13
  1299  7838                    u223:
  1300  7838  3E 19             	mvi	a,[[(??_oo_report^0x0)+21+0]++]
  1301  783A  3F 1A             	mvi	[[(??_oo_report^0x0)+22+0]++],a
  1302  783C  7A 1B             	dec	[(??_oo_report^0x0)+23+0]
  1303  783E  BFF9              	jnz	u223
  1304  7840  71 80             	or	f, 0x80	;select multiple RAM page mode
  1305                          	
  1306  7842  7C 78A0           	xcall	_oo_print_data
  1307                          	
  1308                          	line	347
  1309                          ;oo.c: 347: }
  1310  7845                    l64:
  1311                          ;			
  1312  7845  70 CF             	and	f, 0xCF   ;select user reg space
  1313                          	
  1314  7847  7F                	ret
  1315                          GLOBAL __end_of_oo_report
  1316  7848                    	__end_of_oo_report:
  1317                          	FNSIZE	_oo_report,24,0
  1318                          ; =============== function _oo_report ends ============
  1319                          
  1320                          	signat	_oo_report,88
  1321                          	global	_hardware_init
  1322                          	global	??_hardware_init
  1323                          	global	?_hardware_init
  1324                          	psect	text
  1325                          
  1326                          ; *************** function _hardware_init *****************
  1327                          ; Defined at:
  1328                          ;		line 104 in file "./main.c"
  1329                          ; Parameters:
  1330                          ;		None
  1331                          ; Auto variables:
  1332                          ;		None
  1333                          ; Return value:
  1334                          ;		type: void 
  1335                          ;		size: 0
  1336                          ; Registers used:
  1337                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1338                          ; Tracked objects:
  1339                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1340                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1341                          ;		Unchanged: 
  1342                          ; Data sizes:
  1343                          ;		Autos:    0
  1344                          ;		Params:   0
  1345                          ;		Temp:     0
  1346                          ;		Total:    0
  1347                          ; This function calls:
  1348                          ;		_OneWire_Start
  1349                          ;		_Counter8_Start
  1350                          ;		_Counter8_ltrx_Start
  1351                          ;		_LED1_Start
  1352                          ;		_Ticker_Start
  1353                          ;		_LTRX_CmdReset
  1354                          ;		_LTRX_EnableInt
  1355                          ;		_LTRX_Start
  1356                          ;		_Ticker_EnableInt
  1357                          ; This function is called by:
  1358                          ;		_main
  1359                          ; This function uses a non-reentrant model
  1360                          ; 
  1361                          	file	"./main.c"
  1362                          	line	104
  1363  0058                    	__size_of_hardware_init	equ	__end_of_hardware_init-_hardware_init
  1364                          ;main.c: 104: void hardware_init(){
  1365                          ;			
  1366  7848                    _hardware_init:	
  1367                          	opt	disable
  1368                          	line	107
  1369                          ;main.c: 107: OneWire_Start();
  1370  7848  71 80             	or	f, 0x80	;select multiple RAM page mode
  1371  784A  70 CF             	and	f, 0xCF   ;select user reg space
  1372                          	
  1373  784C  7C 7125           	xcall	_OneWire_Start
  1374                          	
  1375  784F  38 00             	add	sp,0
  1376                          	line	108
  1377                          ;main.c: 108: Counter8_Start();
  1378  7851  71 80             	or	f, 0x80	;select multiple RAM page mode
  1379  7853  70 CF             	and	f, 0xCF   ;select user reg space
  1380                          	
  1381  7855  7C 6DF3           	xcall	_Counter8_Start
  1382                          	
  1383  7858  38 00             	add	sp,0
  1384                          	line	109
  1385                          ;main.c: 109: Counter8_ltrx_Start();
  1386  785A  71 80             	or	f, 0x80	;select multiple RAM page mode
  1387  785C  70 CF             	and	f, 0xCF   ;select user reg space
  1388                          	
  1389  785E  7C 6E3F           	xcall	_Counter8_ltrx_Start
  1390                          	
  1391  7861  38 00             	add	sp,0
  1392                          	line	110
  1393                          ;main.c: 110: LED1_Start();
  1394  7863  71 80             	or	f, 0x80	;select multiple RAM page mode
  1395  7865  70 CF             	and	f, 0xCF   ;select user reg space
  1396                          	
  1397  7867  7C 6E89           	xcall	_LED1_Start
  1398                          	
  1399  786A  38 00             	add	sp,0
  1400                          	line	111
  1401                          ;main.c: 111: Ticker_Start();
  1402  786C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1403  786E  70 CF             	and	f, 0xCF   ;select user reg space
  1404                          	
  1405  7870  7C 7433           	xcall	_Ticker_Start
  1406                          	
  1407  7873  38 00             	add	sp,0
  1408                          	line	114
  1409                          ;main.c: 114: LTRX_CmdReset();
  1410  7875  71 80             	or	f, 0x80	;select multiple RAM page mode
  1411  7877  70 CF             	and	f, 0xCF   ;select user reg space
  1412                          	
  1413  7879  7C 7019           	xcall	_LTRX_CmdReset
  1414                          	
  1415  787C  38 00             	add	sp,0
  1416                          	line	115
  1417                          ;main.c: 115: LTRX_EnableInt();
  1418  787E  71 80             	or	f, 0x80	;select multiple RAM page mode
  1419  7880  70 CF             	and	f, 0xCF   ;select user reg space
  1420                          	
  1421  7882  7C 6EC9           	xcall	_LTRX_EnableInt
  1422                          	
  1423  7885  38 00             	add	sp,0
  1424                          	line	116
  1425                          ;main.c: 116: LTRX_Start(0x00);
  1426  7887  50 00             	mov	a,<((0))
  1427  7889  71 80             	or	f, 0x80	;select multiple RAM page mode
  1428  788B  70 CF             	and	f, 0xCF   ;select user reg space
  1429                          	
  1430  788D  7C 6EE9           	xcall	_LTRX_Start
  1431                          	
  1432  7890  38 00             	add	sp,0
  1433                          	line	119
  1434                          ;main.c: 119: Ticker_EnableInt();
  1435  7892  71 80             	or	f, 0x80	;select multiple RAM page mode
  1436  7894  70 CF             	and	f, 0xCF   ;select user reg space
  1437                          	
  1438  7896  7C 742B           	xcall	_Ticker_EnableInt
  1439                          	
  1440  7899  38 00             	add	sp,0
  1441                          	line	120
  1442                          # 120 "./main.c"
  1443  789B  71 01             or  F, 01h ;#
  1444                          	psect	text
  1445                          	line	122
  1446                          ;main.c: 120: asm("or  F, 01h") ;
  1447                          ;main.c: 122: }
  1448  789D                    l16:
  1449                          ;			
  1450  789D  70 CF             	and	f, 0xCF   ;select user reg space
  1451                          	
  1452  789F  7F                	ret
  1453                          GLOBAL __end_of_hardware_init
  1454  78A0                    	__end_of_hardware_init:
  1455                          	FNSIZE	_hardware_init,0,0
  1456                          ; =============== function _hardware_init ends ============
  1457                          
  1458                          	signat	_hardware_init,88
  1459                          	global	_LTRX_szGetParam
  1460                          	global	_OneWire_fFindNext
  1461                          	global	_oo_print_data
  1462                          	global	??_oo_print_data
  1463                          	global	?_oo_print_data
  1464                          	psect	text
  1465                          
  1466                          ; *************** function _oo_print_data *****************
  1467                          ; Defined at:
  1468                          ;		line 271 in file "./oo.c"
  1469                          ; Parameters:
  1470                          ;		data        	offs:   0	type: struct s_oo_data
  1471                          ; Auto variables:
  1472                          ;		cntr        	       	type: unsigned char 
  1473                          ; Return value:
  1474                          ;		type: void 
  1475                          ;		size: 0
  1476                          ; Registers used:
  1477                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1478                          ; Tracked objects:
  1479                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1480                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1481                          ;		Unchanged: 
  1482                          ; Data sizes:
  1483                          ;		Autos:    1
  1484                          ;		Params:  13
  1485                          ;		Temp:     0
  1486                          ;		Total:   14
  1487                          ; This function calls:
  1488                          ;		_LTRX_PutSHexByte
  1489                          ;		_LTRX_CPutString
  1490                          ;		_LTRX_PutChar
  1491                          ;		_LTRX_PutCRLF
  1492                          ; This function is called by:
  1493                          ;		_oo_report
  1494                          ; This function uses a non-reentrant model
  1495                          ; 
  1496                          	file	"./oo.c"
  1497                          	line	271
  1498  00C3                    	__size_of_oo_print_data	equ	__end_of_oo_print_data-_oo_print_data
  1499                          ;oo.c: 271: void oo_print_data(oo_tdata data){
  1500                          ;			
  1501  78A0                    _oo_print_data:	
  1502                          	opt	disable
  1503                          	line	276
  1504                          ;oo.c: 273: char cntr;
  1505                          ;oo.c: 276: for (cntr=0; cntr<8; cntr++){
  1506  78A0  50 00             	mov	a,<((0))
  1507  78A2  70 CF             	and	f, 0xCF   ;select user reg space
  1508  78A4  62 D0 00          	mov	reg[CUR_PP],0
  1509  78A7  53 29             	mov	[0+((oo_print_data@cntr)^0x0)],a
  1510  78A9  51 29             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  1511  78AB  39 08             	cmp	a,<((08h))
  1512  78AD  C004              	jc	l61
  1513  78AF  7D 78DB           	xjmp	l62
  1514                          ;			
  1515  78B2                    l61:	
  1516                          	line	277
  1517                          ;oo.c: 277: LTRX_PutSHexByte(*(data.id+cntr));
  1518  78B2  70 CF             	and	f, 0xCF   ;select user reg space
  1519  78B4  62 D0 00          	mov	reg[CUR_PP],0
  1520  78B7  58 29             	mov	x,[0+((oo_print_data@cntr)^0x0)]
  1521  78B9  62 D3 00          	mov	reg[IDX_PP],0
  1522  78BC  52 1C             	mov	a,[0+(oo_print_data@data)+x]
  1523  78BE  71 80             	or	f, 0x80	;select multiple RAM page mode
  1524                          	
  1525  78C0  7C 6F43           	xcall	_LTRX_PutSHexByte
  1526                          	
  1527  78C3  38 00             	add	sp,0
  1528                          	line	276
  1529  78C5  70 CF             	and	f, 0xCF   ;select user reg space
  1530  78C7  62 D0 00          	mov	reg[CUR_PP],0
  1531  78CA  51 29             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  1532  78CC  01 01             	add	a,<((01h))
  1533  78CE  53 29             	mov	[0+((oo_print_data@cntr)^0x0)],a
  1534  78D0  70 CF             	and	f, 0xCF   ;select user reg space
  1535  78D2  62 D0 00          	mov	reg[CUR_PP],0
  1536  78D5  51 29             	mov	a,[0+((oo_print_data@cntr)^0x0)]
  1537  78D7  39 08             	cmp	a,<((08h))
  1538  78D9  CFD8              	jc	l61
  1539                          ;			
  1540  78DB                    l62:	
  1541                          	line	280
  1542                          ;oo.c: 278: }
  1543                          ;oo.c: 280: LTRX_CPutString(" - ");
  1544  78DB  57 75             	mov	x,<(STR_18)
  1545  78DD  50 7F             	mov	a,>(STR_18)
  1546  78DF  71 80             	or	f, 0x80	;select multiple RAM page mode
  1547  78E1  70 CF             	and	f, 0xCF   ;select user reg space
  1548                          	
  1549  78E3  7C 6FFE           	xcall	_LTRX_CPutString
  1550                          	
  1551  78E6  38 00             	add	sp,0
  1552                          	line	283
  1553                          ;oo.c: 283: LTRX_PutSHexByte(data.t_msb);
  1554  78E8  70 CF             	and	f, 0xCF   ;select user reg space
  1555  78EA  62 D0 00          	mov	reg[CUR_PP],0
  1556  78ED  51 24             	mov	a,[0+((0+oo_print_data@data+08h)^0x0)]
  1557  78EF  71 80             	or	f, 0x80	;select multiple RAM page mode
  1558                          	
  1559  78F1  7C 6F43           	xcall	_LTRX_PutSHexByte
  1560                          	
  1561  78F4  38 00             	add	sp,0
  1562                          	line	284
  1563                          ;oo.c: 284: LTRX_PutSHexByte(data.t_lsb);
  1564  78F6  70 CF             	and	f, 0xCF   ;select user reg space
  1565  78F8  62 D0 00          	mov	reg[CUR_PP],0
  1566  78FB  51 25             	mov	a,[0+((0+oo_print_data@data+09h)^0x0)]
  1567  78FD  71 80             	or	f, 0x80	;select multiple RAM page mode
  1568                          	
  1569  78FF  7C 6F43           	xcall	_LTRX_PutSHexByte
  1570                          	
  1571  7902  38 00             	add	sp,0
  1572                          	line	286
  1573                          ;oo.c: 286: LTRX_CPutString(" - ");
  1574  7904  57 75             	mov	x,<(STR_19)
  1575  7906  50 7F             	mov	a,>(STR_19)
  1576  7908  71 80             	or	f, 0x80	;select multiple RAM page mode
  1577  790A  70 CF             	and	f, 0xCF   ;select user reg space
  1578                          	
  1579  790C  7C 6FFE           	xcall	_LTRX_CPutString
  1580                          	
  1581  790F  38 00             	add	sp,0
  1582                          	line	289
  1583                          ;oo.c: 289: LTRX_PutSHexByte(data.nr_count);
  1584  7911  70 CF             	and	f, 0xCF   ;select user reg space
  1585  7913  62 D0 00          	mov	reg[CUR_PP],0
  1586  7916  51 27             	mov	a,[0+((0+oo_print_data@data+0Bh)^0x0)]
  1587  7918  71 80             	or	f, 0x80	;select multiple RAM page mode
  1588                          	
  1589  791A  7C 6F43           	xcall	_LTRX_PutSHexByte
  1590                          	
  1591  791D  38 00             	add	sp,0
  1592                          	line	290
  1593                          ;oo.c: 290: LTRX_CPutString("/");
  1594  791F  57 79             	mov	x,<(STR_20)
  1595  7921  50 7F             	mov	a,>(STR_20)
  1596  7923  71 80             	or	f, 0x80	;select multiple RAM page mode
  1597  7925  70 CF             	and	f, 0xCF   ;select user reg space
  1598                          	
  1599  7927  7C 6FFE           	xcall	_LTRX_CPutString
  1600                          	
  1601  792A  38 00             	add	sp,0
  1602                          	line	291
  1603                          ;oo.c: 291: LTRX_PutSHexByte(data.remain);
  1604  792C  70 CF             	and	f, 0xCF   ;select user reg space
  1605  792E  62 D0 00          	mov	reg[CUR_PP],0
  1606  7931  51 26             	mov	a,[0+((0+oo_print_data@data+0Ah)^0x0)]
  1607  7933  71 80             	or	f, 0x80	;select multiple RAM page mode
  1608                          	
  1609  7935  7C 6F43           	xcall	_LTRX_PutSHexByte
  1610                          	
  1611  7938  38 00             	add	sp,0
  1612                          	line	293
  1613                          ;oo.c: 293: LTRX_CPutString(" - ");
  1614  793A  57 75             	mov	x,<(STR_21)
  1615  793C  50 7F             	mov	a,>(STR_21)
  1616  793E  71 80             	or	f, 0x80	;select multiple RAM page mode
  1617  7940  70 CF             	and	f, 0xCF   ;select user reg space
  1618                          	
  1619  7942  7C 6FFE           	xcall	_LTRX_CPutString
  1620                          	
  1621  7945  38 00             	add	sp,0
  1622                          	line	294
  1623                          ;oo.c: 294: LTRX_PutChar(data.valid+0x30);
  1624  7947  50 30             	mov	a,<((030h))
  1625  7949  70 CF             	and	f, 0xCF   ;select user reg space
  1626  794B  62 D0 00          	mov	reg[CUR_PP],0
  1627  794E  02 28             	add	a,[0+((0+oo_print_data@data+0Ch)^0x0)]
  1628  7950  71 80             	or	f, 0x80	;select multiple RAM page mode
  1629                          	
  1630  7952  7C 6F5D           	xcall	_LTRX_PutChar
  1631                          	
  1632  7955  38 00             	add	sp,0
  1633                          	line	296
  1634                          ;oo.c: 296: LTRX_PutCRLF();
  1635  7957  71 80             	or	f, 0x80	;select multiple RAM page mode
  1636  7959  70 CF             	and	f, 0xCF   ;select user reg space
  1637                          	
  1638  795B  7C 7010           	xcall	_LTRX_PutCRLF
  1639                          	
  1640  795E  38 00             	add	sp,0
  1641                          	line	299
  1642                          ;oo.c: 299: }
  1643  7960                    l60:
  1644                          ;			
  1645  7960  70 CF             	and	f, 0xCF   ;select user reg space
  1646                          	
  1647  7962  7F                	ret
  1648                          GLOBAL __end_of_oo_print_data
  1649  7963                    	__end_of_oo_print_data:
  1650                          	FNSIZE	_oo_print_data,1,13
  1651                          ; =============== function _oo_print_data ends ============
  1652                          
  1653                          	signat	_oo_print_data,4216
  1654                          	global	_LTRX_PutSHexInt
  1655                          	global	_oo_start_conversion
  1656                          	global	??_oo_start_conversion
  1657                          	global	?_oo_start_conversion
  1658                          	psect	text
  1659                          
  1660                          ; *************** function _oo_start_conversion *****************
  1661                          ; Defined at:
  1662                          ;		line 166 in file "./oo.c"
  1663                          ; Parameters:
  1664                          ;		None
  1665                          ; Auto variables:
  1666                          ;		None
  1667                          ; Return value:
  1668                          ;		type: void 
  1669                          ;		size: 0
  1670                          ; Registers used:
  1671                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1672                          ; Tracked objects:
  1673                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1674                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1675                          ;		Unchanged: 
  1676                          ; Data sizes:
  1677                          ;		Autos:    0
  1678                          ;		Params:   0
  1679                          ;		Temp:     0
  1680                          ;		Total:    0
  1681                          ; This function calls:
  1682                          ;		_oo_tx_byte
  1683                          ; This function is called by:
  1684                          ;		_oo_report
  1685                          ; This function uses a non-reentrant model
  1686                          ; 
  1687                          	file	"./oo.c"
  1688                          	line	166
  1689  0022                    	__size_of_oo_start_conversion	equ	__end_of_oo_start_conversion-_oo_start_conversion
  1690                          ;oo.c: 166: void oo_start_conversion(){
  1691                          ;			
  1692  7963                    _oo_start_conversion:	
  1693                          	opt	disable
  1694                          	line	168
  1695                          ;oo.c: 168: oo_tx_byte(0xCC);
  1696  7963  50 CC             	mov	a,<((0CCh))
  1697  7965  70 CF             	and	f, 0xCF   ;select user reg space
  1698  7967  62 D0 00          	mov	reg[CUR_PP],0
  1699  796A  53 3B             	mov	[0+((?_oo_tx_byte)^0x0)],a
  1700  796C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1701                          	
  1702  796E  7C 7C07           	xcall	_oo_tx_byte
  1703                          	
  1704                          	line	171
  1705                          ;oo.c: 171: oo_tx_byte(0x44);
  1706  7971  50 44             	mov	a,<((044h))
  1707  7973  70 CF             	and	f, 0xCF   ;select user reg space
  1708  7975  62 D0 00          	mov	reg[CUR_PP],0
  1709  7978  53 3B             	mov	[0+((?_oo_tx_byte)^0x0)],a
  1710  797A  71 80             	or	f, 0x80	;select multiple RAM page mode
  1711                          	
  1712  797C  7C 7C07           	xcall	_oo_tx_byte
  1713                          	
  1714                          	line	173
  1715                          ;oo.c: 173: return;
  1716  797F  7D 7982           	xjmp	l44
  1717                          	line	174
  1718                          ;oo.c: 174: }
  1719  7982                    l44:
  1720                          ;			
  1721  7982  70 CF             	and	f, 0xCF   ;select user reg space
  1722                          	
  1723  7984  7F                	ret
  1724                          GLOBAL __end_of_oo_start_conversion
  1725  7985                    	__end_of_oo_start_conversion:
  1726                          	FNSIZE	_oo_start_conversion,0,0
  1727                          ; =============== function _oo_start_conversion ends ============
  1728                          
  1729                          	signat	_oo_start_conversion,88
  1730                          	global	_oo_wait_for_completion
  1731                          	global	??_oo_wait_for_completion
  1732                          	global	?_oo_wait_for_completion
  1733                          	psect	text
  1734                          
  1735                          ; *************** function _oo_wait_for_completion *****************
  1736                          ; Defined at:
  1737                          ;		line 191 in file "./oo.c"
  1738                          ; Parameters:
  1739                          ;		None
  1740                          ; Auto variables:
  1741                          ;		counter     	       	type: unsigned char 
  1742                          ; Return value:
  1743                          ;		type: unsigned char 
  1744                          ;		size: 1
  1745                          ; Registers used:
  1746                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1747                          ; Tracked objects:
  1748                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1749                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1750                          ;		Unchanged: 
  1751                          ; Data sizes:
  1752                          ;		Autos:    1
  1753                          ;		Params:   0
  1754                          ;		Temp:     0
  1755                          ;		Total:    1
  1756                          ; This function calls:
  1757                          ;		_delay_10ms
  1758                          ;		_oo_conversion_busy
  1759                          ; This function is called by:
  1760                          ;		_oo_report
  1761                          ; This function uses a non-reentrant model
  1762                          ; 
  1763                          	file	"./oo.c"
  1764                          	line	191
  1765  0038                    	__size_of_oo_wait_for_completion	equ	__end_of_oo_wait_for_completion-_oo_wait_for_completion
  1766                          ;oo.c: 191: char oo_wait_for_completion(){
  1767                          ;			
  1768  7985                    _oo_wait_for_completion:	
  1769                          	opt	disable
  1770                          	line	193
  1771                          ;oo.c: 193: char counter = 0;
  1772  7985  50 00             	mov	a,<((0))
  1773  7987  70 CF             	and	f, 0xCF   ;select user reg space
  1774  7989  62 D0 00          	mov	reg[CUR_PP],0
  1775  798C  53 1C             	mov	[0+((oo_wait_for_completion@counter)^0x0)],a
  1776                          	line	195
  1777                          ;oo.c: 195: while (oo_conversion_busy()){
  1778  798E  7D 79AC           	xjmp	l50
  1779                          ;			
  1780  7991                    l51:	
  1781                          	line	198
  1782                          ;oo.c: 198: delay_10ms();
  1783  7991  71 80             	or	f, 0x80	;select multiple RAM page mode
  1784                          	
  1785  7993  7C 7B21           	xcall	_delay_10ms
  1786                          	
  1787                          	line	199
  1788                          ;oo.c: 199: counter++;
  1789  7996  70 CF             	and	f, 0xCF   ;select user reg space
  1790  7998  62 D0 00          	mov	reg[CUR_PP],0
  1791  799B  51 1C             	mov	a,[0+((oo_wait_for_completion@counter)^0x0)]
  1792  799D  01 01             	add	a,<((01h))
  1793  799F  53 1C             	mov	[0+((oo_wait_for_completion@counter)^0x0)],a
  1794                          	line	200
  1795                          ;oo.c: 200: if (counter == 100){
  1796  79A1  51 1C             	mov	a,[0+((oo_wait_for_completion@counter)^0x0)]
  1797  79A3  39 64             	cmp	a,(064h)
  1798  79A5  B006              	jnz	l50
  1799                          	line	201
  1800                          ;oo.c: 201: return 0;
  1801  79A7  50 00             	mov	a,<((0))
  1802  79A9  7D 79BA           	xjmp	l49
  1803                          	line	203
  1804                          ;			
  1805  79AC                    l50:	
  1806                          	line	195
  1807  79AC  71 80             	or	f, 0x80	;select multiple RAM page mode
  1808                          	
  1809  79AE  7C 7B5E           	xcall	_oo_conversion_busy
  1810                          	
  1811  79B1  39 00             	cmp	a,(0)
  1812  79B3  BFDD              	jnz	l51
  1813                          ;			
  1814  79B5                    l52:	
  1815                          	line	205
  1816                          ;oo.c: 202: }
  1817                          ;oo.c: 203: }
  1818                          ;oo.c: 205: return 1;
  1819  79B5  50 01             	mov	a,<((01h))
  1820  79B7  7D 79BA           	xjmp	l49
  1821                          	line	206
  1822                          ;oo.c: 206: }
  1823  79BA                    l49:
  1824                          ;			
  1825  79BA  70 CF             	and	f, 0xCF   ;select user reg space
  1826                          	
  1827  79BC  7F                	ret
  1828                          GLOBAL __end_of_oo_wait_for_completion
  1829  79BD                    	__end_of_oo_wait_for_completion:
  1830                          	FNSIZE	_oo_wait_for_completion,1,0
  1831                          ; =============== function _oo_wait_for_completion ends ============
  1832                          
  1833                          	signat	_oo_wait_for_completion,89
  1834                          	global	_oo_read_device
  1835                          	global	??_oo_read_device
  1836                          	global	?_oo_read_device
  1837                          	psect	text
  1838                          
  1839                          ; *************** function _oo_read_device *****************
  1840                          ; Defined at:
  1841                          ;		line 236 in file "./oo.c"
  1842                          ; Parameters:
  1843                          ;		None
  1844                          ; Auto variables:
  1845                          ;		data        	       	type: struct s_oo_data
  1846                          ;		crc         	       	type: unsigned char 
  1847                          ;		loper       	       	type: unsigned char 
  1848                          ; Return value:
  1849                          ;		type: struct s_oo_data
  1850                          ;		size: 13
  1851                          ; Registers used:
  1852                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1853                          ; Tracked objects:
  1854                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1855                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1856                          ;		Unchanged: 
  1857                          ; Data sizes:
  1858                          ;		Autos:   14
  1859                          ;		Params:  13
  1860                          ;		Temp:     3
  1861                          ;		Total:   30
  1862                          ; This function calls:
  1863                          ;		_OneWire_GetROM
  1864                          ;		_oo_busreset
  1865                          ;		_OneWire_fReset
  1866                          ;		_OneWire_SetROM
  1867                          ;		_OneWire_fVerify
  1868                          ;		_oo_read_scratchpad
  1869                          ; This function is called by:
  1870                          ;		_oo_report
  1871                          ; This function uses a non-reentrant model
  1872                          ; 
  1873                          	file	"./oo.c"
  1874                          	line	236
  1875  00EC                    	__size_of_oo_read_device	equ	__end_of_oo_read_device-_oo_read_device
  1876                          ;oo.c: 236: oo_tdata oo_read_device(){
  1877                          ;			
  1878  79BD                    _oo_read_device:	
  1879                          	opt	disable
  1880                          	line	243
  1881                          ;oo.c: 238: char loper;
  1882                          ;oo.c: 239: char crc;
  1883                          ;oo.c: 241: oo_tdata data;
  1884                          ;oo.c: 243: data.valid = 0;
  1885  79BD  50 00             	mov	a,<((0))
  1886  79BF  70 CF             	and	f, 0xCF   ;select user reg space
  1887  79C1  62 D0 00          	mov	reg[CUR_PP],0
  1888  79C4  53 35             	mov	[0+((0+oo_read_device@data+0Ch)^0x0)],a
  1889                          	line	246
  1890                          ;oo.c: 246: OneWire_GetROM(data.id);
  1891  79C6  57 29             	mov	x,<((oo_read_device@data|8000h))
  1892  79C8  50 80             	mov	a,>((oo_read_device@data|8000h))
  1893  79CA  71 80             	or	f, 0x80	;select multiple RAM page mode
  1894  79CC  70 CF             	and	f, 0xCF   ;select user reg space
  1895                          	
  1896  79CE  7C 71C3           	xcall	_OneWire_GetROM
  1897                          	
  1898  79D1  38 00             	add	sp,0
  1899                          	line	248
  1900                          ;oo.c: 248: oo_busreset();
  1901  79D3  71 80             	or	f, 0x80	;select multiple RAM page mode
  1902                          	
  1903  79D5  7C 7BEA           	xcall	_oo_busreset
  1904                          	
  1905                          	line	251
  1906                          ;oo.c: 251: OneWire_fReset();
  1907  79D8  71 80             	or	f, 0x80	;select multiple RAM page mode
  1908  79DA  70 CF             	and	f, 0xCF   ;select user reg space
  1909                          	
  1910  79DC  7C 713D           	xcall	_OneWire_fReset
  1911                          	
  1912  79DF  38 00             	add	sp,0
  1913                          	line	252
  1914                          ;oo.c: 252: OneWire_SetROM(data.id);
  1915  79E1  57 29             	mov	x,<((oo_read_device@data|8000h))
  1916  79E3  50 80             	mov	a,>((oo_read_device@data|8000h))
  1917  79E5  71 80             	or	f, 0x80	;select multiple RAM page mode
  1918  79E7  70 CF             	and	f, 0xCF   ;select user reg space
  1919                          	
  1920  79E9  7C 71ED           	xcall	_OneWire_SetROM
  1921                          	
  1922  79EC  38 00             	add	sp,0
  1923                          	line	253
  1924                          ;oo.c: 253: OneWire_fVerify();
  1925  79EE  71 80             	or	f, 0x80	;select multiple RAM page mode
  1926  79F0  70 CF             	and	f, 0xCF   ;select user reg space
  1927                          	
  1928  79F2  7C 734E           	xcall	_OneWire_fVerify
  1929                          	
  1930  79F5  38 00             	add	sp,0
  1931                          	line	256
  1932                          ;oo.c: 256: if (crc = oo_read_scratchpad()){
  1933  79F7  71 80             	or	f, 0x80	;select multiple RAM page mode
  1934                          	
  1935  79F9  7C 7B74           	xcall	_oo_read_scratchpad
  1936                          	
  1937  79FC  70 CF             	and	f, 0xCF   ;select user reg space
  1938  79FE  62 D0 00          	mov	reg[CUR_PP],0
  1939  7A01  53 36             	mov	[0+((oo_read_device@crc)^0x0)],a
  1940  7A03  39 00             	cmp	a,(0)
  1941  7A05  A020              	jz	l58
  1942                          	line	257
  1943  7A07  70 CF             	and	f, 0xCF   ;select user reg space
  1944  7A09  62 D0 00          	mov	reg[CUR_PP],0
  1945  7A0C  55 37  29         	mov	[(??_oo_read_device^0x0)+14+0],<(oo_read_device@data)
  1946  7A0F  62 D4 00          	mov	reg[MVR_PP],0
  1947                          	
  1948  7A12  55 38  1C         	mov	[(??_oo_read_device^0x0)+15+0],<(?_oo_read_device)
  1949  7A15  62 D5 00          	mov	reg[MVW_PP],0
  1950                          	
  1951  7A18  55 39  0D         	mov	[(??_oo_read_device^0x0)+16+0],13
  1952  7A1B                    u193:
  1953  7A1B  3E 37             	mvi	a,[[(??_oo_read_device^0x0)+14+0]++]
  1954  7A1D  3F 38             	mvi	[[(??_oo_read_device^0x0)+15+0]++],a
  1955  7A1F  7A 39             	dec	[(??_oo_read_device^0x0)+16+0]
  1956  7A21  BFF9              	jnz	u193
  1957  7A23  7D 7AA6           	xjmp	l57
  1958                          	line	258
  1959                          ;			
  1960  7A26                    l58:	
  1961                          	line	261
  1962                          ;oo.c: 258: }
  1963                          ;oo.c: 261: data.t_msb = oo_scratchpad[1];
  1964  7A26  50 01             	mov	a,<((01h))
  1965  7A28  01 00             	add	a,<(8000h+_oo_scratchpad)
  1966  7A2A  5C                	mov	x,a
  1967  7A2B  50 82             	mov	a,>(8000h+_oo_scratchpad)
  1968  7A2D  70 CF             	and	f, 0xCF   ;select user reg space
  1969  7A2F  60 D3             	mov	reg[0xd3],a
  1970  7A31  52 00             	mov	a,[x+0]
  1971  7A33  62 D0 00          	mov	reg[CUR_PP],0
  1972  7A36  53 31             	mov	[0+((0+oo_read_device@data+08h)^0x0)],a
  1973                          	line	262
  1974                          ;oo.c: 262: data.t_lsb = oo_scratchpad[0];
  1975  7A38  70 CF             	and	f, 0xCF   ;select user reg space
  1976  7A3A  71 80             	or	f, 0x80	;select multiple RAM page mode
  1977  7A3C  62 D0 02          	mov	reg[CUR_PP],2
  1978  7A3F  51 00             	mov	a,[0+((_oo_scratchpad)^0x200)]
  1979  7A41  62 D0 00          	mov	reg[CUR_PP],0
  1980  7A44  53 32             	mov	[0+((0+oo_read_device@data+09h)^0x0)],a
  1981                          	line	263
  1982                          ;oo.c: 263: data.remain = oo_scratchpad[6];
  1983  7A46  50 06             	mov	a,<((06h))
  1984  7A48  01 00             	add	a,<(8000h+_oo_scratchpad)
  1985  7A4A  5C                	mov	x,a
  1986  7A4B  50 82             	mov	a,>(8000h+_oo_scratchpad)
  1987  7A4D  70 CF             	and	f, 0xCF   ;select user reg space
  1988  7A4F  60 D3             	mov	reg[0xd3],a
  1989  7A51  52 00             	mov	a,[x+0]
  1990  7A53  62 D0 00          	mov	reg[CUR_PP],0
  1991  7A56  53 33             	mov	[0+((0+oo_read_device@data+0Ah)^0x0)],a
  1992                          	line	264
  1993                          ;oo.c: 264: data.nr_count = oo_scratchpad[7];
  1994  7A58  50 07             	mov	a,<((07h))
  1995  7A5A  01 00             	add	a,<(8000h+_oo_scratchpad)
  1996  7A5C  5C                	mov	x,a
  1997  7A5D  50 82             	mov	a,>(8000h+_oo_scratchpad)
  1998  7A5F  70 CF             	and	f, 0xCF   ;select user reg space
  1999  7A61  60 D3             	mov	reg[0xd3],a
  2000  7A63  52 00             	mov	a,[x+0]
  2001  7A65  62 D0 00          	mov	reg[CUR_PP],0
  2002  7A68  53 34             	mov	[0+((0+oo_read_device@data+0Bh)^0x0)],a
  2003                          	line	265
  2004                          ;oo.c: 265: if (crc == oo_scratchpad[8]) { data.valid = 1; }
  2005  7A6A  50 08             	mov	a,<((08h))
  2006  7A6C  01 00             	add	a,<(8000h+_oo_scratchpad)
  2007  7A6E  5C                	mov	x,a
  2008  7A6F  50 82             	mov	a,>(8000h+_oo_scratchpad)
  2009  7A71  70 CF             	and	f, 0xCF   ;select user reg space
  2010  7A73  60 D3             	mov	reg[0xd3],a
  2011  7A75  52 00             	mov	a,[x+0]
  2012  7A77  62 D0 00          	mov	reg[CUR_PP],0
  2013  7A7A  3A 36             	cmp	a,[0+((oo_read_device@crc)^0x0)]
  2014  7A7C  B00A              	jnz	l59
  2015  7A7E  50 01             	mov	a,<((01h))
  2016  7A80  70 CF             	and	f, 0xCF   ;select user reg space
  2017  7A82  62 D0 00          	mov	reg[CUR_PP],0
  2018  7A85  53 35             	mov	[0+((0+oo_read_device@data+0Ch)^0x0)],a
  2019                          ;			
  2020  7A87                    l59:	
  2021                          	line	267
  2022  7A87  70 CF             	and	f, 0xCF   ;select user reg space
  2023  7A89  62 D0 00          	mov	reg[CUR_PP],0
  2024  7A8C  55 37  29         	mov	[(??_oo_read_device^0x0)+14+0],<(oo_read_device@data)
  2025  7A8F  62 D4 00          	mov	reg[MVR_PP],0
  2026                          	
  2027  7A92  55 38  1C         	mov	[(??_oo_read_device^0x0)+15+0],<(?_oo_read_device)
  2028  7A95  62 D5 00          	mov	reg[MVW_PP],0
  2029                          	
  2030  7A98  55 39  0D         	mov	[(??_oo_read_device^0x0)+16+0],13
  2031  7A9B                    u203:
  2032  7A9B  3E 37             	mvi	a,[[(??_oo_read_device^0x0)+14+0]++]
  2033  7A9D  3F 38             	mvi	[[(??_oo_read_device^0x0)+15+0]++],a
  2034  7A9F  7A 39             	dec	[(??_oo_read_device^0x0)+16+0]
  2035  7AA1  BFF9              	jnz	u203
  2036  7AA3  7D 7AA6           	xjmp	l57
  2037                          	line	269
  2038                          ;oo.c: 269: }
  2039  7AA6                    l57:
  2040                          ;			
  2041  7AA6  70 CF             	and	f, 0xCF   ;select user reg space
  2042                          	
  2043  7AA8  7F                	ret
  2044                          GLOBAL __end_of_oo_read_device
  2045  7AA9                    	__end_of_oo_read_device:
  2046                          	FNSIZE	_oo_read_device,17,13
  2047                          ; =============== function _oo_read_device ends ============
  2048                          
  2049                          	signat	_oo_read_device,95
  2050                          	global	_print_id
  2051                          	global	??_print_id
  2052                          	global	?_print_id
  2053                          	psect	text
  2054                          
  2055                          ; *************** function _print_id *****************
  2056                          ; Defined at:
  2057                          ;		line 194 in file "./main.c"
  2058                          ; Parameters:
  2059                          ;		id          	offs:   0	type: PTR unsigned char ; Largest target is 8
  2060                          ;		 -> id1(8), id0(8), 
  2061                          ; Auto variables:
  2062                          ;		cntr        	       	type: unsigned char 
  2063                          ; Return value:
  2064                          ;		type: void 
  2065                          ;		size: 0
  2066                          ; Registers used:
  2067                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2068                          ; Tracked objects:
  2069                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2070                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2071                          ;		Unchanged: 
  2072                          ; Data sizes:
  2073                          ;		Autos:    1
  2074                          ;		Params:   2
  2075                          ;		Temp:     0
  2076                          ;		Total:    3
  2077                          ; This function calls:
  2078                          ;		_LTRX_PutSHexByte
  2079                          ; This function is called by:
  2080                          ;		_print_data
  2081                          ; This function uses a non-reentrant model
  2082                          ; 
  2083                          	file	"./main.c"
  2084                          	line	194
  2085  0046                    	__size_of_print_id	equ	__end_of_print_id-_print_id
  2086                          ;main.c: 194: void print_id(unsigned char *id){
  2087                          ;			
  2088  7AA9                    _print_id:	
  2089                          	opt	disable
  2090                          	line	196
  2091                          ;main.c: 196: char cntr = 0;
  2092  7AA9  50 00             	mov	a,<((0))
  2093  7AAB  70 CF             	and	f, 0xCF   ;select user reg space
  2094  7AAD  62 D0 00          	mov	reg[CUR_PP],0
  2095  7AB0  53 06             	mov	[0+((print_id@cntr)^0x0)],a
  2096                          	line	197
  2097                          ;main.c: 197: for (cntr=0; cntr<8; cntr++){
  2098  7AB2  50 00             	mov	a,<((0))
  2099  7AB4  53 06             	mov	[0+((print_id@cntr)^0x0)],a
  2100  7AB6  51 06             	mov	a,[0+((print_id@cntr)^0x0)]
  2101  7AB8  39 08             	cmp	a,<((08h))
  2102  7ABA  C004              	jc	l29
  2103  7ABC  7D 7AEC           	xjmp	l30
  2104                          ;			
  2105  7ABF                    l29:	
  2106                          	line	198
  2107                          ;main.c: 198: LTRX_PutSHexByte(*(id+cntr));
  2108  7ABF  70 CF             	and	f, 0xCF   ;select user reg space
  2109  7AC1  62 D0 00          	mov	reg[CUR_PP],0
  2110  7AC4  51 06             	mov	a,[0+((print_id@cntr)^0x0)]
  2111  7AC6  02 05             	add	a,[1+((print_id@id)^0x0)]
  2112  7AC8  5C                	mov	x,a
  2113  7AC9  51 04             	mov	a,[0+((print_id@id)^0x0)]
  2114                          
  2115  7ACB  60 D3             	mov	reg[0xd3],a
  2116  7ACD  52 00             	mov	a,[0+x]
  2117  7ACF  71 80             	or	f, 0x80	;select multiple RAM page mode
  2118                          	
  2119  7AD1  7C 6F43           	xcall	_LTRX_PutSHexByte
  2120                          	
  2121  7AD4  38 00             	add	sp,0
  2122                          	line	197
  2123  7AD6  70 CF             	and	f, 0xCF   ;select user reg space
  2124  7AD8  62 D0 00          	mov	reg[CUR_PP],0
  2125  7ADB  51 06             	mov	a,[0+((print_id@cntr)^0x0)]
  2126  7ADD  01 01             	add	a,<((01h))
  2127  7ADF  53 06             	mov	[0+((print_id@cntr)^0x0)],a
  2128  7AE1  70 CF             	and	f, 0xCF   ;select user reg space
  2129  7AE3  62 D0 00          	mov	reg[CUR_PP],0
  2130  7AE6  51 06             	mov	a,[0+((print_id@cntr)^0x0)]
  2131  7AE8  39 08             	cmp	a,<((08h))
  2132  7AEA  CFD4              	jc	l29
  2133                          ;			
  2134  7AEC                    l30:	
  2135                          	line	200
  2136                          ;main.c: 199: }
  2137                          ;main.c: 200: }
  2138  7AEC                    l28:
  2139                          ;			
  2140  7AEC  70 CF             	and	f, 0xCF   ;select user reg space
  2141                          	
  2142  7AEE  7F                	ret
  2143                          GLOBAL __end_of_print_id
  2144  7AEF                    	__end_of_print_id:
  2145                          	FNSIZE	_print_id,1,2
  2146                          ; =============== function _print_id ends ============
  2147                          
  2148                          	signat	_print_id,4216
  2149                          	global	_Ticker_Start
  2150                          	global	_LTRX_CmdReset
  2151                          	global	_LTRX_EnableInt
  2152                          	global	_LED1_Start
  2153                          	global	_OneWire_Start
  2154                          	global	_Counter8_Start
  2155                          	global	_Counter8_ltrx_Start
  2156                          	global	_LTRX_Start
  2157                          	global	_Ticker_EnableInt
  2158                          	global	_print_header
  2159                          	global	??_print_header
  2160                          	global	?_print_header
  2161                          	psect	text
  2162                          
  2163                          ; *************** function _print_header *****************
  2164                          ; Defined at:
  2165                          ;		line 52 in file "./main.c"
  2166                          ; Parameters:
  2167                          ;		None
  2168                          ; Auto variables:
  2169                          ;		None
  2170                          ; Return value:
  2171                          ;		type: void 
  2172                          ;		size: 0
  2173                          ; Registers used:
  2174                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2175                          ; Tracked objects:
  2176                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2177                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2178                          ;		Unchanged: 
  2179                          ; Data sizes:
  2180                          ;		Autos:    0
  2181                          ;		Params:   0
  2182                          ;		Temp:     0
  2183                          ;		Total:    0
  2184                          ; This function calls:
  2185                          ;		_LTRX_PutCRLF
  2186                          ;		_LTRX_CPutString
  2187                          ; This function is called by:
  2188                          ;		_print_help
  2189                          ; This function uses a non-reentrant model
  2190                          ; 
  2191                          	file	"./main.c"
  2192                          	line	52
  2193  0032                    	__size_of_print_header	equ	__end_of_print_header-_print_header
  2194                          ;main.c: 52: void print_header(){
  2195                          ;			
  2196  7AEF                    _print_header:	
  2197                          	opt	disable
  2198                          	line	53
  2199                          ;main.c: 53: LTRX_PutCRLF();
  2200  7AEF  71 80             	or	f, 0x80	;select multiple RAM page mode
  2201  7AF1  70 CF             	and	f, 0xCF   ;select user reg space
  2202                          	
  2203  7AF3  7C 7010           	xcall	_LTRX_PutCRLF
  2204                          	
  2205  7AF6  38 00             	add	sp,0
  2206                          	line	54
  2207                          ;main.c: 54: LTRX_CPutString("OneWire gateway v.");
  2208  7AF8  57 46             	mov	x,<(STR_8)
  2209  7AFA  50 7F             	mov	a,>(STR_8)
  2210  7AFC  71 80             	or	f, 0x80	;select multiple RAM page mode
  2211  7AFE  70 CF             	and	f, 0xCF   ;select user reg space
  2212                          	
  2213  7B00  7C 6FFE           	xcall	_LTRX_CPutString
  2214                          	
  2215  7B03  38 00             	add	sp,0
  2216                          	line	55
  2217                          ;main.c: 55: LTRX_CPutString("1.0");
  2218  7B05  57 71             	mov	x,<(STR_9)
  2219  7B07  50 7F             	mov	a,>(STR_9)
  2220  7B09  71 80             	or	f, 0x80	;select multiple RAM page mode
  2221  7B0B  70 CF             	and	f, 0xCF   ;select user reg space
  2222                          	
  2223  7B0D  7C 6FFE           	xcall	_LTRX_CPutString
  2224                          	
  2225  7B10  38 00             	add	sp,0
  2226                          	line	56
  2227                          ;main.c: 56: LTRX_PutCRLF();
  2228  7B12  71 80             	or	f, 0x80	;select multiple RAM page mode
  2229  7B14  70 CF             	and	f, 0xCF   ;select user reg space
  2230                          	
  2231  7B16  7C 7010           	xcall	_LTRX_PutCRLF
  2232                          	
  2233  7B19  38 00             	add	sp,0
  2234                          	line	58
  2235                          ;main.c: 58: return;
  2236  7B1B  7D 7B1E           	xjmp	l4
  2237                          	line	59
  2238                          ;main.c: 59: }
  2239  7B1E                    l4:
  2240                          ;			
  2241  7B1E  70 CF             	and	f, 0xCF   ;select user reg space
  2242                          	
  2243  7B20  7F                	ret
  2244                          GLOBAL __end_of_print_header
  2245  7B21                    	__end_of_print_header:
  2246                          	FNSIZE	_print_header,0,0
  2247                          ; =============== function _print_header ends ============
  2248                          
  2249                          	signat	_print_header,88
  2250                          	global	_OneWire_fFindFirst
  2251                          	global	_LTRX_PutChar
  2252                          	global	_delay_10ms
  2253                          	global	??_delay_10ms
  2254                          	global	?_delay_10ms
  2255                          	psect	text
  2256                          
  2257                          ; *************** function _delay_10ms *****************
  2258                          ; Defined at:
  2259                          ;		line 177 in file "./oo.c"
  2260                          ; Parameters:
  2261                          ;		None
  2262                          ; Auto variables:
  2263                          ;		counter     	       	type: short 
  2264                          ; Return value:
  2265                          ;		type: void 
  2266                          ;		size: 0
  2267                          ; Registers used:
  2268                          ;		a, CUR_PP
  2269                          ; Tracked objects:
  2270                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2271                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2272                          ;		Unchanged: 
  2273                          ; Data sizes:
  2274                          ;		Autos:    2
  2275                          ;		Params:   0
  2276                          ;		Temp:     0
  2277                          ;		Total:    2
  2278                          ; This function calls:
  2279                          ;		Nothing
  2280                          ; This function is called by:
  2281                          ;		_oo_wait_for_completion
  2282                          ; This function uses a non-reentrant model
  2283                          ; 
  2284                          	file	"./oo.c"
  2285                          	line	177
  2286  003D                    	__size_of_delay_10ms	equ	__end_of_delay_10ms-_delay_10ms
  2287                          ;oo.c: 177: void delay_10ms(){
  2288                          ;			
  2289  7B21                    _delay_10ms:	
  2290                          	opt	disable
  2291                          	line	180
  2292                          ;oo.c: 178: short counter;
  2293                          ;oo.c: 180: for (counter = 0; counter<15000; counter++){
  2294  7B21  50 00             	mov	a,<(0)
  2295  7B23  70 CF             	and	f, 0xCF   ;select user reg space
  2296  7B25  62 D0 00          	mov	reg[CUR_PP],0
  2297  7B28  53 1E             	mov	[1+((delay_10ms@counter)^0x0)],a
  2298  7B2A  50 00             	mov	a,>(0)
  2299  7B2C  53 1D             	mov	[0+((delay_10ms@counter)^0x0)],a
  2300  7B2E  51 1E             	mov	a,[1+((delay_10ms@counter)^0x0)]
  2301  7B30  39 98             	cmp	a,<(03A98h)
  2302  7B32  51 1D             	mov	a,[0+((delay_10ms@counter)^0x0)]
  2303  7B34  31 80             	xor	a,80h
  2304  7B36  19 BA             	sbb	a,(>03A98h)^80h
  2305  7B38  C004              	jc	l46
  2306  7B3A  7D 7B5B           	xjmp	l47
  2307                          ;			
  2308  7B3D                    l46:	
  2309                          	line	181
  2310                          # 181 "./oo.c"
  2311  7B3D  40                nop ;#
  2312                          	psect	text
  2313                          	line	180
  2314                          ;oo.c: 181: asm("nop");
  2315  7B3E  70 CF             	and	f, 0xCF   ;select user reg space
  2316  7B40  62 D0 00          	mov	reg[CUR_PP],0
  2317  7B43  51 1E             	mov	a,[1+((delay_10ms@counter)^0x0)]
  2318  7B45  01 01             	add	a,<(01h)
  2319  7B47  53 1E             	mov	[1+((delay_10ms@counter)^0x0)],a
  2320  7B49  51 1D             	mov	a,[0+((delay_10ms@counter)^0x0)]
  2321  7B4B  09 00             	adc	a,>(01h)
  2322  7B4D  53 1D             	mov	[0+((delay_10ms@counter)^0x0)],a
  2323  7B4F  51 1E             	mov	a,[1+((delay_10ms@counter)^0x0)]
  2324  7B51  39 98             	cmp	a,<(03A98h)
  2325  7B53  51 1D             	mov	a,[0+((delay_10ms@counter)^0x0)]
  2326  7B55  31 80             	xor	a,80h
  2327  7B57  19 BA             	sbb	a,(>03A98h)^80h
  2328  7B59  CFE3              	jc	l46
  2329                          ;			
  2330  7B5B                    l47:	
  2331                          	line	183
  2332                          ;oo.c: 182: }
  2333                          ;oo.c: 183: }
  2334  7B5B                    l45:
  2335                          ;			
  2336  7B5B  70 CF             	and	f, 0xCF   ;select user reg space
  2337                          	
  2338  7B5D  7F                	ret
  2339                          GLOBAL __end_of_delay_10ms
  2340  7B5E                    	__end_of_delay_10ms:
  2341                          	FNSIZE	_delay_10ms,2,0
  2342                          ; =============== function _delay_10ms ends ============
  2343                          
  2344                          	signat	_delay_10ms,88
  2345                          	global	_oo_conversion_busy
  2346                          	global	??_oo_conversion_busy
  2347                          	global	?_oo_conversion_busy
  2348                          	psect	text
  2349                          
  2350                          ; *************** function _oo_conversion_busy *****************
  2351                          ; Defined at:
  2352                          ;		line 152 in file "./oo.c"
  2353                          ; Parameters:
  2354                          ;		None
  2355                          ; Auto variables:
  2356                          ;		None
  2357                          ; Return value:
  2358                          ;		type: unsigned char 
  2359                          ;		size: 1
  2360                          ; Registers used:
  2361                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2362                          ; Tracked objects:
  2363                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2364                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2365                          ;		Unchanged: 
  2366                          ; Data sizes:
  2367                          ;		Autos:    0
  2368                          ;		Params:   0
  2369                          ;		Temp:     0
  2370                          ;		Total:    0
  2371                          ; This function calls:
  2372                          ;		_oo_rx_byte
  2373                          ; This function is called by:
  2374                          ;		_oo_wait_for_completion
  2375                          ; This function uses a non-reentrant model
  2376                          ; 
  2377                          	file	"./oo.c"
  2378                          	line	152
  2379  0016                    	__size_of_oo_conversion_busy	equ	__end_of_oo_conversion_busy-_oo_conversion_busy
  2380                          ;oo.c: 152: char oo_conversion_busy(){
  2381                          ;			
  2382  7B5E                    _oo_conversion_busy:	
  2383                          	opt	disable
  2384                          	line	153
  2385                          ;oo.c: 153: if (oo_rx_byte() == 0xFF){
  2386  7B5E  71 80             	or	f, 0x80	;select multiple RAM page mode
  2387                          	
  2388  7B60  7C 7C1B           	xcall	_oo_rx_byte
  2389                          	
  2390  7B63  39 FF             	cmp	a,(0FFh)
  2391  7B65  B006              	jnz	l42
  2392                          	line	154
  2393                          ;oo.c: 154: return 1;
  2394  7B67  50 01             	mov	a,<((01h))
  2395  7B69  7D 7B71           	xjmp	l41
  2396                          	line	155
  2397                          ;			
  2398  7B6C                    l42:	
  2399                          	line	156
  2400                          ;oo.c: 156: return 0;
  2401  7B6C  50 00             	mov	a,<((0))
  2402  7B6E  7D 7B71           	xjmp	l41
  2403                          	line	158
  2404                          ;oo.c: 157: }
  2405                          ;oo.c: 158: }
  2406  7B71                    l41:
  2407                          ;			
  2408  7B71  70 CF             	and	f, 0xCF   ;select user reg space
  2409                          	
  2410  7B73  7F                	ret
  2411                          GLOBAL __end_of_oo_conversion_busy
  2412  7B74                    	__end_of_oo_conversion_busy:
  2413                          	FNSIZE	_oo_conversion_busy,0,0
  2414                          ; =============== function _oo_conversion_busy ends ============
  2415                          
  2416                          	signat	_oo_conversion_busy,89
  2417                          	global	_oo_read_scratchpad
  2418                          	global	??_oo_read_scratchpad
  2419                          	global	?_oo_read_scratchpad
  2420                          	psect	text
  2421                          
  2422                          ; *************** function _oo_read_scratchpad *****************
  2423                          ; Defined at:
  2424                          ;		line 90 in file "./oo.c"
  2425                          ; Parameters:
  2426                          ;		None
  2427                          ; Auto variables:
  2428                          ;		counter     	       	type: unsigned char 
  2429                          ; Return value:
  2430                          ;		type: unsigned char 
  2431                          ;		size: 1
  2432                          ; Registers used:
  2433                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2434                          ; Tracked objects:
  2435                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2436                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2437                          ;		Unchanged: 
  2438                          ; Data sizes:
  2439                          ;		Autos:    1
  2440                          ;		Params:   0
  2441                          ;		Temp:     0
  2442                          ;		Total:    1
  2443                          ; This function calls:
  2444                          ;		_oo_tx_byte
  2445                          ;		_oo_crc_init
  2446                          ;		_LTRX_CPutString
  2447                          ;		_oo_rx_byte
  2448                          ;		_LTRX_PutSHexByte
  2449                          ;		_LTRX_PutCRLF
  2450                          ; This function is called by:
  2451                          ;		_oo_read_device
  2452                          ; This function uses a non-reentrant model
  2453                          ; 
  2454                          	file	"./oo.c"
  2455                          	line	90
  2456  0076                    	__size_of_oo_read_scratchpad	equ	__end_of_oo_read_scratchpad-_oo_read_scratchpad
  2457                          ;oo.c: 90: char oo_read_scratchpad(){
  2458                          ;			
  2459  7B74                    _oo_read_scratchpad:	
  2460                          	opt	disable
  2461                          	line	93
  2462                          ;oo.c: 93: oo_tx_byte(0xBE);
  2463  7B74  50 BE             	mov	a,<((0BEh))
  2464  7B76  70 CF             	and	f, 0xCF   ;select user reg space
  2465  7B78  62 D0 00          	mov	reg[CUR_PP],0
  2466  7B7B  53 3B             	mov	[0+((?_oo_tx_byte)^0x0)],a
  2467  7B7D  71 80             	or	f, 0x80	;select multiple RAM page mode
  2468                          	
  2469  7B7F  7C 7C07           	xcall	_oo_tx_byte
  2470                          	
  2471                          	line	95
  2472                          ;oo.c: 95: char counter = 0;
  2473  7B82  50 00             	mov	a,<((0))
  2474  7B84  70 CF             	and	f, 0xCF   ;select user reg space
  2475  7B86  62 D0 00          	mov	reg[CUR_PP],0
  2476  7B89  53 3A             	mov	[0+((oo_read_scratchpad@counter)^0x0)],a
  2477                          	line	99
  2478                          ;oo.c: 99: oo_crc_init();
  2479  7B8B  71 80             	or	f, 0x80	;select multiple RAM page mode
  2480                          	
  2481  7B8D  7C 7BF9           	xcall	_oo_crc_init
  2482                          	
  2483                          	line	101
  2484                          ;oo.c: 101: LTRX_CPutString("Scratchpad: ");
  2485  7B90  57 EF             	mov	x,<(STR_17)
  2486  7B92  50 7E             	mov	a,>(STR_17)
  2487  7B94  71 80             	or	f, 0x80	;select multiple RAM page mode
  2488  7B96  70 CF             	and	f, 0xCF   ;select user reg space
  2489                          	
  2490  7B98  7C 6FFE           	xcall	_LTRX_CPutString
  2491                          	
  2492  7B9B  38 00             	add	sp,0
  2493                          	line	102
  2494                          ;oo.c: 102: while (counter < 9){
  2495  7B9D  7D 7BC7           	xjmp	l36
  2496                          ;			
  2497  7BA0                    l37:	
  2498                          	line	103
  2499                          ;oo.c: 103: oo_scratchpad[counter] = oo_rx_byte();
  2500  7BA0  71 80             	or	f, 0x80	;select multiple RAM page mode
  2501                          	
  2502  7BA2  7C 7C1B           	xcall	_oo_rx_byte
  2503                          	
  2504  7BA5  70 CF             	and	f, 0xCF   ;select user reg space
  2505  7BA7  62 D0 00          	mov	reg[CUR_PP],0
  2506  7BAA  58 3A             	mov	x,[0+((oo_read_scratchpad@counter)^0x0)]
  2507  7BAC  71 80             	or	f, 0x80	;select multiple RAM page mode
  2508  7BAE  62 D3 02          	mov	reg[IDX_PP],2
  2509  7BB1  54 00             	mov	[0+(_oo_scratchpad^0x200)+x],a
  2510                          	line	104
  2511                          ;oo.c: 104: LTRX_PutSHexByte(oo_scratchpad[counter]);
  2512  7BB3  58 3A             	mov	x,[0+((oo_read_scratchpad@counter)^0x0)]
  2513  7BB5  52 00             	mov	a,[0+(_oo_scratchpad^0x200)+x]
  2514                          	
  2515  7BB7  7C 6F43           	xcall	_LTRX_PutSHexByte
  2516                          	
  2517  7BBA  38 00             	add	sp,0
  2518                          	line	105
  2519                          ;oo.c: 105: counter++;
  2520  7BBC  70 CF             	and	f, 0xCF   ;select user reg space
  2521  7BBE  62 D0 00          	mov	reg[CUR_PP],0
  2522  7BC1  51 3A             	mov	a,[0+((oo_read_scratchpad@counter)^0x0)]
  2523  7BC3  01 01             	add	a,<((01h))
  2524  7BC5  53 3A             	mov	[0+((oo_read_scratchpad@counter)^0x0)],a
  2525                          	line	106
  2526                          ;			
  2527  7BC7                    l36:	
  2528                          	line	102
  2529  7BC7  70 CF             	and	f, 0xCF   ;select user reg space
  2530  7BC9  62 D0 00          	mov	reg[CUR_PP],0
  2531  7BCC  51 3A             	mov	a,[0+((oo_read_scratchpad@counter)^0x0)]
  2532  7BCE  39 09             	cmp	a,<((09h))
  2533  7BD0  CFCF              	jc	l37
  2534                          ;			
  2535  7BD2                    l38:	
  2536                          	line	107
  2537                          ;oo.c: 106: }
  2538                          ;oo.c: 107: LTRX_PutCRLF();
  2539  7BD2  71 80             	or	f, 0x80	;select multiple RAM page mode
  2540  7BD4  70 CF             	and	f, 0xCF   ;select user reg space
  2541                          	
  2542  7BD6  7C 7010           	xcall	_LTRX_PutCRLF
  2543                          	
  2544  7BD9  38 00             	add	sp,0
  2545                          	line	111
  2546                          ;oo.c: 111: return crc;
  2547  7BDB  70 CF             	and	f, 0xCF   ;select user reg space
  2548  7BDD  71 80             	or	f, 0x80	;select multiple RAM page mode
  2549  7BDF  62 D0 02          	mov	reg[CUR_PP],2
  2550  7BE2  51 16             	mov	a,[0+((_crc)^0x200)]
  2551  7BE4  7D 7BE7           	xjmp	l35
  2552                          	line	115
  2553                          ;oo.c: 115: }
  2554  7BE7                    l35:
  2555                          ;			
  2556  7BE7  70 CF             	and	f, 0xCF   ;select user reg space
  2557                          	
  2558  7BE9  7F                	ret
  2559                          GLOBAL __end_of_oo_read_scratchpad
  2560  7BEA                    	__end_of_oo_read_scratchpad:
  2561                          	FNSIZE	_oo_read_scratchpad,1,0
  2562                          ; =============== function _oo_read_scratchpad ends ============
  2563                          
  2564                          	signat	_oo_read_scratchpad,89
  2565                          	global	_OneWire_fVerify
  2566                          	global	_OneWire_SetROM
  2567                          	global	_oo_busreset
  2568                          	global	??_oo_busreset
  2569                          	global	?_oo_busreset
  2570                          	psect	text
  2571                          
  2572                          ; *************** function _oo_busreset *****************
  2573                          ; Defined at:
  2574                          ;		line 51 in file "./oo.c"
  2575                          ; Parameters:
  2576                          ;		None
  2577                          ; Auto variables:
  2578                          ;		None
  2579                          ; Return value:
  2580                          ;		type: unsigned char 
  2581                          ;		size: 1
  2582                          ; Registers used:
  2583                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2584                          ; Tracked objects:
  2585                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2586                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2587                          ;		Unchanged: 
  2588                          ; Data sizes:
  2589                          ;		Autos:    0
  2590                          ;		Params:   0
  2591                          ;		Temp:     0
  2592                          ;		Total:    0
  2593                          ; This function calls:
  2594                          ;		_OneWire_fReset
  2595                          ; This function is called by:
  2596                          ;		_oo_read_device
  2597                          ;		_oo_report
  2598                          ; This function uses a non-reentrant model
  2599                          ; 
  2600                          	file	"./oo.c"
  2601                          	line	51
  2602  000F                    	__size_of_oo_busreset	equ	__end_of_oo_busreset-_oo_busreset
  2603                          ;oo.c: 11: char oo_scratchpad[9];
  2604                          ;oo.c: 26: char crc = 0;
  2605                          ;oo.c: 29: char crc_rom[256] = {0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 
                                65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220, 35, 125, 159, 193, 66, 2
                                8, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98, 190, 224, 2, 
  2606                          ;oo.c: 32: void oo_crc_init();
  2607                          ;oo.c: 33: void oo_crc_shuffle_byte(char input);
  2608                          ;oo.c: 37: char id[8];
  2609                          ;oo.c: 38: signed char conflict;
  2610                          ;oo.c: 39: bit new_conflict;
  2611                          ;oo.c: 51: char oo_busreset(){
  2612                          ;			
  2613  7BEA                    _oo_busreset:	
  2614                          	opt	disable
  2615                          	line	53
  2616                          ;oo.c: 53: return OneWire_fReset();
  2617  7BEA  71 80             	or	f, 0x80	;select multiple RAM page mode
  2618  7BEC  70 CF             	and	f, 0xCF   ;select user reg space
  2619                          	
  2620  7BEE  7C 713D           	xcall	_OneWire_fReset
  2621                          	
  2622  7BF1  38 00             	add	sp,0
  2623  7BF3  7D 7BF6           	xjmp	l32
  2624                          	line	55
  2625                          ;oo.c: 55: }
  2626  7BF6                    l32:
  2627                          ;			
  2628  7BF6  70 CF             	and	f, 0xCF   ;select user reg space
  2629                          	
  2630  7BF8  7F                	ret
  2631                          GLOBAL __end_of_oo_busreset
  2632  7BF9                    	__end_of_oo_busreset:
  2633                          	FNSIZE	_oo_busreset,0,0
  2634                          ; =============== function _oo_busreset ends ============
  2635                          
  2636                          	signat	_oo_busreset,89
  2637                          	global	_OneWire_GetROM
  2638                          	global	_LTRX_CPutString
  2639                          	global	_LTRX_PutCRLF
  2640                          	global	_oo_crc_init
  2641                          	global	??_oo_crc_init
  2642                          	global	?_oo_crc_init
  2643                          	psect	text
  2644                          
  2645                          ; *************** function _oo_crc_init *****************
  2646                          ; Defined at:
  2647                          ;		line 215 in file "./oo.c"
  2648                          ; Parameters:
  2649                          ;		None
  2650                          ; Auto variables:
  2651                          ;		None
  2652                          ; Return value:
  2653                          ;		type: void 
  2654                          ;		size: 0
  2655                          ; Registers used:
  2656                          ;		a, CUR_PP
  2657                          ; Tracked objects:
  2658                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2659                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2660                          ;		Unchanged: 
  2661                          ; Data sizes:
  2662                          ;		Autos:    0
  2663                          ;		Params:   0
  2664                          ;		Temp:     0
  2665                          ;		Total:    0
  2666                          ; This function calls:
  2667                          ;		Nothing
  2668                          ; This function is called by:
  2669                          ;		_oo_read_scratchpad
  2670                          ; This function uses a non-reentrant model
  2671                          ; 
  2672                          	file	"./oo.c"
  2673                          	line	215
  2674  000E                    	__size_of_oo_crc_init	equ	__end_of_oo_crc_init-_oo_crc_init
  2675                          ;oo.c: 215: void oo_crc_init(){
  2676                          ;			
  2677  7BF9                    _oo_crc_init:	
  2678                          	opt	disable
  2679                          	line	216
  2680                          ;oo.c: 216: crc = 0;
  2681  7BF9  50 00             	mov	a,<((0))
  2682  7BFB  70 CF             	and	f, 0xCF   ;select user reg space
  2683  7BFD  71 80             	or	f, 0x80	;select multiple RAM page mode
  2684  7BFF  62 D0 02          	mov	reg[CUR_PP],2
  2685  7C02  53 16             	mov	[0+((_crc)^0x200)],a
  2686                          	line	217
  2687                          ;oo.c: 217: }
  2688  7C04                    l54:
  2689                          ;			
  2690  7C04  70 CF             	and	f, 0xCF   ;select user reg space
  2691                          	
  2692  7C06  7F                	ret
  2693                          GLOBAL __end_of_oo_crc_init
  2694  7C07                    	__end_of_oo_crc_init:
  2695                          	FNSIZE	_oo_crc_init,0,0
  2696                          ; =============== function _oo_crc_init ends ============
  2697                          
  2698                          	signat	_oo_crc_init,88
  2699                          	global	_LTRX_PutSHexByte
  2700                          	global	_oo_tx_byte
  2701                          	global	??_oo_tx_byte
  2702                          	global	?_oo_tx_byte
  2703                          	psect	text
  2704                          
  2705                          ; *************** function _oo_tx_byte *****************
  2706                          ; Defined at:
  2707                          ;		line 62 in file "./oo.c"
  2708                          ; Parameters:
  2709                          ;		data        	offs:   0	type: unsigned char 
  2710                          ; Auto variables:
  2711                          ;		None
  2712                          ; Return value:
  2713                          ;		type: void 
  2714                          ;		size: 0
  2715                          ; Registers used:
  2716                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2717                          ; Tracked objects:
  2718                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2719                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2720                          ;		Unchanged: 
  2721                          ; Data sizes:
  2722                          ;		Autos:    0
  2723                          ;		Params:   1
  2724                          ;		Temp:     0
  2725                          ;		Total:    1
  2726                          ; This function calls:
  2727                          ;		_OneWire_WriteByte
  2728                          ; This function is called by:
  2729                          ;		_oo_read_scratchpad
  2730                          ;		_oo_start_conversion
  2731                          ; This function uses a non-reentrant model
  2732                          ; 
  2733                          	file	"./oo.c"
  2734                          	line	62
  2735  0014                    	__size_of_oo_tx_byte	equ	__end_of_oo_tx_byte-_oo_tx_byte
  2736                          ;oo.c: 62: void oo_tx_byte(char data){
  2737                          ;			
  2738  7C07                    _oo_tx_byte:	
  2739                          	opt	disable
  2740                          	line	63
  2741                          ;oo.c: 63: OneWire_WriteByte(data);
  2742  7C07  70 CF             	and	f, 0xCF   ;select user reg space
  2743  7C09  62 D0 00          	mov	reg[CUR_PP],0
  2744  7C0C  51 3B             	mov	a,[0+((oo_tx_byte@data)^0x0)]
  2745  7C0E  71 80             	or	f, 0x80	;select multiple RAM page mode
  2746                          	
  2747  7C10  7C 7173           	xcall	_OneWire_WriteByte
  2748                          	
  2749  7C13  38 00             	add	sp,0
  2750                          	line	64
  2751                          ;oo.c: 64: return;
  2752  7C15  7D 7C18           	xjmp	l33
  2753                          	line	65
  2754                          ;oo.c: 65: }
  2755  7C18                    l33:
  2756                          ;			
  2757  7C18  70 CF             	and	f, 0xCF   ;select user reg space
  2758                          	
  2759  7C1A  7F                	ret
  2760                          GLOBAL __end_of_oo_tx_byte
  2761  7C1B                    	__end_of_oo_tx_byte:
  2762                          	FNSIZE	_oo_tx_byte,0,1
  2763                          ; =============== function _oo_tx_byte ends ============
  2764                          
  2765                          	signat	_oo_tx_byte,4216
  2766                          	global	_OneWire_fReset
  2767                          	global	_oo_rx_byte
  2768                          	global	??_oo_rx_byte
  2769                          	global	?_oo_rx_byte
  2770                          	psect	text
  2771                          
  2772                          ; *************** function _oo_rx_byte *****************
  2773                          ; Defined at:
  2774                          ;		line 72 in file "./oo.c"
  2775                          ; Parameters:
  2776                          ;		None
  2777                          ; Auto variables:
  2778                          ;		data        	       	type: unsigned char 
  2779                          ; Return value:
  2780                          ;		type: unsigned char 
  2781                          ;		size: 1
  2782                          ; Registers used:
  2783                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2784                          ; Tracked objects:
  2785                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2786                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2787                          ;		Unchanged: 
  2788                          ; Data sizes:
  2789                          ;		Autos:    1
  2790                          ;		Params:   0
  2791                          ;		Temp:     0
  2792                          ;		Total:    1
  2793                          ; This function calls:
  2794                          ;		_OneWire_bReadByte
  2795                          ;		_oo_crc_shuffle_byte
  2796                          ; This function is called by:
  2797                          ;		_oo_read_scratchpad
  2798                          ;		_oo_conversion_busy
  2799                          ; This function uses a non-reentrant model
  2800                          ; 
  2801                          	file	"./oo.c"
  2802                          	line	72
  2803  002D                    	__size_of_oo_rx_byte	equ	__end_of_oo_rx_byte-_oo_rx_byte
  2804                          ;oo.c: 72: char oo_rx_byte(){
  2805                          ;			
  2806  7C1B                    _oo_rx_byte:	
  2807                          	opt	disable
  2808                          	line	74
  2809                          ;oo.c: 74: char data = 0;
  2810  7C1B  50 00             	mov	a,<((0))
  2811  7C1D  70 CF             	and	f, 0xCF   ;select user reg space
  2812  7C1F  62 D0 00          	mov	reg[CUR_PP],0
  2813  7C22  53 3B             	mov	[0+((oo_rx_byte@data)^0x0)],a
  2814                          	line	76
  2815                          ;oo.c: 76: OneWire_bReadByte();
  2816  7C24  71 80             	or	f, 0x80	;select multiple RAM page mode
  2817  7C26  70 CF             	and	f, 0xCF   ;select user reg space
  2818                          	
  2819  7C28  7C 718E           	xcall	_OneWire_bReadByte
  2820                          	
  2821  7C2B  38 00             	add	sp,0
  2822                          	line	79
  2823                          ;oo.c: 79: oo_crc_shuffle_byte(data);
  2824  7C2D  70 CF             	and	f, 0xCF   ;select user reg space
  2825  7C2F  62 D0 00          	mov	reg[CUR_PP],0
  2826  7C32  51 3B             	mov	a,[0+((oo_rx_byte@data)^0x0)]
  2827  7C34  53 3C             	mov	[0+((?_oo_crc_shuffle_byte)^0x0)],a
  2828  7C36  71 80             	or	f, 0x80	;select multiple RAM page mode
  2829                          	
  2830  7C38  7C 7C48           	xcall	_oo_crc_shuffle_byte
  2831                          	
  2832                          	line	81
  2833                          ;oo.c: 81: return data;
  2834  7C3B  70 CF             	and	f, 0xCF   ;select user reg space
  2835  7C3D  62 D0 00          	mov	reg[CUR_PP],0
  2836  7C40  51 3B             	mov	a,[0+((oo_rx_byte@data)^0x0)]
  2837  7C42  7D 7C45           	xjmp	l34
  2838                          	line	82
  2839                          ;oo.c: 82: }
  2840  7C45                    l34:
  2841                          ;			
  2842  7C45  70 CF             	and	f, 0xCF   ;select user reg space
  2843                          	
  2844  7C47  7F                	ret
  2845                          GLOBAL __end_of_oo_rx_byte
  2846  7C48                    	__end_of_oo_rx_byte:
  2847                          	FNSIZE	_oo_rx_byte,1,0
  2848                          ; =============== function _oo_rx_byte ends ============
  2849                          
  2850                          	signat	_oo_rx_byte,89
  2851                          	global	_oo_crc_shuffle_byte
  2852                          	global	??_oo_crc_shuffle_byte
  2853                          	global	?_oo_crc_shuffle_byte
  2854                          	psect	text
  2855                          
  2856                          ; *************** function _oo_crc_shuffle_byte *****************
  2857                          ; Defined at:
  2858                          ;		line 224 in file "./oo.c"
  2859                          ; Parameters:
  2860                          ;		input       	offs:   0	type: unsigned char 
  2861                          ; Auto variables:
  2862                          ;		None
  2863                          ; Return value:
  2864                          ;		type: void 
  2865                          ;		size: 0
  2866                          ; Registers used:
  2867                          ;		a, x, CUR_PP
  2868                          ; Tracked objects:
  2869                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2870                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2871                          ;		Unchanged: 
  2872                          ; Data sizes:
  2873                          ;		Autos:    0
  2874                          ;		Params:   1
  2875                          ;		Temp:     1
  2876                          ;		Total:    2
  2877                          ; This function calls:
  2878                          ;		Nothing
  2879                          ; This function is called by:
  2880                          ;		_oo_rx_byte
  2881                          ; This function uses a non-reentrant model
  2882                          ; 
  2883                          	file	"./oo.c"
  2884                          	line	224
  2885  0023                    	__size_of_oo_crc_shuffle_byte	equ	__end_of_oo_crc_shuffle_byte-_oo_crc_shuffle_byte
  2886                          ;oo.c: 224: void oo_crc_shuffle_byte(char input){
  2887                          ;			
  2888  7C48                    _oo_crc_shuffle_byte:	
  2889                          	opt	disable
  2890                          	line	225
  2891                          ;oo.c: 225: crc = crc_rom[crc ^ input];
  2892  7C48  70 CF             	and	f, 0xCF   ;select user reg space
  2893  7C4A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2894  7C4C  62 D0 02          	mov	reg[CUR_PP],2
  2895  7C4F  51 16             	mov	a,[0+((_crc)^0x200)]
  2896  7C51  62 D0 00          	mov	reg[CUR_PP],0
  2897  7C54  32 3C             	xor	a,[0+((oo_crc_shuffle_byte@input)^0x0)]
  2898  7C56  53 3D             	mov	[(??_oo_crc_shuffle_byte^0x0)+0+0],a
  2899  7C58  51 3D             	mov	a,[(??_oo_crc_shuffle_byte^0x0)+0+0]
  2900  7C5A  01 00             	add	a,<(8000h+_crc_rom)
  2901  7C5C  5C                	mov	x,a
  2902  7C5D  50 81             	mov	a,>(8000h+_crc_rom)
  2903  7C5F  60 D3             	mov	reg[0xd3],a
  2904  7C61  52 00             	mov	a,[x+0]
  2905  7C63  62 D0 02          	mov	reg[CUR_PP],2
  2906  7C66  53 16             	mov	[0+((_crc)^0x200)],a
  2907                          	line	226
  2908                          ;oo.c: 226: }
  2909  7C68                    l55:
  2910                          ;			
  2911  7C68  70 CF             	and	f, 0xCF   ;select user reg space
  2912                          	
  2913  7C6A  7F                	ret
  2914                          GLOBAL __end_of_oo_crc_shuffle_byte
  2915  7C6B                    	__end_of_oo_crc_shuffle_byte:
  2916                          	FNSIZE	_oo_crc_shuffle_byte,1,1
  2917                          ; =============== function _oo_crc_shuffle_byte ends ============
  2918                          
  2919                          	signat	_oo_crc_shuffle_byte,4216
  2920                          	global	_OneWire_bReadByte
  2921                          	global	_OneWire_WriteByte
  2922                          	global	_Ticker_ISR
  2923                          	global	??_Ticker_ISR
  2924                          	global	?_Ticker_ISR
  2925                          	psect	intrtext,class=CODE,space=0
  2926                          
  2927                          ; *************** function _Ticker_ISR *****************
  2928                          ; Defined at:
  2929                          ;		line 25 in file "./main.c"
  2930                          ; Parameters:
  2931                          ;		None
  2932                          ; Auto variables:
  2933                          ;		None
  2934                          ; Return value:
  2935                          ;		type: void 
  2936                          ;		size: 0
  2937                          ; Registers used:
  2938                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  2939                          ; Tracked objects:
  2940                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=0 MVR_PP? MVW_PP? 
  2941                          ;		On exit  : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  2942                          ;		Unchanged: 
  2943                          ; Data sizes:
  2944                          ;		Autos:    0
  2945                          ;		Params:   0
  2946                          ;		Temp:    10
  2947                          ;		Total:   10
  2948                          ; This function calls:
  2949                          ;		_LED1_Invert
  2950                          ; This function is called by:
  2951                          ;		Interrupt level 1
  2952                          ; This function uses a non-reentrant model
  2953                          ; 
  2954                          	file	"./main.c"
  2955                          	line	25
  2956  0041                    	__size_of_Ticker_ISR	equ	__end_of_Ticker_ISR-_Ticker_ISR
  2957                          ;main.c: 11: unsigned char id0[8];
  2958                          ;main.c: 12: unsigned char id1[8];
  2959                          ;main.c: 13: unsigned short temp0;
  2960                          ;main.c: 14: unsigned short temp1;
  2961                          ;main.c: 17: void hardware_init();
  2962                          ;main.c: 18: void print_id(unsigned char *id);
  2963                          ;main.c: 19: void get_sensors();
  2964                          ;main.c: 20: void get_temp();
  2965                          ;main.c: 24: void Ticker_ISR()
  2966                          ;main.c: 25: {
  2967  7FB2                    _Ticker_ISR:
  2968  7FB2                    Ticker_ISR:
  2969                          	global	Ticker_ISR ; in case PD tries to call an assembler ISR by this name
  2970                          
  2971                          	opt	disable
  2972  7FB2  08                	push	a
  2973  7FB3  10                	push	x
  2974  7FB4  5D 6C             	mov a,reg[TMP_DR0]
  2975  7FB6  08                	push	a
  2976  7FB7  5D 6D             	mov a,reg[TMP_DR1]
  2977  7FB9  08                	push	a
  2978  7FBA  5D 6E             	mov a,reg[TMP_DR2]
  2979  7FBC  08                	push	a
  2980  7FBD  5D 6F             	mov a,reg[TMP_DR3]
  2981  7FBF  08                	push	a
  2982  7FC0  5D D0             	mov a,reg[CUR_PP]
  2983  7FC2  08                	push	a
  2984  7FC3  5D D3             	mov a,reg[IDX_PP]
  2985  7FC5  08                	push	a
  2986  7FC6  5D D4             	mov a,reg[MVR_PP]
  2987  7FC8  08                	push	a
  2988  7FC9  5D D5             	mov a,reg[MVW_PP]
  2989  7FCB  08                	push	a
  2990                          	line	26
  2991                          ;main.c: 26: LED1_Invert();
  2992  7FCC  71 80             	or	f, 0x80	;select multiple RAM page mode
  2993                          	
  2994  7FCE  7C 6EA5           	xcall	_LED1_Invert
  2995                          	
  2996  7FD1  38 00             	add	sp,0
  2997                          	line	28
  2998                          ;main.c: 28: return;
  2999  7FD3  7D 7FD6           	xjmp	l2
  3000                          	line	29
  3001                          ;main.c: 29: }
  3002  7FD6                    l2:
  3003                          ;			
  3004  7FD6  70 CF             	and	f, 0xCF   ;select user reg space
  3005                          	
  3006  7FD8  18                	pop	a
  3007  7FD9  60 D5             	mov reg[MVW_PP],a
  3008  7FDB  18                	pop	a
  3009  7FDC  60 D4             	mov reg[MVR_PP],a
  3010  7FDE  18                	pop	a
  3011  7FDF  60 D3             	mov reg[IDX_PP],a
  3012  7FE1  18                	pop	a
  3013  7FE2  60 D0             	mov reg[CUR_PP],a
  3014  7FE4  18                	pop	a
  3015  7FE5  60 6F             	mov reg[TMP_DR3],a
  3016  7FE7  18                	pop	a
  3017  7FE8  60 6E             	mov reg[TMP_DR2],a
  3018  7FEA  18                	pop	a
  3019  7FEB  60 6D             	mov reg[TMP_DR1],a
  3020  7FED  18                	pop	a
  3021  7FEE  60 6C             	mov reg[TMP_DR0],a
  3022  7FF0  20                	pop	x
  3023  7FF1  18                	pop	a
  3024  7FF2  7E                	reti
  3025                          GLOBAL __end_of_Ticker_ISR
  3026  7FF3                    	__end_of_Ticker_ISR:
  3027                          	FNSIZE	_Ticker_ISR,10,0
  3028                          ; =============== function _Ticker_ISR ends ============
  3029                          
  3030                          	signat	_Ticker_ISR,88
  3031                          	global	_LED1_Invert
  3032                          	FNCALL	_main,_hardware_init
  3033                          	FNCALL	_main,_get_sensors
  3034                          	FNCALL	_main,_get_temp
  3035                          	FNCALL	_main,_print_data
  3036                          	FNCALL	_main,_LTRX_bCmdCheck
  3037                          	FNCALL	_main,_LTRX_szGetParam
  3038                          	FNCALL	_main,_oo_report
  3039                          	FNCALL	_main,_print_help
  3040                          	FNCALL	_main,_LTRX_CmdReset
  3041                          	FNCALL	_get_temp,_OneWire_fReset
  3042                          	FNCALL	_get_temp,_LTRX_CPutString
  3043                          	FNCALL	_get_temp,_LTRX_PutCRLF
  3044                          	FNCALL	_get_temp,_OneWire_WriteByte
  3045                          	FNCALL	_get_temp,_OneWire_bReadByte
  3046                          	FNCALL	_get_temp,_OneWire_SetROM
  3047                          	FNCALL	_get_temp,_OneWire_fVerify
  3048                          	FNCALL	_print_help,_print_header
  3049                          	FNCALL	_print_help,_LTRX_PutCRLF
  3050                          	FNCALL	_print_help,_LTRX_CPutString
  3051                          	FNCALL	_get_sensors,_OneWire_fReset
  3052                          	FNCALL	_get_sensors,_LTRX_CPutString
  3053                          	FNCALL	_get_sensors,_LTRX_PutCRLF
  3054                          	FNCALL	_get_sensors,_OneWire_fFindFirst
  3055                          	FNCALL	_get_sensors,_OneWire_GetROM
  3056                          	FNCALL	_get_sensors,_OneWire_fFindNext
  3057                          	FNCALL	_print_data,_LTRX_PutCRLF
  3058                          	FNCALL	_print_data,_LTRX_CPutString
  3059                          	FNCALL	_print_data,_print_id
  3060                          	FNCALL	_print_data,_LTRX_PutSHexInt
  3061                          	FNCALL	_oo_report,_oo_busreset
  3062                          	FNCALL	_oo_report,_LTRX_CPutString
  3063                          	FNCALL	_oo_report,_LTRX_PutCRLF
  3064                          	FNCALL	_oo_report,_oo_start_conversion
  3065                          	FNCALL	_oo_report,_oo_wait_for_completion
  3066                          	FNCALL	_oo_report,_OneWire_fFindFirst
  3067                          	FNCALL	_oo_report,_OneWire_GetROM
  3068                          	FNCALL	_oo_report,_oo_read_device
  3069                          	FNCALL	_oo_report,_oo_print_data
  3070                          	FNCALL	_hardware_init,_OneWire_Start
  3071                          	FNCALL	_hardware_init,_Counter8_Start
  3072                          	FNCALL	_hardware_init,_Counter8_ltrx_Start
  3073                          	FNCALL	_hardware_init,_LED1_Start
  3074                          	FNCALL	_hardware_init,_Ticker_Start
  3075                          	FNCALL	_hardware_init,_LTRX_CmdReset
  3076                          	FNCALL	_hardware_init,_LTRX_EnableInt
  3077                          	FNCALL	_hardware_init,_LTRX_Start
  3078                          	FNCALL	_hardware_init,_Ticker_EnableInt
  3079                          	FNCALL	_oo_print_data,_LTRX_PutSHexByte
  3080                          	FNCALL	_oo_print_data,_LTRX_CPutString
  3081                          	FNCALL	_oo_print_data,_LTRX_PutChar
  3082                          	FNCALL	_oo_print_data,_LTRX_PutCRLF
  3083                          	FNCALL	_oo_start_conversion,_oo_tx_byte
  3084                          	FNCALL	_oo_wait_for_completion,_delay_10ms
  3085                          	FNCALL	_oo_wait_for_completion,_oo_conversion_busy
  3086                          	FNCALL	_oo_read_device,_OneWire_GetROM
  3087                          	FNCALL	_oo_read_device,_oo_busreset
  3088                          	FNCALL	_oo_read_device,_OneWire_fReset
  3089                          	FNCALL	_oo_read_device,_OneWire_SetROM
  3090                          	FNCALL	_oo_read_device,_OneWire_fVerify
  3091                          	FNCALL	_oo_read_device,_oo_read_scratchpad
  3092                          	FNCALL	_print_id,_LTRX_PutSHexByte
  3093                          	FNCALL	_print_header,_LTRX_PutCRLF
  3094                          	FNCALL	_print_header,_LTRX_CPutString
  3095                          	FNCALL	_oo_conversion_busy,_oo_rx_byte
  3096                          	FNCALL	_oo_read_scratchpad,_oo_tx_byte
  3097                          	FNCALL	_oo_read_scratchpad,_oo_crc_init
  3098                          	FNCALL	_oo_read_scratchpad,_LTRX_CPutString
  3099                          	FNCALL	_oo_read_scratchpad,_oo_rx_byte
  3100                          	FNCALL	_oo_read_scratchpad,_LTRX_PutSHexByte
  3101                          	FNCALL	_oo_read_scratchpad,_LTRX_PutCRLF
  3102                          	FNCALL	_oo_busreset,_OneWire_fReset
  3103                          	FNCALL	_oo_tx_byte,_OneWire_WriteByte
  3104                          	FNCALL	_oo_rx_byte,_OneWire_bReadByte
  3105                          	FNCALL	_oo_rx_byte,_oo_crc_shuffle_byte
  3106                          	FNROOT	_main
  3107                          	FNCALL	_Ticker_ISR,_LED1_Invert
  3108                          	FNCALL	intlevel1,_Ticker_ISR
  3109                          	global	intlevel1
  3110                          	FNROOT	intlevel1
  3111                          	global	_crc_rom
  3112                          	psect	ramdata1,class=RAM,space=1
  3113  0100                    _crc_rom:
  3114  0100                    	blk	256
  3115                          	psect	romdata1,class=BANKROM,space=0
  3116                          	file	"./oo.c"
  3117                          	line	29
  3118                          
  3119                          ;initializer for _crc_rom
  3120  0100  00                	db	(0)
  3121  0101  5E                	db	(05Eh)
  3122  0102  BC                	db	(0BCh)
  3123  0103  E2                	db	(0E2h)
  3124  0104  61                	db	(061h)
  3125  0105  3F                	db	(03Fh)
  3126  0106  DD                	db	(0DDh)
  3127  0107  83                	db	(083h)
  3128  0108  C2                	db	(0C2h)
  3129  0109  9C                	db	(09Ch)
  3130  010A  7E                	db	(07Eh)
  3131  010B  20                	db	(020h)
  3132  010C  A3                	db	(0A3h)
  3133  010D  FD                	db	(0FDh)
  3134  010E  1F                	db	(01Fh)
  3135  010F  41                	db	(041h)
  3136  0110  9D                	db	(09Dh)
  3137  0111  C3                	db	(0C3h)
  3138  0112  21                	db	(021h)
  3139  0113  7F                	db	(07Fh)
  3140  0114  FC                	db	(0FCh)
  3141  0115  A2                	db	(0A2h)
  3142  0116  40                	db	(040h)
  3143  0117  1E                	db	(01Eh)
  3144  0118  5F                	db	(05Fh)
  3145  0119  01                	db	(01h)
  3146  011A  E3                	db	(0E3h)
  3147  011B  BD                	db	(0BDh)
  3148  011C  3E                	db	(03Eh)
  3149  011D  60                	db	(060h)
  3150  011E  82                	db	(082h)
  3151  011F  DC                	db	(0DCh)
  3152  0120  23                	db	(023h)
  3153  0121  7D                	db	(07Dh)
  3154  0122  9F                	db	(09Fh)
  3155  0123  C1                	db	(0C1h)
  3156  0124  42                	db	(042h)
  3157  0125  1C                	db	(01Ch)
  3158  0126  FE                	db	(0FEh)
  3159  0127  A0                	db	(0A0h)
  3160  0128  E1                	db	(0E1h)
  3161  0129  BF                	db	(0BFh)
  3162  012A  5D                	db	(05Dh)
  3163  012B  03                	db	(03h)
  3164  012C  80                	db	(080h)
  3165  012D  DE                	db	(0DEh)
  3166  012E  3C                	db	(03Ch)
  3167  012F  62                	db	(062h)
  3168  0130  BE                	db	(0BEh)
  3169  0131  E0                	db	(0E0h)
  3170  0132  02                	db	(02h)
  3171  0133  5C                	db	(05Ch)
  3172  0134  DF                	db	(0DFh)
  3173  0135  81                	db	(081h)
  3174  0136  63                	db	(063h)
  3175  0137  3D                	db	(03Dh)
  3176  0138  7C                	db	(07Ch)
  3177  0139  22                	db	(022h)
  3178  013A  C0                	db	(0C0h)
  3179  013B  9E                	db	(09Eh)
  3180  013C  1D                	db	(01Dh)
  3181  013D  43                	db	(043h)
  3182  013E  A1                	db	(0A1h)
  3183  013F  FF                	db	(0FFh)
  3184  0140  46                	db	(046h)
  3185  0141  18                	db	(018h)
  3186  0142  FA                	db	(0FAh)
  3187  0143  A4                	db	(0A4h)
  3188  0144  27                	db	(027h)
  3189  0145  79                	db	(079h)
  3190  0146  9B                	db	(09Bh)
  3191  0147  C5                	db	(0C5h)
  3192  0148  84                	db	(084h)
  3193  0149  DA                	db	(0DAh)
  3194  014A  38                	db	(038h)
  3195  014B  66                	db	(066h)
  3196  014C  E5                	db	(0E5h)
  3197  014D  BB                	db	(0BBh)
  3198  014E  59                	db	(059h)
  3199  014F  07                	db	(07h)
  3200  0150  DB                	db	(0DBh)
  3201  0151  85                	db	(085h)
  3202  0152  67                	db	(067h)
  3203  0153  39                	db	(039h)
  3204  0154  BA                	db	(0BAh)
  3205  0155  E4                	db	(0E4h)
  3206  0156  06                	db	(06h)
  3207  0157  58                	db	(058h)
  3208  0158  19                	db	(019h)
  3209  0159  47                	db	(047h)
  3210  015A  A5                	db	(0A5h)
  3211  015B  FB                	db	(0FBh)
  3212  015C  78                	db	(078h)
  3213  015D  26                	db	(026h)
  3214  015E  C4                	db	(0C4h)
  3215  015F  9A                	db	(09Ah)
  3216  0160  65                	db	(065h)
  3217  0161  3B                	db	(03Bh)
  3218  0162  D9                	db	(0D9h)
  3219  0163  87                	db	(087h)
  3220  0164  04                	db	(04h)
  3221  0165  5A                	db	(05Ah)
  3222  0166  B8                	db	(0B8h)
  3223  0167  E6                	db	(0E6h)
  3224  0168  A7                	db	(0A7h)
  3225  0169  F9                	db	(0F9h)
  3226  016A  1B                	db	(01Bh)
  3227  016B  45                	db	(045h)
  3228  016C  C6                	db	(0C6h)
  3229  016D  98                	db	(098h)
  3230  016E  7A                	db	(07Ah)
  3231  016F  24                	db	(024h)
  3232  0170  F8                	db	(0F8h)
  3233  0171  A6                	db	(0A6h)
  3234  0172  44                	db	(044h)
  3235  0173  1A                	db	(01Ah)
  3236  0174  99                	db	(099h)
  3237  0175  C7                	db	(0C7h)
  3238  0176  25                	db	(025h)
  3239  0177  7B                	db	(07Bh)
  3240  0178  3A                	db	(03Ah)
  3241  0179  64                	db	(064h)
  3242  017A  86                	db	(086h)
  3243  017B  D8                	db	(0D8h)
  3244  017C  5B                	db	(05Bh)
  3245  017D  05                	db	(05h)
  3246  017E  E7                	db	(0E7h)
  3247  017F  B9                	db	(0B9h)
  3248  0180  8C                	db	(08Ch)
  3249  0181  D2                	db	(0D2h)
  3250  0182  30                	db	(030h)
  3251  0183  6E                	db	(06Eh)
  3252  0184  ED                	db	(0EDh)
  3253  0185  B3                	db	(0B3h)
  3254  0186  51                	db	(051h)
  3255  0187  0F                	db	(0Fh)
  3256  0188  4E                	db	(04Eh)
  3257  0189  10                	db	(010h)
  3258  018A  F2                	db	(0F2h)
  3259  018B  AC                	db	(0ACh)
  3260  018C  2F                	db	(02Fh)
  3261  018D  71                	db	(071h)
  3262  018E  93                	db	(093h)
  3263  018F  CD                	db	(0CDh)
  3264  0190  11                	db	(011h)
  3265  0191  4F                	db	(04Fh)
  3266  0192  AD                	db	(0ADh)
  3267  0193  F3                	db	(0F3h)
  3268  0194  70                	db	(070h)
  3269  0195  2E                	db	(02Eh)
  3270  0196  CC                	db	(0CCh)
  3271  0197  92                	db	(092h)
  3272  0198  D3                	db	(0D3h)
  3273  0199  8D                	db	(08Dh)
  3274  019A  6F                	db	(06Fh)
  3275  019B  31                	db	(031h)
  3276  019C  B2                	db	(0B2h)
  3277  019D  EC                	db	(0ECh)
  3278  019E  0E                	db	(0Eh)
  3279  019F  50                	db	(050h)
  3280  01A0  AF                	db	(0AFh)
  3281  01A1  F1                	db	(0F1h)
  3282  01A2  13                	db	(013h)
  3283  01A3  4D                	db	(04Dh)
  3284  01A4  CE                	db	(0CEh)
  3285  01A5  90                	db	(090h)
  3286  01A6  72                	db	(072h)
  3287  01A7  2C                	db	(02Ch)
  3288  01A8  6D                	db	(06Dh)
  3289  01A9  33                	db	(033h)
  3290  01AA  D1                	db	(0D1h)
  3291  01AB  8F                	db	(08Fh)
  3292  01AC  0C                	db	(0Ch)
  3293  01AD  52                	db	(052h)
  3294  01AE  B0                	db	(0B0h)
  3295  01AF  EE                	db	(0EEh)
  3296  01B0  32                	db	(032h)
  3297  01B1  6C                	db	(06Ch)
  3298  01B2  8E                	db	(08Eh)
  3299  01B3  D0                	db	(0D0h)
  3300  01B4  53                	db	(053h)
  3301  01B5  0D                	db	(0Dh)
  3302  01B6  EF                	db	(0EFh)
  3303  01B7  B1                	db	(0B1h)
  3304  01B8  F0                	db	(0F0h)
  3305  01B9  AE                	db	(0AEh)
  3306  01BA  4C                	db	(04Ch)
  3307  01BB  12                	db	(012h)
  3308  01BC  91                	db	(091h)
  3309  01BD  CF                	db	(0CFh)
  3310  01BE  2D                	db	(02Dh)
  3311  01BF  73                	db	(073h)
  3312  01C0  CA                	db	(0CAh)
  3313  01C1  94                	db	(094h)
  3314  01C2  76                	db	(076h)
  3315  01C3  28                	db	(028h)
  3316  01C4  AB                	db	(0ABh)
  3317  01C5  F5                	db	(0F5h)
  3318  01C6  17                	db	(017h)
  3319  01C7  49                	db	(049h)
  3320  01C8  08                	db	(08h)
  3321  01C9  56                	db	(056h)
  3322  01CA  B4                	db	(0B4h)
  3323  01CB  EA                	db	(0EAh)
  3324  01CC  69                	db	(069h)
  3325  01CD  37                	db	(037h)
  3326  01CE  D5                	db	(0D5h)
  3327  01CF  8B                	db	(08Bh)
  3328  01D0  57                	db	(057h)
  3329  01D1  09                	db	(09h)
  3330  01D2  EB                	db	(0EBh)
  3331  01D3  B5                	db	(0B5h)
  3332  01D4  36                	db	(036h)
  3333  01D5  68                	db	(068h)
  3334  01D6  8A                	db	(08Ah)
  3335  01D7  D4                	db	(0D4h)
  3336  01D8  95                	db	(095h)
  3337  01D9  CB                	db	(0CBh)
  3338  01DA  29                	db	(029h)
  3339  01DB  77                	db	(077h)
  3340  01DC  F4                	db	(0F4h)
  3341  01DD  AA                	db	(0AAh)
  3342  01DE  48                	db	(048h)
  3343  01DF  16                	db	(016h)
  3344  01E0  E9                	db	(0E9h)
  3345  01E1  B7                	db	(0B7h)
  3346  01E2  55                	db	(055h)
  3347  01E3  0B                	db	(0Bh)
  3348  01E4  88                	db	(088h)
  3349  01E5  D6                	db	(0D6h)
  3350  01E6  34                	db	(034h)
  3351  01E7  6A                	db	(06Ah)
  3352  01E8  2B                	db	(02Bh)
  3353  01E9  75                	db	(075h)
  3354  01EA  97                	db	(097h)
  3355  01EB  C9                	db	(0C9h)
  3356  01EC  4A                	db	(04Ah)
  3357  01ED  14                	db	(014h)
  3358  01EE  F6                	db	(0F6h)
  3359  01EF  A8                	db	(0A8h)
  3360  01F0  74                	db	(074h)
  3361  01F1  2A                	db	(02Ah)
  3362  01F2  C8                	db	(0C8h)
  3363  01F3  96                	db	(096h)
  3364  01F4  15                	db	(015h)
  3365  01F5  4B                	db	(04Bh)
  3366  01F6  A9                	db	(0A9h)
  3367  01F7  F7                	db	(0F7h)
  3368  01F8  B6                	db	(0B6h)
  3369  01F9  E8                	db	(0E8h)
  3370  01FA  0A                	db	(0Ah)
  3371  01FB  54                	db	(054h)
  3372  01FC  D7                	db	(0D7h)
  3373  01FD  89                	db	(089h)
  3374  01FE  6B                	db	(06Bh)
  3375  01FF  35                	db	(035h)
  3376                          	psect	cdata,class=ROM,space=0,reloc=256
  3377                          	file	"output\__custom.c"
  3378                          	line	2
  3379  7D00                    __flash_size:
  3380  7D00  8000              	dw	08000h
  3381                          	line	1
  3382  7D02                    __flash_banks:
  3383  7D02  04                	db	(04h)
  3384                          	line	3
  3385  7D03                    __flash_blocksize:
  3386  7D03  40                	db	(040h)
  3387                          	global	__flash_size
  3388                          	global	__flash_banks
  3389                          	global	__flash_blocksize
  3390                          	global	__flash_size
  3391                          	global	__flash_banks
  3392                          	global	__flash_blocksize
  3393                          	global	_oo_scratchpad
  3394                          	psect	bss2,class=RAM,space=1
  3395  0200                    _oo_scratchpad:
  3396  0200                    	blk	9
  3397                          	global	_id
  3398  0209                    _id:
  3399  0209                    	blk	8
  3400                          	global	_temp0
  3401  0211                    _temp0:
  3402  0211                    	blk	2
  3403                          	global	_temp1
  3404  0213                    _temp1:
  3405  0213                    	blk	2
  3406                          	global	_conflict
  3407  0215                    _conflict:
  3408  0215                    	blk	1
  3409                          	global	_crc
  3410  0216                    _crc:
  3411  0216                    	blk	1
  3412                          	global	_new_conflict
  3413                          	psect	rbit0,class=RAM,bit,space=1
  3414  0000                    _new_conflict:
  3415  0000                    	blk	1
  3416                          	global	_id0
  3417                          	psect	bss2
  3418  0217                    _id0:
  3419  0217                    	blk	8
  3420                          	global	_id1
  3421  021F                    _id1:
  3422  021F                    	blk	8
  3423                          	psect	strings,class=ROM,space=0,reloc=256
  3424                          ;			XIO=0 
  3425  7E00                    STR_10:	
  3426  7E00  50                	db	80	;'P'
  3427  7E01  72                	db	114	;'r'
  3428  7E02  65                	db	101	;'e'
  3429  7E03  73                	db	115	;'s'
  3430  7E04  73                	db	115	;'s'
  3431  7E05  20                	db	32
  3432  7E06  27                	db	39	;'''
  3433  7E07  54                	db	84	;'T'
  3434  7E08  27                	db	39	;'''
  3435  7E09  20                	db	32
  3436  7E0A  74                	db	116	;'t'
  3437  7E0B  6F                	db	111	;'o'
  3438  7E0C  20                	db	32
  3439  7E0D  69                	db	105	;'i'
  3440  7E0E  6E                	db	110	;'n'
  3441  7E0F  69                	db	105	;'i'
  3442  7E10  74                	db	116	;'t'
  3443  7E11  69                	db	105	;'i'
  3444  7E12  61                	db	97	;'a'
  3445  7E13  74                	db	116	;'t'
  3446  7E14  65                	db	101	;'e'
  3447  7E15  20                	db	32
  3448  7E16  74                	db	116	;'t'
  3449  7E17  65                	db	101	;'e'
  3450  7E18  6D                	db	109	;'m'
  3451  7E19  70                	db	112	;'p'
  3452  7E1A  65                	db	101	;'e'
  3453  7E1B  72                	db	114	;'r'
  3454  7E1C  61                	db	97	;'a'
  3455  7E1D  74                	db	116	;'t'
  3456  7E1E  75                	db	117	;'u'
  3457  7E1F  72                	db	114	;'r'
  3458  7E20  65                	db	101	;'e'
  3459  7E21  20                	db	32
  3460  7E22  63                	db	99	;'c'
  3461  7E23  6F                	db	111	;'o'
  3462  7E24  6E                	db	110	;'n'
  3463  7E25  76                	db	118	;'v'
  3464  7E26  65                	db	101	;'e'
  3465  7E27  72                	db	114	;'r'
  3466  7E28  73                	db	115	;'s'
  3467  7E29  69                	db	105	;'i'
  3468  7E2A  6F                	db	111	;'o'
  3469  7E2B  6E                	db	110	;'n'
  3470  7E2C  20                	db	32
  3471  7E2D  61                	db	97	;'a'
  3472  7E2E  6E                	db	110	;'n'
  3473  7E2F  64                	db	100	;'d'
  3474  7E30  20                	db	32
  3475  7E31  74                	db	116	;'t'
  3476  7E32  6F                	db	111	;'o'
  3477  7E33  20                	db	32
  3478  7E34  67                	db	103	;'g'
  3479  7E35  65                	db	101	;'e'
  3480  7E36  74                	db	116	;'t'
  3481  7E37  20                	db	32
  3482  7E38  61                	db	97	;'a'
  3483  7E39  20                	db	32
  3484  7E3A  72                	db	114	;'r'
  3485  7E3B  65                	db	101	;'e'
  3486  7E3C  70                	db	112	;'p'
  3487  7E3D  6F                	db	111	;'o'
  3488  7E3E  72                	db	114	;'r'
  3489  7E3F  74                	db	116	;'t'
  3490  7E40  00                	db	0
  3491                          ;			XIO=0 
  3492  7E41                    STR_24:	
  3493  7E41  50                	db	80	;'P'
  3494  7E42  72                	db	114	;'r'
  3495  7E43  6F                	db	111	;'o'
  3496  7E44  62                	db	98	;'b'
  3497  7E45  6C                	db	108	;'l'
  3498  7E46  65                	db	101	;'e'
  3499  7E47  6D                	db	109	;'m'
  3500  7E48  20                	db	32
  3501  7E49  64                	db	100	;'d'
  3502  7E4A  65                	db	101	;'e'
  3503  7E4B  74                	db	116	;'t'
  3504  7E4C  65                	db	101	;'e'
  3505  7E4D  63                	db	99	;'c'
  3506  7E4E  74                	db	116	;'t'
  3507  7E4F  69                	db	105	;'i'
  3508  7E50  6E                	db	110	;'n'
  3509  7E51  67                	db	103	;'g'
  3510  7E52  20                	db	32
  3511  7E53  66                	db	102	;'f'
  3512  7E54  69                	db	105	;'i'
  3513  7E55  72                	db	114	;'r'
  3514  7E56  73                	db	115	;'s'
  3515  7E57  74                	db	116	;'t'
  3516  7E58  20                	db	32
  3517  7E59  64                	db	100	;'d'
  3518  7E5A  65                	db	101	;'e'
  3519  7E5B  76                	db	118	;'v'
  3520  7E5C  69                	db	105	;'i'
  3521  7E5D  63                	db	99	;'c'
  3522  7E5E  65                	db	101	;'e'
  3523  7E5F  20                	db	32
  3524  7E60  6F                	db	111	;'o'
  3525  7E61  6E                	db	110	;'n'
  3526  7E62  20                	db	32
  3527  7E63  74                	db	116	;'t'
  3528  7E64  68                	db	104	;'h'
  3529  7E65  65                	db	101	;'e'
  3530  7E66  20                	db	32
  3531  7E67  62                	db	98	;'b'
  3532  7E68  75                	db	117	;'u'
  3533  7E69  73                	db	115	;'s'
  3534  7E6A  00                	db	0
  3535                          ;			XIO=0 
  3536  7E6B                    STR_23:	
  3537  7E6B  54                	db	84	;'T'
  3538  7E6C  69                	db	105	;'i'
  3539  7E6D  6D                	db	109	;'m'
  3540  7E6E  65                	db	101	;'e'
  3541  7E6F  64                	db	100	;'d'
  3542  7E70  20                	db	32
  3543  7E71  6F                	db	111	;'o'
  3544  7E72  75                	db	117	;'u'
  3545  7E73  74                	db	116	;'t'
  3546  7E74  20                	db	32
  3547  7E75  77                	db	119	;'w'
  3548  7E76  68                	db	104	;'h'
  3549  7E77  69                	db	105	;'i'
  3550  7E78  6C                	db	108	;'l'
  3551  7E79  65                	db	101	;'e'
  3552  7E7A  20                	db	32
  3553  7E7B  77                	db	119	;'w'
  3554  7E7C  61                	db	97	;'a'
  3555  7E7D  69                	db	105	;'i'
  3556  7E7E  74                	db	116	;'t'
  3557  7E7F  69                	db	105	;'i'
  3558  7E80  6E                	db	110	;'n'
  3559  7E81  67                	db	103	;'g'
  3560  7E82  20                	db	32
  3561  7E83  66                	db	102	;'f'
  3562  7E84  6F                	db	111	;'o'
  3563  7E85  72                	db	114	;'r'
  3564  7E86  20                	db	32
  3565  7E87  63                	db	99	;'c'
  3566  7E88  6F                	db	111	;'o'
  3567  7E89  6E                	db	110	;'n'
  3568  7E8A  76                	db	118	;'v'
  3569  7E8B  65                	db	101	;'e'
  3570  7E8C  72                	db	114	;'r'
  3571  7E8D  73                	db	115	;'s'
  3572  7E8E  69                	db	105	;'i'
  3573  7E8F  6F                	db	111	;'o'
  3574  7E90  6E                	db	110	;'n'
  3575  7E91  21                	db	33	;'!'
  3576  7E92  00                	db	0
  3577                          ;			XIO=0 
  3578  7E93                    STR_22:	
  3579  7E93  4E                	db	78	;'N'
  3580  7E94  6F                	db	111	;'o'
  3581  7E95  20                	db	32
  3582  7E96  4F                	db	79	;'O'
  3583  7E97  6E                	db	110	;'n'
  3584  7E98  65                	db	101	;'e'
  3585  7E99  57                	db	87	;'W'
  3586  7E9A  69                	db	105	;'i'
  3587  7E9B  72                	db	114	;'r'
  3588  7E9C  65                	db	101	;'e'
  3589  7E9D  20                	db	32
  3590  7E9E  64                	db	100	;'d'
  3591  7E9F  65                	db	101	;'e'
  3592  7EA0  76                	db	118	;'v'
  3593  7EA1  69                	db	105	;'i'
  3594  7EA2  63                	db	99	;'c'
  3595  7EA3  65                	db	101	;'e'
  3596  7EA4  73                	db	115	;'s'
  3597  7EA5  20                	db	32
  3598  7EA6  66                	db	102	;'f'
  3599  7EA7  6F                	db	111	;'o'
  3600  7EA8  75                	db	117	;'u'
  3601  7EA9  6E                	db	110	;'n'
  3602  7EAA  64                	db	100	;'d'
  3603  7EAB  20                	db	32
  3604  7EAC  6F                	db	111	;'o'
  3605  7EAD  6E                	db	110	;'n'
  3606  7EAE  20                	db	32
  3607  7EAF  74                	db	116	;'t'
  3608  7EB0  68                	db	104	;'h'
  3609  7EB1  65                	db	101	;'e'
  3610  7EB2  20                	db	32
  3611  7EB3  62                	db	98	;'b'
  3612  7EB4  75                	db	117	;'u'
  3613  7EB5  73                	db	115	;'s'
  3614  7EB6  21                	db	33	;'!'
  3615  7EB7  00                	db	0
  3616                          ;			XIO=0 
  3617  7EB8                    STR_16:	
  3618  7EB8  43                	db	67	;'C'
  3619  7EB9  6F                	db	111	;'o'
  3620  7EBA  6E                	db	110	;'n'
  3621  7EBB  76                	db	118	;'v'
  3622  7EBC  65                	db	101	;'e'
  3623  7EBD  72                	db	114	;'r'
  3624  7EBE  73                	db	115	;'s'
  3625  7EBF  69                	db	105	;'i'
  3626  7EC0  6F                	db	111	;'o'
  3627  7EC1  6E                	db	110	;'n'
  3628  7EC2  2F                	db	47	;'/'
  3629  7EC3  67                	db	103	;'g'
  3630  7EC4  72                	db	114	;'r'
  3631  7EC5  61                	db	97	;'a'
  3632  7EC6  62                	db	98	;'b'
  3633  7EC7  62                	db	98	;'b'
  3634  7EC8  69                	db	105	;'i'
  3635  7EC9  6E                	db	110	;'n'
  3636  7ECA  67                	db	103	;'g'
  3637  7ECB  20                	db	32
  3638  7ECC  64                	db	100	;'d'
  3639  7ECD  6F                	db	111	;'o'
  3640  7ECE  6E                	db	110	;'n'
  3641  7ECF  65                	db	101	;'e'
  3642  7ED0  2E                	db	46	;'.'
  3643  7ED1  2E                	db	46	;'.'
  3644  7ED2  2E                	db	46	;'.'
  3645  7ED3  00                	db	0
  3646                          ;			XIO=0 
  3647  7ED4                    STR_13:	
  3648  7ED4  50                	db	80	;'P'
  3649  7ED5  72                	db	114	;'r'
  3650  7ED6  6F                	db	111	;'o'
  3651  7ED7  62                	db	98	;'b'
  3652  7ED8  6C                	db	108	;'l'
  3653  7ED9  65                	db	101	;'e'
  3654  7EDA  6D                	db	109	;'m'
  3655  7EDB  20                	db	32
  3656  7EDC  64                	db	100	;'d'
  3657  7EDD  65                	db	101	;'e'
  3658  7EDE  74                	db	116	;'t'
  3659  7EDF  65                	db	101	;'e'
  3660  7EE0  63                	db	99	;'c'
  3661  7EE1  74                	db	116	;'t'
  3662  7EE2  69                	db	105	;'i'
  3663  7EE3  6E                	db	110	;'n'
  3664  7EE4  67                	db	103	;'g'
  3665  7EE5  20                	db	32
  3666  7EE6  73                	db	115	;'s'
  3667  7EE7  65                	db	101	;'e'
  3668  7EE8  6E                	db	110	;'n'
  3669  7EE9  73                	db	115	;'s'
  3670  7EEA  6F                	db	111	;'o'
  3671  7EEB  72                	db	114	;'r'
  3672  7EEC  20                	db	32
  3673  7EED  32                	db	50	;'2'
  3674  7EEE  00                	db	0
  3675                          ;			XIO=0 
  3676  7EEF                    STR_17:	
  3677  7EEF  53                	db	83	;'S'
  3678  7EF0  63                	db	99	;'c'
  3679  7EF1  72                	db	114	;'r'
  3680  7EF2  61                	db	97	;'a'
  3681  7EF3  74                	db	116	;'t'
  3682  7EF4  63                	db	99	;'c'
  3683  7EF5  68                	db	104	;'h'
  3684  7EF6  70                	db	112	;'p'
  3685  7EF7  61                	db	97	;'a'
  3686  7EF8  64                	db	100	;'d'
  3687  7EF9  3A                	db	58	;':'
  3688  7EFA  20                	db	32
  3689  7EFB  00                	db	0
  3690                          ;			XIO=0 
  3691  7EFC                    STR_7:	
  3692  7EFC  45                	db	69	;'E'
  3693  7EFD  4F                	db	79	;'O'
  3694  7EFE  54                	db	84	;'T'
  3695  7EFF  00                	db	0
  3696                          ;			XIO=0 
  3697  7F00                    STR_12:	
  3698  7F00  50                	db	80	;'P'
  3699  7F01  72                	db	114	;'r'
  3700  7F02  6F                	db	111	;'o'
  3701  7F03  62                	db	98	;'b'
  3702  7F04  6C                	db	108	;'l'
  3703  7F05  65                	db	101	;'e'
  3704  7F06  6D                	db	109	;'m'
  3705  7F07  20                	db	32
  3706  7F08  64                	db	100	;'d'
  3707  7F09  65                	db	101	;'e'
  3708  7F0A  74                	db	116	;'t'
  3709  7F0B  65                	db	101	;'e'
  3710  7F0C  63                	db	99	;'c'
  3711  7F0D  74                	db	116	;'t'
  3712  7F0E  69                	db	105	;'i'
  3713  7F0F  6E                	db	110	;'n'
  3714  7F10  67                	db	103	;'g'
  3715  7F11  20                	db	32
  3716  7F12  73                	db	115	;'s'
  3717  7F13  65                	db	101	;'e'
  3718  7F14  6E                	db	110	;'n'
  3719  7F15  73                	db	115	;'s'
  3720  7F16  6F                	db	111	;'o'
  3721  7F17  72                	db	114	;'r'
  3722  7F18  20                	db	32
  3723  7F19  31                	db	49	;'1'
  3724  7F1A  00                	db	0
  3725                          ;			XIO=0 
  3726  7F1B                    STR_15:	
  3727  7F1B  4E                	db	78	;'N'
  3728  7F1C  6F                	db	111	;'o'
  3729  7F1D  20                	db	32
  3730  7F1E  73                	db	115	;'s'
  3731  7F1F  65                	db	101	;'e'
  3732  7F20  6E                	db	110	;'n'
  3733  7F21  73                	db	115	;'s'
  3734  7F22  6F                	db	111	;'o'
  3735  7F23  72                	db	114	;'r'
  3736  7F24  20                	db	32
  3737  7F25  66                	db	102	;'f'
  3738  7F26  6F                	db	111	;'o'
  3739  7F27  75                	db	117	;'u'
  3740  7F28  6E                	db	110	;'n'
  3741  7F29  64                	db	100	;'d'
  3742  7F2A  20                	db	32
  3743  7F2B  6F                	db	111	;'o'
  3744  7F2C  6E                	db	110	;'n'
  3745  7F2D  20                	db	32
  3746  7F2E  62                	db	98	;'b'
  3747  7F2F  75                	db	117	;'u'
  3748  7F30  73                	db	115	;'s'
  3749  7F31  00                	db	0
  3750                          ;			XIO=0 
  3751  7F32                    STR_14:	
  3752  7F32  67                	db	103	;'g'
  3753  7F33  65                	db	101	;'e'
  3754  7F34  74                	db	116	;'t'
  3755  7F35  5F                	db	95	;'_'
  3756  7F36  73                	db	115	;'s'
  3757  7F37  65                	db	101	;'e'
  3758  7F38  6E                	db	110	;'n'
  3759  7F39  73                	db	115	;'s'
  3760  7F3A  6F                	db	111	;'o'
  3761  7F3B  72                	db	114	;'r'
  3762  7F3C  73                	db	115	;'s'
  3763  7F3D  20                	db	32
  3764  7F3E  64                	db	100	;'d'
  3765  7F3F  6F                	db	111	;'o'
  3766  7F40  6E                	db	110	;'n'
  3767  7F41  65                	db	101	;'e'
  3768  7F42  2E                	db	46	;'.'
  3769  7F43  2E                	db	46	;'.'
  3770  7F44  2E                	db	46	;'.'
  3771  7F45  00                	db	0
  3772                          ;			XIO=0 
  3773  7F46                    STR_1:	
  3774  7F46  4F                	db	79	;'O'
  3775  7F47  6E                	db	110	;'n'
  3776  7F48  65                	db	101	;'e'
  3777  7F49  57                	db	87	;'W'
  3778  7F4A  69                	db	105	;'i'
  3779  7F4B  72                	db	114	;'r'
  3780  7F4C  65                	db	101	;'e'
  3781  7F4D  20                	db	32
  3782  7F4E  67                	db	103	;'g'
  3783  7F4F  61                	db	97	;'a'
  3784  7F50  74                	db	116	;'t'
  3785  7F51  65                	db	101	;'e'
  3786  7F52  77                	db	119	;'w'
  3787  7F53  61                	db	97	;'a'
  3788  7F54  79                	db	121	;'y'
  3789  7F55  20                	db	32
  3790  7F56  76                	db	118	;'v'
  3791  7F57  2E                	db	46	;'.'
  3792  7F58  00                	db	0
  3793                          ;			XIO=0 
  3794  7F59                    STR_3:	
  3795  7F59  4E                	db	78	;'N'
  3796  7F5A  6F                	db	111	;'o'
  3797  7F5B  64                	db	100	;'d'
  3798  7F5C  65                	db	101	;'e'
  3799  7F5D  20                	db	32
  3800  7F5E  31                	db	49	;'1'
  3801  7F5F  20                	db	32
  3802  7F60  49                	db	73	;'I'
  3803  7F61  44                	db	68	;'D'
  3804  7F62  3A                	db	58	;':'
  3805  7F63  20                	db	32
  3806  7F64  00                	db	0
  3807                          ;			XIO=0 
  3808  7F65                    STR_5:	
  3809  7F65  4E                	db	78	;'N'
  3810  7F66  6F                	db	111	;'o'
  3811  7F67  64                	db	100	;'d'
  3812  7F68  65                	db	101	;'e'
  3813  7F69  20                	db	32
  3814  7F6A  32                	db	50	;'2'
  3815  7F6B  20                	db	32
  3816  7F6C  49                	db	73	;'I'
  3817  7F6D  44                	db	68	;'D'
  3818  7F6E  3A                	db	58	;':'
  3819  7F6F  20                	db	32
  3820  7F70  00                	db	0
  3821                          ;			XIO=0 
  3822  7F71                    STR_2:	
  3823  7F71  31                	db	49	;'1'
  3824  7F72  2E                	db	46	;'.'
  3825  7F73  30                	db	48	;'0'
  3826  7F74  00                	db	0
  3827                          ;			XIO=0 
  3828  7F75                    STR_21:	
  3829  7F75  20                	db	32
  3830  7F76  2D                	db	45	;'-'
  3831  7F77  20                	db	32
  3832  7F78  00                	db	0
  3833                          ;			XIO=0 
  3834  7F79                    STR_20:	
  3835  7F79  2F                	db	47	;'/'
  3836  7F7A  00                	db	0
  3837  7F1B                    STR_11	equ	STR_15+0
  3838  7F71                    STR_9	equ	STR_2+0
  3839  7F46                    STR_8	equ	STR_1+0
  3840  7F75                    STR_18	equ	STR_21+0
  3841  7F75                    STR_19	equ	STR_21+0
  3842  7F75                    STR_6	equ	STR_21+0
  3843  7F75                    STR_4	equ	STR_21+0
  3844                          	file "(null)"
  3845                          	line	1
  3846                          	psect	text
  3847                          	global	___end_of_c_program_code,___start_of_c_program_code
  3848  7C6B                    ___end_of_c_program_code:


HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:20 2009

           ?_oo_crc_shuffle_byte 003C                                l2 7FD6                                l3 778C  
                              l4 7B1E                                l5 760C                                l7 7CFA  
                              l8 7C7F            get_sensors@next_found 0004            ??_oo_crc_shuffle_byte 003D  
                    _oo_busreset 7BEA           _oo_wait_for_completion 7985                               l10 7CFA  
                             l11 7CF1                               l20 7671                               l12 7CD3  
                             l21 768E                               l13 7CF1                               l30 7AEC  
                             l22 76A4                               l14 7CEC                               l23 75E5  
                             l15 7CF1                               l32 7BF6                               l16 789D  
                             l24 74B3                               l33 7C18                               l41 7B71  
                             l17 76BA                               l25 74CC                               l34 7C45  
                             l42 7B6C                               l50 79AC                               l18 763E  
                             l35 7BE7                               l51 7991                               l19 765B  
                             l27 74D9                               l36 7BC7                               l28 7AEC  
                             l52 79B5                               l44 7982                               l60 7960  
                             l37 7BA0                               l45 7B5B                               l29 7ABF  
                             l61 78B2                               l54 7C04                               l38 7BD2  
                             l46 7B3D                               l62 78DB                               l55 7C68  
                             l47 7B5B                               l64 7845                               l57 7AA6  
                             l49 79BA                               l65 77B1                               l58 7A26  
                             l66 77D8                               l59 7A87                               l67 77F5  
                             l68 780E                               _id 0209              __end_of_oo_busreset 7BF9  
                     _oo_rx_byte 7C1B                       _Ticker_ISR 7FB2                       _oo_tx_byte 7C07  
             __end_of_oo_rx_byte 7C48               __end_of_Ticker_ISR 7FF3               __end_of_oo_tx_byte 7C1B  
                            u203 7A9B                   _OneWire_GetROM 71C3                              u213 7827  
                            u223 7838                              u233 7CB3                              u243 7538  
                            u254 7534                              u263 75B3                              u193 7A1B  
                            u274 75AF                oo_print_data@data 001C                              _id0 0217  
                            _id1 021F                              _crc 0216                oo_print_data@cntr 0029  
              _OneWire_WriteByte 7173                   _OneWire_SetROM 71ED                   _OneWire_fReset 713D  
                    ?_oo_tx_byte 003B                oo_read_device@crc 0036              _Counter8_ltrx_Start 6E3F  
                           STR_1 7F46                             STR_2 7F71                             STR_3 7F59  
                           STR_4 7F75                             STR_5 7F65                             STR_6 7F75  
                           STR_7 7EFC                             STR_8 7F46                             STR_9 7F71  
                       _conflict 0215                         _get_temp 748D                       _print_data 76BD  
                     _print_help 75E8                             _main 7C6B               __end_of_print_data 778F  
             __end_of_print_help 760F                       print_id@id 0004          ___end_of_c_program_code 7C6B  
                     ??_get_temp 0004                       _LTRX_Start 6EE9                     ??_oo_rx_byte 003B  
             oo_read_device@data 0029         ??_oo_wait_for_completion 001C                  _OneWire_fVerify 734E  
                       _print_id 7AA9                            IDX_PP 00D3                            CUR_PP 00D0  
                      ?_print_id 0004                     _Ticker_Start 7433                            MVR_PP 00D4  
                          MVW_PP 00D5                            STR_10 7E00                            STR_11 7F1B  
                          STR_20 7F79                            STR_12 7F00                            STR_21 7F75  
                          STR_13 7ED4                            STR_22 7E93                            STR_14 7F32  
                          STR_23 7E6B                            STR_15 7F1B                            STR_24 7E41  
                          STR_16 7EB8                            STR_17 7EEF                            STR_18 7F75  
                          STR_19 7F75                    _oo_scratchpad 0200                       main@strPtr 0001  
                 _oo_read_device 79BD                       ??_print_id 0006                  ?_oo_read_device 001C  
               ??_oo_read_device 0029              _oo_start_conversion 7963                            _temp0 0211  
                          _temp1 0213                         intlevel1 0068                    _oo_print_data 78A0  
                    _LED1_Invert 6EA5                    oo_report@data 0004                   oo_rx_byte@data 003B  
     __end_of_oo_conversion_busy 7B74                      _get_sensors 760F                 _LTRX_PutSHexByte 6F43  
            _oo_crc_shuffle_byte 7C48              __end_of_get_sensors 76BD      __end_of_oo_start_conversion 7985  
         __end_of_oo_read_device 7AA9       __end_of_oo_read_scratchpad 7BEA                        _oo_report 778F  
              __end_of_oo_report 7848            __end_of_oo_print_data 7963                       _delay_10ms 7B21  
             __end_of_delay_10ms 7B5E                    _OneWire_Start 7125                           ??_main 0001  
                        _crc_rom 0100      __end_of_oo_crc_shuffle_byte 7C6B                delay_10ms@counter 001D  
                    ??_oo_report 0004                   _LTRX_EnableInt 6EC9                           TMP_DR0 006C  
                         TMP_DR1 006D                           TMP_DR2 006E                           TMP_DR3 006F  
      oo_read_scratchpad@counter 003A                     __end_of_main 7D00                 __end_of_get_temp 75E8  
                  _hardware_init 7848                  _LTRX_szGetParam 7048             ??_oo_read_scratchpad 003A  
                 oo_tx_byte@data 003B                     ??_delay_10ms 001D                       _LED1_Start 6E89  
                   __flash_banks 7D02                 _Ticker_EnableInt 742B                  _LTRX_PutSHexInt 6F56  
                 _LTRX_bCmdCheck 702F                           ___exit 7CFD                     _print_header 7AEF  
                  _LTRX_CmdReset 7019            __end_of_hardware_init 78A0                 __end_of_print_id 7AEF  
           __end_of_print_header 7B21    oo_wait_for_completion@counter 001C                   _Counter8_Start 6DF3  
                   _new_conflict 0000                    ??_get_sensors 0004                      oo_report@id 0011  
 __end_of_oo_wait_for_completion 79BD                      __flash_size 7D00                     print_id@cntr 0006  
               __flash_blocksize 7D03                  _LTRX_CPutString 6FFE         oo_crc_shuffle_byte@input 003C  
             _oo_conversion_busy 7B5E               _OneWire_fFindFirst 7217                     _LTRX_PutCRLF 7010  
             _oo_read_scratchpad 7B74                   ?_oo_print_data 001C                _OneWire_bReadByte 718E  
                   _LTRX_PutChar 6F5D                _OneWire_fFindNext 722C                  ??_oo_print_data 0029  
                    _oo_crc_init 7BF9                        Ticker_ISR 7FB2        ___start_of_c_program_code 748D  
            __end_of_oo_crc_init 7C07  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:13 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter8 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Counter8 API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Counter8_CONTROL_REG_START_BIT:            equ 0x01    ; Control register start bit
    22  00E1                    Counter8_INT_REG:                          equ 0x0e1
    23  0001                    Counter8_INT_MASK:                         equ 0x01
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Counter8 user defined values
    28                          ;--------------------------------------------------
    29                          
    30  0027                    Counter8_PERIOD:                           equ 0x27
    31  0013                    Counter8_COMPARE_VALUE:                    equ 0x13
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Counter8
    36                          ;--------------------------------------------------
    37                          
    38  0020                    Counter8_COUNTER_REG:                  equ 0x20   ; DR0 Counter register
    39  0021                    Counter8_PERIOD_REG:                   equ 0x21   ; DR1 Period register
    40  0022                    Counter8_COMPARE_REG:                  equ 0x22   ; DR2 CompareValue register
    41  0023                    Counter8_CONTROL_REG:                  equ 0x23   ; Control register
    42  0020                    Counter8_FUNC_REG:                     equ 0x20   ; Function register
    43  0021                    Counter8_INPUT_REG:                    equ 0x21   ; Input register
    44  0022                    Counter8_OUTPUT_REG:                   equ 0x22   ; Output register
    45                          
    46                          
    47                          ;--------------------------------------------------
    48                          ; Counter8 Macro 'Functions'
    49                          ;--------------------------------------------------
    50                          
    51                             macro Counter8_Start_M
    52                             or    reg[Counter8_CONTROL_REG],  Counter8_CONTROL_REG_START_BIT
    53  7C6B                       endm
    54                          
    55                             macro Counter8_Stop_M
    56                             and   reg[Counter8_CONTROL_REG], ~Counter8_CONTROL_REG_START_BIT
    57  7C6B                       endm
    58                          
    59                             macro Counter8_EnableInt_M
    60                             M8C_EnableIntMask Counter8_INT_REG, Counter8_INT_MASK
    61  7C6B                       endm
    62                          
    63                             macro Counter8_DisableInt_M
    64                             M8C_DisableIntMask Counter8_INT_REG, Counter8_INT_MASK
    65  7C6B                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter8 User Module software implementation file
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "Counter8.inc"
    26                          
    27                          ;-----------------------------------------------
    28                          ;  Global Symbols
    29                          ;-----------------------------------------------
    30                          export  Counter8_EnableInt
    31                          export _Counter8_EnableInt
    32                          export  Counter8_DisableInt
    33                          export _Counter8_DisableInt
    34                          export  Counter8_Start
    35                          export _Counter8_Start
    36                          export  Counter8_Stop
    37                          export _Counter8_Stop
    38                          export  Counter8_WritePeriod
    39                          export _Counter8_WritePeriod
    40                          export  Counter8_WriteCompareValue
    41                          export _Counter8_WriteCompareValue
    42                          export  Counter8_bReadCompareValue
    43                          export _Counter8_bReadCompareValue
    44                          export  Counter8_bReadCounter
    45                          export _Counter8_bReadCounter
    46                          
    47                          ; The following functions are deprecated and subject to omission in future releases
    48                          ;
    49                          export  bCounter8_ReadCompareValue  ; deprecated
    50                          export _bCounter8_ReadCompareValue  ; deprecated
    51                          export  bCounter8_ReadCounter       ; deprecated
    52                          export _bCounter8_ReadCounter       ; deprecated
    53                          
    54                          
    55                          AREA onewire_gateway_RAM (RAM,REL)
    56                          
    57                          ;-----------------------------------------------
    58                          ;  Constant Definitions
    59                          ;-----------------------------------------------
    60                          
    61  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    62                          
    63                          
    64                          ;-----------------------------------------------
    65                          ; Variable Allocation
    66                          ;-----------------------------------------------
    67                          
    68                          
    69                          AREA UserModules (ROM, REL)
    70                          
    71                          .SECTION
    72                          ;-----------------------------------------------------------------------------
    73                          ;  FUNCTION NAME: Counter8_EnableInt
    74                          ;
    75                          ;  DESCRIPTION:
    76                          ;     Enables this counter's interrupt by setting the interrupt enable mask bit
    77                          ;     associated with this User Module. This function has no effect until and
    78                          ;     unless the global interrupts are enabled (for example by using the
    79                          ;     macro M8C_EnableGInt).
    80                          ;-----------------------------------------------------------------------------
    81                          ;
    82                          ;  ARGUMENTS:    None.
    83                          ;  RETURNS:      Nothing.
    84                          ;  SIDE EFFECTS: 
    85                          ;    The A and X registers may be modified by this or future implementations
    86                          ;    of this function.  The same is true for all RAM page pointer registers in
    87                          ;    the Large Memory Model.  When necessary, it is the calling function's
    88                          ;    responsibility to perserve their values across calls to fastcall16 
    89                          ;    functions.
    90                          ;
    91  6DEB                     Counter8_EnableInt:
    92  6DEB                    _Counter8_EnableInt:
    93                             RAM_PROLOGUE RAM_USE_CLASS_1
    94  6DEB  43 E1 01             Counter8_EnableInt_M
    95                             RAM_EPILOGUE RAM_USE_CLASS_1
    96  6DEE  7F                   ret
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: Counter8_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this counter's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS: 
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  6DEF                     Counter8_DisableInt:
   119  6DEF                    _Counter8_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  6DEF  41 E1 FE             Counter8_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  6DF2  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: Counter8_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     counter will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS: 
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  6DF3                     Counter8_Start:
   148  6DF3                    _Counter8_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  6DF3  43 23 01             Counter8_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  6DF6  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: Counter8_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables counter operation by clearing the start bit in the Control
   163                          ;     register.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  6DF7                     Counter8_Stop:
   176  6DF7                    _Counter8_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  6DF7  41 23 FE             Counter8_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  6DFA  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: Counter8_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 8-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the counter user module is stopped, then this value will also be
   197                          ;    latched into the Count register (DR0).
   198                          ;     
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  6DFB                     Counter8_WritePeriod:
   206  6DFB                    _Counter8_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  6DFB  60 21                mov   reg[Counter8_PERIOD_REG], A
   209                             RAM_EPILOGUE RAM_USE_CLASS_1
   210  6DFD  7F                   ret
   211                          
   212                          
   213                          .ENDSECTION
   214                          
   215                          .SECTION
   216                          ;-----------------------------------------------------------------------------
   217                          ;  FUNCTION NAME: Counter8_WriteCompareValue
   218                          ;
   219                          ;  DESCRIPTION:
   220                          ;     Writes compare value into the Compare register (DR2).
   221                          ;-----------------------------------------------------------------------------
   222                          ;
   223                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   224                          ;  RETURNS:      Nothing
   225                          ;  SIDE EFFECTS: 
   226                          ;    The A and X registers may be modified by this or future implementations
   227                          ;    of this function.  The same is true for all RAM page pointer registers in
   228                          ;    the Large Memory Model.  When necessary, it is the calling function's
   229                          ;    responsibility to perserve their values across calls to fastcall16 
   230                          ;    functions.
   231                          ;
   232  6DFE                     Counter8_WriteCompareValue:
   233  6DFE                    _Counter8_WriteCompareValue:
   234                             RAM_PROLOGUE RAM_USE_CLASS_1
   235  6DFE  60 22                mov   reg[Counter8_COMPARE_REG], A
   236                             RAM_EPILOGUE RAM_USE_CLASS_1
   237  6E00  7F                   ret
   238                          
   239                          
   240                          .ENDSECTION
   241                          
   242                          .SECTION
   243                          ;-----------------------------------------------------------------------------
   244                          ;  FUNCTION NAME: Counter8_bReadCompareValue
   245                          ;
   246                          ;  DESCRIPTION:
   247                          ;     Reads the Compare register.
   248                          ;-----------------------------------------------------------------------------
   249                          ;
   250                          ;  ARGUMENTS:    None
   251                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   252                          ;  SIDE EFFECTS: 
   253                          ;    The A and X registers may be modified by this or future implementations
   254                          ;    of this function.  The same is true for all RAM page pointer registers in
   255                          ;    the Large Memory Model.  When necessary, it is the calling function's
   256                          ;    responsibility to perserve their values across calls to fastcall16 
   257                          ;    functions.
   258                          ;
   259  6E01                     Counter8_bReadCompareValue:
   260  6E01                    _Counter8_bReadCompareValue:
   261  6E01                     bCounter8_ReadCompareValue:                     ; this name deprecated
   262  6E01                    _bCounter8_ReadCompareValue:                     ; this name deprecated
   263                             RAM_PROLOGUE RAM_USE_CLASS_1
   264  6E01  5D 22                mov   A, reg[Counter8_COMPARE_REG]
   265                             RAM_EPILOGUE RAM_USE_CLASS_1
   266  6E03  7F                   ret
   267                          
   268                          
   269                          .ENDSECTION
   270                          
   271                          .SECTION
   272                          ;-----------------------------------------------------------------------------
   273                          ;  FUNCTION NAME: Counter8_bReadCounter
   274                          ;
   275                          ;  DESCRIPTION:
   276                          ;     Returns the value in the Count register (DR0), preserving the value in
   277                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   278                          ;     from the Count to the Compare registers by holding the clock low in
   279                          ;     the PSoC block.
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS: None
   283                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   284                          ;  SIDE EFFECTS:
   285                          ;     1) If running, the user module is stopped momentarily and one or more
   286                          ;        counts may be missed.
   287                          ;     2) The A and X registers may be modified by this or future implementations
   288                          ;        of this function.  The same is true for all RAM page pointer registers in
   289                          ;        the Large Memory Model.  When necessary, it is the calling function's
   290                          ;        responsibility to perserve their values across calls to fastcall16 
   291                          ;        functions.
   292                          ;
   293  6E04                     Counter8_bReadCounter:
   294  6E04                    _Counter8_bReadCounter:
   295  6E04                     bCounter8_ReadCounter:                          ; this name deprecated
   296  6E04                    _bCounter8_ReadCounter:                          ; this name deprecated
   297                          
   298  0000                       bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
   299  0001                       bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
   300  0002                       bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
   301  0003                       wCounter:               EQU   3               ; Frame offset to temp Count   store
   302  0004                       STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
   303                          
   304  6E04  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   305  6E06  4F                   mov   X, SP                                   ; X <- stack frame pointer
   306  6E07  5D 22                mov   A, reg[Counter8_COMPARE_REG]            ; Save the Compare register on the stack
   307  6E09  08                   push  A                                       ;
   308  6E0A  5D 23                mov   A, reg[Counter8_CONTROL_REG]            ; Save CR0 (running or stopped state)
   309  6E0C  08                   push  A                                       ;
   310  6E0D  41 23 FE             Counter8_Stop_M                               ; Disable (stop) the Counter if running
   311  6E10  71 10                M8C_SetBank1                                  ;
   312  6E12  5D 21                mov   A, reg[Counter8_INPUT_REG]              ; save the clock input setting
   313  6E14  08                   push  A                                       ;   on the stack (now 2 bytes) and ...
   314                                                                           ;   hold the clock low:
   315  6E15  62 21 00             mov   reg[Counter8_INPUT_REG], INPUT_REG_NULL
   316  6E18  70 EF                M8C_SetBank0
   317                                                                           ; Extract the Count via DR2 register
   318  6E1A  5D 20                mov   A, reg[Counter8_COUNTER_REG]            ; DR2 <- DR0
   319  6E1C  5D 22                mov   A, reg[Counter8_COMPARE_REG]            ; Stash the Count on the stack
   320  6E1E  08                   push  A                                       ;  -stack frame is now 3 bytes
   321  6E1F  52 00                mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
   322  6E21  60 22                mov   reg[Counter8_COMPARE_REG], A
   323  6E23  71 10                M8C_SetBank1                                  ; Restore the counter operation:
   324  6E25  52 02                mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
   325  6E27  60 21                mov   reg[Counter8_INPUT_REG], A              ;
   326  6E29  70 EF                M8C_SetBank0                                  ;   then re-enable (start) the counter
   327  6E2B  52 01                mov   A, [X+bOrigControlReg]                  ;     if it was running when
   328  6E2D  60 23                mov   reg[Counter8_CONTROL_REG], A            ;     this function was first called
   329  6E2F  18                   pop   A                                       ; Setup the return value
   330  6E30  38 FD                ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
   331  6E32  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   332  6E36  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:13 2009
          Counter8_COUNTER_REG 0020                        MAC0_CL0 00EE                        MAC0_CL1 00EF  
                      MAC1_CL0 00AE                        MAC1_CL1 00AF                           MAC_X 00EC  
                         MAC_Y 00ED                Counter8_INT_REG 00E1            Counter8_WritePeriod 6DFB  
           Counter8_PERIOD_REG 0021     _Counter8_bReadCompareValue 6E01               bOrigClockSetting 0002  
         bCounter8_ReadCounter 6E04           Counter8_bReadCounter 6E04                          MAC0_X 00EC  
                        MAC0_Y 00ED                          MAC1_X 00AC                          MAC1_Y 00AD  
                        HITECH 0002                 FLAG_PGMODE_01b 0040                 FLAG_PGMODE_10b 0080  
           _Counter8_EnableInt 6DEB               Counter8_INT_MASK 0001          _bCounter8_ReadCounter 6E04  
        _Counter8_bReadCounter 6E04                  _Counter8_Stop 6DF7                  INPUT_REG_NULL 0000  
    Counter8_WriteCompareValue 6DFE       SYSTEM_LARGE_MEMORY_MODEL 0001                  Counter8_Start 6DF3  
    bCounter8_ReadCompareValue 6E01                         MAC_CL0 00EE                         MAC_CL1 00EF  
             bOrigCompareValue 0000              Counter8_INPUT_REG 0021                FLAG_PGMODE_MASK 00C0  
          _Counter8_DisableInt 6DEF                 RAM_USE_CLASS_1 0001                 RAM_USE_CLASS_2 0002  
               RAM_USE_CLASS_3 0004                 RAM_USE_CLASS_4 0008                 bOrigControlReg 0001  
         _Counter8_WritePeriod 6DFB                STACK_FRAME_SIZE 0004     _Counter8_WriteCompareValue 6DFE  
                 Counter8_Stop 6DF7                 _Counter8_Start 6DF3             Counter8_DisableInt 6DEF  
          Counter8_COMPARE_REG 0022     _bCounter8_ReadCompareValue 6E01              Counter8_EnableInt 6DEB  
                 FLAG_XIO_MASK 0010      Counter8_bReadCompareValue 6E01      SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
Counter8_CONTROL_REG_START_BIT 0001      SYSTEM_IDXPG_TRACKS_STK_PP 0000            Counter8_CONTROL_REG 0023  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:13 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter8 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Counter8_ltrx API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Counter8_ltrx_CONTROL_REG_START_BIT:       equ 0x01    ; Control register start bit
    22  00E1                    Counter8_ltrx_INT_REG:                     equ 0x0e1
    23  0010                    Counter8_ltrx_INT_MASK:                    equ 0x10
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Counter8_ltrx user defined values
    28                          ;--------------------------------------------------
    29                          
    30  0027                    Counter8_ltrx_PERIOD:                      equ 0x27
    31  0013                    Counter8_ltrx_COMPARE_VALUE:               equ 0x13
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Counter8_ltrx
    36                          ;--------------------------------------------------
    37                          
    38  0030                    Counter8_ltrx_COUNTER_REG:             equ 0x30   ; DR0 Counter register
    39  0031                    Counter8_ltrx_PERIOD_REG:              equ 0x31   ; DR1 Period register
    40  0032                    Counter8_ltrx_COMPARE_REG:             equ 0x32   ; DR2 CompareValue register
    41  0033                    Counter8_ltrx_CONTROL_REG:             equ 0x33   ; Control register
    42  0030                    Counter8_ltrx_FUNC_REG:                equ 0x30   ; Function register
    43  0031                    Counter8_ltrx_INPUT_REG:               equ 0x31   ; Input register
    44  0032                    Counter8_ltrx_OUTPUT_REG:              equ 0x32   ; Output register
    45                          
    46                          
    47                          ;--------------------------------------------------
    48                          ; Counter8_ltrx Macro 'Functions'
    49                          ;--------------------------------------------------
    50                          
    51                             macro Counter8_ltrx_Start_M
    52                             or    reg[Counter8_ltrx_CONTROL_REG],  Counter8_ltrx_CONTROL_REG_START_BIT
    53  7C6B                       endm
    54                          
    55                             macro Counter8_ltrx_Stop_M
    56                             and   reg[Counter8_ltrx_CONTROL_REG], ~Counter8_ltrx_CONTROL_REG_START_BIT
    57  7C6B                       endm
    58                          
    59                             macro Counter8_ltrx_EnableInt_M
    60                             M8C_EnableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    61  7C6B                       endm
    62                          
    63                             macro Counter8_ltrx_DisableInt_M
    64                             M8C_DisableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    65  7C6B                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter8 User Module software implementation file
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "Counter8_ltrx.inc"
    26                          
    27                          ;-----------------------------------------------
    28                          ;  Global Symbols
    29                          ;-----------------------------------------------
    30                          export  Counter8_ltrx_EnableInt
    31                          export _Counter8_ltrx_EnableInt
    32                          export  Counter8_ltrx_DisableInt
    33                          export _Counter8_ltrx_DisableInt
    34                          export  Counter8_ltrx_Start
    35                          export _Counter8_ltrx_Start
    36                          export  Counter8_ltrx_Stop
    37                          export _Counter8_ltrx_Stop
    38                          export  Counter8_ltrx_WritePeriod
    39                          export _Counter8_ltrx_WritePeriod
    40                          export  Counter8_ltrx_WriteCompareValue
    41                          export _Counter8_ltrx_WriteCompareValue
    42                          export  Counter8_ltrx_bReadCompareValue
    43                          export _Counter8_ltrx_bReadCompareValue
    44                          export  Counter8_ltrx_bReadCounter
    45                          export _Counter8_ltrx_bReadCounter
    46                          
    47                          ; The following functions are deprecated and subject to omission in future releases
    48                          ;
    49                          export  bCounter8_ltrx_ReadCompareValue  ; deprecated
    50                          export _bCounter8_ltrx_ReadCompareValue  ; deprecated
    51                          export  bCounter8_ltrx_ReadCounter       ; deprecated
    52                          export _bCounter8_ltrx_ReadCounter       ; deprecated
    53                          
    54                          
    55                          AREA onewire_gateway_RAM (RAM,REL)
    56                          
    57                          ;-----------------------------------------------
    58                          ;  Constant Definitions
    59                          ;-----------------------------------------------
    60                          
    61  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    62                          
    63                          
    64                          ;-----------------------------------------------
    65                          ; Variable Allocation
    66                          ;-----------------------------------------------
    67                          
    68                          
    69                          AREA UserModules (ROM, REL)
    70                          
    71                          .SECTION
    72                          ;-----------------------------------------------------------------------------
    73                          ;  FUNCTION NAME: Counter8_ltrx_EnableInt
    74                          ;
    75                          ;  DESCRIPTION:
    76                          ;     Enables this counter's interrupt by setting the interrupt enable mask bit
    77                          ;     associated with this User Module. This function has no effect until and
    78                          ;     unless the global interrupts are enabled (for example by using the
    79                          ;     macro M8C_EnableGInt).
    80                          ;-----------------------------------------------------------------------------
    81                          ;
    82                          ;  ARGUMENTS:    None.
    83                          ;  RETURNS:      Nothing.
    84                          ;  SIDE EFFECTS: 
    85                          ;    The A and X registers may be modified by this or future implementations
    86                          ;    of this function.  The same is true for all RAM page pointer registers in
    87                          ;    the Large Memory Model.  When necessary, it is the calling function's
    88                          ;    responsibility to perserve their values across calls to fastcall16 
    89                          ;    functions.
    90                          ;
    91  6E37                     Counter8_ltrx_EnableInt:
    92  6E37                    _Counter8_ltrx_EnableInt:
    93                             RAM_PROLOGUE RAM_USE_CLASS_1
    94  6E37  43 E1 10             Counter8_ltrx_EnableInt_M
    95                             RAM_EPILOGUE RAM_USE_CLASS_1
    96  6E3A  7F                   ret
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: Counter8_ltrx_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this counter's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS: 
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  6E3B                     Counter8_ltrx_DisableInt:
   119  6E3B                    _Counter8_ltrx_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  6E3B  41 E1 EF             Counter8_ltrx_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  6E3E  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: Counter8_ltrx_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     counter will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS: 
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  6E3F                     Counter8_ltrx_Start:
   148  6E3F                    _Counter8_ltrx_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  6E3F  43 33 01             Counter8_ltrx_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  6E42  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: Counter8_ltrx_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables counter operation by clearing the start bit in the Control
   163                          ;     register.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  6E43                     Counter8_ltrx_Stop:
   176  6E43                    _Counter8_ltrx_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  6E43  41 33 FE             Counter8_ltrx_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  6E46  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: Counter8_ltrx_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 8-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the counter user module is stopped, then this value will also be
   197                          ;    latched into the Count register (DR0).
   198                          ;     
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  6E47                     Counter8_ltrx_WritePeriod:
   206  6E47                    _Counter8_ltrx_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  6E47  60 31                mov   reg[Counter8_ltrx_PERIOD_REG], A
   209                             RAM_EPILOGUE RAM_USE_CLASS_1
   210  6E49  7F                   ret
   211                          
   212                          
   213                          .ENDSECTION
   214                          
   215                          .SECTION
   216                          ;-----------------------------------------------------------------------------
   217                          ;  FUNCTION NAME: Counter8_ltrx_WriteCompareValue
   218                          ;
   219                          ;  DESCRIPTION:
   220                          ;     Writes compare value into the Compare register (DR2).
   221                          ;-----------------------------------------------------------------------------
   222                          ;
   223                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   224                          ;  RETURNS:      Nothing
   225                          ;  SIDE EFFECTS: 
   226                          ;    The A and X registers may be modified by this or future implementations
   227                          ;    of this function.  The same is true for all RAM page pointer registers in
   228                          ;    the Large Memory Model.  When necessary, it is the calling function's
   229                          ;    responsibility to perserve their values across calls to fastcall16 
   230                          ;    functions.
   231                          ;
   232  6E4A                     Counter8_ltrx_WriteCompareValue:
   233  6E4A                    _Counter8_ltrx_WriteCompareValue:
   234                             RAM_PROLOGUE RAM_USE_CLASS_1
   235  6E4A  60 32                mov   reg[Counter8_ltrx_COMPARE_REG], A
   236                             RAM_EPILOGUE RAM_USE_CLASS_1
   237  6E4C  7F                   ret
   238                          
   239                          
   240                          .ENDSECTION
   241                          
   242                          .SECTION
   243                          ;-----------------------------------------------------------------------------
   244                          ;  FUNCTION NAME: Counter8_ltrx_bReadCompareValue
   245                          ;
   246                          ;  DESCRIPTION:
   247                          ;     Reads the Compare register.
   248                          ;-----------------------------------------------------------------------------
   249                          ;
   250                          ;  ARGUMENTS:    None
   251                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   252                          ;  SIDE EFFECTS: 
   253                          ;    The A and X registers may be modified by this or future implementations
   254                          ;    of this function.  The same is true for all RAM page pointer registers in
   255                          ;    the Large Memory Model.  When necessary, it is the calling function's
   256                          ;    responsibility to perserve their values across calls to fastcall16 
   257                          ;    functions.
   258                          ;
   259  6E4D                     Counter8_ltrx_bReadCompareValue:
   260  6E4D                    _Counter8_ltrx_bReadCompareValue:
   261  6E4D                     bCounter8_ltrx_ReadCompareValue:                ; this name deprecated
   262  6E4D                    _bCounter8_ltrx_ReadCompareValue:                ; this name deprecated
   263                             RAM_PROLOGUE RAM_USE_CLASS_1
   264  6E4D  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]
   265                             RAM_EPILOGUE RAM_USE_CLASS_1
   266  6E4F  7F                   ret
   267                          
   268                          
   269                          .ENDSECTION
   270                          
   271                          .SECTION
   272                          ;-----------------------------------------------------------------------------
   273                          ;  FUNCTION NAME: Counter8_ltrx_bReadCounter
   274                          ;
   275                          ;  DESCRIPTION:
   276                          ;     Returns the value in the Count register (DR0), preserving the value in
   277                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   278                          ;     from the Count to the Compare registers by holding the clock low in
   279                          ;     the PSoC block.
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS: None
   283                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   284                          ;  SIDE EFFECTS:
   285                          ;     1) If running, the user module is stopped momentarily and one or more
   286                          ;        counts may be missed.
   287                          ;     2) The A and X registers may be modified by this or future implementations
   288                          ;        of this function.  The same is true for all RAM page pointer registers in
   289                          ;        the Large Memory Model.  When necessary, it is the calling function's
   290                          ;        responsibility to perserve their values across calls to fastcall16 
   291                          ;        functions.
   292                          ;
   293  6E50                     Counter8_ltrx_bReadCounter:
   294  6E50                    _Counter8_ltrx_bReadCounter:
   295  6E50                     bCounter8_ltrx_ReadCounter:                     ; this name deprecated
   296  6E50                    _bCounter8_ltrx_ReadCounter:                     ; this name deprecated
   297                          
   298  0000                       bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
   299  0001                       bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
   300  0002                       bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
   301  0003                       wCounter:               EQU   3               ; Frame offset to temp Count   store
   302  0004                       STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
   303                          
   304  6E50  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   305  6E52  4F                   mov   X, SP                                   ; X <- stack frame pointer
   306  6E53  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]       ; Save the Compare register on the stack
   307  6E55  08                   push  A                                       ;
   308  6E56  5D 33                mov   A, reg[Counter8_ltrx_CONTROL_REG]       ; Save CR0 (running or stopped state)
   309  6E58  08                   push  A                                       ;
   310  6E59  41 33 FE             Counter8_ltrx_Stop_M                          ; Disable (stop) the Counter if running
   311  6E5C  71 10                M8C_SetBank1                                  ;
   312  6E5E  5D 31                mov   A, reg[Counter8_ltrx_INPUT_REG]         ; save the clock input setting
   313  6E60  08                   push  A                                       ;   on the stack (now 2 bytes) and ...
   314                                                                           ;   hold the clock low:
   315  6E61  62 31 00             mov   reg[Counter8_ltrx_INPUT_REG], INPUT_REG_NULL
   316  6E64  70 EF                M8C_SetBank0
   317                                                                           ; Extract the Count via DR2 register
   318  6E66  5D 30                mov   A, reg[Counter8_ltrx_COUNTER_REG]       ; DR2 <- DR0
   319  6E68  5D 32                mov   A, reg[Counter8_ltrx_COMPARE_REG]       ; Stash the Count on the stack
   320  6E6A  08                   push  A                                       ;  -stack frame is now 3 bytes
   321  6E6B  52 00                mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
   322  6E6D  60 32                mov   reg[Counter8_ltrx_COMPARE_REG], A
   323  6E6F  71 10                M8C_SetBank1                                  ; Restore the counter operation:
   324  6E71  52 02                mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
   325  6E73  60 31                mov   reg[Counter8_ltrx_INPUT_REG], A         ;
   326  6E75  70 EF                M8C_SetBank0                                  ;   then re-enable (start) the counter
   327  6E77  52 01                mov   A, [X+bOrigControlReg]                  ;     if it was running when
   328  6E79  60 33                mov   reg[Counter8_ltrx_CONTROL_REG], A       ;     this function was first called
   329  6E7B  18                   pop   A                                       ; Setup the return value
   330  6E7C  38 FD                ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
   331  6E7E  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   332  6E82  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:13 2009
           Counter8_ltrx_PERIOD_REG 0031             _Counter8_ltrx_EnableInt 6E37                  _Counter8_ltrx_Stop 6E43  
         _Counter8_ltrx_WritePeriod 6E47           bCounter8_ltrx_ReadCounter 6E50          _Counter8_ltrx_bReadCounter 6E50  
                           MAC0_CL0 00EE                             MAC0_CL1 00EF                             MAC1_CL0 00AE  
                           MAC1_CL1 00AF                 _Counter8_ltrx_Start 6E3F                                MAC_X 00EC  
                              MAC_Y 00ED            _Counter8_ltrx_DisableInt 6E3B      Counter8_ltrx_bReadCompareValue 6E4D  
                  bOrigClockSetting 0002                               MAC0_X 00EC                               MAC0_Y 00ED  
                             MAC1_X 00AC                               MAC1_Y 00AD                               HITECH 0002  
                    FLAG_PGMODE_01b 0040                      FLAG_PGMODE_10b 0080      bCounter8_ltrx_ReadCompareValue 6E4D  
              Counter8_ltrx_INT_REG 00E1                  Counter8_ltrx_Start 6E3F     _Counter8_ltrx_WriteCompareValue 6E4A  
Counter8_ltrx_CONTROL_REG_START_BIT 0001          _bCounter8_ltrx_ReadCounter 6E50                       INPUT_REG_NULL 0000  
          Counter8_ltrx_COMPARE_REG 0032            SYSTEM_LARGE_MEMORY_MODEL 0001              Counter8_ltrx_INPUT_REG 0031  
                            MAC_CL0 00EE                              MAC_CL1 00EF            Counter8_ltrx_CONTROL_REG 0033  
                  bOrigCompareValue 0000                     FLAG_PGMODE_MASK 00C0                      RAM_USE_CLASS_1 0001  
                    RAM_USE_CLASS_2 0002                      RAM_USE_CLASS_3 0004                      RAM_USE_CLASS_4 0008  
          Counter8_ltrx_COUNTER_REG 0030             Counter8_ltrx_DisableInt 6E3B                   Counter8_ltrx_Stop 6E43  
                    bOrigControlReg 0001      Counter8_ltrx_WriteCompareValue 6E4A               Counter8_ltrx_INT_MASK 0010  
                   STACK_FRAME_SIZE 0004            Counter8_ltrx_WritePeriod 6E47              Counter8_ltrx_EnableInt 6E37  
   _Counter8_ltrx_bReadCompareValue 6E4D           Counter8_ltrx_bReadCounter 6E50                        FLAG_XIO_MASK 0010  
         SYSTEM_IDXPG_TRACKS_IDX_PP 0001           SYSTEM_IDXPG_TRACKS_STK_PP 0000     _bCounter8_ltrx_ReadCompareValue 6E4D  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:13 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrx.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter8 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Counter8_ltrx API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Counter8_ltrx_CONTROL_REG_START_BIT:       equ 0x01    ; Control register start bit
    22  00E1                    Counter8_ltrx_INT_REG:                     equ 0x0e1
    23  0010                    Counter8_ltrx_INT_MASK:                    equ 0x10
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Counter8_ltrx user defined values
    28                          ;--------------------------------------------------
    29                          
    30  0027                    Counter8_ltrx_PERIOD:                      equ 0x27
    31  0013                    Counter8_ltrx_COMPARE_VALUE:               equ 0x13
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Counter8_ltrx
    36                          ;--------------------------------------------------
    37                          
    38  0030                    Counter8_ltrx_COUNTER_REG:             equ 0x30   ; DR0 Counter register
    39  0031                    Counter8_ltrx_PERIOD_REG:              equ 0x31   ; DR1 Period register
    40  0032                    Counter8_ltrx_COMPARE_REG:             equ 0x32   ; DR2 CompareValue register
    41  0033                    Counter8_ltrx_CONTROL_REG:             equ 0x33   ; Control register
    42  0030                    Counter8_ltrx_FUNC_REG:                equ 0x30   ; Function register
    43  0031                    Counter8_ltrx_INPUT_REG:               equ 0x31   ; Input register
    44  0032                    Counter8_ltrx_OUTPUT_REG:              equ 0x32   ; Output register
    45                          
    46                          
    47                          ;--------------------------------------------------
    48                          ; Counter8_ltrx Macro 'Functions'
    49                          ;--------------------------------------------------
    50                          
    51                             macro Counter8_ltrx_Start_M
    52                             or    reg[Counter8_ltrx_CONTROL_REG],  Counter8_ltrx_CONTROL_REG_START_BIT
    53  7C6B                       endm
    54                          
    55                             macro Counter8_ltrx_Stop_M
    56                             and   reg[Counter8_ltrx_CONTROL_REG], ~Counter8_ltrx_CONTROL_REG_START_BIT
    57  7C6B                       endm
    58                          
    59                             macro Counter8_ltrx_EnableInt_M
    60                             M8C_EnableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    61  7C6B                       endm
    62                          
    63                             macro Counter8_ltrx_DisableInt_M
    64                             M8C_DisableIntMask Counter8_ltrx_INT_REG, Counter8_ltrx_INT_MASK
    65  7C6B                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8_ltrxINT.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Counter8_ltrx.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Counter8_ltrx_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Counter8_ltrx_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  6E83                    _Counter8_ltrx_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                          
    71                             ;---------------------------------------------------
    72                             ; Insert your custom code above this banner
    73                             ;---------------------------------------------------
    74                             ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76  6E83  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:13 2009
                 _Counter8_ltrx_ISR 6E83                             MAC0_CL0 00EE                             MAC0_CL1 00EF  
                           MAC1_CL0 00AE                             MAC1_CL1 00AF                                MAC_X 00EC  
                              MAC_Y 00ED                               MAC0_X 00EC                               MAC0_Y 00ED  
                             MAC1_X 00AC                               MAC1_Y 00AD                               HITECH 0002  
                            MAC_CL0 00EE                              MAC_CL1 00EF  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:14 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter8 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Counter8 API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Counter8_CONTROL_REG_START_BIT:            equ 0x01    ; Control register start bit
    22  00E1                    Counter8_INT_REG:                          equ 0x0e1
    23  0001                    Counter8_INT_MASK:                         equ 0x01
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Counter8 user defined values
    28                          ;--------------------------------------------------
    29                          
    30  0027                    Counter8_PERIOD:                           equ 0x27
    31  0013                    Counter8_COMPARE_VALUE:                    equ 0x13
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Counter8
    36                          ;--------------------------------------------------
    37                          
    38  0020                    Counter8_COUNTER_REG:                  equ 0x20   ; DR0 Counter register
    39  0021                    Counter8_PERIOD_REG:                   equ 0x21   ; DR1 Period register
    40  0022                    Counter8_COMPARE_REG:                  equ 0x22   ; DR2 CompareValue register
    41  0023                    Counter8_CONTROL_REG:                  equ 0x23   ; Control register
    42  0020                    Counter8_FUNC_REG:                     equ 0x20   ; Function register
    43  0021                    Counter8_INPUT_REG:                    equ 0x21   ; Input register
    44  0022                    Counter8_OUTPUT_REG:                   equ 0x22   ; Output register
    45                          
    46                          
    47                          ;--------------------------------------------------
    48                          ; Counter8 Macro 'Functions'
    49                          ;--------------------------------------------------
    50                          
    51                             macro Counter8_Start_M
    52                             or    reg[Counter8_CONTROL_REG],  Counter8_CONTROL_REG_START_BIT
    53  7C6B                       endm
    54                          
    55                             macro Counter8_Stop_M
    56                             and   reg[Counter8_CONTROL_REG], ~Counter8_CONTROL_REG_START_BIT
    57  7C6B                       endm
    58                          
    59                             macro Counter8_EnableInt_M
    60                             M8C_EnableIntMask Counter8_INT_REG, Counter8_INT_MASK
    61  7C6B                       endm
    62                          
    63                             macro Counter8_DisableInt_M
    64                             M8C_DisableIntMask Counter8_INT_REG, Counter8_INT_MASK
    65  7C6B                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Counter8INT.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:15
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Counter8.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Counter8_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Counter8_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  6E84                    _Counter8_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                          
    71                             ;---------------------------------------------------
    72                             ; Insert your custom code above this banner
    73                             ;---------------------------------------------------
    74                             ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76  6E84  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:14 2009
                      MAC0_CL0 00EE                        MAC0_CL1 00EF                        MAC1_CL0 00AE  
                      MAC1_CL1 00AF                           MAC_X 00EC                           MAC_Y 00ED  
                 _Counter8_ISR 6E84                          MAC0_X 00EC                          MAC0_Y 00ED  
                        MAC1_X 00AC                          MAC1_Y 00AD                          HITECH 0002  
                       MAC_CL0 00EE                         MAC_CL1 00EF  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:14 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LED1.inc
     4                          ;;  Version: 1.2, Updated on 2008/6/23 at 12:24:56
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the LED user module interface
     8                          ;;                for the 22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2006. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16  0003                    LED1_Port:      equ   0x3
    17                          
    18                          
    19  000C                    LED1_PortDR:    equ   PRT3DR
    20                          
    21  0080                    LED1_PinMask:   equ  0x80
    22                          
    23  0000                    LED1_Drive:     equ   0
    24                          
    25  0000                    LED1_ON:        equ   0
    26  0001                    LED1_OFF:       equ   1
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LED1.asm
     4                          ;;  Version: 1.2, Updated on 2008/6/23 at 12:24:56
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: LED user module for 22/24/27/29xxx PSoC family of devices.
     8                          ;;
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2005. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "LED1.inc"
    24                          include "memory.inc"
    25                          
    26                          export _LED1_Start
    27                          export  LED1_Start
    28                          
    29                          export _LED1_Stop
    30                          export  LED1_Stop
    31                          
    32                          export _LED1_On
    33                          export  LED1_On
    34                          
    35                          export _LED1_Off
    36                          export  LED1_Off
    37                          
    38                          export _LED1_Switch
    39                          export  LED1_Switch
    40                          
    41                          export _LED1_Invert
    42                          export  LED1_Invert
    43                          
    44                          export _LED1_GetState
    45                          export  LED1_GetState
    46                          
    47                          
    48                          AREA UserModules (ROM, REL)
    49                          
    50                          
    51                          .SECTION
    52                          ;-----------------------------------------------------------------------------
    53                          ;  FUNCTION NAME: LED1_Start(void)
    54                          ;  FUNCTION NAME: LED1_Stop(void)
    55                          ;
    56                          ;  FUNCTION NAME: LED1_Switch(void)
    57                          ;
    58                          ;  DESCRIPTION: ( Switch )
    59                          ;     Turn LED on or off     
    60                          ;
    61                          ;  DESCRIPTION: ( Start, Stop )
    62                          ;     Turn LED off                       
    63                          ;
    64                          ;-----------------------------------------------------------------------------
    65                          ;
    66                          ;  ARGUMENTS:  ( Switch )
    67                          ;     A => If 0, turn off LED, if > 0 turn on LED
    68                          ;
    69                          ;  ARGUMENTS:  ( Start, Stop )
    70                          ;      None
    71                          ;
    72                          ;  RETURNS:  none
    73                          ;
    74                          ;  SIDE EFFECTS:
    75                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
    76                          ;
    77                          ;-----------------------------------------------------------------------------
    78  6E85                    _LED1_On:
    79  6E85                     LED1_On:
    80  6E85  50 01                mov  A,0x01
    81  6E87  8003                 jmp  LED1_Switch 
    82                          
    83  6E89                    _LED1_Start:
    84  6E89                     LED1_Start:
    85  6E89                    _LED1_Stop:
    86  6E89                     LED1_Stop:
    87  6E89                    _LED1_Off:
    88  6E89                     LED1_Off:
    89  6E89  50 00                mov  A,0x00
    90                          
    91  6E8B                    _LED1_Switch:
    92  6E8B                     LED1_Switch:
    93                             RAM_PROLOGUE RAM_USE_CLASS_4
    94  6E8B  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
    95  6E8D  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
    96                          
    97  6E90  29 00                or   A,0x00                                   ; Check mode
    98  6E92  A006                 jz   .Turn_Off_LED
    99                          
   100  6E94                    .Turn_On_LED:
   101                          IF(0)                                            ; Active High Digit Drive
   102                             or   [Port_3_Data_SHADE],LED1_PinMask
   103                          ELSE                                             ; Active Low Digit Drive
   104  6E94  26 4A  7F            and  [Port_3_Data_SHADE],~LED1_PinMask
   105                          ENDIF
   106  6E97  8004                 jmp  .Switch_LED
   107                          
   108  6E99                    .Turn_Off_LED:
   109                          IF(0)                      ; Active High Digit Drive
   110                             and  [Port_3_Data_SHADE],~LED1_PinMask
   111                          ELSE                              ; Active Low Digit Drive
   112  6E99  2E 4A  80            or   [Port_3_Data_SHADE],LED1_PinMask
   113                          ENDIF
   114                          
   115  6E9C                    .Switch_LED:
   116  6E9C  51 4A                mov  A,[Port_3_Data_SHADE]
   117  6E9E  60 0C                mov  reg[LED1_PortDR],A
   118                          
   119  6EA0  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   120                             RAM_EPILOGUE RAM_USE_CLASS_4
   121  6EA4  7F                   ret
   122                          .ENDSECTION
   123                          
   124                          
   125                          
   126                          .SECTION
   127                          ;-----------------------------------------------------------------------------
   128                          ;  FUNCTION NAME: LED1_Invert(void)
   129                          ;
   130                          ;  DESCRIPTION:
   131                          ;     Invert state of LED                               
   132                          ;
   133                          ;-----------------------------------------------------------------------------
   134                          ;
   135                          ;  ARGUMENTS: none
   136                          ;
   137                          ;  RETURNS:  none
   138                          ;
   139                          ;  SIDE EFFECTS:
   140                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
   141                          ;
   142                          ;-----------------------------------------------------------------------------
   143  6EA5                    _LED1_Invert:
   144  6EA5                     LED1_Invert:
   145                             RAM_PROLOGUE RAM_USE_CLASS_4
   146  6EA5  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   147  6EA7  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
   148                          
   149  6EAA  36 4A  80            xor  [Port_3_Data_SHADE],LED1_PinMask
   150  6EAD  51 4A                mov  A,[Port_3_Data_SHADE]
   151  6EAF  60 0C                mov  reg[LED1_PortDR],A
   152                          
   153  6EB1  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   154                             RAM_EPILOGUE RAM_USE_CLASS_4
   155  6EB5  7F                   ret
   156                          .ENDSECTION
   157                          
   158                          .SECTION
   159                          ;-----------------------------------------------------------------------------
   160                          ;  FUNCTION NAME: LED1_GetState(void)
   161                          ;
   162                          ;  DESCRIPTION:
   163                          ;     Get state of LED
   164                          ;
   165                          ;-----------------------------------------------------------------------------
   166                          ;
   167                          ;  ARGUMENTS: none
   168                          ;
   169                          ;  RETURNS:  
   170                          ;    State of LED   1 = ON,  0 = OFF
   171                          ;
   172                          ;  SIDE EFFECTS:
   173                          ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
   174                          ;
   175                          ;-----------------------------------------------------------------------------
   176  6EB6                    _LED1_GetState:
   177  6EB6                     LED1_GetState:
   178                             RAM_PROLOGUE RAM_USE_CLASS_4
   179  6EB6  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   180  6EB8  62 D0 00             RAM_SETPAGE_CUR >Port_3_Data_SHADE
   181                          
   182  6EBB  51 4A                mov   A,[Port_3_Data_SHADE]         ; Get shade value
   183                          IF(0)                                  ; Active High Digit Drive
   184                             // Nothing for now
   185                          ELSE                                   ; Active Low Digit Drive
   186  6EBD  73                   cpl   A                             ; Invert bit if Active low
   187                          ENDIF
   188  6EBE  21 80                and   A,LED1_PinMask                ; Mask off the trash
   189  6EC0  A003                 jz    .End_LED_GS                   ; If zero, we're done
   190  6EC2  50 01                mov   A,0x01                        ; Return a 1 no mater what the mask is.
   191                          
   192  6EC4                    .End_LED_GS:
   193  6EC4  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   194                             RAM_EPILOGUE RAM_USE_CLASS_4
   195  6EC8  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:14 2009
             LED1_GetState 6EB6                    MAC0_CL0 00EE                    MAC0_CL1 00EF                    MAC1_CL0 00AE  
                  MAC1_CL1 00AF                       MAC_X 00EC                       MAC_Y 00ED                    LED1_Off 6E89  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
                    HITECH 0002                 LED1_Invert 6EA5             FLAG_PGMODE_01b 0040             FLAG_PGMODE_10b 0080  
                    CUR_PP 00D0                 LED1_PortDR 000C                      PRT3DR 000C                 LED1_Switch 6E8B  
                 LED1_Stop 6E89                    _LED1_On 6E85                  _LED1_Stop 6E89           Port_3_Data_SHADE 004A  
              _LED1_Invert 6EA5                _LED1_Switch 6E8B   SYSTEM_LARGE_MEMORY_MODEL 0001                     LED1_On 6E85  
                   MAC_CL0 00EE                     MAC_CL1 00EF                LED1_PinMask 0080            FLAG_PGMODE_MASK 00C0  
           RAM_USE_CLASS_1 0001             RAM_USE_CLASS_2 0002             RAM_USE_CLASS_3 0004             RAM_USE_CLASS_4 0008  
                LED1_Start 6E89                   _LED1_Off 6E89                 _LED1_Start 6E89              _LED1_GetState 6EB6  
SYSTEM_IDXPG_TRACKS_IDX_PP 0001  SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:14 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202+ 0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRX.inc
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module for the
     8                          ;;                22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          ;--------------------------------------------------
    15                          ; Constants for LTRX API's
    16                          ;--------------------------------------------------
    17                          
    18                          ;mask value for global int reg bit for TX instance
    19  0040                    LTRX_TX_INT_MASK:                            equ 0x40
    20  00E1                    LTRX_TX_INT_REG:                             equ 0x0e1  ;TX interrupt address
    21  0080                    LTRX_RX_INT_MASK:                            equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    22  00E1                    LTRX_RX_INT_REG:                             equ 0x0e1  ;RX interrupt address
    23                          
    24  0001                    LTRX_RXBUF_ENABLE:                           equ 1
    25                          
    26                          ; Interrupt control masks
    27  0001                    LTRX_ENABLE_RX_INT:                          equ 0x01
    28  0000                    LTRX_DISABLE_RX_INT:                         equ 0x00
    29  0002                    LTRX_ENABLE_TX_INT:                          equ 0x02
    30  0000                    LTRX_DISABLE_TX_INT:                         equ 0x00
    31                          
    32  0000                    LTRX_INT_MODE_TX_REG_EMPTY:                  equ 0x00
    33  0001                    LTRX_INT_MODE_TX_COMPLETE:                   equ 0x01
    34                          
    35  0020                    LTRX_RX_IGNORE_BELOW:                        equ 0x20
    36  0010                    LTRX_RX_BUFFER_SIZE:                         equ 0x10
    37  000D                    LTRX_CMD_TERM:                               equ 0xd
    38  0020                    LTRX_DELIMITER:                              equ 0x20
    39  0000                    LTRX_BACKSPACE_ENABLE:                       equ 0x0
    40                          
    41                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                          ;       WARNING WARNING WARNING
    43                          ; The following equates are for backwards
    44                          ; compatibility only and should not be used
    45                          ; for new designs.
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;------------------------------------
    49                          ;  Parity masks
    50                          ;------------------------------------
    51  0000                    UART_PARITY_NONE:       equ   00h
    52  0002                    UART_PARITY_EVEN:       equ   02h
    53  0006                    UART_PARITY_ODD:        equ   06h
    54                          
    55                          ;------------------------------------
    56                          ;  TX Status Register masks
    57                          ;------------------------------------
    58  0020                    UART_TX_COMPLETE:       equ   20h
    59  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    60                          
    61                          ;------------------------------------
    62                          ;  RX Status Register masks
    63                          ;------------------------------------
    64  0010                    UART_RX_ACTIVE:         equ   10h
    65  0008                    UART_RX_COMPLETE:       equ   08h
    66  0080                    UART_RX_PARITY_ERROR:   equ   80h
    67  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    68  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    69  00E0                    UART_RX_NO_ERROR:       equ   E0h
    70                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    71                          ;             END WARNING
    72                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    73                          
    74                          
    75                          
    76                          ;------------------------------------
    77                          ;  Parity masks
    78                          ;------------------------------------
    79  0000                    LTRX_PARITY_NONE:                       equ   00h
    80  0002                    LTRX_PARITY_EVEN:                       equ   02h
    81  0006                    LTRX_PARITY_ODD:                        equ   06h
    82                          
    83                          ;------------------------------------
    84                          ;  TX Status Register masks
    85                          ;------------------------------------
    86  0020                    LTRX_TX_COMPLETE:                       equ   20h
    87  0010                    LTRX_TX_BUFFER_EMPTY:                   equ   10h
    88                          
    89                          ;------------------------------------
    90                          ;  RX Status Register masks
    91                          ;------------------------------------
    92  0010                    LTRX_RX_ACTIVE:                         equ   10h
    93  0008                    LTRX_RX_COMPLETE:                       equ   08h
    94  0008                    LTRX_RX_REG_FULL:                       equ   08h
    95  0080                    LTRX_RX_PARITY_ERROR:                   equ   80h
    96  0040                    LTRX_RX_OVERRUN_ERROR:                  equ   40h
    97  0020                    LTRX_RX_FRAMING_ERROR:                  equ   20h
    98  00E0                    LTRX_RX_ERROR:                          equ   E0h
    99  0001                    LTRX_RX_ENABLE:                         equ   01h
   100                          
   101  00F0                    LTRX_RX_BUF_ERROR:                      equ   F0h  ; Mask for any Rx that may occur.
   102  0010                    LTRX_RX_BUF_OVERRUN:                    equ   10h  ; This indicates the software buffer has
   103                                                                                  ; been over run.
   104  0001                    LTRX_RX_BUF_CMDTERM:                    equ   01h  ; Command terminator has been received.
   105                          
   106  0001                    LTRX_RX_NO_DATA:                        equ   01h
   107  00E0                    LTRX_RX_NO_ERROR:                       equ   E0h
   108                          
   109                          
   110                          ;--------------------------------------------------
   111                          ; Registers Address Constants for LTRX
   112                          ;--------------------------------------------------
   113                          ;---------------------------------
   114                          ;  Registers used by TX
   115                          ;---------------------------------
   116  003B                    LTRX_TX_CONTROL_REG:    equ 3bh            ; Control register
   117  0038                    LTRX_TX_SHIFT_REG:  equ 38h               ; TX Shift Register register
   118  0039                    LTRX_TX_BUFFER_REG: equ 39h               ; TX Buffer Register
   119  0038                    LTRX_TX_FUNC_REG:   equ 38h             ; Function register
   120  0039                    LTRX_TX_INPUT_REG:  equ 39h             ; Input register
   121  003A                    LTRX_TX_OUTPUT_REG: equ 3ah             ; Output register
   122                          
   123                          ;---------------------------------
   124                          ;  Registers used by RX
   125                          ;---------------------------------
   126  003F                    LTRX_RX_CONTROL_REG:    equ 3fh            ; Control register
   127  003C                    LTRX_RX_SHIFT_REG:  equ 3ch               ; RX Shift Register register
   128  003E                    LTRX_RX_BUFFER_REG: equ 3eh               ; RX Buffer Register
   129  003C                    LTRX_RX_FUNC_REG:   equ 3ch             ; Function register
   130  003D                    LTRX_RX_INPUT_REG:  equ 3dh             ; Input register
   131  003E                    LTRX_RX_OUTPUT_REG: equ 3eh             ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   LTRX.asm
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "LTRX.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  LTRX_SetTxIntMode
    41                          export _LTRX_SetTxIntMode
    42                          export  LTRX_EnableInt
    43                          export _LTRX_EnableInt
    44                          export  LTRX_DisableInt
    45                          export _LTRX_DisableInt
    46                          
    47                          export  LTRX_Start
    48                          export _LTRX_Start
    49                          export  LTRX_Stop
    50                          export _LTRX_Stop
    51                          export  LTRX_SendData
    52                          export _LTRX_SendData
    53                          export  LTRX_bReadTxStatus
    54                          export _LTRX_bReadTxStatus
    55                          export  LTRX_bReadRxData
    56                          export _LTRX_bReadRxData
    57                          export  LTRX_bReadRxStatus
    58                          export _LTRX_bReadRxStatus
    59                          
    60                          export  LTRX_IntCntl
    61                          export _LTRX_IntCntl
    62                          
    63                          export  LTRX_TxIntMode
    64                          export _LTRX_TxIntMode
    65                          
    66                          export  LTRX_PutSHexByte
    67                          export _LTRX_PutSHexByte
    68                          export  LTRX_PutSHexInt
    69                          export _LTRX_PutSHexInt
    70                          
    71                          export  LTRX_CPutString
    72                          export _LTRX_CPutString
    73                          export  LTRX_PutString
    74                          export _LTRX_PutString
    75                          export  LTRX_PutChar
    76                          export _LTRX_PutChar
    77                          export  LTRX_Write
    78                          export _LTRX_Write
    79                          export  LTRX_CWrite
    80                          export _LTRX_CWrite
    81                          
    82                          export  LTRX_cGetChar
    83                          export _LTRX_cGetChar
    84                          export  LTRX_cReadChar
    85                          export _LTRX_cReadChar
    86                          export  LTRX_iReadChar
    87                          export _LTRX_iReadChar
    88                          export  LTRX_PutCRLF
    89                          export _LTRX_PutCRLF
    90                          
    91                          IF (LTRX_RXBUF_ENABLE)
    92                          export  LTRX_CmdReset
    93                          export _LTRX_CmdReset
    94                          export  LTRX_bCmdCheck
    95                          export _LTRX_bCmdCheck
    96                          export  LTRX_bCmdLength
    97                          export _LTRX_bCmdLength
    98                          export  LTRX_bErrCheck
    99                          export _LTRX_bErrCheck
   100                          
   101                          export  LTRX_szGetParam
   102                          export _LTRX_szGetParam
   103                          export  LTRX_szGetRestOfParams
   104                          export _LTRX_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bLTRX_ReadTxStatus
   114                          export _bLTRX_ReadTxStatus
   115                          export  bLTRX_ReadRxData
   116                          export _bLTRX_ReadRxData
   117                          export  bLTRX_ReadRxStatus
   118                          export _bLTRX_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (LTRX_RXBUF_ENABLE)
   128                              
   129                          area LTRX_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: LTRX_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  6EC9                     LTRX_EnableInt:
   177  6EC9                    _LTRX_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  6EC9  43 E1 40             M8C_EnableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   180  6ECC  43 E1 80             M8C_EnableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  6ECF  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: LTRX_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  6ED0                     LTRX_DisableInt:
   209  6ED0                    _LTRX_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  6ED0  41 E1 BF             M8C_DisableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   212  6ED3  41 E1 7F             M8C_DisableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  6ED6  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: LTRX_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  6ED7                     LTRX_SetTxIntMode:
   245  6ED7                    _LTRX_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  6ED7  71 10                M8C_SetBank1
   248  6ED9  21 01                and   A, LTRX_INT_MODE_TX_COMPLETE
   249  6EDB  A007                 jz    .SetModeRegEmpty
   250  6EDD  43 38 10             or    REG[LTRX_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  6EE0  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  6EE2  7F                   ret
   254                          
   255  6EE3                    .SetModeRegEmpty:
   256  6EE3  41 38 EF             and   REG[LTRX_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  6EE6  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  6EE8  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: LTRX_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  6EE9                     LTRX_Start:
   286  6EE9                    _LTRX_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  6EE9  29 01                or    A, bfCONTROL_REG_START_BIT
   291  6EEB  60 3B                mov   REG[LTRX_TX_CONTROL_REG], A
   292  6EED  60 3F                mov   REG[LTRX_RX_CONTROL_REG], A
   293                          IF ( LTRX_RXBUF_ENABLE )
   294  6EEF  9128                 call  _LTRX_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  6EF1  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: LTRX_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  6EF2                     LTRX_Stop:
   323  6EF2                    _LTRX_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  6EF2  41 3B FE             and   REG[LTRX_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  6EF5  41 3F FE             and   REG[LTRX_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  6EF8  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: LTRX_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  6EF9                     LTRX_SendData:
   354  6EF9                    _LTRX_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  6EF9  60 39                mov REG[LTRX_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  6EFB  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: LTRX_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  6EFC                     LTRX_bReadTxStatus:
   385  6EFC                    _LTRX_bReadTxStatus:
   386  6EFC                     bLTRX_ReadTxStatus:                             ; For backwards compatibility only
   387  6EFC                    _bLTRX_ReadTxStatus:                             ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  6EFC  5D 3B                mov A,  REG[LTRX_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  6EFE  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: LTRX_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  6EFF                     LTRX_bReadRxData:
   418  6EFF                    _LTRX_bReadRxData:
   419  6EFF                     bLTRX_ReadRxData:                               ; For backwards compatibility only
   420  6EFF                    _bLTRX_ReadRxData:                               ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  6EFF  5D 3E                mov A, REG[LTRX_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  6F01  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: LTRX_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  6F02                     LTRX_bReadRxStatus:
   452  6F02                    _LTRX_bReadRxStatus:
   453  6F02                     bLTRX_ReadRxStatus:                             ; For backwards compatibility only
   454  6F02                    _bLTRX_ReadRxStatus:                             ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  6F02  5D 3F                mov A,  REG[LTRX_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  6F04  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: LTRX_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  6F05                     LTRX_TxIntMode:
   486  6F05                    _LTRX_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  6F05  21 01                and  A,LTRX_INT_MODE_TX_COMPLETE
   490  6F07  71 10                M8C_SetBank1
   491  6F09  39 01                cmp  A,LTRX_INT_MODE_TX_COMPLETE
   492  6F0B  A006                 jz   .SetTxCmpMode
   493                          
   494  6F0D  41 38 EF             and  reg[LTRX_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
   495  6F10  8004                 jmp  .TxIntMode_End
   496                          
   497  6F12                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  6F12  43 38 10             or   reg[LTRX_TX_FUNC_REG],0x10
   499                          
   500  6F15                    .TxIntMode_End:
   501  6F15  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  6F17  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: LTRX_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  6F18                     LTRX_IntCntl:
   533  6F18                    _LTRX_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  6F18  08                   push A
   537  6F19  21 01                and  A,LTRX_ENABLE_RX_INT
   538  6F1B  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  6F1D  43 E1 80             M8C_EnableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   541  6F20  8004                 jmp  .CheckTxInt
   542  6F22                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  6F22  41 E1 7F             M8C_DisableIntMask LTRX_RX_INT_REG, LTRX_RX_INT_MASK
   545                          
   546  6F25                    .CheckTxInt:
   547  6F25  18                   pop  A
   548  6F26  21 02                and  A,LTRX_ENABLE_TX_INT
   549  6F28  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  6F2A  43 E1 40             M8C_EnableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   552  6F2D  8004                 jmp  .End_IntCntl
   553  6F2F                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  6F2F  41 E1 BF             M8C_DisableIntMask LTRX_TX_INT_REG, LTRX_TX_INT_MASK
   556                          
   557  6F32                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  6F32  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: LTRX_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  6F33                    LTRX_HEX_STR:
   594  6F33  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  6F43                     LTRX_PutSHexByte:
   599  6F43                    _LTRX_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  6F43  08                   push  A                             ; Save lower nibble
   602  6F44  67                   asr   A                             ; Shift high nibble to right
   603  6F45  67                   asr   A
   604  6F46  67                   asr   A
   605  6F47  67                   asr   A
   606  6F48  21 0F                and   A,0Fh                         ; Mask off nibble
   607  6F4A  FFE7                 index LTRX_HEX_STR                  ; Get Hex value
   608  6F4C  900F                 call  LTRX_PutChar                  ; Write data to screen
   609  6F4E  18                   pop   A                             ; Restore value
   610  6F4F  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  6F51  FFE0                 index LTRX_HEX_STR                  ; Get Hex value
   612  6F53  9008                 call  LTRX_PutChar                  ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  6F55  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: LTRX_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  6F56                     LTRX_PutSHexInt:
   643  6F56                    _LTRX_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  6F56  4B                   swap  A,X
   646  6F57  9FEA                 call  LTRX_PutSHexByte              ; Print MSB
   647  6F59  5B                   mov   A,X                           ; Move LSB into position
   648  6F5A  9FE7                 call  LTRX_PutSHexByte              ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  6F5C  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: LTRX_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[LTRX_TX_CONTROL_REG], LTRX_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[LTRX_TX_BUFFER_REG], @Source          ; Write data to Tx Port
   681  6F5D                       endm
   682                          
   683  6F5D                     LTRX_PutChar:
   684  6F5D                    _LTRX_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686  6F5D                       InLinePutChar A
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  6F64  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: LTRX_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  6F65                     LTRX_cGetChar:
   718  6F65                    _LTRX_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  6F65  49 3F 08             tst REG[LTRX_RX_CONTROL_REG],LTRX_RX_REG_FULL    ; Check if a character is ready
   721  6F68  AFFC                 jz  LTRX_cGetChar                             ; If not loop
   722  6F6A  5D 3E                mov A, REG[LTRX_RX_BUFFER_REG]                ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  6F6C  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: LTRX_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  6F6D                     LTRX_cReadChar:
   753  6F6D                    _LTRX_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  6F6D  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Get Status of RX
   756  6F6F  08                   push A
   757  6F70  21 08                and  A,LTRX_RX_COMPLETE                                 ; Check if a character is ready
   758  6F72  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  6F74  18                   pop  A
   760  6F75  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  6F77                    .RX_DATA_RDY:
   763  6F77  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]          
   764  6F79  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  6F7A  18                   pop  A                                                  ; Check for errors
   767  6F7B  21 A0                and  A,(LTRX_RX_PARITY_ERROR | LTRX_RX_FRAMING_ERROR)
   768  6F7D  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  6F7F  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  6F80  7F                   ret
   772                          
   773  6F81                    .RX_NO_VALID_CHAR:
   774  6F81  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  6F83                     End_LTRX_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  6F83  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: LTRX_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  6F84                     LTRX_iReadChar:
   814  6F84                    _LTRX_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  6F84  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  6F86  21 E8                and  A,(LTRX_RX_ERROR|LTRX_RX_REG_FULL)
   819  6F88  08                   push A
   820  6F89  21 08                and  A,LTRX_RX_COMPLETE                                 ; Check if a character is ready
   821  6F8B  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  6F8D  18                   pop  A
   823  6F8E  29 01                or   A,LTRX_RX_NO_DATA                                  ; Add no data flag
   824  6F90  4B                   swap A,X
   825  6F91  8007                 jmp  End_LTRX_iReadChar
   826                          
   827  6F93                    .RX_GET_DATA:
   828  6F93  18                   pop  A
   829  6F94  21 E0                and  A,LTRX_RX_ERROR
   830  6F96  4B                   swap A,X
   831  6F97  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]                         ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  6F99                     End_LTRX_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  6F99  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: LTRX_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  6F9A                     LTRX_PutString:
   867  6F9A                    _LTRX_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  6F9A  60 D3                RAM_SETPAGE_IDX A
   870  6F9C                    .PutStringLoop:
   871  6F9C  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  6F9E  A006                 jz    End_PutString                           ; Check for end of string
   873  6FA0  9FBB                 call  LTRX_PutChar                            ; Send character to Tx port
   874  6FA2  75                   inc   X                                       ; Advance pointer to next character
   875  6FA3  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  6FA5                    End_PutString:
   878  6FA5  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
   879  6FA9  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: LTRX_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  6FAA                     LTRX_Write:
   914  6FAA                    _LTRX_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  6FAA  62 D3 07             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  6FAD  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  6FAE                    .NextByteLoop:
   920  6FAE  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  6FB0  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  6FB2  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  6FB4  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  6FB6  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  6FB8  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  6FBA  52 00                mov   A, [X]                                  ; Grab the data
   931  6FBC                       InLinePutChar A                               ; Put data in empty TX buf reg
   932  6FC3  4F                   mov   X, SP                                   ; Recover frame pointer
   933  6FC4  62 D3 07             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  6FC7  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  6FC9  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  6FCB                    .End_Write:
   938  6FCB  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
   939  6FCF  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: LTRX_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  6FD0                     LTRX_CWrite:
   975  6FD0                    _LTRX_CWrite:
   976  6FD0  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  6FD2  4F                   mov   X,SP
   978  6FD3                    .CW_Loop:
   979  6FD3  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  6FD6  B006                 jnz   .CW_WRITEIT
   981  6FD8  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  6FDB  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  6FDD                    .CW_WRITEIT:                                
   985  6FDD  10                   push  X                                  ; Save frame pointer
   986  6FDE  52 FC                mov   A,[X+CSTR_MSB]
   987  6FE0  59 FD                mov   X,[X+CSTR_LSB]
   988  6FE2  28                   romx                                     ; Get character from ROM
   989  6FE3                       InLinePutChar A                          ; Put data in empty TX buf reg
   990  6FEA  20                   pop   X                                  ; Restore frame pointer
   991  6FEB  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  6FEE  0F FC 00             adc   [X+CSTR_MSB],0
   993  6FF1  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  6FF4  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  6FF7  8FDB                 jmp   .CW_Loop
   996                          
   997  6FF9                    .End_CWrite:
   998  6FF9  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   999  6FFD  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: LTRX_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  6FFE                     LTRX_CPutString:
  1027  6FFE                    _LTRX_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  6FFE  08                   push  A                                       ; Store ROM pointer
  1030  6FFF  10                   push  X
  1031  7000  28                   romx                                          ; Get character from ROM
  1032  7001  A00B                 jz    .End_CPutString
  1033  7003  9F58                 call  LTRX_PutChar                            ; Print character
  1034  7005  20                   pop   X
  1035  7006  18                   pop   A
  1036  7007  75                   inc   X                                       ; Inc LSB of pointer
  1037  7008  DFF5                 jnc   LTRX_CPutString                         ; Check for carry
  1038  700A  74                   inc   A                                       ; Inc MSB of pointer
  1039  700B  8FF2                 jmp   LTRX_CPutString
  1040                          
  1041                          
  1042  700D                    .End_CPutString:
  1043  700D  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  700F  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: LTRX_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  7010                     LTRX_PutCRLF:
  1071  7010                    _LTRX_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  7010  50 0D                mov  A,0x0D                        ; Send CR
  1074  7012  9F49                 call LTRX_PutChar
  1075  7014  50 0A                mov  A,0x0A                        ; Send LF
  1076  7016  9F45                 call LTRX_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  7018  7F                   ret
  1079                          .ENDSECTION
  1080                          
  1081                          
  1082                          IF (LTRX_RXBUF_ENABLE)
  1083                          ;=============================================================================
  1084                          ;=============================================================================
  1085                          ;
  1086                          ;     Command Buffer commands
  1087                          ;
  1088                          ;=============================================================================
  1089                          ;=============================================================================
  1090                          
  1091                          .SECTION
  1092                          ;-----------------------------------------------------------------------------
  1093                          ;  FUNCTION NAME: LTRX_CmdReset
  1094                          ;
  1095                          ;  DESCRIPTION:
  1096                          ;     Reset command string and status flags
  1097                          ;-----------------------------------------------------------------------------
  1098                          ;
  1099                          ;  ARGUMENTS:
  1100                          ;     none.
  1101                          ;
  1102                          ;  RETURNS:
  1103                          ;     none.
  1104                          ;
  1105                          ;  SIDE EFFECTS:
  1106                          ;    The A and X registers may be modified by this or future implementations
  1107                          ;    of this function.  The same is true for all RAM page pointer registers in
  1108                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1109                          ;    responsibility to perserve their values across calls to fastcall16 
  1110                          ;    functions.
  1111                          ;          
  1112                          ;    Currently only the page pointer registers listed below are modified: 
  1113                          ;          CUR_PP
  1114                          ;
  1115                          ;  THEORY of OPERATION or PROCEDURE:
  1116                          ;     Clear the command buffer, command counter, and flag.
  1117                          ;
  1118  7019                     LTRX_CmdReset:
  1119  7019                    _LTRX_CmdReset:
  1120                             RAM_PROLOGUE RAM_USE_CLASS_4
  1121  7019  62 D0 00             RAM_SETPAGE_CUR >LTRX_aRxBuffer
  1122  701C  55 4B  00            mov [LTRX_aRxBuffer], 0x00
  1123  701F  62 D0 00             RAM_SETPAGE_CUR >LTRX_bRxCnt
  1124  7022  55 49  00            mov [LTRX_bRxCnt], 0x00
  1125  7025  26 48  00            and [LTRX_fStatus], 0x00
  1126  7028  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1127  702B  55 67  00            mov [ptrParam],0x00
  1128                             RAM_EPILOGUE RAM_USE_CLASS_4
  1129  702E  7F                   ret
  1130                          .ENDSECTION
  1131                          
  1132                          
  1133                          .SECTION
  1134                          ;-----------------------------------------------------------------------------
  1135                          ;  FUNCTION NAME: LTRX_bCmdCheck
  1136                          ;
  1137                          ;  DESCRIPTION:
  1138                          ;     Check to see if valid command in buffer.
  1139                          ;-----------------------------------------------------------------------------
  1140                          ;
  1141                          ;  ARGUMENTS:
  1142                          ;     none.
  1143                          ;
  1144                          ;  RETURNS:
  1145                          ;     BYTE  fStatus - Status of command receive buffer.
  1146                          ;                     Returns non-zero value in A if command is valid.
  1147                          ;
  1148                          ;  SIDE EFFECTS:
  1149                          ;    The A and X registers may be modified by this or future implementations
  1150                          ;    of this function.  The same is true for all RAM page pointer registers in
  1151                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1152                          ;    responsibility to perserve their values across calls to fastcall16 
  1153                          ;    functions.
  1154                          ;          
  1155                          ;    Currently only the page pointer registers listed below are modified: 
  1156                          ;          CUR_PP
  1157                          ;
  1158                          ;  THEORY of OPERATION or PROCEDURE:
  1159                          ;     Read the status and control register.
  1160                          ;
  1161  702F                     LTRX_bCmdCheck:
  1162  702F                    _LTRX_bCmdCheck:
  1163                             RAM_PROLOGUE RAM_USE_CLASS_4
  1164  702F  62 D0 00             RAM_SETPAGE_CUR >LTRX_fStatus
  1165  7032  51 48                mov A,  [LTRX_fStatus]
  1166  7034  21 01                and A, LTRX_RX_BUF_CMDTERM                    ; Mask off Command status
  1167                             RAM_EPILOGUE RAM_USE_CLASS_4
  1168  7036  7F                   ret
  1169                          .ENDSECTION
  1170                              
  1171                          
  1172                          .SECTION
  1173                          ;-----------------------------------------------------------------------------
  1174                          ;  FUNCTION NAME: LTRX_bErrCheck
  1175                          ;
  1176                          ;  DESCRIPTION:
  1177                          ;     Check to see if an error has occured since last CmdReset
  1178                          ;-----------------------------------------------------------------------------
  1179                          ;
  1180                          ;  ARGUMENTS:
  1181                          ;     none.
  1182                          ;
  1183                          ;  RETURNS:
  1184                          ;     BYTE  fStatus - Status of command receive buffer.
  1185                          ;                     Returns non-zero value in A if command is valid.
  1186                          ;           0x80 => Parity Error
  1187                          ;           0x40 => OverRun Error
  1188                          ;           0x20 => Framing Error
  1189                          ;           0x10 => Software Buffer OverRun
  1190                          ;
  1191                          ;  SIDE EFFECTS:
  1192                          ;    The A and X registers may be modified by this or future implementations
  1193                          ;    of this function.  The same is true for all RAM page pointer registers in
  1194                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1195                          ;    responsibility to perserve their values across calls to fastcall16 
  1196                          ;    functions.
  1197                          ;          
  1198                          ;    Currently only the page pointer registers listed below are modified: 
  1199                          ;          CUR_PP
  1200                          ;     Error Status is clear when read.
  1201                          ;
  1202                          ;  THEORY of OPERATION or PROCEDURE:
  1203                          ;     Read RX buffer error status and clear status
  1204                          ;
  1205  7037                     LTRX_bErrCheck:
  1206  7037                    _LTRX_bErrCheck:
  1207                             RAM_PROLOGUE RAM_USE_CLASS_4
  1208  7037  62 D0 00             RAM_SETPAGE_CUR >LTRX_fStatus
  1209  703A  51 48                mov A,  [LTRX_fStatus]
  1210  703C  21 F0                and A, LTRX_RX_BUF_ERROR                      ; Mask off Error status
  1211  703E  26 48  0F            and [LTRX_fStatus], ~LTRX_RX_BUF_ERROR
  1212                             RAM_EPILOGUE RAM_USE_CLASS_4
  1213  7041  7F                   ret
  1214                          .ENDSECTION
  1215                          
  1216                          .SECTION
  1217                          ;-----------------------------------------------------------------------------
  1218                          ;  FUNCTION NAME: LTRX_bCmdLength
  1219                          ;
  1220                          ;  DESCRIPTION:
  1221                          ;     Get length of command string
  1222                          ;-----------------------------------------------------------------------------
  1223                          ;
  1224                          ;  ARGUMENTS:
  1225                          ;     none.
  1226                          ;
  1227                          ;  RETURNS:
  1228                          ;     BYTE  bRxCnt    Returns the command length in A.
  1229                          ;
  1230                          ;  SIDE EFFECTS:
  1231                          ;    The A and X registers may be modified by this or future implementations
  1232                          ;    of this function.  The same is true for all RAM page pointer registers in
  1233                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1234                          ;    responsibility to perserve their values across calls to fastcall16 
  1235                          ;    functions.
  1236                          ;          
  1237                          ;    Currently only the page pointer registers listed below are modified: 
  1238                          ;          CUR_PP
  1239                          ;
  1240  7042                     LTRX_bCmdLength:
  1241  7042                    _LTRX_bCmdLength:
  1242                             RAM_PROLOGUE RAM_USE_CLASS_4
  1243  7042  62 D0 00             RAM_SETPAGE_CUR >LTRX_bRxCnt
  1244  7045  51 49                mov A,  [LTRX_bRxCnt]
  1245                             RAM_EPILOGUE RAM_USE_CLASS_4
  1246  7047  7F                   ret
  1247                          .ENDSECTION
  1248                          
  1249                          
  1250                          .SECTION
  1251                          ;-----------------------------------------------------------------------------
  1252                          ;  FUNCTION NAME: LTRX_szGetParam
  1253                          ;
  1254                          ;  DESCRIPTION:
  1255                          ;      Return next parameter from LTRX Rx buffer
  1256                          ;-----------------------------------------------------------------------------
  1257                          ;
  1258                          ;  ARGUMENTS:  none
  1259                          ;
  1260                          ;  RETURNS:
  1261                          ;     A => MSB of parameter address
  1262                          ;     X => LSB of parameter address
  1263                          ;
  1264                          ;  SIDE EFFECTS:
  1265                          ;    The A and X registers may be modified by this or future implementations
  1266                          ;    of this function.  The same is true for all RAM page pointer registers in
  1267                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1268                          ;    responsibility to perserve their values across calls to fastcall16 
  1269                          ;    functions.
  1270                          ;          
  1271                          ;    Currently only the page pointer registers listed below are modified: 
  1272                          ;          CUR_PP
  1273                          ;          IDX_PP
  1274                          ;
  1275                          ;     The receive string is modified by placing Null characters at the end
  1276                          ;     of each parameter as they are recovered.
  1277                          ;
  1278                          ;  THEORY OF OPERATION:
  1279                          ;     This function is a stateful generator of addresses to the "parameters"
  1280                          ;     of an input "Command". It scans the (optional) input buffer and breaks
  1281                          ;     each lexically distinct element into a null-terminated string by replacing
  1282                          ;     delimiters with nulls, as appropriate. The state of the generator is 
  1283                          ;     maintained by the private variable ptrParam, which is a buffer-relative
  1284                          ;     offset. The generator is initialized by a call to the function
  1285                          ;     LTRX_CmdReset which resets the entire buffer to the 'empty'
  1286                          ;     state. Typically this function, LTRX_szGetParam, is
  1287                          ;     not called until the buffer has been loaded with an entire command
  1288                          ;     (See LTRX_bCmdCheck).
  1289                          ;
  1290                          ;     Note, there is no special distinction between the "command" and the 
  1291                          ;     "parameters". The first non-delimiter character of the buffer---the first
  1292                          ;     character of the "command"---is also, for the purposes of this function,
  1293                          ;     the first "parameter" to which it returns an address.
  1294                          ;
  1295                          ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
  1296                          ;     is determined at configuration time by a user module parameter.
  1297                          ;
  1298  7048                     LTRX_szGetParam:
  1299  7048                    _LTRX_szGetParam:
  1300                             RAM_PROLOGUE RAM_USE_CLASS_4
  1301                             RAM_PROLOGUE RAM_USE_CLASS_3
  1302                              
  1303  7048  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1304  704B  50 4B                mov   A, <LTRX_aRxBuffer                 ; Get address to receive buffer
  1305  704D  02 67                add   A, [ptrParam]                      ; Add string offset
  1306  704F  5C                   mov   X, A
  1307  7050  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer
  1308  7053  52 00                mov   A, [X]                             ; Get character pointed by X
  1309  7055  B004                 jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
  1310  7057  10                   push  X                                  ;       Yes, Save LSB of current pointer
  1311  7058  8033                 jmp   .End_GetNextParam
  1312                                                                      ; Check for delimiter and keep looping until
  1313                                                                      ; all leading delimiters have been found.
  1314  705A                    .SkipOverDelimitersLoop:
  1315  705A  39 20                cmp   A, LTRX_DELIMITER                  ; Do we have a delimiter?
  1316  705C  B011                 jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
  1317  705E  75                   inc   X                                  ;   Yes, Increment both index and...
  1318  705F  76 67                inc   [ptrParam]                         ;          the stored pointer.
  1319  7061  52 00                mov   A, [X]                             ; Get character pointed by X
  1320  7063  3C 67  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; End of buffer?
  1321  7066  BFF3                 jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
  1322                          
  1323  7068                    .EndOfString:                               ;   Yes, end of string found...
  1324  7068  10                   push  X                                  ;        Save ptr
  1325  7069                    .TerminateString:
  1326  7069  56 00 00             mov   [X], 0x00                          ; Make sure string is zero
  1327  706C  801F                 jmp   .End_GetNextParam
  1328                          
  1329  706E                    .ParamStartFound:
  1330  706E  10                   push  X                                  ; Beginning of parameter found, save pointer
  1331                          
  1332  706F                    .ParamLoop:                                 ; Now loop until end of parameter found.
  1333  706F  75                   inc   X                                  ; Advance pointers.
  1334  7070  76 67                inc   [ptrParam]
  1335  7072  3C 67  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
  1336  7075  AFF3                 jz    .TerminateString
  1337  7077  52 00                mov   A, [X]                             ; Get next character
  1338  7079  A012                 jz    .End_GetNextParam
  1339  707B  39 20                cmp   A, LTRX_DELIMITER                  ; Check if we have a delimiter
  1340  707D  BFF1                 jnz   .ParamLoop                         ; Still no delimiter, loop again
  1341  707F  56 00 00             mov   [X], 0x00                          ; Replace delimiter with null for end of substring
  1342  7082  76 67                inc   [ptrParam]
  1343  7084  3C 67  0F            cmp   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
  1344  7087  B004                 jnz   .End_GetNextParam                  ; If not end of string leave
  1345  7089  55 67  0F            mov   [ptrParam], (LTRX_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
  1346                          
  1347  708C                    .End_GetNextParam:
  1348  708C  20                   pop   X
  1349  708D  10                   push  X
  1350  708E  3D 00 00             cmp   [X], 0x00
  1351  7091  B00B                 jnz   .NotNullString
  1352  7093  20                   pop   X
  1353  7094  57 00                mov   X, 0x00
  1354  7096  50 00                mov   A, >LTRX_aRxBuffer
  1355  7098  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
  1356                             RAM_EPILOGUE RAM_USE_CLASS_4
  1357  709C  7F                   ret
  1358                          
  1359  709D                    .NotNullString:
  1360  709D  20                   pop  X
  1361  709E  50 00                mov  A, >LTRX_aRxBuffer                  ; Return pointer
  1362  70A0  70 3F                RAM_EPILOGUE RAM_USE_CLASS_3
  1363                             RAM_EPILOGUE RAM_USE_CLASS_4
  1364  70A4  7F                   ret
  1365                          .ENDSECTION
  1366                          
  1367                          
  1368                          .SECTION
  1369                          ;-----------------------------------------------------------------------------
  1370                          ;  FUNCTION NAME: LTRX_szGetRestOfParams
  1371                          ;
  1372                          ;  DESCRIPTION:
  1373                          ;      Returns a pointer to the rest of the UART RX buffer
  1374                          ;-----------------------------------------------------------------------------
  1375                          ;
  1376                          ;  ARGUMENTS:  none
  1377                          ;
  1378                          ;  RETURNS:
  1379                          ;     A => MSB of parameter
  1380                          ;     X => LSB of parameter
  1381                          ;
  1382                          ;  SIDE EFFECTS:
  1383                          ;    The A and X registers may be modified by this or future implementations
  1384                          ;    of this function.  The same is true for all RAM page pointer registers in
  1385                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1386                          ;    responsibility to perserve their values across calls to fastcall16 
  1387                          ;    functions.
  1388                          ;          
  1389                          ;    Currently only the page pointer registers listed below are modified: 
  1390                          ;          CUR_PP
  1391                          ;
  1392  70A5                     LTRX_szGetRestOfParams:
  1393  70A5                    _LTRX_szGetRestOfParams:
  1394                             RAM_PROLOGUE RAM_USE_CLASS_4
  1395  70A5  62 D0 00             RAM_SETPAGE_CUR >ptrParam
  1396  70A8  50 4B                mov  A, <LTRX_aRxBuffer                  ; Get address to receive buffer
  1397  70AA  02 67                add  A, [ptrParam]                       ; Add string offset
  1398  70AC  5C                   mov  X,A
  1399  70AD  50 00                mov  A,>LTRX_aRxBuffer                   ; Return pointer
  1400                             RAM_EPILOGUE RAM_USE_CLASS_4
  1401  70AF  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:14 2009
              LTRX_RX_COMPLETE 0008          LTRX_szGetRestOfParams 70A5                LTRX_RX_INT_MASK 0080  
                 LTRX_RX_ERROR 00E0                        MAC0_CL0 00EE                        MAC0_CL1 00EF  
                      MAC1_CL0 00AE                        MAC1_CL1 00AF                        CLEN_LSB FFFFFFFB  
                      CLEN_MSB FFFFFFFA                LTRX_RX_REG_FULL 0008                   LTRX_CmdReset 7019  
                         MAC_X 00EC                           MAC_Y 00ED               LTRX_RX_BUF_ERROR 00F0  
                    LTRX_Start 6EE9                      LTRX_Write 6FAA                 LTRX_szGetParam 7048  
               LTRX_PutSHexInt 6F56                        CSTR_LSB FFFFFFFD                        CSTR_MSB FFFFFFFC  
       bfCONTROL_REG_START_BIT 0001         _LTRX_szGetRestOfParams 70A5              LTRX_RX_BUFFER_REG 003E  
              LTRX_TX_FUNC_REG 0038           LTRX_RX_FRAMING_ERROR 0020                          ??0000 6F5D  
                        ??0001 6FBC                          ??0002 6FE3                     _LTRX_Start 6EE9  
                   _LTRX_Write 6FAA                   End_PutString 6FA5                   LTRX_SendData 6EF9  
              LTRX_TX_INT_MASK 0040                   LTRX_cGetChar 6F65                _LTRX_DisableInt 6ED0  
                   LTRX_CWrite 6FD0                          MAC0_X 00EC                          MAC0_Y 00ED  
                        MAC1_X 00AC                          MAC1_Y 00AD                          HITECH 0002  
               FLAG_PGMODE_01b 0040                 FLAG_PGMODE_10b 0080                          IDX_PP 00D3  
                        CUR_PP 00D0                     LTRX_bRxCnt 0049                  LTRX_EnableInt 6EC9  
              LTRX_bReadRxData 6EFF                 LTRX_CPutString 6FFE                LTRX_PutSHexByte 6F43  
            End_LTRX_cReadChar 6F83             LTRX_RX_BUFFER_SIZE 0010                    _LTRX_CWrite 6FD0  
             LTRX_SetTxIntMode 6ED7               LTRX_RXBUF_ENABLE 0001               _LTRX_bReadRxData 6EFF  
                LTRX_bCmdCheck 702F               _LTRX_PutSHexByte 6F43                    LTRX_HEX_STR 6F33  
     SYSTEM_LARGE_MEMORY_MODEL 0001              End_LTRX_iReadChar 6F99              LTRX_bReadRxStatus 6F02  
        SYSTEM_MULTIPAGE_STACK 0000                _LTRX_bCmdLength 7042                  LTRX_bErrCheck 7037  
            LTRX_bReadTxStatus 6EFC                 LTRX_RX_INT_REG 00E1             LTRX_RX_CONTROL_REG 003F  
            bLTRX_ReadRxStatus 6F02                       LTRX_Stop 6EF2                 LTRX_RX_NO_DATA 0001  
                       MAC_CL0 00EE                         MAC_CL1 00EF             LTRX_RX_BUF_CMDTERM 0001  
                       CNT_LEN FFFFFFFB              bLTRX_ReadTxStatus 6EFC                  LTRX_cReadChar 6F6D  
                LTRX_TxIntMode 6F05             LTRX_TX_CONTROL_REG 003B                    LTRX_IntCntl 6F18  
                LTRX_aRxBuffer 004B                FLAG_PGMODE_MASK 00C0                      _LTRX_Stop 6EF2  
               _LTRX_EnableInt 6EC9                 LTRX_TX_INT_REG 00E1                bLTRX_ReadRxData 6EFF  
               RAM_USE_CLASS_1 0001                 RAM_USE_CLASS_2 0002                 RAM_USE_CLASS_3 0004  
               RAM_USE_CLASS_4 0008                    LTRX_PutCRLF 7010              _LTRX_SetTxIntMode 6ED7  
                  LTRX_PutChar 6F5D                  LTRX_PutString 6F9A              LTRX_ENABLE_RX_INT 0001  
                       STR_LSB FFFFFFFD                         STR_MSB FFFFFFFC              LTRX_ENABLE_TX_INT 0002  
                  LTRX_fStatus 0048  bfFUNCTION_REG_TX_INT_MODE_BIT 0010                  LTRX_iReadChar 6F84  
               LTRX_DisableInt 6ED0                _LTRX_szGetParam 7048              LTRX_TX_BUFFER_REG 0039  
             _bLTRX_ReadRxData 6EFF                _LTRX_PutSHexInt 6F56                 _LTRX_bCmdCheck 702F  
                      ptrParam 0067                  _LTRX_CmdReset 7019                  LTRX_DELIMITER 0020  
               _LTRX_bErrCheck 7037                 _LTRX_cReadChar 6F6D                 _LTRX_TxIntMode 6F05  
                _LTRX_SendData 6EF9       LTRX_INT_MODE_TX_COMPLETE 0001                  _LTRX_cGetChar 6F65  
             SYSTEM_STACK_PAGE 0007            LTRX_TX_BUFFER_EMPTY 0010             _LTRX_bReadRxStatus 6F02  
              _LTRX_CPutString 6FFE                   FLAG_XIO_MASK 0010                 _LTRX_PutString 6F9A  
                 _LTRX_IntCntl 6F18             _LTRX_bReadTxStatus 6EFC      SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
          LTRX_RX_PARITY_ERROR 0080                   _LTRX_PutCRLF 7010      SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           _bLTRX_ReadRxStatus 6F02                   _LTRX_PutChar 6F5D                 _LTRX_iReadChar 6F84  
           _bLTRX_ReadTxStatus 6EFC                 LTRX_bCmdLength 7042  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:15 2009
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRX.inc
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module for the
     8                          ;;                22/24/25/26/27xxx PSoC family of devices.
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          ;--------------------------------------------------
    15                          ; Constants for LTRX API's
    16                          ;--------------------------------------------------
    17                          
    18                          ;mask value for global int reg bit for TX instance
    19  0040                    LTRX_TX_INT_MASK:                            equ 0x40
    20  00E1                    LTRX_TX_INT_REG:                             equ 0x0e1  ;TX interrupt address
    21  0080                    LTRX_RX_INT_MASK:                            equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    22  00E1                    LTRX_RX_INT_REG:                             equ 0x0e1  ;RX interrupt address
    23                          
    24  0001                    LTRX_RXBUF_ENABLE:                           equ 1
    25                          
    26                          ; Interrupt control masks
    27  0001                    LTRX_ENABLE_RX_INT:                          equ 0x01
    28  0000                    LTRX_DISABLE_RX_INT:                         equ 0x00
    29  0002                    LTRX_ENABLE_TX_INT:                          equ 0x02
    30  0000                    LTRX_DISABLE_TX_INT:                         equ 0x00
    31                          
    32  0000                    LTRX_INT_MODE_TX_REG_EMPTY:                  equ 0x00
    33  0001                    LTRX_INT_MODE_TX_COMPLETE:                   equ 0x01
    34                          
    35  0020                    LTRX_RX_IGNORE_BELOW:                        equ 0x20
    36  0010                    LTRX_RX_BUFFER_SIZE:                         equ 0x10
    37  000D                    LTRX_CMD_TERM:                               equ 0xd
    38  0020                    LTRX_DELIMITER:                              equ 0x20
    39  0000                    LTRX_BACKSPACE_ENABLE:                       equ 0x0
    40                          
    41                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                          ;       WARNING WARNING WARNING
    43                          ; The following equates are for backwards
    44                          ; compatibility only and should not be used
    45                          ; for new designs.
    46                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    47                          
    48                          ;------------------------------------
    49                          ;  Parity masks
    50                          ;------------------------------------
    51  0000                    UART_PARITY_NONE:       equ   00h
    52  0002                    UART_PARITY_EVEN:       equ   02h
    53  0006                    UART_PARITY_ODD:        equ   06h
    54                          
    55                          ;------------------------------------
    56                          ;  TX Status Register masks
    57                          ;------------------------------------
    58  0020                    UART_TX_COMPLETE:       equ   20h
    59  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    60                          
    61                          ;------------------------------------
    62                          ;  RX Status Register masks
    63                          ;------------------------------------
    64  0010                    UART_RX_ACTIVE:         equ   10h
    65  0008                    UART_RX_COMPLETE:       equ   08h
    66  0080                    UART_RX_PARITY_ERROR:   equ   80h
    67  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    68  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    69  00E0                    UART_RX_NO_ERROR:       equ   E0h
    70                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    71                          ;             END WARNING
    72                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    73                          
    74                          
    75                          
    76                          ;------------------------------------
    77                          ;  Parity masks
    78                          ;------------------------------------
    79  0000                    LTRX_PARITY_NONE:                       equ   00h
    80  0002                    LTRX_PARITY_EVEN:                       equ   02h
    81  0006                    LTRX_PARITY_ODD:                        equ   06h
    82                          
    83                          ;------------------------------------
    84                          ;  TX Status Register masks
    85                          ;------------------------------------
    86  0020                    LTRX_TX_COMPLETE:                       equ   20h
    87  0010                    LTRX_TX_BUFFER_EMPTY:                   equ   10h
    88                          
    89                          ;------------------------------------
    90                          ;  RX Status Register masks
    91                          ;------------------------------------
    92  0010                    LTRX_RX_ACTIVE:                         equ   10h
    93  0008                    LTRX_RX_COMPLETE:                       equ   08h
    94  0008                    LTRX_RX_REG_FULL:                       equ   08h
    95  0080                    LTRX_RX_PARITY_ERROR:                   equ   80h
    96  0040                    LTRX_RX_OVERRUN_ERROR:                  equ   40h
    97  0020                    LTRX_RX_FRAMING_ERROR:                  equ   20h
    98  00E0                    LTRX_RX_ERROR:                          equ   E0h
    99  0001                    LTRX_RX_ENABLE:                         equ   01h
   100                          
   101  00F0                    LTRX_RX_BUF_ERROR:                      equ   F0h  ; Mask for any Rx that may occur.
   102  0010                    LTRX_RX_BUF_OVERRUN:                    equ   10h  ; This indicates the software buffer has
   103                                                                                  ; been over run.
   104  0001                    LTRX_RX_BUF_CMDTERM:                    equ   01h  ; Command terminator has been received.
   105                          
   106  0001                    LTRX_RX_NO_DATA:                        equ   01h
   107  00E0                    LTRX_RX_NO_ERROR:                       equ   E0h
   108                          
   109                          
   110                          ;--------------------------------------------------
   111                          ; Registers Address Constants for LTRX
   112                          ;--------------------------------------------------
   113                          ;---------------------------------
   114                          ;  Registers used by TX
   115                          ;---------------------------------
   116  003B                    LTRX_TX_CONTROL_REG:    equ 3bh            ; Control register
   117  0038                    LTRX_TX_SHIFT_REG:  equ 38h               ; TX Shift Register register
   118  0039                    LTRX_TX_BUFFER_REG: equ 39h               ; TX Buffer Register
   119  0038                    LTRX_TX_FUNC_REG:   equ 38h             ; Function register
   120  0039                    LTRX_TX_INPUT_REG:  equ 39h             ; Input register
   121  003A                    LTRX_TX_OUTPUT_REG: equ 3ah             ; Output register
   122                          
   123                          ;---------------------------------
   124                          ;  Registers used by RX
   125                          ;---------------------------------
   126  003F                    LTRX_RX_CONTROL_REG:    equ 3fh            ; Control register
   127  003C                    LTRX_RX_SHIFT_REG:  equ 3ch               ; RX Shift Register register
   128  003E                    LTRX_RX_BUFFER_REG: equ 3eh               ; RX Buffer Register
   129  003C                    LTRX_RX_FUNC_REG:   equ 3ch             ; Function register
   130  003D                    LTRX_RX_INPUT_REG:  equ 3dh             ; Input register
   131  003E                    LTRX_RX_OUTPUT_REG: equ 3eh             ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   LTRXINT.asm
     4                          ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "LTRX.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _LTRX_TX_ISR
    22                          export  _LTRX_RX_ISR
    23                          
    24                          IF (LTRX_RXBUF_ENABLE)
    25                          export  LTRX_aRxBuffer
    26                          export _LTRX_aRxBuffer
    27                          export  LTRX_bRxCnt
    28                          export _LTRX_bRxCnt
    29                          export  LTRX_fStatus
    30                          export _LTRX_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (LTRX_RXBUF_ENABLE)
    40  0048                     LTRX_fStatus:
    41  0048                    _LTRX_fStatus:      BLK  1
    42  0049                     LTRX_bRxCnt:
    43  0049                    _LTRX_bRxCnt:       BLK  1
    44                          AREA LTRX_RAM (RAM, REL, CON)
    45  004B                     LTRX_aRxBuffer:
    46  004B                    _LTRX_aRxBuffer:    BLK LTRX_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _LTRX_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance LTRX.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  70B0                    _LTRX_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom code above this banner
    99                             ;---------------------------------------------------
   100                             ;@PSoC_UserCode_END@ (Do not change this line.)
   101  70B0  7E                   reti
   102                          
   103                          
   104                          ;-----------------------------------------------------------------------------
   105                          ;  FUNCTION NAME: _LTRX_RX_ISR
   106                          ;
   107                          ;  DESCRIPTION:
   108                          ;     UART RX interrupt handler for instance LTRX.
   109                          ;     This ISR handles the background processing of received characters if
   110                          ;     the buffer is enabled.
   111                          ;
   112                          ;
   113                          ;  The following assumes that the RX buffer feature has been enabled.
   114                          ;
   115                          ;  SIDE EFFECTS:
   116                          ;     There are 3 posible errors that may occur with the serial port.
   117                          ;      1) Parity Error
   118                          ;      2) Framing Error
   119                          ;      3) OverRun Error
   120                          ;
   121                          ;  This user module check for parity and framing error.  If either of these
   122                          ;  two errors are detected, the data is read and ignored.  When an overRun
   123                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   124                          ;  this reason this error is ignored at this time.  Code could be added to
   125                          ;  this ISR to set a flag if an error condition occurs.
   126                          ;
   127                          ;  THEORY of OPERATION:
   128                          ;     When using the RX buffer feature, the ISR collects received characters
   129                          ;     in a buffer until the user defined command terminator is detected.  After
   130                          ;     the command terminator is detected, the command bit is set and all other
   131                          ;     characters will be ignored until the command bit is reset.  Up to
   132                          ;     buffer_size - 1 characters will be collected waiting for a command
   133                          ;     terminator.  After that, the characters will be discarded, although
   134                          ;     a command determinator will still cause the command bit to be set.
   135                          ;
   136                          ;-----------------------------------------------------------------------------
   137  70B1                    _LTRX_RX_ISR:
   138                          
   139                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   140                             ;---------------------------------------------------
   141                             ; Insert your custom code below this banner
   142                             ;---------------------------------------------------
   143                             ;   NOTE: interrupt service routines must preserve
   144                             ;   the values of the A and X CPU registers.
   145                          
   146                             ;---------------------------------------------------
   147                             ; Insert your custom code above this banner
   148                             ;---------------------------------------------------
   149                             ;@PSoC_UserCode_END@ (Do not change this line.)
   150                          
   151                          IF (LTRX_RXBUF_ENABLE)
   152  70B1  08                   push A
   153  70B2  10                   push X
   154                             
   155                             IF SYSTEM_LARGE_MEMORY_MODEL
   156  70B3  5D D3                   REG_PRESERVE IDX_PP
   157                             ENDIF
   158                             
   159  70B6  58 49                mov  X,[LTRX_bRxCnt]                                    ; Load X with byte counter
   160  70B8  5D 3F                mov  A,REG[LTRX_RX_CONTROL_REG]                         ; Read the control register
   161  70BA  08                   push A                                                  ; Store copy for later test
   162                                                                                     ; IF real RX interrupt
   163  70BB  21 08                and  A,LTRX_RX_REG_FULL                                 ; Did really really get an IRQ
   164  70BD  B004                 jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   165  70BF  18                   pop  A                                                  ; Restore stack
   166  70C0  805E                 jmp  .RESTORE_IDX_PP
   167                          
   168  70C2                    .UARTRX_ReadRx:
   169  70C2  18                   pop  A                                                  ; Restore status flags
   170                                                                                     ; IF there is no error, get data
   171                                                                                     ; Check for parity or framing error
   172  70C3  21 E0                and  A,LTRX_RX_ERROR
   173  70C5  A012                 jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   174                          
   175  70C7  2C 48                or   [LTRX_fStatus],A                                   ; Set error flags (parity,framing,overrun
                                ) bits
   176  70C9  49 3E 00             tst  REG[LTRX_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
   177  70CC  21 20                and  A,LTRX_RX_FRAMING_ERROR                            ; Check for framing error special case
   178  70CE  A050                 jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   179                          
   180                                                                                     ; Disable and re-enable RX to reset after
   181                                                                                     ; framing error.
   182  70D0  41 3F FE             and   REG[LTRX_RX_CONTROL_REG], ~LTRX_RX_ENABLE         ; Disable RX
   183  70D3  43 3F 01             or    REG[LTRX_RX_CONTROL_REG],  LTRX_RX_ENABLE         ; Enable RX
   184  70D6  8048                 jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   185                          
   186                          
   187  70D8                    .UARTRX_NO_ERROR:
   188  70D8  5D 3E                mov  A,REG[LTRX_RX_BUFFER_REG ]                         ; Read the data buffer
   189                          
   190                                                                                     ; IF buffer not full
   191  70DA  47 48  01            tst  [LTRX_fStatus],LTRX_RX_BUF_CMDTERM                 ; Check for buffer full
   192  70DD  B041                 jnz  .RESTORE_IDX_PP                                    ; All done
   193                          
   194  70DF  39 0D                cmp  A,LTRX_CMD_TERM                                    ; Check for End of command
   195  70E1  B014                 jnz  .UARTRX_CHK_BACKSPACE
   196  70E3  2E 48  01            or   [LTRX_fStatus],LTRX_RX_BUF_CMDTERM                 ; Set command ready bit
   197                          
   198                          
   199                          
   200  70E6  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer
   201  70E9  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   202  70ED  56 4B  00            mov  [X + LTRX_aRxBuffer],00h                           ; Zero out last data
   203  70F0  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   204  70F4  802A                 jmp  .RESTORE_IDX_PP
   205                          
   206  70F6                    .UARTRX_CHK_BACKSPACE:                                     ; 
   207                          IF(LTRX_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
   208                             cmp  A,LTRX_BACKSPACE_ENABLE                            ; Check for backspace character
   209                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   210                             cmp  [LTRX_bRxCnt],00h                                  ; Check if buffer empty
   211                             jz   .RESTORE_IDX_PP                                    ; 
   212                             dec  [LTRX_bRxCnt]                                      ; Decrement buffer count by one.
   213                             jmp  .RESTORE_IDX_PP
   214                          ENDIF                                                      ; 
   215                          
   216  70F6                    .UARTRX_IGNORE:
   217                          IF(LTRX_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
   218  70F6  39 20                cmp  A,LTRX_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
   219  70F8  C026                 jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   220                          ENDIF
   221                          
   222  70FA                    .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   223                          	
   224  70FA  62 D3 00             RAM_SETPAGE_IDX >LTRX_aRxBuffer                         ;   using idexed address mode
   225  70FD  3C 49  0F            cmp  [LTRX_bRxCnt],(LTRX_RX_BUFFER_SIZE - 1)
   226  7100  C011                 jc   .UARTRX_ISR_GETDATA
   227  7102  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   228  7106  56 4B  00            mov  [X + LTRX_aRxBuffer],00h                           ; Zero out last data in the buffer
   229  7109  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   230  710D  2E 48  10            or   [LTRX_fStatus],LTRX_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun
                                ) bits
   231  7110  800E                 jmp  .RESTORE_IDX_PP
   232                          
   233  7112                    .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   234                                                                                     ; X is already loaded with pointer
   235  7112  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   236  7116  54 4B                mov  [X+LTRX_aRxBuffer],A                               ; store data in array
   237  7118  70 3F                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   238  711C  75                   inc  X                                                  ; Inc the pointer
   239  711D  5A 49                mov  [LTRX_bRxCnt],X                                    ; Restore the pointer
   240                                                                                     ; ENDIF max string size
   241  711F                    .RESTORE_IDX_PP:
   242                             IF SYSTEM_LARGE_MEMORY_MODEL
   243  711F  18                      REG_RESTORE IDX_PP
   244                             ENDIF
   245                          
   246  7122                    .END_UARTRX_ISR:
   247  7122  20                   pop  X
   248  7123  18                   pop  A
   249                          
   250                          ENDIF
   251                          
   252  7124                    LTRX_RX_ISR_END:
   253  7124  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:15 2009
             _LTRX_fStatus 0048               LTRX_RX_ERROR 00E0                    MAC0_CL0 00EE                    MAC0_CL1 00EF  
                  MAC1_CL0 00AE                    MAC1_CL1 00AF            LTRX_RX_REG_FULL 0008                       MAC_X 00EC  
                     MAC_Y 00ED          LTRX_RX_BUFFER_REG 003E       LTRX_RX_FRAMING_ERROR 0020              LTRX_RX_ENABLE 0001  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
                    HITECH 0002             FLAG_PGMODE_00b 0000             FLAG_PGMODE_10b 0080        LTRX_RX_IGNORE_BELOW 0020  
                    IDX_PP 00D3                 LTRX_bRxCnt 0049         LTRX_RX_BUFFER_SIZE 0010       LTRX_BACKSPACE_ENABLE 0000  
              _LTRX_RX_ISR 70B1                _LTRX_TX_ISR 70B0           LTRX_RXBUF_ENABLE 0001                _LTRX_bRxCnt 0049  
 SYSTEM_LARGE_MEMORY_MODEL 0001             LTRX_RX_ISR_END 7124         LTRX_RX_CONTROL_REG 003F                     MAC_CL0 00EE  
                   MAC_CL1 00EF         LTRX_RX_BUF_CMDTERM 0001              LTRX_aRxBuffer 004B            FLAG_PGMODE_MASK 00C0  
       LTRX_RX_BUF_OVERRUN 0010                LTRX_fStatus 0048             _LTRX_aRxBuffer 004B               LTRX_CMD_TERM 000D  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:16 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.inc
     4                          ;;  Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the OneWire user module interface
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          
    13                          ;;*****************************************************************************
    14                          
    15                          ;--------------------------------
    16                          ;  Interrupt registers and masks
    17                          ;--------------------------------
    18  0040                    OneWire_BIT_INT_MASK:                   equ 0x40
    19  00DF                    OneWire_BIT_INT_REG:                    equ 0x0df
    20                          
    21                          IF (OneWire_BIT_INT_REG - INT_MSK1)
    22  00DC                    OneWire_BIT_INT_CLR:                    equ INT_CLR2
    23                          ELSE
    24                          OneWire_BIT_INT_CLR:                    equ INT_CLR1
    25                          ENDIF
    26                          
    27                          ;--------------------------------
    28                          ;  Parasite Power Pin selected
    29                          ;--------------------------------
    30  0001                    OneWire_OUT_PORT_DM1:                   equ PRT0DM1
    31  0001                    OneWire_OUT_PORT_MASK:                  equ 0x1
    32                          
    33                          ;---------------------------
    34                          ; One Wire constants and masks
    35                          ;---------------------------
    36  0000                    OneWire_CRC16_ENABLE:                   equ   0
    37  0001                    OneWire_SEARCH_ENABLE:                  equ   1
    38  0000                    OneWire_OVERDRIVE_ENABLE:               equ   0
    39  0000                    OneWire_PARASITE_ENABLE:                equ   0
    40                          
    41                          ;-----------------------------------------------
    42                          ;  Registers used by OneWire
    43                          ;-----------------------------------------------
    44  0054                    OneWire_BITCLK_FUNC_REG:    equ 54h              ;Function register
    45  0055                    OneWire_BITCLK_INPUT_REG:   equ 55h              ;Input register
    46  0056                    OneWire_BITCLK_OUTPUT_REG:  equ 56h              ;Output register
    47  0057                    OneWire_BITCLK_CONTROL_REG: equ 57h              ;Control register
    48  0054                    OneWire_BITCLK_COUNTER_REG: equ 54h              ;Counter register
    49  0055                    OneWire_BITCLK_PERIOD_REG:  equ 55h              ;Period register
    50  0056                    OneWire_BITCLK_COMPARE_REG: equ 56h              ;Compare register
    51  0058                    OneWire_XCVR_FUNC_REG:  equ 58h                  ;Function register
    52  0059                    OneWire_XCVR_INPUT_REG: equ 59h                  ;Input register
    53  005A                    OneWire_XCVR_OUTPUT_REG:    equ 5ah              ;Output register
    54  005B                    OneWire_XCVR_CONTROL_REG:   equ 5bh              ;Control register
    55  0058                    OneWire_XCVR_SHIFT_REG: equ 58h                  ;Counter register
    56  0059                    OneWire_XCVR_TX_BUFFER_REG: equ 59h              ;Period register
    57  005A                    OneWire_XCVR_RX_BUFFER_REG: equ 5ah              ;Compare register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.asm
     4                          ;;   Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: OneWire User Module software implementation file
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API function
    14                          ;;        returns. For Large Memory Model devices it is also the caller's
    15                          ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;   Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "OneWire.inc"
    26                          
    27                          export  OneWire_Start
    28                          export _OneWire_Start
    29                          export  OneWire_Stop
    30                          export _OneWire_Stop
    31                          
    32                          export  OneWire_fReset
    33                          export _OneWire_fReset
    34                          export  OneWire_WriteBit
    35                          export _OneWire_WriteBit
    36                          export  OneWire_bReadBit
    37                          export _OneWire_bReadBit
    38                          export  OneWire_WriteByte
    39                          export _OneWire_WriteByte
    40                          export  OneWire_bReadByte
    41                          export _OneWire_bReadByte
    42                          export  OneWire_ClearCRC8
    43                          export _OneWire_ClearCRC8
    44                          export  OneWire_bCRC8
    45                          export _OneWire_bCRC8
    46                          
    47                          export  OneWire_bCRC8Value
    48                          export _OneWire_bCRC8Value
    49                          IF (OneWire_CRC16_ENABLE)
    50                          export  OneWire_ClearCRC16
    51                          export _OneWire_ClearCRC16
    52                          export  OneWire_wCRC16
    53                          export _OneWire_wCRC16
    54                          export  OneWire_wCRC16Value
    55                          export _OneWire_wCRC16Value
    56                          ENDIF
    57                          
    58                          IF (OneWire_SEARCH_ENABLE)
    59                          export   OneWire_GetROM
    60                          export  _OneWire_GetROM
    61                          export   OneWire_SetROM
    62                          export  _OneWire_SetROM
    63                          export   OneWire_fFindFirst
    64                          export  _OneWire_fFindFirst
    65                          export   OneWire_fFindNext
    66                          export  _OneWire_fFindNext
    67                          export   OneWire_fVerify
    68                          export  _OneWire_fVerify
    69                          export   OneWire_FamilyTargetSetup
    70                          export  _OneWire_FamilyTargetSetup
    71                          export   OneWire_FamilySkipSetup
    72                          export  _OneWire_FamilySkipSetup
    73                          ENDIF
    74                          
    75                          IF (OneWire_OVERDRIVE_ENABLE)
    76                          export  OneWire_SetOverdrive
    77                          export _OneWire_SetOverdrive
    78                          export  OneWire_ClearOverdrive
    79                          export _OneWire_ClearOverdrive
    80                          ENDIF
    81                          
    82                          IF (OneWire_PARASITE_ENABLE)
    83                          export  OneWire_WriteByteStrong
    84                          export _OneWire_WriteByteStrong
    85                          export  OneWire_SetResistive
    86                          export _OneWire_SetResistive
    87                          ENDIF
    88                          
    89                          AREA bss
    90                          
    91  005B                    _OneWire_bCRC8Value:
    92  005B                     OneWire_bCRC8Value:                             blk   1
    93                          
    94                          IF (OneWire_CRC16_ENABLE)
    95                          _OneWire_wCRC16Value:
    96                           OneWire_wCRC16Value:                            blk   2
    97                          ENDIF
    98                          
    99                          IF (OneWire_SEARCH_ENABLE)
   100  005C                    OneWire_ROM:                                     blk   8
   101  0064                    OneWire_LastDiscrepancy:                         blk   1
   102  0065                    OneWire_LastFamilyDiscrepancy:                   blk   1
   103  0066                    OneWire_LastDeviceFlag:                          blk   1
   104                          ENDIF
   105                          
   106                          IF (OneWire_OVERDRIVE_ENABLE )
   107                          OneWire_bMode:                                   blk   1
   108                          ENDIF
   109                          
   110                          AREA UserModules (ROM, REL)
   111                          
   112  00F1                    RESET_PATTERN:                          equ   F1h
   113  0001                    ZERO_PATTERN:                           equ   01h
   114  00FD                    ONE_PATTERN:                            equ   FDh
   115  000F                    INIT_PERIOD:                            equ   0Fh
   116  00F9                    RESET_PERIOD:                           equ   F9h      ;Divide by 250 (249+1)
   117  000D                    BIT_PERIOD:                             equ   0Dh      ;Divide by 14 (13+1)
   118  0019                    OD_RESET_PERIOD:                        equ   19h      ;Divide by 26 (25+1)
   119  0001                    OD_BIT_PERIOD:                          equ   01h      ;Divide by 2 (1+1)
   120                          
   121  0020                    SPIM_SPI_COMPLETE:              equ 0x20    ;SPI Tx/Rx cycle has completed
   122  0000                    SPIM_MODE_0:                   equ 0x00    ; MODE 0 - Leading edge latches data - pos clock
   123  0080                    SPIM_LSB_FIRST:                equ 0x80    ; LSB bit transmitted/received first
   124  0001                    CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
   125  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
   126  000F                    INPUT_REG_CLOCK_MASK:          equ 0x0F    ; Input register clock mask
   127  0001                    OD_MODE:                       equ 0x01    ;OverDrive
   128                          
   129                          .SECTION
   130                          ;-----------------------------------------------------------------------------
   131                          ;  FUNCTION NAME: OneWire_Start
   132                          ;
   133                          ;  DESCRIPTION:
   134                          ;     Enables the clock divider and tranceiver blocks.  Initializes the
   135                          ;     OneWireOut pin to high.  Sets the clock divider period.
   136                          ;-----------------------------------------------------------------------------
   137                          ;  ARGUMENTS:
   138                          ;     none.
   139                          ;
   140                          ;  RETURNS:
   141                          ;     none.
   142                          ;
   143                          ;  SIDE EFFECTS:
   144                          ;    The A and X registers may be modified by this or future implementations
   145                          ;    of this function.  The same is true for all RAM page pointer registers in
   146                          ;    the Large Memory Model.  When necessary, it is the calling function's
   147                          ;    responsibility to perserve their values across calls to fastcall16
   148                          ;    functions.   Currently only the page pointer registers listed below are modified:
   149                          ;       CUR_PP
   150                          ;
   151                          ;  THEORY of OPERATION:
   152                          ;     Set the start bit in the Control register.
   153                          ;-----------------------------------------------------------------------------
   154  7125                     OneWire_Start:
   155  7125                    _OneWire_Start:
   156                             RAM_PROLOGUE RAM_USE_CLASS_4
   157                          
   158                          IF (OneWire_OVERDRIVE_ENABLE | OneWire_PARASITE_ENABLE)
   159                              RAM_SETPAGE_CUR >OneWire_bMode
   160                              mov   [OneWire_bMode], 00h
   161                          ENDIF
   162  7125  62 55 0F              mov   reg[OneWire_BITCLK_PERIOD_REG], INIT_PERIOD        ; Set divider period to initialize OneW
                                ireOut
   163  7128  43 57 01              or    reg[OneWire_BITCLK_CONTROL_REG], CONTROL_REG_START_BIT  ; Start the clock divider
   164  712B  62 5B 81              mov   reg[OneWire_XCVR_CONTROL_REG], SPIM_MODE_0|SPIM_LSB_FIRST|CONTROL_REG_START_BIT
   165  712E  50 FF                 mov   A, FFh                                 ; Initialize OneWireOut to high
   166  7130  92EF                  call  OneWire_SendTxDataWait
   167  7132  62 55 0D              mov   reg[OneWire_BITCLK_PERIOD_REG], BIT_PERIOD
   168                          
   169                              RAM_EPILOGUE RAM_USE_CLASS_4
   170  7135  7F                    ret
   171                          .ENDSECTION
   172                          
   173                          .SECTION
   174                          ;-----------------------------------------------------------------------------
   175                          ;  FUNCTION NAME: OneWire_Stop
   176                          ;
   177                          ;  DESCRIPTION:
   178                          ;     Disables BitClk and XCVR operation.
   179                          ;-----------------------------------------------------------------------------
   180                          ;  ARGUMENTS:
   181                          ;     none.
   182                          ;
   183                          ;  RETURNS:
   184                          ;     none.
   185                          ;
   186                          ;  SIDE EFFECTS:
   187                          ;    The A and X registers may be modified by this or future implementations
   188                          ;    of this function.  The same is true for all RAM page pointer registers in
   189                          ;    the Large Memory Model.  When necessary, it is the calling function's
   190                          ;    responsibility to preserve their values across calls to fastcall16
   191                          ;    functions.
   192                          ;
   193                          ;  THEORY of OPERATION:
   194                          ;     Clear the start bits in the Control registers.
   195                          ;-----------------------------------------------------------------------------
   196  7136                     OneWire_Stop:
   197  7136                    _OneWire_Stop:
   198                              RAM_PROLOGUE RAM_USE_CLASS_1
   199                          
   200  7136  41 57 FE              and   reg[OneWire_BITCLK_CONTROL_REG], ~CONTROL_REG_START_BIT
   201  7139  41 5B FE              and   reg[OneWire_XCVR_CONTROL_REG], ~CONTROL_REG_START_BIT
   202                          
   203                              RAM_EPILOGUE RAM_USE_CLASS_1
   204  713C  7F                    ret
   205                          .ENDSECTION
   206                          
   207                          .SECTION
   208                          ;-----------------------------------------------------------------------------
   209                          ;  FUNCTION NAME: OneWire_fReset
   210                          ;
   211                          ;  DESCRIPTION:
   212                          ;     Reset the OneWireOut pin
   213                          ;-----------------------------------------------------------------------------
   214                          ;
   215                          ;  ARGUMENTS:
   216                          ;     none.
   217                          ;
   218                          ;  RETURNS:
   219                          ;     A = 01h if one or more devices responded.
   220                          ;
   221                          ;  SIDE EFFECTS:
   222                          ;    The A and X registers may be modified by this or future implementations
   223                          ;    of this function.  The same is true for all RAM page pointer registers in
   224                          ;    the Large Memory Model.  When necessary, it is the calling function's
   225                          ;    responsibility to preserve their values across calls to fastcall16
   226                          ;    functions. Currently only the page pointer registers listed below
   227                          ;    are modified: CUR_PP
   228                          ;
   229                          ;-----------------------------------------------------------------------------
   230  713D                     OneWire_fReset:
   231  713D                    _OneWire_fReset:
   232                              RAM_PROLOGUE RAM_USE_CLASS_4
   233                          
   234                          IF (OneWire_OVERDRIVE_ENABLE)
   235                              RAM_SETPAGE_CUR >OneWire_bMode
   236                          ENDIF
   237  713D  50 F9                 mov   A, RESET_PERIOD                        ; Reset period
   238                          IF (OneWire_OVERDRIVE_ENABLE)
   239                              tst   [OneWire_bMode],OD_MODE                ; Test for OverDrive mode
   240                              jz    .Reset_Normal
   241                              mov   reg[OneWire_BITCLK_PERIOD_REG], OD_RESET_PERIOD  ; OverDrive Reset period
   242                              mov   A, RESET_PATTERN                       ; Reset bit pattern
   243                              call  OneWire_SendTxDataWait
   244                              mov   A, OD_BIT_PERIOD                       ; OverDrive Bit period
   245                              jmp   .Reset_WriteBitPeriod
   246                          ENDIF
   247  713F                    .Reset_Normal:
   248  713F  60 55                 mov   reg[OneWire_BITCLK_PERIOD_REG], A
   249  7141  50 F1                 mov   A, RESET_PATTERN                       ; Reset bit pattern
   250  7143  92DC                  call  OneWire_SendTxDataWait
   251  7145  50 0D                 mov   A, BIT_PERIOD                          ; Bit period
   252  7147                    .Reset_WriteBitPeriod:
   253  7147  60 55                 mov   reg[OneWire_BITCLK_PERIOD_REG], A
   254  7149  5D 5A                 mov   A, reg[OneWire_XCVR_RX_BUFFER_REG]
   255  714B  39 F1                 cmp   A, RESET_PATTERN
   256  714D  D005                  jnc   .Reset_NoResponse
   257  714F  50 01                 mov   A,01h
   258  7151  8003                  jmp   .Reset_done
   259  7153                    .Reset_NoResponse:
   260  7153  50 00                 mov   A,00h
   261  7155                    .Reset_done:
   262                          
   263                              RAM_EPILOGUE RAM_USE_CLASS_4
   264  7155  7F                    ret
   265                          .ENDSECTION
   266                          
   267                          .SECTION
   268                          ;-----------------------------------------------------------------------------
   269                          ;  FUNCTION NAME: OneWire_WriteBit
   270                          ;
   271                          ;  DESCRIPTION:
   272                          ;     Write a bit to the OneWireOut pin.
   273                          ;-----------------------------------------------------------------------------
   274                          ;  ARGUMENTS:
   275                          ;     A  => less significant bit is output to OneWireOut pin
   276                          ;
   277                          ;  RETURNS:
   278                          ;     none.
   279                          ;
   280                          ;  SIDE EFFECTS:
   281                          ;    The A and X registers may be modified by this or future implementations
   282                          ;    of this function.  The same is true for all RAM page pointer registers in
   283                          ;    the Large Memory Model.  When necessary, it is the calling function's
   284                          ;    responsibility to preserve their values across calls to fastcall16
   285                          ;    functions.
   286                          ;
   287                          ;-----------------------------------------------------------------------------
   288  7156                     OneWire_WriteBit:
   289  7156                    _OneWire_WriteBit:
   290                              RAM_PROLOGUE RAM_USE_CLASS_1
   291                          
   292  7156  6D                    rrc   A                                      ; Rotate LSB into CF to test
   293  7157  C005                  jc    .WriteBit_1                            ; LSB is 1
   294  7159  50 01                 mov   A, ZERO_PATTERN                        ; "0" bit pattern
   295  715B  8003                  jmp   .WriteBit_Send
   296  715D                    .WriteBit_1:
   297  715D  50 FD                 mov   A, ONE_PATTERN                         ; "1" bit pattern
   298  715F                    .WriteBit_Send:
   299  715F  92C0                  call  OneWire_SendTxDataWait
   300                          
   301                              RAM_EPILOGUE RAM_USE_CLASS_1
   302  7161  7F                    ret
   303                          .ENDSECTION
   304                          
   305                          
   306                          .SECTION
   307                          ;-----------------------------------------------------------------------------
   308                          ;  FUNCTION NAME: OneWire_bReadBit
   309                          ;
   310                          ;  DESCRIPTION:
   311                          ;     Read the OneWireIn pin
   312                          ;-----------------------------------------------------------------------------
   313                          ;
   314                          ;  ARGUMENTS:
   315                          ;     none.
   316                          ;
   317                          ;  RETURNS:
   318                          ;     the less significant bit of A returns value read from OneWire pin.
   319                          ;
   320                          ;  SIDE EFFECTS:
   321                          ;    The A and X registers may be modified by this or future implementations
   322                          ;    of this function.  The same is true for all RAM page pointer registers in
   323                          ;    the Large Memory Model.  When necessary, it is the calling function's
   324                          ;    responsibility to preserve their values across calls to fastcall16
   325                          ;    functions.
   326                          ;
   327                          ;-----------------------------------------------------------------------------
   328  7162                     OneWire_bReadBit:
   329  7162                    _OneWire_bReadBit:
   330                              RAM_PROLOGUE RAM_USE_CLASS_1
   331                          
   332  7162  50 FD                 mov    A, ONE_PATTERN
   333  7164  92BB                  call   OneWire_SendTxDataWait
   334  7166  5D 5A                 mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
   335  7168  39 FD                 cmp    A, ONE_PATTERN
   336  716A  D005                  jnc    .ReadBit_One
   337  716C  50 00                 mov    A, 00h
   338  716E  8003                  jmp    .Done
   339  7170                    .ReadBit_One:
   340  7170  50 01                 mov    A, 01h
   341  7172                    .Done:
   342                          
   343                              RAM_EPILOGUE RAM_USE_CLASS_1
   344  7172  7F                    ret
   345                          .ENDSECTION
   346                          
   347                          .SECTION
   348                          ;-----------------------------------------------------------------------------
   349                          ;  FUNCTION NAME: OneWire_WriteByte
   350                          ;
   351                          ;  DESCRIPTION:
   352                          ;     Write a byte to the OneWireOut pin
   353                          ;-----------------------------------------------------------------------------
   354                          ;
   355                          ;  ARGUMENTS:
   356                          ;     A => byte output to the OneWireOut pin
   357                          ;
   358                          ;  RETURNS:
   359                          ;     none.
   360                          ;
   361                          ;  SIDE EFFECTS:
   362                          ;    The A and X registers may be modified by this or future implementations
   363                          ;    of this function.  The same is true for all RAM page pointer registers in
   364                          ;    the Large Memory Model.  When necessary, it is the calling function's
   365                          ;    responsibility to preserve their values across calls to fastcall16
   366                          ;    functions.
   367                          ;
   368                          ;-----------------------------------------------------------------------------
   369  7173                     OneWire_WriteByte:
   370  7173                    _OneWire_WriteByte:
   371                              RAM_PROLOGUE RAM_USE_CLASS_1
   372                              
   373  7173  08                    push   A
   374  7174  57 08                 mov    X, 08h
   375  7176                    .ByteLoop:
   376  7176  18                    pop    A
   377  7177  6D                    rrc    A
   378  7178  08                    push   A
   379  7179  C005                  jc     .LoadPattern_1
   380  717B  50 01                 mov    A, ZERO_PATTERN
   381  717D  8003                  jmp    .SendPattern
   382  717F                    .LoadPattern_1:
   383  717F  50 FD                 mov    A, ONE_PATTERN
   384  7181                    .SendPattern:
   385  7181  60 59             	mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
   386  7183                    .WaitForEmptyBuf:
   387  7183  5D 5B                 mov    A, reg[OneWire_XCVR_CONTROL_REG]
   388  7185  21 20                 and    A, SPIM_SPI_COMPLETE
   389  7187  AFFB                  jz     .WaitForEmptyBuf
   390  7189  79                    dec    X
   391  718A  BFEB                  jnz    .ByteLoop
   392  718C  18                    pop    A
   393                          
   394                              RAM_EPILOGUE RAM_USE_CLASS_1
   395  718D  7F                    ret
   396                          .ENDSECTION
   397                          
   398                          .SECTION
   399                          ;-----------------------------------------------------------------------------
   400                          ;  FUNCTION NAME: OneWire_bReadByte
   401                          ;
   402                          ;  DESCRIPTION:
   403                          ;     Read a byte from the OneWireIn pin
   404                          ;-----------------------------------------------------------------------------
   405                          ;
   406                          ;  ARGUMENTS:
   407                          ;     none.
   408                          ;
   409                          ;  RETURNS:
   410                          ;     A returns byte read from OneWireIn pin.
   411                          ;
   412                          ;  SIDE EFFECTS:
   413                          ;    The A and X registers may be modified by this or future implementations
   414                          ;    of this function.  The same is true for all RAM page pointer registers in
   415                          ;    the Large Memory Model.  When necessary, it is the calling function's
   416                          ;    responsibility to perserve their values across calls to fastcall16
   417                          ;    functions.
   418                          ;
   419                          ;-----------------------------------------------------------------------------
   420  718E                     OneWire_bReadByte:
   421  718E                    _OneWire_bReadByte:
   422                              RAM_PROLOGUE RAM_USE_CLASS_1
   423                              
   424  718E  08                    push   A
   425  718F  57 08                 mov    X,08h
   426  7191                    .ByteLoop:
   427  7191  50 FD                 mov    A, ONE_PATTERN
   428  7193  928C                  call   OneWire_SendTxDataWait
   429  7195  5D 5A                 mov    A, reg[OneWire_XCVR_RX_BUFFER_REG]
   430  7197  39 FD                 cmp    A, ONE_PATTERN
   431  7199  18                    pop    A
   432  719A  6D                    rrc    A
   433  719B  08                    push   A
   434  719C  79                    dec    X
   435  719D  BFF3                  jnz    .ByteLoop
   436  719F  18                    pop    A
   437  71A0  73                	cpl    A
   438                              RAM_EPILOGUE RAM_USE_CLASS_1
   439                              
   440  71A1  7F                    ret
   441                          .ENDSECTION
   442                          
   443                          .SECTION
   444                          ;-----------------------------------------------------------------------------
   445                          ;  FUNCTION NAME: OneWire_ClearCRC8
   446                          ;
   447                          ;  DESCRIPTION:
   448                          ;     Clear the CRC8 RAM location
   449                          ;-----------------------------------------------------------------------------
   450                          ;
   451                          ;  ARGUMENTS:
   452                          ;     none.
   453                          ;
   454                          ;  RETURNS:
   455                          ;     none.
   456                          ;
   457                          ;  SIDE EFFECTS:
   458                          ;    The A and X registers may be modified by this or future implementations
   459                          ;    of this function.  The same is true for all RAM page pointer registers in
   460                          ;    the Large Memory Model.  When necessary, it is the calling function's
   461                          ;    responsibility to preserve their values across calls to fastcall16
   462                          ;    functions.   Currently only the page pointer registers listed below are modified:
   463                          ;    CUR_PP
   464                          ;
   465                          ;-----------------------------------------------------------------------------
   466  71A2                     OneWire_ClearCRC8:
   467  71A2                    _OneWire_ClearCRC8:
   468                              RAM_PROLOGUE RAM_USE_CLASS_4
   469  71A2  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   470                              
   471  71A5  55 5B  00             mov   [OneWire_bCRC8Value], 00h
   472                              
   473                              RAM_EPILOGUE RAM_USE_CLASS_4
   474  71A8  7F                    ret
   475                          .ENDSECTION
   476                          
   477                          .SECTION
   478                          ;-----------------------------------------------------------------------------
   479                          ;  FUNCTION NAME: OneWire_bCRC8
   480                          ;
   481                          ;  DESCRIPTION:
   482                          ;     CRC for One Wire
   483                          ;-----------------------------------------------------------------------------
   484                          ;
   485                          ;  ARGUMENTS:
   486                          ;     A contains the byte to CRC.
   487                          ;
   488                          ;  RETURNS:
   489                          ;     A contains current CRC value.
   490                          ;
   491                          ;  SIDE EFFECTS:
   492                          ;    The A and X registers may be modified by this or future implementations
   493                          ;    of this function.  The same is true for all RAM page pointer registers in
   494                          ;    the Large Memory Model.  When necessary, it is the calling function's
   495                          ;    responsibility to preserve their values across calls to fastcall16
   496                          ;    functions. Currently only the page pointer registers listed below are modified:
   497                          ;     CUR_PP
   498                          ;-----------------------------------------------------------------------------
   499  71A9                     OneWire_bCRC8:
   500  71A9                    _OneWire_bCRC8:
   501                              RAM_PROLOGUE RAM_USE_CLASS_4
   502  71A9  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   503                              
   504  71AC  08                    push  A                                      ; Save the bits to shift
   505  71AD  57 08                 mov   X, 08h                                 ; Set up to shift one byte
   506  71AF                    .OW_crc8_loop:
   507  71AF  32 5B                 xor   A, [OneWire_bCRC8Value]                ; Determine feedback
   508  71B1  6D                    rrc   A                                      ; Move it into CF
   509  71B2  D004                  jnc   .OW_crc8_FB_zero                       ; If feedback is 0, no XOR of the byte needed
   510  71B4  36 5B  18             xor   [OneWire_bCRC8Value],18h               ; XOR the CRC byte
   511  71B7                    .OW_crc8_FB_zero:
   512  71B7  6E 5B                 rrc   [OneWire_bCRC8Value]                   ; Rotate CF into the CRC byte
   513  71B9  18                    pop   A                                      ; Restore the remaining bits
   514  71BA  6D                    rrc   A                                      ; Rotate for the next bit
   515  71BB  08                    push  A                                      ; Save the remaining bits
   516  71BC  79                    dec   X                                      
   517  71BD  BFF1                  jnz   .OW_crc8_loop                          ; Loop until whole input byte is shifted
   518  71BF  18                    pop   A                                      ; Clean up stack
   519  71C0  51 5B                 mov   A, [OneWire_bCRC8Value]                ; Load computed CRC byte into A
   520                              
   521                              RAM_EPILOGUE RAM_USE_CLASS_4
   522  71C2  7F                    ret
   523                          .ENDSECTION
   524                          
   525                          IF (OneWire_CRC16_ENABLE)
   526                          .SECTION
   527                          ;-----------------------------------------------------------------------------
   528                          ;  FUNCTION NAME: OneWire_ClearCRC16
   529                          ;
   530                          ;  DESCRIPTION:
   531                          ;     Clear the CRC16 RAM locations
   532                          ;-----------------------------------------------------------------------------
   533                          ;  ARGUMENTS:
   534                          ;     none.
   535                          ;
   536                          ;  RETURNS:
   537                          ;     none.
   538                          ;
   539                          ;  SIDE EFFECTS:
   540                          ;    The A and X registers may be modified by this or future implementations
   541                          ;    of this function.  The same is true for all RAM page pointer registers in
   542                          ;    the Large Memory Model.  When necessary, it is the calling function's
   543                          ;    responsibility to preserve their values across calls to fastcall16
   544                          ;    functions. Currently only the page pointer registers listed below are modified:
   545                          ;     CUR_PP
   546                          ;
   547                          ;-----------------------------------------------------------------------------
   548                           OneWire_ClearCRC16:
   549                          _OneWire_ClearCRC16:
   550                              RAM_PROLOGUE RAM_USE_CLASS_4
   551                              RAM_SETPAGE_CUR >OneWire_wCRC16Value
   552                              
   553                              mov   [OneWire_wCRC16Value+0],00h
   554                              mov   [OneWire_wCRC16Value+1],00h
   555                                  
   556                              RAM_EPILOGUE RAM_USE_CLASS_4
   557                              ret
   558                          .ENDSECTION
   559                          
   560                          .SECTION
   561                          ;-----------------------------------------------------------------------------
   562                          ;  FUNCTION NAME: OneWire_wCRC16
   563                          ;
   564                          ;  DESCRIPTION:
   565                          ;     CRC-16 for One Wire
   566                          ;-----------------------------------------------------------------------------
   567                          ;  ARGUMENTS:
   568                          ;     A contains the byte to CRC.
   569                          ;
   570                          ;  RETURNS:
   571                          ;     A contains current CRC LO byte value.
   572                          ;     X contains current CRC HI byte value.
   573                          ;     This returns as an unsigned integer in C.
   574                          ;
   575                          ;  SIDE EFFECTS:
   576                          ;    The A and X registers may be modified by this or future implementations
   577                          ;    of this function.  The same is true for all RAM page pointer registers in
   578                          ;    the Large Memory Model.  When necessary, it is the calling function's
   579                          ;    responsibility to preserve their values across calls to fastcall16
   580                          ;    functions.  Currently only the page pointer registers listed below are modified:
   581                          ;     CUR_PP
   582                          ;
   583                          ;-----------------------------------------------------------------------------
   584                           OneWire_wCRC16:
   585                          _OneWire_wCRC16:
   586                              RAM_PROLOGUE RAM_USE_CLASS_4
   587                              RAM_SETPAGE_CUR >OneWire_wCRC16Value
   588                              
   589                              push  A                                      ; Save the bits to shift
   590                              mov   X,08h                                  ; Set up to shift one byte
   591                          .CRC16_loop:
   592                              xor   A,[OneWire_wCRC16Value+1]              ; Determine feedback
   593                              rrc   A                                      ; Move it into CF
   594                              jnc   .CRC16_FB_zero                         ; If feedback is 0, no XOR of the byte needed
   595                              xor   [OneWire_wCRC16Value+0],40h            ; XOR the CRC HI byte
   596                              xor   [OneWire_wCRC16Value+1],02h            ; XOR the CRC LO byte
   597                          .CRC16_FB_zero:
   598                              rrc   [OneWire_wCRC16Value+0]                ; Rotate CF into the CRC HI byte
   599                              rrc   [OneWire_wCRC16Value+1]                ; Rotate CF into the CRC LO byte
   600                              pop   A                                      ; Restore the remaining bits
   601                              rrc   A                                      ; Rotate for the next bit
   602                              push  A                                      ; Save the remaining bits
   603                              dec   X
   604                              jnz   .CRC16_loop                            ; Loop until whole input byte is shifted
   605                              pop   A                                      ; Clean up stack
   606                              mov   X,[OneWire_wCRC16Value+0]              ; Load computed CRC HI byte into X
   607                              mov   A,[OneWire_wCRC16Value+1]              ; Load computed CRC LO byte into A
   608                          
   609                              RAM_EPILOGUE RAM_USE_CLASS_4
   610                              ret
   611                          .ENDSECTION
   612                          ENDIF
   613                          
   614                          IF (OneWire_SEARCH_ENABLE)
   615                          .SECTION
   616                          ;-----------------------------------------------------------------------------
   617                          ;  FUNCTION NAME: OneWire_GetROM
   618                          ;
   619                          ;  DESCRIPTION:
   620                          ;     Takes the RAM defined for holding a 64-bit 1-Wire ROM number and
   621                          ;     passes it via a pointer in A and X.
   622                          ;-----------------------------------------------------------------------------
   623                          ;
   624                          ;  ARGUMENTS:
   625                          ;     A:X - contains pointer
   626                          ;       X - contains LSB of the pointer to the RAM buffer
   627                          ;       A - contains MSB or page of the pointer to the RAM buffer
   628                          ;
   629                          ;  RAM BUFFER CONTENTS:
   630                          ;     OneWire_ROM = ROM number of 1-Wire device
   631                          ;
   632                          ;  RETURNS:
   633                          ;     none.
   634                          ;
   635                          ;  SIDE EFFECTS:
   636                          ;    The A and X registers may be modified by this or future implementations
   637                          ;    of this function.  The same is true for all RAM page pointer registers in
   638                          ;    the Large Memory Model.  When necessary, it is the calling function's
   639                          ;    responsibility to perserve their values across calls to fastcall16
   640                          ;    functions.  Currently only the page pointer registers listed below are modified:
   641                          ;     CUR_PP
   642                          ;     IDX_PP
   643                          ;-----------------------------------------------------------------------------
   644  71C3                     OneWire_GetROM:
   645  71C3                    _OneWire_GetROM:
   646                              RAM_PROLOGUE RAM_USE_CLASS_4
   647                              RAM_PROLOGUE RAM_USE_CLASS_3
   648  71C3  60 D3                 RAM_SETPAGE_IDX A
   649  71C5  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   650                              
   651  71C8  51 5C                 mov    A,[OneWire_ROM+0]
   652  71CA  54 00                 mov    [X+0],A
   653  71CC  51 5D                 mov    A,[OneWire_ROM+1]
   654  71CE  54 01                 mov    [X+1],A
   655  71D0  51 5E                 mov    A,[OneWire_ROM+2]
   656  71D2  54 02                 mov    [X+2],A
   657  71D4  51 5F                 mov    A,[OneWire_ROM+3]
   658  71D6  54 03                 mov    [X+3],A
   659  71D8  51 60                 mov    A,[OneWire_ROM+4]
   660  71DA  54 04                 mov    [X+4],A
   661  71DC  51 61                 mov    A,[OneWire_ROM+5]
   662  71DE  54 05                 mov    [X+5],A
   663  71E0  51 62                 mov    A,[OneWire_ROM+6]
   664  71E2  54 06                 mov    [X+6],A
   665  71E4  51 63                 mov    A,[OneWire_ROM+7]
   666  71E6  54 07                 mov    [X+7],A
   667                              
   668  71E8  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   669                              RAM_EPILOGUE RAM_USE_CLASS_4
   670  71EC  7F                    ret
   671                          .ENDSECTION
   672                          
   673                          
   674                          .SECTION
   675                          ;-----------------------------------------------------------------------------
   676                          ;  FUNCTION NAME: OneWire_SetROM
   677                          ;
   678                          ;  DESCRIPTION:
   679                          ;     Takes the array passed via a pointer in A and X and puts it
   680                          ;     into the RAM defined for holding a 64-bit 1-Wire ROM number.
   681                          ;-----------------------------------------------------------------------------
   682                          ;  ARGUMENTS:
   683                          ;     A:X - contains pointer
   684                          ;       X - contains LSB of the pointer to the RAM buffer
   685                          ;       A - contains MSB or page of the pointer to the RAM buffer
   686                          ;
   687                          ;  RAM BUFFER CONTENTS:
   688                          ;     OneWire_ROM = ROM number of 1-Wire device
   689                          ;
   690                          ;  RETURNS:
   691                          ;     none.
   692                          ;
   693                          ;  SIDE EFFECTS:
   694                          ;    The A and X registers may be modified by this or future implementations
   695                          ;    of this function.  The same is true for all RAM page pointer registers in
   696                          ;    the Large Memory Model.  When necessary, it is the calling function's
   697                          ;    responsibility to preserve their values across calls to fastcall16
   698                          ;    functions.  Currently only the page pointer registers listed below are modified:
   699                          ;     CUR_PP
   700                          ;     IDX_PP
   701                          ;-----------------------------------------------------------------------------
   702  71ED                     OneWire_SetROM:
   703  71ED                    _OneWire_SetROM:
   704                              RAM_PROLOGUE RAM_USE_CLASS_4
   705                              RAM_PROLOGUE RAM_USE_CLASS_3
   706  71ED  60 D3                 RAM_SETPAGE_IDX A
   707  71EF  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   708                              
   709  71F2  52 00                 mov    A,[X+0]
   710  71F4  53 5C                 mov    [OneWire_ROM+0], A
   711  71F6  52 01                 mov    A,[X+1]
   712  71F8  53 5D                 mov    [OneWire_ROM+1], A
   713  71FA  52 02                 mov    A,[X+2]
   714  71FC  53 5E                 mov    [OneWire_ROM+2], A
   715  71FE  52 03                 mov    A,[X+3]
   716  7200  53 5F                 mov    [OneWire_ROM+3], A
   717  7202  52 04                 mov    A,[X+4]
   718  7204  53 60                 mov    [OneWire_ROM+4], A
   719  7206  52 05                 mov    A,[X+5]
   720  7208  53 61                 mov    [OneWire_ROM+5], A
   721  720A  52 06                 mov    A,[X+6]
   722  720C  53 62                 mov    [OneWire_ROM+6], A
   723  720E  52 07                 mov    A,[X+7]
   724  7210  53 63                 mov    [OneWire_ROM+7], A
   725                              
   726  7212  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   727                              RAM_EPILOGUE RAM_USE_CLASS_4
   728  7216  7F                    ret
   729                          .ENDSECTION
   730                          
   731                          .SECTION
   732                          ;-----------------------------------------------------------------------------
   733                          ;  FUNCTION NAME: OneWire_fFindFirst
   734                          ;
   735                          ;  DESCRIPTION:
   736                          ;     Find the first device on the 1-Wire bus.
   737                          ;-----------------------------------------------------------------------------
   738                          ;  ARGUMENTS:
   739                          ;     none.
   740                          ;
   741                          ;  RAM BUFFER CONTENTS:
   742                          ;     OneWire_ROM = ROM number of 1-Wire device
   743                          ;
   744                          ;  RETURNS:
   745                          ;     A = 01h if device found
   746                          ;     A = 00h if device not found
   747                          ;
   748                          ;  SIDE EFFECTS:
   749                          ;    The A and X registers may be modified by this or future implementations
   750                          ;    of this function.  The same is true for all RAM page pointer registers in
   751                          ;    the Large Memory Model.  When necessary, it is the calling function's
   752                          ;    responsibility to preserve their values across calls to fastcall16
   753                          ;    functions.  Currently only the page pointer registers listed below are modified:
   754                          ;    CUR_PP
   755                          ;    IDX_PP
   756                          ;-----------------------------------------------------------------------------
   757  7217                     OneWire_fFindFirst:
   758  7217                    _OneWire_fFindFirst:
   759                              RAM_PROLOGUE RAM_USE_CLASS_4
   760                              
   761  7217  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   762  721A  55 64  00             mov   [OneWire_LastDiscrepancy], 00h
   763  721D  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   764  7220  55 66  00             mov   [OneWire_LastDeviceFlag], 00h
   765  7223  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   766  7226  55 65  00             mov   [OneWire_LastFamilyDiscrepancy], 00h
   767  7229  9004                  call  OneWire_Search
   768                          
   769                              RAM_EPILOGUE RAM_USE_CLASS_4
   770  722B  7F                    ret
   771                          .ENDSECTION
   772                          
   773                          .SECTION
   774                          ;-----------------------------------------------------------------------------
   775                          ;  FUNCTION NAME: OneWire_fFindNext
   776                          ;
   777                          ;  DESCRIPTION:
   778                          ;     Find the first device on the 1-Wire bus.
   779                          ;-----------------------------------------------------------------------------
   780                          ;
   781                          ;  ARGUMENTS:
   782                          ;     none.
   783                          ;
   784                          ;  RAM BUFFER CONTENTS:
   785                          ;     OneWire_ROM = ROM number of 1-Wire device
   786                          ;
   787                          ;  RETURNS:
   788                          ;     A = 01h if device found
   789                          ;     A = 00h if device not found, end of search
   790                          ;
   791                          ;  SIDE EFFECTS:
   792                          ;    The A and X registers may be modified by this or future implementations
   793                          ;    of this function.  The same is true for all RAM page pointer registers in
   794                          ;    the Large Memory Model.  When necessary, it is the calling function's
   795                          ;    responsibility to preserve their values across calls to fastcall16
   796                          ;    functions.  Currently only the page pointer registers listed below are modified:
   797                          ;    CUR_PP
   798                          ;    IDX_PP
   799                          ;-----------------------------------------------------------------------------
   800  722C                     OneWire_fFindNext:
   801  722C                    _OneWire_fFindNext:
   802                              RAM_PROLOGUE RAM_USE_CLASS_4
   803                              
   804  722C  9001                  call  OneWire_Search
   805                              
   806                              RAM_EPILOGUE RAM_USE_CLASS_4
   807  722E  7F                    ret
   808                          .ENDSECTION
   809                          
   810                          .SECTION
   811                          ;-----------------------------------------------------------------------------
   812                          ;  FUNCTION NAME: OneWire_Search
   813                          ;
   814                          ;  DESCRIPTION:
   815                          ;     Perform the 1-Wire search algorithm with the current search state.
   816                          ;-----------------------------------------------------------------------------
   817                          ;  ARGUMENTS:
   818                          ;     none.
   819                          ;
   820                          ;  RAM BUFFER CONTENTS:
   821                          ;     OneWire_ROM = ROM number of 1-Wire device
   822                          ;
   823                          ;  RETURNS:
   824                          ;     A = 01h if device found
   825                          ;     A = 00h if device not found, end of search
   826                          ;
   827                          ;  SIDE EFFECTS:
   828                          ;    The A and X registers may be modified by this or future implementations
   829                          ;    of this function.  The same is true for all RAM page pointer registers in
   830                          ;    the Large Memory Model.  When necessary, it is the calling function's
   831                          ;    responsibility to perserve their values across calls to fastcall16
   832                          ;    functions. Currently only the page pointer registers listed below are modified:
   833                          ;    CUR_PP
   834                          ;    IDX_PP
   835                          ;-----------------------------------------------------------------------------
   836  0000                    ID_BIT_NUMBER:              equ   0
   837  0001                    LAST_ZERO:                  equ   1
   838  0002                    ROM_BYTE_NUMBER:            equ   2
   839  0003                    SEARCH_RESULT:              equ   3
   840  0004                    ID_BIT:                     equ   4
   841  0005                    CMP_ID_BIT:                 equ   5
   842  0006                    ROM_BYTE_MASK:              equ   6
   843  0007                    SEARCH_DIRECTION:           equ   7
   844                          
   845  722F                     OneWire_Search:
   846  722F                    _OneWire_Search:
   847                              RAM_PROLOGUE RAM_USE_CLASS_4
   848                              RAM_PROLOGUE RAM_USE_CLASS_3
   849                              
   850  722F  4F                    mov   X,SP                                   ; Get location of stack
   851  7230  38 08                 add   SP,08h                                 ; Make locations for local variables
   852  7232  62 D3 07              RAM_SETPAGE_IDX2STK
   853  7235  56 00 01              mov   [X+ID_BIT_NUMBER],01h                  ; Initialize for search
   854  7238  56 01 00              mov   [X+LAST_ZERO],00h
   855  723B  56 02 00              mov   [X+ROM_BYTE_NUMBER],00h
   856  723E  56 06 01              mov   [X+ROM_BYTE_MASK],01h
   857  7241  56 03 00              mov   [X+SEARCH_RESULT],00h
   858  7244  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   859  7247  55 5B  00             mov   [OneWire_bCRC8Value],00h
   860  724A  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   861  724D  51 66                 mov   A,[OneWire_LastDeviceFlag]
   862  724F  B0D4                  jnz   .check_result
   863  7251  9EEA                  call  OneWire_fReset
   864  7253  A0DF                  jz    .search_return_false
   865                          
   866  7255  50 F0                 mov   A,F0h                                  ; Search command
   867  7257  10                    push  X
   868  7258  9F19                  call  OneWire_WriteByte
   869  725A  20                    pop   X
   870  725B                    .search_loop:
   871  725B  9F05                  call  OneWire_bReadBit
   872  725D  54 04                 mov   [X+ID_BIT],A
   873  725F  9F01                  call  OneWire_bReadBit
   874  7261  54 05                 mov   [X+CMP_ID_BIT],A
   875  7263  21 01                 and   A,01h
   876  7265  23 04                 and   A,[X+ID_BIT]
   877  7267  B09D                  jnz   .check_search
   878                          
   879  7269                    .search_else_1:
   880  7269  52 04                 mov   A,[X+ID_BIT]                           ; If ID_BIT != CMP_ID_BIT
   881  726B  3B 05                 cmp   A,[X+CMP_ID_BIT]
   882  726D  A007                  jz    .search_else_2
   883  726F  52 04                 mov   A,[X+ID_BIT]
   884  7271  54 07                 mov   [X+SEARCH_DIRECTION],A
   885  7273  8048                  jmp   .search_set_or_clear
   886  7275                    .search_else_2:
   887  7275  52 00                 mov   A,[X+ID_BIT_NUMBER]
   888  7277  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   889  727A  3A 64                 cmp   A,[OneWire_LastDiscrepancy]
   890  727C  D01B                  jnc   .search_else_3
   891  727E  10                    push  X
   892  727F  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   893  7281  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   894  7284  52 5C                 mov   A,[X+OneWire_ROM]
   895  7286  62 D3 07              RAM_SETPAGE_IDX2STK
   896  7289  20                    pop   X
   897  728A  23 06                 and   A,[X+ROM_BYTE_MASK]
   898  728C  B006                  jnz   .search_dir_1
   899  728E  56 07 00              mov   [X+SEARCH_DIRECTION],00h
   900  7291  8017                  jmp   .search_is_dir_0
   901  7293                    .search_dir_1:
   902  7293  56 07 01              mov   [X+SEARCH_DIRECTION],01h
   903  7296  8012                  jmp   .search_is_dir_0
   904  7298                    .search_else_3:
   905  7298  52 00                 mov   A,[X+ID_BIT_NUMBER]
   906  729A  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   907  729D  3A 64                 cmp   A,[OneWire_LastDiscrepancy]            ;SEARCH_DIRECTION = (ID_BIT_NUMBER == LastDiscrepan
                                cy search_direction)
   908  729F  B006                  jnz   .search_dir_1_2
   909  72A1  56 07 01              mov   [X+SEARCH_DIRECTION],01h
   910  72A4  8004                  jmp   .search_is_dir_0
   911  72A6                    .search_dir_1_2:
   912  72A6  56 07 00              mov   [X+SEARCH_DIRECTION],00h
   913  72A9                    .search_is_dir_0:
   914  72A9  52 07                 mov   A,[X+SEARCH_DIRECTION]
   915  72AB  B010                  jnz   .search_set_or_clear
   916  72AD  52 00                 mov   A,[X+ID_BIT_NUMBER]
   917  72AF  54 01                 mov   [X+LAST_ZERO],A
   918  72B1  39 09                 cmp   A,09h
   919  72B3  D008                  jnc   .search_set_or_clear
   920  72B5  52 01                 mov   A,[X+LAST_ZERO]
   921  72B7  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   922  72BA  53 65                 mov   [OneWire_LastFamilyDiscrepancy],A
   923  72BC                    .search_set_or_clear:
   924  72BC  3D 07 01              cmp   [X+SEARCH_DIRECTION],01h
   925  72BF  B011                  jnz   .search_else_4
   926  72C1  52 06                 mov   A,[X+ROM_BYTE_MASK]
   927  72C3  10                    push  X
   928  72C4  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   929  72C6  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   930  72C9  2D 5C                 or    [X+OneWire_ROM],A
   931  72CB  62 D3 07              RAM_SETPAGE_IDX2STK
   932  72CE  20                    pop   X
   933  72CF  8010                  jmp   .search_write_direction
   934  72D1                    .search_else_4:
   935  72D1  52 06                 mov   A,[X+ROM_BYTE_MASK]
   936  72D3  10                    push  X
   937  72D4  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   938  72D6  73                    cpl   A
   939  72D7  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   940  72DA  25 5C                 and   [X+OneWire_ROM],A
   941  72DC  62 D3 07              RAM_SETPAGE_IDX2STK
   942  72DF  20                    pop   X
   943  72E0                    .search_write_direction:
   944  72E0  52 07                 mov   A,[X+SEARCH_DIRECTION]
   945  72E2  9E72                  call  OneWire_WriteBit
   946  72E4  77 00                 inc   [X+ID_BIT_NUMBER]
   947  72E6  66 06                 asl   [X+ROM_BYTE_MASK]
   948  72E8  3D 06 00              cmp   [X+ROM_BYTE_MASK],00h
   949  72EB  B014                  jnz   .check_if_loop
   950  72ED  10                    push  X
   951  72EE  59 02                 mov   X,[X+ROM_BYTE_NUMBER]
   952  72F0  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
   953  72F3  52 5C                 mov   A,[X+OneWire_ROM]
   954  72F5  62 D3 07              RAM_SETPAGE_IDX2STK
   955  72F8  9EAF                  call  OneWire_bCRC8
   956                              RAM_PROLOGUE RAM_USE_CLASS_4
   957  72FA  20                    pop   X
   958  72FB  77 02                 inc   [X+ROM_BYTE_NUMBER]
   959  72FD  56 06 01              mov   [X+ROM_BYTE_MASK],01h
   960  7300                    .check_if_loop:
   961  7300  3D 02 08              cmp   [X+ROM_BYTE_NUMBER],08h
   962  7303  CF57                  jc    .search_loop
   963  7305                    .check_search:
   964  7305  3D 00 41              cmp   [X+ID_BIT_NUMBER],41h
   965  7308  C01B                  jc    .check_result
   966  730A  62 D0 00              RAM_SETPAGE_CUR >OneWire_bCRC8Value
   967  730D  3C 5B  00             cmp   [OneWire_bCRC8Value],00h
   968  7310  B013                  jnz   .check_result
   969  7312  52 01                 mov   A,[X+LAST_ZERO]
   970  7314  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   971  7317  53 64                 mov   [OneWire_LastDiscrepancy],A
   972  7319  B007                  jnz   .search_not_last
   973  731B  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   974  731E  55 66  01             mov   [OneWire_LastDeviceFlag],01h
   975  7321                    .search_not_last:
   976  7321  56 03 01              mov   [X+SEARCH_RESULT],01h
   977                          ; If no device found then reset counter so next search will be like a first
   978  7324                    .check_result:
   979  7324  52 03                 mov   A,[X+SEARCH_RESULT]
   980  7326  A00C                  jz    .search_return_false
   981  7328  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
   982  732B  51 5C                 mov   A,[OneWire_ROM+0]
   983  732D  A005                  jz    .search_return_false
   984  732F                    .search_return_true:
   985  732F  50 01                 mov   A,01h
   986  7331  8015                  jmp   .search_clean_up
   987  7333                    .search_return_false:
   988  7333  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
   989  7336  55 64  00             mov   [OneWire_LastDiscrepancy],00h
   990  7339  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
   991  733C  55 66  00             mov   [OneWire_LastDeviceFlag],00h
   992  733F  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
   993  7342  55 65  00             mov   [OneWire_LastFamilyDiscrepancy],00h
   994  7345  50 00                 mov   A,00h
   995  7347                    .search_clean_up:
   996  7347  38 F8                 add   SP,-08h                                ; Restore SP
   997                          
   998  7349  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
   999                              RAM_EPILOGUE RAM_USE_CLASS_4
  1000  734D  7F                    ret
  1001                          .ENDSECTION
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: OneWire_fVerify
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Verify the device with the ROM number in OneWire_ROM is present.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;  ARGUMENTS:
  1011                          ;     none.
  1012                          ;
  1013                          ;  RAM BUFFER CONTENTS:
  1014                          ;     OneWire_ROM = ROM number of 1-Wire device
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     A = 01h if device found
  1018                          ;     A = 00h if device not found
  1019                          ;
  1020                          ;  SIDE EFFECTS:
  1021                          ;    The A and X registers may be modified by this or future implementations
  1022                          ;    of this function.  The same is true for all RAM page pointer registers in
  1023                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1024                          ;    responsibility to perserve their values across calls to fastcall16
  1025                          ;    functions. Currently only the page pointer registers listed below are modified:
  1026                          ;    CUR_PP, IDX_PP
  1027                          ;-----------------------------------------------------------------------------
  1028  0000                    ROM_BACKUP:                 equ   0
  1029  0008                    LD_BACKUP:                  equ   8
  1030  0009                    LDF_BACKUP:                 equ   9
  1031  000A                    LFD_BACKUP:                 equ   0x0A
  1032                          
  1033  734E                     OneWire_fVerify:
  1034  734E                    _OneWire_fVerify:
  1035                              RAM_PROLOGUE RAM_USE_CLASS_4
  1036                              RAM_PROLOGUE RAM_USE_CLASS_3
  1037                              
  1038  734E  4F                    mov   X, SP                                  ; Get location of stack
  1039  734F  38 0B                 add   SP, 0Bh                                ; Make locations for local variables
  1040                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
  1041  7351  5D D1                 mov   A, reg[STK_PP]                         ; Set A to right page to back up ROM to stack
  1042                          ELSE
  1043                              mov   A, 00h
  1044                          ENDIF
  1045  7353  9E6E                  call  OneWire_GetROM
  1046                              RAM_PROLOGUE RAM_USE_CLASS_4
  1047                              RAM_PROLOGUE RAM_USE_CLASS_3
  1048  7355  62 D3 07              RAM_SETPAGE_IDX2STK
  1049  7358  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1050  735B  51 64                 mov   A,[OneWire_LastDiscrepancy]
  1051  735D  54 08                 mov   [X+LD_BACKUP],A
  1052  735F  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1053  7362  51 66                 mov   A,[OneWire_LastDeviceFlag]
  1054  7364  54 09                 mov   [X+LDF_BACKUP],A
  1055  7366  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1056  7369  51 65                 mov   A,[OneWire_LastFamilyDiscrepancy]
  1057  736B  54 0A                 mov   [X+LFD_BACKUP],A
  1058  736D  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1059  7370  55 64  40             mov   [OneWire_LastDiscrepancy],40h
  1060  7373  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1061  7376  55 66  00             mov   [OneWire_LastDeviceFlag],00h
  1062  7379  10                    push  X                                      ; Search does not preserve X
  1063  737A  9EB3                  call  OneWire_Search
  1064  737C  20                    pop   X
  1065  737D  08                    push  A                                      ; Save result
  1066  737E  70 BF                 RAM_X_POINTS_TO_INDEXPAGE
  1067  7380  A03B                  jz    .Verify_End
  1068  7382  62 D3 07              RAM_SETPAGE_IDX2STK
  1069  7385  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
  1070  7388  51 5C                 mov   A,[OneWire_ROM+0]
  1071  738A  3B 00                 cmp   A,[X+ROM_BACKUP]
  1072  738C  B02B                  jnz   .Verify_Fail
  1073  738E  51 5D                 mov   A,[OneWire_ROM+1]
  1074  7390  3B 01                 cmp   A,[X+ROM_BACKUP+1]
  1075  7392  B025                  jnz   .Verify_Fail
  1076  7394  51 5E                 mov   A,[OneWire_ROM+2]
  1077  7396  3B 02                 cmp   A,[X+ROM_BACKUP+2]
  1078  7398  B01F                  jnz   .Verify_Fail
  1079  739A  51 5F                 mov   A,[OneWire_ROM+3]
  1080  739C  3B 03                 cmp   A,[X+ROM_BACKUP+3]
  1081  739E  B019                  jnz   .Verify_Fail
  1082  73A0  51 60                 mov   A,[OneWire_ROM+4]
  1083  73A2  3B 04                 cmp   A,[X+ROM_BACKUP+4]
  1084  73A4  B013                  jnz   .Verify_Fail
  1085  73A6  51 61                 mov   A,[OneWire_ROM+5]
  1086  73A8  3B 05                 cmp   A,[X+ROM_BACKUP+5]
  1087  73AA  B00D                  jnz   .Verify_Fail
  1088  73AC  51 62                 mov   A,[OneWire_ROM+6]
  1089  73AE  3B 06                 cmp   A,[X+ROM_BACKUP+6]
  1090  73B0  B007                  jnz   .Verify_Fail
  1091  73B2  51 63                 mov   A,[OneWire_ROM+7]
  1092  73B4  3B 07                 cmp   A,[X+ROM_BACKUP+7]
  1093  73B6  A005                  jz    .Verify_End
  1094  73B8                    .Verify_Fail:
  1095  73B8  18                    pop   A                                      ; Replace result
  1096  73B9  50 00                 mov   A,00h
  1097  73BB  08                    push  A
  1098  73BC                    .Verify_End:
  1099                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
  1100  73BC  5D D1                 mov   A, reg[STK_PP]                         ; Set A to right page to recover ROM from stack
  1101                          ELSE
  1102                              mov   A, 00h
  1103                          ENDIF
  1104  73BE  9E2D                  call  OneWire_SetROM
  1105  73C0  70 BF                 RAM_X_POINTS_TO_INDEXPAGE
  1106  73C2  62 D3 07              RAM_SETPAGE_IDX2STK
  1107  73C5  52 08                 mov   A, [X+LD_BACKUP]
  1108  73C7  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1109  73CA  53 64                 mov   [OneWire_LastDiscrepancy], A
  1110  73CC  52 09                 mov   A, [X+LDF_BACKUP]
  1111  73CE  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1112  73D1  53 66                 mov   [OneWire_LastDeviceFlag], A
  1113  73D3  52 0A                 mov   A, [X+LFD_BACKUP]
  1114  73D5  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1115  73D8  53 65                 mov   [OneWire_LastFamilyDiscrepancy], A
  1116  73DA  18                    pop   A                                      ; Restore result
  1117  73DB  38 F5                 add   SP, -0Bh                               ; Restore SP
  1118                          
  1119  73DD  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
  1120                              RAM_EPILOGUE RAM_USE_CLASS_4
  1121  73E1  7F                    ret
  1122                          .ENDSECTION
  1123                          
  1124                          .SECTION
  1125                          ;-----------------------------------------------------------------------------
  1126                          ;  FUNCTION NAME: OneWire_FamilyTargetSetup
  1127                          ;
  1128                          ;  DESCRIPTION:
  1129                          ;     Setup the search to find the device type family code on the next call
  1130                          ;     to OneWire_Next().
  1131                          ;-----------------------------------------------------------------------------
  1132                          ;  ARGUMENTS:
  1133                          ;     A contains family code.
  1134                          ;
  1135                          ;  RAM BUFFER CONTENTS:
  1136                          ;     OneWire_ROM = ROM number of 1-Wire device
  1137                          ;
  1138                          ;  RETURNS:
  1139                          ;     none.
  1140                          ;
  1141                          ;  SIDE EFFECTS:
  1142                          ;    The A and X registers may be modified by this or future implementations
  1143                          ;    of this function.  The same is true for all RAM page pointer registers in
  1144                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1145                          ;    responsibility to preserve their values across calls to fastcall16
  1146                          ;    functions.  Currently only the page pointer registers listed below are modified:
  1147                          ;    CUR_PP
  1148                          ;    IDX_PP
  1149                          ;-----------------------------------------------------------------------------
  1150  73E2                     OneWire_FamilyTargetSetup:
  1151  73E2                    _OneWire_FamilyTargetSetup:
  1152                              RAM_PROLOGUE RAM_USE_CLASS_4
  1153                              RAM_PROLOGUE RAM_USE_CLASS_3
  1154  73E2  62 D0 00              RAM_SETPAGE_CUR >OneWire_ROM
  1155  73E5  62 D3 00              RAM_SETPAGE_IDX >OneWire_ROM
  1156                              
  1157  73E8  53 5C                 mov   [OneWire_ROM+0], A
  1158  73EA  10                    push  X
  1159  73EB  57 07                 mov   X, 07h
  1160  73ED                    .loop:
  1161  73ED  56 5C  00             mov   [X+OneWire_ROM], 00h
  1162  73F0  79                    dec   X
  1163  73F1  BFFB                  jnz   .loop
  1164  73F3  20                    pop   X
  1165  73F4  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1166  73F7  55 64  40             mov   [OneWire_LastDiscrepancy], 40h
  1167  73FA  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1168  73FD  55 65  00             mov   [OneWire_LastFamilyDiscrepancy], 00h
  1169  7400  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1170  7403  55 66  00             mov   [OneWire_LastDeviceFlag], 00h
  1171                              
  1172  7406  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_3
  1173                              RAM_EPILOGUE RAM_USE_CLASS_4
  1174  740A  7F                    ret
  1175                          .ENDSECTION
  1176                          
  1177                          .SECTION
  1178                          ;-----------------------------------------------------------------------------
  1179                          ;  FUNCTION NAME: OneWire_FamilySkipSetup
  1180                          ;
  1181                          ;  DESCRIPTION:
  1182                          ;     Setup the search to skip the current device type on the next call
  1183                          ;     to OneWire_fFindNext().
  1184                          ;-----------------------------------------------------------------------------
  1185                          ;  ARGUMENTS:
  1186                          ;     None.
  1187                          ;
  1188                          ;  RAM BUFFER CONTENTS:
  1189                          ;     OneWire_ROM = ROM number of 1-Wire device
  1190                          ;
  1191                          ;  RETURNS:
  1192                          ;     none.
  1193                          ;
  1194                          ;  SIDE EFFECTS:
  1195                          ;    The A and X registers may be modified by this or future implementations
  1196                          ;    of this function.  The same is true for all RAM page pointer registers in
  1197                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1198                          ;    responsibility to preserve their values across calls to fastcall16
  1199                          ;    functions.  Currently only the page pointer registers listed below are modified:
  1200                          ;     CUR_PP
  1201                          ;-----------------------------------------------------------------------------
  1202  740B                     OneWire_FamilySkipSetup:
  1203  740B                    _OneWire_FamilySkipSetup:
  1204                              RAM_PROLOGUE RAM_USE_CLASS_4
  1205                              
  1206  740B  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastFamilyDiscrepancy
  1207  740E  51 65                 mov   A,[OneWire_LastFamilyDiscrepancy]
  1208  7410  55 65  00             mov   [OneWire_LastFamilyDiscrepancy],00h
  1209  7413  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDiscrepancy
  1210  7416  53 64                 mov   [OneWire_LastDiscrepancy],A
  1211  7418  B007                  jnz   .EndOfList
  1212  741A  62 D0 00              RAM_SETPAGE_CUR >OneWire_LastDeviceFlag
  1213  741D  55 66  01             mov   [OneWire_LastDeviceFlag],01h
  1214  7420                    .EndOfList:
  1215                          
  1216                              RAM_EPILOGUE RAM_USE_CLASS_4
  1217  7420  7F                    ret
  1218                          .ENDSECTION
  1219                          ENDIF
  1220                          
  1221                          .SECTION
  1222                          ;-----------------------------------------------------------------------------
  1223                          ;  FUNCTION NAME: OneWire_SendTxDataWait
  1224                          ;
  1225                          ;  DESCRIPTION:
  1226                          ;     Initiates an XCVR data transfer and waits for it to complete.
  1227                          ;
  1228                          ;-----------------------------------------------------------------------------
  1229                          ;  ARGUMENTS:
  1230                          ;     BYTE  bTxData - data to transmit.
  1231                          ;        Passed in Accumulator.
  1232                          ;
  1233                          ;  RETURNS:
  1234                          ;     none.
  1235                          ;
  1236                          ;  SIDE EFFECTS:
  1237                          ;    The A and X registers may be modified by this or future implementations
  1238                          ;    of this function.  The same is true for all RAM page pointer registers in
  1239                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1240                          ;    responsibility to preserve their values across calls to fastcall16
  1241                          ;    functions.
  1242                          ;
  1243                          ;  THEORY of OPERATION:
  1244                          ;     Writes data to the TX buffer register.
  1245                          ;-----------------------------------------------------------------------------
  1246  7421                     OneWire_SendTxDataWait:
  1247  7421                    _OneWire_SendTxDataWait:
  1248                              RAM_PROLOGUE RAM_USE_CLASS_1
  1249                          
  1250  7421  60 59                 mov    reg[OneWire_XCVR_TX_BUFFER_REG], A
  1251  7423                    .WaitForTxComplete:
  1252  7423  5D 5B                 mov    A,  reg[OneWire_XCVR_CONTROL_REG]
  1253  7425  21 20                 and    A, SPIM_SPI_COMPLETE
  1254  7427  AFFB                  jz     .WaitForTxComplete
  1255                          
  1256                              RAM_EPILOGUE RAM_USE_CLASS_1
  1257  7429  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:16 2009
   OneWire_XCVR_RX_BUFFER_REG 005A              SPIM_SPI_COMPLETE 0020                    ONE_PATTERN 00FD  
                 RESET_PERIOD 00F9                  RESET_PATTERN 00F1      OneWire_BITCLK_PERIOD_REG 0055  
              _OneWire_GetROM 71C3             _OneWire_WriteByte 7173                _OneWire_SetROM 71ED  
              _OneWire_Search 722F                  ID_BIT_NUMBER 0000                _OneWire_fReset 713D  
                     MAC0_CL0 00EE                       MAC0_CL1 00EF                       MAC1_CL0 00AE  
                     MAC1_CL1 00AF                          MAC_X 00EC         OneWire_SendTxDataWait 7421  
                        MAC_Y 00ED                     ROM_BACKUP 0000          CONTROL_REG_START_BIT 0001  
                 ZERO_PATTERN 0001        OneWire_FamilySkipSetup 740B                  SEARCH_RESULT 0003  
                     INT_CLR2 00DC                       INT_MSK1 00E1        _OneWire_SendTxDataWait 7421  
             _OneWire_fVerify 734E                         MAC0_X 00EC                         MAC0_Y 00ED  
                       MAC1_X 00AC                         MAC1_Y 00AD                         HITECH 0002  
                       ID_BIT 0004                FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080  
                       IDX_PP 00D3                         CUR_PP 00D0            OneWire_BIT_INT_REG 00DF  
                       STK_PP 00D1            _OneWire_bCRC8Value 005B                    SPIM_MODE_0 0000  
        OneWire_SEARCH_ENABLE 0001               OneWire_bReadBit 7162               SEARCH_DIRECTION 0007  
                    LD_BACKUP 0008                      LAST_ZERO 0001        OneWire_PARASITE_ENABLE 0000  
     _OneWire_FamilySkipSetup 740B               OneWire_WriteBit 7156                   OneWire_Stop 7136  
     OneWire_OVERDRIVE_ENABLE 0000              _OneWire_bReadBit 7162              OneWire_ClearCRC8 71A2  
                ROM_BYTE_MASK 0006      SYSTEM_LARGE_MEMORY_MODEL 0001     OneWire_XCVR_TX_BUFFER_REG 0059  
               _OneWire_bCRC8 71A9         SYSTEM_MULTIPAGE_STACK 0000              _OneWire_WriteBit 7156  
           OneWire_fFindFirst 7217                 _OneWire_Start 7125                        MAC_CL0 00EE  
                      MAC_CL1 00EF               FLAG_PGMODE_MASK 00C0                        PRT0DM1 0001  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008                     BIT_PERIOD 000D             _OneWire_ClearCRC8 71A2  
    OneWire_FamilyTargetSetup 73E2                     CMP_ID_BIT 0005                    INIT_PERIOD 000F  
OneWire_LastFamilyDiscrepancy 0065        OneWire_LastDiscrepancy 0064                    OneWire_ROM 005C  
                   LDF_BACKUP 0009                OneWire_fVerify 734E                     LFD_BACKUP 000A  
               SPIM_LSB_FIRST 0080              OneWire_bReadByte 718E                  _OneWire_Stop 7136  
       OneWire_LastDeviceFlag 0066              OneWire_fFindNext 722C                 OneWire_GetROM 71C3  
     OneWire_XCVR_CONTROL_REG 005B                 OneWire_SetROM 71ED                 OneWire_Search 722F  
               OneWire_fReset 713D                  OneWire_bCRC8 71A9              SYSTEM_STACK_PAGE 0007  
            OneWire_WriteByte 7173                  OneWire_Start 7125     SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
         OneWire_CRC16_ENABLE 0000                ROM_BYTE_NUMBER 0002            _OneWire_fFindFirst 7217  
           OneWire_bCRC8Value 005B             _OneWire_bReadByte 718E     SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           _OneWire_fFindNext 722C     _OneWire_FamilyTargetSetup 73E2     OneWire_BITCLK_CONTROL_REG 0057  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:16 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWire.inc
     4                          ;;  Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the OneWire user module interface
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          
    13                          ;;*****************************************************************************
    14                          
    15                          ;--------------------------------
    16                          ;  Interrupt registers and masks
    17                          ;--------------------------------
    18  0040                    OneWire_BIT_INT_MASK:                   equ 0x40
    19  00DF                    OneWire_BIT_INT_REG:                    equ 0x0df
    20                          
    21                          IF (OneWire_BIT_INT_REG - INT_MSK1)
    22  00DC                    OneWire_BIT_INT_CLR:                    equ INT_CLR2
    23                          ELSE
    24                          OneWire_BIT_INT_CLR:                    equ INT_CLR1
    25                          ENDIF
    26                          
    27                          ;--------------------------------
    28                          ;  Parasite Power Pin selected
    29                          ;--------------------------------
    30  0001                    OneWire_OUT_PORT_DM1:                   equ PRT0DM1
    31  0001                    OneWire_OUT_PORT_MASK:                  equ 0x1
    32                          
    33                          ;---------------------------
    34                          ; One Wire constants and masks
    35                          ;---------------------------
    36  0000                    OneWire_CRC16_ENABLE:                   equ   0
    37  0001                    OneWire_SEARCH_ENABLE:                  equ   1
    38  0000                    OneWire_OVERDRIVE_ENABLE:               equ   0
    39  0000                    OneWire_PARASITE_ENABLE:                equ   0
    40                          
    41                          ;-----------------------------------------------
    42                          ;  Registers used by OneWire
    43                          ;-----------------------------------------------
    44  0054                    OneWire_BITCLK_FUNC_REG:    equ 54h              ;Function register
    45  0055                    OneWire_BITCLK_INPUT_REG:   equ 55h              ;Input register
    46  0056                    OneWire_BITCLK_OUTPUT_REG:  equ 56h              ;Output register
    47  0057                    OneWire_BITCLK_CONTROL_REG: equ 57h              ;Control register
    48  0054                    OneWire_BITCLK_COUNTER_REG: equ 54h              ;Counter register
    49  0055                    OneWire_BITCLK_PERIOD_REG:  equ 55h              ;Period register
    50  0056                    OneWire_BITCLK_COMPARE_REG: equ 56h              ;Compare register
    51  0058                    OneWire_XCVR_FUNC_REG:  equ 58h                  ;Function register
    52  0059                    OneWire_XCVR_INPUT_REG: equ 59h                  ;Input register
    53  005A                    OneWire_XCVR_OUTPUT_REG:    equ 5ah              ;Output register
    54  005B                    OneWire_XCVR_CONTROL_REG:   equ 5bh              ;Control register
    55  0058                    OneWire_XCVR_SHIFT_REG: equ 58h                  ;Counter register
    56  0059                    OneWire_XCVR_TX_BUFFER_REG: equ 59h              ;Period register
    57  005A                    OneWire_XCVR_RX_BUFFER_REG: equ 5ah              ;Compare register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: OneWireINT.asm
     4                          ;;   Version: 1.0, Updated on 2008/6/23 at 12:25:13
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: OneWire Interrupt Service Routine
     8                          ;;               for the 29/27/24/21xxx, LEDxx PSoC family of devices
     9                          ;;
    10                          ;;-----------------------------------------------------------------------------
    11                          ;;   Copyright (c) Cypress Semiconductor 2007. All Rights Reserved.
    12                          ;;*****************************************************************************
    13                          ;;*****************************************************************************
    14                          
    15                          include "m8c.inc"
    16                          include "OneWire.inc"
    17                          
    18                          
    19                          ;-----------------------------------------------
    20                          ;  Global Symbols
    21                          ;-----------------------------------------------
    22                          export  _OneWire_ISR
    23                          
    24                          AREA UserModules (ROM, REL)
    25                          
    26                          ;-----------------------------------------------------------------------------
    27                          ;  FUNCTION NAME: _OneWire_ISR
    28                          ;
    29                          ;  DESCRIPTION: With ParasitePower enabled this ISR sets TX pin to strong
    30                          ;               drive mode immediately after transmission of last data bit.
    31                          ;-----------------------------------------------------------------------------
    32                          
    33  742A                    _OneWire_ISR:
    34                          IF (OneWire_PARASITE_ENABLE)
    35                              M8C_SetBank1
    36                              and   REG[OneWire_OUT_PORT_DM1],~OneWire_OUT_PORT_MASK
    37                              M8C_SetBank0
    38                          ENDIF
    39  742A  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:16 2009
                  MAC0_CL0 00EE                    MAC0_CL1 00EF                    MAC1_CL0 00AE                    MAC1_CL1 00AF  
                     MAC_X 00EC                       MAC_Y 00ED                    INT_CLR2 00DC                    INT_MSK1 00E1  
                    MAC0_X 00EC                      MAC0_Y 00ED                      MAC1_X 00AC                      MAC1_Y 00AD  
       OneWire_BIT_INT_REG 00DF     OneWire_PARASITE_ENABLE 0000                     MAC_CL0 00EE                     MAC_CL1 00EF  
                   PRT0DM1 0001                _OneWire_ISR 742A  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:16 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       2 August 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C29566
    11                          ;
    12                          ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0000                    CPU_CLOCK:				equ	0h		;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
    24  0000                    CPU_CLOCK_JUST:			equ	0h		;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31  0000                    SLEEP_TIMER:			equ	0h		;Sleep Timer value
    32  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    33  0000                    SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
    34  0001                    SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
    35  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
    36  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    37  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    38  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    39  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    40  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    41  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    42  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    43                          
    44  0008                    POWER_SETTING:			equ	8h
    45  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    46  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    47  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    48  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    49  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    50  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    51  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    52  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    53  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    54  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    55                          
    56  0001                    COMM_RX_PRESENT:		equ	1		;1 = TRUE
    57  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    58                          
    59  0003                    CLOCK_DIV_VC1:			equ	3h	;VC1 clock divider
    60  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    61  0030                    CLOCK_DIV_VC1_JUST:		equ	30h	;VC1 clock divider justified
    62  0000                    CLOCK_DIV_VC2:			equ	0h	;VC2 clock divider
    63  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    64  0000                    CLOCK_DIV_VC2_JUST:		equ	0h	;VC2 clock divider justified
    65  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    66  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    67  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    68  0002                    CLOCK_DIV_VC3:			equ	2h	;VC3 clock divider
    69  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    70  0002                    CLOCK_DIV_VC3_JUST:		equ	2h	;VC3 clock divider justified
    71  0000                    ANALOG_BUFFER_PWR:		equ	0h	;Analog buffer power level
    72  0001                    ANALOG_BUFFER_PWR_MASK:	equ	1h	;Analog buffer power level mask
    73  0000                    ANALOG_BUFFER_PWR_JUST:	equ	0h	;Analog buffer power level justified
    74  0005                    ANALOG_POWER:			equ	5h	;Analog power control
    75  0007                    ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
    76  0005                    ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
    77  0000                    OP_AMP_BIAS:			equ	0h	;Op amp bias level
    78  0040                    OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
    79  0000                    OP_AMP_BIAS_JUST:		equ	0h	;Op amp bias level justified
    80  0000                    REF_MUX:				equ	0h	;Ref mux setting
    81  0038                    REF_MUX_MASK:			equ	38h	;Ref mux setting mask
    82  0000                    REF_MUX_JUST:			equ	0h	;Ref mux setting justified
    83  0000                    AGND_BYPASS:				equ	0h	;AGndBypass setting
    84  0040                    AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
    85  0000                    AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
    86  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    87  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    88  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    89  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    90  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    91  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    92                          ;
    93                          ; register initial values
    94                          ;
    95  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    96  0005                    PORT_0_GLOBAL_SELECT:	equ 5h	;Port 0 global select register (PRT0GS)
    97  0006                    PORT_0_DRIVE_0:			equ 6h	;Port 0 drive mode 0 register (PRT0DM0)
    98  00FB                    PORT_0_DRIVE_1:			equ fbh	;Port 0 drive mode 1 register (PRT0DM1)
    99  00F8                    PORT_0_DRIVE_2:			equ f8h	;Port 0 drive mode 2 register (PRT0DM2)
   100  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
   101  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
   102  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
   103  0044                    PORT_1_GLOBAL_SELECT:	equ 44h	;Port 1 global select register (PRT1GS)
   104  0040                    PORT_1_DRIVE_0:			equ 40h	;Port 1 drive mode 0 register (PRT1DM0)
   105  00BF                    PORT_1_DRIVE_1:			equ bfh	;Port 1 drive mode 1 register (PRT1DM1)
   106  00BB                    PORT_1_DRIVE_2:			equ bbh	;Port 1 drive mode 2 register (PRT1DM2)
   107  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
   108  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   109  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   110  0000                    PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
   111  0000                    PORT_2_DRIVE_0:			equ 0h	;Port 2 drive mode 0 register (PRT2DM0)
   112  00FF                    PORT_2_DRIVE_1:			equ ffh	;Port 2 drive mode 1 register (PRT2DM1)
   113  00FF                    PORT_2_DRIVE_2:			equ ffh	;Port 2 drive mode 2 register (PRT2DM2)
   114  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   115  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   116  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   117  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   118  0080                    PORT_3_DRIVE_0:			equ 80h	;Port 3 drive mode 0 register (PRT3DM0)
   119  007F                    PORT_3_DRIVE_1:			equ 7fh	;Port 3 drive mode 1 register (PRT3DM1)
   120  007F                    PORT_3_DRIVE_2:			equ 7fh	;Port 3 drive mode 2 register (PRT3DM2)
   121  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   122  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   123  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
   124  0000                    PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
   125  0005                    PORT_4_DRIVE_0:			equ 5h	;Port 4 drive mode 0 register (PRT4DM0)
   126  00FB                    PORT_4_DRIVE_1:			equ fbh	;Port 4 drive mode 1 register (PRT4DM1)
   127  00FF                    PORT_4_DRIVE_2:			equ ffh	;Port 4 drive mode 2 register (PRT4DM2)
   128  0000                    PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
   129  0000                    PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
   130  0000                    PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
   131  0000                    PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
   132  0000                    PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
   133  0000                    PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
   134  0000                    PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
   135  0000                    PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
   136  0000                    PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
   137  0000                    PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
   138  0000                    PORT_6_GLOBAL_SELECT:	equ 0h	;Port 6 global select register (PRT6GS)
   139  0000                    PORT_6_DRIVE_0:			equ 0h	;Port 6 drive mode 0 register (PRT6DM0)
   140  0000                    PORT_6_DRIVE_1:			equ 0h	;Port 6 drive mode 1 register (PRT6DM1)
   141  0000                    PORT_6_DRIVE_2:			equ 0h	;Port 6 drive mode 2 register (PRT6DM2)
   142  0000                    PORT_6_INTENABLE:		equ 0h	;Port 6 interrupt enable register (PRT6IE)
   143  0000                    PORT_6_INTCTRL_0:		equ 0h	;Port 6 interrupt control 0 register (PRT6IC0)
   144  0000                    PORT_6_INTCTRL_1:		equ 0h	;Port 6 interrupt control 1 register (PRT6IC1)
   145  0000                    PORT_7_GLOBAL_SELECT:	equ 0h	;Port 7 global select register (PRT7GS)
   146  0000                    PORT_7_DRIVE_0:			equ 0h	;Port 7 drive mode 0 register (PRT7DM0)
   147  0000                    PORT_7_DRIVE_1:			equ 0h	;Port 7 drive mode 1 register (PRT7DM1)
   148  0000                    PORT_7_DRIVE_2:			equ 0h	;Port 7 drive mode 2 register (PRT7DM2)
   149  0000                    PORT_7_INTENABLE:		equ 0h	;Port 7 interrupt enable register (PRT7IE)
   150  0000                    PORT_7_INTCTRL_0:		equ 0h	;Port 7 interrupt control 0 register (PRT7IC0)
   151  0000                    PORT_7_INTCTRL_1:		equ 0h	;Port 7 interrupt control 1 register (PRT7IC1)
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;==========================================================================
     4                          ;  PSoCConfig.asm
     5                          ;  @PSOC_VERSION
     6                          ;
     7                          ;  Version: 0.85
     8                          ;  Revised: June 22, 2004
     9                          ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;
    11                          ;  This file is generated by the Device Editor on Application Generation.
    12                          ;  It contains code which loads the configuration data table generated in
    13                          ;  the file PSoCConfigTBL.asm
    14                          ;
    15                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    16                          ;  Edits to this file will not be preserved.
    17                          ;==========================================================================
    18                          ;
    19                          include "m8c.inc"
    20                          include "memory.inc"
    21                          include "GlobalParams.inc"
    22                          
    23                          export LoadConfigInit
    24                          export _LoadConfigInit
    25                          export LoadConfig_onewire_gateway
    26                          export _LoadConfig_onewire_gateway
    27                          export Port_3_Data_SHADE
    28                          export _Port_3_Data_SHADE
    29                          
    30                          
    31                          export NO_SHADOW
    32                          export _NO_SHADOW
    33                          
    34  0010                    FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
    35  00FF                    END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
    36                          
    37                          AREA psoc_config(rom, rel)
    38                          
    39                          ;---------------------------------------------------------------------------
    40                          ; LoadConfigInit - Establish the start-up configuration (except for a few
    41                          ;                  parameters handled by boot code, like CPU speed). This
    42                          ;                  function can be called from user code, but typically it
    43                          ;                  is only called from boot.
    44                          ;
    45                          ;       INPUTS: None.
    46                          ;      RETURNS: Nothing.
    47                          ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
    48                          ;               In the large memory model currently only the page
    49                          ;               pointer registers listed below are modified.  This does
    50                          ;               not guarantee that in future implementations of this
    51                          ;               function other page pointer registers will not be
    52                          ;               modified.
    53                          ;          
    54                          ;               Page Pointer Registers Modified: 
    55                          ;               CUR_PP
    56                          ;
    57  7D8E                    _LoadConfigInit:
    58  7D8E                     LoadConfigInit:
    59                              RAM_PROLOGUE RAM_USE_CLASS_4
    60                              
    61  7D8E  55 4A  00         	mov		[Port_3_Data_SHADE], 0h
    62                          
    63  7D91  7C 0200           	lcall	LoadConfigTBL_onewire_gateway_Ordered
    64  7D94  7C 7D98           	lcall	LoadConfig_onewire_gateway
    65                          
    66                          
    67                              RAM_EPILOGUE RAM_USE_CLASS_4
    68  7D97  7F                    ret
    69                          
    70                          ;---------------------------------------------------------------------------
    71                          ; Load Configuration onewire_gateway
    72                          ;
    73                          ;    Load configuration registers for onewire_gateway.
    74                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
    75                          ;
    76                          ;       INPUTS: None.
    77                          ;      RETURNS: Nothing.
    78                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
    79                          ;               modified as may the Page Pointer registers!
    80                          ;               In the large memory model currently only the page
    81                          ;               pointer registers listed below are modified.  This does
    82                          ;               not guarantee that in future implementations of this
    83                          ;               function other page pointer registers will not be
    84                          ;               modified.
    85                          ;          
    86                          ;               Page Pointer Registers Modified: 
    87                          ;               CUR_PP
    88                          ;
    89  7D98                    _LoadConfig_onewire_gateway:
    90  7D98                     LoadConfig_onewire_gateway:
    91                              RAM_PROLOGUE RAM_USE_CLASS_4
    92                          
    93  7D98  10                	push	x
    94  7D99  70 EF                 M8C_SetBank0                    ; Force bank 0
    95  7D9B  50 00                 mov     a, 0                    ; Specify bank 0
    96  7D9D  67                    asr     a                       ; Store in carry flag
    97                                                              ; Load bank 0 table:
    98  7D9E  50 02                 mov     A, >LoadConfigTBL_onewire_gateway_Bank0
    99  7DA0  57 E9                 mov     X, <LoadConfigTBL_onewire_gateway_Bank0
   100  7DA2  7C 7DB3               lcall   LoadConfig              ; Load the bank 0 values
   101                          
   102  7DA5  50 01                 mov     a, 1                    ; Specify bank 1
   103  7DA7  67                    asr     a                       ; Store in carry flag
   104                                                              ; Load bank 1 table:
   105  7DA8  50 03                 mov     A, >LoadConfigTBL_onewire_gateway_Bank1
   106  7DAA  57 68                 mov     X, <LoadConfigTBL_onewire_gateway_Bank1
   107  7DAC  7C 7DB3               lcall   LoadConfig              ; Load the bank 1 values
   108                          
   109  7DAF  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   110  7DB1  20                	pop		x
   111                          
   112                              RAM_EPILOGUE RAM_USE_CLASS_4
   113  7DB2  7F                    ret
   114                          
   115                          
   116                          
   117                          
   118                          ;---------------------------------------------------------------------------
   119                          ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
   120                          ;              pairs. Terminate on address=0xFF.
   121                          ;
   122                          ;  INPUTS:  [A,X] points to the table to be loaded
   123                          ;           Flag Register Carry bit encodes the Register Bank
   124                          ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
   125                          ;
   126                          ;  RETURNS: nothing.
   127                          ;
   128                          ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
   129                          ;                X-3 Temporary store for register address
   130                          ;                X-2 LSB of config table address
   131                          ;                X-1 MSB of config table address
   132                          ;
   133  7DB3                    LoadConfig:
   134  7DB3  71 40                 RAM_PROLOGUE RAM_USE_CLASS_2
   135  7DB5  38 02                 add     SP, 2                   ; Set up local vars
   136  7DB7  10                    push    X                       ; Save config table address on stack
   137  7DB8  08                    push    A
   138  7DB9  4F                    mov     X, SP
   139  7DBA  56 FC 00              mov     [X-4], 0                ; Set default Destination to Bank 0
   140  7DBD  D004                  jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
   141  7DBF  56 FC 01              mov     [X-4], 1                ; No Carry: default to Bank 1
   142  7DC2                    .BankSelectSaved:
   143  7DC2  18                    pop     A
   144  7DC3  20                    pop     X
   145                          
   146  7DC4                    LoadConfigLp:
   147  7DC4  70 EF                 M8C_SetBank0                    ; Switch to bank 0
   148  7DC6  62 E3 00              M8C_ClearWDT                    ; Clear the watchdog for long inits
   149  7DC9  10                    push    X                       ; Preserve the config table address
   150  7DCA  08                    push    A
   151  7DCB  28                    romx                            ; Load register address from table
   152  7DCC  39 FF                 cmp     A, END_CONFIG_TABLE     ; End of table?
   153  7DCE  A01F                  jz      EndLoadConfig           ;   Yes, go wrap it up
   154  7DD0  4F                    mov     X, SP                   ;
   155  7DD1  48 FC 01              tst     [X-4], 1                ; Loading IO Bank 1?
   156  7DD4  A003                  jz      .IOBankNowSet           ;    No, Bank 0 is fine
   157  7DD6  71 10                 M8C_SetBank1                    ;   Yes, switch to Bank 1
   158  7DD8                    .IOBankNowSet:
   159  7DD8  54 FD                 mov     [X-3], A                ; Stash the register address
   160  7DDA  18                    pop     A                       ; Retrieve the table address
   161  7DDB  20                    pop     X
   162  7DDC  75                    inc     X                       ; Advance to the data byte
   163  7DDD  09 00                 adc     A, 0
   164  7DDF  10                    push    X                       ; Save the config table address again
   165  7DE0  08                    push    A
   166  7DE1  28                    romx                            ; load config data from the table
   167  7DE2  4F                    mov     X, SP                   ; retrieve the register address
   168  7DE3  59 FD                 mov     X, [X-3]
   169  7DE5  61 00                 mov     reg[X], A               ; Configure the register
   170  7DE7  18                    pop     A                       ; retrieve the table address
   171  7DE8  20                    pop     X
   172  7DE9  75                    inc     X                       ; advance to next table entry
   173  7DEA  09 00                 adc     A, 0
   174  7DEC  8FD7                  jmp     LoadConfigLp            ; loop to configure another register
   175  7DEE                    EndLoadConfig:
   176  7DEE  38 FC                 add     SP, -4
   177  7DF0  70 3F                 RAM_EPILOGUE RAM_USE_CLASS_2
   178  7DF4  7F                    ret
   179                          
   180                          AREA InterruptRAM(ram, rel)
   181                          
   182  004A                    NO_SHADOW:
   183  004A                    _NO_SHADOW:
   184                          ; write only register shadows
   185  004A                    _Port_3_Data_SHADE:
   186  004A                    Port_3_Data_SHADE:	BLK	1
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:16 2009
                      _LoadConfigInit 7D8E    LoadConfigTBL_onewire_gateway_Bank0 02E9    LoadConfigTBL_onewire_gateway_Bank1 0368  
                             MAC0_CL0 00EE                               MAC0_CL1 00EF                               MAC1_CL0 00AE  
                             MAC1_CL1 00AF                                  MAC_X 00EC                                  MAC_Y 00ED  
          _LoadConfig_onewire_gateway 7D98                                 MAC0_X 00EC                                 MAC0_Y 00ED  
                               MAC1_X 00AC                                 MAC1_Y 00AD                                 HITECH 0002  
                      FLAG_PGMODE_01b 0040                        FLAG_PGMODE_10b 0080                      Port_3_Data_SHADE 004A  
            SYSTEM_LARGE_MEMORY_MODEL 0001  LoadConfigTBL_onewire_gateway_Ordered 0200                              NO_SHADOW 004A  
                              MAC_CL0 00EE                                MAC_CL1 00EF                     _Port_3_Data_SHADE 004A  
                           _NO_SHADOW 004A                       FLAG_PGMODE_MASK 00C0                                RES_WDT 00E3  
                      RAM_USE_CLASS_1 0001                        RAM_USE_CLASS_2 0002                        RAM_USE_CLASS_3 0004  
                      RAM_USE_CLASS_4 0008                             LoadConfig 7DB3                         LoadConfigInit 7D8E  
                     END_CONFIG_TABLE 00FF             LoadConfig_onewire_gateway 7D98                          EndLoadConfig 7DEE  
                        FLAG_XIO_MASK 0010             SYSTEM_IDXPG_TRACKS_IDX_PP 0001                           LoadConfigLp 7DC4  
           SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:16 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          include "m8c.inc"
     4                          ;  Personalization tables 
     5                          export LoadConfigTBL_onewire_gateway_Bank1
     6                          export LoadConfigTBL_onewire_gateway_Bank0
     7                          export LoadConfigTBL_onewire_gateway_Ordered
     8                          AREA lit(rom, rel)
     9  0200                    LoadConfigTBL_onewire_gateway_Ordered:
    10                          ;  Ordered Global Register values
    11  0200  71 10             	M8C_SetBank1
    12  0202  62 00 06          	mov	reg[00h], 06h		; Port_0_DriveMode_0 register (PRT0DM0)
    13  0205  62 01 FB          	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
    14  0208  70 EF             	M8C_SetBank0
    15  020A  62 03 F8          	mov	reg[03h], f8h		; Port_0_DriveMode_2 register (PRT0DM2)
    16  020D  62 02 05          	mov	reg[02h], 05h		; Port_0_GlobalSelect register (PRT0GS)
    17  0210  71 10             	M8C_SetBank1
    18  0212  62 02 00          	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
    19  0215  62 03 00          	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
    20  0218  70 EF             	M8C_SetBank0
    21  021A  62 01 00          	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
    22  021D  71 10             	M8C_SetBank1
    23  021F  62 04 40          	mov	reg[04h], 40h		; Port_1_DriveMode_0 register (PRT1DM0)
    24  0222  62 05 BF          	mov	reg[05h], bfh		; Port_1_DriveMode_1 register (PRT1DM1)
    25  0225  70 EF             	M8C_SetBank0
    26  0227  62 07 BB          	mov	reg[07h], bbh		; Port_1_DriveMode_2 register (PRT1DM2)
    27  022A  62 06 44          	mov	reg[06h], 44h		; Port_1_GlobalSelect register (PRT1GS)
    28  022D  71 10             	M8C_SetBank1
    29  022F  62 06 00          	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
    30  0232  62 07 00          	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
    31  0235  70 EF             	M8C_SetBank0
    32  0237  62 05 00          	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
    33  023A  71 10             	M8C_SetBank1
    34  023C  62 08 00          	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
    35  023F  62 09 FF          	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
    36  0242  70 EF             	M8C_SetBank0
    37  0244  62 0B FF          	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
    38  0247  62 0A 00          	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
    39  024A  71 10             	M8C_SetBank1
    40  024C  62 0A 00          	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
    41  024F  62 0B 00          	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
    42  0252  70 EF             	M8C_SetBank0
    43  0254  62 09 00          	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
    44  0257  71 10             	M8C_SetBank1
    45  0259  62 0C 80          	mov	reg[0ch], 80h		; Port_3_DriveMode_0 register (PRT3DM0)
    46  025C  62 0D 7F          	mov	reg[0dh], 7fh		; Port_3_DriveMode_1 register (PRT3DM1)
    47  025F  70 EF             	M8C_SetBank0
    48  0261  62 0F 7F          	mov	reg[0fh], 7fh		; Port_3_DriveMode_2 register (PRT3DM2)
    49  0264  62 0E 00          	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
    50  0267  71 10             	M8C_SetBank1
    51  0269  62 0E 00          	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
    52  026C  62 0F 00          	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
    53  026F  70 EF             	M8C_SetBank0
    54  0271  62 0D 00          	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
    55  0274  71 10             	M8C_SetBank1
    56  0276  62 10 05          	mov	reg[10h], 05h		; Port_4_DriveMode_0 register (PRT4DM0)
    57  0279  62 11 FB          	mov	reg[11h], fbh		; Port_4_DriveMode_1 register (PRT4DM1)
    58  027C  70 EF             	M8C_SetBank0
    59  027E  62 13 FF          	mov	reg[13h], ffh		; Port_4_DriveMode_2 register (PRT4DM2)
    60  0281  62 12 00          	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
    61  0284  71 10             	M8C_SetBank1
    62  0286  62 12 00          	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
    63  0289  62 13 00          	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
    64  028C  70 EF             	M8C_SetBank0
    65  028E  62 11 00          	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
    66  0291  71 10             	M8C_SetBank1
    67  0293  62 14 00          	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
    68  0296  62 15 00          	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
    69  0299  70 EF             	M8C_SetBank0
    70  029B  62 17 00          	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
    71  029E  62 16 00          	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
    72  02A1  71 10             	M8C_SetBank1
    73  02A3  62 16 00          	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
    74  02A6  62 17 00          	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
    75  02A9  70 EF             	M8C_SetBank0
    76  02AB  62 15 00          	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
    77  02AE  71 10             	M8C_SetBank1
    78  02B0  62 18 00          	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
    79  02B3  62 19 00          	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
    80  02B6  70 EF             	M8C_SetBank0
    81  02B8  62 1B 00          	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
    82  02BB  62 1A 00          	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
    83  02BE  71 10             	M8C_SetBank1
    84  02C0  62 1A 00          	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
    85  02C3  62 1B 00          	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
    86  02C6  70 EF             	M8C_SetBank0
    87  02C8  62 19 00          	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
    88  02CB  71 10             	M8C_SetBank1
    89  02CD  62 1C 00          	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
    90  02D0  62 1D 00          	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
    91  02D3  70 EF             	M8C_SetBank0
    92  02D5  62 1F 00          	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
    93  02D8  62 1E 00          	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
    94  02DB  71 10             	M8C_SetBank1
    95  02DD  62 1E 00          	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
    96  02E0  62 1F 00          	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
    97  02E3  70 EF             	M8C_SetBank0
    98  02E5  62 1D 00          	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
    99  02E8  7F                	ret
   100  02E9                    LoadConfigTBL_onewire_gateway_Bank0:
   101                          ;  Global Register values
   102  02E9  60 28             	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
   103  02EB  66 00             	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
   104  02ED  63 05             	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
   105  02EF  65 00             	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
   106  02F1  E6 00             	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
   107  02F3  E7 00             	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
   108  02F5  D6 00             	db		d6h, 00h		; I2CConfig register (I2CCFG)
   109  02F7  B0 01             	db		b0h, 01h		; Row_0_InputMux register (RDI0RI)
   110  02F9  B1 00             	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
   111  02FB  B2 00             	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
   112  02FD  B3 33             	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
   113  02FF  B4 33             	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
   114  0301  B5 00             	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
   115  0303  B6 00             	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
   116  0305  B8 65             	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
   117  0307  B9 00             	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
   118  0309  BA 10             	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
   119  030B  BB 33             	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
   120  030D  BC 33             	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
   121  030F  BD 00             	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
   122  0311  BE 08             	db		beh, 08h		; Row_1_OutputDrive_1 register (RDI1SRO1)
   123  0313  C0 00             	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
   124  0315  C1 00             	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
   125  0317  C2 20             	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
   126  0319  C3 33             	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
   127  031B  C4 33             	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
   128  031D  C5 00             	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
   129  031F  C6 00             	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
   130  0321  C8 54             	db		c8h, 54h		; Row_3_InputMux register (RDI3RI)
   131  0323  C9 00             	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
   132  0325  CA 30             	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
   133  0327  CB 33             	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
   134  0329  CC 33             	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
   135  032B  CD 00             	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
   136  032D  CE 01             	db		ceh, 01h		; Row_3_OutputDrive_1 register (RDI3SRO1)
   137  032F  6C 00             	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
   138  0331  6D 00             	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
   139  0333  6E 00             	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
   140  0335  6F 00             	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
   141                          ;  Instance name Counter8, User Module Counter8
   142                          ;       Instance name Counter8, Block Name CNTR8(DBB00)
   143  0337  23 00             	db		23h, 00h		;Counter8_CONTROL_REG(DBB00CR0)
   144  0339  21 27             	db		21h, 27h		;Counter8_PERIOD_REG(DBB00DR1)
   145  033B  22 13             	db		22h, 13h		;Counter8_COMPARE_REG(DBB00DR2)
   146                          ;  Instance name Counter8_ltrx, User Module Counter8
   147                          ;       Instance name Counter8_ltrx, Block Name CNTR8(DBB10)
   148  033D  33 00             	db		33h, 00h		;Counter8_ltrx_CONTROL_REG(DBB10CR0)
   149  033F  31 27             	db		31h, 27h		;Counter8_ltrx_PERIOD_REG(DBB10DR1)
   150  0341  32 13             	db		32h, 13h		;Counter8_ltrx_COMPARE_REG(DBB10DR2)
   151                          ;  Instance name LED1, User Module LED
   152                          ;  Instance name LTRX, User Module UART
   153                          ;       Instance name LTRX, Block Name RX(DCB13)
   154  0343  3F 00             	db		3fh, 00h		;LTRX_RX_CONTROL_REG(DCB13CR0)
   155  0345  3D 00             	db		3dh, 00h		;LTRX_(DCB13DR1)
   156  0347  3E 00             	db		3eh, 00h		;LTRX_RX_BUFFER_REG (DCB13DR2)
   157                          ;       Instance name LTRX, Block Name TX(DCB12)
   158  0349  3B 00             	db		3bh, 00h		;LTRX_TX_CONTROL_REG(DCB12CR0)
   159  034B  39 00             	db		39h, 00h		;LTRX_TX_BUFFER_REG (DCB12DR1)
   160  034D  3A 00             	db		3ah, 00h		;LTRX_(DCB12DR2)
   161                          ;  Instance name OneWire, User Module OneWire
   162                          ;       Instance name OneWire, Block Name BitClk(DBB31)
   163  034F  57 00             	db		57h, 00h		;OneWire_BITCLK_CONTROL_REG(DBB31CR0)
   164  0351  55 00             	db		55h, 00h		;OneWire_BITCLK_PERIOD_REG (DBB31DR1)
   165  0353  56 00             	db		56h, 00h		;OneWire_BITCLK_COMPARE_REG(DBB31DR2)
   166                          ;       Instance name OneWire, Block Name XCVR(DCB32)
   167  0355  5B 00             	db		5bh, 00h		;OneWire_XCVR_CONTROL_REG(DCB32CR0)
   168  0357  59 00             	db		59h, 00h		;OneWire_XCVR_TX_BUFFER_REG(DCB32DR1)
   169  0359  5A 00             	db		5ah, 00h		;OneWire_XCVR_RX_BUFFER_REG(DCB32DR2)
   170                          ;  Instance name Ticker, User Module Counter16
   171                          ;       Instance name Ticker, Block Name CNTR16_LSB(DCB22)
   172  035B  4B 00             	db		4bh, 00h		;Ticker_CONTROL_LSB_REG(DCB22CR0)
   173  035D  49 FF             	db		49h, ffh		;Ticker_PERIOD_LSB_REG(DCB22DR1)
   174  035F  4A 01             	db		4ah, 01h		;Ticker_COMPARE_LSB_REG(DCB22DR2)
   175                          ;       Instance name Ticker, Block Name CNTR16_MSB(DCB23)
   176  0361  4F 00             	db		4fh, 00h		;Ticker_CONTROL_MSB_REG(DCB23CR0)
   177  0363  4D FF             	db		4dh, ffh		;Ticker_PERIOD_MSB_REG(DCB23DR1)
   178  0365  4E 00             	db		4eh, 00h		;Ticker_COMPARE_MSB_REG(DCB23DR2)
   179  0367  FF                	db		ffh
   180  0368                    LoadConfigTBL_onewire_gateway_Bank1:
   181                          ;  Global Register values
   182  0368  61 00             	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
   183  036A  69 00             	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
   184  036C  60 00             	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
   185  036E  62 00             	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
   186  0370  67 33             	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
   187  0372  68 33             	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
   188  0374  63 00             	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
   189  0376  66 00             	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
   190  0378  D1 00             	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
   191  037A  D3 00             	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
   192  037C  D0 00             	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
   193  037E  D2 00             	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
   194  0380  E1 30             	db		e1h, 30h		; OscillatorControl_1 register (OSC_CR1)
   195  0382  E2 00             	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
   196  0384  DF 02             	db		dfh, 02h		; OscillatorControl_3 register (OSC_CR3)
   197  0386  DE 01             	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
   198  0388  DD 00             	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
   199  038A  E7 00             	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
   200                          ;  Instance name Counter8, User Module Counter8
   201                          ;       Instance name Counter8, Block Name CNTR8(DBB00)
   202  038C  20 61             	db		20h, 61h		;Counter8_FUNC_REG(DBB00FN)
   203  038E  21 15             	db		21h, 15h		;Counter8_INPUT_REG(DBB00IN)
   204  0390  22 40             	db		22h, 40h		;Counter8_OUTPUT_REG(DBB00OU)
   205                          ;  Instance name Counter8_ltrx, User Module Counter8
   206                          ;       Instance name Counter8_ltrx, Block Name CNTR8(DBB10)
   207  0392  30 61             	db		30h, 61h		;Counter8_ltrx_FUNC_REG(DBB10FN)
   208  0394  31 15             	db		31h, 15h		;Counter8_ltrx_INPUT_REG(DBB10IN)
   209  0396  32 40             	db		32h, 40h		;Counter8_ltrx_OUTPUT_REG(DBB10OU)
   210                          ;  Instance name LED1, User Module LED
   211                          ;  Instance name LTRX, User Module UART
   212                          ;       Instance name LTRX, Block Name RX(DCB13)
   213  0398  3C 05             	db		3ch, 05h		;LTRX_RX_FUNC_REG   (DCB13FN)
   214  039A  3D E2             	db		3dh, e2h		;LTRX_RX_INPUT_REG  (DCB13IN)
   215  039C  3E 40             	db		3eh, 40h		;LTRX_RX_OUTPUT_REG (DCB13OU)
   216                          ;       Instance name LTRX, Block Name TX(DCB12)
   217  039E  38 1D             	db		38h, 1dh		;LTRX_TX_FUNC_REG   (DCB12FN)
   218  03A0  39 02             	db		39h, 02h		;LTRX_TX_INPUT_REG  (DCB12IN)
   219  03A2  3A 46             	db		3ah, 46h		;LTRX_TX_OUTPUT_REG (DCB12OU)
   220                          ;  Instance name OneWire, User Module OneWire
   221                          ;       Instance name OneWire, Block Name BitClk(DBB31)
   222  03A4  54 21             	db		54h, 21h		;OneWire_BITCLK_FUNC_REG(DBB31FN)
   223  03A6  55 11             	db		55h, 11h		;OneWire_BITCLK_INPUT_REG(DBB31IN)
   224  03A8  56 40             	db		56h, 40h		;OneWire_BITCLK_OUTPUT_REG(DBB31OU)
   225                          ;       Instance name OneWire, Block Name XCVR(DCB32)
   226  03AA  58 16             	db		58h, 16h		;OneWire_XCVR_FUNC_REG(DCB32FN)
   227  03AC  59 C3             	db		59h, c3h		;OneWire_XCVR_INPUT_REG(DCB32IN)
   228  03AE  5A 46             	db		5ah, 46h		;OneWire_XCVR_OUTPUT_REG(DCB32OU)
   229                          ;  Instance name Ticker, User Module Counter16
   230                          ;       Instance name Ticker, Block Name CNTR16_LSB(DCB22)
   231  03B0  48 01             	db		48h, 01h		;Ticker_FUNC_LSB_REG(DCB22FN)
   232  03B2  49 17             	db		49h, 17h		;Ticker_INPUT_LSB_REG(DCB22IN)
   233  03B4  4A 40             	db		4ah, 40h		;Ticker_OUTPUT_LSB_REG(DCB22OU)
   234                          ;       Instance name Ticker, Block Name CNTR16_MSB(DCB23)
   235  03B6  4C 21             	db		4ch, 21h		;Ticker_FUNC_MSB_REG(DCB23FN)
   236  03B8  4D 37             	db		4dh, 37h		;Ticker_INPUT_MSB_REG(DCB23IN)
   237  03BA  4E 40             	db		4eh, 40h		;Ticker_OUTPUT_MSB_REG(DCB23OU)
   238  03BC  FF                	db		ffh
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:16 2009
  LoadConfigTBL_onewire_gateway_Bank0 02E9    LoadConfigTBL_onewire_gateway_Bank1 0368                               MAC0_CL0 00EE  
                             MAC0_CL1 00EF                               MAC1_CL0 00AE                               MAC1_CL1 00AF  
                                MAC_X 00EC                                  MAC_Y 00ED                                 MAC0_X 00EC  
                               MAC0_Y 00ED                                 MAC1_X 00AC                                 MAC1_Y 00AD  
LoadConfigTBL_onewire_gateway_Ordered 0200                                MAC_CL0 00EE                                MAC_CL1 00EF  
                        FLAG_XIO_MASK 0010  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:16 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter16 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Ticker API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Ticker_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    22  00DF                    Ticker_INT_REG:                            equ 0x0df
    23  0008                    Ticker_INT_MASK:                           equ 0x08
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Ticker user defined values
    28                          ;--------------------------------------------------
    29                          
    30  FFFF                    Ticker_PERIOD:                             equ 0xffff
    31  0001                    Ticker_COMPARE_VALUE:                      equ 0x1
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Ticker
    36                          ;--------------------------------------------------
    37                          
    38  0048                    Ticker_COUNTER_LSB_REG:                equ 0x48   ; DR0 Counter register
    39  004C                    Ticker_COUNTER_MSB_REG:                equ 0x4c
    40  0049                    Ticker_PERIOD_LSB_REG:                 equ 0x49   ; DR1 Period register
    41  004D                    Ticker_PERIOD_MSB_REG:                 equ 0x4d
    42  004A                    Ticker_COMPARE_LSB_REG:                equ 0x4a   ; DR2 CompareValue register
    43  004E                    Ticker_COMPARE_MSB_REG:                equ 0x4e
    44  004B                    Ticker_CONTROL_LSB_REG:                equ 0x4b   ; Control register
    45  004F                    Ticker_CONTROL_MSB_REG:                equ 0x4f
    46  0048                    Ticker_FUNC_LSB_REG:                   equ 0x48   ; Function register
    47  004C                    Ticker_FUNC_MSB_REG:                   equ 0x4c
    48  0049                    Ticker_INPUT_LSB_REG:                  equ 0x49   ; Input register
    49  004D                    Ticker_INPUT_MSB_REG:                  equ 0x4d
    50  004A                    Ticker_OUTPUT_LSB_REG:                 equ 0x4a   ; Output register
    51  004E                    Ticker_OUTPUT_MSB_REG:                 equ 0x4e
    52                          
    53                          
    54                          ;--------------------------------------------------
    55                          ; Ticker Macro 'Functions'
    56                          ;--------------------------------------------------
    57                          
    58                             macro Ticker_Start_M
    59                             or    reg[Ticker_CONTROL_LSB_REG],  Ticker_CONTROL_REG_START_BIT
    60  7C6B                       endm
    61                          
    62                             macro Ticker_Stop_M
    63                             and   reg[Ticker_CONTROL_LSB_REG], ~Ticker_CONTROL_REG_START_BIT
    64  7C6B                       endm
    65                          
    66                             macro Ticker_EnableInt_M
    67                             M8C_EnableIntMask Ticker_INT_REG, Ticker_INT_MASK
    68  7C6B                       endm
    69                          
    70                             macro Ticker_DisableInt_M
    71                             M8C_DisableIntMask Ticker_INT_REG, Ticker_INT_MASK
    72  7C6B                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter16 User Module software implementation file
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;
    10                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    11                          ;;        arguments and observe the associated "Registers are volatile" policy.
    12                          ;;        This means it is the caller's responsibility to preserve any values
    13                          ;;        in the X and A registers that are still needed after the API functions
    14                          ;;        returns. For Large Memory Model devices it is also the caller's 
    15                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    16                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    17                          ;;        now, there is no guarantee that will remain the case in future releases.
    18                          ;;-----------------------------------------------------------------------------
    19                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    20                          ;;*****************************************************************************
    21                          ;;*****************************************************************************
    22                          
    23                          include "m8c.inc"
    24                          include "memory.inc"
    25                          include "Ticker.inc"
    26                          
    27                          ;-----------------------------------------------
    28                          ;  Global Symbols
    29                          ;-----------------------------------------------
    30                          export  Ticker_EnableInt
    31                          export _Ticker_EnableInt
    32                          export  Ticker_DisableInt
    33                          export _Ticker_DisableInt
    34                          export  Ticker_Start
    35                          export _Ticker_Start
    36                          export  Ticker_Stop
    37                          export _Ticker_Stop
    38                          export  Ticker_WritePeriod
    39                          export _Ticker_WritePeriod
    40                          export  Ticker_WriteCompareValue
    41                          export _Ticker_WriteCompareValue
    42                          export  Ticker_wReadCompareValue
    43                          export _Ticker_wReadCompareValue
    44                          export  Ticker_wReadCounter
    45                          export _Ticker_wReadCounter
    46                          
    47                          ; The following functions are deprecated and subject to omission in future releases
    48                          ;
    49                          export  wTicker_ReadCompareValue  ; deprecated
    50                          export _wTicker_ReadCompareValue  ; deprecated
    51                          export  wTicker_ReadCounter       ; deprecated
    52                          export _wTicker_ReadCounter       ; deprecated
    53                          
    54                          
    55                          AREA onewire_gateway_RAM (RAM,REL)
    56                          
    57                          ;-----------------------------------------------
    58                          ;  Constant Definitions
    59                          ;-----------------------------------------------
    60                          
    61  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    62                          
    63                          
    64                          ;-----------------------------------------------
    65                          ; Variable Allocation
    66                          ;-----------------------------------------------
    67                          
    68                          
    69                          AREA UserModules (ROM, REL)
    70                          
    71                          .SECTION
    72                          ;-----------------------------------------------------------------------------
    73                          ;  FUNCTION NAME: Ticker_EnableInt
    74                          ;
    75                          ;  DESCRIPTION:
    76                          ;     Enables this counter's interrupt by setting the interrupt enable mask bit
    77                          ;     associated with this User Module. This function has no effect until and
    78                          ;     unless the global interrupts are enabled (for example by using the
    79                          ;     macro M8C_EnableGInt).
    80                          ;-----------------------------------------------------------------------------
    81                          ;
    82                          ;  ARGUMENTS:    None.
    83                          ;  RETURNS:      Nothing.
    84                          ;  SIDE EFFECTS: 
    85                          ;    The A and X registers may be modified by this or future implementations
    86                          ;    of this function.  The same is true for all RAM page pointer registers in
    87                          ;    the Large Memory Model.  When necessary, it is the calling function's
    88                          ;    responsibility to perserve their values across calls to fastcall16 
    89                          ;    functions.
    90                          ;
    91  742B                     Ticker_EnableInt:
    92  742B                    _Ticker_EnableInt:
    93                             RAM_PROLOGUE RAM_USE_CLASS_1
    94  742B  43 DF 08             Ticker_EnableInt_M
    95                             RAM_EPILOGUE RAM_USE_CLASS_1
    96  742E  7F                   ret
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: Ticker_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this counter's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS: 
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  742F                     Ticker_DisableInt:
   119  742F                    _Ticker_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  742F  41 DF F7             Ticker_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  7432  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: Ticker_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     counter will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS: 
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  7433                     Ticker_Start:
   148  7433                    _Ticker_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  7433  43 4B 01             Ticker_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  7436  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: Ticker_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables counter operation by clearing the start bit in the Control
   163                          ;     register of the LSB block.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  7437                     Ticker_Stop:
   176  7437                    _Ticker_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  7437  41 4B FE             Ticker_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  743A  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: Ticker_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 16-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the counter user module is stopped, then this value will also be
   197                          ;    latched into the Count registers (DR0).
   198                          ;     
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  743B                     Ticker_WritePeriod:
   206  743B                    _Ticker_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  743B  60 49                mov   reg[Ticker_PERIOD_LSB_REG], A
   209  743D  5B                   mov   A, X
   210  743E  60 4D                mov   reg[Ticker_PERIOD_MSB_REG], A
   211                             RAM_EPILOGUE RAM_USE_CLASS_1
   212  7440  7F                   ret
   213                          
   214                          
   215                          .ENDSECTION
   216                          
   217                          .SECTION
   218                          ;-----------------------------------------------------------------------------
   219                          ;  FUNCTION NAME: Ticker_WriteCompareValue
   220                          ;
   221                          ;  DESCRIPTION:
   222                          ;     Writes compare value into the Compare register (DR2).
   223                          ;-----------------------------------------------------------------------------
   224                          ;
   225                          ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
   226                          ;  RETURNS:      Nothing
   227                          ;  SIDE EFFECTS: 
   228                          ;    The A and X registers may be modified by this or future implementations
   229                          ;    of this function.  The same is true for all RAM page pointer registers in
   230                          ;    the Large Memory Model.  When necessary, it is the calling function's
   231                          ;    responsibility to perserve their values across calls to fastcall16 
   232                          ;    functions.
   233                          ;
   234  7441                     Ticker_WriteCompareValue:
   235  7441                    _Ticker_WriteCompareValue:
   236                             RAM_PROLOGUE RAM_USE_CLASS_1
   237  7441  60 4A                mov   reg[Ticker_COMPARE_LSB_REG], A
   238  7443  5B                   mov   A, X
   239  7444  60 4E                mov   reg[Ticker_COMPARE_MSB_REG], A
   240                             RAM_EPILOGUE RAM_USE_CLASS_1
   241  7446  7F                   ret
   242                          
   243                          
   244                          .ENDSECTION
   245                          
   246                          .SECTION
   247                          ;-----------------------------------------------------------------------------
   248                          ;  FUNCTION NAME: Ticker_wReadCompareValue
   249                          ;
   250                          ;  DESCRIPTION:
   251                          ;     Reads the Compare registers.
   252                          ;-----------------------------------------------------------------------------
   253                          ;
   254                          ;  ARGUMENTS:    None
   255                          ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
   256                          ;  SIDE EFFECTS: 
   257                          ;    The A and X registers may be modified by this or future implementations
   258                          ;    of this function.  The same is true for all RAM page pointer registers in
   259                          ;    the Large Memory Model.  When necessary, it is the calling function's
   260                          ;    responsibility to perserve their values across calls to fastcall16 
   261                          ;    functions.
   262                          ;
   263  7447                     Ticker_wReadCompareValue:
   264  7447                    _Ticker_wReadCompareValue:
   265  7447                     wTicker_ReadCompareValue:                       ; this name deprecated
   266  7447                    _wTicker_ReadCompareValue:                       ; this name deprecated
   267                             RAM_PROLOGUE RAM_USE_CLASS_1
   268  7447  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]
   269  7449  5C                   mov   X, A
   270  744A  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]
   271                             RAM_EPILOGUE RAM_USE_CLASS_1
   272  744C  7F                   ret
   273                          
   274                          
   275                          .ENDSECTION
   276                          
   277                          .SECTION
   278                          ;-----------------------------------------------------------------------------
   279                          ;  FUNCTION NAME: Ticker_wReadCounter
   280                          ;
   281                          ;  DESCRIPTION:
   282                          ;     Returns the value in the Count register (DR0), preserving the value in
   283                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   284                          ;     from the Count to the Compare registers by holding the clock low in
   285                          ;     the MSB PSoC block.
   286                          ;-----------------------------------------------------------------------------
   287                          ;
   288                          ;  ARGUMENTS: None
   289                          ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
   290                          ;  SIDE EFFECTS:
   291                          ;     1) The user module is stopped momentarily and one or more counts may be missed.
   292                          ;     2) The A and X registers may be modified by this or future implementations
   293                          ;        of this function.  The same is true for all RAM page pointer registers in
   294                          ;        the Large Memory Model.  When necessary, it is the calling function's
   295                          ;        responsibility to perserve their values across calls to fastcall16 
   296                          ;        functions.
   297                          ;
   298  744D                     Ticker_wReadCounter:
   299  744D                    _Ticker_wReadCounter:
   300  744D                     wTicker_ReadCounter:                            ; this name deprecated
   301  744D                    _wTicker_ReadCounter:                            ; this name deprecated
   302                          
   303  0000                       bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
   304  0002                       bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
   305  0003                       bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
   306  0004                       wCounter:               EQU   4                  ; Frame offset to temp Count   store
   307  0006                       STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
   308                          
   309  744D  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   310  744F  4F                   mov   X, SP                                      ; X <-  stack frame pointer
   311  7450  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]          ; Save the Compare register on the stack
   312  7452  08                   push  A                                          ;
   313  7453  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]          ;
   314  7455  08                   push  A                                          ;   -stack frame now 2 bytes-
   315  7456  5D 4B                mov   A, reg[Ticker_CONTROL_LSB_REG]          ; Save CR0 (running or stopped state)
   316  7458  08                   push  A                                          ;   -stack frame now 3 bytes-
   317  7459  41 4B FE             Ticker_Stop_M                                 ; Disable (stop) the Counter if running
   318  745C  71 10                M8C_SetBank1                                     ;
   319  745E  5D 49                mov   A, reg[Ticker_INPUT_LSB_REG]            ; save the LSB clock input setting
   320  7460  08                   push  A                                          ;   on the stack (now 4 bytes) and ...
   321                                                                              ;   hold the clock low:
   322  7461  62 49 00             mov   reg[Ticker_INPUT_LSB_REG], INPUT_REG_NULL
   323  7464  70 EF                M8C_SetBank0                                     ; Extract the Count via DR2 register
   324  7466  5D 4C                mov   A, reg[Ticker_COUNTER_MSB_REG]          ; DR2 <- DR0 (in the MSB block)
   325  7468  5D 4E                mov   A, reg[Ticker_COMPARE_MSB_REG]          ; Stash the Count MSB on the stack
   326  746A  08                   push  A                                          ;   -stack frame is now 5 bytes
   327  746B  5D 48                mov   A, reg[Ticker_COUNTER_LSB_REG]          ; DR2 <- DR0 (in the LSB block)
   328  746D  5D 4A                mov   A, reg[Ticker_COMPARE_LSB_REG]          ; Stash the Count LSB on the stack
   329  746F  08                   push  A                                          ;   -stack frame is now 6 bytes-
   330  7470  52 00                mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
   331  7472  60 4E                mov   reg[Ticker_COMPARE_MSB_REG], A          ;
   332  7474  52 01                mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
   333  7476  60 4A                mov   reg[Ticker_COMPARE_LSB_REG], A          ;
   334  7478  71 10                M8C_SetBank1                                     ; ---Restore the counter operation
   335  747A  52 03                mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
   336  747C  60 49                mov   reg[Ticker_INPUT_LSB_REG], A            ;   and restore it
   337  747E  70 EF                M8C_SetBank0                                     ; Now re-enable (start) the counter
   338  7480  52 02                mov   A, [X+bOrigControlReg]                     ;   if it was running when
   339  7482  60 4B                mov   reg[Ticker_CONTROL_LSB_REG], A          ;   this function was first called
   340  7484  18                   pop   A                                          ; Setup the return value
   341  7485  20                   pop   X                                          ;
   342  7486  38 FC                ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
   343  7488  70 3F                RAM_EPILOGUE RAM_USE_CLASS_2
   344  748C  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:16 2009
          Ticker_WritePeriod 743B        Ticker_COMPARE_LSB_REG 004A        Ticker_COMPARE_MSB_REG 004E  
                    MAC0_CL0 00EE                      MAC0_CL1 00EF                      MAC1_CL0 00AE  
                    MAC1_CL1 00AF                         MAC_X 00EC                         MAC_Y 00ED  
                _Ticker_Stop 7437          Ticker_INPUT_LSB_REG 0049      wTicker_ReadCompareValue 7447  
           bOrigClockSetting 0003                        MAC0_X 00EC                        MAC0_Y 00ED  
                      MAC1_X 00AC                        MAC1_Y 00AD                        HITECH 0002  
             FLAG_PGMODE_01b 0040               FLAG_PGMODE_10b 0080  Ticker_CONTROL_REG_START_BIT 0001  
           Ticker_DisableInt 742F                 _Ticker_Start 7433     _Ticker_wReadCompareValue 7447  
        _wTicker_ReadCounter 744D      Ticker_WriteCompareValue 7441           _Ticker_WritePeriod 743B  
              INPUT_REG_NULL 0000     SYSTEM_LARGE_MEMORY_MODEL 0001            _Ticker_DisableInt 742F  
        _Ticker_wReadCounter 744D                       MAC_CL0 00EE                       MAC_CL1 00EF  
           bOrigCompareValue 0000           wTicker_ReadCounter 744D              FLAG_PGMODE_MASK 00C0  
             RAM_USE_CLASS_1 0001               RAM_USE_CLASS_2 0002               RAM_USE_CLASS_3 0004  
             RAM_USE_CLASS_4 0008              Ticker_EnableInt 742B               Ticker_INT_MASK 0008  
   _wTicker_ReadCompareValue 7447         Ticker_PERIOD_LSB_REG 0049         Ticker_PERIOD_MSB_REG 004D  
             bOrigControlReg 0002             _Ticker_EnableInt 742B           Ticker_wReadCounter 744D  
            STACK_FRAME_SIZE 0006                Ticker_INT_REG 00DF      Ticker_wReadCompareValue 7447  
      Ticker_COUNTER_LSB_REG 0048        Ticker_COUNTER_MSB_REG 004C     _Ticker_WriteCompareValue 7441  
               FLAG_XIO_MASK 0010    SYSTEM_IDXPG_TRACKS_IDX_PP 0001        Ticker_CONTROL_LSB_REG 004B  
  SYSTEM_IDXPG_TRACKS_STK_PP 0000                  Ticker_Start 7433                   Ticker_Stop 7437  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:17 2009
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  0000'                       endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  0000'                       endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  0000'                       endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  0000'                       endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  0000'                       endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  0000'                       endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  0000'                       endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  0000'                       endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  0000'                       endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  0000'                       endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  0000'                       endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  0000'                       endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  0000'                       endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  0000'                       endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  0000'                       endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  0000'                       endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  0000'                      endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  0000'                      endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  0000'                      endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  0000'                      endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  0000'                      endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  0000'                      endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  0000'                      endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  0000'                      endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  0000'                      endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  0000'                      endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  0000'                      endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  0000'                      endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  0000'                      endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  0000'                      endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  0000'                      endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  0000'                      endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  0000'                      endm
   931                          
   932                          ; end of file m8c.inc
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  0000'                       endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  0000'                       endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  0000'                       endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  0000'                       endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  0000'                       endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  0000'                       endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  0000'                       endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  0000'                       endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  0000'                       endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  0000'                       endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  0000'                       endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  0000'                       endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  0000'                       endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  0000'                       endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  0000'                       endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  0000'                       endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Ticker.inc
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Counter16 user module interface
     8                          ;;               for the 22/24/27/29xxx PSoC family of devices
     9                          ;;-----------------------------------------------------------------------------
    10                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    11                          ;;*****************************************************************************
    12                          ;;*****************************************************************************
    13                          
    14                          include "m8c.inc"
    15                          
    16                          
    17                          ;--------------------------------------------------
    18                          ; Constants for Ticker API's.
    19                          ;--------------------------------------------------
    20                          
    21  0001                    Ticker_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    22  00DF                    Ticker_INT_REG:                            equ 0x0df
    23  0008                    Ticker_INT_MASK:                           equ 0x08
    24                          
    25                          
    26                          ;--------------------------------------------------
    27                          ; Constants for Ticker user defined values
    28                          ;--------------------------------------------------
    29                          
    30  FFFF                    Ticker_PERIOD:                             equ 0xffff
    31  0001                    Ticker_COMPARE_VALUE:                      equ 0x1
    32                          
    33                          
    34                          ;--------------------------------------------------
    35                          ; Register Address Constants for Ticker
    36                          ;--------------------------------------------------
    37                          
    38  0048                    Ticker_COUNTER_LSB_REG:                equ 0x48   ; DR0 Counter register
    39  004C                    Ticker_COUNTER_MSB_REG:                equ 0x4c
    40  0049                    Ticker_PERIOD_LSB_REG:                 equ 0x49   ; DR1 Period register
    41  004D                    Ticker_PERIOD_MSB_REG:                 equ 0x4d
    42  004A                    Ticker_COMPARE_LSB_REG:                equ 0x4a   ; DR2 CompareValue register
    43  004E                    Ticker_COMPARE_MSB_REG:                equ 0x4e
    44  004B                    Ticker_CONTROL_LSB_REG:                equ 0x4b   ; Control register
    45  004F                    Ticker_CONTROL_MSB_REG:                equ 0x4f
    46  0048                    Ticker_FUNC_LSB_REG:                   equ 0x48   ; Function register
    47  004C                    Ticker_FUNC_MSB_REG:                   equ 0x4c
    48  0049                    Ticker_INPUT_LSB_REG:                  equ 0x49   ; Input register
    49  004D                    Ticker_INPUT_MSB_REG:                  equ 0x4d
    50  004A                    Ticker_OUTPUT_LSB_REG:                 equ 0x4a   ; Output register
    51  004E                    Ticker_OUTPUT_MSB_REG:                 equ 0x4e
    52                          
    53                          
    54                          ;--------------------------------------------------
    55                          ; Ticker Macro 'Functions'
    56                          ;--------------------------------------------------
    57                          
    58                             macro Ticker_Start_M
    59                             or    reg[Ticker_CONTROL_LSB_REG],  Ticker_CONTROL_REG_START_BIT
    60  0000'                      endm
    61                          
    62                             macro Ticker_Stop_M
    63                             and   reg[Ticker_CONTROL_LSB_REG], ~Ticker_CONTROL_REG_START_BIT
    64  0000'                      endm
    65                          
    66                             macro Ticker_EnableInt_M
    67                             M8C_EnableIntMask Ticker_INT_REG, Ticker_INT_MASK
    68  0000'                      endm
    69                          
    70                             macro Ticker_DisableInt_M
    71                             M8C_DisableIntMask Ticker_INT_REG, Ticker_INT_MASK
    72  0000'                      endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: TickerINT.asm
     4                          ;;   Version: 2.5, Updated on 2008/6/23 at 12:23:3
     5                          ;;  Generated by PSoC Designer ???
     6                          ;;
     7                          ;;  DESCRIPTION: Counter16 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Ticker.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Ticker_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Ticker_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0000'                   _Ticker_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                          
    71                             ;---------------------------------------------------
    72                             ; Insert your custom code above this banner
    73                             ;---------------------------------------------------
    74                             ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76  0000' 7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:17 2009
                 _Ticker_ISR 0000                      MAC0_CL0 00EE                      MAC0_CL1 00EF  
                    MAC1_CL0 00AE                      MAC1_CL1 00AF                         MAC_X 00EC  
                       MAC_Y 00ED                        MAC0_X 00EC                        MAC0_Y 00ED  
                      MAC1_X 00AC                        MAC1_Y 00AD                        HITECH 0002  
                     MAC_CL0 00EE                       MAC_CL1 00EF  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:19 2009
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       2 August 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C29566
    11                          ;
    12                          ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0000                    CPU_CLOCK:				equ	0h		;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
    24  0000                    CPU_CLOCK_JUST:			equ	0h		;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31  0000                    SLEEP_TIMER:			equ	0h		;Sleep Timer value
    32  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    33  0000                    SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
    34  0001                    SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
    35  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
    36  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    37  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    38  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    39  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    40  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    41  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    42  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    43                          
    44  0008                    POWER_SETTING:			equ	8h
    45  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    46  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    47  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    48  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    49  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    50  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    51  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    52  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    53  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    54  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    55                          
    56  0001                    COMM_RX_PRESENT:		equ	1		;1 = TRUE
    57  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    58                          
    59  0003                    CLOCK_DIV_VC1:			equ	3h	;VC1 clock divider
    60  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    61  0030                    CLOCK_DIV_VC1_JUST:		equ	30h	;VC1 clock divider justified
    62  0000                    CLOCK_DIV_VC2:			equ	0h	;VC2 clock divider
    63  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    64  0000                    CLOCK_DIV_VC2_JUST:		equ	0h	;VC2 clock divider justified
    65  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    66  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    67  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    68  0002                    CLOCK_DIV_VC3:			equ	2h	;VC3 clock divider
    69  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    70  0002                    CLOCK_DIV_VC3_JUST:		equ	2h	;VC3 clock divider justified
    71  0000                    ANALOG_BUFFER_PWR:		equ	0h	;Analog buffer power level
    72  0001                    ANALOG_BUFFER_PWR_MASK:	equ	1h	;Analog buffer power level mask
    73  0000                    ANALOG_BUFFER_PWR_JUST:	equ	0h	;Analog buffer power level justified
    74  0005                    ANALOG_POWER:			equ	5h	;Analog power control
    75  0007                    ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
    76  0005                    ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
    77  0000                    OP_AMP_BIAS:			equ	0h	;Op amp bias level
    78  0040                    OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
    79  0000                    OP_AMP_BIAS_JUST:		equ	0h	;Op amp bias level justified
    80  0000                    REF_MUX:				equ	0h	;Ref mux setting
    81  0038                    REF_MUX_MASK:			equ	38h	;Ref mux setting mask
    82  0000                    REF_MUX_JUST:			equ	0h	;Ref mux setting justified
    83  0000                    AGND_BYPASS:				equ	0h	;AGndBypass setting
    84  0040                    AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
    85  0000                    AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
    86  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    87  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    88  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    89  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    90  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    91  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    92                          ;
    93                          ; register initial values
    94                          ;
    95  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    96  0005                    PORT_0_GLOBAL_SELECT:	equ 5h	;Port 0 global select register (PRT0GS)
    97  0006                    PORT_0_DRIVE_0:			equ 6h	;Port 0 drive mode 0 register (PRT0DM0)
    98  00FB                    PORT_0_DRIVE_1:			equ fbh	;Port 0 drive mode 1 register (PRT0DM1)
    99  00F8                    PORT_0_DRIVE_2:			equ f8h	;Port 0 drive mode 2 register (PRT0DM2)
   100  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
   101  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
   102  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
   103  0044                    PORT_1_GLOBAL_SELECT:	equ 44h	;Port 1 global select register (PRT1GS)
   104  0040                    PORT_1_DRIVE_0:			equ 40h	;Port 1 drive mode 0 register (PRT1DM0)
   105  00BF                    PORT_1_DRIVE_1:			equ bfh	;Port 1 drive mode 1 register (PRT1DM1)
   106  00BB                    PORT_1_DRIVE_2:			equ bbh	;Port 1 drive mode 2 register (PRT1DM2)
   107  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
   108  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   109  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   110  0000                    PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
   111  0000                    PORT_2_DRIVE_0:			equ 0h	;Port 2 drive mode 0 register (PRT2DM0)
   112  00FF                    PORT_2_DRIVE_1:			equ ffh	;Port 2 drive mode 1 register (PRT2DM1)
   113  00FF                    PORT_2_DRIVE_2:			equ ffh	;Port 2 drive mode 2 register (PRT2DM2)
   114  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   115  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   116  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   117  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   118  0080                    PORT_3_DRIVE_0:			equ 80h	;Port 3 drive mode 0 register (PRT3DM0)
   119  007F                    PORT_3_DRIVE_1:			equ 7fh	;Port 3 drive mode 1 register (PRT3DM1)
   120  007F                    PORT_3_DRIVE_2:			equ 7fh	;Port 3 drive mode 2 register (PRT3DM2)
   121  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   122  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   123  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
   124  0000                    PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
   125  0005                    PORT_4_DRIVE_0:			equ 5h	;Port 4 drive mode 0 register (PRT4DM0)
   126  00FB                    PORT_4_DRIVE_1:			equ fbh	;Port 4 drive mode 1 register (PRT4DM1)
   127  00FF                    PORT_4_DRIVE_2:			equ ffh	;Port 4 drive mode 2 register (PRT4DM2)
   128  0000                    PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
   129  0000                    PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
   130  0000                    PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
   131  0000                    PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
   132  0000                    PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
   133  0000                    PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
   134  0000                    PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
   135  0000                    PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
   136  0000                    PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
   137  0000                    PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
   138  0000                    PORT_6_GLOBAL_SELECT:	equ 0h	;Port 6 global select register (PRT6GS)
   139  0000                    PORT_6_DRIVE_0:			equ 0h	;Port 6 drive mode 0 register (PRT6DM0)
   140  0000                    PORT_6_DRIVE_1:			equ 0h	;Port 6 drive mode 1 register (PRT6DM1)
   141  0000                    PORT_6_DRIVE_2:			equ 0h	;Port 6 drive mode 2 register (PRT6DM2)
   142  0000                    PORT_6_INTENABLE:		equ 0h	;Port 6 interrupt enable register (PRT6IE)
   143  0000                    PORT_6_INTCTRL_0:		equ 0h	;Port 6 interrupt control 0 register (PRT6IC0)
   144  0000                    PORT_6_INTCTRL_1:		equ 0h	;Port 6 interrupt control 1 register (PRT6IC1)
   145  0000                    PORT_7_GLOBAL_SELECT:	equ 0h	;Port 7 global select register (PRT7GS)
   146  0000                    PORT_7_DRIVE_0:			equ 0h	;Port 7 drive mode 0 register (PRT7DM0)
   147  0000                    PORT_7_DRIVE_1:			equ 0h	;Port 7 drive mode 1 register (PRT7DM1)
   148  0000                    PORT_7_DRIVE_2:			equ 0h	;Port 7 drive mode 2 register (PRT7DM2)
   149  0000                    PORT_7_INTENABLE:		equ 0h	;Port 7 interrupt enable register (PRT7IE)
   150  0000                    PORT_7_INTCTRL_0:		equ 0h	;Port 7 interrupt control 0 register (PRT7IC0)
   151  0000                    PORT_7_INTCTRL_1:		equ 0h	;Port 7 interrupt control 1 register (PRT7IC1)
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- M8C29xxx Microcontroller Family SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2003-2004, Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 27x6x Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: June 8, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHz:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                              ; legacy names:
    67  00F8                        VOLTAGE_TRIM_2V:                equ      0F8h   ; Table 2 2.7V bandgap voltage trim value
    68  00F9                        OSCILLATOR_TRIM_SLOW_2V_12MHZ:  equ      0F9h   ; Table 2 2.7V SLOW IMO Trim 12MHz, 2.7V
    69  00FC                        OSCILLATOR_TRIM_SLOW_3V_6MHZ:   equ      0FCh   ; Table 2 2.7V SLOW IMO Trim  6MHz, 3.3V
    70  00FD                        OSCILLATOR_TRIM_SLOW_2V_6MHZ:   equ      0FDh   ; Table 2 2.7V SLOW IMO Trim  6MHz, 2.7V
    71                          
    72                          
    73                          ;-----------------------------------------------------------------------------
    74                          ;  MACRO SSC_Action( OpCode )
    75                          ;
    76                          ;  DESCRIPTION:
    77                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    78                          ;     section of Technical Reference Manual and/or Datasheet.
    79                          ;-----------------------------------------------------------------------------
    80                          ;
    81                          ;  ARGUMENTS:
    82                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    83                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    84                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    85                          ;  RETURNS:
    86                          ;     Nothing
    87                          ;
    88                          ;  SIDE EFFECTS:
    89                          ;     The values of the A and X registers are modified
    90                          ;
    91                          ;  PROCEDURE:
    92                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    93                          ;     2) insert the flash Supervisory key in [KEY1]
    94                          ;     3) store function code in A
    95                          ;     4) call the supervisory code
    96                          ;
    97                              macro SSC_Action( OpCode )
    98                          ;   !!! DO NOT CHANGE THIS CODE !!!
    99                          ;       This sequence of opcodes provides a
   100                          ;       signature for the debugger and ICE.
   101                              mov   X, SP                            ; copy SP into X
   102                              mov   A, X                             ; mov to A
   103                              add   A, 3                             ; create 3 byte stack frame
   104                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   105                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   106                              mov   A, @OpCode                       ; load A with specific Flash operation
   107                              SSC                                    ; SSC call the supervisory code
   108                          ;   !!! DO NOT CHANGE THIS CODE !!!
   109  7C6B                        endm
   110                          
   111                          
   112                          ;-----------------------------------------------------------------------------
   113                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
   114                          ;
   115                          ;  DESCRIPTION:
   116                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   117                          ;     registers with values from from the specified flash System Parameter
   118                          ;     table entries. Note that both trim values must come from the same table.
   119                          ;     Also, see M8SSC_Set2TableTrims below.
   120                          ;-----------------------------------------------------------------------------
   121                          ;
   122                          ;  ARGUMENTS:
   123                          ;     BYTE Table     - 0..3 for the desired system parameter table
   124                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   125                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   126                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   127                          ;
   128                          ;  RETURNS:
   129                          ;     Nothing
   130                          ;
   131                          ;  SIDE EFFECTS:
   132                          ;     The values of the A and X registers are modified
   133                          ;
   134                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
   135                              mov A, reg[0xD0]  ; CUR_PP
   136                          	push A
   137                          	mov reg[0xD0], 0
   138                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   139                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   140                              M8C_SetBank1
   141                              mov   A, [@IMO_Trim]
   142                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   143                              mov   A, [@Volt_Trim]
   144                            IF ( @Bypass )
   145                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
   146                            ENDIF
   147                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   148                              M8C_SetBank0
   149                          	pop A
   150                          	mov reg[0xD0], A
   151  7C6B                        endm
   152                          
   153                          
   154                          ;-----------------------------------------------------------------------------
   155                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   159                          ;     registers with values from from the specified flash System Parameter
   160                          ;     table entries. Each trim value comes from a different table.
   161                          ;     Also, see M8SSC_SetTableTrims above.
   162                          ;-----------------------------------------------------------------------------
   163                          ;
   164                          ;  ARGUMENTS:
   165                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   166                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   167                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   168                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   169                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   170                          ;
   171                          ;  RETURNS:
   172                          ;     Nothing
   173                          ;
   174                          ;  SIDE EFFECTS:
   175                          ;     The values of the A and X registers are modified
   176                          ;
   177                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
   178                              mov A, reg[0xD0]  ; CUR_PP
   179                          	push A
   180                          	mov reg[0xD0], 0
   181                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   182                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   183                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   184                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   185                              mov   reg[IMO_TR], A
   186                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   187                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   188                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   189                            IF ( @Bypass )
   190                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
   191                            ENDIF
   192                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   193                              M8C_SetBank0
   194                          	pop A
   195                          	mov reg[0xD0], A
   196  7C6B                        endm
   197                          
   198                          
   199                          ;-----------------------------------------------------------------------------
   200                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
   201                          ;
   202                          ;  DESCRIPTION:
   203                          ;     Loads Bandgap Voltage Trim register with values from from the
   204                          ;     specified flash System Parameter table entry.
   205                          ;-----------------------------------------------------------------------------
   206                          ;
   207                          ;  ARGUMENTS:
   208                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   209                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   210                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   211                          ;
   212                          ;  RETURNS:
   213                          ;     Nothing
   214                          ;
   215                          ;  SIDE EFFECTS:
   216                          ;     The values of the A and X registers are modified
   217                          ;
   218                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
   219                              mov A, reg[0xD0]  ; CUR_PP
   220                          	push A
   221                          	mov reg[0xD0], 0
   222                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   223                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   224                              M8C_SetBank1
   225                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   226                            IF ( @Bypass )
   227                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting, if any
   228                            ENDIF
   229                              mov   reg[BDG_TR], A                   ; Update the register value
   230                              M8C_SetBank0
   231                          	pop A
   232                          	mov reg[0xD0], A
   233  7C6B                        endm
   234                          
   235                          
   236                          ;-----------------------------------------------------------------------------
   237                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                          ;
   239                          ;  DESCRIPTION:
   240                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   241                          ;     from the specified flash System Parameter table entry.
   242                          ;-----------------------------------------------------------------------------
   243                          ;
   244                          ;  ARGUMENTS:
   245                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   246                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   247                          ;
   248                          ;  RETURNS:
   249                          ;     Nothing
   250                          ;
   251                          ;  SIDE EFFECTS:
   252                          ;     The values of the A and X registers are modified
   253                          ;
   254                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   255                              mov A, reg[0xD0]  ; CUR_PP
   256                          	push A
   257                          	mov reg[0xD0], 0
   258                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   259                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   260                              M8C_SetBank1
   261                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   262                              mov   reg[IMO_TR], A               ; Update the register value
   263                              M8C_SetBank0
   264                          	pop A
   265                          	mov reg[0xD0], A
   266  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;@Id: boot.tpl#851 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  VERSION:    4.18
     7                          ;  DATE:       28 June 2007
     8                          ;
     9                          ;  DESCRIPTION:
    10                          ;  M8C Boot Code for CY8C29xxx microcontroller family.
    11                          ;
    12                          ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    16                          ; the project's root directory to create BOOT.ASM. Any changes made to
    17                          ; BOOT.ASM will be  overwritten every time the project is generated; therfore
    18                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    19                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    20                          ; are not accidentally modified.
    21                          ;
    22                          ;=============================================================================
    23                          
    24                          include ".\lib\GlobalParams.inc"
    25                          include "m8c.inc"
    26                          include "m8ssc.inc"
    27                          include "memory.inc"
    28                          
    29                          ;--------------------------------------
    30                          ; Export Declarations
    31                          ;--------------------------------------
    32                          
    33                          export __Start
    34                          IF	(TOOLCHAIN & HITECH)
    35                          ELSE
    36                          export __bss_start
    37                          export __data_start
    38                          export __idata_start
    39                          export __func_lit_start
    40                          export __text_start
    41                          ENDIF
    42                          export  _bGetPowerSetting
    43                          export   bGetPowerSetting
    44                          
    45                          
    46                          ;--------------------------------------
    47                          ; Optimization flags
    48                          ;--------------------------------------
    49                          ;
    50                          ; To change the value of these flags, modify the file boot.tpl, not
    51                          ; boot.asm. See the notes in the banner comment at the beginning of
    52                          ; this file.
    53                          
    54                          ; Optimization for Assembly language (only) projects and C-language projects
    55                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    56                          ;   Set to 1: Support for C Run-time Environment initialization
    57                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    58                          ;
    59                          IF	(TOOLCHAIN & HITECH)
    60                          ; The C compiler will customize the startup code - it's not required here
    61                          
    62  0000                    C_LANGUAGE_SUPPORT:              equ 0
    63                          ELSE
    64                          C_LANGUAGE_SUPPORT:              equ 1
    65                          ENDIF
    66                          
    67                          
    68                          ; The following equate is required for proper operation. Reseting its value
    69                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    70                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    71                          ; and PLL_Lock must take place within user code. See the family data sheet for
    72                          ; the requirements of starting the ECO and PLL lock mode.
    73                          ;
    74                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    75                          ;                invoking main
    76                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    77                          ;               the time code in main starts executing.
    78                          ;
    79  0001                    WAIT_FOR_32K:                    equ 1
    80                          
    81                          
    82                          ; For historical reasons, by default the boot code uses an lcall instruction
    83                          ; to invoke the user's _main code. If _main executes a return instruction,
    84                          ; boot provides an infinite loop. By changing the following equate from zero
    85                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    86                          ; bytes on the stack which are otherwise required for the return address. If
    87                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    88                          ; release, the C compiler automatically places an infinite loop at the end
    89                          ; of main, rather than a return instruction.)
    90                          ;
    91  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    92                          
    93                          
    94                          ;-----------------------------------------------------------------------------
    95                          ; Interrupt Vector Table
    96                          ;-----------------------------------------------------------------------------
    97                          ;
    98                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    99                          ; a jump instruction to an ISR (Interrupt Service Routine), although
   100                          ; very short ISRs could be encoded within the table itself. Normally,
   101                          ; vector jump targets are modified automatically according to the user
   102                          ; modules selected. This occurs when the 'Generate Application' opera-
   103                          ; tion is run causing PSoC Designer to create boot.asm and the other
   104                          ; configuration files. If you need to hard code a vector, update the
   105                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   106                          ; of this file.
   107                          ;-----------------------------------------------------------------------------
   108                          
   109                              AREA TOP (ROM, ABS, CON)
   110                          
   111  0000                        org   0                        ;Reset Interrupt Vector
   112                          IF	(TOOLCHAIN & HITECH)
   113                          ;   jmp   __Start                  ;C compiler fills in this vector
   114                          ELSE
   115                              jmp   __Start                  ;First instruction executed following a Reset
   116                          ENDIF
   117                          
   118  0004                        org   04h                      ;Supply Monitor Interrupt Vector
   119  0004  30                    halt                           ;Stop execution if power falls too low
   120                          
   121  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   122                              // call	void_handler
   123  0008  7E                    reti
   124                          
   125  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   126                              // call	void_handler
   127  000C  7E                    reti
   128                          
   129  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   130                              // call	void_handler
   131  0010  7E                    reti
   132                          
   133  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   134                              // call	void_handler
   135  0014  7E                    reti
   136                          
   137  0018                        org   18h                      ;VC3 Interrupt Vector
   138                              // call	void_handler
   139  0018  7E                    reti
   140                          
   141  001C                        org   1Ch                      ;GPIO Interrupt Vector
   142                              // call	void_handler
   143  001C  7E                    reti
   144                          
   145  0020                        org   20h                      ;PSoC Block DBB00 Interrupt Vector
   146  0020  7D 6E84               ljmp	_Counter8_ISR
   147  0023  7E                    reti
   148                          
   149  0024                        org   24h                      ;PSoC Block DBB01 Interrupt Vector
   150                              // call	void_handler
   151  0024  7E                    reti
   152                          
   153  0028                        org   28h                      ;PSoC Block DCB02 Interrupt Vector
   154                              // call	void_handler
   155  0028  7E                    reti
   156                          
   157  002C                        org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
   158                              // call	void_handler
   159  002C  7E                    reti
   160                          
   161  0030                        org   30h                      ;PSoC Block DBB10 Interrupt Vector
   162  0030  7D 6E83               ljmp	_Counter8_ltrx_ISR
   163  0033  7E                    reti
   164                          
   165  0034                        org   34h                      ;PSoC Block DBB11 Interrupt Vector
   166                              // call	void_handler
   167  0034  7E                    reti
   168                          
   169  0038                        org   38h                      ;PSoC Block DCB12 Interrupt Vector
   170  0038  7D 70B0               ljmp	_LTRX_TX_ISR
   171  003B  7E                    reti
   172                          
   173  003C                        org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
   174  003C  7D 70B1               ljmp	_LTRX_RX_ISR
   175  003F  7E                    reti
   176                          
   177  0040                        org   40h                      ;PSoC Block DBB20 Interrupt Vector
   178                              // call	void_handler
   179  0040  7E                    reti
   180                          
   181  0044                        org   44h                      ;PSoC Block DBB21 Interrupt Vector
   182                              // call	void_handler
   183  0044  7E                    reti
   184                          
   185  0048                        org   48h                      ;PSoC Block DCB22 Interrupt Vector
   186                              // call	void_handler
   187  0048  7E                    reti
   188                          
   189  004C                        org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
   190  004C  7D 7FB2               ljmp	_Ticker_ISR
   191  004F  7E                    reti
   192                          
   193  0050                        org   50h                      ;PSoC Block DBB30 Interrupt Vector
   194                              // call	void_handler
   195  0050  7E                    reti
   196                          
   197  0054                        org   54h                      ;PSoC Block DBB31 Interrupt Vector
   198                              // call	void_handler
   199  0054  7E                    reti
   200                          
   201  0058                        org   58h                      ;PSoC Block DCB32 Interrupt Vector
   202  0058  7D 742A               ljmp	_OneWire_ISR
   203  005B  7E                    reti
   204                          
   205  005C                        org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
   206                              // call	void_handler
   207  005C  7E                    reti
   208                          
   209  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   210                              // call	void_handler
   211  0060  7E                    reti
   212                          
   213  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   214                              // call	void_handler
   215  0064  7E                    reti
   216                          
   217                          ;-----------------------------------------------------------------------------
   218                          ;  Start of Execution.
   219                          ;-----------------------------------------------------------------------------
   220                          ;  The Supervisory ROM SWBootReset function has already completed the
   221                          ;  calibrate1 process, loading trim values for 5 volt operation.
   222                          ;
   223                          
   224                          IF	(TOOLCHAIN & HITECH)
   225                           	AREA PD_startup(CODE, REL, CON)
   226                          ELSE
   227                              org 68h
   228                          ENDIF
   229  7D04                    __Start:
   230                          
   231                              ; initialize SMP values for voltage stabilization, if required,
   232                              ; leaving power-on reset (POR) level at the default (low) level, at
   233                              ; least for now. 
   234                              ;
   235  7D04  71 10                 M8C_SetBank1
   236  7D06  62 FA 00              mov reg[0FAh], 0				;Reset flash location
   237  7D09  62 E3 80              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   238  7D0C  70 EF                 M8C_SetBank0
   239                          
   240                              ; %53%20%46%46% Apply Erratum 001-05137 workaround
   241  7D0E  50 20                 mov   A, 20h
   242  7D10  28                    romx
   243  7D11  50 40                 mov   A, 40h
   244  7D13  28                    romx
   245  7D14  50 60                 mov   A, 60h
   246  7D16  28                    romx
   247                              ; %45%20%46%46% End workaround
   248                          
   249                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   250                              M8C_EnableWatchDog
   251                          ENDIF
   252                          
   253                          IF ( SELECT_32K )
   254                              or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
   255                          ELSE
   256  7D17  41 FE FB              and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
   257                          ENDIF
   258                          
   259                              ;---------------------------
   260                              ; Set up the Temporary stack
   261                              ;---------------------------
   262                              ; A temporary stack is set up for the SSC instructions.
   263                              ; The real stack start will be assigned later.
   264                              ;
   265  0080                    _stack_start:          equ 80h
   266  7D1A  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   267  7D1C  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   268                          
   269                              ;-----------------------------------------------
   270                              ; Set Power-related Trim & the AGND Bypass bit.
   271                              ;-----------------------------------------------
   272                          
   273                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   274                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
   277                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   278                            IF ( AGND_BYPASS )
   279                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   280                              ; The 5V trim has already been set, but we need to update the AGNDBYP
   281                              ; bit in the write-only BDG_TR register. Recalculate the register
   282                              ; value using the proper trim values.
   283                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   284                              M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
   285                            ENDIF
   286                           ENDIF
   287                          ENDIF ; 5.0 V Operation
   288                          
   289                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   290                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   291                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   292                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
   293                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   294  7D1D  5D D0                 M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
   295                           ENDIF
   296                          ENDIF ; 3.3 Volt Operation
   297                          
   298  7D41  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   299  7D44  55 F9 00              mov  [bSSC_KEYSP], 0
   300                          
   301                              ;---------------------------------------
   302                              ; Initialize Crystal Oscillator and PLL
   303                              ;---------------------------------------
   304                          
   305                          IF ( SELECT_32K & WAIT_FOR_32K )
   306                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   307                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   308                              ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
   309                              ; the ECO to stabilize.
   310                              ;
   311                              M8C_SetBank1
   312                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   313                              M8C_SetBank0
   314                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   315                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   316                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   317                          .WaitFor1s:
   318                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   319                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   320                                                                    ;   since interrupts are not globally enabled
   321                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   322                              ; Either no ECO, or waiting for stable clock is to be done in main
   323  7D47  71 10                 M8C_SetBank1
   324  7D49  62 E0 02              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   325  7D4C  70 EF                 M8C_SetBank0
   326  7D4E  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   327                          
   328                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   329                          
   330                          IF ( PLL_MODE )
   331                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   332                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   333                              ;
   334                              M8C_SetBank1
   335                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   336                              M8C_SetBank0
   337                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   338                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   339                          
   340                          .WaitFor16ms:
   341                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   342                              jz   .WaitFor16ms
   343                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   344                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   345                              M8C_SetBank0
   346                          
   347                          IF      ( WAIT_FOR_32K )
   348                          ELSE ; !( WAIT_FOR_32K )
   349                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   350                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   351                          ENDIF ;(WAIT_FOR_32K)
   352                          ENDIF ;(PLL_MODE)
   353                          
   354                              ;------------------------
   355                              ; Close CT leakage path.
   356                              ;------------------------
   357  7D51  62 71 05              mov   reg[ACB00CR0], 05h
   358  7D54  62 75 05              mov   reg[ACB01CR0], 05h
   359  7D57  62 79 05              mov   reg[ACB02CR0], 05h
   360  7D5A  62 7D 05              mov   reg[ACB03CR0], 05h
   361                          
   362                          
   363                          IF	(TOOLCHAIN & HITECH)
   364                              ;---------------------------------------------
   365                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   366                              ;---------------------------------------------
   367                          	global		__Lstackps
   368  7D5D  50 00             	mov     a,low __Lstackps
   369  7D5F  4E                	swap    a,sp
   370                          
   371                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   372  7D60  62 D1 07              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   373  7D63  62 D3 07              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374  7D66  62 D0 00              RAM_SETPAGE_CUR 0
   375  7D69  62 D5 00              RAM_SETPAGE_MVW 0
   376  7D6C  62 D4 00              RAM_SETPAGE_MVR 0
   377                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   378                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   379                              ELSE
   380  7D6F  71 80                 or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   381                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   382                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   383                          ELSE
   384                              ;---------------------------------------------
   385                              ; ImageCraft Enter the Large Memory Model, if applicable
   386                              ;---------------------------------------------
   387                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   388                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   389                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   390                              swap  A, SP
   391                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   392                              RAM_SETPAGE_CUR 0
   393                              RAM_SETPAGE_MVW 0
   394                              RAM_SETPAGE_MVR 0
   395                          
   396                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   397                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   398                            ELSE
   399                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   400                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   401                          ELSE
   402                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   403                              swap  SP, A
   404                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   405                          ENDIF ;	TOOLCHAIN
   406                          
   407                              ;-------------------------
   408                              ; Load Base Configuration
   409                              ;-------------------------
   410                              ; Load global parameter settings and load the user modules in the
   411                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   412                              ; to minimize start up time; (2) We may still need to play with the
   413                              ; Sleep Timer.
   414                              ;
   415  7D71  7C 7D8E               lcall LoadConfigInit
   416                          
   417                              ;-----------------------------------
   418                              ; Initialize C Run-Time Environment
   419                              ;-----------------------------------
   420                          IF ( C_LANGUAGE_SUPPORT )
   421                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   422                              mov  A,0                           ; clear the 'bss' segment to zero
   423                              mov  [__r0],<__bss_start
   424                          BssLoop:
   425                              cmp  [__r0],<__bss_end
   426                              jz   BssDone
   427                              mvi  [__r0],A
   428                              jmp  BssLoop
   429                          BssDone:
   430                              mov  A,>__idata_start              ; copy idata to data segment
   431                              mov  X,<__idata_start
   432                              mov  [__r0],<__data_start
   433                          IDataLoop:
   434                              cmp  [__r0],<__data_end
   435                              jz   C_RTE_Done
   436                              push A
   437                              romx
   438                              mvi  [__r0],A
   439                              pop  A
   440                              inc  X
   441                              adc  A,0
   442                              jmp  IDataLoop
   443                          
   444                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   445                          
   446                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   447                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   448                                                                 ; to use the Virtual Register page.
   449                          
   450                              ; Dereference the constant (flash) pointer pXIData to access the start
   451                              ; of the extended idata area, "xidata." Xidata follows the end of the
   452                              ; text segment and may have been relocated by the Code Compressor.
   453                              ;
   454                              mov   A, >__pXIData                ; Get the address of the flash
   455                              mov   X, <__pXIData                ;   pointer to the xidata area.
   456                              push  A
   457                              romx                               ; get the MSB of xidata's address
   458                              mov   [__r0], A
   459                              pop   A
   460                              inc   X
   461                              adc   A, 0
   462                              romx                               ; get the LSB of xidata's address
   463                              swap  A, X
   464                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   465                                                                 ;   XIData structure list in flash
   466                              jmp   .AccessStruct
   467                          
   468                              ; Unpack one element in the xidata "structure list" that specifies the
   469                              ; values of C variables. Each structure contains 3 member elements.
   470                              ; The first is a pointer to a contiguous block of RAM to be initial-
   471                              ; ized. Blocks are always 255 bytes or less in length and never cross
   472                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   473                              ; contains 0xFF. There are two formats for the struct depending on the
   474                              ; value in the second member element, an unsigned byte:
   475                              ; (1) If the value of the second element is non-zero, it represents
   476                              ; the 'size' of the block of RAM to be initialized. In this case, the
   477                              ; third member of the struct is an array of bytes of length 'size' and
   478                              ; the bytes are copied to the block of RAM.
   479                              ; (2) If the value of the second element is zero, the block of RAM is
   480                              ; to be cleared to zero. In this case, the third member of the struct
   481                              ; is an unsigned byte containing the number of bytes to clear.
   482                          
   483                          .AccessNextStructLoop:
   484                              inc   X                            ; pXIData++
   485                              adc   A, 0
   486                          .AccessStruct:                         ; Entry point for first block
   487                              ;
   488                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   489                              ;
   490                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   491                              push  A
   492                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   494                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   495                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   496                              pop   A                            ; restore pXIData to [A,X]
   497                              inc   X                            ; pXIData++
   498                              adc   A, 0
   499                              push  A
   500                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   501                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   502                              pop   A                            ; restore pXIData to [A,X]
   503                              inc   X                            ; pXIData++ (point to size)
   504                              adc   A, 0
   505                              push  A
   506                              romx                               ; Get the size (CPU.A <- *pXIData)
   507                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   508                              mov   [__r1], A                    ;             else downcount in __r1
   509                              pop   A                            ; restore pXIData to [A,X]
   510                          
   511                          .CopyNextByteLoop:
   512                              ; For each byte in the structure's array member, copy from flash to RAM.
   513                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   514                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   515                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   516                              ;
   517                              inc   X                            ; pXIData++ (point to next data byte)
   518                              adc   A, 0
   519                              push  A
   520                              romx                               ; Get the data value (CPU.A <- *pXIData)
   521                              mvi   [__r0], A                    ; Transfer the data to RAM
   522                              tst   [__r0], 0xff                 ; Check for page crossing
   523                              jnz   .CopyLoopTail                ;   No crossing, keep going
   524                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   525                              inc   A
   526                              mov   reg[ MVW_PP], A
   527                          .CopyLoopTail:
   528                              pop   A                            ; restore pXIData to [A,X]
   529                              dec   [__r1]                       ; End of this array in flash?
   530                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   531                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   532                          
   533                          .ClearRAMBlockToZero:
   534                              pop   A                            ; restore pXIData to [A,X]
   535                              inc   X                            ; pXIData++ (point to next data byte)
   536                              adc   A, 0
   537                              push  A
   538                              romx                               ; Get the run length (CPU.A <- *pXIData)
   539                              mov   [__r1], A                    ; Initialize downcounter
   540                              mov   A, 0                         ; Initialize source data
   541                          
   542                          .ClearRAMBlockLoop:
   543                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   544                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   545                              ;
   546                              mvi   [__r0], A                    ; Clear a byte
   547                              tst   [__r0], 0xff                 ; Check for page crossing
   548                              jnz   .ClearLoopTail               ;   No crossing, keep going
   549                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   550                              inc   A
   551                              mov   reg[ MVW_PP], A
   552                              mov   A, 0                         ; Restore the zero used for clearing
   553                          .ClearLoopTail:
   554                              dec   [__r1]                       ; Was this the last byte?
   555                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   556                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   557                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   558                          
   559                          .C_RTE_WrapUp:
   560                              pop   A                            ; balance stack
   561                          
   562                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   563                          
   564                          C_RTE_Done:
   565                          
   566                          ENDIF ; C_LANGUAGE_SUPPORT
   567                          
   568                              ;-------------------------------
   569                              ; Voltage Stabilization for SMP
   570                              ;-------------------------------
   571                          
   572                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   573                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   574                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   575                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   576                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   577                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   578                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   579                              M8C_SetBank1
   580                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   581                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   582                              M8C_SetBank0
   583                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   584                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   585                          .WaitFor2ms:
   586                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   587                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   588                          ENDIF ; SMP is operational
   589                          ENDIF ; 5.0V Operation
   590                          
   591                              ;-------------------------------
   592                              ; Set Power-On Reset (POR) Level
   593                              ;-------------------------------
   594  7D74  71 10                 M8C_SetBank1
   595                          
   596                          IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
   597                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
   598                           ELSE                                       ;    No, fast mode
   599                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
   600                                                                      ;       no, set midpoint POR in user code, if desired
   601                            ELSE ; 24HMz                              ;
   602                              or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
   603                            ENDIF ; 24MHz
   604                           ENDIF ; Slow Mode
   605                          ENDIF ; 5.0V Operation
   606                          
   607  7D76  70 EF                 M8C_SetBank0
   608                          
   609                              ;----------------------------
   610                              ; Wrap up and invoke "main"
   611                              ;----------------------------
   612                          
   613                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   614                              ; no interrupts should be enabled now, so may as well clear the register.
   615                              ;
   616  7D78  62 E0 00              mov  reg[INT_MSK0],0
   617                          
   618                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   619                              ; And put decimator in full mode so it does not consume too much current.
   620                              ;
   621  7D7B  71 10                 M8C_SetBank1
   622  7D7D  62 E0 00              mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   623  7D80  43 E7 80              or   reg[DEC_CR2],80h                    ; Put decimator in full mode
   624  7D83  70 EF                 M8C_SetBank0
   625                          
   626                              ; Global Interrupt are NOT enabled, this should be done in main().
   627                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   628                              ; Global Interrupts should be enabled as soon as possible in main().
   629                              ;
   630  7D85  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   631                                                             ; have been set during the boot process.
   632                          IF	(TOOLCHAIN & HITECH)
   633  7D88  7D 7F7B           	ljmp  startup                  ; Jump to C compiler startup code
   634                          ELSE
   635                          IF ENABLE_LJMP_TO_MAIN
   636                              ljmp  _main                    ; goto main (no return)
   637                          ELSE
   638                              lcall _main                    ; call main
   639                          .Exit:
   640                              jmp  .Exit                     ; Wait here after return till power-off or reset
   641                          ENDIF
   642                          ENDIF ; TOOLCHAIN
   643                          
   644                              ;---------------------------------
   645                              ; Library Access to Global Parms
   646                              ;---------------------------------
   647                              ;
   648  7D8B                     bGetPowerSetting:
   649  7D8B                    _bGetPowerSetting:
   650                              ; Returns value of POWER_SETTING in the A register.
   651                              ; No inputs. No Side Effects.
   652                              ;
   653  7D8B  50 08                 mov   A, POWER_SETTING
   654  7D8D  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:19 2009
              SELECT_32K_JUST 0000                       ACB00CR0 0071                       ACB01CR0 0075  
           _Counter8_ltrx_ISR 6E83                       ACB02CR0 0079                       ACB03CR0 007D  
                   __Lstackps 0700             C_LANGUAGE_SUPPORT 0000                    _Ticker_ISR 7FB2  
                POWER_SET_3V3 0008                  POWER_SETTING 0008                  POWER_SET_5V0 0010  
                     MAC0_CL0 00EE                       MAC0_CL1 00EF                       MAC1_CL0 00AE  
                     MAC1_CL1 00AF                          MAC_X 00EC                          MAC_Y 00ED  
             SLEEP_TIMER_JUST 0000                       CPU_SCR1 00FE                  _Counter8_ISR 6E84  
             bGetPowerSetting 7D8B                       INT_MSK0 00E0                       OPER_KEY 003A  
                     PLL_MODE 0000                         BDG_TR 00EA                         MAC0_X 00EC  
                       MAC0_Y 00ED                         MAC1_X 00AC                         MAC1_Y 00AD  
                       HITECH 0002                FLAG_PGMODE_10b 0080                         IDX_PP 00D3  
                       CUR_PP 00D0                         IMO_TR 00E8                         INT_VC 00E2  
               CPU_CLOCK_JUST 0000                         MVR_PP 00D4                         MVW_PP 00D5  
            _bGetPowerSetting 7D8B                   WAIT_FOR_32K 0001                         STK_PP 00D1  
                LVD_TBEN_JUST 0000                         VLT_CR 00E3          SWITCH_MODE_PUMP_JUST 0080  
                 _stack_start 0080                   _LTRX_RX_ISR 70B1                   _LTRX_TX_ISR 70B0  
    SYSTEM_LARGE_MEMORY_MODEL 0001         SYSTEM_MULTIPAGE_STACK 0000             POWER_SET_SLOW_IMO 0001  
                PLL_MODE_JUST 0000                        DEC_CR2 00E7      SSCTBL1_TRIM_IMO_3V_24MHZ 00F9  
                    TOOLCHAIN 0002                        MAC_CL0 00EE                        MAC_CL1 00EF  
                      OSC_CR0 00E0                        RES_WDT 00E3                WATCHDOG_ENABLE 0000  
                   bSSC_KEYSP 00F9           CPU_SCR1_ECO_ALLOWED 0004                 LoadConfigInit 7D8E  
          SSCTBL1_TRIM_BGR_3V 00F8                        __Start 7D04               AGND_BYPASS_JUST 0000  
                    bSSC_KEY1 00F8                     TABLE_READ 0006                   _OneWire_ISR 742A  
            OSC_CR0_CPU_12MHz 0002                        startup 7F7B              SYSTEM_STACK_PAGE 0007  
                FLAG_XIO_MASK 0010                     SELECT_32K 0000              TRIP_VOLTAGE_JUST 0000  
   SYSTEM_IDXPG_TRACKS_STK_PP 0000             bSSC_TABLE_TableId 00FA  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:21 2009
     1                          
     2                          	; HI-TECH C COMPILER (Cypress PSOC) V9.61PL1
     3                          	; Copyright (C) 1984-2008 HI-TECH Software
     4                          
     5                          	; Auto-generated runtime startup code for final link stage.
     6                          
     7                          	;
     8                          	; Compiler options:
     9                          	;
    10                          	; --asmlist --errformat --chip=CY8C29566 --WARN=0 --OPT=asm,9 \
    11                          	; -Oonewire_gateway -Moutput/onewire_gateway.mp --OUTDIR=./output \
    12                          	; ./obj/boot.obj ./obj/main.p1 ./obj/oo.p1 lib/libpsoc.lib \
    13                          	; lib/libpsoc.lpp \
    14                          	; C:/PROGRA~1/Cypress/Common/CYPRES~2/tools/lib/CY8C29000/cms.lib
    15                          	;
    16                          
    17                          
    18                          	processor	CY8C29566
    19                          	macro	M8C_ClearWDT
    20                          	mov reg[0xE3],0x38
    21  748D                    	endm
    22                          
    23                          	psect	PD_startup,class=CODE
    24                          	psect	init,class=CODE
    25                          	psect	end_init,class=CODE
    26                          	psect	powerup,class=CODE
    27                          	psect	vectors,ovrld,class=CODE
    28                          	psect	text,class=CODE
    29                          	psect	maintext,class=CODE
    30                          	psect	intrtext,class=CODE
    31                          	psect	fnauto,class=RAM,space=1
    32                          	psect	bss,class=RAM,space=1
    33                          	psect	InterruptRAM,class=RAM,space=1
    34                          	psect	cdata,class=ROM,space=0,reloc=256
    35                          	psect	psoc_config,class=ROM
    36                          	psect	UserModules,class=ROM
    37                          	psect	strings,class=ROM
    38                          	psect	SSCParmBlk,abs,ovrld,class=RAM,space=1
    39  00F8                    	org	0xF8
    40  00F8                    	blk	8
    41                          
    42                          	psect	stackps,class=RAM
    43                          	global	__Lstackps, __stack_start__
    44  0700                    __stack_start__:
    45                          	psect	bss0,class=RAM,space=1
    46                          	psect	nvram0,class=RAM,space=1
    47                          	psect	rbit0,bit,class=RAM,space=1
    48                          	psect	nvbit0,bit,class=RAM,space=1
    49                          	psect	ramdata0,class=RAM,space=1
    50                          	psect	romdata0,class=BANKROM,space=0
    51                          	psect	bss1,class=RAM,space=1
    52                          	psect	nvram1,class=RAM,space=1
    53                          	psect	rbit1,bit,class=RAM,space=1
    54                          	psect	nvbit1,bit,class=RAM,space=1
    55                          	psect	ramdata1,class=RAM,space=1
    56                          	psect	romdata1,class=BANKROM,space=0
    57                          	psect	bss2,class=RAM,space=1
    58                          	psect	nvram2,class=RAM,space=1
    59                          	psect	rbit2,bit,class=RAM,space=1
    60                          	psect	nvbit2,bit,class=RAM,space=1
    61                          	psect	ramdata2,class=RAM,space=1
    62                          	psect	romdata2,class=BANKROM,space=0
    63                          	psect	bss3,class=RAM,space=1
    64                          	psect	nvram3,class=RAM,space=1
    65                          	psect	rbit3,bit,class=RAM,space=1
    66                          	psect	nvbit3,bit,class=RAM,space=1
    67                          	psect	ramdata3,class=RAM,space=1
    68                          	psect	romdata3,class=BANKROM,space=0
    69                          	psect	bss4,class=RAM,space=1
    70                          	psect	nvram4,class=RAM,space=1
    71                          	psect	rbit4,bit,class=RAM,space=1
    72                          	psect	nvbit4,bit,class=RAM,space=1
    73                          	psect	ramdata4,class=RAM,space=1
    74                          	psect	romdata4,class=BANKROM,space=0
    75                          	psect	bss5,class=RAM,space=1
    76                          	psect	nvram5,class=RAM,space=1
    77                          	psect	rbit5,bit,class=RAM,space=1
    78                          	psect	nvbit5,bit,class=RAM,space=1
    79                          	psect	ramdata5,class=RAM,space=1
    80                          	psect	romdata5,class=BANKROM,space=0
    81                          	psect	bss6,class=RAM,space=1
    82                          	psect	nvram6,class=RAM,space=1
    83                          	psect	rbit6,bit,class=RAM,space=1
    84                          	psect	nvbit6,bit,class=RAM,space=1
    85                          	psect	ramdata6,class=RAM,space=1
    86                          	psect	romdata6,class=BANKROM,space=0
    87                          	psect	bss7,class=RAM,space=1
    88                          	psect	nvram7,class=RAM,space=1
    89                          	psect	rbit7,bit,class=RAM,space=1
    90                          	psect	nvbit7,bit,class=RAM,space=1
    91                          	psect	ramdata7,class=RAM,space=1
    92                          	psect	romdata7,class=BANKROM,space=0
    93                          
    94                          ;Declare areas defined in usermodules and other assembler code
    95                          	psect	InterruptRAM,class=RAM,space=1
    96                          	psect	LTRX_RAM,class=RAM,space=1
    97                          	psect	bss,class=RAM,space=1
    98                          
    99                          	global	start,startup,_main
   100                          	global	reset_vec,intlevel0,intlevel1,intlevel2
   101  0068                    intlevel0:
   102  0068                    intlevel1:
   103  0068                    intlevel2:		; for C funcs called from assembler
   104                          
   105                          	fnconf	fnauto,??,?
   106                          	fnroot	_main
   107  006C                    TMP_DR0	equ	108
   108  006D                    TMP_DR1	equ	109
   109  006E                    TMP_DR2	equ	110
   110  006F                    TMP_DR3	equ	111
   111  00D0                    CUR_PP	equ	208
   112  00D1                    STK_PP	equ	209
   113  00D3                    IDX_PP	equ	211
   114  00D4                    MVR_PP	equ	212
   115  00D5                    MVW_PP	equ	213
   116  00F7                    CPU_F	equ	247
   117                          	psect	vectors
   118  0000                    reset_vec:
   119  0000                    start:
   120                          	global	__Start
   121  0000  7D 7D04           	ljmp	__Start
   122                          
   123                          	psect	init
   124  7F7B                    startup:
   125  7F7B  62 E3 38          	M8C_ClearWDT
   126  7F7E  71 80             	or	f, 0x80	;select multiple RAM page mode
   127  7F80  70 BF             	and	f, 0xBF
   128                          
   129                          ;	Clear uninitialized variables in bank 0
   130                          	global	__Lbss0
   131  7F82  62 D0 00          	mov	reg[CUR_PP],0
   132  7F85  50 00             	mov	a,0
   133  7F87  53 00             	mov	[__Lbss0+0],a
   134                          
   135                          ;	Copy initialized data into bank 1
   136                          	global	__Lromdata1,__Lramdata1
   137  7F89  62 D1 01          	mov	reg[STK_PP],1
   138  7F8C  57 00             	mov	x,low __Lromdata1
   139  7F8E  50 00             	mov	a,low __Lramdata1
   140  7F90  4E                	swap	a,sp
   141  7F91                    dataloop1:
   142  7F91  50 01             	mov	a,high __Lromdata1
   143  7F93  28                	romx
   144  7F94  08                	push	a
   145  7F95  75                	inc	x
   146  7F96  5B                		mov	a,x
   147  7F97  39 00             cmp	a,low (__Lromdata1+256)
   148  7F99  BFF7              	jnz	dataloop1
   149                          
   150                          ;	Clear uninitialized variables in bank 2
   151                          	global	__Lbss2
   152  7F9B  62 D1 02          	mov	reg[STK_PP],2
   153  7F9E  50 00             	mov	a,low __Lbss2
   154  7FA0  4E                	swap	a,sp
   155  7FA1  50 00             	mov	a,0
   156  7FA3  57 27             	mov	x,39
   157  7FA5                    bssloop2:
   158  7FA5  08                	push	a
   159  7FA6  79                	dec	x
   160  7FA7  BFFD              	jnz	bssloop2
   161  7FA9  62 D1 07          	mov	reg[STK_PP],7
   162  7FAC  50 00             	mov	a,low __Lstackps
   163  7FAE  4E                	swap	a,sp
   164                          
   165  7FAF  7D 7C6B           	ljmp	_main
HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:21 2009
    __Lramdata1 0100       __Lstackps 0700      __Lromdata1 0100            _main 7C6B            start 0000        dataloop1 7F91  
         CUR_PP 00D0           STK_PP 00D1        intlevel0 0068        intlevel1 0068        intlevel2 0068        reset_vec 0000  
       bssloop2 7FA5          __Lbss0 0000          __Lbss2 0200          __Start 7D04          startup 7F7B  __stack_start__ 0700  
