

HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
                                                                                                           Thu Feb 05 17:14:19 2009


     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       2 August 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C29566
    11                          ;
    12                          ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0000                    CPU_CLOCK:				equ	0h		;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
    24  0000                    CPU_CLOCK_JUST:			equ	0h		;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31  0000                    SLEEP_TIMER:			equ	0h		;Sleep Timer value
    32  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    33  0000                    SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
    34  0001                    SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
    35  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
    36  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    37  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    38  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    39  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    40  0000                    TRIP_VOLTAGE:			equ	0h   ;Trip Voltage value
    41  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    42  0000                    TRIP_VOLTAGE_JUST:      equ 0h  ;Trip Voltage justified
    43                          
    44  0008                    POWER_SETTING:			equ	8h
    45  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    46  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    47  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    48  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    49  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    50  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    51  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    52  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    53  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    54  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    55                          
    56  0001                    COMM_RX_PRESENT:		equ	1		;1 = TRUE
    57  0000                    WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
    58                          
    59  0003                    CLOCK_DIV_VC1:			equ	3h	;VC1 clock divider
    60  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    61  0030                    CLOCK_DIV_VC1_JUST:		equ	30h	;VC1 clock divider justified
    62  0000                    CLOCK_DIV_VC2:			equ	0h	;VC2 clock divider
    63  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    64  0000                    CLOCK_DIV_VC2_JUST:		equ	0h	;VC2 clock divider justified
    65  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    66  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    67  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    68  0002                    CLOCK_DIV_VC3:			equ	2h	;VC3 clock divider
    69  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    70  0002                    CLOCK_DIV_VC3_JUST:		equ	2h	;VC3 clock divider justified
    71  0000                    ANALOG_BUFFER_PWR:		equ	0h	;Analog buffer power level
    72  0001                    ANALOG_BUFFER_PWR_MASK:	equ	1h	;Analog buffer power level mask
    73  0000                    ANALOG_BUFFER_PWR_JUST:	equ	0h	;Analog buffer power level justified
    74  0005                    ANALOG_POWER:			equ	5h	;Analog power control
    75  0007                    ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
    76  0005                    ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
    77  0000                    OP_AMP_BIAS:			equ	0h	;Op amp bias level
    78  0040                    OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
    79  0000                    OP_AMP_BIAS_JUST:		equ	0h	;Op amp bias level justified
    80  0000                    REF_MUX:				equ	0h	;Ref mux setting
    81  0038                    REF_MUX_MASK:			equ	38h	;Ref mux setting mask
    82  0000                    REF_MUX_JUST:			equ	0h	;Ref mux setting justified
    83  0000                    AGND_BYPASS:				equ	0h	;AGndBypass setting
    84  0040                    AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
    85  0000                    AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
    86  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    87  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    88  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    89  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    90  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    91  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    92                          ;
    93                          ; register initial values
    94                          ;
    95  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    96  0005                    PORT_0_GLOBAL_SELECT:	equ 5h	;Port 0 global select register (PRT0GS)
    97  0006                    PORT_0_DRIVE_0:			equ 6h	;Port 0 drive mode 0 register (PRT0DM0)
    98  00FB                    PORT_0_DRIVE_1:			equ fbh	;Port 0 drive mode 1 register (PRT0DM1)
    99  00F8                    PORT_0_DRIVE_2:			equ f8h	;Port 0 drive mode 2 register (PRT0DM2)
   100  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
   101  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
   102  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
   103  0044                    PORT_1_GLOBAL_SELECT:	equ 44h	;Port 1 global select register (PRT1GS)
   104  0040                    PORT_1_DRIVE_0:			equ 40h	;Port 1 drive mode 0 register (PRT1DM0)
   105  00BF                    PORT_1_DRIVE_1:			equ bfh	;Port 1 drive mode 1 register (PRT1DM1)
   106  00BB                    PORT_1_DRIVE_2:			equ bbh	;Port 1 drive mode 2 register (PRT1DM2)
   107  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
   108  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   109  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   110  0000                    PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
   111  0000                    PORT_2_DRIVE_0:			equ 0h	;Port 2 drive mode 0 register (PRT2DM0)
   112  00FF                    PORT_2_DRIVE_1:			equ ffh	;Port 2 drive mode 1 register (PRT2DM1)
   113  00FF                    PORT_2_DRIVE_2:			equ ffh	;Port 2 drive mode 2 register (PRT2DM2)
   114  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   115  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   116  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   117  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   118  0080                    PORT_3_DRIVE_0:			equ 80h	;Port 3 drive mode 0 register (PRT3DM0)
   119  007F                    PORT_3_DRIVE_1:			equ 7fh	;Port 3 drive mode 1 register (PRT3DM1)
   120  007F                    PORT_3_DRIVE_2:			equ 7fh	;Port 3 drive mode 2 register (PRT3DM2)
   121  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   122  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   123  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
   124  0000                    PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
   125  0005                    PORT_4_DRIVE_0:			equ 5h	;Port 4 drive mode 0 register (PRT4DM0)
   126  00FB                    PORT_4_DRIVE_1:			equ fbh	;Port 4 drive mode 1 register (PRT4DM1)
   127  00FF                    PORT_4_DRIVE_2:			equ ffh	;Port 4 drive mode 2 register (PRT4DM2)
   128  0000                    PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
   129  0000                    PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
   130  0000                    PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
   131  0000                    PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
   132  0000                    PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
   133  0000                    PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
   134  0000                    PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
   135  0000                    PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
   136  0000                    PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
   137  0000                    PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
   138  0000                    PORT_6_GLOBAL_SELECT:	equ 0h	;Port 6 global select register (PRT6GS)
   139  0000                    PORT_6_DRIVE_0:			equ 0h	;Port 6 drive mode 0 register (PRT6DM0)
   140  0000                    PORT_6_DRIVE_1:			equ 0h	;Port 6 drive mode 1 register (PRT6DM1)
   141  0000                    PORT_6_DRIVE_2:			equ 0h	;Port 6 drive mode 2 register (PRT6DM2)
   142  0000                    PORT_6_INTENABLE:		equ 0h	;Port 6 interrupt enable register (PRT6IE)
   143  0000                    PORT_6_INTCTRL_0:		equ 0h	;Port 6 interrupt control 0 register (PRT6IC0)
   144  0000                    PORT_6_INTCTRL_1:		equ 0h	;Port 6 interrupt control 1 register (PRT6IC1)
   145  0000                    PORT_7_GLOBAL_SELECT:	equ 0h	;Port 7 global select register (PRT7GS)
   146  0000                    PORT_7_DRIVE_0:			equ 0h	;Port 7 drive mode 0 register (PRT7DM0)
   147  0000                    PORT_7_DRIVE_1:			equ 0h	;Port 7 drive mode 1 register (PRT7DM1)
   148  0000                    PORT_7_DRIVE_2:			equ 0h	;Port 7 drive mode 2 register (PRT7DM2)
   149  0000                    PORT_7_INTENABLE:		equ 0h	;Port 7 interrupt enable register (PRT7IE)
   150  0000                    PORT_7_INTCTRL_0:		equ 0h	;Port 7 interrupt control 0 register (PRT7IC0)
   151  0000                    PORT_7_INTCTRL_1:		equ 0h	;Port 7 interrupt control 1 register (PRT7IC1)
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- M8C29000 Microcontroller Family System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2004 Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 29xxx Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 2, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;;=============================================================================
    16                          ;; Definition of abbreviations used in the descriptions below
    17                          ;;  (RW)   The register or bit supports reads and writes
    18                          ;;  (W)    The register or bit is write-only
    19                          ;;  (R)    The register or bit is read-only
    20                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    21                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    22                          ;;         writing a 1 will have no effect.
    23                          ;;=============================================================================
    24                          
    25                          ;;=============================================================================
    26                          ;;      System Registers
    27                          ;;=============================================================================
    28                          
    29                          ;----------------------------
    30                          ;  Flag Register Bit Fields
    31                          ;----------------------------
    32  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    33  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    34  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    35  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    36  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    37  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    38  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    39  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    40  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    41  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    42  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    43  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    44  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    45  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    46                          
    47                          
    48                          ;;=============================================================================
    49                          ;;      Register Space, Bank 0
    50                          ;;=============================================================================
    51                          
    52                          ;------------------------------------------------
    53                          ;  Port Registers
    54                          ;  Note: Also see this address range in Bank 1.
    55                          ;------------------------------------------------
    56                          ; Port 0
    57  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    58  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    59  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    60  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    61                          ; Port 1
    62  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    63  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    64  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    65  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    66                          ; Port 2
    67  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    68  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    69  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    70  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    71                          ; Port 3
    72  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    73  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    74  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    75  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    76                          ; Port 4
    77  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    78  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    79  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    80  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    81                          ; Port 5
    82  0014                    PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
    83  0015                    PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
    84  0016                    PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
    85  0017                    PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
    86                          ; Port 6
    87  0018                    PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
    88  0019                    PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
    89  001A                    PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
    90  001B                    PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
    91                          ; Port 7
    92  001C                    PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
    93  001D                    PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
    94  001E                    PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
    95  001F                    PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
    96                          
    97                          ;------------------------------------------------
    98                          ;  Digital PSoC(tm) block Registers
    99                          ;  Note: Also see this address range in Bank 1.
   100                          ;------------------------------------------------
   101                          ; Digital PSoC block 00, Basic Type B
   102  0020                    DBB00DR0:     equ 20h          ; data register 0                          (#)
   103  0021                    DBB00DR1:     equ 21h          ; data register 1                          (W)
   104  0022                    DBB00DR2:     equ 22h          ; data register 2                          (RW)
   105  0023                    DBB00CR0:     equ 23h          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 01, Basic Type B
   108  0024                    DBB01DR0:     equ 24h          ; data register 0                          (#)
   109  0025                    DBB01DR1:     equ 25h          ; data register 1                          (W)
   110  0026                    DBB01DR2:     equ 26h          ; data register 2                          (RW)
   111  0027                    DBB01CR0:     equ 27h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 02, Communications Type B
   114  0028                    DCB02DR0:     equ 28h          ; data register 0                          (#)
   115  0029                    DCB02DR1:     equ 29h          ; data register 1                          (W)
   116  002A                    DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
   117  002B                    DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 03, Communications Type B
   120  002C                    DCB03DR0:     equ 2Ch          ; data register 0                          (#)
   121  002D                    DCB03DR1:     equ 2Dh          ; data register 1                          (W)
   122  002E                    DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
   123  002F                    DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 10, Basic Type B
   126  0030                    DBB10DR0:     equ 30h          ; data register 0                          (#)
   127  0031                    DBB10DR1:     equ 31h          ; data register 1                          (W)
   128  0032                    DBB10DR2:     equ 32h          ; data register 2                          (RW)
   129  0033                    DBB10CR0:     equ 33h          ; control & status register 0              (#)
   130                          
   131                          ; Digital PSoC block 11, Basic Type B
   132  0034                    DBB11DR0:     equ 34h          ; data register 0                          (#)
   133  0035                    DBB11DR1:     equ 35h          ; data register 1                          (W)
   134  0036                    DBB11DR2:     equ 36h          ; data register 2                          (RW)
   135  0037                    DBB11CR0:     equ 37h          ; control & status register 0              (#)
   136                          
   137                          ; Digital PSoC block 12, Communications Type B
   138  0038                    DCB12DR0:     equ 38h          ; data register 0                          (#)
   139  0039                    DCB12DR1:     equ 39h          ; data register 1                          (W)
   140  003A                    DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
   141  003B                    DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
   142                          
   143                          ; Digital PSoC block 13, Communications Type B
   144  003C                    DCB13DR0:     equ 3Ch          ; data register 0                          (#)
   145  003D                    DCB13DR1:     equ 3Dh          ; data register 1                          (W)
   146  003E                    DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
   147  003F                    DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
   148                          
   149                          ; Digital PSoC block 20, Basic Type B
   150  0040                    DBB20DR0:     equ 40h          ; data register 0                          (#)
   151  0041                    DBB20DR1:     equ 41h          ; data register 1                          (W)
   152  0042                    DBB20DR2:     equ 42h          ; data register 2                          (RW)
   153  0043                    DBB20CR0:     equ 43h          ; control & status register 0              (#)
   154                          
   155                          ; Digital PSoC block 21, Basic Type B
   156  0044                    DBB21DR0:     equ 44h          ; data register 0                          (#)
   157  0045                    DBB21DR1:     equ 45h          ; data register 1                          (W)
   158  0046                    DBB21DR2:     equ 46h          ; data register 2                          (RW)
   159  0047                    DBB21CR0:     equ 47h          ; control & status register 0              (#)
   160                          
   161                          ; Digital PSoC block 22, Communications Type B
   162  0048                    DCB22DR0:     equ 48h          ; data register 0                          (#)
   163  0049                    DCB22DR1:     equ 49h          ; data register 1                          (W)
   164  004A                    DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
   165  004B                    DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
   166                          
   167                          ; Digital PSoC block 23, Communications Type B
   168  004C                    DCB23DR0:     equ 4Ch          ; data register 0                          (#)
   169  004D                    DCB23DR1:     equ 4Dh          ; data register 1                          (W)
   170  004E                    DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
   171  004F                    DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
   172                          
   173                          ; Digital PSoC block 30, Basic Type B
   174  0050                    DBB30DR0:     equ 50h          ; data register 0                          (#)
   175  0051                    DBB30DR1:     equ 51h          ; data register 1                          (W)
   176  0052                    DBB30DR2:     equ 52h          ; data register 2                          (RW)
   177  0053                    DBB30CR0:     equ 53h          ; control & status register 0              (#)
   178                          
   179                          ; Digital PSoC block 31, Basic Type B
   180  0054                    DBB31DR0:     equ 54h          ; data register 0                          (#)
   181  0055                    DBB31DR1:     equ 55h          ; data register 1                          (W)
   182  0056                    DBB31DR2:     equ 56h          ; data register 2                          (RW)
   183  0057                    DBB31CR0:     equ 57h          ; control & status register 0              (#)
   184                          
   185                          ; Digital PSoC block 32, Communications Type B
   186  0058                    DCB32DR0:     equ 58h          ; data register 0                          (#)
   187  0059                    DCB32DR1:     equ 59h          ; data register 1                          (W)
   188  005A                    DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
   189  005B                    DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
   190                          
   191                          ; Digital PSoC block 33, Communications Type B
   192  005C                    DCB33DR0:     equ 5Ch          ; data register 0                          (#)
   193  005D                    DCB33DR1:     equ 5Dh          ; data register 1                          (W)
   194  005E                    DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
   195  005F                    DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
   196                          
   197                          ;-------------------------------------
   198                          ;  Analog Resource Control Registers
   199                          ;-------------------------------------
   200  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   201  00C0                    AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
   202  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   203  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   204  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   205                          
   206  0063                    ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
   207  0040                    ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
   208  0038                    ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
   209  0007                    ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
   210  0004                    ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
   211  0003                    ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
   212                          
   213  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
   214  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   215  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   216  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   217  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   218  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   219  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   220  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   221  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   222                          
   223  0065                    ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
   224  0070                    ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
   225  0008                    ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
   226  0006                    ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
   227  0001                    ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
   228                          
   229  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   230  0080                    CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
   231  0040                    CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
   232  0020                    CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
   233  0010                    CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
   234                          
   235                          ;---------------------------------------------------
   236                          ;  Analog PSoC block Registers
   237                          ;
   238                          ;  Note: the following registers are mapped into
   239                          ;  both register bank 0 AND register bank 1.
   240                          ;---------------------------------------------------
   241                          
   242                          ; Continuous Time PSoC block Type B Row 0 Col 0
   243  0070                    ACB00CR3:     equ 70h          ; Control register 3                       (RW)
   244  0071                    ACB00CR0:     equ 71h          ; Control register 0                       (RW)
   245  0072                    ACB00CR1:     equ 72h          ; Control register 1                       (RW)
   246  0073                    ACB00CR2:     equ 73h          ; Control register 2                       (RW)
   247                          
   248                          ; Continuous Time PSoC block Type B Row 0 Col 1
   249  0074                    ACB01CR3:     equ 74h          ; Control register 3                       (RW)
   250  0075                    ACB01CR0:     equ 75h          ; Control register 0                       (RW)
   251  0076                    ACB01CR1:     equ 76h          ; Control register 1                       (RW)
   252  0077                    ACB01CR2:     equ 77h          ; Control register 2                       (RW)
   253                          
   254                          ; Continuous Time PSoC block Type B Row 0 Col 2
   255  0078                    ACB02CR3:     equ 78h          ; Control register 3                       (RW)
   256  0079                    ACB02CR0:     equ 79h          ; Control register 0                       (RW)
   257  007A                    ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
   258  007B                    ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
   259                          
   260                          ; Continuous Time PSoC block Type B Row 0 Col 3
   261  007C                    ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
   262  007D                    ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
   263  007E                    ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
   264  007F                    ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
   265                          
   266                          ; Switched Cap PSoC blockType C Row 1 Col 0
   267  0080                    ASC10CR0:     equ 80h          ; Control register 0                       (RW)
   268  0081                    ASC10CR1:     equ 81h          ; Control register 1                       (RW)
   269  0082                    ASC10CR2:     equ 82h          ; Control register 2                       (RW)
   270  0083                    ASC10CR3:     equ 83h          ; Control register 3                       (RW)
   271                          
   272                          ; Switched Cap PSoC blockType D Row 1 Col 1
   273  0084                    ASD11CR0:     equ 84h          ; Control register 0                       (RW)
   274  0085                    ASD11CR1:     equ 85h          ; Control register 1                       (RW)
   275  0086                    ASD11CR2:     equ 86h          ; Control register 2                       (RW)
   276  0087                    ASD11CR3:     equ 87h          ; Control register 3                       (RW)
   277                          
   278                          ; Switched Cap PSoC blockType C Row 1 Col 2
   279  0088                    ASC12CR0:     equ 88h          ; Control register 0                       (RW)
   280  0089                    ASC12CR1:     equ 89h          ; Control register 1                       (RW)
   281  008A                    ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
   282  008B                    ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
   283                          
   284                          ; Switched Cap PSoC blockType D Row 1 Col 3
   285  008C                    ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
   286  008D                    ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
   287  008E                    ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
   288  008F                    ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
   289                          
   290                          ; Switched Cap PSoC blockType D Row 2 Col 0
   291  0090                    ASD20CR0:     equ 90h          ; Control register 0                       (RW)
   292  0091                    ASD20CR1:     equ 91h          ; Control register 1                       (RW)
   293  0092                    ASD20CR2:     equ 92h          ; Control register 2                       (RW)
   294  0093                    ASD20CR3:     equ 93h          ; Control register 3                       (RW)
   295                          
   296                          ; Switched Cap PSoC blockType C Row 2 Col 1
   297  0094                    ASC21CR0:     equ 94h          ; Control register 0                       (RW)
   298  0095                    ASC21CR1:     equ 95h          ; Control register 1                       (RW)
   299  0096                    ASC21CR2:     equ 96h          ; Control register 2                       (RW)
   300  0097                    ASC21CR3:     equ 97h          ; Control register 3                       (RW)
   301                          
   302                          ; Switched Cap PSoC blockType D Row 2 Col 2
   303  0098                    ASD22CR0:     equ 98h          ; Control register 0                       (RW)
   304  0099                    ASD22CR1:     equ 99h          ; Control register 1                       (RW)
   305  009A                    ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
   306  009B                    ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
   307                          
   308                          ; Switched Cap PSoC blockType C Row 2 Col 3
   309  009C                    ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
   310  009D                    ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
   311  009E                    ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
   312  009F                    ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
   313                          
   314                          ;-----------------------------------------------
   315                          ;  Global General Purpose Data Registers
   316                          ;-----------------------------------------------
   317  006C                    TMP0_DR:      equ 6Ch          ; deprecated do not use
   318  006D                    TMP1_DR:      equ 6Dh          ; deprecated do not use
   319  006E                    TMP2_DR:      equ 6Eh          ; deprecated do not use
   320  006F                    TMP3_DR:      equ 6Fh          ; deprecated do not use
   321                          
   322  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   323  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   324  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   325  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   326                          
   327                          ;------------------------------------------------
   328                          ;  Row Digital Interconnects
   329                          ;
   330                          ;  Note: the following registers are mapped into
   331                          ;  both register bank 0 AND register bank 1.
   332                          ;------------------------------------------------
   333                          
   334  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   335  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   336  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   337  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   338  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   339  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   340  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   341                          
   342  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   343  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   344  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   345  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   346  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   347  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   348  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   349                          
   350  00C0                    RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
   351  00C1                    RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
   352  00C2                    RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
   353  00C3                    RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
   354  00C4                    RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
   355  00C5                    RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
   356  00C6                    RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
   357                          
   358  00C8                    RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
   359  00C9                    RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
   360  00CA                    RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
   361  00CB                    RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
   362  00CC                    RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
   363  00CD                    RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
   364  00CE                    RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
   365                          
   366                          ;-----------------------------------------------
   367                          ;  Ram Page Pointers
   368                          ;-----------------------------------------------
   369  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   370  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   371  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   372  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   373  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   374                          
   375                          ;------------------------------------------------
   376                          ;  I2C Configuration Registers
   377                          ;------------------------------------------------
   378  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   379  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   380  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   381  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   382  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   383  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   384  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   385  000C                    I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
   386  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   387  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   388  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   389                          
   390  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   391  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   392  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   393  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   394  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   395  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   396  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   397  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   398  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   399                          
   400  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   401                          
   402  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   403  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   404  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   405  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   406  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   407                          
   408                          ;------------------------------------------------
   409                          ;  System and Global Resource Registers
   410                          ;------------------------------------------------
   411  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   412                                                         ; Use INT_MSK0 bit field masks
   413  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   414                                                         ; Use INT_MSK1 bit field masks
   415  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   416                                                         ; Use INT_MSK2 bit field masks
   417  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   418                                                         ; Use INT_MSK3 bit field masks
   419                          
   420  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   421  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   422  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   423                          
   424  00DF                    INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
   425  0080                    INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
   426  0040                    INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
   427  0020                    INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
   428  0010                    INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
   429  0008                    INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
   430  0004                    INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
   431  0002                    INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
   432  0001                    INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
   433                          
   434  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   435  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   436  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   437  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   438  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   439  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   440  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   441  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   442  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   443                          
   444  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   445  0080                    INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
   446  0040                    INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
   447  0020                    INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
   448  0010                    INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
   449  0008                    INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
   450  0004                    INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
   451  0002                    INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
   452  0001                    INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
   453                          
   454  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   455  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   456                          
   457                          ; DECIMATOR Registers
   458  00E4                    DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
   459  00E5                    DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
   460  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   461  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   462                                                         ; Also see DEC_CR2 in bank 1
   463                          
   464                          ; Multiplier and MAC (Multiply/Accumulate) Unit
   465                          //   Compatibility Set: Maps onto MAC0
   466  00E8                    MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
   467  00E9                    MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
   468  00EA                    MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
   469  00EB                    MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
   470  00EC                    MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
   471  00EC                    ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
   472  00ED                    MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
   473  00ED                    ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
   474  00EE                    MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
   475  00EE                    ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
   476  00EF                    MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
   477  00EF                    ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
   478                          
   479                          // Multiply/Accumulate Unit 0
   480  00E8                    MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
   481  00E9                    MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
   482  00EA                    MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
   483  00EB                    MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
   484  00EC                    MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
   485  00EC                    ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
   486  00ED                    MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
   487  00ED                    ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
   488  00EE                    MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
   489  00EE                    ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
   490  00EF                    MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
   491  00EF                    ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
   492                          
   493                          // Multiply/Accumulate Unit 1
   494  00A8                    MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
   495  00A9                    MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
   496  00AA                    MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
   497  00AB                    MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
   498  00AC                    MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
   499  00AC                    ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
   500  00AD                    MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
   501  00AD                    ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
   502  00AE                    MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
   503  00AE                    ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
   504  00AF                    MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
   505  00AF                    ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
   506                          
   507                          ;------------------------------------------------------
   508                          ;  System Status and Control Registers
   509                          ;
   510                          ;  Note: The following registers are mapped into both
   511                          ;        register bank 0 AND register bank 1.
   512                          ;------------------------------------------------------
   513  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   514                                                             ; Use FLAG_ masks defined at top of file
   515                          
   516  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   517  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
   518  0010                    CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
   519  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   520  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   521  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   522                          
   523  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   524  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   525  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   526  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   527  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   528  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   529                          
   530                          
   531                          ;;=============================================================================
   532                          ;;      Register Space, Bank 1
   533                          ;;=============================================================================
   534                          
   535                          ;------------------------------------------------
   536                          ;  Port Registers
   537                          ;  Note: Also see this address range in Bank 0.
   538                          ;------------------------------------------------
   539                          ; Port 0
   540  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   541  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   542  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   543  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   544                          
   545                          ; Port 1
   546  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   547  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   548  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   549  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   550                          
   551                          ; Port 2
   552  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   553  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   554  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   555  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   556                          
   557                          ; Port 3
   558  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   559  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   560  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   561  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   562                          
   563                          ; Port 4
   564  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   565  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   566  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   567  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   568                          
   569                          ; Port 5
   570  0014                    PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
   571  0015                    PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
   572  0016                    PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
   573  0017                    PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
   574                          
   575                          ; Port 6
   576  0018                    PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
   577  0019                    PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
   578  001A                    PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
   579  001B                    PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
   580                          
   581                          ; Port 7
   582  001C                    PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
   583  001D                    PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
   584  001E                    PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
   585  001F                    PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
   586                          
   587                          ;------------------------------------------------
   588                          ;  Digital PSoC(tm) block Registers
   589                          ;  Note: Also see this address range in Bank 0.
   590                          ;------------------------------------------------
   591                          
   592                          ; Digital PSoC block 00, Basic Type B
   593  0020                    DBB00FN:      equ 20h          ; Function Register                        (RW)
   594  0021                    DBB00IN:      equ 21h          ;    Input Register                        (RW)
   595  0022                    DBB00OU:      equ 22h          ;   Output Register                        (RW)
   596                          
   597                          ; Digital PSoC block 01, Basic Type B
   598  0024                    DBB01FN:      equ 24h          ; Function Register                        (RW)
   599  0025                    DBB01IN:      equ 25h          ;    Input Register                        (RW)
   600  0026                    DBB01OU:      equ 26h          ;   Output Register                        (RW)
   601                          
   602                          ; Digital PSoC block 02, Communications Type B
   603  0028                    DCB02FN:      equ 28h          ; Function Register                        (RW)
   604  0029                    DCB02IN:      equ 29h          ;    Input Register                        (RW)
   605  002A                    DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
   606                          
   607                          ; Digital PSoC block 03, Communications Type B
   608  002C                    DCB03FN:      equ 2Ch          ; Function Register                        (RW)
   609  002D                    DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
   610  002E                    DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
   611                          
   612                          ; Digital PSoC block 10, Basic Type B
   613  0030                    DBB10FN:      equ 30h          ; Function Register                        (RW)
   614  0031                    DBB10IN:      equ 31h          ;    Input Register                        (RW)
   615  0032                    DBB10OU:      equ 32h          ;   Output Register                        (RW)
   616                          
   617                          ; Digital PSoC block 11, Basic Type B
   618  0034                    DBB11FN:      equ 34h          ; Function Register                        (RW)
   619  0035                    DBB11IN:      equ 35h          ;    Input Register                        (RW)
   620  0036                    DBB11OU:      equ 36h          ;   Output Register                        (RW)
   621                          
   622                          ; Digital PSoC block 12, Communications Type B
   623  0038                    DCB12FN:      equ 38h          ; Function Register                        (RW)
   624  0039                    DCB12IN:      equ 39h          ;    Input Register                        (RW)
   625  003A                    DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
   626                          
   627                          ; Digital PSoC block 13, Communications Type B
   628  003C                    DCB13FN:      equ 3Ch          ; Function Register                        (RW)
   629  003D                    DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
   630  003E                    DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
   631                          
   632                          ; Digital PSoC block 20, Basic Type B
   633  0040                    DBB20FN:      equ 40h          ; Function Register                        (RW)
   634  0041                    DBB20IN:      equ 41h          ;    Input Register                        (RW)
   635  0042                    DBB20OU:      equ 42h          ;   Output Register                        (RW)
   636                          
   637                          ; Digital PSoC block 21, Basic Type B
   638  0044                    DBB21FN:      equ 44h          ; Function Register                        (RW)
   639  0045                    DBB21IN:      equ 45h          ;    Input Register                        (RW)
   640  0046                    DBB21OU:      equ 46h          ;   Output Register                        (RW)
   641                          
   642                          ; Digital PSoC block 22, Communications Type B
   643  0048                    DCB22FN:      equ 48h          ; Function Register                        (RW)
   644  0049                    DCB22IN:      equ 49h          ;    Input Register                        (RW)
   645  004A                    DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
   646                          
   647                          ; Digital PSoC block 23, Communications Type B
   648  004C                    DCB23FN:      equ 4Ch          ; Function Register                        (RW)
   649  004D                    DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
   650  004E                    DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
   651                          
   652                          ; Digital PSoC block 30, Basic Type B
   653  0050                    DBB30FN:      equ 50h          ; Function Register                        (RW)
   654  0051                    DBB30IN:      equ 51h          ;    Input Register                        (RW)
   655  0052                    DBB30OU:      equ 52h          ;   Output Register                        (RW)
   656                          
   657                          ; Digital PSoC block 31, Basic Type B
   658  0054                    DBB31FN:      equ 54h          ; Function Register                        (RW)
   659  0055                    DBB31IN:      equ 55h          ;    Input Register                        (RW)
   660  0056                    DBB31OU:      equ 56h          ;   Output Register                        (RW)
   661                          
   662                          ; Digital PSoC block 32, Communications Type B
   663  0058                    DCB32FN:      equ 58h          ; Function Register                        (RW)
   664  0059                    DCB32IN:      equ 59h          ;    Input Register                        (RW)
   665  005A                    DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
   666                          
   667                          ; Digital PSoC block 33, Communications Type B
   668  005C                    DCB33FN:      equ 5Ch          ; Function Register                        (RW)
   669  005D                    DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
   670  005E                    DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
   671                          
   672                          ;------------------------------------------------
   673                          ;  System and Global Resource Registers
   674                          ;  Note: Also see this address range in Bank 0.
   675                          ;------------------------------------------------
   676                          
   677  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   678  00C0                    CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
   679  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   680  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   681  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   682                          
   683  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   684  0040                    CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
   685  0038                    CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
   686  0007                    CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
   687                          
   688  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   689  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   690  0040                    ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
   691  0020                    ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
   692  0010                    ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
   693  0008                    ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
   694  0004                    ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
   695  0002                    ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
   696  0001                    ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
   697                          
   698  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   699  0070                    AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
   700  0007                    AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
   701                          
   702  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   703  0070                    AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
   704  0007                    AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
   705                          
   706  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   707  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   708  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   709                          
   710  0068                    ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
   711  00F0                    ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
   712  000F                    ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
   713                          
   714  0069                    CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
   715  0008                    CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
   716  0001                    CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
   717                          
   718                          ;------------------------------------------------
   719                          ;  Global Digital Interconnects
   720                          ;------------------------------------------------
   721                          
   722  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   723  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   724  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   725  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   726                          
   727                          ;------------------------------------------------
   728                          ;  Clock and System Control Registers
   729                          ;------------------------------------------------
   730                          
   731  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   732  0080                    OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   733  0040                    OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   734  0020                    OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   735  0010                    OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   736  0008                    OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   737  0004                    OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   738  0002                    OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   739  0001                    OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   740                          
   741  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   742  0003                    OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
   743                          
   744  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   745                          
   746  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   747  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   748  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   749  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   750  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   751  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   752  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   753  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   754  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   755  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   756  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   757  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   758  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   759  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   760  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   761  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   762  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   763  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   764                          
   765  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   766  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   767  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   768                          
   769  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   770  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   771  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   772  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   773                          
   774  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   775  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   776  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   777  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   778  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   779  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   780  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   781  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   782  0000                    VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
   783  0010                    VLT_CR_4V5_POR:       equ 10h    ;    deprecated
   784  0020                    VLT_CR_4V75_POR:      equ 20h    ;    deprecated
   785  0030                    VLT_CR_DISABLE:       equ 30h    ;    deprecated
   786                          
   787  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   788  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   789  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   790  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   791                          
   792  00E7                    DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
   793  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   794  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   795  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   796  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   797                          
   798                          ;;=============================================================================
   799                          ;;      M8C System Macros
   800                          ;;  These macros should be used when their functions are needed.
   801                          ;;=============================================================================
   802                          
   803                          ;----------------------------------------------------
   804                          ;  Swapping Register Banks
   805                          ;----------------------------------------------------
   806                              macro M8C_SetBank0
   807                              and   F, ~FLAG_XIO_MASK
   808  7C6B                        endm
   809                          
   810                              macro M8C_SetBank1
   811                              or    F, FLAG_XIO_MASK
   812  7C6B                        endm
   813                          
   814                          ;----------------------------------------------------
   815                          ;  Global Interrupt Enable/Disable
   816                          ;----------------------------------------------------
   817                              macro M8C_EnableGInt
   818                              or    F, FLAG_GLOBAL_IE
   819  7C6B                        endm
   820                          
   821                              macro M8C_DisableGInt
   822                              and   F, ~FLAG_GLOBAL_IE
   823  7C6B                        endm
   824                          
   825                          ;----------------------------------------------------
   826                          ;  Enable/Disable Interrupt Mask
   827                          ;
   828                          ;  Use the following macros to enable/disable
   829                          ;  bits in the Interrupt mask registers,
   830                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   831                          ;
   832                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   833                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   834                          ;
   835                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   836                          ;        and MASK is the bit set to enable or disable
   837                          ;----------------------------------------------------
   838                          ; Disable Interrupt Bit Mask(s)
   839                              macro M8C_DisableIntMask
   840                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   841  7C6B                        endm
   842                          
   843                          ; Enable Interrupt Bit Mask(s)
   844                              macro M8C_EnableIntMask
   845                              or    reg[@0], @1               ; enable specified interrupt enable bit
   846  7C6B                        endm
   847                          
   848                          ;----------------------------------------------------
   849                          ;  Clear Posted Interrupt Flag Mask
   850                          ;
   851                          ;  Use the following macros to clear the
   852                          ;  bits in the Interrupt Clear registers,
   853                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   854                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   855                          ;
   856                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   857                          ;        and MASK is the bit set to enable or disable
   858                          ;----------------------------------------------------
   859                              macro M8C_ClearIntFlag
   860                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   861  7C6B                        endm
   862                          
   863                          ;----------------------------------------------------
   864                          ;  Power-On Reset & WatchDog Timer Functions
   865                          ;----------------------------------------------------
   866                              macro M8C_EnableWatchDog
   867                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   868  7C6B                        endm
   869                          
   870                              macro M8C_ClearWDT
   871                              mov   reg[RES_WDT], 00h
   872  7C6B                        endm
   873                          
   874                              macro M8C_ClearWDTAndSleep
   875                              mov   reg[RES_WDT], 38h
   876  7C6B                        endm
   877                          
   878                          ;----------------------------------------------------
   879                          ;  CPU Stall for Analog PSoC Block Writes
   880                          ;----------------------------------------------------
   881                              macro M8C_Stall
   882                              or    reg[ASY_CR], ASY_CR_SYNCEN
   883  7C6B                        endm
   884                          
   885                              macro M8C_Unstall
   886                              and   reg[ASY_CR], ~ASY_CR_SYNCEN
   887  7C6B                        endm
   888                          
   889                          ;----------------------------------------------------
   890                          ;  Sleep, CPU Stop & Software Reset
   891                          ;----------------------------------------------------
   892                              macro M8C_Sleep
   893                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   894                              ; The next instruction to be executed depends on the state of the
   895                              ; various interrupt enable bits. If some interrupts are enabled
   896                              ; and the global interrupts are disabled, the next instruction will
   897                              ; be the one that follows the invocation of this macro. If global
   898                              ; interrupts are also enabled then the next instruction will be
   899                              ; from the interrupt vector table. If no interrupts are enabled
   900                              ; then the CPU sleeps forever.
   901  7C6B                        endm
   902                          
   903                              macro M8C_Stop
   904                              ; In general, you probably don't want to do this, but here's how:
   905                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   906                              ; Next instruction to be executed is located in the interrupt
   907                              ; vector table entry for Power-On Reset.
   908  7C6B                        endm
   909                          
   910                              macro M8C_Reset
   911                              ; Restore CPU to the power-on reset state.
   912                              mov A, 0
   913                              SSC
   914                              ; Next non-supervisor instruction will be at interrupt vector 0.
   915  7C6B                        endm
   916                          
   917                          ;----------------------------------------------------
   918                          ; ImageCraft Code Compressor Actions
   919                          ;----------------------------------------------------
   920                              ; Suspend Code Compressor
   921                              ; Must not span a RET or RETI instruction
   922                              ; without resuming code compression
   923                              macro Suspend_CodeCompressor
   924                              or   F, 0
   925  7C6B                        endm
   926                          
   927                              ; Resume Code Compression
   928                              macro Resume_CodeCompressor
   929                              add  SP, 0
   930  7C6B                        endm
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- M8C29xxx Microcontroller Family SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) 2003-2004, Cypress MicroSystems, Inc. All rights reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems 27x6x Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: June 8, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHz:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                              ; legacy names:
    67  00F8                        VOLTAGE_TRIM_2V:                equ      0F8h   ; Table 2 2.7V bandgap voltage trim value
    68  00F9                        OSCILLATOR_TRIM_SLOW_2V_12MHZ:  equ      0F9h   ; Table 2 2.7V SLOW IMO Trim 12MHz, 2.7V
    69  00FC                        OSCILLATOR_TRIM_SLOW_3V_6MHZ:   equ      0FCh   ; Table 2 2.7V SLOW IMO Trim  6MHz, 3.3V
    70  00FD                        OSCILLATOR_TRIM_SLOW_2V_6MHZ:   equ      0FDh   ; Table 2 2.7V SLOW IMO Trim  6MHz, 2.7V
    71                          
    72                          
    73                          ;-----------------------------------------------------------------------------
    74                          ;  MACRO SSC_Action( OpCode )
    75                          ;
    76                          ;  DESCRIPTION:
    77                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    78                          ;     section of Technical Reference Manual and/or Datasheet.
    79                          ;-----------------------------------------------------------------------------
    80                          ;
    81                          ;  ARGUMENTS:
    82                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    83                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    84                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    85                          ;  RETURNS:
    86                          ;     Nothing
    87                          ;
    88                          ;  SIDE EFFECTS:
    89                          ;     The values of the A and X registers are modified
    90                          ;
    91                          ;  PROCEDURE:
    92                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    93                          ;     2) insert the flash Supervisory key in [KEY1]
    94                          ;     3) store function code in A
    95                          ;     4) call the supervisory code
    96                          ;
    97                              macro SSC_Action( OpCode )
    98                          ;   !!! DO NOT CHANGE THIS CODE !!!
    99                          ;       This sequence of opcodes provides a
   100                          ;       signature for the debugger and ICE.
   101                              mov   X, SP                            ; copy SP into X
   102                              mov   A, X                             ; mov to A
   103                              add   A, 3                             ; create 3 byte stack frame
   104                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   105                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   106                              mov   A, @OpCode                       ; load A with specific Flash operation
   107                              SSC                                    ; SSC call the supervisory code
   108                          ;   !!! DO NOT CHANGE THIS CODE !!!
   109  7C6B                        endm
   110                          
   111                          
   112                          ;-----------------------------------------------------------------------------
   113                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
   114                          ;
   115                          ;  DESCRIPTION:
   116                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   117                          ;     registers with values from from the specified flash System Parameter
   118                          ;     table entries. Note that both trim values must come from the same table.
   119                          ;     Also, see M8SSC_Set2TableTrims below.
   120                          ;-----------------------------------------------------------------------------
   121                          ;
   122                          ;  ARGUMENTS:
   123                          ;     BYTE Table     - 0..3 for the desired system parameter table
   124                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   125                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   126                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   127                          ;
   128                          ;  RETURNS:
   129                          ;     Nothing
   130                          ;
   131                          ;  SIDE EFFECTS:
   132                          ;     The values of the A and X registers are modified
   133                          ;
   134                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
   135                              mov A, reg[0xD0]  ; CUR_PP
   136                          	push A
   137                          	mov reg[0xD0], 0
   138                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   139                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   140                              M8C_SetBank1
   141                              mov   A, [@IMO_Trim]
   142                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   143                              mov   A, [@Volt_Trim]
   144                            IF ( @Bypass )
   145                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
   146                            ENDIF
   147                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   148                              M8C_SetBank0
   149                          	pop A
   150                          	mov reg[0xD0], A
   151  7C6B                        endm
   152                          
   153                          
   154                          ;-----------------------------------------------------------------------------
   155                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   159                          ;     registers with values from from the specified flash System Parameter
   160                          ;     table entries. Each trim value comes from a different table.
   161                          ;     Also, see M8SSC_SetTableTrims above.
   162                          ;-----------------------------------------------------------------------------
   163                          ;
   164                          ;  ARGUMENTS:
   165                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   166                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   167                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   168                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   169                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   170                          ;
   171                          ;  RETURNS:
   172                          ;     Nothing
   173                          ;
   174                          ;  SIDE EFFECTS:
   175                          ;     The values of the A and X registers are modified
   176                          ;
   177                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
   178                              mov A, reg[0xD0]  ; CUR_PP
   179                          	push A
   180                          	mov reg[0xD0], 0
   181                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   182                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   183                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   184                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   185                              mov   reg[IMO_TR], A
   186                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   187                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   188                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   189                            IF ( @Bypass )
   190                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
   191                            ENDIF
   192                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   193                              M8C_SetBank0
   194                          	pop A
   195                          	mov reg[0xD0], A
   196  7C6B                        endm
   197                          
   198                          
   199                          ;-----------------------------------------------------------------------------
   200                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
   201                          ;
   202                          ;  DESCRIPTION:
   203                          ;     Loads Bandgap Voltage Trim register with values from from the
   204                          ;     specified flash System Parameter table entry.
   205                          ;-----------------------------------------------------------------------------
   206                          ;
   207                          ;  ARGUMENTS:
   208                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   209                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   210                          ;     BYTE Bypass    - Value for AGNDBYP in the BDG_TR register (justified).
   211                          ;
   212                          ;  RETURNS:
   213                          ;     Nothing
   214                          ;
   215                          ;  SIDE EFFECTS:
   216                          ;     The values of the A and X registers are modified
   217                          ;
   218                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
   219                              mov A, reg[0xD0]  ; CUR_PP
   220                          	push A
   221                          	mov reg[0xD0], 0
   222                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   223                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   224                              M8C_SetBank1
   225                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   226                            IF ( @Bypass )
   227                              or    A, AGND_BYPASS_MASK              ; OR in the bypass setting, if any
   228                            ENDIF
   229                              mov   reg[BDG_TR], A                   ; Update the register value
   230                              M8C_SetBank0
   231                          	pop A
   232                          	mov reg[0xD0], A
   233  7C6B                        endm
   234                          
   235                          
   236                          ;-----------------------------------------------------------------------------
   237                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                          ;
   239                          ;  DESCRIPTION:
   240                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   241                          ;     from the specified flash System Parameter table entry.
   242                          ;-----------------------------------------------------------------------------
   243                          ;
   244                          ;  ARGUMENTS:
   245                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   246                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   247                          ;
   248                          ;  RETURNS:
   249                          ;     Nothing
   250                          ;
   251                          ;  SIDE EFFECTS:
   252                          ;     The values of the A and X registers are modified
   253                          ;
   254                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   255                              mov A, reg[0xD0]  ; CUR_PP
   256                          	push A
   257                          	mov reg[0xD0], 0
   258                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   259                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   260                              M8C_SetBank1
   261                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   262                              mov   reg[IMO_TR], A               ; Update the register value
   263                              M8C_SetBank0
   264                          	pop A
   265                          	mov reg[0xD0], A
   266  7C6B                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 the 29xxx family of PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: June 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress MicroSystems 2004. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          
    16                          
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0007                    SYSTEM_STACK_PAGE: equ 7   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C27x66 and CY8C29x66.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          
    45                          ;  ******* Page Pointer Manipulation Macros *******
    46                          ;
    47                          ;  Most of the following macros are conditionally compiled so they only
    48                          ;  produce code if the large memory model is selected.
    49                          
    50                             ;-----------------------------------------------
    51                             ;  Set Stack Page Macro
    52                             ;-----------------------------------------------
    53                             ;
    54                             ;  DESC: Modify STK_PP in the large or small memory Models.
    55                             ;
    56                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    57                             ;        which stack operations like PUSH and POP store and retrieve their
    58                             ;        data
    59                             ;
    60                             ;  COST: 8 instruction cycles (in LMM only)
    61                          
    62                             macro RAM_SETPAGE_STK( PG_NUMBER )
    63                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    64                                mov reg[STK_PP], @PG_NUMBER
    65                             ENDIF
    66  7C6B                       endm
    67                          
    68                             ;-----------------------------------------------
    69                             ;  Set Current Page Macro
    70                             ;-----------------------------------------------
    71                             ;
    72                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    73                             ;
    74                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    75                             ;        calculation of effective direct-mode address operands.
    76                             ;
    77                             ;  COST: 8 instruction cycles (in LMM only)
    78                          
    79                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    80                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    81                                mov reg[CUR_PP], @PG_NUMBER
    82                             ENDIF
    83  7C6B                       endm
    84                          
    85                             ;-----------------------------------------------
    86                             ;  Set Index Page Macro
    87                             ;-----------------------------------------------
    88                             ;
    89                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    90                             ;
    91                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    92                             ;         calculation of effective index-mode address operands.
    93                             ;
    94                             ;  COST: 8 instruction cycles (in LMM only)
    95                          
    96                             macro RAM_SETPAGE_IDX( PG_NUMBER )
    97                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    98                                mov reg[IDX_PP], @PG_NUMBER
    99                             ENDIF
   100  7C6B                       endm
   101                          
   102                             ;-----------------------------------------------
   103                             ;  Set MVI Read Page Macro
   104                             ;-----------------------------------------------
   105                             ;
   106                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   107                             ;
   108                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   109                             ;        calculation of indirect address operands used in the
   110                             ;        "mvi A, [pFoo]" instructions.
   111                             ;
   112                             ;  COST: 8 instruction cycles (in LMM only)
   113                          
   114                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   115                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   116                                mov reg[MVR_PP], @PG_NUMBER
   117                             ENDIF
   118  7C6B                       endm
   119                          
   120                             ;-----------------------------------------------
   121                             ;  Set MVI Write Page Macro
   122                             ;-----------------------------------------------
   123                             ;
   124                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   125                             ;
   126                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   127                             ;        calculation of indirect address operands used in the
   128                             ;        "mvi [pFoo], A" instructions.
   129                             ;
   130                             ;  COST: 8 instruction cycles (in LMM only)
   131                          
   132                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   133                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   134                                mov reg[MVW_PP], @PG_NUMBER
   135                             ENDIF
   136  7C6B                       endm
   137                          
   138                             ;-----------------------------------------------
   139                             ;  Force Index Page Pointer to Stack Page
   140                             ;-----------------------------------------------
   141                             ;
   142                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   143                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   144                             ;
   145                             ; INPUT: None
   146                             ;
   147                             ;  COST: 8 instruction cycles (in LMM only)
   148                          
   149                             macro RAM_SETPAGE_IDX2STK
   150                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   151                                IF ( SYSTEM_MULTIPAGE_STACK )
   152                                   mov   A, reg[STK_PP]
   153                                   mov   reg[IDX_PP], A
   154                                ELSE
   155                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   156                                ENDIF
   157                             ENDIF
   158  7C6B                       endm
   159                          
   160                             ;-----------------------------------------------
   161                             ;  Change Memory Mode
   162                             ;-----------------------------------------------
   163                             ;
   164                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   165                             ;
   166                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   167                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   168                             ;
   169                             ;  COST: 8 instruction cycles (in LMM only)
   170                          
   171                             macro RAM_CHANGE_PAGE_MODE( MODE )
   172                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   173                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   174                                or    F,  FLAG_PGMODE_MASK & @MODE
   175                             ENDIF
   176  7C6B                       endm
   177                          
   178                             ;-----------------------------------------------
   179                             ;  Set Large Memory Model Native Paging Mode
   180                             ;-----------------------------------------------
   181                             ;
   182                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   183                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   184                             ;        example, in an ISR, when the PGMODE bits have been cleared
   185                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   186                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   187                             ;
   188                             ; INPUT: none
   189                             ;
   190                             ;  COST: 4 instruction cycles (in LMM only)
   191                          
   192                             macro RAM_SET_NATIVE_PAGING
   193                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   194                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   195                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   196                             ENDIF ;  PGMODE LOCKED
   197                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   198                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   199                             ENDIF ; PGMODE FREE
   200                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   201  7C6B                       endm
   202                          
   203                             ;-----------------------------------------------
   204                             ; Restore Large Memory Model Native Paging Mode
   205                             ;-----------------------------------------------
   206                             ;
   207                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   208                             ;        paging mode. Always works because it clears the PGMODE bits
   209                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   210                             ;        for a faster method.
   211                             ;
   212                             ; INPUT: none
   213                             ;
   214                             ;  COST: 8 instruction cycles (in LMM only)
   215                          
   216                             macro RAM_RESTORE_NATIVE_PAGING
   217                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   218                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   219                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   220                             ENDIF ;  PGMODE LOCKED
   221                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   222                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   223                             ENDIF ; PGMODE FREE
   224                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   225  7C6B                       endm
   226                          
   227                             ;-----------------------------------------------
   228                             ; Force indexed addr mode operands to Stack Pg
   229                             ;-----------------------------------------------
   230                             ;
   231                             ;  DESC: Force instructions that use indexed address mode to reference the
   232                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   233                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   234                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   235                             ;
   236                             ; INPUT: none
   237                             ;
   238                             ;  COST: 4 instruction cycles (in LMM only)
   239                          
   240                             macro RAM_X_POINTS_TO_STACKPAGE
   241                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   242                                or   F, FLAG_PGMODE_01b
   243                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   244  7C6B                       endm
   245                          
   246                             ;-----------------------------------------------
   247                             ;  Force indexed addr mode operands to Index Pg
   248                             ;-----------------------------------------------
   249                             ;
   250                             ;  DESC: Permit instructions that use indexed address mode to reference page
   251                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   252                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   253                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   254                             ;
   255                             ; INPUT: none
   256                             ;
   257                             ;  COST: 4 instruction cycles (in LMM only)
   258                          
   259                             macro RAM_X_POINTS_TO_INDEXPAGE
   260                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   261                                and  F, ~FLAG_PGMODE_01b
   262                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   263  7C6B                       endm
   264                          
   265                             ;-----------------------------------------------
   266                             ;  Function Prologue
   267                             ;-----------------------------------------------
   268                             ;
   269                             ;  Prologue for functions that run in the LMM and SMM.
   270                             ;
   271                          
   272                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   273                          
   274                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   275                             ; Nothing to do
   276                             ENDIF ; RAM_USE_CLASS_1
   277                          
   278                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   279                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   280                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   281                                ENDIF
   282                             ENDIF ; RAM_USE_CLASS_2
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   286                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_3
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   291                             ; Nothing to do
   292                             ENDIF ; RAM_USE_CLASS_4
   293                          
   294  7C6B                       endm
   295                          
   296                             ;-----------------------------------------------
   297                             ;  Function Epilogue
   298                             ;-----------------------------------------------
   299                             ;
   300                             ;  Prologue for functions that run in the LMM and SMM.
   301                             ;
   302                          
   303                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   304                          
   305                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   306                             ; Nothing to do
   307                             ENDIF ; RAM_USE_CLASS_1
   308                          
   309                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   310                                RAM_RESTORE_NATIVE_PAGING
   311                             ENDIF ; RAM_USE_CLASS_2
   312                          
   313                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   314                                RAM_RESTORE_NATIVE_PAGING
   315                             ENDIF ; RAM_USE_CLASS_3
   316                          
   317                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   318                             ; Nothing to do
   319                             ENDIF ; RAM_USE_CLASS_4
   320                          
   321  7C6B                       endm
   322                          
   323                             ;-----------------------------------------------
   324                             ;  Preserve Register
   325                             ;-----------------------------------------------
   326                             ;
   327                             ;  DESC: Preserve a register value on the stack
   328                             ;
   329                             ; INPUT: Name or address of register in I/O Space
   330                             ;        The I/O bank is an implicit parameter. That is, this function will
   331                             ;        Access the I/O bank currently specified by the CPU Flag register.
   332                             ;
   333                             ;  USES: CPU 'A' register
   334                             ;
   335                             ;  COST: 9 instruction cycles
   336                          
   337                             macro REG_PRESERVE( IOReg )
   338                             mov   A, reg[ @IOReg ]
   339                             push  A
   340  7C6B                       endm
   341                          
   342                             ;-----------------------------------------------
   343                             ;  Restore Register
   344                             ;-----------------------------------------------
   345                             ;
   346                             ;  DESC: Restore a register value from the stack
   347                             ;
   348                             ; INPUT: Name or address of register in I/O Space
   349                             ;        The I/O bank is an implicit parameter. That is, this function will
   350                             ;        Access the I/O bank currently specified by the CPU Flag register.
   351                             ;
   352                             ;  USES: CPU 'A' register
   353                             ;
   354                             ;  COST: 10 instruction cycles
   355                          
   356                             macro REG_RESTORE( IOReg )
   357                             pop   A
   358                             mov   reg[ @IOReg ], A
   359  7C6B                       endm
   360                          
   361                             ;-----------------------------------------------
   362                             ;  Preserve Volatile Page Pointer Registers
   363                             ;-----------------------------------------------
   364                             ;
   365                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   366                             ;        functions that require on it.
   367                             ;
   368                             ; INPUT: none
   369                             ;
   370                             ;  USES: CPU 'A' register
   371                             ;
   372                             ;  COST: 45 instruction cycles (in LMM only)
   373                          
   374                             macro ISR_PRESERVE_PAGE_POINTERS
   375                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   376                                REG_PRESERVE CUR_PP
   377                                REG_PRESERVE IDX_PP
   378                                REG_PRESERVE MVR_PP
   379                                REG_PRESERVE MVW_PP
   380                             ENDIF
   381  7C6B                       endm
   382                          
   383                             ;-----------------------------------------------
   384                             ;  Restore Volatile Page Pointer Registers
   385                             ;-----------------------------------------------
   386                             ;
   387                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   388                             ;        calling functions that run in the LMM mode and before executing
   389                             ;        the RETI instruction.
   390                             ;
   391                             ; INPUT: none
   392                             ;
   393                             ;  USES: CPU 'A' register
   394                             ;
   395                             ;  COST: 50 instruction cycles (in LMM only)
   396                          
   397                             macro ISR_RESTORE_PAGE_POINTERS
   398                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   399                                REG_RESTORE MVW_PP
   400                                REG_RESTORE MVR_PP
   401                                REG_RESTORE IDX_PP
   402                                REG_RESTORE CUR_PP
   403                             ENDIF
   404  7C6B                       endm
     1                          ; Generated by PSoC Designer ???
     2                          ;
     3                          ;@Id: boot.tpl#851 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  VERSION:    4.18
     7                          ;  DATE:       28 June 2007
     8                          ;
     9                          ;  DESCRIPTION:
    10                          ;  M8C Boot Code for CY8C29xxx microcontroller family.
    11                          ;
    12                          ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    16                          ; the project's root directory to create BOOT.ASM. Any changes made to
    17                          ; BOOT.ASM will be  overwritten every time the project is generated; therfore
    18                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    19                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    20                          ; are not accidentally modified.
    21                          ;
    22                          ;=============================================================================
    23                          
    24                          include ".\lib\GlobalParams.inc"
    25                          include "m8c.inc"
    26                          include "m8ssc.inc"
    27                          include "memory.inc"
    28                          
    29                          ;--------------------------------------
    30                          ; Export Declarations
    31                          ;--------------------------------------
    32                          
    33                          export __Start
    34                          IF	(TOOLCHAIN & HITECH)
    35                          ELSE
    36                          export __bss_start
    37                          export __data_start
    38                          export __idata_start
    39                          export __func_lit_start
    40                          export __text_start
    41                          ENDIF
    42                          export  _bGetPowerSetting
    43                          export   bGetPowerSetting
    44                          
    45                          
    46                          ;--------------------------------------
    47                          ; Optimization flags
    48                          ;--------------------------------------
    49                          ;
    50                          ; To change the value of these flags, modify the file boot.tpl, not
    51                          ; boot.asm. See the notes in the banner comment at the beginning of
    52                          ; this file.
    53                          
    54                          ; Optimization for Assembly language (only) projects and C-language projects
    55                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    56                          ;   Set to 1: Support for C Run-time Environment initialization
    57                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    58                          ;
    59                          IF	(TOOLCHAIN & HITECH)
    60                          ; The C compiler will customize the startup code - it's not required here
    61                          
    62  0000                    C_LANGUAGE_SUPPORT:              equ 0
    63                          ELSE
    64                          C_LANGUAGE_SUPPORT:              equ 1
    65                          ENDIF
    66                          
    67                          
    68                          ; The following equate is required for proper operation. Reseting its value
    69                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    70                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    71                          ; and PLL_Lock must take place within user code. See the family data sheet for
    72                          ; the requirements of starting the ECO and PLL lock mode.
    73                          ;
    74                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    75                          ;                invoking main
    76                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    77                          ;               the time code in main starts executing.
    78                          ;
    79  0001                    WAIT_FOR_32K:                    equ 1
    80                          
    81                          
    82                          ; For historical reasons, by default the boot code uses an lcall instruction
    83                          ; to invoke the user's _main code. If _main executes a return instruction,
    84                          ; boot provides an infinite loop. By changing the following equate from zero
    85                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    86                          ; bytes on the stack which are otherwise required for the return address. If
    87                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    88                          ; release, the C compiler automatically places an infinite loop at the end
    89                          ; of main, rather than a return instruction.)
    90                          ;
    91  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    92                          
    93                          
    94                          ;-----------------------------------------------------------------------------
    95                          ; Interrupt Vector Table
    96                          ;-----------------------------------------------------------------------------
    97                          ;
    98                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    99                          ; a jump instruction to an ISR (Interrupt Service Routine), although
   100                          ; very short ISRs could be encoded within the table itself. Normally,
   101                          ; vector jump targets are modified automatically according to the user
   102                          ; modules selected. This occurs when the 'Generate Application' opera-
   103                          ; tion is run causing PSoC Designer to create boot.asm and the other
   104                          ; configuration files. If you need to hard code a vector, update the
   105                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   106                          ; of this file.
   107                          ;-----------------------------------------------------------------------------
   108                          
   109                              AREA TOP (ROM, ABS, CON)
   110                          
   111  0000                        org   0                        ;Reset Interrupt Vector
   112                          IF	(TOOLCHAIN & HITECH)
   113                          ;   jmp   __Start                  ;C compiler fills in this vector
   114                          ELSE
   115                              jmp   __Start                  ;First instruction executed following a Reset
   116                          ENDIF
   117                          
   118  0004                        org   04h                      ;Supply Monitor Interrupt Vector
   119  0004  30                    halt                           ;Stop execution if power falls too low
   120                          
   121  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   122                              // call	void_handler
   123  0008  7E                    reti
   124                          
   125  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   126                              // call	void_handler
   127  000C  7E                    reti
   128                          
   129  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   130                              // call	void_handler
   131  0010  7E                    reti
   132                          
   133  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   134                              // call	void_handler
   135  0014  7E                    reti
   136                          
   137  0018                        org   18h                      ;VC3 Interrupt Vector
   138                              // call	void_handler
   139  0018  7E                    reti
   140                          
   141  001C                        org   1Ch                      ;GPIO Interrupt Vector
   142                              // call	void_handler
   143  001C  7E                    reti
   144                          
   145  0020                        org   20h                      ;PSoC Block DBB00 Interrupt Vector
   146  0020  7D 6E84               ljmp	_Counter8_ISR
   147  0023  7E                    reti
   148                          
   149  0024                        org   24h                      ;PSoC Block DBB01 Interrupt Vector
   150                              // call	void_handler
   151  0024  7E                    reti
   152                          
   153  0028                        org   28h                      ;PSoC Block DCB02 Interrupt Vector
   154                              // call	void_handler
   155  0028  7E                    reti
   156                          
   157  002C                        org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
   158                              // call	void_handler
   159  002C  7E                    reti
   160                          
   161  0030                        org   30h                      ;PSoC Block DBB10 Interrupt Vector
   162  0030  7D 6E83               ljmp	_Counter8_ltrx_ISR
   163  0033  7E                    reti
   164                          
   165  0034                        org   34h                      ;PSoC Block DBB11 Interrupt Vector
   166                              // call	void_handler
   167  0034  7E                    reti
   168                          
   169  0038                        org   38h                      ;PSoC Block DCB12 Interrupt Vector
   170  0038  7D 70B0               ljmp	_LTRX_TX_ISR
   171  003B  7E                    reti
   172                          
   173  003C                        org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
   174  003C  7D 70B1               ljmp	_LTRX_RX_ISR
   175  003F  7E                    reti
   176                          
   177  0040                        org   40h                      ;PSoC Block DBB20 Interrupt Vector
   178                              // call	void_handler
   179  0040  7E                    reti
   180                          
   181  0044                        org   44h                      ;PSoC Block DBB21 Interrupt Vector
   182                              // call	void_handler
   183  0044  7E                    reti
   184                          
   185  0048                        org   48h                      ;PSoC Block DCB22 Interrupt Vector
   186                              // call	void_handler
   187  0048  7E                    reti
   188                          
   189  004C                        org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
   190  004C  7D 7FB2               ljmp	_Ticker_ISR
   191  004F  7E                    reti
   192                          
   193  0050                        org   50h                      ;PSoC Block DBB30 Interrupt Vector
   194                              // call	void_handler
   195  0050  7E                    reti
   196                          
   197  0054                        org   54h                      ;PSoC Block DBB31 Interrupt Vector
   198                              // call	void_handler
   199  0054  7E                    reti
   200                          
   201  0058                        org   58h                      ;PSoC Block DCB32 Interrupt Vector
   202  0058  7D 742A               ljmp	_OneWire_ISR
   203  005B  7E                    reti
   204                          
   205  005C                        org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
   206                              // call	void_handler
   207  005C  7E                    reti
   208                          
   209  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   210                              // call	void_handler
   211  0060  7E                    reti
   212                          
   213  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   214                              // call	void_handler
   215  0064  7E                    reti
   216                          
   217                          ;-----------------------------------------------------------------------------
   218                          ;  Start of Execution.
   219                          ;-----------------------------------------------------------------------------
   220                          ;  The Supervisory ROM SWBootReset function has already completed the
   221                          ;  calibrate1 process, loading trim values for 5 volt operation.
   222                          ;
   223                          
   224                          IF	(TOOLCHAIN & HITECH)
   225                           	AREA PD_startup(CODE, REL, CON)
   226                          ELSE
   227                              org 68h
   228                          ENDIF
   229  7D04                    __Start:
   230                          
   231                              ; initialize SMP values for voltage stabilization, if required,
   232                              ; leaving power-on reset (POR) level at the default (low) level, at
   233                              ; least for now. 
   234                              ;
   235  7D04  71 10                 M8C_SetBank1
   236  7D06  62 FA 00              mov reg[0FAh], 0				;Reset flash location
   237  7D09  62 E3 80              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   238  7D0C  70 EF                 M8C_SetBank0
   239                          
   240                              ; %53%20%46%46% Apply Erratum 001-05137 workaround
   241  7D0E  50 20                 mov   A, 20h
   242  7D10  28                    romx
   243  7D11  50 40                 mov   A, 40h
   244  7D13  28                    romx
   245  7D14  50 60                 mov   A, 60h
   246  7D16  28                    romx
   247                              ; %45%20%46%46% End workaround
   248                          
   249                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   250                              M8C_EnableWatchDog
   251                          ENDIF
   252                          
   253                          IF ( SELECT_32K )
   254                              or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
   255                          ELSE
   256  7D17  41 FE FB              and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
   257                          ENDIF
   258                          
   259                              ;---------------------------
   260                              ; Set up the Temporary stack
   261                              ;---------------------------
   262                              ; A temporary stack is set up for the SSC instructions.
   263                              ; The real stack start will be assigned later.
   264                              ;
   265  0080                    _stack_start:          equ 80h
   266  7D1A  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   267  7D1C  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   268                          
   269                              ;-----------------------------------------------
   270                              ; Set Power-related Trim & the AGND Bypass bit.
   271                              ;-----------------------------------------------
   272                          
   273                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   274                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
   277                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   278                            IF ( AGND_BYPASS )
   279                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   280                              ; The 5V trim has already been set, but we need to update the AGNDBYP
   281                              ; bit in the write-only BDG_TR register. Recalculate the register
   282                              ; value using the proper trim values.
   283                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   284                              M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
   285                            ENDIF
   286                           ENDIF
   287                          ENDIF ; 5.0 V Operation
   288                          
   289                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   290                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   291                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   292                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
   293                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   294  7D1D  5D D0                 M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
   295                           ENDIF
   296                          ENDIF ; 3.3 Volt Operation
   297                          
   298  7D41  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   299  7D44  55 F9 00              mov  [bSSC_KEYSP], 0
   300                          
   301                              ;---------------------------------------
   302                              ; Initialize Crystal Oscillator and PLL
   303                              ;---------------------------------------
   304                          
   305                          IF ( SELECT_32K & WAIT_FOR_32K )
   306                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   307                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   308                              ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
   309                              ; the ECO to stabilize.
   310                              ;
   311                              M8C_SetBank1
   312                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   313                              M8C_SetBank0
   314                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   315                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   316                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   317                          .WaitFor1s:
   318                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   319                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   320                                                                    ;   since interrupts are not globally enabled
   321                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   322                              ; Either no ECO, or waiting for stable clock is to be done in main
   323  7D47  71 10                 M8C_SetBank1
   324  7D49  62 E0 02              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   325  7D4C  70 EF                 M8C_SetBank0
   326  7D4E  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   327                          
   328                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   329                          
   330                          IF ( PLL_MODE )
   331                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   332                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   333                              ;
   334                              M8C_SetBank1
   335                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   336                              M8C_SetBank0
   337                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   338                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   339                          
   340                          .WaitFor16ms:
   341                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   342                              jz   .WaitFor16ms
   343                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   344                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   345                              M8C_SetBank0
   346                          
   347                          IF      ( WAIT_FOR_32K )
   348                          ELSE ; !( WAIT_FOR_32K )
   349                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   350                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   351                          ENDIF ;(WAIT_FOR_32K)
   352                          ENDIF ;(PLL_MODE)
   353                          
   354                              ;------------------------
   355                              ; Close CT leakage path.
   356                              ;------------------------
   357  7D51  62 71 05              mov   reg[ACB00CR0], 05h
   358  7D54  62 75 05              mov   reg[ACB01CR0], 05h
   359  7D57  62 79 05              mov   reg[ACB02CR0], 05h
   360  7D5A  62 7D 05              mov   reg[ACB03CR0], 05h
   361                          
   362                          
   363                          IF	(TOOLCHAIN & HITECH)
   364                              ;---------------------------------------------
   365                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   366                              ;---------------------------------------------
   367                          	global		__Lstackps
   368  7D5D  50 00             	mov     a,low __Lstackps
   369  7D5F  4E                	swap    a,sp
   370                          
   371                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   372  7D60  62 D1 07              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   373  7D63  62 D3 07              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374  7D66  62 D0 00              RAM_SETPAGE_CUR 0
   375  7D69  62 D5 00              RAM_SETPAGE_MVW 0
   376  7D6C  62 D4 00              RAM_SETPAGE_MVR 0
   377                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   378                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   379                              ELSE
   380  7D6F  71 80                 or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   381                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   382                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   383                          ELSE
   384                              ;---------------------------------------------
   385                              ; ImageCraft Enter the Large Memory Model, if applicable
   386                              ;---------------------------------------------
   387                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   388                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   389                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   390                              swap  A, SP
   391                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   392                              RAM_SETPAGE_CUR 0
   393                              RAM_SETPAGE_MVW 0
   394                              RAM_SETPAGE_MVR 0
   395                          
   396                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   397                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   398                            ELSE
   399                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   400                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   401                          ELSE
   402                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   403                              swap  SP, A
   404                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   405                          ENDIF ;	TOOLCHAIN
   406                          
   407                              ;-------------------------
   408                              ; Load Base Configuration
   409                              ;-------------------------
   410                              ; Load global parameter settings and load the user modules in the
   411                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   412                              ; to minimize start up time; (2) We may still need to play with the
   413                              ; Sleep Timer.
   414                              ;
   415  7D71  7C 7D8E               lcall LoadConfigInit
   416                          
   417                              ;-----------------------------------
   418                              ; Initialize C Run-Time Environment
   419                              ;-----------------------------------
   420                          IF ( C_LANGUAGE_SUPPORT )
   421                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   422                              mov  A,0                           ; clear the 'bss' segment to zero
   423                              mov  [__r0],<__bss_start
   424                          BssLoop:
   425                              cmp  [__r0],<__bss_end
   426                              jz   BssDone
   427                              mvi  [__r0],A
   428                              jmp  BssLoop
   429                          BssDone:
   430                              mov  A,>__idata_start              ; copy idata to data segment
   431                              mov  X,<__idata_start
   432                              mov  [__r0],<__data_start
   433                          IDataLoop:
   434                              cmp  [__r0],<__data_end
   435                              jz   C_RTE_Done
   436                              push A
   437                              romx
   438                              mvi  [__r0],A
   439                              pop  A
   440                              inc  X
   441                              adc  A,0
   442                              jmp  IDataLoop
   443                          
   444                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   445                          
   446                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   447                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   448                                                                 ; to use the Virtual Register page.
   449                          
   450                              ; Dereference the constant (flash) pointer pXIData to access the start
   451                              ; of the extended idata area, "xidata." Xidata follows the end of the
   452                              ; text segment and may have been relocated by the Code Compressor.
   453                              ;
   454                              mov   A, >__pXIData                ; Get the address of the flash
   455                              mov   X, <__pXIData                ;   pointer to the xidata area.
   456                              push  A
   457                              romx                               ; get the MSB of xidata's address
   458                              mov   [__r0], A
   459                              pop   A
   460                              inc   X
   461                              adc   A, 0
   462                              romx                               ; get the LSB of xidata's address
   463                              swap  A, X
   464                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   465                                                                 ;   XIData structure list in flash
   466                              jmp   .AccessStruct
   467                          
   468                              ; Unpack one element in the xidata "structure list" that specifies the
   469                              ; values of C variables. Each structure contains 3 member elements.
   470                              ; The first is a pointer to a contiguous block of RAM to be initial-
   471                              ; ized. Blocks are always 255 bytes or less in length and never cross
   472                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   473                              ; contains 0xFF. There are two formats for the struct depending on the
   474                              ; value in the second member element, an unsigned byte:
   475                              ; (1) If the value of the second element is non-zero, it represents
   476                              ; the 'size' of the block of RAM to be initialized. In this case, the
   477                              ; third member of the struct is an array of bytes of length 'size' and
   478                              ; the bytes are copied to the block of RAM.
   479                              ; (2) If the value of the second element is zero, the block of RAM is
   480                              ; to be cleared to zero. In this case, the third member of the struct
   481                              ; is an unsigned byte containing the number of bytes to clear.
   482                          
   483                          .AccessNextStructLoop:
   484                              inc   X                            ; pXIData++
   485                              adc   A, 0
   486                          .AccessStruct:                         ; Entry point for first block
   487                              ;
   488                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   489                              ;
   490                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   491                              push  A
   492                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   494                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   495                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   496                              pop   A                            ; restore pXIData to [A,X]
   497                              inc   X                            ; pXIData++
   498                              adc   A, 0
   499                              push  A
   500                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   501                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   502                              pop   A                            ; restore pXIData to [A,X]
   503                              inc   X                            ; pXIData++ (point to size)
   504                              adc   A, 0
   505                              push  A
   506                              romx                               ; Get the size (CPU.A <- *pXIData)
   507                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   508                              mov   [__r1], A                    ;             else downcount in __r1
   509                              pop   A                            ; restore pXIData to [A,X]
   510                          
   511                          .CopyNextByteLoop:
   512                              ; For each byte in the structure's array member, copy from flash to RAM.
   513                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   514                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   515                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   516                              ;
   517                              inc   X                            ; pXIData++ (point to next data byte)
   518                              adc   A, 0
   519                              push  A
   520                              romx                               ; Get the data value (CPU.A <- *pXIData)
   521                              mvi   [__r0], A                    ; Transfer the data to RAM
   522                              tst   [__r0], 0xff                 ; Check for page crossing
   523                              jnz   .CopyLoopTail                ;   No crossing, keep going
   524                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   525                              inc   A
   526                              mov   reg[ MVW_PP], A
   527                          .CopyLoopTail:
   528                              pop   A                            ; restore pXIData to [A,X]
   529                              dec   [__r1]                       ; End of this array in flash?
   530                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   531                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   532                          
   533                          .ClearRAMBlockToZero:
   534                              pop   A                            ; restore pXIData to [A,X]
   535                              inc   X                            ; pXIData++ (point to next data byte)
   536                              adc   A, 0
   537                              push  A
   538                              romx                               ; Get the run length (CPU.A <- *pXIData)
   539                              mov   [__r1], A                    ; Initialize downcounter
   540                              mov   A, 0                         ; Initialize source data
   541                          
   542                          .ClearRAMBlockLoop:
   543                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   544                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   545                              ;
   546                              mvi   [__r0], A                    ; Clear a byte
   547                              tst   [__r0], 0xff                 ; Check for page crossing
   548                              jnz   .ClearLoopTail               ;   No crossing, keep going
   549                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   550                              inc   A
   551                              mov   reg[ MVW_PP], A
   552                              mov   A, 0                         ; Restore the zero used for clearing
   553                          .ClearLoopTail:
   554                              dec   [__r1]                       ; Was this the last byte?
   555                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   556                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   557                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   558                          
   559                          .C_RTE_WrapUp:
   560                              pop   A                            ; balance stack
   561                          
   562                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   563                          
   564                          C_RTE_Done:
   565                          
   566                          ENDIF ; C_LANGUAGE_SUPPORT
   567                          
   568                              ;-------------------------------
   569                              ; Voltage Stabilization for SMP
   570                              ;-------------------------------
   571                          
   572                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   573                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   574                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   575                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   576                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   577                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   578                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   579                              M8C_SetBank1
   580                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   581                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   582                              M8C_SetBank0
   583                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   584                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   585                          .WaitFor2ms:
   586                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   587                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   588                          ENDIF ; SMP is operational
   589                          ENDIF ; 5.0V Operation
   590                          
   591                              ;-------------------------------
   592                              ; Set Power-On Reset (POR) Level
   593                              ;-------------------------------
   594  7D74  71 10                 M8C_SetBank1
   595                          
   596                          IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
   597                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
   598                           ELSE                                       ;    No, fast mode
   599                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
   600                                                                      ;       no, set midpoint POR in user code, if desired
   601                            ELSE ; 24HMz                              ;
   602                              or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
   603                            ENDIF ; 24MHz
   604                           ENDIF ; Slow Mode
   605                          ENDIF ; 5.0V Operation
   606                          
   607  7D76  70 EF                 M8C_SetBank0
   608                          
   609                              ;----------------------------
   610                              ; Wrap up and invoke "main"
   611                              ;----------------------------
   612                          
   613                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   614                              ; no interrupts should be enabled now, so may as well clear the register.
   615                              ;
   616  7D78  62 E0 00              mov  reg[INT_MSK0],0
   617                          
   618                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   619                              ; And put decimator in full mode so it does not consume too much current.
   620                              ;
   621  7D7B  71 10                 M8C_SetBank1
   622  7D7D  62 E0 00              mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   623  7D80  43 E7 80              or   reg[DEC_CR2],80h                    ; Put decimator in full mode
   624  7D83  70 EF                 M8C_SetBank0
   625                          
   626                              ; Global Interrupt are NOT enabled, this should be done in main().
   627                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   628                              ; Global Interrupts should be enabled as soon as possible in main().
   629                              ;
   630  7D85  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   631                                                             ; have been set during the boot process.
   632                          IF	(TOOLCHAIN & HITECH)
   633  7D88  7D 7F7B           	ljmp  startup                  ; Jump to C compiler startup code
   634                          ELSE
   635                          IF ENABLE_LJMP_TO_MAIN
   636                              ljmp  _main                    ; goto main (no return)
   637                          ELSE
   638                              lcall _main                    ; call main
   639                          .Exit:
   640                              jmp  .Exit                     ; Wait here after return till power-off or reset
   641                          ENDIF
   642                          ENDIF ; TOOLCHAIN
   643                          
   644                              ;---------------------------------
   645                              ; Library Access to Global Parms
   646                              ;---------------------------------
   647                              ;
   648  7D8B                     bGetPowerSetting:
   649  7D8B                    _bGetPowerSetting:
   650                              ; Returns value of POWER_SETTING in the A register.
   651                              ; No inputs. No Side Effects.
   652                              ;
   653  7D8B  50 08                 mov   A, POWER_SETTING
   654  7D8D  7F                    ret


HI-TECH Software Macro Assembler (PSoC MCU) V9.61PL1
Symbol Table                                                                                               Thu Feb 05 17:14:19 2009

              SELECT_32K_JUST 0000                       ACB00CR0 0071                       ACB01CR0 0075  
           _Counter8_ltrx_ISR 6E83                       ACB02CR0 0079                       ACB03CR0 007D  
                   __Lstackps 0700             C_LANGUAGE_SUPPORT 0000                    _Ticker_ISR 7FB2  
                POWER_SET_3V3 0008                  POWER_SETTING 0008                  POWER_SET_5V0 0010  
                     MAC0_CL0 00EE                       MAC0_CL1 00EF                       MAC1_CL0 00AE  
                     MAC1_CL1 00AF                          MAC_X 00EC                          MAC_Y 00ED  
             SLEEP_TIMER_JUST 0000                       CPU_SCR1 00FE                  _Counter8_ISR 6E84  
             bGetPowerSetting 7D8B                       INT_MSK0 00E0                       OPER_KEY 003A  
                     PLL_MODE 0000                         BDG_TR 00EA                         MAC0_X 00EC  
                       MAC0_Y 00ED                         MAC1_X 00AC                         MAC1_Y 00AD  
                       HITECH 0002                FLAG_PGMODE_10b 0080                         IDX_PP 00D3  
                       CUR_PP 00D0                         IMO_TR 00E8                         INT_VC 00E2  
               CPU_CLOCK_JUST 0000                         MVR_PP 00D4                         MVW_PP 00D5  
            _bGetPowerSetting 7D8B                   WAIT_FOR_32K 0001                         STK_PP 00D1  
                LVD_TBEN_JUST 0000                         VLT_CR 00E3          SWITCH_MODE_PUMP_JUST 0080  
                 _stack_start 0080                   _LTRX_RX_ISR 70B1                   _LTRX_TX_ISR 70B0  
    SYSTEM_LARGE_MEMORY_MODEL 0001         SYSTEM_MULTIPAGE_STACK 0000             POWER_SET_SLOW_IMO 0001  
                PLL_MODE_JUST 0000                        DEC_CR2 00E7      SSCTBL1_TRIM_IMO_3V_24MHZ 00F9  
                    TOOLCHAIN 0002                        MAC_CL0 00EE                        MAC_CL1 00EF  
                      OSC_CR0 00E0                        RES_WDT 00E3                WATCHDOG_ENABLE 0000  
                   bSSC_KEYSP 00F9           CPU_SCR1_ECO_ALLOWED 0004                 LoadConfigInit 7D8E  
          SSCTBL1_TRIM_BGR_3V 00F8                        __Start 7D04               AGND_BYPASS_JUST 0000  
                    bSSC_KEY1 00F8                     TABLE_READ 0006                   _OneWire_ISR 742A  
            OSC_CR0_CPU_12MHz 0002                        startup 7F7B              SYSTEM_STACK_PAGE 0007  
                FLAG_XIO_MASK 0010                     SELECT_32K 0000              TRIP_VOLTAGE_JUST 0000  
   SYSTEM_IDXPG_TRACKS_STK_PP 0000             bSSC_TABLE_TableId 00FA  
